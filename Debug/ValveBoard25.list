
ValveBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011810  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  080119f0  080119f0  000129f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012118  08012118  00014350  2**0
                  CONTENTS
  4 .ARM          00000008  08012118  08012118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012120  08012120  00014350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012120  08012120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012124  08012124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  08012128  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001003c  20000350  08012478  00014350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001038c  08012478  0001438c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002adbc  00000000  00000000  00014380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cd1  00000000  00000000  0003f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002430  00000000  00000000  00044e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bb8  00000000  00000000  00047240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f9c  00000000  00000000  00048df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029a04  00000000  00000000  00070d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc724  00000000  00000000  0009a798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196ebc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab18  00000000  00000000  00196f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001a1a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	080119d8 	.word	0x080119d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	080119d8 	.word	0x080119d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <LTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int LTC2990_Init(LTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c, uint8_t address) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]
	int8_t ack;

	handle->hi2c = hi2c;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	601a      	str	r2, [r3, #0]

	//Initialize current to NAN
	handle->current = NAN;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4a20      	ldr	r2, [pc, #128]	@ (8000d30 <LTC2990_Init+0x98>)
 8000cb0:	611a      	str	r2, [r3, #16]

	handle->i2c_address = address;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	79fa      	ldrb	r2, [r7, #7]
 8000cb6:	711a      	strb	r2, [r3, #4]

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, CLEAR_ALL); // was V1DV2_V3DV4 //
 8000cb8:	22ff      	movs	r2, #255	@ 0xff
 8000cba:	211f      	movs	r1, #31
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f000 f971 	bl	8000fa4 <LTC2990_Set_Mode>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8000cc6:	2064      	movs	r0, #100	@ 0x64
 8000cc8:	f001 f98e 	bl	8001fe8 <HAL_Delay>

	if(ack != 0) {
 8000ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d004      	beq.n	8000cde <LTC2990_Init+0x46>
		CDC_Transmit_Print("Failed to set in Differential Voltage Mode \n");
 8000cd4:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <LTC2990_Init+0x9c>)
 8000cd6:	f000 fb3b 	bl	8001350 <CDC_Transmit_Print>
		while(1);
 8000cda:	bf00      	nop
 8000cdc:	e7fd      	b.n	8000cda <LTC2990_Init+0x42>
	}

	uint8_t reg_check;
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_check);
 8000cde:	f107 0316 	add.w	r3, r7, #22
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 fad8 	bl	800129c <LTC2990_Read_Register>
 8000cec:	4603      	mov	r3, r0
 8000cee:	75fb      	strb	r3, [r7, #23]
	while(reg_check != 0x1F) {
 8000cf0:	e010      	b.n	8000d14 <LTC2990_Init+0x7c>
		CDC_Transmit_Print("NOT SETTING CONTROL REGISTER CORRECTLY\n");
 8000cf2:	4811      	ldr	r0, [pc, #68]	@ (8000d38 <LTC2990_Init+0xa0>)
 8000cf4:	f000 fb2c 	bl	8001350 <CDC_Transmit_Print>
		CDC_Transmit_Print("GOT %X\n", reg_check);
 8000cf8:	7dbb      	ldrb	r3, [r7, #22]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480f      	ldr	r0, [pc, #60]	@ (8000d3c <LTC2990_Init+0xa4>)
 8000cfe:	f000 fb27 	bl	8001350 <CDC_Transmit_Print>
		ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_check);
 8000d02:	f107 0316 	add.w	r3, r7, #22
 8000d06:	461a      	mov	r2, r3
 8000d08:	2101      	movs	r1, #1
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f000 fac6 	bl	800129c <LTC2990_Read_Register>
 8000d10:	4603      	mov	r3, r0
 8000d12:	75fb      	strb	r3, [r7, #23]
	while(reg_check != 0x1F) {
 8000d14:	7dbb      	ldrb	r3, [r7, #22]
 8000d16:	2b1f      	cmp	r3, #31
 8000d18:	d1eb      	bne.n	8000cf2 <LTC2990_Init+0x5a>
	}

	CDC_Transmit_Print("LTC2990 configured for Differential Voltage Monitoring. \n");
 8000d1a:	4809      	ldr	r0, [pc, #36]	@ (8000d40 <LTC2990_Init+0xa8>)
 8000d1c:	f000 fb18 	bl	8001350 <CDC_Transmit_Print>

	//Initial data reading
	LTC2990_Step(handle);
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f000 f811 	bl	8000d48 <LTC2990_Step>

	return 0;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	7fc00000 	.word	0x7fc00000
 8000d34:	080119f0 	.word	0x080119f0
 8000d38:	08011a20 	.word	0x08011a20
 8000d3c:	08011a48 	.word	0x08011a48
 8000d40:	08011a50 	.word	0x08011a50
 8000d44:	00000000 	.word	0x00000000

08000d48 <LTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void LTC2990_Step(LTC2990_Handle_t *handle) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	int8_t data_valid;


	// Read differential voltage V1-V2

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, 0x5F);
 8000d50:	225f      	movs	r2, #95	@ 0x5f
 8000d52:	211f      	movs	r1, #31
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f925 	bl	8000fa4 <LTC2990_Set_Mode>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73fb      	strb	r3, [r7, #15]

	if(ack != 0) {
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d004      	beq.n	8000d70 <LTC2990_Step+0x28>
		CDC_Transmit_Print("Failed to switch mode \n");
 8000d66:	487e      	ldr	r0, [pc, #504]	@ (8000f60 <LTC2990_Step+0x218>)
 8000d68:	f000 faf2 	bl	8001350 <CDC_Transmit_Print>
		while(1);
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <LTC2990_Step+0x24>
	}

	HAL_Delay(50);
 8000d70:	2032      	movs	r0, #50	@ 0x32
 8000d72:	f001 f939 	bl	8001fe8 <HAL_Delay>

	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 f958 	bl	800102c <LTC2990_Trigger_Conversion>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]
	if(ack != 0) {
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <LTC2990_Step+0x48>
		CDC_Transmit_Print("Failed to trigger conversion.");
 8000d88:	4876      	ldr	r0, [pc, #472]	@ (8000f64 <LTC2990_Step+0x21c>)
 8000d8a:	f000 fae1 	bl	8001350 <CDC_Transmit_Print>
		return;
 8000d8e:	e0e0      	b.n	8000f52 <LTC2990_Step+0x20a>
	}

	// Allow time for conversion
	HAL_Delay(100);
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f001 f929 	bl	8001fe8 <HAL_Delay>


	ack = LTC2990_ADC_Read_New_Data(handle, V1_MSB_REG, &adc_code, &data_valid);
 8000d96:	f107 030b 	add.w	r3, r7, #11
 8000d9a:	f107 020c 	add.w	r2, r7, #12
 8000d9e:	2106      	movs	r1, #6
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 f951 	bl	8001048 <LTC2990_ADC_Read_New_Data>
 8000da6:	4603      	mov	r3, r0
 8000da8:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d103      	bne.n	8000dba <LTC2990_Step+0x72>
 8000db2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d019      	beq.n	8000dee <LTC2990_Step+0xa6>
		CDC_Transmit_Print("Error reading Register %x \n", V1_MSB_REG);
 8000dba:	2106      	movs	r1, #6
 8000dbc:	486a      	ldr	r0, [pc, #424]	@ (8000f68 <LTC2990_Step+0x220>)
 8000dbe:	f000 fac7 	bl	8001350 <CDC_Transmit_Print>
		HAL_Delay(50);
 8000dc2:	2032      	movs	r0, #50	@ 0x32
 8000dc4:	f001 f910 	bl	8001fe8 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 8000dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4867      	ldr	r0, [pc, #412]	@ (8000f6c <LTC2990_Step+0x224>)
 8000dd0:	f000 fabe 	bl	8001350 <CDC_Transmit_Print>
		HAL_Delay(50);
 8000dd4:	2032      	movs	r0, #50	@ 0x32
 8000dd6:	f001 f907 	bl	8001fe8 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8000dda:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4863      	ldr	r0, [pc, #396]	@ (8000f70 <LTC2990_Step+0x228>)
 8000de2:	f000 fab5 	bl	8001350 <CDC_Transmit_Print>
		handle->voltages[0] = NAN;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a62      	ldr	r2, [pc, #392]	@ (8000f74 <LTC2990_Step+0x22c>)
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	e017      	b.n	8000e1e <LTC2990_Step+0xd6>
	} else {
		handle->voltages[0] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code) * (28.0/10.0);
 8000dee:	89bb      	ldrh	r3, [r7, #12]
 8000df0:	4619      	mov	r1, r3
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 fa12 	bl	800121c <LTC2990_Code_To_Single_Ended_Voltage>
 8000df8:	ee10 3a10 	vmov	r3, s0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fbcb 	bl	8000598 <__aeabi_f2d>
 8000e02:	a355      	add	r3, pc, #340	@ (adr r3, 8000f58 <LTC2990_Step+0x210>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f7ff fc1e 	bl	8000648 <__aeabi_dmul>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4610      	mov	r0, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	f7ff fef0 	bl	8000bf8 <__aeabi_d2f>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
	}

	ack = LTC2990_ADC_Read_New_Data(handle, V2_MSB_REG, &adc_code, &data_valid);
 8000e1e:	f107 030b 	add.w	r3, r7, #11
 8000e22:	f107 020c 	add.w	r2, r7, #12
 8000e26:	2108      	movs	r1, #8
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f90d 	bl	8001048 <LTC2990_ADC_Read_New_Data>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d103      	bne.n	8000e42 <LTC2990_Step+0xfa>
 8000e3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d019      	beq.n	8000e76 <LTC2990_Step+0x12e>
		CDC_Transmit_Print("Error reading Register %x \n", V2_MSB_REG);
 8000e42:	2108      	movs	r1, #8
 8000e44:	4848      	ldr	r0, [pc, #288]	@ (8000f68 <LTC2990_Step+0x220>)
 8000e46:	f000 fa83 	bl	8001350 <CDC_Transmit_Print>
		HAL_Delay(50);
 8000e4a:	2032      	movs	r0, #50	@ 0x32
 8000e4c:	f001 f8cc 	bl	8001fe8 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 8000e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4845      	ldr	r0, [pc, #276]	@ (8000f6c <LTC2990_Step+0x224>)
 8000e58:	f000 fa7a 	bl	8001350 <CDC_Transmit_Print>
		HAL_Delay(50);
 8000e5c:	2032      	movs	r0, #50	@ 0x32
 8000e5e:	f001 f8c3 	bl	8001fe8 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8000e62:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4841      	ldr	r0, [pc, #260]	@ (8000f70 <LTC2990_Step+0x228>)
 8000e6a:	f000 fa71 	bl	8001350 <CDC_Transmit_Print>
		handle->voltages[0] = NAN;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a40      	ldr	r2, [pc, #256]	@ (8000f74 <LTC2990_Step+0x22c>)
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	e017      	b.n	8000ea6 <LTC2990_Step+0x15e>
	} else {
		handle->voltages[1] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code) * (40.0/10.0);
 8000e76:	89bb      	ldrh	r3, [r7, #12]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 f9ce 	bl	800121c <LTC2990_Code_To_Single_Ended_Voltage>
 8000e80:	ee10 3a10 	vmov	r3, s0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fb87 	bl	8000598 <__aeabi_f2d>
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f78 <LTC2990_Step+0x230>)
 8000e90:	f7ff fbda 	bl	8000648 <__aeabi_dmul>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f7ff feac 	bl	8000bf8 <__aeabi_d2f>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60da      	str	r2, [r3, #12]
	}

	ack = LTC2990_Set_Mode(handle, V1DV2_V3DV4, CLEAR_ALL); // was V1DV2_V3DV4 //
 8000ea6:	22ff      	movs	r2, #255	@ 0xff
 8000ea8:	215e      	movs	r1, #94	@ 0x5e
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f87a 	bl	8000fa4 <LTC2990_Set_Mode>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]

	if(ack != 0) {
 8000eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <LTC2990_Step+0x17e>
		CDC_Transmit_Print("Failed to switch mode \n");
 8000ebc:	4828      	ldr	r0, [pc, #160]	@ (8000f60 <LTC2990_Step+0x218>)
 8000ebe:	f000 fa47 	bl	8001350 <CDC_Transmit_Print>
		while(1);
 8000ec2:	bf00      	nop
 8000ec4:	e7fd      	b.n	8000ec2 <LTC2990_Step+0x17a>
	}

	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f8b0 	bl	800102c <LTC2990_Trigger_Conversion>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73fb      	strb	r3, [r7, #15]
	if(ack != 0) {
 8000ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <LTC2990_Step+0x198>
		CDC_Transmit_Print("Failed to trigger conversion.");
 8000ed8:	4822      	ldr	r0, [pc, #136]	@ (8000f64 <LTC2990_Step+0x21c>)
 8000eda:	f000 fa39 	bl	8001350 <CDC_Transmit_Print>
		return;
 8000ede:	e038      	b.n	8000f52 <LTC2990_Step+0x20a>
	}

	// Allow time for conversion
	HAL_Delay(100);
 8000ee0:	2064      	movs	r0, #100	@ 0x64
 8000ee2:	f001 f881 	bl	8001fe8 <HAL_Delay>

	ack = LTC2990_ADC_Read_New_Data(handle, V3DV4_MSB_REG, &adc_code, &data_valid);
 8000ee6:	f107 030b 	add.w	r3, r7, #11
 8000eea:	f107 020c 	add.w	r2, r7, #12
 8000eee:	210a      	movs	r1, #10
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f8a9 	bl	8001048 <LTC2990_ADC_Read_New_Data>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d103      	bne.n	8000f0a <LTC2990_Step+0x1c2>
 8000f02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d019      	beq.n	8000f3e <LTC2990_Step+0x1f6>
		CDC_Transmit_Print("Error reading Register %x \n", V3DV4_MSB_REG);
 8000f0a:	210a      	movs	r1, #10
 8000f0c:	4816      	ldr	r0, [pc, #88]	@ (8000f68 <LTC2990_Step+0x220>)
 8000f0e:	f000 fa1f 	bl	8001350 <CDC_Transmit_Print>
		HAL_Delay(50);
 8000f12:	2032      	movs	r0, #50	@ 0x32
 8000f14:	f001 f868 	bl	8001fe8 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4813      	ldr	r0, [pc, #76]	@ (8000f6c <LTC2990_Step+0x224>)
 8000f20:	f000 fa16 	bl	8001350 <CDC_Transmit_Print>
		HAL_Delay(50);
 8000f24:	2032      	movs	r0, #50	@ 0x32
 8000f26:	f001 f85f 	bl	8001fe8 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8000f2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480f      	ldr	r0, [pc, #60]	@ (8000f70 <LTC2990_Step+0x228>)
 8000f32:	f000 fa0d 	bl	8001350 <CDC_Transmit_Print>
		handle->current = NAN;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a0e      	ldr	r2, [pc, #56]	@ (8000f74 <LTC2990_Step+0x22c>)
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	e009      	b.n	8000f52 <LTC2990_Step+0x20a>
	} else {
		handle->current = LTC2990_Code_To_Current(handle, adc_code);
 8000f3e:	89bb      	ldrh	r3, [r7, #12]
 8000f40:	4619      	mov	r1, r3
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f904 	bl	8001150 <LTC2990_Code_To_Current>
 8000f48:	eef0 7a40 	vmov.f32	s15, s0
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edc3 7a04 	vstr	s15, [r3, #16]
	}

}
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	66666666 	.word	0x66666666
 8000f5c:	40066666 	.word	0x40066666
 8000f60:	08011a8c 	.word	0x08011a8c
 8000f64:	08011aa4 	.word	0x08011aa4
 8000f68:	08011ac4 	.word	0x08011ac4
 8000f6c:	08011ae0 	.word	0x08011ae0
 8000f70:	08011af8 	.word	0x08011af8
 8000f74:	7fc00000 	.word	0x7fc00000
 8000f78:	40100000 	.word	0x40100000

08000f7c <LTC2990_Get_Single_Ended_Voltage>:
float LTC2990_Get_Current(LTC2990_Handle_t* handle) {
	return handle->current;
}


void LTC2990_Get_Single_Ended_Voltage(LTC2990_Handle_t* handle, float* volts) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	volts[0] = handle->voltages[0];
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	601a      	str	r2, [r3, #0]
	volts[1] = handle->voltages[1];
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	3304      	adds	r3, #4
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68d2      	ldr	r2, [r2, #12]
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LTC2990_Set_Mode>:

int8_t LTC2990_Set_Mode(LTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 8000fb4:	f107 030e 	add.w	r3, r7, #14
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2101      	movs	r1, #1
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f96d 	bl	800129c <LTC2990_Read_Register>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <LTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 8000fce:	4815      	ldr	r0, [pc, #84]	@ (8001024 <LTC2990_Set_Mode+0x80>)
 8000fd0:	f000 f9be 	bl	8001350 <CDC_Transmit_Print>
		return ack;
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	e01f      	b.n	800101a <LTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 8000fda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	b25a      	sxtb	r2, r3
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 8000fee:	7bba      	ldrb	r2, [r7, #14]
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = LTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f978 	bl	80012f4 <LTC2990_Write_Register>
 8001004:	4603      	mov	r3, r0
 8001006:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 8001008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <LTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <LTC2990_Set_Mode+0x84>)
 8001012:	f000 f99d 	bl	8001350 <CDC_Transmit_Print>
	}
	return ack;
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	08011b18 	.word	0x08011b18
 8001028:	08011b40 	.word	0x08011b40

0800102c <LTC2990_Trigger_Conversion>:

int8_t LTC2990_Trigger_Conversion(LTC2990_Handle_t *handle) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	return LTC2990_Write_Register(handle, TRIGGER_REG, 0x01);
 8001034:	2201      	movs	r2, #1
 8001036:	2102      	movs	r1, #2
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f95b 	bl	80012f4 <LTC2990_Write_Register>
 800103e:	4603      	mov	r3, r0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <LTC2990_ADC_Read_New_Data>:


uint8_t LTC2990_ADC_Read_New_Data(LTC2990_Handle_t *handle, uint8_t msb_register_address, uint16_t* adc_code, int8_t* data_valid) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	460b      	mov	r3, r1
 8001056:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 8001058:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105c:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	085b      	lsrs	r3, r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3b01      	subs	r3, #1
 8001066:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 8001068:	e01a      	b.n	80010a0 <LTC2990_ADC_Read_New_Data+0x58>
		ack = LTC2990_Read_Register(handle, STATUS_REG, &status);
 800106a:	f107 0319 	add.w	r3, r7, #25
 800106e:	461a      	mov	r2, r3
 8001070:	2100      	movs	r1, #0
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 f912 	bl	800129c <LTC2990_Read_Register>
 8001078:	4603      	mov	r3, r0
 800107a:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 800107c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <LTC2990_ADC_Read_New_Data+0x40>
			return ack;
 8001084:	7f3b      	ldrb	r3, [r7, #28]
 8001086:	e05a      	b.n	800113e <LTC2990_ADC_Read_New_Data+0xf6>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 8001088:	7e7b      	ldrb	r3, [r7, #25]
 800108a:	461a      	mov	r2, r3
 800108c:	7f7b      	ldrb	r3, [r7, #29]
 800108e:	fa42 f303 	asr.w	r3, r2, r3
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d109      	bne.n	80010ae <LTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
 800109a:	2001      	movs	r0, #1
 800109c:	f000 ffa4 	bl	8001fe8 <HAL_Delay>
	while (--timeout) {
 80010a0:	8bfb      	ldrh	r3, [r7, #30]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	83fb      	strh	r3, [r7, #30]
 80010a6:	8bfb      	ldrh	r3, [r7, #30]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1de      	bne.n	800106a <LTC2990_ADC_Read_New_Data+0x22>
 80010ac:	e000      	b.n	80010b0 <LTC2990_ADC_Read_New_Data+0x68>
			break;
 80010ae:	bf00      	nop
	}


	if (timeout == 0) {
 80010b0:	8bfb      	ldrh	r3, [r7, #30]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d104      	bne.n	80010c0 <LTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 80010b6:	4824      	ldr	r0, [pc, #144]	@ (8001148 <LTC2990_ADC_Read_New_Data+0x100>)
 80010b8:	f000 f94a 	bl	8001350 <CDC_Transmit_Print>
		return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e03e      	b.n	800113e <LTC2990_ADC_Read_New_Data+0xf6>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = LTC2990_Read_Register(handle, msb_register_address, &msb);
 80010c0:	f107 0218 	add.w	r2, r7, #24
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	4619      	mov	r1, r3
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f8e7 	bl	800129c <LTC2990_Read_Register>
 80010ce:	4603      	mov	r3, r0
 80010d0:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 80010d2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <LTC2990_ADC_Read_New_Data+0x96>
		return ack;
 80010da:	7f3b      	ldrb	r3, [r7, #28]
 80010dc:	e02f      	b.n	800113e <LTC2990_ADC_Read_New_Data+0xf6>
	}

	ack = LTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f107 0217 	add.w	r2, r7, #23
 80010e8:	4619      	mov	r1, r3
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 f8d6 	bl	800129c <LTC2990_Read_Register>
 80010f0:	4603      	mov	r3, r0
 80010f2:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 80010f4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <LTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 80010fc:	7f3b      	ldrb	r3, [r7, #28]
 80010fe:	e01e      	b.n	800113e <LTC2990_ADC_Read_New_Data+0xf6>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 8001100:	7e3b      	ldrb	r3, [r7, #24]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21b      	sxth	r3, r3
 800110e:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 8001110:	8b7b      	ldrh	r3, [r7, #26]
 8001112:	0bdb      	lsrs	r3, r3, #15
 8001114:	b29b      	uxth	r3, r3
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	b25a      	sxtb	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x7FFF;
 8001122:	8b7b      	ldrh	r3, [r7, #26]
 8001124:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001128:	b29a      	uxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	801a      	strh	r2, [r3, #0]


	return (*data_valid == 1) ? 0 : 1;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	f993 3000 	ldrsb.w	r3, [r3]
 8001134:	2b01      	cmp	r3, #1
 8001136:	bf14      	ite	ne
 8001138:	2301      	movne	r3, #1
 800113a:	2300      	moveq	r3, #0
 800113c:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
 800113e:	4618      	mov	r0, r3
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	08011b68 	.word	0x08011b68
 800114c:	00000000 	.word	0x00000000

08001150 <LTC2990_Code_To_Current>:

float LTC2990_Code_To_Current(LTC2990_Handle_t *handle, uint16_t adc_code) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	81fb      	strh	r3, [r7, #14]


	if(adc_code & 0x4000) { //If the code is negative //was 0x4000
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00d      	beq.n	8001186 <LTC2990_Code_To_Current+0x36>
		CDC_Transmit_Print("Negative??? \r\n");
 800116a:	482b      	ldr	r0, [pc, #172]	@ (8001218 <LTC2990_Code_To_Current+0xc8>)
 800116c:	f000 f8f0 	bl	8001350 <CDC_Transmit_Print>
		adc_code = (adc_code ^ 0x3FFF) + 1;// Two's compliment //was 0x7FFF
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	f483 537f 	eor.w	r3, r3, #16320	@ 0x3fc0
 8001176:	f083 033f 	eor.w	r3, r3, #63	@ 0x3f
 800117a:	b29b      	uxth	r3, r3
 800117c:	3301      	adds	r3, #1
 800117e:	807b      	strh	r3, [r7, #2]
		sign = -1;
 8001180:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001184:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800118c:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * CSINGLE_ENDED_LSB;
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001198:	ee17 0a90 	vmov	r0, s15
 800119c:	f7ff f9fc 	bl	8000598 <__aeabi_f2d>
 80011a0:	a319      	add	r3, pc, #100	@ (adr r3, 8001208 <LTC2990_Code_To_Current+0xb8>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fa4f 	bl	8000648 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fd21 	bl	8000bf8 <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	60bb      	str	r3, [r7, #8]
	voltage /= RSENSE;
 80011ba:	68b8      	ldr	r0, [r7, #8]
 80011bc:	f7ff f9ec 	bl	8000598 <__aeabi_f2d>
 80011c0:	a313      	add	r3, pc, #76	@ (adr r3, 8001210 <LTC2990_Code_To_Current+0xc0>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fb69 	bl	800089c <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fd11 	bl	8000bf8 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	60bb      	str	r3, [r7, #8]
	voltage *= sign;
 80011da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	ee07 3a90 	vmov	s15, r3
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	ac083127 	.word	0xac083127
 800120c:	3ef45a1c 	.word	0x3ef45a1c
 8001210:	47ae147b 	.word	0x47ae147b
 8001214:	3f947ae1 	.word	0x3f947ae1
 8001218:	08011b7c 	.word	0x08011b7c

0800121c <LTC2990_Code_To_Single_Ended_Voltage>:
	voltage *= sign;

	return voltage;
}

float LTC2990_Code_To_Single_Ended_Voltage(LTC2990_Handle_t *handle, uint16_t adc_code) {
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 8001228:	2301      	movs	r3, #1
 800122a:	81fb      	strh	r3, [r7, #14]


	if(adc_code & 0x4000) { //If the code is negative //was 0x4000
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <LTC2990_Code_To_Single_Ended_Voltage+0x30>
		adc_code = (adc_code ^ 0x3FFF) + 1;// Two's compliment //was 0x7FFF
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	f483 537f 	eor.w	r3, r3, #16320	@ 0x3fc0
 800123c:	f083 033f 	eor.w	r3, r3, #63	@ 0x3f
 8001240:	b29b      	uxth	r3, r3
 8001242:	3301      	adds	r3, #1
 8001244:	807b      	strh	r3, [r7, #2]
		sign = -1;
 8001246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800124a:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001252:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * VSINGLE_ENDED_LSB;
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001298 <LTC2990_Code_To_Single_Ended_Voltage+0x7c>
 8001262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001266:	edc7 7a02 	vstr	s15, [r7, #8]
	voltage *= sign;
 800126a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001276:	ed97 7a02 	vldr	s14, [r7, #8]
 800127a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127e:	edc7 7a02 	vstr	s15, [r7, #8]


	return voltage;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	ee07 3a90 	vmov	s15, r3
}
 8001288:	eeb0 0a67 	vmov.f32	s0, s15
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	39a00000 	.word	0x39a00000

0800129c <LTC2990_Read_Register>:


int8_t LTC2990_Read_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	460b      	mov	r3, r1
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b299      	uxth	r1, r3
 80012b6:	7afb      	ldrb	r3, [r7, #11]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	2301      	movs	r3, #1
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2301      	movs	r3, #1
 80012ca:	f003 f821 	bl	8004310 <HAL_I2C_Mem_Read>
 80012ce:	4603      	mov	r3, r0
 80012d0:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK) {
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <LTC2990_Read_Register+0x40>
		return 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	e005      	b.n	80012e8 <LTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	4619      	mov	r1, r3
 80012e0:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <LTC2990_Read_Register+0x54>)
 80012e2:	f000 f835 	bl	8001350 <CDC_Transmit_Print>
	return 1;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	08011b8c 	.word	0x08011b8c

080012f4 <LTC2990_Write_Register>:

int8_t LTC2990_Write_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af04      	add	r7, sp, #16
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
 8001300:	4613      	mov	r3, r2
 8001302:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b299      	uxth	r1, r3
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	b29a      	uxth	r2, r3
 8001314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1cbb      	adds	r3, r7, #2
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	f002 fee0 	bl	80040e8 <HAL_I2C_Mem_Write>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK) {
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <LTC2990_Write_Register+0x42>
		return 0;
 8001332:	2300      	movs	r3, #0
 8001334:	e005      	b.n	8001342 <LTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	4619      	mov	r1, r3
 800133a:	4804      	ldr	r0, [pc, #16]	@ (800134c <LTC2990_Write_Register+0x58>)
 800133c:	f000 f808 	bl	8001350 <CDC_Transmit_Print>

	return 1;
 8001340:	2301      	movs	r3, #1
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	08011bb4 	.word	0x08011bb4

08001350 <CDC_Transmit_Print>:
/* USER CODE BEGIN 0 */

#define PRINT_BUFFER_SIZE     256

void CDC_Transmit_Print(const char *format, ...)
{
 8001350:	b40f      	push	{r0, r1, r2, r3}
 8001352:	b580      	push	{r7, lr}
 8001354:	b0c2      	sub	sp, #264	@ 0x108
 8001356:	af00      	add	r7, sp, #0
    char buf[PRINT_BUFFER_SIZE];
    va_list  args;
    va_start(args, format);
 8001358:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800135c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001364:	601a      	str	r2, [r3, #0]
    int len = vsnprintf(buf, sizeof(buf), format, args);
 8001366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800136a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800136e:	1d38      	adds	r0, r7, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001376:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800137a:	f00e f9bd 	bl	800f6f8 <vsniprintf>
 800137e:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(args);
    if (len <= 0) {
 8001382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001386:	2b00      	cmp	r3, #0
 8001388:	dd10      	ble.n	80013ac <CDC_Transmit_Print+0x5c>
        return;
    }
    if (len > (PRINT_BUFFER_SIZE - 1)) {
 800138a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800138e:	2bff      	cmp	r3, #255	@ 0xff
 8001390:	dd02      	ble.n	8001398 <CDC_Transmit_Print+0x48>
        len = PRINT_BUFFER_SIZE - 1;
 8001392:	23ff      	movs	r3, #255	@ 0xff
 8001394:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }
    CDC_Transmit_FS((uint8_t*)buf, (uint16_t)len);
 8001398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800139c:	b29b      	uxth	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00d f815 	bl	800e3d4 <CDC_Transmit_FS>
 80013aa:	e000      	b.n	80013ae <CDC_Transmit_Print+0x5e>
        return;
 80013ac:	bf00      	nop
}
 80013ae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80013b2:	46bd      	mov	sp, r7
 80013b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013b8:	b004      	add	sp, #16
 80013ba:	4770      	bx	lr

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c0:	f000 fddb 	bl	8001f7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 f84a 	bl	800145c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f000 f984 	bl	80016d4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80013cc:	f000 f888 	bl	80014e0 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 80013d0:	f000 f8f8 	bl	80015c4 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 80013d4:	f000 f93e 	bl	8001654 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_FDCAN_Start(&hfdcan2);
 80013d8:	4814      	ldr	r0, [pc, #80]	@ (800142c <main+0x70>)
 80013da:	f002 fac9 	bl	8003970 <HAL_FDCAN_Start>

  /* Init scheduler */
  osKernelInitialize();
 80013de:	f009 ff9d 	bl	800b31c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorQueue */
  sensorQueueHandle = osMessageQueueNew (16, sizeof(valveBoardPayload_t), &sensorQueue_attributes);
 80013e2:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <main+0x74>)
 80013e4:	210c      	movs	r1, #12
 80013e6:	2010      	movs	r0, #16
 80013e8:	f00a f890 	bl	800b50c <osMessageQueueNew>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a11      	ldr	r2, [pc, #68]	@ (8001434 <main+0x78>)
 80013f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED */
  blinkLEDHandle = osThreadNew(startBlinkLED, NULL, &blinkLED_attributes);
 80013f2:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <main+0x7c>)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4811      	ldr	r0, [pc, #68]	@ (800143c <main+0x80>)
 80013f8:	f009 ffda 	bl	800b3b0 <osThreadNew>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a10      	ldr	r2, [pc, #64]	@ (8001440 <main+0x84>)
 8001400:	6013      	str	r3, [r2, #0]

  /* creation of readInstrumenta */
  readInstrumentaHandle = osThreadNew(startReadInstrumentation, NULL, &readInstrumenta_attributes);
 8001402:	4a10      	ldr	r2, [pc, #64]	@ (8001444 <main+0x88>)
 8001404:	2100      	movs	r1, #0
 8001406:	4810      	ldr	r0, [pc, #64]	@ (8001448 <main+0x8c>)
 8001408:	f009 ffd2 	bl	800b3b0 <osThreadNew>
 800140c:	4603      	mov	r3, r0
 800140e:	4a0f      	ldr	r2, [pc, #60]	@ (800144c <main+0x90>)
 8001410:	6013      	str	r3, [r2, #0]

  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 8001412:	4a0f      	ldr	r2, [pc, #60]	@ (8001450 <main+0x94>)
 8001414:	2100      	movs	r1, #0
 8001416:	480f      	ldr	r0, [pc, #60]	@ (8001454 <main+0x98>)
 8001418:	f009 ffca 	bl	800b3b0 <osThreadNew>
 800141c:	4603      	mov	r3, r0
 800141e:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <main+0x9c>)
 8001420:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001422:	f009 ff9f 	bl	800b364 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001426:	bf00      	nop
 8001428:	e7fd      	b.n	8001426 <main+0x6a>
 800142a:	bf00      	nop
 800142c:	200003d8 	.word	0x200003d8
 8001430:	08011d64 	.word	0x08011d64
 8001434:	2000049c 	.word	0x2000049c
 8001438:	08011cf8 	.word	0x08011cf8
 800143c:	0800184d 	.word	0x0800184d
 8001440:	20000490 	.word	0x20000490
 8001444:	08011d1c 	.word	0x08011d1c
 8001448:	08001871 	.word	0x08001871
 800144c:	20000494 	.word	0x20000494
 8001450:	08011d40 	.word	0x08011d40
 8001454:	0800191d 	.word	0x0800191d
 8001458:	20000498 	.word	0x20000498

0800145c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b094      	sub	sp, #80	@ 0x50
 8001460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	2238      	movs	r2, #56	@ 0x38
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f00e f952 	bl	800f714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001482:	f005 f8b9 	bl	80065f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001486:	2322      	movs	r3, #34	@ 0x22
 8001488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001490:	2340      	movs	r3, #64	@ 0x40
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001494:	2301      	movs	r3, #1
 8001496:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 f95d 	bl	8006760 <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80014ac:	f000 fa7a 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b4:	2301      	movs	r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f005 fc5b 	bl	8006d84 <HAL_RCC_ClockConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80014d4:	f000 fa66 	bl	80019a4 <Error_Handler>
  }
}
 80014d8:	bf00      	nop
 80014da:	3750      	adds	r7, #80	@ 0x50
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2220      	movs	r2, #32
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00e f911 	bl	800f714 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 80014f4:	4a31      	ldr	r2, [pc, #196]	@ (80015bc <MX_ADC3_Init+0xdc>)
 80014f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014f8:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 80014fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001500:	4b2d      	ldr	r3, [pc, #180]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001506:	4b2c      	ldr	r3, [pc, #176]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800150c:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001512:	4b29      	ldr	r3, [pc, #164]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001518:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 800151a:	2204      	movs	r2, #4
 800151c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800151e:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001520:	2200      	movs	r2, #0
 8001522:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001524:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001526:	2200      	movs	r2, #0
 8001528:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800152a:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 800152c:	2201      	movs	r2, #1
 800152e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 800153a:	2200      	movs	r2, #0
 800153c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 800154e:	2200      	movs	r2, #0
 8001550:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 800155c:	220c      	movs	r2, #12
 800155e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001560:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001562:	2200      	movs	r2, #0
 8001564:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001568:	2200      	movs	r2, #0
 800156a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 800156e:	2201      	movs	r2, #1
 8001570:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001572:	4811      	ldr	r0, [pc, #68]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 8001574:	f000 ff86 	bl	8002484 <HAL_ADC_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC3_Init+0xa2>
  {
    Error_Handler();
 800157e:	f000 fa11 	bl	80019a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001582:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <MX_ADC3_Init+0xe0>)
 8001584:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001586:	2306      	movs	r3, #6
 8001588:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800158e:	237f      	movs	r3, #127	@ 0x7f
 8001590:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001592:	2304      	movs	r3, #4
 8001594:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <MX_ADC3_Init+0xd8>)
 80015a0:	f001 faea 	bl	8002b78 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015aa:	f000 f9fb 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000036c 	.word	0x2000036c
 80015bc:	50000400 	.word	0x50000400
 80015c0:	14f00020 	.word	0x14f00020

080015c4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <MX_FDCAN2_Init+0x88>)
 80015ca:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <MX_FDCAN2_Init+0x8c>)
 80015cc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <MX_FDCAN2_Init+0x88>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <MX_FDCAN2_Init+0x88>)
 80015d6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015da:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <MX_FDCAN2_Init+0x88>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MX_FDCAN2_Init+0x88>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <MX_FDCAN2_Init+0x88>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80015ee:	4b17      	ldr	r3, [pc, #92]	@ (800164c <MX_FDCAN2_Init+0x88>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80015f4:	4b15      	ldr	r3, [pc, #84]	@ (800164c <MX_FDCAN2_Init+0x88>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <MX_FDCAN2_Init+0x88>)
 80015fc:	2210      	movs	r2, #16
 80015fe:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <MX_FDCAN2_Init+0x88>)
 8001602:	223f      	movs	r2, #63	@ 0x3f
 8001604:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_FDCAN2_Init+0x88>)
 8001608:	2210      	movs	r2, #16
 800160a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_FDCAN2_Init+0x88>)
 800160e:	2201      	movs	r2, #1
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_FDCAN2_Init+0x88>)
 8001614:	2204      	movs	r2, #4
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_FDCAN2_Init+0x88>)
 800161a:	220d      	movs	r2, #13
 800161c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_FDCAN2_Init+0x88>)
 8001620:	2202      	movs	r2, #2
 8001622:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_FDCAN2_Init+0x88>)
 8001626:	2201      	movs	r2, #1
 8001628:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <MX_FDCAN2_Init+0x88>)
 800162c:	2201      	movs	r2, #1
 800162e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_FDCAN2_Init+0x88>)
 8001632:	2200      	movs	r2, #0
 8001634:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_FDCAN2_Init+0x88>)
 8001638:	f002 f840 	bl	80036bc <HAL_FDCAN_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8001642:	f000 f9af 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200003d8 	.word	0x200003d8
 8001650:	40006800 	.word	0x40006800

08001654 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_I2C2_Init+0x74>)
 800165a:	4a1c      	ldr	r2, [pc, #112]	@ (80016cc <MX_I2C2_Init+0x78>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <MX_I2C2_Init+0x74>)
 8001660:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <MX_I2C2_Init+0x7c>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001664:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <MX_I2C2_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <MX_I2C2_Init+0x74>)
 800166c:	2201      	movs	r2, #1
 800166e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001670:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_I2C2_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_I2C2_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_I2C2_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_I2C2_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_I2C2_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800168e:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <MX_I2C2_Init+0x74>)
 8001690:	f002 fc8f 	bl	8003fb2 <HAL_I2C_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800169a:	f000 f983 	bl	80019a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800169e:	2100      	movs	r1, #0
 80016a0:	4809      	ldr	r0, [pc, #36]	@ (80016c8 <MX_I2C2_Init+0x74>)
 80016a2:	f003 fa11 	bl	8004ac8 <HAL_I2CEx_ConfigAnalogFilter>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016ac:	f000 f97a 	bl	80019a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_I2C2_Init+0x74>)
 80016b4:	f003 fa53 	bl	8004b5e <HAL_I2CEx_ConfigDigitalFilter>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016be:	f000 f971 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000043c 	.word	0x2000043c
 80016cc:	40005800 	.word	0x40005800
 80016d0:	00503d58 	.word	0x00503d58

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b56      	ldr	r3, [pc, #344]	@ (8001844 <MX_GPIO_Init+0x170>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	4a55      	ldr	r2, [pc, #340]	@ (8001844 <MX_GPIO_Init+0x170>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f6:	4b53      	ldr	r3, [pc, #332]	@ (8001844 <MX_GPIO_Init+0x170>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001702:	4b50      	ldr	r3, [pc, #320]	@ (8001844 <MX_GPIO_Init+0x170>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	4a4f      	ldr	r2, [pc, #316]	@ (8001844 <MX_GPIO_Init+0x170>)
 8001708:	f043 0320 	orr.w	r3, r3, #32
 800170c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170e:	4b4d      	ldr	r3, [pc, #308]	@ (8001844 <MX_GPIO_Init+0x170>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	f003 0320 	and.w	r3, r3, #32
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	4b4a      	ldr	r3, [pc, #296]	@ (8001844 <MX_GPIO_Init+0x170>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	4a49      	ldr	r2, [pc, #292]	@ (8001844 <MX_GPIO_Init+0x170>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001726:	4b47      	ldr	r3, [pc, #284]	@ (8001844 <MX_GPIO_Init+0x170>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b44      	ldr	r3, [pc, #272]	@ (8001844 <MX_GPIO_Init+0x170>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a43      	ldr	r2, [pc, #268]	@ (8001844 <MX_GPIO_Init+0x170>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4b41      	ldr	r3, [pc, #260]	@ (8001844 <MX_GPIO_Init+0x170>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Solenoid_OUT_Pin|Emergency_Valve_OUT_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001750:	483d      	ldr	r0, [pc, #244]	@ (8001848 <MX_GPIO_Init+0x174>)
 8001752:	f002 fbd9 	bl	8003f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800175c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001760:	f002 fbd2 	bl	8003f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EMER_VALVE_IN_Pin */
  GPIO_InitStruct.Pin = EMER_VALVE_IN_Pin;
 8001764:	2301      	movs	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001768:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_VALVE_IN_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4833      	ldr	r0, [pc, #204]	@ (8001848 <MX_GPIO_Init+0x174>)
 800177a:	f002 fa43 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOLENOID_IN_Pin */
  GPIO_InitStruct.Pin = SOLENOID_IN_Pin;
 800177e:	2302      	movs	r3, #2
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001782:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SOLENOID_IN_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	482d      	ldr	r0, [pc, #180]	@ (8001848 <MX_GPIO_Init+0x174>)
 8001794:	f002 fa36 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : FC_FAULT_Pin */
  GPIO_InitStruct.Pin = FC_FAULT_Pin;
 8001798:	2304      	movs	r3, #4
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FC_FAULT_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4826      	ldr	r0, [pc, #152]	@ (8001848 <MX_GPIO_Init+0x174>)
 80017ae:	f002 fa29 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Solenoid_OUT_Pin Emergency_Valve_OUT_Pin */
  GPIO_InitStruct.Pin = Solenoid_OUT_Pin|Emergency_Valve_OUT_Pin;
 80017b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	481f      	ldr	r0, [pc, #124]	@ (8001848 <MX_GPIO_Init+0x174>)
 80017cc:	f002 fa1a 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_LED_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin;
 80017d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRONT_LED_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ec:	f002 fa0a 	bl	8003c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2105      	movs	r1, #5
 80017f4:	2006      	movs	r0, #6
 80017f6:	f001 ff39 	bl	800366c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017fa:	2006      	movs	r0, #6
 80017fc:	f001 ff50 	bl	80036a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2105      	movs	r1, #5
 8001804:	2007      	movs	r0, #7
 8001806:	f001 ff31 	bl	800366c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800180a:	2007      	movs	r0, #7
 800180c:	f001 ff48 	bl	80036a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2105      	movs	r1, #5
 8001814:	2008      	movs	r0, #8
 8001816:	f001 ff29 	bl	800366c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800181a:	2008      	movs	r0, #8
 800181c:	f001 ff40 	bl	80036a0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* Configure PB13 as analog for ADC3_IN5 */
  GPIO_InitStruct.Pin  = GPIO_PIN_13;
 8001820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001826:	2303      	movs	r3, #3
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4804      	ldr	r0, [pc, #16]	@ (8001848 <MX_GPIO_Init+0x174>)
 8001836:	f002 f9e5 	bl	8003c04 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	@ 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	48000400 	.word	0x48000400

0800184c <startBlinkLED>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startBlinkLED */
void startBlinkLED(void *argument)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8001854:	f00c fd00 	bl	800e258 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001858:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800185c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001860:	f002 fb6a 	bl	8003f38 <HAL_GPIO_TogglePin>
    osDelay(100);
 8001864:	2064      	movs	r0, #100	@ 0x64
 8001866:	f009 fe36 	bl	800b4d6 <osDelay>
	HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 800186a:	bf00      	nop
 800186c:	e7f4      	b.n	8001858 <startBlinkLED+0xc>
	...

08001870 <startReadInstrumentation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadInstrumentation */
void startReadInstrumentation(void *argument)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadInstrumentation */
	LTC2990_Init(&LTC2990_Handle, &hi2c2, LTC2990_I2C_ADDRESS);
 8001878:	224c      	movs	r2, #76	@ 0x4c
 800187a:	4921      	ldr	r1, [pc, #132]	@ (8001900 <startReadInstrumentation+0x90>)
 800187c:	4821      	ldr	r0, [pc, #132]	@ (8001904 <startReadInstrumentation+0x94>)
 800187e:	f7ff fa0b 	bl	8000c98 <LTC2990_Init>
  for(;;)
  {
	float raw_voltages[2];
	valveBoardPayload_t payload;

	HAL_ADC_Start(&hadc3);
 8001882:	4821      	ldr	r0, [pc, #132]	@ (8001908 <startReadInstrumentation+0x98>)
 8001884:	f000 ffac 	bl	80027e0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3,20);
 8001888:	2114      	movs	r1, #20
 800188a:	481f      	ldr	r0, [pc, #124]	@ (8001908 <startReadInstrumentation+0x98>)
 800188c:	f001 f872 	bl	8002974 <HAL_ADC_PollForConversion>
	payload.pressure = HAL_ADC_GetValue(&hadc3);
 8001890:	481d      	ldr	r0, [pc, #116]	@ (8001908 <startReadInstrumentation+0x98>)
 8001892:	f001 f963 	bl	8002b5c <HAL_ADC_GetValue>
 8001896:	4603      	mov	r3, r0
 8001898:	617b      	str	r3, [r7, #20]

	LTC2990_Step(&LTC2990_Handle);
 800189a:	481a      	ldr	r0, [pc, #104]	@ (8001904 <startReadInstrumentation+0x94>)
 800189c:	f7ff fa54 	bl	8000d48 <LTC2990_Step>

	LTC2990_Get_Single_Ended_Voltage(&LTC2990_Handle, raw_voltages);
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	4619      	mov	r1, r3
 80018a6:	4817      	ldr	r0, [pc, #92]	@ (8001904 <startReadInstrumentation+0x94>)
 80018a8:	f7ff fb68 	bl	8000f7c <LTC2990_Get_Single_Ended_Voltage>


	payload.voltages[0] = raw_voltages[0];
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	60fb      	str	r3, [r7, #12]
	payload.voltages[1] = raw_voltages[1];
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	613b      	str	r3, [r7, #16]

	osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <startReadInstrumentation+0x9c>)
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	f107 010c 	add.w	r1, r7, #12
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018c0:	2200      	movs	r2, #0
 80018c2:	f009 fe97 	bl	800b5f4 <osMessageQueuePut>

	CDC_Transmit_Print("Voltage 1: %f \r\n", payload.voltages[0]);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe65 	bl	8000598 <__aeabi_f2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	480f      	ldr	r0, [pc, #60]	@ (8001910 <startReadInstrumentation+0xa0>)
 80018d4:	f7ff fd3c 	bl	8001350 <CDC_Transmit_Print>
	CDC_Transmit_Print("Voltage 2: %f \r\n", payload.voltages[1]);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe5c 	bl	8000598 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	480b      	ldr	r0, [pc, #44]	@ (8001914 <startReadInstrumentation+0xa4>)
 80018e6:	f7ff fd33 	bl	8001350 <CDC_Transmit_Print>
	CDC_Transmit_Print("ADC Data: %d \r\n", payload.pressure);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	4619      	mov	r1, r3
 80018ee:	480a      	ldr	r0, [pc, #40]	@ (8001918 <startReadInstrumentation+0xa8>)
 80018f0:	f7ff fd2e 	bl	8001350 <CDC_Transmit_Print>

    osDelay(50);
 80018f4:	2032      	movs	r0, #50	@ 0x32
 80018f6:	f009 fdee 	bl	800b4d6 <osDelay>
  {
 80018fa:	bf00      	nop
 80018fc:	e7c1      	b.n	8001882 <startReadInstrumentation+0x12>
 80018fe:	bf00      	nop
 8001900:	2000043c 	.word	0x2000043c
 8001904:	200004a0 	.word	0x200004a0
 8001908:	2000036c 	.word	0x2000036c
 800190c:	2000049c 	.word	0x2000049c
 8001910:	08011c3c 	.word	0x08011c3c
 8001914:	08011c50 	.word	0x08011c50
 8001918:	08011c64 	.word	0x08011c64

0800191c <StartSendMessage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 800191c:	b5b0      	push	{r4, r5, r7, lr}
 800191e:	b092      	sub	sp, #72	@ 0x48
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendMessage */
  /* Infinite loop */
	valveBoardPayload_t payload;
	  uint8_t txBuf[sizeof(valveBoardPayload_t)];
	  FDCAN_TxHeaderTypeDef txHeader = {
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <StartSendMessage+0x58>)
 8001926:	f107 040c 	add.w	r4, r7, #12
 800192a:	461d      	mov	r5, r3
 800192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	6023      	str	r3, [r4, #0]
		  .TxEventFifoControl = FDCAN_STORE_TX_EVENTS,
		  .MessageMarker = 0
	  };
  for(;;)
  {
	  osMessageQueueGet(sensorQueueHandle, &payload, NULL, osWaitForever);
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <StartSendMessage+0x5c>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001944:	2200      	movs	r2, #0
 8001946:	f009 feb5 	bl	800b6b4 <osMessageQueueGet>
	  memcpy(txBuf, &payload, sizeof(payload));
 800194a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800194e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001952:	ca07      	ldmia	r2, {r0, r1, r2}
 8001954:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf);
 8001958:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	@ (800197c <StartSendMessage+0x60>)
 8001964:	f002 f82c 	bl	80039c0 <HAL_FDCAN_AddMessageToTxFifoQ>
	  osDelay(100);
 8001968:	2064      	movs	r0, #100	@ 0x64
 800196a:	f009 fdb4 	bl	800b4d6 <osDelay>
	  osMessageQueueGet(sensorQueueHandle, &payload, NULL, osWaitForever);
 800196e:	bf00      	nop
 8001970:	e7e2      	b.n	8001938 <StartSendMessage+0x1c>
 8001972:	bf00      	nop
 8001974:	08011c74 	.word	0x08011c74
 8001978:	2000049c 	.word	0x2000049c
 800197c:	200003d8 	.word	0x200003d8

08001980 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001992:	f000 fb0b 	bl	8001fac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40012c00 	.word	0x40012c00

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <Error_Handler+0x8>

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_MspInit+0x50>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ba:	4a11      	ldr	r2, [pc, #68]	@ (8001a00 <HAL_MspInit+0x50>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_MspInit+0x50>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_MspInit+0x50>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <HAL_MspInit+0x50>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_MspInit+0x50>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	210f      	movs	r1, #15
 80019ea:	f06f 0001 	mvn.w	r0, #1
 80019ee:	f001 fe3d 	bl	800366c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019f2:	f004 fea5 	bl	8006740 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b09e      	sub	sp, #120	@ 0x78
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2250      	movs	r2, #80	@ 0x50
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00d fe75 	bl	800f714 <memset>
  if(hadc->Instance==ADC3)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa8 <HAL_ADC_MspInit+0xa4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d134      	bne.n	8001a9e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001a34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001a3a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001a3e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4618      	mov	r0, r3
 8001a46:	f005 fbd5 	bl	80071f4 <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a50:	f7ff ffa8 	bl	80019a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_ADC_MspInit+0xa8>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a58:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <HAL_ADC_MspInit+0xa8>)
 8001a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_ADC_MspInit+0xa8>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <HAL_ADC_MspInit+0xa8>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a70:	4a0e      	ldr	r2, [pc, #56]	@ (8001aac <HAL_ADC_MspInit+0xa8>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <HAL_ADC_MspInit+0xa8>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = Pressure_IN_Pin;
 8001a84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a88:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Pressure_IN_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <HAL_ADC_MspInit+0xac>)
 8001a9a:	f002 f8b3 	bl	8003c04 <HAL_GPIO_Init>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3778      	adds	r7, #120	@ 0x78
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	50000400 	.word	0x50000400
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	48000400 	.word	0x48000400

08001ab4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b09e      	sub	sp, #120	@ 0x78
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2250      	movs	r2, #80	@ 0x50
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f00d fe1d 	bl	800f714 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1f      	ldr	r2, [pc, #124]	@ (8001b5c <HAL_FDCAN_MspInit+0xa8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d137      	bne.n	8001b54 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001aea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aee:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4618      	mov	r0, r3
 8001af6:	f005 fb7d 	bl	80071f4 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001b00:	f7ff ff50 	bl	80019a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <HAL_FDCAN_MspInit+0xac>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b08:	4a15      	ldr	r2, [pc, #84]	@ (8001b60 <HAL_FDCAN_MspInit+0xac>)
 8001b0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <HAL_FDCAN_MspInit+0xac>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <HAL_FDCAN_MspInit+0xac>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b20:	4a0f      	ldr	r2, [pc, #60]	@ (8001b60 <HAL_FDCAN_MspInit+0xac>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b28:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <HAL_FDCAN_MspInit+0xac>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b34:	2360      	movs	r3, #96	@ 0x60
 8001b36:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001b44:	2309      	movs	r3, #9
 8001b46:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <HAL_FDCAN_MspInit+0xb0>)
 8001b50:	f002 f858 	bl	8003c04 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001b54:	bf00      	nop
 8001b56:	3778      	adds	r7, #120	@ 0x78
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40006800 	.word	0x40006800
 8001b60:	40021000 	.word	0x40021000
 8001b64:	48000400 	.word	0x48000400

08001b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b09e      	sub	sp, #120	@ 0x78
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2250      	movs	r2, #80	@ 0x50
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00d fdc3 	bl	800f714 <memset>
  if(hi2c->Instance==I2C2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1f      	ldr	r2, [pc, #124]	@ (8001c10 <HAL_I2C_MspInit+0xa8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d137      	bne.n	8001c08 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 fb25 	bl	80071f4 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bb0:	f7ff fef8 	bl	80019a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb8:	4a16      	ldr	r2, [pc, #88]	@ (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bcc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bd0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd2:	2312      	movs	r3, #18
 8001bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bde:	2304      	movs	r3, #4
 8001be0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001be6:	4619      	mov	r1, r3
 8001be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bec:	f002 f80a 	bl	8003c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf4:	4a07      	ldr	r2, [pc, #28]	@ (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001c08:	bf00      	nop
 8001c0a:	3778      	adds	r7, #120	@ 0x78
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40005800 	.word	0x40005800
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	@ 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c28:	4b2c      	ldr	r3, [pc, #176]	@ (8001cdc <HAL_InitTick+0xc4>)
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cdc <HAL_InitTick+0xc4>)
 8001c2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c32:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c34:	4b29      	ldr	r3, [pc, #164]	@ (8001cdc <HAL_InitTick+0xc4>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c40:	f107 020c 	add.w	r2, r7, #12
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 fa5a 	bl	8007104 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c50:	f005 fa42 	bl	80070d8 <HAL_RCC_GetPCLK2Freq>
 8001c54:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c58:	4a21      	ldr	r2, [pc, #132]	@ (8001ce0 <HAL_InitTick+0xc8>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0c9b      	lsrs	r3, r3, #18
 8001c60:	3b01      	subs	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <HAL_InitTick+0xcc>)
 8001c66:	4a20      	ldr	r2, [pc, #128]	@ (8001ce8 <HAL_InitTick+0xd0>)
 8001c68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <HAL_InitTick+0xcc>)
 8001c6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce4 <HAL_InitTick+0xcc>)
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_InitTick+0xcc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <HAL_InitTick+0xcc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001c84:	4817      	ldr	r0, [pc, #92]	@ (8001ce4 <HAL_InitTick+0xcc>)
 8001c86:	f005 fcf1 	bl	800766c <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11b      	bne.n	8001cd0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c98:	4812      	ldr	r0, [pc, #72]	@ (8001ce4 <HAL_InitTick+0xcc>)
 8001c9a:	f005 fd49 	bl	8007730 <HAL_TIM_Base_Start_IT>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d111      	bne.n	8001cd0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cac:	2019      	movs	r0, #25
 8001cae:	f001 fcf7 	bl	80036a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d808      	bhi.n	8001cca <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	2019      	movs	r0, #25
 8001cbe:	f001 fcd5 	bl	800366c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <HAL_InitTick+0xd4>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e002      	b.n	8001cd0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3730      	adds	r7, #48	@ 0x30
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	431bde83 	.word	0x431bde83
 8001ce4:	200004b4 	.word	0x200004b4
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	20000004 	.word	0x20000004

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <MemManage_Handler+0x4>

08001d08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_VALVE_IN_Pin);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f002 f91e 	bl	8003f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SOLENOID_IN_Pin);
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f002 f917 	bl	8003f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FC_FAULT_Pin);
 8001d46:	2004      	movs	r0, #4
 8001d48:	f002 f910 	bl	8003f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <USB_LP_IRQHandler+0x10>)
 8001d56:	f003 f83e 	bl	8004dd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000fd44 	.word	0x2000fd44

08001d64 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d6a:	f005 fd51 	bl	8007810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200004b4 	.word	0x200004b4

08001d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return 1;
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_kill>:

int _kill(int pid, int sig)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d92:	f00d fd21 	bl	800f7d8 <__errno>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2216      	movs	r2, #22
 8001d9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_exit>:

void _exit (int status)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ffe7 	bl	8001d88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dba:	bf00      	nop
 8001dbc:	e7fd      	b.n	8001dba <_exit+0x12>

08001dbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e00a      	b.n	8001de6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd0:	f3af 8000 	nop.w
 8001dd4:	4601      	mov	r1, r0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	60ba      	str	r2, [r7, #8]
 8001ddc:	b2ca      	uxtb	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	dbf0      	blt.n	8001dd0 <_read+0x12>
  }

  return len;
 8001dee:	687b      	ldr	r3, [r7, #4]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e009      	b.n	8001e1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	60ba      	str	r2, [r7, #8]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	dbf1      	blt.n	8001e0a <_write+0x12>
  }
  return len;
 8001e26:	687b      	ldr	r3, [r7, #4]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_close>:

int _close(int file)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e58:	605a      	str	r2, [r3, #4]
  return 0;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_isatty>:

int _isatty(int file)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e70:	2301      	movs	r3, #1
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea0:	4a14      	ldr	r2, [pc, #80]	@ (8001ef4 <_sbrk+0x5c>)
 8001ea2:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <_sbrk+0x60>)
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eac:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <_sbrk+0x64>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	@ (8001f00 <_sbrk+0x68>)
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d207      	bcs.n	8001ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec8:	f00d fc86 	bl	800f7d8 <__errno>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	220c      	movs	r2, #12
 8001ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed6:	e009      	b.n	8001eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ede:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a05      	ldr	r2, [pc, #20]	@ (8001efc <_sbrk+0x64>)
 8001ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2001c000 	.word	0x2001c000
 8001ef8:	00000400 	.word	0x00000400
 8001efc:	20000500 	.word	0x20000500
 8001f00:	20010390 	.word	0x20010390

08001f04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <SystemInit+0x20>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f0e:	4a05      	ldr	r2, [pc, #20]	@ (8001f24 <SystemInit+0x20>)
 8001f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f28:	480d      	ldr	r0, [pc, #52]	@ (8001f60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f2a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f2c:	f7ff ffea 	bl	8001f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f30:	480c      	ldr	r0, [pc, #48]	@ (8001f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f32:	490d      	ldr	r1, [pc, #52]	@ (8001f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f34:	4a0d      	ldr	r2, [pc, #52]	@ (8001f6c <LoopForever+0xe>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f38:	e002      	b.n	8001f40 <LoopCopyDataInit>

08001f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3e:	3304      	adds	r3, #4

08001f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f44:	d3f9      	bcc.n	8001f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f48:	4c0a      	ldr	r4, [pc, #40]	@ (8001f74 <LoopForever+0x16>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f4c:	e001      	b.n	8001f52 <LoopFillZerobss>

08001f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f50:	3204      	adds	r2, #4

08001f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f54:	d3fb      	bcc.n	8001f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f56:	f00d fc45 	bl	800f7e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5a:	f7ff fa2f 	bl	80013bc <main>

08001f5e <LoopForever>:

LoopForever:
    b LoopForever
 8001f5e:	e7fe      	b.n	8001f5e <LoopForever>
  ldr   r0, =_estack
 8001f60:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f68:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001f6c:	08012128 	.word	0x08012128
  ldr r2, =_sbss
 8001f70:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001f74:	2001038c 	.word	0x2001038c

08001f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC1_2_IRQHandler>

08001f7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f001 fb66 	bl	8003656 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f8a:	200f      	movs	r0, #15
 8001f8c:	f7ff fe44 	bl	8001c18 <HAL_InitTick>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	e001      	b.n	8001fa0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f9c:	f7ff fd08 	bl	80019b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]

}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_IncTick+0x1c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_IncTick+0x20>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a03      	ldr	r2, [pc, #12]	@ (8001fc8 <HAL_IncTick+0x1c>)
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	20000504 	.word	0x20000504
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <HAL_GetTick+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000504 	.word	0x20000504

08001fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff ffee 	bl	8001fd0 <HAL_GetTick>
 8001ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002000:	d004      	beq.n	800200c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_Delay+0x40>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4413      	add	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800200c:	bf00      	nop
 800200e:	f7ff ffdf 	bl	8001fd0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	429a      	cmp	r2, r3
 800201c:	d8f7      	bhi.n	800200e <HAL_Delay+0x26>
  {
  }
}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000008 	.word	0x20000008

0800202c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	609a      	str	r2, [r3, #8]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	609a      	str	r2, [r3, #8]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3360      	adds	r3, #96	@ 0x60
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <LL_ADC_SetOffset+0x44>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020cc:	bf00      	nop
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	03fff000 	.word	0x03fff000

080020dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3360      	adds	r3, #96	@ 0x60
 80020ea:	461a      	mov	r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3360      	adds	r3, #96	@ 0x60
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	431a      	orrs	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002132:	bf00      	nop
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800213e:	b480      	push	{r7}
 8002140:	b087      	sub	sp, #28
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3360      	adds	r3, #96	@ 0x60
 800214e:	461a      	mov	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	431a      	orrs	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002168:	bf00      	nop
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3360      	adds	r3, #96	@ 0x60
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	615a      	str	r2, [r3, #20]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b087      	sub	sp, #28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3330      	adds	r3, #48	@ 0x30
 8002206:	461a      	mov	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	4413      	add	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	211f      	movs	r1, #31
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	401a      	ands	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 011f 	and.w	r1, r3, #31
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	431a      	orrs	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800224e:	b480      	push	{r7}
 8002250:	b087      	sub	sp, #28
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3314      	adds	r3, #20
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	0e5b      	lsrs	r3, r3, #25
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	4413      	add	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	0d1b      	lsrs	r3, r3, #20
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2107      	movs	r1, #7
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	401a      	ands	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	0d1b      	lsrs	r3, r3, #20
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	431a      	orrs	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002298:	bf00      	nop
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0318 	and.w	r3, r3, #24
 80022c6:	4908      	ldr	r1, [pc, #32]	@ (80022e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022c8:	40d9      	lsrs	r1, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	400b      	ands	r3, r1
 80022ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d2:	431a      	orrs	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	0007ffff 	.word	0x0007ffff

080022ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 031f 	and.w	r3, r3, #31
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002334:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6093      	str	r3, [r2, #8]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800235c:	d101      	bne.n	8002362 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002384:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023ac:	d101      	bne.n	80023b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <LL_ADC_IsEnabled+0x18>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <LL_ADC_IsEnabled+0x1a>
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800241e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002422:	f043 0204 	orr.w	r2, r3, #4
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b04      	cmp	r3, #4
 8002448:	d101      	bne.n	800244e <LL_ADC_REG_IsConversionOngoing+0x18>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b08      	cmp	r3, #8
 800246e:	d101      	bne.n	8002474 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b089      	sub	sp, #36	@ 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e19b      	b.n	80027d6 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff faa9 	bl	8001a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff3f 	bl	8002348 <LL_ADC_IsDeepPowerDownEnabled>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff25 	bl	8002324 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff5a 	bl	8002398 <LL_ADC_IsInternalRegulatorEnabled>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d115      	bne.n	8002516 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ff3e 	bl	8002370 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f4:	4b97      	ldr	r3, [pc, #604]	@ (8002754 <HAL_ADC_Init+0x2d0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	4a97      	ldr	r2, [pc, #604]	@ (8002758 <HAL_ADC_Init+0x2d4>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	3301      	adds	r3, #1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002508:	e002      	b.n	8002510 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3b01      	subs	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f9      	bne.n	800250a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ff3c 	bl	8002398 <LL_ADC_IsInternalRegulatorEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff75 	bl	8002436 <LL_ADC_REG_IsConversionOngoing>
 800254c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 8134 	bne.w	80027c4 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 8130 	bne.w	80027c4 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002568:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800256c:	f043 0202 	orr.w	r2, r3, #2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff35 	bl	80023e8 <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d137      	bne.n	80025f4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800258c:	d004      	beq.n	8002598 <HAL_ADC_Init+0x114>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a72      	ldr	r2, [pc, #456]	@ (800275c <HAL_ADC_Init+0x2d8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d10f      	bne.n	80025b8 <HAL_ADC_Init+0x134>
 8002598:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800259c:	f7ff ff24 	bl	80023e8 <LL_ADC_IsEnabled>
 80025a0:	4604      	mov	r4, r0
 80025a2:	486e      	ldr	r0, [pc, #440]	@ (800275c <HAL_ADC_Init+0x2d8>)
 80025a4:	f7ff ff20 	bl	80023e8 <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4323      	orrs	r3, r4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e008      	b.n	80025ca <HAL_ADC_Init+0x146>
 80025b8:	4869      	ldr	r0, [pc, #420]	@ (8002760 <HAL_ADC_Init+0x2dc>)
 80025ba:	f7ff ff15 	bl	80023e8 <LL_ADC_IsEnabled>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d012      	beq.n	80025f4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025d6:	d004      	beq.n	80025e2 <HAL_ADC_Init+0x15e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a5f      	ldr	r2, [pc, #380]	@ (800275c <HAL_ADC_Init+0x2d8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_Init+0x162>
 80025e2:	4a60      	ldr	r2, [pc, #384]	@ (8002764 <HAL_ADC_Init+0x2e0>)
 80025e4:	e000      	b.n	80025e8 <HAL_ADC_Init+0x164>
 80025e6:	4a60      	ldr	r2, [pc, #384]	@ (8002768 <HAL_ADC_Init+0x2e4>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4619      	mov	r1, r3
 80025ee:	4610      	mov	r0, r2
 80025f0:	f7ff fd1c 	bl	800202c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7f5b      	ldrb	r3, [r3, #29]
 80025f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002604:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800260a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002612:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800261e:	2b01      	cmp	r3, #1
 8002620:	d106      	bne.n	8002630 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	045b      	lsls	r3, r3, #17
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	4b46      	ldr	r3, [pc, #280]	@ (800276c <HAL_ADC_Init+0x2e8>)
 8002654:	4013      	ands	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	430b      	orrs	r3, r1
 800265e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff feee 	bl	800245c <LL_ADC_INJ_IsConversionOngoing>
 8002680:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d17b      	bne.n	8002780 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d178      	bne.n	8002780 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002692:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800269a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026aa:	f023 0302 	bic.w	r3, r3, #2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	69b9      	ldr	r1, [r7, #24]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d017      	beq.n	80026f0 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80026ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80026d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80026dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6911      	ldr	r1, [r2, #16]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80026ee:	e013      	b.n	8002718 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80026fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002710:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002714:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800271e:	2b01      	cmp	r3, #1
 8002720:	d126      	bne.n	8002770 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002738:	4311      	orrs	r1, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800273e:	4311      	orrs	r1, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002744:	430a      	orrs	r2, r1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	611a      	str	r2, [r3, #16]
 8002752:	e015      	b.n	8002780 <HAL_ADC_Init+0x2fc>
 8002754:	20000000 	.word	0x20000000
 8002758:	053e2d63 	.word	0x053e2d63
 800275c:	50000100 	.word	0x50000100
 8002760:	50000400 	.word	0x50000400
 8002764:	50000300 	.word	0x50000300
 8002768:	50000700 	.word	0x50000700
 800276c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d10c      	bne.n	80027a2 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f023 010f 	bic.w	r1, r3, #15
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	1e5a      	subs	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
 80027a0:	e007      	b.n	80027b2 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 020f 	bic.w	r2, r2, #15
 80027b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	f023 0303 	bic.w	r3, r3, #3
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027c2:	e007      	b.n	80027d4 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	f043 0210 	orr.w	r2, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	@ 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd90      	pop	{r4, r7, pc}
 80027de:	bf00      	nop

080027e0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027f0:	d004      	beq.n	80027fc <HAL_ADC_Start+0x1c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002968 <HAL_ADC_Start+0x188>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_Start+0x20>
 80027fc:	4b5b      	ldr	r3, [pc, #364]	@ (800296c <HAL_ADC_Start+0x18c>)
 80027fe:	e000      	b.n	8002802 <HAL_ADC_Start+0x22>
 8002800:	4b5b      	ldr	r3, [pc, #364]	@ (8002970 <HAL_ADC_Start+0x190>)
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fd72 	bl	80022ec <LL_ADC_GetMultimode>
 8002808:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fe11 	bl	8002436 <LL_ADC_REG_IsConversionOngoing>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	f040 809f 	bne.w	800295a <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_ADC_Start+0x4a>
 8002826:	2302      	movs	r3, #2
 8002828:	e09a      	b.n	8002960 <HAL_ADC_Start+0x180>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fdcc 	bl	80033d0 <ADC_Enable>
 8002838:	4603      	mov	r3, r0
 800283a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 8086 	bne.w	8002950 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a42      	ldr	r2, [pc, #264]	@ (8002968 <HAL_ADC_Start+0x188>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d002      	beq.n	8002868 <HAL_ADC_Start+0x88>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	e001      	b.n	800286c <HAL_ADC_Start+0x8c>
 8002868:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	4293      	cmp	r3, r2
 8002872:	d002      	beq.n	800287a <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002892:	d106      	bne.n	80028a2 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002898:	f023 0206 	bic.w	r2, r3, #6
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	661a      	str	r2, [r3, #96]	@ 0x60
 80028a0:	e002      	b.n	80028a8 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	221c      	movs	r2, #28
 80028ae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002968 <HAL_ADC_Start+0x188>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d002      	beq.n	80028c8 <HAL_ADC_Start+0xe8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e001      	b.n	80028cc <HAL_ADC_Start+0xec>
 80028c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d008      	beq.n	80028e6 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d002      	beq.n	80028e6 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b09      	cmp	r3, #9
 80028e4:	d114      	bne.n	8002910 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fd80 	bl	800240e <LL_ADC_REG_StartConversion>
 800290e:	e026      	b.n	800295e <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002914:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a11      	ldr	r2, [pc, #68]	@ (8002968 <HAL_ADC_Start+0x188>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d002      	beq.n	800292c <HAL_ADC_Start+0x14c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	e001      	b.n	8002930 <HAL_ADC_Start+0x150>
 800292c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002930:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00f      	beq.n	800295e <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002942:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002946:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800294e:	e006      	b.n	800295e <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002958:	e001      	b.n	800295e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800295a:	2302      	movs	r3, #2
 800295c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800295e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	50000100 	.word	0x50000100
 800296c:	50000300 	.word	0x50000300
 8002970:	50000700 	.word	0x50000700

08002974 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002986:	d004      	beq.n	8002992 <HAL_ADC_PollForConversion+0x1e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a70      	ldr	r2, [pc, #448]	@ (8002b50 <HAL_ADC_PollForConversion+0x1dc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_ADC_PollForConversion+0x22>
 8002992:	4b70      	ldr	r3, [pc, #448]	@ (8002b54 <HAL_ADC_PollForConversion+0x1e0>)
 8002994:	e000      	b.n	8002998 <HAL_ADC_PollForConversion+0x24>
 8002996:	4b70      	ldr	r3, [pc, #448]	@ (8002b58 <HAL_ADC_PollForConversion+0x1e4>)
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fca7 	bl	80022ec <LL_ADC_GetMultimode>
 800299e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d102      	bne.n	80029ae <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80029a8:	2308      	movs	r3, #8
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	e037      	b.n	8002a1e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d002      	beq.n	80029c0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b09      	cmp	r3, #9
 80029be:	d111      	bne.n	80029e4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0b3      	b.n	8002b46 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029de:	2304      	movs	r3, #4
 80029e0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029e2:	e01c      	b.n	8002a1e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ec:	d004      	beq.n	80029f8 <HAL_ADC_PollForConversion+0x84>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a57      	ldr	r2, [pc, #348]	@ (8002b50 <HAL_ADC_PollForConversion+0x1dc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_PollForConversion+0x88>
 80029f8:	4b56      	ldr	r3, [pc, #344]	@ (8002b54 <HAL_ADC_PollForConversion+0x1e0>)
 80029fa:	e000      	b.n	80029fe <HAL_ADC_PollForConversion+0x8a>
 80029fc:	4b56      	ldr	r3, [pc, #344]	@ (8002b58 <HAL_ADC_PollForConversion+0x1e4>)
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fc82 	bl	8002308 <LL_ADC_GetMultiDMATransfer>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0e:	f043 0220 	orr.w	r2, r3, #32
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e095      	b.n	8002b46 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a1e:	f7ff fad7 	bl	8001fd0 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a24:	e021      	b.n	8002a6a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a2c:	d01d      	beq.n	8002a6a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a2e:	f7ff facf 	bl	8001fd0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <HAL_ADC_PollForConversion+0xd0>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d112      	bne.n	8002a6a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10b      	bne.n	8002a6a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a56:	f043 0204 	orr.w	r2, r3, #4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e06d      	b.n	8002b46 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0d6      	beq.n	8002a26 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fba1 	bl	80021d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01c      	beq.n	8002ace <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7f5b      	ldrb	r3, [r3, #29]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d118      	bne.n	8002ace <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d111      	bne.n	8002ace <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b50 <HAL_ADC_PollForConversion+0x1dc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d002      	beq.n	8002ade <HAL_ADC_PollForConversion+0x16a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	e001      	b.n	8002ae2 <HAL_ADC_PollForConversion+0x16e>
 8002ade:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d008      	beq.n	8002afc <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d002      	beq.n	8002afc <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	d104      	bne.n	8002b06 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e00d      	b.n	8002b22 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a11      	ldr	r2, [pc, #68]	@ (8002b50 <HAL_ADC_PollForConversion+0x1dc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d002      	beq.n	8002b16 <HAL_ADC_PollForConversion+0x1a2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	e001      	b.n	8002b1a <HAL_ADC_PollForConversion+0x1a6>
 8002b16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d104      	bne.n	8002b32 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e008      	b.n	8002b44 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d103      	bne.n	8002b44 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	220c      	movs	r2, #12
 8002b42:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	50000100 	.word	0x50000100
 8002b54:	50000300 	.word	0x50000300
 8002b58:	50000700 	.word	0x50000700

08002b5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b0b6      	sub	sp, #216	@ 0xd8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d102      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x24>
 8002b96:	2302      	movs	r3, #2
 8002b98:	f000 bc04 	b.w	80033a4 <HAL_ADC_ConfigChannel+0x82c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fc44 	bl	8002436 <LL_ADC_REG_IsConversionOngoing>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 83e8 	bne.w	8003386 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f7ff fb17 	bl	80021f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fc32 	bl	8002436 <LL_ADC_REG_IsConversionOngoing>
 8002bd2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fc3e 	bl	800245c <LL_ADC_INJ_IsConversionOngoing>
 8002be0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002be4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f040 81d9 	bne.w	8002fa0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 81d4 	bne.w	8002fa0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c00:	d10f      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f7ff fb1e 	bl	800224e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fac5 	bl	80021aa <LL_ADC_SetSamplingTimeCommonConfig>
 8002c20:	e00e      	b.n	8002c40 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f7ff fb0d 	bl	800224e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fab5 	bl	80021aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	08db      	lsrs	r3, r3, #3
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d022      	beq.n	8002ca8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c72:	f7ff fa0f 	bl	8002094 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6919      	ldr	r1, [r3, #16]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f7ff fa5b 	bl	800213e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x126>
 8002c98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c9c:	e000      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x128>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f7ff fa67 	bl	8002174 <LL_ADC_SetOffsetSaturation>
 8002ca6:	e17b      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fa14 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x15c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fa09 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	0e9b      	lsrs	r3, r3, #26
 8002cce:	f003 021f 	and.w	r2, r3, #31
 8002cd2:	e01e      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x19a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff f9fe 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e004      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002d06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x1b2>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	e018      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x1e4>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e004      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d106      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f9cd 	bl	8002108 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2101      	movs	r1, #1
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f9b1 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x222>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff f9a6 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	e01e      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x260>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f99b 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002db8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002dc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e004      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x278>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	e018      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x2aa>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002e04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e14:	2320      	movs	r3, #32
 8002e16:	e004      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d106      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff f96a 	bl	8002108 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f94e 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x2e8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2102      	movs	r1, #2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f943 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	f003 021f 	and.w	r2, r3, #31
 8002e5e:	e01e      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x326>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff f938 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e004      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x33e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	e016      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x36c>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ec8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	e004      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d106      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2102      	movs	r1, #2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f909 	bl	8002108 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2103      	movs	r1, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff f8ed 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x3aa>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2103      	movs	r1, #3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff f8e2 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	0e9b      	lsrs	r3, r3, #26
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	e017      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x3da>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2103      	movs	r1, #3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff f8d7 	bl	80020dc <LL_ADC_GetOffsetChannel>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f3c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f44:	2320      	movs	r3, #32
 8002f46:	e003      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x3f2>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	e011      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x416>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f82:	2320      	movs	r3, #32
 8002f84:	e003      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d106      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	2103      	movs	r1, #3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff f8b4 	bl	8002108 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fa1f 	bl	80023e8 <LL_ADC_IsEnabled>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f040 813d 	bne.w	800322c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f7ff f970 	bl	80022a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4aa2      	ldr	r2, [pc, #648]	@ (8003254 <HAL_ADC_ConfigChannel+0x6dc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	f040 812e 	bne.w	800322c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10b      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x480>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	2b09      	cmp	r3, #9
 8002fee:	bf94      	ite	ls
 8002ff0:	2301      	movls	r3, #1
 8002ff2:	2300      	movhi	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e019      	b.n	800302c <HAL_ADC_ConfigChannel+0x4b4>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003008:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800300a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003010:	2320      	movs	r3, #32
 8003012:	e003      	b.n	800301c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003014:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2b09      	cmp	r3, #9
 8003024:	bf94      	ite	ls
 8003026:	2301      	movls	r3, #1
 8003028:	2300      	movhi	r3, #0
 800302a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302c:	2b00      	cmp	r3, #0
 800302e:	d079      	beq.n	8003124 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_ADC_ConfigChannel+0x4d4>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	3301      	adds	r3, #1
 8003044:	069b      	lsls	r3, r3, #26
 8003046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800304a:	e015      	b.n	8003078 <HAL_ADC_ConfigChannel+0x500>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800305a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800305c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e003      	b.n	8003070 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	069b      	lsls	r3, r3, #26
 8003074:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x520>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	3301      	adds	r3, #1
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	e017      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x550>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80030a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80030aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e003      	b.n	80030bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80030b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	ea42 0103 	orr.w	r1, r2, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x576>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	051b      	lsls	r3, r3, #20
 80030ec:	e018      	b.n	8003120 <HAL_ADC_ConfigChannel+0x5a8>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003106:	2320      	movs	r3, #32
 8003108:	e003      	b.n	8003112 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800310a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3301      	adds	r3, #1
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003120:	430b      	orrs	r3, r1
 8003122:	e07e      	b.n	8003222 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x5c8>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	3301      	adds	r3, #1
 8003138:	069b      	lsls	r3, r3, #26
 800313a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800313e:	e015      	b.n	800316c <HAL_ADC_ConfigChannel+0x5f4>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800314e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003150:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e003      	b.n	8003164 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800315c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3301      	adds	r3, #1
 8003166:	069b      	lsls	r3, r3, #26
 8003168:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_ADC_ConfigChannel+0x614>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	3301      	adds	r3, #1
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	e017      	b.n	80031bc <HAL_ADC_ConfigChannel+0x644>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	61fb      	str	r3, [r7, #28]
  return result;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	ea42 0103 	orr.w	r1, r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x670>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	3301      	adds	r3, #1
 80031d4:	f003 021f 	and.w	r2, r3, #31
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	3b1e      	subs	r3, #30
 80031e0:	051b      	lsls	r3, r3, #20
 80031e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031e6:	e01b      	b.n	8003220 <HAL_ADC_ConfigChannel+0x6a8>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	613b      	str	r3, [r7, #16]
  return result;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003200:	2320      	movs	r3, #32
 8003202:	e003      	b.n	800320c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f003 021f 	and.w	r2, r3, #31
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	3b1e      	subs	r3, #30
 800321a:	051b      	lsls	r3, r3, #20
 800321c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003220:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003226:	4619      	mov	r1, r3
 8003228:	f7ff f811 	bl	800224e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <HAL_ADC_ConfigChannel+0x6e0>)
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80af 	beq.w	8003398 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003242:	d004      	beq.n	800324e <HAL_ADC_ConfigChannel+0x6d6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_ADC_ConfigChannel+0x6e4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10a      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x6ec>
 800324e:	4b04      	ldr	r3, [pc, #16]	@ (8003260 <HAL_ADC_ConfigChannel+0x6e8>)
 8003250:	e009      	b.n	8003266 <HAL_ADC_ConfigChannel+0x6ee>
 8003252:	bf00      	nop
 8003254:	407f0000 	.word	0x407f0000
 8003258:	80080000 	.word	0x80080000
 800325c:	50000100 	.word	0x50000100
 8003260:	50000300 	.word	0x50000300
 8003264:	4b51      	ldr	r3, [pc, #324]	@ (80033ac <HAL_ADC_ConfigChannel+0x834>)
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe ff06 	bl	8002078 <LL_ADC_GetCommonPathInternalCh>
 800326c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a4e      	ldr	r2, [pc, #312]	@ (80033b0 <HAL_ADC_ConfigChannel+0x838>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_ADC_ConfigChannel+0x70c>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a4d      	ldr	r2, [pc, #308]	@ (80033b4 <HAL_ADC_ConfigChannel+0x83c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d134      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d12e      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003298:	d17e      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032a2:	d004      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x736>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a43      	ldr	r2, [pc, #268]	@ (80033b8 <HAL_ADC_ConfigChannel+0x840>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x73a>
 80032ae:	4a43      	ldr	r2, [pc, #268]	@ (80033bc <HAL_ADC_ConfigChannel+0x844>)
 80032b0:	e000      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x73c>
 80032b2:	4a3e      	ldr	r2, [pc, #248]	@ (80033ac <HAL_ADC_ConfigChannel+0x834>)
 80032b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f7fe fec7 	bl	8002052 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032c4:	4b3e      	ldr	r3, [pc, #248]	@ (80033c0 <HAL_ADC_ConfigChannel+0x848>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	4a3e      	ldr	r2, [pc, #248]	@ (80033c4 <HAL_ADC_ConfigChannel+0x84c>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032de:	e002      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f9      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ec:	e054      	b.n	8003398 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a35      	ldr	r2, [pc, #212]	@ (80033c8 <HAL_ADC_ConfigChannel+0x850>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d120      	bne.n	800333a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d11a      	bne.n	800333a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800330c:	d144      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003316:	d004      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x7aa>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a26      	ldr	r2, [pc, #152]	@ (80033b8 <HAL_ADC_ConfigChannel+0x840>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x7ae>
 8003322:	4a26      	ldr	r2, [pc, #152]	@ (80033bc <HAL_ADC_ConfigChannel+0x844>)
 8003324:	e000      	b.n	8003328 <HAL_ADC_ConfigChannel+0x7b0>
 8003326:	4a21      	ldr	r2, [pc, #132]	@ (80033ac <HAL_ADC_ConfigChannel+0x834>)
 8003328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800332c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f7fe fe8d 	bl	8002052 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003338:	e02e      	b.n	8003398 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a23      	ldr	r2, [pc, #140]	@ (80033cc <HAL_ADC_ConfigChannel+0x854>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d129      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d123      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <HAL_ADC_ConfigChannel+0x840>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01e      	beq.n	8003398 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003362:	d004      	beq.n	800336e <HAL_ADC_ConfigChannel+0x7f6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a13      	ldr	r2, [pc, #76]	@ (80033b8 <HAL_ADC_ConfigChannel+0x840>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x7fa>
 800336e:	4a13      	ldr	r2, [pc, #76]	@ (80033bc <HAL_ADC_ConfigChannel+0x844>)
 8003370:	e000      	b.n	8003374 <HAL_ADC_ConfigChannel+0x7fc>
 8003372:	4a0e      	ldr	r2, [pc, #56]	@ (80033ac <HAL_ADC_ConfigChannel+0x834>)
 8003374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003378:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f7fe fe67 	bl	8002052 <LL_ADC_SetCommonPathInternalCh>
 8003384:	e008      	b.n	8003398 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80033a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	37d8      	adds	r7, #216	@ 0xd8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	50000700 	.word	0x50000700
 80033b0:	c3210000 	.word	0xc3210000
 80033b4:	90c00010 	.word	0x90c00010
 80033b8:	50000100 	.word	0x50000100
 80033bc:	50000300 	.word	0x50000300
 80033c0:	20000000 	.word	0x20000000
 80033c4:	053e2d63 	.word	0x053e2d63
 80033c8:	c7520000 	.word	0xc7520000
 80033cc:	cb840000 	.word	0xcb840000

080033d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f801 	bl	80023e8 <LL_ADC_IsEnabled>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d176      	bne.n	80034da <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	4b3c      	ldr	r3, [pc, #240]	@ (80034e4 <ADC_Enable+0x114>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fe:	f043 0210 	orr.w	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e062      	b.n	80034dc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe ffd0 	bl	80023c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003428:	d004      	beq.n	8003434 <ADC_Enable+0x64>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2e      	ldr	r2, [pc, #184]	@ (80034e8 <ADC_Enable+0x118>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <ADC_Enable+0x68>
 8003434:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <ADC_Enable+0x11c>)
 8003436:	e000      	b.n	800343a <ADC_Enable+0x6a>
 8003438:	4b2d      	ldr	r3, [pc, #180]	@ (80034f0 <ADC_Enable+0x120>)
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fe1c 	bl	8002078 <LL_ADC_GetCommonPathInternalCh>
 8003440:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003446:	2b00      	cmp	r3, #0
 8003448:	d013      	beq.n	8003472 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800344a:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <ADC_Enable+0x124>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	4a29      	ldr	r2, [pc, #164]	@ (80034f8 <ADC_Enable+0x128>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003464:	e002      	b.n	800346c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3b01      	subs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f9      	bne.n	8003466 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003472:	f7fe fdad 	bl	8001fd0 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003478:	e028      	b.n	80034cc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe ffb2 	bl	80023e8 <LL_ADC_IsEnabled>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe ff96 	bl	80023c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003494:	f7fe fd9c 	bl	8001fd0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d914      	bls.n	80034cc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d00d      	beq.n	80034cc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b4:	f043 0210 	orr.w	r2, r3, #16
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c0:	f043 0201 	orr.w	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e007      	b.n	80034dc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d1cf      	bne.n	800347a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	8000003f 	.word	0x8000003f
 80034e8:	50000100 	.word	0x50000100
 80034ec:	50000300 	.word	0x50000300
 80034f0:	50000700 	.word	0x50000700
 80034f4:	20000000 	.word	0x20000000
 80034f8:	053e2d63 	.word	0x053e2d63

080034fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003518:	4013      	ands	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352e:	4a04      	ldr	r2, [pc, #16]	@ (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	60d3      	str	r3, [r2, #12]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003548:	4b04      	ldr	r3, [pc, #16]	@ (800355c <__NVIC_GetPriorityGrouping+0x18>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	f003 0307 	and.w	r3, r3, #7
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	db0b      	blt.n	800358a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	4907      	ldr	r1, [pc, #28]	@ (8003598 <__NVIC_EnableIRQ+0x38>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2001      	movs	r0, #1
 8003582:	fa00 f202 	lsl.w	r2, r0, r2
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000e100 	.word	0xe000e100

0800359c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	6039      	str	r1, [r7, #0]
 80035a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db0a      	blt.n	80035c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	490c      	ldr	r1, [pc, #48]	@ (80035e8 <__NVIC_SetPriority+0x4c>)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	0112      	lsls	r2, r2, #4
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	440b      	add	r3, r1
 80035c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c4:	e00a      	b.n	80035dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4908      	ldr	r1, [pc, #32]	@ (80035ec <__NVIC_SetPriority+0x50>)
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	3b04      	subs	r3, #4
 80035d4:	0112      	lsls	r2, r2, #4
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	440b      	add	r3, r1
 80035da:	761a      	strb	r2, [r3, #24]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	e000e100 	.word	0xe000e100
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b089      	sub	sp, #36	@ 0x24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f1c3 0307 	rsb	r3, r3, #7
 800360a:	2b04      	cmp	r3, #4
 800360c:	bf28      	it	cs
 800360e:	2304      	movcs	r3, #4
 8003610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3304      	adds	r3, #4
 8003616:	2b06      	cmp	r3, #6
 8003618:	d902      	bls.n	8003620 <NVIC_EncodePriority+0x30>
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3b03      	subs	r3, #3
 800361e:	e000      	b.n	8003622 <NVIC_EncodePriority+0x32>
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43da      	mvns	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	401a      	ands	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003638:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	43d9      	mvns	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003648:	4313      	orrs	r3, r2
         );
}
 800364a:	4618      	mov	r0, r3
 800364c:	3724      	adds	r7, #36	@ 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff ff4c 	bl	80034fc <__NVIC_SetPriorityGrouping>
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800367a:	f7ff ff63 	bl	8003544 <__NVIC_GetPriorityGrouping>
 800367e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	6978      	ldr	r0, [r7, #20]
 8003686:	f7ff ffb3 	bl	80035f0 <NVIC_EncodePriority>
 800368a:	4602      	mov	r2, r0
 800368c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ff82 	bl	800359c <__NVIC_SetPriority>
}
 8003698:	bf00      	nop
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ff56 	bl	8003560 <__NVIC_EnableIRQ>
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e147      	b.n	800395e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fe f9e6 	bl	8001ab4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0210 	bic.w	r2, r2, #16
 80036f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036f8:	f7fe fc6a 	bl	8001fd0 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80036fe:	e012      	b.n	8003726 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003700:	f7fe fc66 	bl	8001fd0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b0a      	cmp	r3, #10
 800370c:	d90b      	bls.n	8003726 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003712:	f043 0201 	orr.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2203      	movs	r2, #3
 800371e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e11b      	b.n	800395e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b08      	cmp	r3, #8
 8003732:	d0e5      	beq.n	8003700 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003744:	f7fe fc44 	bl	8001fd0 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800374a:	e012      	b.n	8003772 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800374c:	f7fe fc40 	bl	8001fd0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b0a      	cmp	r3, #10
 8003758:	d90b      	bls.n	8003772 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2203      	movs	r2, #3
 800376a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0f5      	b.n	800395e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0e5      	beq.n	800374c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0202 	orr.w	r2, r2, #2
 800378e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a74      	ldr	r2, [pc, #464]	@ (8003968 <HAL_FDCAN_Init+0x2ac>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d103      	bne.n	80037a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800379a:	4a74      	ldr	r2, [pc, #464]	@ (800396c <HAL_FDCAN_Init+0x2b0>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	7c1b      	ldrb	r3, [r3, #16]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d108      	bne.n	80037bc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b8:	619a      	str	r2, [r3, #24]
 80037ba:	e007      	b.n	80037cc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	7c5b      	ldrb	r3, [r3, #17]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d108      	bne.n	80037e6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037e2:	619a      	str	r2, [r3, #24]
 80037e4:	e007      	b.n	80037f6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7c9b      	ldrb	r3, [r3, #18]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d108      	bne.n	8003810 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800380c:	619a      	str	r2, [r3, #24]
 800380e:	e007      	b.n	8003820 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800381e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699a      	ldr	r2, [r3, #24]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003844:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0210 	bic.w	r2, r2, #16
 8003854:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d108      	bne.n	8003870 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0204 	orr.w	r2, r2, #4
 800386c:	619a      	str	r2, [r3, #24]
 800386e:	e02c      	b.n	80038ca <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d028      	beq.n	80038ca <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d01c      	beq.n	80038ba <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800388e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0210 	orr.w	r2, r2, #16
 800389e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d110      	bne.n	80038ca <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0220 	orr.w	r2, r2, #32
 80038b6:	619a      	str	r2, [r3, #24]
 80038b8:	e007      	b.n	80038ca <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0220 	orr.w	r2, r2, #32
 80038c8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038da:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038e2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038f2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038f4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038fe:	d115      	bne.n	800392c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	3b01      	subs	r3, #1
 800390c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800390e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	3b01      	subs	r3, #1
 8003916:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003918:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	3b01      	subs	r3, #1
 8003922:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003928:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800392a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f880 	bl	8003a48 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40006400 	.word	0x40006400
 800396c:	40006500 	.word	0x40006500

08003970 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d110      	bne.n	80039a6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e006      	b.n	80039b4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039aa:	f043 0204 	orr.w	r2, r3, #4
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d12c      	bne.n	8003a32 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e023      	b.n	8003a40 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a00:	0c1b      	lsrs	r3, r3, #16
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f87c 	bl	8003b0c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2101      	movs	r1, #1
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003a24:	2201      	movs	r2, #1
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e006      	b.n	8003a40 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a36:	f043 0208 	orr.w	r2, r3, #8
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
  }
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003a50:	4b2c      	ldr	r3, [pc, #176]	@ (8003b04 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003a52:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2b      	ldr	r2, [pc, #172]	@ (8003b08 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d103      	bne.n	8003a66 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003a64:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a74:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7c:	041a      	lsls	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a9a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa2:	061a      	lsls	r2, r3, #24
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	e005      	b.n	8003ae8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d3f3      	bcc.n	8003adc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	4000a400 	.word	0x4000a400
 8003b08:	40006800 	.word	0x40006800

08003b0c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	@ 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003b2a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	e00a      	b.n	8003b4e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003b40:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003b46:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003b48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b4c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003b58:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003b5e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003b64:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	440b      	add	r3, r1
 8003b80:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	3304      	adds	r3, #4
 8003b98:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e020      	b.n	8003be2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3303      	adds	r3, #3
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3302      	adds	r3, #2
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	440b      	add	r3, r1
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003bb8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	440b      	add	r3, r1
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003bc6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	440a      	add	r2, r1
 8003bce:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003bd0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3304      	adds	r3, #4
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	4a06      	ldr	r2, [pc, #24]	@ (8003c00 <FDCAN_CopyMessageToRAM+0xf4>)
 8003be8:	5cd3      	ldrb	r3, [r2, r3]
 8003bea:	461a      	mov	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d3d6      	bcc.n	8003ba0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	3724      	adds	r7, #36	@ 0x24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	08011d94 	.word	0x08011d94

08003c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c12:	e15a      	b.n	8003eca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 814c 	beq.w	8003ec4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d005      	beq.n	8003c44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d130      	bne.n	8003ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	2203      	movs	r2, #3
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	f003 0201 	and.w	r2, r3, #1
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d017      	beq.n	8003ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d123      	bne.n	8003d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	08da      	lsrs	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3208      	adds	r2, #8
 8003cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	220f      	movs	r2, #15
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	08da      	lsrs	r2, r3, #3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3208      	adds	r2, #8
 8003d30:	6939      	ldr	r1, [r7, #16]
 8003d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	2203      	movs	r2, #3
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0203 	and.w	r2, r3, #3
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80a6 	beq.w	8003ec4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d78:	4b5b      	ldr	r3, [pc, #364]	@ (8003ee8 <HAL_GPIO_Init+0x2e4>)
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ee8 <HAL_GPIO_Init+0x2e4>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d84:	4b58      	ldr	r3, [pc, #352]	@ (8003ee8 <HAL_GPIO_Init+0x2e4>)
 8003d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d90:	4a56      	ldr	r2, [pc, #344]	@ (8003eec <HAL_GPIO_Init+0x2e8>)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	3302      	adds	r3, #2
 8003d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	220f      	movs	r2, #15
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dba:	d01f      	beq.n	8003dfc <HAL_GPIO_Init+0x1f8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a4c      	ldr	r2, [pc, #304]	@ (8003ef0 <HAL_GPIO_Init+0x2ec>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d019      	beq.n	8003df8 <HAL_GPIO_Init+0x1f4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef4 <HAL_GPIO_Init+0x2f0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <HAL_GPIO_Init+0x1f0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a4a      	ldr	r2, [pc, #296]	@ (8003ef8 <HAL_GPIO_Init+0x2f4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00d      	beq.n	8003df0 <HAL_GPIO_Init+0x1ec>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a49      	ldr	r2, [pc, #292]	@ (8003efc <HAL_GPIO_Init+0x2f8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <HAL_GPIO_Init+0x1e8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a48      	ldr	r2, [pc, #288]	@ (8003f00 <HAL_GPIO_Init+0x2fc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_GPIO_Init+0x1e4>
 8003de4:	2305      	movs	r3, #5
 8003de6:	e00a      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003de8:	2306      	movs	r3, #6
 8003dea:	e008      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003dec:	2304      	movs	r3, #4
 8003dee:	e006      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003df0:	2303      	movs	r3, #3
 8003df2:	e004      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e002      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	f002 0203 	and.w	r2, r2, #3
 8003e04:	0092      	lsls	r2, r2, #2
 8003e06:	4093      	lsls	r3, r2
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e0e:	4937      	ldr	r1, [pc, #220]	@ (8003eec <HAL_GPIO_Init+0x2e8>)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	3302      	adds	r3, #2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e1c:	4b39      	ldr	r3, [pc, #228]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e40:	4a30      	ldr	r2, [pc, #192]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e46:	4b2f      	ldr	r3, [pc, #188]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e6a:	4a26      	ldr	r2, [pc, #152]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e70:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e94:	4a1b      	ldr	r2, [pc, #108]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ebe:	4a11      	ldr	r2, [pc, #68]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f47f ae9d 	bne.w	8003c14 <HAL_GPIO_Init+0x10>
  }
}
 8003eda:	bf00      	nop
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	48000400 	.word	0x48000400
 8003ef4:	48000800 	.word	0x48000800
 8003ef8:	48000c00 	.word	0x48000c00
 8003efc:	48001000 	.word	0x48001000
 8003f00:	48001400 	.word	0x48001400
 8003f04:	40010400 	.word	0x40010400

08003f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	807b      	strh	r3, [r7, #2]
 8003f14:	4613      	mov	r3, r2
 8003f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f18:	787b      	ldrb	r3, [r7, #1]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f1e:	887a      	ldrh	r2, [r7, #2]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f24:	e002      	b.n	8003f2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	041a      	lsls	r2, r3, #16
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	43d9      	mvns	r1, r3
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	400b      	ands	r3, r1
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	619a      	str	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f76:	4b08      	ldr	r3, [pc, #32]	@ (8003f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d006      	beq.n	8003f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f82:	4a05      	ldr	r2, [pc, #20]	@ (8003f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f806 	bl	8003f9c <HAL_GPIO_EXTI_Callback>
  }
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e08d      	b.n	80040e0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fd fdc5 	bl	8001b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2224      	movs	r2, #36	@ 0x24
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004002:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004012:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004028:	609a      	str	r2, [r3, #8]
 800402a:	e006      	b.n	800403a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004038:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d108      	bne.n	8004054 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	e007      	b.n	8004064 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004062:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004076:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004086:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69d9      	ldr	r1, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1a      	ldr	r2, [r3, #32]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0201 	orr.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4603      	mov	r3, r0
 80040f8:	817b      	strh	r3, [r7, #10]
 80040fa:	460b      	mov	r3, r1
 80040fc:	813b      	strh	r3, [r7, #8]
 80040fe:	4613      	mov	r3, r2
 8004100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	f040 80f9 	bne.w	8004302 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_I2C_Mem_Write+0x34>
 8004116:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004122:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0ed      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Mem_Write+0x4e>
 8004132:	2302      	movs	r3, #2
 8004134:	e0e6      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800413e:	f7fd ff47 	bl	8001fd0 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2319      	movs	r3, #25
 800414a:	2201      	movs	r2, #1
 800414c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fac3 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0d1      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2221      	movs	r2, #33	@ 0x21
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2240      	movs	r2, #64	@ 0x40
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004188:	88f8      	ldrh	r0, [r7, #6]
 800418a:	893a      	ldrh	r2, [r7, #8]
 800418c:	8979      	ldrh	r1, [r7, #10]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	4603      	mov	r3, r0
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f9d3 	bl	8004544 <I2C_RequestMemoryWrite>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0a9      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2bff      	cmp	r3, #255	@ 0xff
 80041b8:	d90e      	bls.n	80041d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	22ff      	movs	r2, #255	@ 0xff
 80041be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	8979      	ldrh	r1, [r7, #10]
 80041c8:	2300      	movs	r3, #0
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fc47 	bl	8004a64 <I2C_TransferConfig>
 80041d6:	e00f      	b.n	80041f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fc36 	bl	8004a64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fac6 	bl	800478e <I2C_WaitOnTXISFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e07b      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d034      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d130      	bne.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	@ 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fa3f 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e04d      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	2bff      	cmp	r3, #255	@ 0xff
 8004270:	d90e      	bls.n	8004290 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	22ff      	movs	r2, #255	@ 0xff
 8004276:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427c:	b2da      	uxtb	r2, r3
 800427e:	8979      	ldrh	r1, [r7, #10]
 8004280:	2300      	movs	r3, #0
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 fbeb 	bl	8004a64 <I2C_TransferConfig>
 800428e:	e00f      	b.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	8979      	ldrh	r1, [r7, #10]
 80042a2:	2300      	movs	r3, #0
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 fbda 	bl	8004a64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d19e      	bne.n	80041f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 faac 	bl	800481c <I2C_WaitOnSTOPFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e01a      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2220      	movs	r2, #32
 80042d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <HAL_I2C_Mem_Write+0x224>)
 80042e2:	400b      	ands	r3, r1
 80042e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	fe00e800 	.word	0xfe00e800

08004310 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4603      	mov	r3, r0
 8004320:	817b      	strh	r3, [r7, #10]
 8004322:	460b      	mov	r3, r1
 8004324:	813b      	strh	r3, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b20      	cmp	r3, #32
 8004334:	f040 80fd 	bne.w	8004532 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_I2C_Mem_Read+0x34>
 800433e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800434a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0f1      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_I2C_Mem_Read+0x4e>
 800435a:	2302      	movs	r3, #2
 800435c:	e0ea      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004366:	f7fd fe33 	bl	8001fd0 <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2319      	movs	r3, #25
 8004372:	2201      	movs	r2, #1
 8004374:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f9af 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0d5      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2222      	movs	r2, #34	@ 0x22
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2240      	movs	r2, #64	@ 0x40
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043b0:	88f8      	ldrh	r0, [r7, #6]
 80043b2:	893a      	ldrh	r2, [r7, #8]
 80043b4:	8979      	ldrh	r1, [r7, #10]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4603      	mov	r3, r0
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f913 	bl	80045ec <I2C_RequestMemoryRead>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0ad      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2bff      	cmp	r3, #255	@ 0xff
 80043e0:	d90e      	bls.n	8004400 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	22ff      	movs	r2, #255	@ 0xff
 80043e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	8979      	ldrh	r1, [r7, #10]
 80043f0:	4b52      	ldr	r3, [pc, #328]	@ (800453c <HAL_I2C_Mem_Read+0x22c>)
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fb33 	bl	8004a64 <I2C_TransferConfig>
 80043fe:	e00f      	b.n	8004420 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440e:	b2da      	uxtb	r2, r3
 8004410:	8979      	ldrh	r1, [r7, #10]
 8004412:	4b4a      	ldr	r3, [pc, #296]	@ (800453c <HAL_I2C_Mem_Read+0x22c>)
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fb22 	bl	8004a64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	2200      	movs	r2, #0
 8004428:	2104      	movs	r1, #4
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f956 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e07c      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d034      	beq.n	80044e0 <HAL_I2C_Mem_Read+0x1d0>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d130      	bne.n	80044e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004484:	2200      	movs	r2, #0
 8004486:	2180      	movs	r1, #128	@ 0x80
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f927 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e04d      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2bff      	cmp	r3, #255	@ 0xff
 80044a0:	d90e      	bls.n	80044c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	22ff      	movs	r2, #255	@ 0xff
 80044a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	8979      	ldrh	r1, [r7, #10]
 80044b0:	2300      	movs	r3, #0
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fad3 	bl	8004a64 <I2C_TransferConfig>
 80044be:	e00f      	b.n	80044e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	8979      	ldrh	r1, [r7, #10]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fac2 	bl	8004a64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d19a      	bne.n	8004420 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f994 	bl	800481c <I2C_WaitOnSTOPFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e01a      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2220      	movs	r2, #32
 8004504:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <HAL_I2C_Mem_Read+0x230>)
 8004512:	400b      	ands	r3, r1
 8004514:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	e000      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004532:	2302      	movs	r3, #2
  }
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	80002400 	.word	0x80002400
 8004540:	fe00e800 	.word	0xfe00e800

08004544 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	4608      	mov	r0, r1
 800454e:	4611      	mov	r1, r2
 8004550:	461a      	mov	r2, r3
 8004552:	4603      	mov	r3, r0
 8004554:	817b      	strh	r3, [r7, #10]
 8004556:	460b      	mov	r3, r1
 8004558:	813b      	strh	r3, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	8979      	ldrh	r1, [r7, #10]
 8004564:	4b20      	ldr	r3, [pc, #128]	@ (80045e8 <I2C_RequestMemoryWrite+0xa4>)
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fa79 	bl	8004a64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	69b9      	ldr	r1, [r7, #24]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f909 	bl	800478e <I2C_WaitOnTXISFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e02c      	b.n	80045e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800458c:	893b      	ldrh	r3, [r7, #8]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	629a      	str	r2, [r3, #40]	@ 0x28
 8004596:	e015      	b.n	80045c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	0a1b      	lsrs	r3, r3, #8
 800459c:	b29b      	uxth	r3, r3
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f8ef 	bl	800478e <I2C_WaitOnTXISFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e012      	b.n	80045e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ba:	893b      	ldrh	r3, [r7, #8]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2180      	movs	r1, #128	@ 0x80
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f884 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	80002000 	.word	0x80002000

080045ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	817b      	strh	r3, [r7, #10]
 80045fe:	460b      	mov	r3, r1
 8004600:	813b      	strh	r3, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	8979      	ldrh	r1, [r7, #10]
 800460c:	4b20      	ldr	r3, [pc, #128]	@ (8004690 <I2C_RequestMemoryRead+0xa4>)
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fa26 	bl	8004a64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	69b9      	ldr	r1, [r7, #24]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f8b6 	bl	800478e <I2C_WaitOnTXISFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e02c      	b.n	8004686 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d105      	bne.n	800463e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004632:	893b      	ldrh	r3, [r7, #8]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	629a      	str	r2, [r3, #40]	@ 0x28
 800463c:	e015      	b.n	800466a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800463e:	893b      	ldrh	r3, [r7, #8]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	b29b      	uxth	r3, r3
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	69b9      	ldr	r1, [r7, #24]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f89c 	bl	800478e <I2C_WaitOnTXISFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e012      	b.n	8004686 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004660:	893b      	ldrh	r3, [r7, #8]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2200      	movs	r2, #0
 8004672:	2140      	movs	r1, #64	@ 0x40
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f831 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	80002000 	.word	0x80002000

08004694 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d103      	bne.n	80046b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d007      	beq.n	80046d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	619a      	str	r2, [r3, #24]
  }
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ec:	e03b      	b.n	8004766 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	6839      	ldr	r1, [r7, #0]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f8d6 	bl	80048a4 <I2C_IsErrorOccurred>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e041      	b.n	8004786 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004708:	d02d      	beq.n	8004766 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470a:	f7fd fc61 	bl	8001fd0 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <I2C_WaitOnFlagUntilTimeout+0x44>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d122      	bne.n	8004766 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4013      	ands	r3, r2
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	429a      	cmp	r2, r3
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	429a      	cmp	r2, r3
 800473c:	d113      	bne.n	8004766 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004742:	f043 0220 	orr.w	r2, r3, #32
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e00f      	b.n	8004786 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	429a      	cmp	r2, r3
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	429a      	cmp	r2, r3
 8004782:	d0b4      	beq.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800479a:	e033      	b.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f87f 	bl	80048a4 <I2C_IsErrorOccurred>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e031      	b.n	8004814 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047b6:	d025      	beq.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b8:	f7fd fc0a 	bl	8001fd0 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d11a      	bne.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d013      	beq.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e0:	f043 0220 	orr.w	r2, r3, #32
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e007      	b.n	8004814 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d1c4      	bne.n	800479c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004828:	e02f      	b.n	800488a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f838 	bl	80048a4 <I2C_IsErrorOccurred>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e02d      	b.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483e:	f7fd fbc7 	bl	8001fd0 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	429a      	cmp	r2, r3
 800484c:	d302      	bcc.n	8004854 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d11a      	bne.n	800488a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b20      	cmp	r3, #32
 8004860:	d013      	beq.n	800488a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004866:	f043 0220 	orr.w	r2, r3, #32
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e007      	b.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b20      	cmp	r3, #32
 8004896:	d1c8      	bne.n	800482a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	@ 0x28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d068      	beq.n	80049a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2210      	movs	r2, #16
 80048d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048d8:	e049      	b.n	800496e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e0:	d045      	beq.n	800496e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fd fb75 	bl	8001fd0 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <I2C_IsErrorOccurred+0x54>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d13a      	bne.n	800496e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004902:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800490a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800491a:	d121      	bne.n	8004960 <I2C_IsErrorOccurred+0xbc>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004922:	d01d      	beq.n	8004960 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	2b20      	cmp	r3, #32
 8004928:	d01a      	beq.n	8004960 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004938:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800493a:	f7fd fb49 	bl	8001fd0 <HAL_GetTick>
 800493e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004940:	e00e      	b.n	8004960 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004942:	f7fd fb45 	bl	8001fd0 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b19      	cmp	r3, #25
 800494e:	d907      	bls.n	8004960 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f043 0320 	orr.w	r3, r3, #32
 8004956:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800495e:	e006      	b.n	800496e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b20      	cmp	r3, #32
 800496c:	d1e9      	bne.n	8004942 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b20      	cmp	r3, #32
 800497a:	d003      	beq.n	8004984 <I2C_IsErrorOccurred+0xe0>
 800497c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0aa      	beq.n	80048da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2220      	movs	r2, #32
 8004992:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00b      	beq.n	80049cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	f043 0308 	orr.w	r3, r3, #8
 80049dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	f043 0302 	orr.w	r3, r3, #2
 80049fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01c      	beq.n	8004a52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff fe3b 	bl	8004694 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6859      	ldr	r1, [r3, #4]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b0d      	ldr	r3, [pc, #52]	@ (8004a60 <I2C_IsErrorOccurred+0x1bc>)
 8004a2a:	400b      	ands	r3, r1
 8004a2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3728      	adds	r7, #40	@ 0x28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	fe00e800 	.word	0xfe00e800

08004a64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	817b      	strh	r3, [r7, #10]
 8004a72:	4613      	mov	r3, r2
 8004a74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a76:	897b      	ldrh	r3, [r7, #10]
 8004a78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a7c:	7a7b      	ldrb	r3, [r7, #9]
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	0d5b      	lsrs	r3, r3, #21
 8004a9e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004aa2:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <I2C_TransferConfig+0x60>)
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	ea02 0103 	and.w	r1, r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	03ff63ff 	.word	0x03ff63ff

08004ac8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	d138      	bne.n	8004b50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e032      	b.n	8004b52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2224      	movs	r2, #36	@ 0x24
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
  }
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d139      	bne.n	8004be8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e033      	b.n	8004bea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2224      	movs	r2, #36	@ 0x24
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	e000      	b.n	8004bea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004be8:	2302      	movs	r3, #2
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0c0      	b.n	8004d8a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f009 fd21 	bl	800e664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2203      	movs	r2, #3
 8004c26:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f003 f86d 	bl	8007d0e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c34:	2300      	movs	r3, #0
 8004c36:	73fb      	strb	r3, [r7, #15]
 8004c38:	e03e      	b.n	8004cb8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c3a:	7bfa      	ldrb	r2, [r7, #15]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	440b      	add	r3, r1
 8004c48:	3311      	adds	r3, #17
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c4e:	7bfa      	ldrb	r2, [r7, #15]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3310      	adds	r3, #16
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c62:	7bfa      	ldrb	r2, [r7, #15]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	440b      	add	r3, r1
 8004c70:	3313      	adds	r3, #19
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c76:	7bfa      	ldrb	r2, [r7, #15]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	440b      	add	r3, r1
 8004c84:	3320      	adds	r3, #32
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c8a:	7bfa      	ldrb	r2, [r7, #15]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	440b      	add	r3, r1
 8004c98:	3324      	adds	r3, #36	@ 0x24
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	440b      	add	r3, r1
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	791b      	ldrb	r3, [r3, #4]
 8004cbc:	7bfa      	ldrb	r2, [r7, #15]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d3bb      	bcc.n	8004c3a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
 8004cc6:	e044      	b.n	8004d52 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cc8:	7bfa      	ldrb	r2, [r7, #15]
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	440b      	add	r3, r1
 8004cd6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cde:	7bfa      	ldrb	r2, [r7, #15]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	440b      	add	r3, r1
 8004cec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cf0:	7bfa      	ldrb	r2, [r7, #15]
 8004cf2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cf4:	7bfa      	ldrb	r2, [r7, #15]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	440b      	add	r3, r1
 8004d02:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d0a:	7bfa      	ldrb	r2, [r7, #15]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	440b      	add	r3, r1
 8004d18:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d20:	7bfa      	ldrb	r2, [r7, #15]
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	440b      	add	r3, r1
 8004d2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d36:	7bfa      	ldrb	r2, [r7, #15]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	440b      	add	r3, r1
 8004d44:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	791b      	ldrb	r3, [r3, #4]
 8004d56:	7bfa      	ldrb	r2, [r7, #15]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d3b5      	bcc.n	8004cc8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004d68:	f002 ffec 	bl	8007d44 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7a9b      	ldrb	r3, [r3, #10]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d102      	bne.n	8004d88 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f001 fc0e 	bl	80065a4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_PCD_Start+0x16>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e012      	b.n	8004dce <HAL_PCD_Start+0x3c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f002 ff93 	bl	8007ce0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f004 fd70 	bl	80098a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f004 fd75 	bl	80098d2 <USB_ReadInterrupts>
 8004de8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fb06 	bl	8005406 <PCD_EP_ISR_Handler>

    return;
 8004dfa:	e110      	b.n	800501e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d013      	beq.n	8004e2e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e18:	b292      	uxth	r2, r2
 8004e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f009 fcb1 	bl	800e786 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004e24:	2100      	movs	r1, #0
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8fc 	bl	8005024 <HAL_PCD_SetAddress>

    return;
 8004e2c:	e0f7      	b.n	800501e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00c      	beq.n	8004e52 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004e50:	e0e5      	b.n	800501e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00c      	beq.n	8004e76 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004e74:	e0d3      	b.n	800501e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d034      	beq.n	8004eea <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0204 	bic.w	r2, r2, #4
 8004e92:	b292      	uxth	r2, r2
 8004e94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0208 	bic.w	r2, r2, #8
 8004eaa:	b292      	uxth	r2, r2
 8004eac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d107      	bne.n	8004eca <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f009 fe51 	bl	800eb6c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f009 fc94 	bl	800e7f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ee2:	b292      	uxth	r2, r2
 8004ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004ee8:	e099      	b.n	800501e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d027      	beq.n	8004f44 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0208 	orr.w	r2, r2, #8
 8004f06:	b292      	uxth	r2, r2
 8004f08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f1e:	b292      	uxth	r2, r2
 8004f20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0204 	orr.w	r2, r2, #4
 8004f36:	b292      	uxth	r2, r2
 8004f38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f009 fc41 	bl	800e7c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004f42:	e06c      	b.n	800501e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d040      	beq.n	8004fd0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f60:	b292      	uxth	r2, r2
 8004f62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d12b      	bne.n	8004fc8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0204 	orr.w	r2, r2, #4
 8004f82:	b292      	uxth	r2, r2
 8004f84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0208 	orr.w	r2, r2, #8
 8004f9a:	b292      	uxth	r2, r2
 8004f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f009 fdd3 	bl	800eb6c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004fc6:	e02a      	b.n	800501e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f009 fbfb 	bl	800e7c4 <HAL_PCD_SuspendCallback>
    return;
 8004fce:	e026      	b.n	800501e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00f      	beq.n	8004ffa <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004fec:	b292      	uxth	r2, r2
 8004fee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f009 fbb9 	bl	800e76a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004ff8:	e011      	b.n	800501e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00c      	beq.n	800501e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005016:	b292      	uxth	r2, r2
 8005018:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800501c:	bf00      	nop
  }
}
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_PCD_SetAddress+0x1a>
 800503a:	2302      	movs	r3, #2
 800503c:	e012      	b.n	8005064 <HAL_PCD_SetAddress+0x40>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	78fa      	ldrb	r2, [r7, #3]
 8005052:	4611      	mov	r1, r2
 8005054:	4618      	mov	r0, r3
 8005056:	f004 fc11 	bl	800987c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	4608      	mov	r0, r1
 8005076:	4611      	mov	r1, r2
 8005078:	461a      	mov	r2, r3
 800507a:	4603      	mov	r3, r0
 800507c:	70fb      	strb	r3, [r7, #3]
 800507e:	460b      	mov	r3, r1
 8005080:	803b      	strh	r3, [r7, #0]
 8005082:	4613      	mov	r3, r2
 8005084:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800508a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800508e:	2b00      	cmp	r3, #0
 8005090:	da0e      	bge.n	80050b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	f003 0207 	and.w	r2, r3, #7
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	3310      	adds	r3, #16
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	705a      	strb	r2, [r3, #1]
 80050ae:	e00e      	b.n	80050ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	f003 0207 	and.w	r2, r3, #7
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4413      	add	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80050da:	883b      	ldrh	r3, [r7, #0]
 80050dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	78ba      	ldrb	r2, [r7, #2]
 80050e8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050ea:	78bb      	ldrb	r3, [r7, #2]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d102      	bne.n	80050f6 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_PCD_EP_Open+0x98>
 8005100:	2302      	movs	r3, #2
 8005102:	e00e      	b.n	8005122 <HAL_PCD_EP_Open+0xb6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68f9      	ldr	r1, [r7, #12]
 8005112:	4618      	mov	r0, r3
 8005114:	f002 fe34 	bl	8007d80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005120:	7afb      	ldrb	r3, [r7, #11]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	460b      	mov	r3, r1
 8005134:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800513a:	2b00      	cmp	r3, #0
 800513c:	da0e      	bge.n	800515c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	f003 0207 	and.w	r2, r3, #7
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	3310      	adds	r3, #16
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	705a      	strb	r2, [r3, #1]
 800515a:	e00e      	b.n	800517a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	f003 0207 	and.w	r2, r3, #7
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4413      	add	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_PCD_EP_Close+0x6a>
 8005190:	2302      	movs	r3, #2
 8005192:	e00e      	b.n	80051b2 <HAL_PCD_EP_Close+0x88>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f003 fad4 	bl	8008750 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b086      	sub	sp, #24
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	460b      	mov	r3, r1
 80051c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ca:	7afb      	ldrb	r3, [r7, #11]
 80051cc:	f003 0207 	and.w	r2, r3, #7
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2200      	movs	r2, #0
 80051f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051fa:	7afb      	ldrb	r3, [r7, #11]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	b2da      	uxtb	r2, r3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6979      	ldr	r1, [r7, #20]
 800520c:	4618      	mov	r0, r3
 800520e:	f003 fc8c 	bl	8008b2a <USB_EPStartXfer>

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	f003 0207 	and.w	r2, r3, #7
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800523e:	681b      	ldr	r3, [r3, #0]
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	460b      	mov	r3, r1
 800525a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800525c:	7afb      	ldrb	r3, [r7, #11]
 800525e:	f003 0207 	and.w	r2, r3, #7
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	3310      	adds	r3, #16
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2200      	movs	r2, #0
 8005290:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2201      	movs	r2, #1
 8005296:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005298:	7afb      	ldrb	r3, [r7, #11]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6979      	ldr	r1, [r7, #20]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f003 fc3d 	bl	8008b2a <USB_EPStartXfer>

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	460b      	mov	r3, r1
 80052c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	7912      	ldrb	r2, [r2, #4]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d901      	bls.n	80052d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e03e      	b.n	8005356 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	da0e      	bge.n	80052fe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	f003 0207 	and.w	r2, r3, #7
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	3310      	adds	r3, #16
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	4413      	add	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	705a      	strb	r2, [r3, #1]
 80052fc:	e00c      	b.n	8005318 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4413      	add	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_PCD_EP_SetStall+0x7e>
 8005334:	2302      	movs	r3, #2
 8005336:	e00e      	b.n	8005356 <HAL_PCD_EP_SetStall+0x9c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68f9      	ldr	r1, [r7, #12]
 8005346:	4618      	mov	r0, r3
 8005348:	f004 f99e 	bl	8009688 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	7912      	ldrb	r2, [r2, #4]
 8005374:	4293      	cmp	r3, r2
 8005376:	d901      	bls.n	800537c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e040      	b.n	80053fe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800537c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005380:	2b00      	cmp	r3, #0
 8005382:	da0e      	bge.n	80053a2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	f003 0207 	and.w	r2, r3, #7
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	3310      	adds	r3, #16
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	4413      	add	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	705a      	strb	r2, [r3, #1]
 80053a0:	e00e      	b.n	80053c0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	f003 0207 	and.w	r2, r3, #7
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	4413      	add	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053c6:	78fb      	ldrb	r3, [r7, #3]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_PCD_EP_ClrStall+0x82>
 80053dc:	2302      	movs	r3, #2
 80053de:	e00e      	b.n	80053fe <HAL_PCD_EP_ClrStall+0xa0>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68f9      	ldr	r1, [r7, #12]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f004 f99b 	bl	800972a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b092      	sub	sp, #72	@ 0x48
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800540e:	e333      	b.n	8005a78 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005418:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800541a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005426:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800542a:	2b00      	cmp	r3, #0
 800542c:	f040 8108 	bne.w	8005640 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005430:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b00      	cmp	r3, #0
 8005438:	d14c      	bne.n	80054d4 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544a:	813b      	strh	r3, [r7, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	893b      	ldrh	r3, [r7, #8]
 8005452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545a:	b29b      	uxth	r3, r3
 800545c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3310      	adds	r3, #16
 8005462:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800546c:	b29b      	uxth	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4413      	add	r3, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	4413      	add	r3, r2
 800547e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800548a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800548c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	441a      	add	r2, r3
 8005496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005498:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800549a:	2100      	movs	r1, #0
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f009 f94a 	bl	800e736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	7b1b      	ldrb	r3, [r3, #12]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 82e5 	beq.w	8005a78 <PCD_EP_ISR_Handler+0x672>
 80054ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 82e0 	bne.w	8005a78 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	7b1b      	ldrb	r3, [r3, #12]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	731a      	strb	r2, [r3, #12]
 80054d2:	e2d1      	b.n	8005a78 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054da:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80054e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d032      	beq.n	8005554 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	461a      	mov	r2, r3
 80054fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	4413      	add	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	4413      	add	r3, r2
 8005508:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005514:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005522:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005526:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005528:	b29b      	uxth	r3, r3
 800552a:	f004 fa24 	bl	8009976 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29a      	uxth	r2, r3
 8005536:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800553a:	4013      	ands	r3, r2
 800553c:	817b      	strh	r3, [r7, #10]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	897a      	ldrh	r2, [r7, #10]
 8005544:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005548:	b292      	uxth	r2, r2
 800554a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f009 f8c5 	bl	800e6dc <HAL_PCD_SetupStageCallback>
 8005552:	e291      	b.n	8005a78 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005554:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005558:	2b00      	cmp	r3, #0
 800555a:	f280 828d 	bge.w	8005a78 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29a      	uxth	r2, r3
 8005566:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800556a:	4013      	ands	r3, r2
 800556c:	81fb      	strh	r3, [r7, #14]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	89fa      	ldrh	r2, [r7, #14]
 8005574:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005578:	b292      	uxth	r2, r2
 800557a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005584:	b29b      	uxth	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4413      	add	r3, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	4413      	add	r3, r2
 8005596:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80055a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80055a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d019      	beq.n	80055e0 <PCD_EP_ISR_Handler+0x1da>
 80055ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d015      	beq.n	80055e0 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ba:	6959      	ldr	r1, [r3, #20]
 80055bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055be:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80055c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f004 f9d6 	bl	8009976 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80055ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	441a      	add	r2, r3
 80055d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80055d8:	2100      	movs	r1, #0
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f009 f890 	bl	800e700 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80055e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 8242 	bne.w	8005a78 <PCD_EP_ISR_Handler+0x672>
 80055f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80055fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055fe:	f000 823b 	beq.w	8005a78 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800560e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005612:	81bb      	strh	r3, [r7, #12]
 8005614:	89bb      	ldrh	r3, [r7, #12]
 8005616:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800561a:	81bb      	strh	r3, [r7, #12]
 800561c:	89bb      	ldrh	r3, [r7, #12]
 800561e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005622:	81bb      	strh	r3, [r7, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	89bb      	ldrh	r3, [r7, #12]
 800562a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800562e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800563a:	b29b      	uxth	r3, r3
 800563c:	8013      	strh	r3, [r2, #0]
 800563e:	e21b      	b.n	8005a78 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005652:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005656:	2b00      	cmp	r3, #0
 8005658:	f280 80f1 	bge.w	800583e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29a      	uxth	r2, r3
 800566e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005672:	4013      	ands	r3, r2
 8005674:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005686:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800568a:	b292      	uxth	r2, r2
 800568c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800568e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80056a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056a6:	7b1b      	ldrb	r3, [r3, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d123      	bne.n	80056f4 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	4413      	add	r3, r2
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	4413      	add	r3, r2
 80056c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80056d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 808b 	beq.w	80057f4 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e4:	6959      	ldr	r1, [r3, #20]
 80056e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e8:	88da      	ldrh	r2, [r3, #6]
 80056ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80056ee:	f004 f942 	bl	8009976 <USB_ReadPMA>
 80056f2:	e07f      	b.n	80057f4 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80056f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f6:	78db      	ldrb	r3, [r3, #3]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d109      	bne.n	8005710 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80056fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056fe:	461a      	mov	r2, r3
 8005700:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f9c6 	bl	8005a94 <HAL_PCD_EP_DB_Receive>
 8005708:	4603      	mov	r3, r0
 800570a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800570e:	e071      	b.n	80057f4 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800573c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005748:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800574c:	b29b      	uxth	r3, r3
 800574e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d022      	beq.n	80057b0 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4413      	add	r3, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	4413      	add	r3, r2
 8005784:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005792:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005796:	2b00      	cmp	r3, #0
 8005798:	d02c      	beq.n	80057f4 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a0:	6959      	ldr	r1, [r3, #20]
 80057a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a4:	891a      	ldrh	r2, [r3, #8]
 80057a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80057aa:	f004 f8e4 	bl	8009976 <USB_ReadPMA>
 80057ae:	e021      	b.n	80057f4 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	4413      	add	r3, r2
 80057ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057d4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80057d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e6:	6959      	ldr	r1, [r3, #20]
 80057e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ea:	895a      	ldrh	r2, [r3, #10]
 80057ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80057f0:	f004 f8c1 	bl	8009976 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80057f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80057fc:	441a      	add	r2, r3
 80057fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005800:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800580a:	441a      	add	r2, r3
 800580c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800580e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <PCD_EP_ISR_Handler+0x41e>
 8005818:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800581c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	429a      	cmp	r2, r3
 8005822:	d206      	bcs.n	8005832 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f008 ff68 	bl	800e700 <HAL_PCD_DataOutStageCallback>
 8005830:	e005      	b.n	800583e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005838:	4618      	mov	r0, r3
 800583a:	f003 f976 	bl	8008b2a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800583e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 8117 	beq.w	8005a78 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800584a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	3310      	adds	r3, #16
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4413      	add	r3, r2
 800585c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005878:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	441a      	add	r2, r3
 8005888:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800588a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800588e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005892:	b29b      	uxth	r3, r3
 8005894:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005898:	78db      	ldrb	r3, [r3, #3]
 800589a:	2b01      	cmp	r3, #1
 800589c:	f040 80a1 	bne.w	80059e2 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80058a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058a2:	2200      	movs	r2, #0
 80058a4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80058a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058a8:	7b1b      	ldrb	r3, [r3, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8092 	beq.w	80059d4 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d046      	beq.n	8005948 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d126      	bne.n	8005910 <PCD_EP_ISR_Handler+0x50a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	00da      	lsls	r2, r3, #3
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	4413      	add	r3, r2
 80058e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005908:	b29a      	uxth	r2, r3
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	e061      	b.n	80059d4 <PCD_EP_ISR_Handler+0x5ce>
 8005910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005912:	785b      	ldrb	r3, [r3, #1]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d15d      	bne.n	80059d4 <PCD_EP_ISR_Handler+0x5ce>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005926:	b29b      	uxth	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	61fb      	str	r3, [r7, #28]
 8005930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	00da      	lsls	r2, r3, #3
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2200      	movs	r2, #0
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e045      	b.n	80059d4 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800594e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d126      	bne.n	80059a4 <PCD_EP_ISR_Handler+0x59e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005964:	b29b      	uxth	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	4413      	add	r3, r2
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
 800596e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	00da      	lsls	r2, r3, #3
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	4413      	add	r3, r2
 8005978:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800597c:	623b      	str	r3, [r7, #32]
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005988:	b29a      	uxth	r2, r3
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599c:	b29a      	uxth	r2, r3
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e017      	b.n	80059d4 <PCD_EP_ISR_Handler+0x5ce>
 80059a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d113      	bne.n	80059d4 <PCD_EP_ISR_Handler+0x5ce>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ba:	4413      	add	r3, r2
 80059bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	00da      	lsls	r2, r3, #3
 80059c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d0:	2200      	movs	r2, #0
 80059d2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f008 feab 	bl	800e736 <HAL_PCD_DataInStageCallback>
 80059e0:	e04a      	b.n	8005a78 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80059e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80059e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d13f      	bne.n	8005a6c <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	4413      	add	r3, r2
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	4413      	add	r3, r2
 8005a06:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a10:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d906      	bls.n	8005a2a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8005a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a22:	1ad2      	subs	r2, r2, r3
 8005a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a26:	619a      	str	r2, [r3, #24]
 8005a28:	e002      	b.n	8005a30 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f008 fe79 	bl	800e736 <HAL_PCD_DataInStageCallback>
 8005a44:	e018      	b.n	8005a78 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a48:	695a      	ldr	r2, [r3, #20]
 8005a4a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a4c:	441a      	add	r2, r3
 8005a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a50:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a58:	441a      	add	r2, r3
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a64:	4618      	mov	r0, r3
 8005a66:	f003 f860 	bl	8008b2a <USB_EPStartXfer>
 8005a6a:	e005      	b.n	8005a78 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005a6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f917 	bl	8005ca6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f6ff acc3 	blt.w	8005410 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3748      	adds	r7, #72	@ 0x48
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d07c      	beq.n	8005ba6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4413      	add	r3, r2
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ad0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	8b7b      	ldrh	r3, [r7, #26]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d306      	bcc.n	8005aea <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	699a      	ldr	r2, [r3, #24]
 8005ae0:	8b7b      	ldrh	r3, [r7, #26]
 8005ae2:	1ad2      	subs	r2, r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	619a      	str	r2, [r3, #24]
 8005ae8:	e002      	b.n	8005af0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2200      	movs	r2, #0
 8005aee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d123      	bne.n	8005b40 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b12:	833b      	strh	r3, [r7, #24]
 8005b14:	8b3b      	ldrh	r3, [r7, #24]
 8005b16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b1a:	833b      	strh	r3, [r7, #24]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	8b3b      	ldrh	r3, [r7, #24]
 8005b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01f      	beq.n	8005b8a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b64:	82fb      	strh	r3, [r7, #22]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	8afb      	ldrh	r3, [r7, #22]
 8005b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005b8a:	8b7b      	ldrh	r3, [r7, #26]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8085 	beq.w	8005c9c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6959      	ldr	r1, [r3, #20]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	891a      	ldrh	r2, [r3, #8]
 8005b9e:	8b7b      	ldrh	r3, [r7, #26]
 8005ba0:	f003 fee9 	bl	8009976 <USB_ReadPMA>
 8005ba4:	e07a      	b.n	8005c9c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4413      	add	r3, r2
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	8b7b      	ldrh	r3, [r7, #26]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d306      	bcc.n	8005be4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	8b7b      	ldrh	r3, [r7, #26]
 8005bdc:	1ad2      	subs	r2, r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	619a      	str	r2, [r3, #24]
 8005be2:	e002      	b.n	8005bea <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2200      	movs	r2, #0
 8005be8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d123      	bne.n	8005c3a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0c:	83fb      	strh	r3, [r7, #30]
 8005c0e:	8bfb      	ldrh	r3, [r7, #30]
 8005c10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c14:	83fb      	strh	r3, [r7, #30]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	8bfb      	ldrh	r3, [r7, #30]
 8005c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11f      	bne.n	8005c84 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5e:	83bb      	strh	r3, [r7, #28]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	441a      	add	r2, r3
 8005c6e:	8bbb      	ldrh	r3, [r7, #28]
 8005c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005c84:	8b7b      	ldrh	r3, [r7, #26]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6959      	ldr	r1, [r3, #20]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	895a      	ldrh	r2, [r3, #10]
 8005c96:	8b7b      	ldrh	r3, [r7, #26]
 8005c98:	f003 fe6d 	bl	8009976 <USB_ReadPMA>
    }
  }

  return count;
 8005c9c:	8b7b      	ldrh	r3, [r7, #26]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b0a6      	sub	sp, #152	@ 0x98
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 81f7 	beq.w	80060ae <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d907      	bls.n	8005d04 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	699a      	ldr	r2, [r3, #24]
 8005cf8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005cfc:	1ad2      	subs	r2, r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	619a      	str	r2, [r3, #24]
 8005d02:	e002      	b.n	8005d0a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2200      	movs	r2, #0
 8005d08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f040 80e1 	bne.w	8005ed6 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d126      	bne.n	8005d6a <HAL_PCD_EP_DB_Transmit+0xc4>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	4413      	add	r3, r2
 8005d32:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	00da      	lsls	r2, r3, #3
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e01a      	b.n	8005da0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d116      	bne.n	8005da0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	461a      	mov	r2, r3
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	4413      	add	r3, r2
 8005d88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	00da      	lsls	r2, r3, #3
 8005d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d92:	4413      	add	r3, r2
 8005d94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d126      	bne.n	8005dfc <HAL_PCD_EP_DB_Transmit+0x156>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	623b      	str	r3, [r7, #32]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	623b      	str	r3, [r7, #32]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	00da      	lsls	r2, r3, #3
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	801a      	strh	r2, [r3, #0]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	e017      	b.n	8005e2c <HAL_PCD_EP_DB_Transmit+0x186>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d113      	bne.n	8005e2c <HAL_PCD_EP_DB_Transmit+0x186>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e12:	4413      	add	r3, r2
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	00da      	lsls	r2, r3, #3
 8005e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1e:	4413      	add	r3, r2
 8005e20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	2200      	movs	r2, #0
 8005e2a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	78db      	ldrb	r3, [r3, #3]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d123      	bne.n	8005e7c <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e4e:	837b      	strh	r3, [r7, #26]
 8005e50:	8b7b      	ldrh	r3, [r7, #26]
 8005e52:	f083 0320 	eor.w	r3, r3, #32
 8005e56:	837b      	strh	r3, [r7, #26]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	441a      	add	r2, r3
 8005e66:	8b7b      	ldrh	r3, [r7, #26]
 8005e68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	4619      	mov	r1, r3
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f008 fc57 	bl	800e736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01f      	beq.n	8005ed2 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eac:	833b      	strh	r3, [r7, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	441a      	add	r2, r3
 8005ebc:	8b3b      	ldrh	r3, [r7, #24]
 8005ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ec6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e31f      	b.n	8006516 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d021      	beq.n	8005f24 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	f040 82ca 	bne.w	80064c4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	695a      	ldr	r2, [r3, #20]
 8005f34:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f38:	441a      	add	r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	69da      	ldr	r2, [r3, #28]
 8005f42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f46:	441a      	add	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d309      	bcc.n	8005f6c <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6a1a      	ldr	r2, [r3, #32]
 8005f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f64:	1ad2      	subs	r2, r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	621a      	str	r2, [r3, #32]
 8005f6a:	e015      	b.n	8005f98 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d107      	bne.n	8005f84 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8005f74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f78:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005f82:	e009      	b.n	8005f98 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2200      	movs	r2, #0
 8005f96:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d15f      	bne.n	8006060 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fb4:	4413      	add	r3, r2
 8005fb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	00da      	lsls	r2, r3, #3
 8005fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <HAL_PCD_EP_DB_Transmit+0x34e>
 8005fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff0:	801a      	strh	r2, [r3, #0]
 8005ff2:	e051      	b.n	8006098 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005ff4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ff6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ff8:	d816      	bhi.n	8006028 <HAL_PCD_EP_DB_Transmit+0x382>
 8005ffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ffc:	085b      	lsrs	r3, r3, #1
 8005ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_PCD_EP_DB_Transmit+0x36a>
 800600a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800600c:	3301      	adds	r3, #1
 800600e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29a      	uxth	r2, r3
 8006016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006018:	b29b      	uxth	r3, r3
 800601a:	029b      	lsls	r3, r3, #10
 800601c:	b29b      	uxth	r3, r3
 800601e:	4313      	orrs	r3, r2
 8006020:	b29a      	uxth	r2, r3
 8006022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006024:	801a      	strh	r2, [r3, #0]
 8006026:	e037      	b.n	8006098 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	653b      	str	r3, [r7, #80]	@ 0x50
 800602e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006030:	f003 031f 	and.w	r3, r3, #31
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <HAL_PCD_EP_DB_Transmit+0x398>
 8006038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800603a:	3b01      	subs	r3, #1
 800603c:	653b      	str	r3, [r7, #80]	@ 0x50
 800603e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29a      	uxth	r2, r3
 8006044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006046:	b29b      	uxth	r3, r3
 8006048:	029b      	lsls	r3, r3, #10
 800604a:	b29b      	uxth	r3, r3
 800604c:	4313      	orrs	r3, r2
 800604e:	b29b      	uxth	r3, r3
 8006050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006058:	b29a      	uxth	r2, r3
 800605a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	e01b      	b.n	8006098 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d117      	bne.n	8006098 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006076:	b29b      	uxth	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800607c:	4413      	add	r3, r2
 800607e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	00da      	lsls	r2, r3, #3
 8006086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006088:	4413      	add	r3, r2
 800608a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800608e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006090:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006092:	b29a      	uxth	r2, r3
 8006094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006096:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	6959      	ldr	r1, [r3, #20]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	891a      	ldrh	r2, [r3, #8]
 80060a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f003 fc23 	bl	80098f2 <USB_WritePMA>
 80060ac:	e20a      	b.n	80064c4 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	4413      	add	r3, r2
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	4413      	add	r3, r2
 80060c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060de:	429a      	cmp	r2, r3
 80060e0:	d307      	bcc.n	80060f2 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060ea:	1ad2      	subs	r2, r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	619a      	str	r2, [r3, #24]
 80060f0:	e002      	b.n	80060f8 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f040 80f6 	bne.w	80062ee <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d126      	bne.n	8006158 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006118:	b29b      	uxth	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800611e:	4413      	add	r3, r2
 8006120:	677b      	str	r3, [r7, #116]	@ 0x74
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	00da      	lsls	r2, r3, #3
 8006128:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800612a:	4413      	add	r3, r2
 800612c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006130:	673b      	str	r3, [r7, #112]	@ 0x70
 8006132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800613c:	b29a      	uxth	r2, r3
 800613e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006140:	801a      	strh	r2, [r3, #0]
 8006142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006150:	b29a      	uxth	r2, r3
 8006152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	e01a      	b.n	800618e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	785b      	ldrb	r3, [r3, #1]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d116      	bne.n	800618e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800616e:	b29b      	uxth	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006174:	4413      	add	r3, r2
 8006176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	00da      	lsls	r2, r3, #3
 800617e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006180:	4413      	add	r3, r2
 8006182:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006186:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800618a:	2200      	movs	r2, #0
 800618c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d12f      	bne.n	80061fe <HAL_PCD_EP_DB_Transmit+0x558>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061b6:	4413      	add	r3, r2
 80061b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	00da      	lsls	r2, r3, #3
 80061c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061c6:	4413      	add	r3, r2
 80061c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061dc:	b29a      	uxth	r2, r3
 80061de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	e01c      	b.n	8006238 <HAL_PCD_EP_DB_Transmit+0x592>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d118      	bne.n	8006238 <HAL_PCD_EP_DB_Transmit+0x592>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800620e:	b29b      	uxth	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006216:	4413      	add	r3, r2
 8006218:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	00da      	lsls	r2, r3, #3
 8006222:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006226:	4413      	add	r3, r2
 8006228:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800622c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006230:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006234:	2200      	movs	r2, #0
 8006236:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	78db      	ldrb	r3, [r3, #3]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d127      	bne.n	8006290 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800625a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800625e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006262:	f083 0320 	eor.w	r3, r3, #32
 8006266:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	4619      	mov	r1, r3
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f008 fa4d 	bl	800e736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d121      	bne.n	80062ea <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80062d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e113      	b.n	8006516 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d121      	bne.n	800633c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800630e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006312:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	441a      	add	r2, r3
 8006324:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800632c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006330:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006338:	b29b      	uxth	r3, r3
 800633a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006342:	2b01      	cmp	r3, #1
 8006344:	f040 80be 	bne.w	80064c4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	695a      	ldr	r2, [r3, #20]
 800634c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006350:	441a      	add	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	69da      	ldr	r2, [r3, #28]
 800635a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800635e:	441a      	add	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d309      	bcc.n	8006384 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6a1a      	ldr	r2, [r3, #32]
 800637a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800637c:	1ad2      	subs	r2, r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	621a      	str	r2, [r3, #32]
 8006382:	e015      	b.n	80063b0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d107      	bne.n	800639c <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800638c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006390:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800639a:	e009      	b.n	80063b0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2200      	movs	r2, #0
 80063a6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	785b      	ldrb	r3, [r3, #1]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d15f      	bne.n	800647e <HAL_PCD_EP_DB_Transmit+0x7d8>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063d2:	4413      	add	r3, r2
 80063d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	00da      	lsls	r2, r3, #3
 80063dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063de:	4413      	add	r3, r2
 80063e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80063e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063f4:	801a      	strh	r2, [r3, #0]
 80063f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <HAL_PCD_EP_DB_Transmit+0x76c>
 80063fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640a:	b29a      	uxth	r2, r3
 800640c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	e04e      	b.n	80064b0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006414:	2b3e      	cmp	r3, #62	@ 0x3e
 8006416:	d816      	bhi.n	8006446 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	663b      	str	r3, [r7, #96]	@ 0x60
 800641e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_PCD_EP_DB_Transmit+0x788>
 8006428:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800642a:	3301      	adds	r3, #1
 800642c:	663b      	str	r3, [r7, #96]	@ 0x60
 800642e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29a      	uxth	r2, r3
 8006434:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006436:	b29b      	uxth	r3, r3
 8006438:	029b      	lsls	r3, r3, #10
 800643a:	b29b      	uxth	r3, r3
 800643c:	4313      	orrs	r3, r2
 800643e:	b29a      	uxth	r2, r3
 8006440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	e034      	b.n	80064b0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	663b      	str	r3, [r7, #96]	@ 0x60
 800644c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800644e:	f003 031f 	and.w	r3, r3, #31
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006458:	3b01      	subs	r3, #1
 800645a:	663b      	str	r3, [r7, #96]	@ 0x60
 800645c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29a      	uxth	r2, r3
 8006462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006464:	b29b      	uxth	r3, r3
 8006466:	029b      	lsls	r3, r3, #10
 8006468:	b29b      	uxth	r3, r3
 800646a:	4313      	orrs	r3, r2
 800646c:	b29b      	uxth	r3, r3
 800646e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006476:	b29a      	uxth	r2, r3
 8006478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800647a:	801a      	strh	r2, [r3, #0]
 800647c:	e018      	b.n	80064b0 <HAL_PCD_EP_DB_Transmit+0x80a>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d114      	bne.n	80064b0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006494:	4413      	add	r3, r2
 8006496:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	00da      	lsls	r2, r3, #3
 800649e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064a0:	4413      	add	r3, r2
 80064a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064ae:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	6959      	ldr	r1, [r3, #20]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	895a      	ldrh	r2, [r3, #10]
 80064bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f003 fa17 	bl	80098f2 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064de:	82fb      	strh	r3, [r7, #22]
 80064e0:	8afb      	ldrh	r3, [r7, #22]
 80064e2:	f083 0310 	eor.w	r3, r3, #16
 80064e6:	82fb      	strh	r3, [r7, #22]
 80064e8:	8afb      	ldrh	r3, [r7, #22]
 80064ea:	f083 0320 	eor.w	r3, r3, #32
 80064ee:	82fb      	strh	r3, [r7, #22]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	8afb      	ldrh	r3, [r7, #22]
 8006500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800650c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006510:	b29b      	uxth	r3, r3
 8006512:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3798      	adds	r7, #152	@ 0x98
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800651e:	b480      	push	{r7}
 8006520:	b087      	sub	sp, #28
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	607b      	str	r3, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	817b      	strh	r3, [r7, #10]
 800652c:	4613      	mov	r3, r2
 800652e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006530:	897b      	ldrh	r3, [r7, #10]
 8006532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800653c:	897b      	ldrh	r3, [r7, #10]
 800653e:	f003 0207 	and.w	r2, r3, #7
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	3310      	adds	r3, #16
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e009      	b.n	8006568 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006554:	897a      	ldrh	r2, [r7, #10]
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4413      	add	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006568:	893b      	ldrh	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d107      	bne.n	800657e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2200      	movs	r2, #0
 8006572:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	b29a      	uxth	r2, r3
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	80da      	strh	r2, [r3, #6]
 800657c:	e00b      	b.n	8006596 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2201      	movs	r2, #1
 8006582:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	b29a      	uxth	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	0c1b      	lsrs	r3, r3, #16
 8006590:	b29a      	uxth	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f043 0302 	orr.w	r3, r3, #2
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d141      	bne.n	800668a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006606:	4b4b      	ldr	r3, [pc, #300]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800660e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006612:	d131      	bne.n	8006678 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006614:	4b47      	ldr	r3, [pc, #284]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800661a:	4a46      	ldr	r2, [pc, #280]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800661c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006620:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006624:	4b43      	ldr	r3, [pc, #268]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800662c:	4a41      	ldr	r2, [pc, #260]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800662e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006632:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006634:	4b40      	ldr	r3, [pc, #256]	@ (8006738 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2232      	movs	r2, #50	@ 0x32
 800663a:	fb02 f303 	mul.w	r3, r2, r3
 800663e:	4a3f      	ldr	r2, [pc, #252]	@ (800673c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	0c9b      	lsrs	r3, r3, #18
 8006646:	3301      	adds	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800664a:	e002      	b.n	8006652 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3b01      	subs	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006652:	4b38      	ldr	r3, [pc, #224]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800665a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800665e:	d102      	bne.n	8006666 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1f2      	bne.n	800664c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006666:	4b33      	ldr	r3, [pc, #204]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800666e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006672:	d158      	bne.n	8006726 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e057      	b.n	8006728 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006678:	4b2e      	ldr	r3, [pc, #184]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800667a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800667e:	4a2d      	ldr	r2, [pc, #180]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006684:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006688:	e04d      	b.n	8006726 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006690:	d141      	bne.n	8006716 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006692:	4b28      	ldr	r3, [pc, #160]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800669a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669e:	d131      	bne.n	8006704 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066a0:	4b24      	ldr	r3, [pc, #144]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a6:	4a23      	ldr	r2, [pc, #140]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066b0:	4b20      	ldr	r3, [pc, #128]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2232      	movs	r2, #50	@ 0x32
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	4a1c      	ldr	r2, [pc, #112]	@ (800673c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066cc:	fba2 2303 	umull	r2, r3, r2, r3
 80066d0:	0c9b      	lsrs	r3, r3, #18
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066d6:	e002      	b.n	80066de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3b01      	subs	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066de:	4b15      	ldr	r3, [pc, #84]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ea:	d102      	bne.n	80066f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f2      	bne.n	80066d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066f2:	4b10      	ldr	r3, [pc, #64]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fe:	d112      	bne.n	8006726 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e011      	b.n	8006728 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006704:	4b0b      	ldr	r3, [pc, #44]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800670a:	4a0a      	ldr	r2, [pc, #40]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800670c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006714:	e007      	b.n	8006726 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006716:	4b07      	ldr	r3, [pc, #28]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800671e:	4a05      	ldr	r2, [pc, #20]	@ (8006734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006720:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006724:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	40007000 	.word	0x40007000
 8006738:	20000000 	.word	0x20000000
 800673c:	431bde83 	.word	0x431bde83

08006740 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006744:	4b05      	ldr	r3, [pc, #20]	@ (800675c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a04      	ldr	r2, [pc, #16]	@ (800675c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800674a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800674e:	6093      	str	r3, [r2, #8]
}
 8006750:	bf00      	nop
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40007000 	.word	0x40007000

08006760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e2fe      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d075      	beq.n	800686a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800677e:	4b97      	ldr	r3, [pc, #604]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 030c 	and.w	r3, r3, #12
 8006786:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006788:	4b94      	ldr	r3, [pc, #592]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b0c      	cmp	r3, #12
 8006796:	d102      	bne.n	800679e <HAL_RCC_OscConfig+0x3e>
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b03      	cmp	r3, #3
 800679c:	d002      	beq.n	80067a4 <HAL_RCC_OscConfig+0x44>
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d10b      	bne.n	80067bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067a4:	4b8d      	ldr	r3, [pc, #564]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d05b      	beq.n	8006868 <HAL_RCC_OscConfig+0x108>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d157      	bne.n	8006868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e2d9      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067c4:	d106      	bne.n	80067d4 <HAL_RCC_OscConfig+0x74>
 80067c6:	4b85      	ldr	r3, [pc, #532]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a84      	ldr	r2, [pc, #528]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80067cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	e01d      	b.n	8006810 <HAL_RCC_OscConfig+0xb0>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067dc:	d10c      	bne.n	80067f8 <HAL_RCC_OscConfig+0x98>
 80067de:	4b7f      	ldr	r3, [pc, #508]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a7e      	ldr	r2, [pc, #504]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80067e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	4b7c      	ldr	r3, [pc, #496]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a7b      	ldr	r2, [pc, #492]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80067f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	e00b      	b.n	8006810 <HAL_RCC_OscConfig+0xb0>
 80067f8:	4b78      	ldr	r3, [pc, #480]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a77      	ldr	r2, [pc, #476]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80067fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	4b75      	ldr	r3, [pc, #468]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a74      	ldr	r2, [pc, #464]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 800680a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800680e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d013      	beq.n	8006840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fb fbda 	bl	8001fd0 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006820:	f7fb fbd6 	bl	8001fd0 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b64      	cmp	r3, #100	@ 0x64
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e29e      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006832:	4b6a      	ldr	r3, [pc, #424]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f0      	beq.n	8006820 <HAL_RCC_OscConfig+0xc0>
 800683e:	e014      	b.n	800686a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fb fbc6 	bl	8001fd0 <HAL_GetTick>
 8006844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006848:	f7fb fbc2 	bl	8001fd0 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b64      	cmp	r3, #100	@ 0x64
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e28a      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800685a:	4b60      	ldr	r3, [pc, #384]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1f0      	bne.n	8006848 <HAL_RCC_OscConfig+0xe8>
 8006866:	e000      	b.n	800686a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d075      	beq.n	8006962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006876:	4b59      	ldr	r3, [pc, #356]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 030c 	and.w	r3, r3, #12
 800687e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006880:	4b56      	ldr	r3, [pc, #344]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0303 	and.w	r3, r3, #3
 8006888:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b0c      	cmp	r3, #12
 800688e:	d102      	bne.n	8006896 <HAL_RCC_OscConfig+0x136>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b02      	cmp	r3, #2
 8006894:	d002      	beq.n	800689c <HAL_RCC_OscConfig+0x13c>
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d11f      	bne.n	80068dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800689c:	4b4f      	ldr	r3, [pc, #316]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <HAL_RCC_OscConfig+0x154>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e25d      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b4:	4b49      	ldr	r3, [pc, #292]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	061b      	lsls	r3, r3, #24
 80068c2:	4946      	ldr	r1, [pc, #280]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068c8:	4b45      	ldr	r3, [pc, #276]	@ (80069e0 <HAL_RCC_OscConfig+0x280>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fb f9a3 	bl	8001c18 <HAL_InitTick>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d043      	beq.n	8006960 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e249      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d023      	beq.n	800692c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068e4:	4b3d      	ldr	r3, [pc, #244]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a3c      	ldr	r2, [pc, #240]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80068ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f0:	f7fb fb6e 	bl	8001fd0 <HAL_GetTick>
 80068f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068f6:	e008      	b.n	800690a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f8:	f7fb fb6a 	bl	8001fd0 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e232      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800690a:	4b34      	ldr	r3, [pc, #208]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0f0      	beq.n	80068f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006916:	4b31      	ldr	r3, [pc, #196]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	061b      	lsls	r3, r3, #24
 8006924:	492d      	ldr	r1, [pc, #180]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 8006926:	4313      	orrs	r3, r2
 8006928:	604b      	str	r3, [r1, #4]
 800692a:	e01a      	b.n	8006962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800692c:	4b2b      	ldr	r3, [pc, #172]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a2a      	ldr	r2, [pc, #168]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 8006932:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fb fb4a 	bl	8001fd0 <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006940:	f7fb fb46 	bl	8001fd0 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e20e      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006952:	4b22      	ldr	r3, [pc, #136]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f0      	bne.n	8006940 <HAL_RCC_OscConfig+0x1e0>
 800695e:	e000      	b.n	8006962 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006960:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d041      	beq.n	80069f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01c      	beq.n	80069b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006976:	4b19      	ldr	r3, [pc, #100]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 8006978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800697c:	4a17      	ldr	r2, [pc, #92]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 800697e:	f043 0301 	orr.w	r3, r3, #1
 8006982:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006986:	f7fb fb23 	bl	8001fd0 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800698e:	f7fb fb1f 	bl	8001fd0 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e1e7      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069a0:	4b0e      	ldr	r3, [pc, #56]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80069a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0ef      	beq.n	800698e <HAL_RCC_OscConfig+0x22e>
 80069ae:	e020      	b.n	80069f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069b0:	4b0a      	ldr	r3, [pc, #40]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80069b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069b6:	4a09      	ldr	r2, [pc, #36]	@ (80069dc <HAL_RCC_OscConfig+0x27c>)
 80069b8:	f023 0301 	bic.w	r3, r3, #1
 80069bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c0:	f7fb fb06 	bl	8001fd0 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069c6:	e00d      	b.n	80069e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069c8:	f7fb fb02 	bl	8001fd0 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d906      	bls.n	80069e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e1ca      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
 80069da:	bf00      	nop
 80069dc:	40021000 	.word	0x40021000
 80069e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069e4:	4b8c      	ldr	r3, [pc, #560]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 80069e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1ea      	bne.n	80069c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80a6 	beq.w	8006b4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a00:	2300      	movs	r3, #0
 8006a02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a04:	4b84      	ldr	r3, [pc, #528]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_OscConfig+0x2b4>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <HAL_RCC_OscConfig+0x2b6>
 8006a14:	2300      	movs	r3, #0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00d      	beq.n	8006a36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a26:	4b7c      	ldr	r3, [pc, #496]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a32:	2301      	movs	r3, #1
 8006a34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a36:	4b79      	ldr	r3, [pc, #484]	@ (8006c1c <HAL_RCC_OscConfig+0x4bc>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d118      	bne.n	8006a74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a42:	4b76      	ldr	r3, [pc, #472]	@ (8006c1c <HAL_RCC_OscConfig+0x4bc>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a75      	ldr	r2, [pc, #468]	@ (8006c1c <HAL_RCC_OscConfig+0x4bc>)
 8006a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a4e:	f7fb fabf 	bl	8001fd0 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a56:	f7fb fabb 	bl	8001fd0 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e183      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a68:	4b6c      	ldr	r3, [pc, #432]	@ (8006c1c <HAL_RCC_OscConfig+0x4bc>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d108      	bne.n	8006a8e <HAL_RCC_OscConfig+0x32e>
 8006a7c:	4b66      	ldr	r3, [pc, #408]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a82:	4a65      	ldr	r2, [pc, #404]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a8c:	e024      	b.n	8006ad8 <HAL_RCC_OscConfig+0x378>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d110      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x358>
 8006a96:	4b60      	ldr	r3, [pc, #384]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a9c:	4a5e      	ldr	r2, [pc, #376]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006a9e:	f043 0304 	orr.w	r3, r3, #4
 8006aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aac:	4a5a      	ldr	r2, [pc, #360]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006aae:	f043 0301 	orr.w	r3, r3, #1
 8006ab2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ab6:	e00f      	b.n	8006ad8 <HAL_RCC_OscConfig+0x378>
 8006ab8:	4b57      	ldr	r3, [pc, #348]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006abe:	4a56      	ldr	r2, [pc, #344]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ac8:	4b53      	ldr	r3, [pc, #332]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ace:	4a52      	ldr	r2, [pc, #328]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006ad0:	f023 0304 	bic.w	r3, r3, #4
 8006ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d016      	beq.n	8006b0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae0:	f7fb fa76 	bl	8001fd0 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ae6:	e00a      	b.n	8006afe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae8:	f7fb fa72 	bl	8001fd0 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e138      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006afe:	4b46      	ldr	r3, [pc, #280]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0ed      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x388>
 8006b0c:	e015      	b.n	8006b3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0e:	f7fb fa5f 	bl	8001fd0 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b14:	e00a      	b.n	8006b2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b16:	f7fb fa5b 	bl	8001fd0 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e121      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1ed      	bne.n	8006b16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b3a:	7ffb      	ldrb	r3, [r7, #31]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d105      	bne.n	8006b4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b40:	4b35      	ldr	r3, [pc, #212]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b44:	4a34      	ldr	r2, [pc, #208]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b4a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d03c      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01c      	beq.n	8006b9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b60:	4b2d      	ldr	r3, [pc, #180]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b66:	4a2c      	ldr	r2, [pc, #176]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006b68:	f043 0301 	orr.w	r3, r3, #1
 8006b6c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b70:	f7fb fa2e 	bl	8001fd0 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b78:	f7fb fa2a 	bl	8001fd0 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e0f2      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b8a:	4b23      	ldr	r3, [pc, #140]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0ef      	beq.n	8006b78 <HAL_RCC_OscConfig+0x418>
 8006b98:	e01b      	b.n	8006bd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006ba2:	f023 0301 	bic.w	r3, r3, #1
 8006ba6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006baa:	f7fb fa11 	bl	8001fd0 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bb2:	f7fb fa0d 	bl	8001fd0 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e0d5      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bc4:	4b14      	ldr	r3, [pc, #80]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1ef      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80c9 	beq.w	8006d6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f003 030c 	and.w	r3, r3, #12
 8006be4:	2b0c      	cmp	r3, #12
 8006be6:	f000 8083 	beq.w	8006cf0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d15e      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bf2:	4b09      	ldr	r3, [pc, #36]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a08      	ldr	r2, [pc, #32]	@ (8006c18 <HAL_RCC_OscConfig+0x4b8>)
 8006bf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfe:	f7fb f9e7 	bl	8001fd0 <HAL_GetTick>
 8006c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c04:	e00c      	b.n	8006c20 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c06:	f7fb f9e3 	bl	8001fd0 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d905      	bls.n	8006c20 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e0ab      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
 8006c18:	40021000 	.word	0x40021000
 8006c1c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c20:	4b55      	ldr	r3, [pc, #340]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1ec      	bne.n	8006c06 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c2c:	4b52      	ldr	r3, [pc, #328]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	4b52      	ldr	r3, [pc, #328]	@ (8006d7c <HAL_RCC_OscConfig+0x61c>)
 8006c32:	4013      	ands	r3, r2
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6a11      	ldr	r1, [r2, #32]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c3c:	3a01      	subs	r2, #1
 8006c3e:	0112      	lsls	r2, r2, #4
 8006c40:	4311      	orrs	r1, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006c46:	0212      	lsls	r2, r2, #8
 8006c48:	4311      	orrs	r1, r2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c4e:	0852      	lsrs	r2, r2, #1
 8006c50:	3a01      	subs	r2, #1
 8006c52:	0552      	lsls	r2, r2, #21
 8006c54:	4311      	orrs	r1, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c5a:	0852      	lsrs	r2, r2, #1
 8006c5c:	3a01      	subs	r2, #1
 8006c5e:	0652      	lsls	r2, r2, #25
 8006c60:	4311      	orrs	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c66:	06d2      	lsls	r2, r2, #27
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	4943      	ldr	r1, [pc, #268]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c70:	4b41      	ldr	r3, [pc, #260]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a40      	ldr	r2, [pc, #256]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c7a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	4a3d      	ldr	r2, [pc, #244]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c88:	f7fb f9a2 	bl	8001fd0 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c90:	f7fb f99e 	bl	8001fd0 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e066      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ca2:	4b35      	ldr	r3, [pc, #212]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f0      	beq.n	8006c90 <HAL_RCC_OscConfig+0x530>
 8006cae:	e05e      	b.n	8006d6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cb0:	4b31      	ldr	r3, [pc, #196]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a30      	ldr	r2, [pc, #192]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cbc:	f7fb f988 	bl	8001fd0 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc4:	f7fb f984 	bl	8001fd0 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e04c      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cd6:	4b28      	ldr	r3, [pc, #160]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f0      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006ce2:	4b25      	ldr	r3, [pc, #148]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	4924      	ldr	r1, [pc, #144]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006ce8:	4b25      	ldr	r3, [pc, #148]	@ (8006d80 <HAL_RCC_OscConfig+0x620>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	60cb      	str	r3, [r1, #12]
 8006cee:	e03e      	b.n	8006d6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e039      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8006d78 <HAL_RCC_OscConfig+0x618>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f003 0203 	and.w	r2, r3, #3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d12c      	bne.n	8006d6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d123      	bne.n	8006d6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d11b      	bne.n	8006d6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d113      	bne.n	8006d6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d109      	bne.n	8006d6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d60:	085b      	lsrs	r3, r3, #1
 8006d62:	3b01      	subs	r3, #1
 8006d64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d001      	beq.n	8006d6e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3720      	adds	r7, #32
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	019f800c 	.word	0x019f800c
 8006d80:	feeefffc 	.word	0xfeeefffc

08006d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e11e      	b.n	8006fda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d9c:	4b91      	ldr	r3, [pc, #580]	@ (8006fe4 <HAL_RCC_ClockConfig+0x260>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d910      	bls.n	8006dcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006daa:	4b8e      	ldr	r3, [pc, #568]	@ (8006fe4 <HAL_RCC_ClockConfig+0x260>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f023 020f 	bic.w	r2, r3, #15
 8006db2:	498c      	ldr	r1, [pc, #560]	@ (8006fe4 <HAL_RCC_ClockConfig+0x260>)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dba:	4b8a      	ldr	r3, [pc, #552]	@ (8006fe4 <HAL_RCC_ClockConfig+0x260>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e106      	b.n	8006fda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d073      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d129      	bne.n	8006e34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006de0:	4b81      	ldr	r3, [pc, #516]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0f4      	b.n	8006fda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006df0:	f000 f9ba 	bl	8007168 <RCC_GetSysClockFreqFromPLLSource>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	4a7c      	ldr	r2, [pc, #496]	@ (8006fec <HAL_RCC_ClockConfig+0x268>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d93f      	bls.n	8006e7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d033      	beq.n	8006e7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d12f      	bne.n	8006e7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e1e:	4b72      	ldr	r3, [pc, #456]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e26:	4a70      	ldr	r2, [pc, #448]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e2e:	2380      	movs	r3, #128	@ 0x80
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e024      	b.n	8006e7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d107      	bne.n	8006e4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d109      	bne.n	8006e5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0c6      	b.n	8006fda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e4c:	4b66      	ldr	r3, [pc, #408]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0be      	b.n	8006fda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006e5c:	f000 f8ce 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8006e60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	4a61      	ldr	r2, [pc, #388]	@ (8006fec <HAL_RCC_ClockConfig+0x268>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d909      	bls.n	8006e7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e72:	4a5d      	ldr	r2, [pc, #372]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006e7a:	2380      	movs	r3, #128	@ 0x80
 8006e7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e7e:	4b5a      	ldr	r3, [pc, #360]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f023 0203 	bic.w	r2, r3, #3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	4957      	ldr	r1, [pc, #348]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e90:	f7fb f89e 	bl	8001fd0 <HAL_GetTick>
 8006e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e98:	f7fb f89a 	bl	8001fd0 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e095      	b.n	8006fda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eae:	4b4e      	ldr	r3, [pc, #312]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 020c 	and.w	r2, r3, #12
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d1eb      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d023      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ed8:	4b43      	ldr	r3, [pc, #268]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	4a42      	ldr	r2, [pc, #264]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006ede:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ee2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ef8:	4a3b      	ldr	r2, [pc, #236]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006efa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006efe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f00:	4b39      	ldr	r3, [pc, #228]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	4936      	ldr	r1, [pc, #216]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	608b      	str	r3, [r1, #8]
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b80      	cmp	r3, #128	@ 0x80
 8006f18:	d105      	bne.n	8006f26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f1a:	4b33      	ldr	r3, [pc, #204]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	4a32      	ldr	r2, [pc, #200]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006f20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f26:	4b2f      	ldr	r3, [pc, #188]	@ (8006fe4 <HAL_RCC_ClockConfig+0x260>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d21d      	bcs.n	8006f70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f34:	4b2b      	ldr	r3, [pc, #172]	@ (8006fe4 <HAL_RCC_ClockConfig+0x260>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f023 020f 	bic.w	r2, r3, #15
 8006f3c:	4929      	ldr	r1, [pc, #164]	@ (8006fe4 <HAL_RCC_ClockConfig+0x260>)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f44:	f7fb f844 	bl	8001fd0 <HAL_GetTick>
 8006f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4a:	e00a      	b.n	8006f62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f4c:	f7fb f840 	bl	8001fd0 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e03b      	b.n	8006fda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f62:	4b20      	ldr	r3, [pc, #128]	@ (8006fe4 <HAL_RCC_ClockConfig+0x260>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 030f 	and.w	r3, r3, #15
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d1ed      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d008      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	4917      	ldr	r1, [pc, #92]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f9a:	4b13      	ldr	r3, [pc, #76]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	490f      	ldr	r1, [pc, #60]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fae:	f000 f825 	bl	8006ffc <HAL_RCC_GetSysClockFreq>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe8 <HAL_RCC_ClockConfig+0x264>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	091b      	lsrs	r3, r3, #4
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	490c      	ldr	r1, [pc, #48]	@ (8006ff0 <HAL_RCC_ClockConfig+0x26c>)
 8006fc0:	5ccb      	ldrb	r3, [r1, r3]
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fca:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff4 <HAL_RCC_ClockConfig+0x270>)
 8006fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006fce:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff8 <HAL_RCC_ClockConfig+0x274>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fa fe20 	bl	8001c18 <HAL_InitTick>
 8006fd8:	4603      	mov	r3, r0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40022000 	.word	0x40022000
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	04c4b400 	.word	0x04c4b400
 8006ff0:	08011d7c 	.word	0x08011d7c
 8006ff4:	20000000 	.word	0x20000000
 8006ff8:	20000004 	.word	0x20000004

08006ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007002:	4b2c      	ldr	r3, [pc, #176]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 030c 	and.w	r3, r3, #12
 800700a:	2b04      	cmp	r3, #4
 800700c:	d102      	bne.n	8007014 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800700e:	4b2a      	ldr	r3, [pc, #168]	@ (80070b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	e047      	b.n	80070a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007014:	4b27      	ldr	r3, [pc, #156]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f003 030c 	and.w	r3, r3, #12
 800701c:	2b08      	cmp	r3, #8
 800701e:	d102      	bne.n	8007026 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007020:	4b26      	ldr	r3, [pc, #152]	@ (80070bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	e03e      	b.n	80070a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007026:	4b23      	ldr	r3, [pc, #140]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f003 030c 	and.w	r3, r3, #12
 800702e:	2b0c      	cmp	r3, #12
 8007030:	d136      	bne.n	80070a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007032:	4b20      	ldr	r3, [pc, #128]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800703c:	4b1d      	ldr	r3, [pc, #116]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	091b      	lsrs	r3, r3, #4
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	3301      	adds	r3, #1
 8007048:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b03      	cmp	r3, #3
 800704e:	d10c      	bne.n	800706a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007050:	4a1a      	ldr	r2, [pc, #104]	@ (80070bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	4a16      	ldr	r2, [pc, #88]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800705a:	68d2      	ldr	r2, [r2, #12]
 800705c:	0a12      	lsrs	r2, r2, #8
 800705e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	617b      	str	r3, [r7, #20]
      break;
 8007068:	e00c      	b.n	8007084 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800706a:	4a13      	ldr	r2, [pc, #76]	@ (80070b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	4a10      	ldr	r2, [pc, #64]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007074:	68d2      	ldr	r2, [r2, #12]
 8007076:	0a12      	lsrs	r2, r2, #8
 8007078:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800707c:	fb02 f303 	mul.w	r3, r2, r3
 8007080:	617b      	str	r3, [r7, #20]
      break;
 8007082:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007084:	4b0b      	ldr	r3, [pc, #44]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	0e5b      	lsrs	r3, r3, #25
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	3301      	adds	r3, #1
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	fbb2 f3f3 	udiv	r3, r2, r3
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	e001      	b.n	80070a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80070a4:	693b      	ldr	r3, [r7, #16]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40021000 	.word	0x40021000
 80070b8:	00f42400 	.word	0x00f42400
 80070bc:	007a1200 	.word	0x007a1200

080070c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070c4:	4b03      	ldr	r3, [pc, #12]	@ (80070d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070c6:	681b      	ldr	r3, [r3, #0]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20000000 	.word	0x20000000

080070d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070dc:	f7ff fff0 	bl	80070c0 <HAL_RCC_GetHCLKFreq>
 80070e0:	4602      	mov	r2, r0
 80070e2:	4b06      	ldr	r3, [pc, #24]	@ (80070fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	0adb      	lsrs	r3, r3, #11
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	4904      	ldr	r1, [pc, #16]	@ (8007100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070ee:	5ccb      	ldrb	r3, [r1, r3]
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40021000 	.word	0x40021000
 8007100:	08011d8c 	.word	0x08011d8c

08007104 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	220f      	movs	r2, #15
 8007112:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007114:	4b12      	ldr	r3, [pc, #72]	@ (8007160 <HAL_RCC_GetClockConfig+0x5c>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 0203 	and.w	r2, r3, #3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007120:	4b0f      	ldr	r3, [pc, #60]	@ (8007160 <HAL_RCC_GetClockConfig+0x5c>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800712c:	4b0c      	ldr	r3, [pc, #48]	@ (8007160 <HAL_RCC_GetClockConfig+0x5c>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007138:	4b09      	ldr	r3, [pc, #36]	@ (8007160 <HAL_RCC_GetClockConfig+0x5c>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	08db      	lsrs	r3, r3, #3
 800713e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007146:	4b07      	ldr	r3, [pc, #28]	@ (8007164 <HAL_RCC_GetClockConfig+0x60>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 020f 	and.w	r2, r3, #15
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	601a      	str	r2, [r3, #0]
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40021000 	.word	0x40021000
 8007164:	40022000 	.word	0x40022000

08007168 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800716e:	4b1e      	ldr	r3, [pc, #120]	@ (80071e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007178:	4b1b      	ldr	r3, [pc, #108]	@ (80071e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	3301      	adds	r3, #1
 8007184:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b03      	cmp	r3, #3
 800718a:	d10c      	bne.n	80071a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800718c:	4a17      	ldr	r2, [pc, #92]	@ (80071ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	fbb2 f3f3 	udiv	r3, r2, r3
 8007194:	4a14      	ldr	r2, [pc, #80]	@ (80071e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007196:	68d2      	ldr	r2, [r2, #12]
 8007198:	0a12      	lsrs	r2, r2, #8
 800719a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	617b      	str	r3, [r7, #20]
    break;
 80071a4:	e00c      	b.n	80071c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071a6:	4a12      	ldr	r2, [pc, #72]	@ (80071f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ae:	4a0e      	ldr	r2, [pc, #56]	@ (80071e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071b0:	68d2      	ldr	r2, [r2, #12]
 80071b2:	0a12      	lsrs	r2, r2, #8
 80071b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071b8:	fb02 f303 	mul.w	r3, r2, r3
 80071bc:	617b      	str	r3, [r7, #20]
    break;
 80071be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071c0:	4b09      	ldr	r3, [pc, #36]	@ (80071e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	0e5b      	lsrs	r3, r3, #25
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	3301      	adds	r3, #1
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80071da:	687b      	ldr	r3, [r7, #4]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	40021000 	.word	0x40021000
 80071ec:	007a1200 	.word	0x007a1200
 80071f0:	00f42400 	.word	0x00f42400

080071f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071fc:	2300      	movs	r3, #0
 80071fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007200:	2300      	movs	r3, #0
 8007202:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8098 	beq.w	8007342 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007212:	2300      	movs	r3, #0
 8007214:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007216:	4b43      	ldr	r3, [pc, #268]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10d      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007222:	4b40      	ldr	r3, [pc, #256]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007226:	4a3f      	ldr	r2, [pc, #252]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800722c:	6593      	str	r3, [r2, #88]	@ 0x58
 800722e:	4b3d      	ldr	r3, [pc, #244]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007236:	60bb      	str	r3, [r7, #8]
 8007238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800723a:	2301      	movs	r3, #1
 800723c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800723e:	4b3a      	ldr	r3, [pc, #232]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a39      	ldr	r2, [pc, #228]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007248:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800724a:	f7fa fec1 	bl	8001fd0 <HAL_GetTick>
 800724e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007250:	e009      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007252:	f7fa febd 	bl	8001fd0 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d902      	bls.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	74fb      	strb	r3, [r7, #19]
        break;
 8007264:	e005      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007266:	4b30      	ldr	r3, [pc, #192]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0ef      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007272:	7cfb      	ldrb	r3, [r7, #19]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d159      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007278:	4b2a      	ldr	r3, [pc, #168]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800727a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800727e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007282:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01e      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	429a      	cmp	r2, r3
 8007292:	d019      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007294:	4b23      	ldr	r3, [pc, #140]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800729e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072a0:	4b20      	ldr	r3, [pc, #128]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072c0:	4a18      	ldr	r2, [pc, #96]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d016      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d2:	f7fa fe7d 	bl	8001fd0 <HAL_GetTick>
 80072d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072d8:	e00b      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072da:	f7fa fe79 	bl	8001fd0 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d902      	bls.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	74fb      	strb	r3, [r7, #19]
            break;
 80072f0:	e006      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0ec      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007300:	7cfb      	ldrb	r3, [r7, #19]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10b      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007306:	4b07      	ldr	r3, [pc, #28]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007314:	4903      	ldr	r1, [pc, #12]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800731c:	e008      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800731e:	7cfb      	ldrb	r3, [r7, #19]
 8007320:	74bb      	strb	r3, [r7, #18]
 8007322:	e005      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007324:	40021000 	.word	0x40021000
 8007328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732c:	7cfb      	ldrb	r3, [r7, #19]
 800732e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007330:	7c7b      	ldrb	r3, [r7, #17]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d105      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007336:	4ba7      	ldr	r3, [pc, #668]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733a:	4aa6      	ldr	r2, [pc, #664]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800733c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007340:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800734e:	4ba1      	ldr	r3, [pc, #644]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007354:	f023 0203 	bic.w	r2, r3, #3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	499d      	ldr	r1, [pc, #628]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007370:	4b98      	ldr	r3, [pc, #608]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007376:	f023 020c 	bic.w	r2, r3, #12
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	4995      	ldr	r1, [pc, #596]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007380:	4313      	orrs	r3, r2
 8007382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007392:	4b90      	ldr	r3, [pc, #576]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007398:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	498c      	ldr	r1, [pc, #560]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073b4:	4b87      	ldr	r3, [pc, #540]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	4984      	ldr	r1, [pc, #528]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073d6:	4b7f      	ldr	r3, [pc, #508]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	497b      	ldr	r1, [pc, #492]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073f8:	4b76      	ldr	r3, [pc, #472]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	4973      	ldr	r1, [pc, #460]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007408:	4313      	orrs	r3, r2
 800740a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800741a:	4b6e      	ldr	r3, [pc, #440]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007420:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	496a      	ldr	r1, [pc, #424]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800743c:	4b65      	ldr	r3, [pc, #404]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800743e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007442:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	4962      	ldr	r1, [pc, #392]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744c:	4313      	orrs	r3, r2
 800744e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800745e:	4b5d      	ldr	r3, [pc, #372]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007464:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	4959      	ldr	r1, [pc, #356]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007480:	4b54      	ldr	r3, [pc, #336]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007486:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748e:	4951      	ldr	r1, [pc, #324]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007490:	4313      	orrs	r3, r2
 8007492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d015      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074a2:	4b4c      	ldr	r3, [pc, #304]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	4948      	ldr	r1, [pc, #288]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074c0:	d105      	bne.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074c2:	4b44      	ldr	r3, [pc, #272]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	4a43      	ldr	r2, [pc, #268]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074cc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d015      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80074da:	4b3e      	ldr	r3, [pc, #248]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e8:	493a      	ldr	r1, [pc, #232]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074f8:	d105      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074fa:	4b36      	ldr	r3, [pc, #216]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	4a35      	ldr	r2, [pc, #212]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007504:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d015      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007512:	4b30      	ldr	r3, [pc, #192]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007518:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007520:	492c      	ldr	r1, [pc, #176]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007522:	4313      	orrs	r3, r2
 8007524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800752c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007530:	d105      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007532:	4b28      	ldr	r3, [pc, #160]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	4a27      	ldr	r2, [pc, #156]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007538:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800753c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d015      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800754a:	4b22      	ldr	r3, [pc, #136]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800754c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007550:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007558:	491e      	ldr	r1, [pc, #120]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007568:	d105      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800756a:	4b1a      	ldr	r3, [pc, #104]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	4a19      	ldr	r2, [pc, #100]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007570:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007574:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d015      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007582:	4b14      	ldr	r3, [pc, #80]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007588:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007590:	4910      	ldr	r1, [pc, #64]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075a0:	d105      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075a2:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	4a0b      	ldr	r2, [pc, #44]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d018      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80075ba:	4b06      	ldr	r3, [pc, #24]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c8:	4902      	ldr	r1, [pc, #8]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	e001      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80075d4:	40021000 	.word	0x40021000
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075de:	d105      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80075e0:	4b21      	ldr	r3, [pc, #132]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	4a20      	ldr	r2, [pc, #128]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80075e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d015      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80075f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007606:	4918      	ldr	r1, [pc, #96]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007608:	4313      	orrs	r3, r2
 800760a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007616:	d105      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007618:	4b13      	ldr	r3, [pc, #76]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	4a12      	ldr	r2, [pc, #72]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800761e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007622:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d015      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007630:	4b0d      	ldr	r3, [pc, #52]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007632:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007636:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800763e:	490a      	ldr	r1, [pc, #40]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800764a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800764e:	d105      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007650:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4a04      	ldr	r2, [pc, #16]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007656:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800765a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800765c:	7cbb      	ldrb	r3, [r7, #18]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40021000 	.word	0x40021000

0800766c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e049      	b.n	8007712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f841 	bl	800771a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3304      	adds	r3, #4
 80076a8:	4619      	mov	r1, r3
 80076aa:	4610      	mov	r0, r2
 80076ac:	f000 fa28 	bl	8007b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b01      	cmp	r3, #1
 8007742:	d001      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e04f      	b.n	80077e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a23      	ldr	r2, [pc, #140]	@ (80077f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d01d      	beq.n	80077a6 <HAL_TIM_Base_Start_IT+0x76>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007772:	d018      	beq.n	80077a6 <HAL_TIM_Base_Start_IT+0x76>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1f      	ldr	r2, [pc, #124]	@ (80077f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d013      	beq.n	80077a6 <HAL_TIM_Base_Start_IT+0x76>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1e      	ldr	r2, [pc, #120]	@ (80077fc <HAL_TIM_Base_Start_IT+0xcc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00e      	beq.n	80077a6 <HAL_TIM_Base_Start_IT+0x76>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a1c      	ldr	r2, [pc, #112]	@ (8007800 <HAL_TIM_Base_Start_IT+0xd0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d009      	beq.n	80077a6 <HAL_TIM_Base_Start_IT+0x76>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1b      	ldr	r2, [pc, #108]	@ (8007804 <HAL_TIM_Base_Start_IT+0xd4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d004      	beq.n	80077a6 <HAL_TIM_Base_Start_IT+0x76>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a19      	ldr	r2, [pc, #100]	@ (8007808 <HAL_TIM_Base_Start_IT+0xd8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d115      	bne.n	80077d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	4b17      	ldr	r3, [pc, #92]	@ (800780c <HAL_TIM_Base_Start_IT+0xdc>)
 80077ae:	4013      	ands	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b06      	cmp	r3, #6
 80077b6:	d015      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0xb4>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077be:	d011      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d0:	e008      	b.n	80077e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f042 0201 	orr.w	r2, r2, #1
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	e000      	b.n	80077e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	40012c00 	.word	0x40012c00
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40013400 	.word	0x40013400
 8007804:	40014000 	.word	0x40014000
 8007808:	40015000 	.word	0x40015000
 800780c:	00010007 	.word	0x00010007

08007810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d020      	beq.n	8007874 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01b      	beq.n	8007874 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f06f 0202 	mvn.w	r2, #2
 8007844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f931 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 8007860:	e005      	b.n	800786e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f923 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f934 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f003 0304 	and.w	r3, r3, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	d020      	beq.n	80078c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01b      	beq.n	80078c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0204 	mvn.w	r2, #4
 8007890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2202      	movs	r2, #2
 8007896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f90b 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 80078ac:	e005      	b.n	80078ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8fd 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f90e 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d020      	beq.n	800790c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01b      	beq.n	800790c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f06f 0208 	mvn.w	r2, #8
 80078dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2204      	movs	r2, #4
 80078e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f8e5 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 80078f8:	e005      	b.n	8007906 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f8d7 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f8e8 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	2b00      	cmp	r3, #0
 8007914:	d020      	beq.n	8007958 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f003 0310 	and.w	r3, r3, #16
 800791c:	2b00      	cmp	r3, #0
 800791e:	d01b      	beq.n	8007958 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f06f 0210 	mvn.w	r2, #16
 8007928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2208      	movs	r2, #8
 800792e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f8bf 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 8007944:	e005      	b.n	8007952 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f8b1 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f8c2 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00c      	beq.n	800797c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f06f 0201 	mvn.w	r2, #1
 8007974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7fa f802 	bl	8001980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00c      	beq.n	80079aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007996:	2b00      	cmp	r3, #0
 8007998:	d007      	beq.n	80079aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80079a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f95f 	bl	8007c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00c      	beq.n	80079ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80079c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f957 	bl	8007c7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00c      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f87c 	bl	8007aea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f003 0320 	and.w	r3, r3, #32
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00c      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f06f 0220 	mvn.w	r2, #32
 8007a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f91f 	bl	8007c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00c      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f92b 	bl	8007c90 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00c      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f923 	bl	8007ca4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00c      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f91b 	bl	8007cb8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00c      	beq.n	8007aa6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f913 	bl	8007ccc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
	...

08007b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a48      	ldr	r2, [pc, #288]	@ (8007c34 <TIM_Base_SetConfig+0x134>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d013      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b1e:	d00f      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a45      	ldr	r2, [pc, #276]	@ (8007c38 <TIM_Base_SetConfig+0x138>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00b      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a44      	ldr	r2, [pc, #272]	@ (8007c3c <TIM_Base_SetConfig+0x13c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d007      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a43      	ldr	r2, [pc, #268]	@ (8007c40 <TIM_Base_SetConfig+0x140>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a42      	ldr	r2, [pc, #264]	@ (8007c44 <TIM_Base_SetConfig+0x144>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d108      	bne.n	8007b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a37      	ldr	r2, [pc, #220]	@ (8007c34 <TIM_Base_SetConfig+0x134>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d01f      	beq.n	8007b9a <TIM_Base_SetConfig+0x9a>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b60:	d01b      	beq.n	8007b9a <TIM_Base_SetConfig+0x9a>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a34      	ldr	r2, [pc, #208]	@ (8007c38 <TIM_Base_SetConfig+0x138>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d017      	beq.n	8007b9a <TIM_Base_SetConfig+0x9a>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a33      	ldr	r2, [pc, #204]	@ (8007c3c <TIM_Base_SetConfig+0x13c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d013      	beq.n	8007b9a <TIM_Base_SetConfig+0x9a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a32      	ldr	r2, [pc, #200]	@ (8007c40 <TIM_Base_SetConfig+0x140>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00f      	beq.n	8007b9a <TIM_Base_SetConfig+0x9a>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a32      	ldr	r2, [pc, #200]	@ (8007c48 <TIM_Base_SetConfig+0x148>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00b      	beq.n	8007b9a <TIM_Base_SetConfig+0x9a>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a31      	ldr	r2, [pc, #196]	@ (8007c4c <TIM_Base_SetConfig+0x14c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d007      	beq.n	8007b9a <TIM_Base_SetConfig+0x9a>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a30      	ldr	r2, [pc, #192]	@ (8007c50 <TIM_Base_SetConfig+0x150>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <TIM_Base_SetConfig+0x9a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a2b      	ldr	r2, [pc, #172]	@ (8007c44 <TIM_Base_SetConfig+0x144>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d108      	bne.n	8007bac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a18      	ldr	r2, [pc, #96]	@ (8007c34 <TIM_Base_SetConfig+0x134>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d013      	beq.n	8007c00 <TIM_Base_SetConfig+0x100>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a19      	ldr	r2, [pc, #100]	@ (8007c40 <TIM_Base_SetConfig+0x140>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00f      	beq.n	8007c00 <TIM_Base_SetConfig+0x100>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a19      	ldr	r2, [pc, #100]	@ (8007c48 <TIM_Base_SetConfig+0x148>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00b      	beq.n	8007c00 <TIM_Base_SetConfig+0x100>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a18      	ldr	r2, [pc, #96]	@ (8007c4c <TIM_Base_SetConfig+0x14c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d007      	beq.n	8007c00 <TIM_Base_SetConfig+0x100>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a17      	ldr	r2, [pc, #92]	@ (8007c50 <TIM_Base_SetConfig+0x150>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d003      	beq.n	8007c00 <TIM_Base_SetConfig+0x100>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a12      	ldr	r2, [pc, #72]	@ (8007c44 <TIM_Base_SetConfig+0x144>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d103      	bne.n	8007c08 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d105      	bne.n	8007c26 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f023 0201 	bic.w	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	611a      	str	r2, [r3, #16]
  }
}
 8007c26:	bf00      	nop
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	40012c00 	.word	0x40012c00
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800
 8007c40:	40013400 	.word	0x40013400
 8007c44:	40015000 	.word	0x40015000
 8007c48:	40014000 	.word	0x40014000
 8007c4c:	40014400 	.word	0x40014400
 8007c50:	40014800 	.word	0x40014800

08007c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007cf0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007cf4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d16:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007d1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	1d3b      	adds	r3, r7, #4
 8007d4e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b0a7      	sub	sp, #156	@ 0x9c
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	78db      	ldrb	r3, [r3, #3]
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d81f      	bhi.n	8007df2 <USB_ActivateEndpoint+0x72>
 8007db2:	a201      	add	r2, pc, #4	@ (adr r2, 8007db8 <USB_ActivateEndpoint+0x38>)
 8007db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db8:	08007dc9 	.word	0x08007dc9
 8007dbc:	08007de5 	.word	0x08007de5
 8007dc0:	08007dfb 	.word	0x08007dfb
 8007dc4:	08007dd7 	.word	0x08007dd7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007dc8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007dcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007dd0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007dd4:	e012      	b.n	8007dfc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007dd6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007dda:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007dde:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007de2:	e00b      	b.n	8007dfc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007de4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007de8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007dec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007df0:	e004      	b.n	8007dfc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007df8:	e000      	b.n	8007dfc <USB_ActivateEndpoint+0x7c>
      break;
 8007dfa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	441a      	add	r2, r3
 8007e06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007e0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	b21b      	sxth	r3, r3
 8007e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e36:	b21a      	sxth	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b21b      	sxth	r3, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	b21b      	sxth	r3, r3
 8007e42:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	441a      	add	r2, r3
 8007e50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	7b1b      	ldrb	r3, [r3, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f040 8180 	bne.w	8008172 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 8084 	beq.w	8007f84 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	00da      	lsls	r2, r3, #3
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	88db      	ldrh	r3, [r3, #6]
 8007ea4:	085b      	lsrs	r3, r3, #1
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	827b      	strh	r3, [r7, #18]
 8007ebe:	8a7b      	ldrh	r3, [r7, #18]
 8007ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01b      	beq.n	8007f00 <USB_ActivateEndpoint+0x180>
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ede:	823b      	strh	r3, [r7, #16]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	441a      	add	r2, r3
 8007eea:	8a3b      	ldrh	r3, [r7, #16]
 8007eec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ef8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	78db      	ldrb	r3, [r3, #3]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d020      	beq.n	8007f4a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f1e:	81bb      	strh	r3, [r7, #12]
 8007f20:	89bb      	ldrh	r3, [r7, #12]
 8007f22:	f083 0320 	eor.w	r3, r3, #32
 8007f26:	81bb      	strh	r3, [r7, #12]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	441a      	add	r2, r3
 8007f32:	89bb      	ldrh	r3, [r7, #12]
 8007f34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	8013      	strh	r3, [r2, #0]
 8007f48:	e3f9      	b.n	800873e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f60:	81fb      	strh	r3, [r7, #14]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	441a      	add	r2, r3
 8007f6c:	89fb      	ldrh	r3, [r7, #14]
 8007f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	8013      	strh	r3, [r2, #0]
 8007f82:	e3dc      	b.n	800873e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	4413      	add	r3, r2
 8007f96:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	00da      	lsls	r2, r3, #3
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	88db      	ldrh	r3, [r3, #6]
 8007fac:	085b      	lsrs	r3, r3, #1
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	4413      	add	r3, r2
 8007fca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	00da      	lsls	r2, r3, #3
 8007fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fea:	801a      	strh	r2, [r3, #0]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <USB_ActivateEndpoint+0x28a>
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008002:	b29a      	uxth	r2, r3
 8008004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008006:	801a      	strh	r2, [r3, #0]
 8008008:	e041      	b.n	800808e <USB_ActivateEndpoint+0x30e>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008010:	d81c      	bhi.n	800804c <USB_ActivateEndpoint+0x2cc>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	085b      	lsrs	r3, r3, #1
 8008018:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <USB_ActivateEndpoint+0x2b2>
 8008028:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800802c:	3301      	adds	r3, #1
 800802e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29a      	uxth	r2, r3
 8008038:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800803c:	b29b      	uxth	r3, r3
 800803e:	029b      	lsls	r3, r3, #10
 8008040:	b29b      	uxth	r3, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	b29a      	uxth	r2, r3
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	801a      	strh	r2, [r3, #0]
 800804a:	e020      	b.n	800808e <USB_ActivateEndpoint+0x30e>
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	095b      	lsrs	r3, r3, #5
 8008052:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	f003 031f 	and.w	r3, r3, #31
 800805e:	2b00      	cmp	r3, #0
 8008060:	d104      	bne.n	800806c <USB_ActivateEndpoint+0x2ec>
 8008062:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008066:	3b01      	subs	r3, #1
 8008068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800806c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29a      	uxth	r2, r3
 8008072:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008076:	b29b      	uxth	r3, r3
 8008078:	029b      	lsls	r3, r3, #10
 800807a:	b29b      	uxth	r3, r3
 800807c:	4313      	orrs	r3, r2
 800807e:	b29b      	uxth	r3, r3
 8008080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008088:	b29a      	uxth	r2, r3
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800809c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800809e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d01b      	beq.n	80080de <USB_ActivateEndpoint+0x35e>
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080bc:	843b      	strh	r3, [r7, #32]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	441a      	add	r2, r3
 80080c8:	8c3b      	ldrh	r3, [r7, #32]
 80080ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080da:	b29b      	uxth	r3, r3
 80080dc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d124      	bne.n	8008130 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080fc:	83bb      	strh	r3, [r7, #28]
 80080fe:	8bbb      	ldrh	r3, [r7, #28]
 8008100:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008104:	83bb      	strh	r3, [r7, #28]
 8008106:	8bbb      	ldrh	r3, [r7, #28]
 8008108:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800810c:	83bb      	strh	r3, [r7, #28]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	441a      	add	r2, r3
 8008118:	8bbb      	ldrh	r3, [r7, #28]
 800811a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800811e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800812a:	b29b      	uxth	r3, r3
 800812c:	8013      	strh	r3, [r2, #0]
 800812e:	e306      	b.n	800873e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	b29b      	uxth	r3, r3
 800813e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008146:	83fb      	strh	r3, [r7, #30]
 8008148:	8bfb      	ldrh	r3, [r7, #30]
 800814a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800814e:	83fb      	strh	r3, [r7, #30]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	441a      	add	r2, r3
 800815a:	8bfb      	ldrh	r3, [r7, #30]
 800815c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800816c:	b29b      	uxth	r3, r3
 800816e:	8013      	strh	r3, [r2, #0]
 8008170:	e2e5      	b.n	800873e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	78db      	ldrb	r3, [r3, #3]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d11e      	bne.n	80081b8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800818c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008190:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	441a      	add	r2, r3
 800819e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80081a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80081ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	8013      	strh	r3, [r2, #0]
 80081b6:	e01d      	b.n	80081f4 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80081ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ce:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	441a      	add	r2, r3
 80081dc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80081e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081fe:	b29b      	uxth	r3, r3
 8008200:	461a      	mov	r2, r3
 8008202:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008204:	4413      	add	r3, r2
 8008206:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	00da      	lsls	r2, r3, #3
 800820e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008210:	4413      	add	r3, r2
 8008212:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008216:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	891b      	ldrh	r3, [r3, #8]
 800821c:	085b      	lsrs	r3, r3, #1
 800821e:	b29b      	uxth	r3, r3
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008226:	801a      	strh	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	677b      	str	r3, [r7, #116]	@ 0x74
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008232:	b29b      	uxth	r3, r3
 8008234:	461a      	mov	r2, r3
 8008236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008238:	4413      	add	r3, r2
 800823a:	677b      	str	r3, [r7, #116]	@ 0x74
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	00da      	lsls	r2, r3, #3
 8008242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008244:	4413      	add	r3, r2
 8008246:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800824a:	673b      	str	r3, [r7, #112]	@ 0x70
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	895b      	ldrh	r3, [r3, #10]
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	b29b      	uxth	r3, r3
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800825a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	785b      	ldrb	r3, [r3, #1]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f040 81af 	bne.w	80085c4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8008276:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800827a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d01d      	beq.n	80082be <USB_ActivateEndpoint+0x53e>
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008298:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	441a      	add	r2, r3
 80082a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80082aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80082ce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80082d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d01d      	beq.n	8008316 <USB_ActivateEndpoint+0x596>
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	441a      	add	r2, r3
 80082fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800830a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800830e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008312:	b29b      	uxth	r3, r3
 8008314:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d16b      	bne.n	80083f6 <USB_ActivateEndpoint+0x676>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008328:	b29b      	uxth	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800832e:	4413      	add	r3, r2
 8008330:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	00da      	lsls	r2, r3, #3
 8008338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800833a:	4413      	add	r3, r2
 800833c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008340:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800834c:	b29a      	uxth	r2, r3
 800834e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008350:	801a      	strh	r2, [r3, #0]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10a      	bne.n	8008370 <USB_ActivateEndpoint+0x5f0>
 800835a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008368:	b29a      	uxth	r2, r3
 800836a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800836c:	801a      	strh	r2, [r3, #0]
 800836e:	e05d      	b.n	800842c <USB_ActivateEndpoint+0x6ac>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	2b3e      	cmp	r3, #62	@ 0x3e
 8008376:	d81c      	bhi.n	80083b2 <USB_ActivateEndpoint+0x632>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	085b      	lsrs	r3, r3, #1
 800837e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <USB_ActivateEndpoint+0x618>
 800838e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008392:	3301      	adds	r3, #1
 8008394:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29a      	uxth	r2, r3
 800839e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	029b      	lsls	r3, r3, #10
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	4313      	orrs	r3, r2
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	e03c      	b.n	800842c <USB_ActivateEndpoint+0x6ac>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	095b      	lsrs	r3, r3, #5
 80083b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	f003 031f 	and.w	r3, r3, #31
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d104      	bne.n	80083d2 <USB_ActivateEndpoint+0x652>
 80083c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083cc:	3b01      	subs	r3, #1
 80083ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083dc:	b29b      	uxth	r3, r3
 80083de:	029b      	lsls	r3, r3, #10
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	4313      	orrs	r3, r2
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	e01a      	b.n	800842c <USB_ActivateEndpoint+0x6ac>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	785b      	ldrb	r3, [r3, #1]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d116      	bne.n	800842c <USB_ActivateEndpoint+0x6ac>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	657b      	str	r3, [r7, #84]	@ 0x54
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008408:	b29b      	uxth	r3, r3
 800840a:	461a      	mov	r2, r3
 800840c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800840e:	4413      	add	r3, r2
 8008410:	657b      	str	r3, [r7, #84]	@ 0x54
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	00da      	lsls	r2, r3, #3
 8008418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800841a:	4413      	add	r3, r2
 800841c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008420:	653b      	str	r3, [r7, #80]	@ 0x50
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	b29a      	uxth	r2, r3
 8008428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	785b      	ldrb	r3, [r3, #1]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d16b      	bne.n	8008510 <USB_ActivateEndpoint+0x790>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008442:	b29b      	uxth	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008448:	4413      	add	r3, r2
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	00da      	lsls	r2, r3, #3
 8008452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008454:	4413      	add	r3, r2
 8008456:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800845a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008466:	b29a      	uxth	r2, r3
 8008468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846a:	801a      	strh	r2, [r3, #0]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <USB_ActivateEndpoint+0x70a>
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008482:	b29a      	uxth	r2, r3
 8008484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008486:	801a      	strh	r2, [r3, #0]
 8008488:	e05b      	b.n	8008542 <USB_ActivateEndpoint+0x7c2>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008490:	d81c      	bhi.n	80084cc <USB_ActivateEndpoint+0x74c>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	085b      	lsrs	r3, r3, #1
 8008498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <USB_ActivateEndpoint+0x732>
 80084a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084ac:	3301      	adds	r3, #1
 80084ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084bc:	b29b      	uxth	r3, r3
 80084be:	029b      	lsls	r3, r3, #10
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	4313      	orrs	r3, r2
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c8:	801a      	strh	r2, [r3, #0]
 80084ca:	e03a      	b.n	8008542 <USB_ActivateEndpoint+0x7c2>
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	095b      	lsrs	r3, r3, #5
 80084d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f003 031f 	and.w	r3, r3, #31
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d104      	bne.n	80084ec <USB_ActivateEndpoint+0x76c>
 80084e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084e6:	3b01      	subs	r3, #1
 80084e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	029b      	lsls	r3, r3, #10
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	4313      	orrs	r3, r2
 80084fe:	b29b      	uxth	r3, r3
 8008500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008508:	b29a      	uxth	r2, r3
 800850a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850c:	801a      	strh	r2, [r3, #0]
 800850e:	e018      	b.n	8008542 <USB_ActivateEndpoint+0x7c2>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	785b      	ldrb	r3, [r3, #1]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d114      	bne.n	8008542 <USB_ActivateEndpoint+0x7c2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800851e:	b29b      	uxth	r3, r3
 8008520:	461a      	mov	r2, r3
 8008522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008524:	4413      	add	r3, r2
 8008526:	647b      	str	r3, [r7, #68]	@ 0x44
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	00da      	lsls	r2, r3, #3
 800852e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008530:	4413      	add	r3, r2
 8008532:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008536:	643b      	str	r3, [r7, #64]	@ 0x40
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	b29a      	uxth	r2, r3
 800853e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008540:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008558:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800855a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800855c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008560:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008562:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008564:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008568:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	441a      	add	r2, r3
 8008574:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800857a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800857e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008586:	b29b      	uxth	r3, r3
 8008588:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b29b      	uxth	r3, r3
 8008598:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800859c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085a0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	441a      	add	r2, r3
 80085ac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80085ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085be:	b29b      	uxth	r3, r3
 80085c0:	8013      	strh	r3, [r2, #0]
 80085c2:	e0bc      	b.n	800873e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80085d4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80085d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01d      	beq.n	800861c <USB_ActivateEndpoint+0x89c>
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	441a      	add	r2, r3
 8008604:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800860c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008618:	b29b      	uxth	r3, r3
 800861a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800862c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01d      	beq.n	8008674 <USB_ActivateEndpoint+0x8f4>
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	b29b      	uxth	r3, r3
 8008646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800864a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800864e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	441a      	add	r2, r3
 800865c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008664:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800866c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008670:	b29b      	uxth	r3, r3
 8008672:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	78db      	ldrb	r3, [r3, #3]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d024      	beq.n	80086c6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	b29b      	uxth	r3, r3
 800868a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800868e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008692:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008696:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800869a:	f083 0320 	eor.w	r3, r3, #32
 800869e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80086b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	8013      	strh	r3, [r2, #0]
 80086c4:	e01d      	b.n	8008702 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086dc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	441a      	add	r2, r3
 80086ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80086ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086fe:	b29b      	uxth	r3, r3
 8008700:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008718:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	441a      	add	r2, r3
 8008726:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800873e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8008742:	4618      	mov	r0, r3
 8008744:	379c      	adds	r7, #156	@ 0x9c
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop

08008750 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008750:	b480      	push	{r7}
 8008752:	b08d      	sub	sp, #52	@ 0x34
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	7b1b      	ldrb	r3, [r3, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f040 808e 	bne.w	8008880 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d044      	beq.n	80087f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	81bb      	strh	r3, [r7, #12]
 800877a:	89bb      	ldrh	r3, [r7, #12]
 800877c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01b      	beq.n	80087bc <USB_DeactivateEndpoint+0x6c>
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800879a:	817b      	strh	r3, [r7, #10]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	441a      	add	r2, r3
 80087a6:	897b      	ldrh	r3, [r7, #10]
 80087a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087d2:	813b      	strh	r3, [r7, #8]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	441a      	add	r2, r3
 80087de:	893b      	ldrh	r3, [r7, #8]
 80087e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	8013      	strh	r3, [r2, #0]
 80087f4:	e192      	b.n	8008b1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	827b      	strh	r3, [r7, #18]
 8008804:	8a7b      	ldrh	r3, [r7, #18]
 8008806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d01b      	beq.n	8008846 <USB_DeactivateEndpoint+0xf6>
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008824:	823b      	strh	r3, [r7, #16]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	441a      	add	r2, r3
 8008830:	8a3b      	ldrh	r3, [r7, #16]
 8008832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800883a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800883e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008842:	b29b      	uxth	r3, r3
 8008844:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	b29b      	uxth	r3, r3
 8008854:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800885c:	81fb      	strh	r3, [r7, #14]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	441a      	add	r2, r3
 8008868:	89fb      	ldrh	r3, [r7, #14]
 800886a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800886e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800887a:	b29b      	uxth	r3, r3
 800887c:	8013      	strh	r3, [r2, #0]
 800887e:	e14d      	b.n	8008b1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	2b00      	cmp	r3, #0
 8008886:	f040 80a5 	bne.w	80089d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	843b      	strh	r3, [r7, #32]
 8008898:	8c3b      	ldrh	r3, [r7, #32]
 800889a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d01b      	beq.n	80088da <USB_DeactivateEndpoint+0x18a>
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b8:	83fb      	strh	r3, [r7, #30]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	441a      	add	r2, r3
 80088c4:	8bfb      	ldrh	r3, [r7, #30]
 80088c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	83bb      	strh	r3, [r7, #28]
 80088e8:	8bbb      	ldrh	r3, [r7, #28]
 80088ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01b      	beq.n	800892a <USB_DeactivateEndpoint+0x1da>
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008908:	837b      	strh	r3, [r7, #26]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	441a      	add	r2, r3
 8008914:	8b7b      	ldrh	r3, [r7, #26]
 8008916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800891a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800891e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008922:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008926:	b29b      	uxth	r3, r3
 8008928:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800893c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008940:	833b      	strh	r3, [r7, #24]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	441a      	add	r2, r3
 800894c:	8b3b      	ldrh	r3, [r7, #24]
 800894e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800895a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800895e:	b29b      	uxth	r3, r3
 8008960:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008978:	82fb      	strh	r3, [r7, #22]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	441a      	add	r2, r3
 8008984:	8afb      	ldrh	r3, [r7, #22]
 8008986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800898a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800898e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008996:	b29b      	uxth	r3, r3
 8008998:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089b0:	82bb      	strh	r3, [r7, #20]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	441a      	add	r2, r3
 80089bc:	8abb      	ldrh	r3, [r7, #20]
 80089be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	8013      	strh	r3, [r2, #0]
 80089d2:	e0a3      	b.n	8008b1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80089e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80089e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01b      	beq.n	8008a24 <USB_DeactivateEndpoint+0x2d4>
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	441a      	add	r2, r3
 8008a0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008a32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01b      	beq.n	8008a74 <USB_DeactivateEndpoint+0x324>
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a52:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	441a      	add	r2, r3
 8008a5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a8a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	441a      	add	r2, r3
 8008a96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008abe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ac2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	441a      	add	r2, r3
 8008ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008afa:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	441a      	add	r2, r3
 8008b06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3734      	adds	r7, #52	@ 0x34
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b0ac      	sub	sp, #176	@ 0xb0
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	f040 84ca 	bne.w	80094d2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d904      	bls.n	8008b54 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b52:	e003      	b.n	8008b5c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	7b1b      	ldrb	r3, [r3, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d122      	bne.n	8008baa <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	6959      	ldr	r1, [r3, #20]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	88da      	ldrh	r2, [r3, #6]
 8008b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 febd 	bl	80098f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	613b      	str	r3, [r7, #16]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	4413      	add	r3, r2
 8008b8a:	613b      	str	r3, [r7, #16]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	00da      	lsls	r2, r3, #3
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	4413      	add	r3, r2
 8008b96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	801a      	strh	r2, [r3, #0]
 8008ba6:	f000 bc6f 	b.w	8009488 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	78db      	ldrb	r3, [r3, #3]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	f040 831e 	bne.w	80091f0 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	6a1a      	ldr	r2, [r3, #32]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	f240 82cf 	bls.w	8009160 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bd8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	441a      	add	r2, r3
 8008be6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008bea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bf2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6a1a      	ldr	r2, [r3, #32]
 8008c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c06:	1ad2      	subs	r2, r2, r3
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 814f 	beq.w	8008ec2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d16b      	bne.n	8008d08 <USB_EPStartXfer+0x1de>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c40:	4413      	add	r3, r2
 8008c42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	00da      	lsls	r2, r3, #3
 8008c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c62:	801a      	strh	r2, [r3, #0]
 8008c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <USB_EPStartXfer+0x158>
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	801a      	strh	r2, [r3, #0]
 8008c80:	e05b      	b.n	8008d3a <USB_EPStartXfer+0x210>
 8008c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c86:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c88:	d81c      	bhi.n	8008cc4 <USB_EPStartXfer+0x19a>
 8008c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d004      	beq.n	8008caa <USB_EPStartXfer+0x180>
 8008ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	029b      	lsls	r3, r3, #10
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	801a      	strh	r2, [r3, #0]
 8008cc2:	e03a      	b.n	8008d3a <USB_EPStartXfer+0x210>
 8008cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cd2:	f003 031f 	and.w	r3, r3, #31
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d104      	bne.n	8008ce4 <USB_EPStartXfer+0x1ba>
 8008cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	029b      	lsls	r3, r3, #10
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	e018      	b.n	8008d3a <USB_EPStartXfer+0x210>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	785b      	ldrb	r3, [r3, #1]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d114      	bne.n	8008d3a <USB_EPStartXfer+0x210>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1c:	4413      	add	r3, r2
 8008d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	00da      	lsls	r2, r3, #3
 8008d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d28:	4413      	add	r3, r2
 8008d2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	895b      	ldrh	r3, [r3, #10]
 8008d3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	6959      	ldr	r1, [r3, #20]
 8008d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fdce 	bl	80098f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	695a      	ldr	r2, [r3, #20]
 8008d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d5e:	441a      	add	r2, r3
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	6a1a      	ldr	r2, [r3, #32]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d907      	bls.n	8008d80 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	6a1a      	ldr	r2, [r3, #32]
 8008d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d78:	1ad2      	subs	r2, r2, r3
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	621a      	str	r2, [r3, #32]
 8008d7e:	e006      	b.n	8008d8e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	785b      	ldrb	r3, [r3, #1]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d16b      	bne.n	8008e6e <USB_EPStartXfer+0x344>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	61bb      	str	r3, [r7, #24]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	461a      	mov	r2, r3
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	4413      	add	r3, r2
 8008da8:	61bb      	str	r3, [r7, #24]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	00da      	lsls	r2, r3, #3
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	4413      	add	r3, r2
 8008db4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <USB_EPStartXfer+0x2be>
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	801a      	strh	r2, [r3, #0]
 8008de6:	e05d      	b.n	8008ea4 <USB_EPStartXfer+0x37a>
 8008de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dec:	2b3e      	cmp	r3, #62	@ 0x3e
 8008dee:	d81c      	bhi.n	8008e2a <USB_EPStartXfer+0x300>
 8008df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008df4:	085b      	lsrs	r3, r3, #1
 8008df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d004      	beq.n	8008e10 <USB_EPStartXfer+0x2e6>
 8008e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	029b      	lsls	r3, r3, #10
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	4313      	orrs	r3, r2
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e03c      	b.n	8008ea4 <USB_EPStartXfer+0x37a>
 8008e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e38:	f003 031f 	and.w	r3, r3, #31
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <USB_EPStartXfer+0x320>
 8008e40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e44:	3b01      	subs	r3, #1
 8008e46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	029b      	lsls	r3, r3, #10
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	801a      	strh	r2, [r3, #0]
 8008e6c:	e01a      	b.n	8008ea4 <USB_EPStartXfer+0x37a>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d116      	bne.n	8008ea4 <USB_EPStartXfer+0x37a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	623b      	str	r3, [r7, #32]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	461a      	mov	r2, r3
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	4413      	add	r3, r2
 8008e88:	623b      	str	r3, [r7, #32]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	00da      	lsls	r2, r3, #3
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	4413      	add	r3, r2
 8008e94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e98:	61fb      	str	r3, [r7, #28]
 8008e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	891b      	ldrh	r3, [r3, #8]
 8008ea8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	6959      	ldr	r1, [r3, #20]
 8008eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fd19 	bl	80098f2 <USB_WritePMA>
 8008ec0:	e2e2      	b.n	8009488 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d16b      	bne.n	8008fa2 <USB_EPStartXfer+0x478>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eda:	4413      	add	r3, r2
 8008edc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	00da      	lsls	r2, r3, #3
 8008ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008efc:	801a      	strh	r2, [r3, #0]
 8008efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10a      	bne.n	8008f1c <USB_EPStartXfer+0x3f2>
 8008f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f18:	801a      	strh	r2, [r3, #0]
 8008f1a:	e05d      	b.n	8008fd8 <USB_EPStartXfer+0x4ae>
 8008f1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f20:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f22:	d81c      	bhi.n	8008f5e <USB_EPStartXfer+0x434>
 8008f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f28:	085b      	lsrs	r3, r3, #1
 8008f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d004      	beq.n	8008f44 <USB_EPStartXfer+0x41a>
 8008f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f3e:	3301      	adds	r3, #1
 8008f40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	029b      	lsls	r3, r3, #10
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	4313      	orrs	r3, r2
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f5a:	801a      	strh	r2, [r3, #0]
 8008f5c:	e03c      	b.n	8008fd8 <USB_EPStartXfer+0x4ae>
 8008f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f6c:	f003 031f 	and.w	r3, r3, #31
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d104      	bne.n	8008f7e <USB_EPStartXfer+0x454>
 8008f74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	029b      	lsls	r3, r3, #10
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f9e:	801a      	strh	r2, [r3, #0]
 8008fa0:	e01a      	b.n	8008fd8 <USB_EPStartXfer+0x4ae>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d116      	bne.n	8008fd8 <USB_EPStartXfer+0x4ae>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fba:	4413      	add	r3, r2
 8008fbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	00da      	lsls	r2, r3, #3
 8008fc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fd6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	891b      	ldrh	r3, [r3, #8]
 8008fdc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	6959      	ldr	r1, [r3, #20]
 8008fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fc7f 	bl	80098f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	695a      	ldr	r2, [r3, #20]
 8008ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ffc:	441a      	add	r2, r3
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	6a1a      	ldr	r2, [r3, #32]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	429a      	cmp	r2, r3
 800900c:	d907      	bls.n	800901e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	6a1a      	ldr	r2, [r3, #32]
 8009012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009016:	1ad2      	subs	r2, r2, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	621a      	str	r2, [r3, #32]
 800901c:	e006      	b.n	800902c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2200      	movs	r2, #0
 800902a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	785b      	ldrb	r3, [r3, #1]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d16b      	bne.n	8009110 <USB_EPStartXfer+0x5e6>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009042:	b29b      	uxth	r3, r3
 8009044:	461a      	mov	r2, r3
 8009046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009048:	4413      	add	r3, r2
 800904a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	00da      	lsls	r2, r3, #3
 8009052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009054:	4413      	add	r3, r2
 8009056:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800905a:	637b      	str	r3, [r7, #52]	@ 0x34
 800905c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	b29b      	uxth	r3, r3
 8009062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009066:	b29a      	uxth	r2, r3
 8009068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800906a:	801a      	strh	r2, [r3, #0]
 800906c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <USB_EPStartXfer+0x560>
 8009074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009082:	b29a      	uxth	r2, r3
 8009084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009086:	801a      	strh	r2, [r3, #0]
 8009088:	e05b      	b.n	8009142 <USB_EPStartXfer+0x618>
 800908a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800908e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009090:	d81c      	bhi.n	80090cc <USB_EPStartXfer+0x5a2>
 8009092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009096:	085b      	lsrs	r3, r3, #1
 8009098:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800909c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d004      	beq.n	80090b2 <USB_EPStartXfer+0x588>
 80090a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090ac:	3301      	adds	r3, #1
 80090ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090bc:	b29b      	uxth	r3, r3
 80090be:	029b      	lsls	r3, r3, #10
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	4313      	orrs	r3, r2
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c8:	801a      	strh	r2, [r3, #0]
 80090ca:	e03a      	b.n	8009142 <USB_EPStartXfer+0x618>
 80090cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090d0:	095b      	lsrs	r3, r3, #5
 80090d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090da:	f003 031f 	and.w	r3, r3, #31
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d104      	bne.n	80090ec <USB_EPStartXfer+0x5c2>
 80090e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090e6:	3b01      	subs	r3, #1
 80090e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	029b      	lsls	r3, r3, #10
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	4313      	orrs	r3, r2
 80090fe:	b29b      	uxth	r3, r3
 8009100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009108:	b29a      	uxth	r2, r3
 800910a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800910c:	801a      	strh	r2, [r3, #0]
 800910e:	e018      	b.n	8009142 <USB_EPStartXfer+0x618>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	785b      	ldrb	r3, [r3, #1]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d114      	bne.n	8009142 <USB_EPStartXfer+0x618>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800911e:	b29b      	uxth	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009124:	4413      	add	r3, r2
 8009126:	643b      	str	r3, [r7, #64]	@ 0x40
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	00da      	lsls	r2, r3, #3
 800912e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009130:	4413      	add	r3, r2
 8009132:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800913c:	b29a      	uxth	r2, r3
 800913e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009140:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	895b      	ldrh	r3, [r3, #10]
 8009146:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	6959      	ldr	r1, [r3, #20]
 800914e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009152:	b29b      	uxth	r3, r3
 8009154:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fbca 	bl	80098f2 <USB_WritePMA>
 800915e:	e193      	b.n	8009488 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	b29b      	uxth	r3, r3
 8009176:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800917a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800917e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	441a      	add	r2, r3
 800918c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800919c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	461a      	mov	r2, r3
 80091b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091b4:	4413      	add	r3, r2
 80091b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	00da      	lsls	r2, r3, #3
 80091be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091c0:	4413      	add	r3, r2
 80091c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80091c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80091d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	891b      	ldrh	r3, [r3, #8]
 80091d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6959      	ldr	r1, [r3, #20]
 80091de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fb82 	bl	80098f2 <USB_WritePMA>
 80091ee:	e14b      	b.n	8009488 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	6a1a      	ldr	r2, [r3, #32]
 80091f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091f8:	1ad2      	subs	r2, r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 809a 	beq.w	800934a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	673b      	str	r3, [r7, #112]	@ 0x70
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	785b      	ldrb	r3, [r3, #1]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d16b      	bne.n	80092fa <USB_EPStartXfer+0x7d0>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800922c:	b29b      	uxth	r3, r3
 800922e:	461a      	mov	r2, r3
 8009230:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009232:	4413      	add	r3, r2
 8009234:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	00da      	lsls	r2, r3, #3
 800923c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800923e:	4413      	add	r3, r2
 8009240:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009244:	667b      	str	r3, [r7, #100]	@ 0x64
 8009246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	b29b      	uxth	r3, r3
 800924c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009250:	b29a      	uxth	r2, r3
 8009252:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009254:	801a      	strh	r2, [r3, #0]
 8009256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <USB_EPStartXfer+0x74a>
 800925e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	b29b      	uxth	r3, r3
 8009264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800926c:	b29a      	uxth	r2, r3
 800926e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	e05b      	b.n	800932c <USB_EPStartXfer+0x802>
 8009274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009278:	2b3e      	cmp	r3, #62	@ 0x3e
 800927a:	d81c      	bhi.n	80092b6 <USB_EPStartXfer+0x78c>
 800927c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009280:	085b      	lsrs	r3, r3, #1
 8009282:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d004      	beq.n	800929c <USB_EPStartXfer+0x772>
 8009292:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009296:	3301      	adds	r3, #1
 8009298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800929c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	029b      	lsls	r3, r3, #10
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	4313      	orrs	r3, r2
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092b2:	801a      	strh	r2, [r3, #0]
 80092b4:	e03a      	b.n	800932c <USB_EPStartXfer+0x802>
 80092b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ba:	095b      	lsrs	r3, r3, #5
 80092bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092c4:	f003 031f 	and.w	r3, r3, #31
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d104      	bne.n	80092d6 <USB_EPStartXfer+0x7ac>
 80092cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092d0:	3b01      	subs	r3, #1
 80092d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	029b      	lsls	r3, r3, #10
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4313      	orrs	r3, r2
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092f6:	801a      	strh	r2, [r3, #0]
 80092f8:	e018      	b.n	800932c <USB_EPStartXfer+0x802>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	785b      	ldrb	r3, [r3, #1]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d114      	bne.n	800932c <USB_EPStartXfer+0x802>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009308:	b29b      	uxth	r3, r3
 800930a:	461a      	mov	r2, r3
 800930c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800930e:	4413      	add	r3, r2
 8009310:	673b      	str	r3, [r7, #112]	@ 0x70
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	00da      	lsls	r2, r3, #3
 8009318:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800931a:	4413      	add	r3, r2
 800931c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009320:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009326:	b29a      	uxth	r2, r3
 8009328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800932a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	895b      	ldrh	r3, [r3, #10]
 8009330:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	6959      	ldr	r1, [r3, #20]
 8009338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800933c:	b29b      	uxth	r3, r3
 800933e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fad5 	bl	80098f2 <USB_WritePMA>
 8009348:	e09e      	b.n	8009488 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	785b      	ldrb	r3, [r3, #1]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d16b      	bne.n	800942a <USB_EPStartXfer+0x900>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800935c:	b29b      	uxth	r3, r3
 800935e:	461a      	mov	r2, r3
 8009360:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009362:	4413      	add	r3, r2
 8009364:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	00da      	lsls	r2, r3, #3
 800936c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800936e:	4413      	add	r3, r2
 8009370:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009374:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29b      	uxth	r3, r3
 800937c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009380:	b29a      	uxth	r2, r3
 8009382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009384:	801a      	strh	r2, [r3, #0]
 8009386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <USB_EPStartXfer+0x87a>
 800938e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29b      	uxth	r3, r3
 8009394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800939c:	b29a      	uxth	r2, r3
 800939e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093a0:	801a      	strh	r2, [r3, #0]
 80093a2:	e063      	b.n	800946c <USB_EPStartXfer+0x942>
 80093a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80093aa:	d81c      	bhi.n	80093e6 <USB_EPStartXfer+0x8bc>
 80093ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093b0:	085b      	lsrs	r3, r3, #1
 80093b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d004      	beq.n	80093cc <USB_EPStartXfer+0x8a2>
 80093c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80093c6:	3301      	adds	r3, #1
 80093c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	029b      	lsls	r3, r3, #10
 80093da:	b29b      	uxth	r3, r3
 80093dc:	4313      	orrs	r3, r2
 80093de:	b29a      	uxth	r2, r3
 80093e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093e2:	801a      	strh	r2, [r3, #0]
 80093e4:	e042      	b.n	800946c <USB_EPStartXfer+0x942>
 80093e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093ea:	095b      	lsrs	r3, r3, #5
 80093ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093f4:	f003 031f 	and.w	r3, r3, #31
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d104      	bne.n	8009406 <USB_EPStartXfer+0x8dc>
 80093fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009400:	3b01      	subs	r3, #1
 8009402:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009406:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	b29a      	uxth	r2, r3
 800940c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009410:	b29b      	uxth	r3, r3
 8009412:	029b      	lsls	r3, r3, #10
 8009414:	b29b      	uxth	r3, r3
 8009416:	4313      	orrs	r3, r2
 8009418:	b29b      	uxth	r3, r3
 800941a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800941e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009422:	b29a      	uxth	r2, r3
 8009424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009426:	801a      	strh	r2, [r3, #0]
 8009428:	e020      	b.n	800946c <USB_EPStartXfer+0x942>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	785b      	ldrb	r3, [r3, #1]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d11c      	bne.n	800946c <USB_EPStartXfer+0x942>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800943e:	b29b      	uxth	r3, r3
 8009440:	461a      	mov	r2, r3
 8009442:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009446:	4413      	add	r3, r2
 8009448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	00da      	lsls	r2, r3, #3
 8009452:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009456:	4413      	add	r3, r2
 8009458:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800945c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009464:	b29a      	uxth	r2, r3
 8009466:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800946a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	891b      	ldrh	r3, [r3, #8]
 8009470:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	6959      	ldr	r1, [r3, #20]
 8009478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800947c:	b29b      	uxth	r3, r3
 800947e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa35 	bl	80098f2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	b29b      	uxth	r3, r3
 8009496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800949a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800949e:	817b      	strh	r3, [r7, #10]
 80094a0:	897b      	ldrh	r3, [r7, #10]
 80094a2:	f083 0310 	eor.w	r3, r3, #16
 80094a6:	817b      	strh	r3, [r7, #10]
 80094a8:	897b      	ldrh	r3, [r7, #10]
 80094aa:	f083 0320 	eor.w	r3, r3, #32
 80094ae:	817b      	strh	r3, [r7, #10]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	441a      	add	r2, r3
 80094ba:	897b      	ldrh	r3, [r7, #10]
 80094bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	8013      	strh	r3, [r2, #0]
 80094d0:	e0d5      	b.n	800967e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	7b1b      	ldrb	r3, [r3, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d156      	bne.n	8009588 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d122      	bne.n	8009528 <USB_EPStartXfer+0x9fe>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	78db      	ldrb	r3, [r3, #3]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d11e      	bne.n	8009528 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009500:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	441a      	add	r2, r3
 800950e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800951a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800951e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009522:	b29b      	uxth	r3, r3
 8009524:	8013      	strh	r3, [r2, #0]
 8009526:	e01d      	b.n	8009564 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	b29b      	uxth	r3, r3
 8009536:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800953a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800953e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	441a      	add	r2, r3
 800954c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800955c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009560:	b29b      	uxth	r3, r3
 8009562:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	699a      	ldr	r2, [r3, #24]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	429a      	cmp	r2, r3
 800956e:	d907      	bls.n	8009580 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	699a      	ldr	r2, [r3, #24]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	1ad2      	subs	r2, r2, r3
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	619a      	str	r2, [r3, #24]
 800957e:	e054      	b.n	800962a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2200      	movs	r2, #0
 8009584:	619a      	str	r2, [r3, #24]
 8009586:	e050      	b.n	800962a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	78db      	ldrb	r3, [r3, #3]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d142      	bne.n	8009616 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d048      	beq.n	800962a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80095a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80095ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <USB_EPStartXfer+0xa96>
 80095b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80095b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10b      	bne.n	80095d8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80095c0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80095c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d12e      	bne.n	800962a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80095cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80095d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d128      	bne.n	800962a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ee:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	441a      	add	r2, r3
 80095fc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800960c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009610:	b29b      	uxth	r3, r3
 8009612:	8013      	strh	r3, [r2, #0]
 8009614:	e009      	b.n	800962a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	78db      	ldrb	r3, [r3, #3]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d103      	bne.n	8009626 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2200      	movs	r2, #0
 8009622:	619a      	str	r2, [r3, #24]
 8009624:	e001      	b.n	800962a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e02a      	b.n	8009680 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	b29b      	uxth	r3, r3
 8009638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800963c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009640:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009644:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009648:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800964c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009650:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009654:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009658:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	441a      	add	r2, r3
 8009666:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800966a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800966e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800967a:	b29b      	uxth	r3, r3
 800967c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	37b0      	adds	r7, #176	@ 0xb0
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	785b      	ldrb	r3, [r3, #1]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d020      	beq.n	80096dc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096b0:	81bb      	strh	r3, [r7, #12]
 80096b2:	89bb      	ldrh	r3, [r7, #12]
 80096b4:	f083 0310 	eor.w	r3, r3, #16
 80096b8:	81bb      	strh	r3, [r7, #12]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	441a      	add	r2, r3
 80096c4:	89bb      	ldrh	r3, [r7, #12]
 80096c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	8013      	strh	r3, [r2, #0]
 80096da:	e01f      	b.n	800971c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096f2:	81fb      	strh	r3, [r7, #14]
 80096f4:	89fb      	ldrh	r3, [r7, #14]
 80096f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80096fa:	81fb      	strh	r3, [r7, #14]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	441a      	add	r2, r3
 8009706:	89fb      	ldrh	r3, [r7, #14]
 8009708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800970c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009718:	b29b      	uxth	r3, r3
 800971a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800972a:	b480      	push	{r7}
 800972c:	b087      	sub	sp, #28
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	785b      	ldrb	r3, [r3, #1]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d04c      	beq.n	80097d6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	823b      	strh	r3, [r7, #16]
 800974a:	8a3b      	ldrh	r3, [r7, #16]
 800974c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01b      	beq.n	800978c <USB_EPClearStall+0x62>
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	881b      	ldrh	r3, [r3, #0]
 8009760:	b29b      	uxth	r3, r3
 8009762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800976a:	81fb      	strh	r3, [r7, #14]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	441a      	add	r2, r3
 8009776:	89fb      	ldrh	r3, [r7, #14]
 8009778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800977c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009784:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009788:	b29b      	uxth	r3, r3
 800978a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	78db      	ldrb	r3, [r3, #3]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d06c      	beq.n	800986e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097aa:	81bb      	strh	r3, [r7, #12]
 80097ac:	89bb      	ldrh	r3, [r7, #12]
 80097ae:	f083 0320 	eor.w	r3, r3, #32
 80097b2:	81bb      	strh	r3, [r7, #12]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	441a      	add	r2, r3
 80097be:	89bb      	ldrh	r3, [r7, #12]
 80097c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	8013      	strh	r3, [r2, #0]
 80097d4:	e04b      	b.n	800986e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	82fb      	strh	r3, [r7, #22]
 80097e4:	8afb      	ldrh	r3, [r7, #22]
 80097e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01b      	beq.n	8009826 <USB_EPClearStall+0xfc>
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009804:	82bb      	strh	r3, [r7, #20]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	441a      	add	r2, r3
 8009810:	8abb      	ldrh	r3, [r7, #20]
 8009812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800981a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800981e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009822:	b29b      	uxth	r3, r3
 8009824:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	b29b      	uxth	r3, r3
 8009834:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800983c:	827b      	strh	r3, [r7, #18]
 800983e:	8a7b      	ldrh	r3, [r7, #18]
 8009840:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009844:	827b      	strh	r3, [r7, #18]
 8009846:	8a7b      	ldrh	r3, [r7, #18]
 8009848:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800984c:	827b      	strh	r3, [r7, #18]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	441a      	add	r2, r3
 8009858:	8a7b      	ldrh	r3, [r7, #18]
 800985a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800985e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800986a:	b29b      	uxth	r3, r3
 800986c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	371c      	adds	r7, #28
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d103      	bne.n	8009896 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2280      	movs	r2, #128	@ 0x80
 8009892:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098bc:	b29a      	uxth	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b085      	sub	sp, #20
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80098e4:	68fb      	ldr	r3, [r7, #12]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b08b      	sub	sp, #44	@ 0x2c
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	4611      	mov	r1, r2
 80098fe:	461a      	mov	r2, r3
 8009900:	460b      	mov	r3, r1
 8009902:	80fb      	strh	r3, [r7, #6]
 8009904:	4613      	mov	r3, r2
 8009906:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009908:	88bb      	ldrh	r3, [r7, #4]
 800990a:	3301      	adds	r3, #1
 800990c:	085b      	lsrs	r3, r3, #1
 800990e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009918:	88fa      	ldrh	r2, [r7, #6]
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009922:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	627b      	str	r3, [r7, #36]	@ 0x24
 8009928:	e01b      	b.n	8009962 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	3301      	adds	r3, #1
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	021b      	lsls	r3, r3, #8
 8009938:	b21a      	sxth	r2, r3
 800993a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800993e:	4313      	orrs	r3, r2
 8009940:	b21b      	sxth	r3, r3
 8009942:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	8a7a      	ldrh	r2, [r7, #18]
 8009948:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	3302      	adds	r3, #2
 800994e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	3301      	adds	r3, #1
 8009954:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	3301      	adds	r3, #1
 800995a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800995c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995e:	3b01      	subs	r3, #1
 8009960:	627b      	str	r3, [r7, #36]	@ 0x24
 8009962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e0      	bne.n	800992a <USB_WritePMA+0x38>
  }
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	372c      	adds	r7, #44	@ 0x2c
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009976:	b480      	push	{r7}
 8009978:	b08b      	sub	sp, #44	@ 0x2c
 800997a:	af00      	add	r7, sp, #0
 800997c:	60f8      	str	r0, [r7, #12]
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	4611      	mov	r1, r2
 8009982:	461a      	mov	r2, r3
 8009984:	460b      	mov	r3, r1
 8009986:	80fb      	strh	r3, [r7, #6]
 8009988:	4613      	mov	r3, r2
 800998a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800998c:	88bb      	ldrh	r3, [r7, #4]
 800998e:	085b      	lsrs	r3, r3, #1
 8009990:	b29b      	uxth	r3, r3
 8009992:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800999c:	88fa      	ldrh	r2, [r7, #6]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80099ac:	e018      	b.n	80099e0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	3302      	adds	r3, #2
 80099ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	3301      	adds	r3, #1
 80099c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	0a1b      	lsrs	r3, r3, #8
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	3301      	adds	r3, #1
 80099d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80099da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099dc:	3b01      	subs	r3, #1
 80099de:	627b      	str	r3, [r7, #36]	@ 0x24
 80099e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e3      	bne.n	80099ae <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80099e6:	88bb      	ldrh	r3, [r7, #4]
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d007      	beq.n	8009a02 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	881b      	ldrh	r3, [r3, #0]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	701a      	strb	r2, [r3, #0]
  }
}
 8009a02:	bf00      	nop
 8009a04:	372c      	adds	r7, #44	@ 0x2c
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	460b      	mov	r3, r1
 8009a18:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a1a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009a1e:	f005 f8db 	bl	800ebd8 <USBD_static_malloc>
 8009a22:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d105      	bne.n	8009a36 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009a32:	2302      	movs	r3, #2
 8009a34:	e066      	b.n	8009b04 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	7c1b      	ldrb	r3, [r3, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d119      	bne.n	8009a7a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	2181      	movs	r1, #129	@ 0x81
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f004 ff69 	bl	800e926 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a5e:	2202      	movs	r2, #2
 8009a60:	2101      	movs	r1, #1
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f004 ff5f 	bl	800e926 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2210      	movs	r2, #16
 8009a74:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009a78:	e016      	b.n	8009aa8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a7a:	2340      	movs	r3, #64	@ 0x40
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	2181      	movs	r1, #129	@ 0x81
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f004 ff50 	bl	800e926 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a8c:	2340      	movs	r3, #64	@ 0x40
 8009a8e:	2202      	movs	r2, #2
 8009a90:	2101      	movs	r1, #1
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f004 ff47 	bl	800e926 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2210      	movs	r2, #16
 8009aa4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	2203      	movs	r2, #3
 8009aac:	2182      	movs	r1, #130	@ 0x82
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f004 ff39 	bl	800e926 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	7c1b      	ldrb	r3, [r3, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d109      	bne.n	8009af2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ae4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ae8:	2101      	movs	r1, #1
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f005 f80a 	bl	800eb04 <USBD_LL_PrepareReceive>
 8009af0:	e007      	b.n	8009b02 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009af8:	2340      	movs	r3, #64	@ 0x40
 8009afa:	2101      	movs	r1, #1
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f005 f801 	bl	800eb04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009b18:	2181      	movs	r1, #129	@ 0x81
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f004 ff29 	bl	800e972 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009b26:	2101      	movs	r1, #1
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f004 ff22 	bl	800e972 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009b36:	2182      	movs	r1, #130	@ 0x82
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f004 ff1a 	bl	800e972 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00e      	beq.n	8009b76 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f005 f843 	bl	800ebf4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b96:	2300      	movs	r3, #0
 8009b98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e0af      	b.n	8009d08 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d03f      	beq.n	8009c34 <USBD_CDC_Setup+0xb4>
 8009bb4:	2b20      	cmp	r3, #32
 8009bb6:	f040 809f 	bne.w	8009cf8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	88db      	ldrh	r3, [r3, #6]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d02e      	beq.n	8009c20 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	b25b      	sxtb	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	da16      	bge.n	8009bfa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009bd8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	88d2      	ldrh	r2, [r2, #6]
 8009bde:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	88db      	ldrh	r3, [r3, #6]
 8009be4:	2b07      	cmp	r3, #7
 8009be6:	bf28      	it	cs
 8009be8:	2307      	movcs	r3, #7
 8009bea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	89fa      	ldrh	r2, [r7, #14]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f001 facd 	bl	800b192 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009bf8:	e085      	b.n	8009d06 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	785a      	ldrb	r2, [r3, #1]
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	88db      	ldrh	r3, [r3, #6]
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009c10:	6939      	ldr	r1, [r7, #16]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	88db      	ldrh	r3, [r3, #6]
 8009c16:	461a      	mov	r2, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 fae6 	bl	800b1ea <USBD_CtlPrepareRx>
      break;
 8009c1e:	e072      	b.n	8009d06 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	7850      	ldrb	r0, [r2, #1]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	4798      	blx	r3
      break;
 8009c32:	e068      	b.n	8009d06 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	785b      	ldrb	r3, [r3, #1]
 8009c38:	2b0b      	cmp	r3, #11
 8009c3a:	d852      	bhi.n	8009ce2 <USBD_CDC_Setup+0x162>
 8009c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c44 <USBD_CDC_Setup+0xc4>)
 8009c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c42:	bf00      	nop
 8009c44:	08009c75 	.word	0x08009c75
 8009c48:	08009cf1 	.word	0x08009cf1
 8009c4c:	08009ce3 	.word	0x08009ce3
 8009c50:	08009ce3 	.word	0x08009ce3
 8009c54:	08009ce3 	.word	0x08009ce3
 8009c58:	08009ce3 	.word	0x08009ce3
 8009c5c:	08009ce3 	.word	0x08009ce3
 8009c60:	08009ce3 	.word	0x08009ce3
 8009c64:	08009ce3 	.word	0x08009ce3
 8009c68:	08009ce3 	.word	0x08009ce3
 8009c6c:	08009c9f 	.word	0x08009c9f
 8009c70:	08009cc9 	.word	0x08009cc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d107      	bne.n	8009c90 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c80:	f107 030a 	add.w	r3, r7, #10
 8009c84:	2202      	movs	r2, #2
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 fa82 	bl	800b192 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c8e:	e032      	b.n	8009cf6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f001 fa0c 	bl	800b0b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	75fb      	strb	r3, [r7, #23]
          break;
 8009c9c:	e02b      	b.n	8009cf6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d107      	bne.n	8009cba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009caa:	f107 030d 	add.w	r3, r7, #13
 8009cae:	2201      	movs	r2, #1
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 fa6d 	bl	800b192 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cb8:	e01d      	b.n	8009cf6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f001 f9f7 	bl	800b0b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8009cc6:	e016      	b.n	8009cf6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	d00f      	beq.n	8009cf4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f001 f9ea 	bl	800b0b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ce0:	e008      	b.n	8009cf4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 f9e3 	bl	800b0b0 <USBD_CtlError>
          ret = USBD_FAIL;
 8009cea:	2303      	movs	r3, #3
 8009cec:	75fb      	strb	r3, [r7, #23]
          break;
 8009cee:	e002      	b.n	8009cf6 <USBD_CDC_Setup+0x176>
          break;
 8009cf0:	bf00      	nop
 8009cf2:	e008      	b.n	8009d06 <USBD_CDC_Setup+0x186>
          break;
 8009cf4:	bf00      	nop
      }
      break;
 8009cf6:	e006      	b.n	8009d06 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f001 f9d8 	bl	800b0b0 <USBD_CtlError>
      ret = USBD_FAIL;
 8009d00:	2303      	movs	r3, #3
 8009d02:	75fb      	strb	r3, [r7, #23]
      break;
 8009d04:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3718      	adds	r7, #24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e04f      	b.n	8009dd2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d3a:	78fa      	ldrb	r2, [r7, #3]
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	440b      	add	r3, r1
 8009d48:	3318      	adds	r3, #24
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d029      	beq.n	8009da4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009d50:	78fa      	ldrb	r2, [r7, #3]
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	4613      	mov	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	3318      	adds	r3, #24
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	78f9      	ldrb	r1, [r7, #3]
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	460b      	mov	r3, r1
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	440b      	add	r3, r1
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	4403      	add	r3, r0
 8009d70:	3320      	adds	r3, #32
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d78:	fb01 f303 	mul.w	r3, r1, r3
 8009d7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d110      	bne.n	8009da4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009d82:	78fa      	ldrb	r2, [r7, #3]
 8009d84:	6879      	ldr	r1, [r7, #4]
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	440b      	add	r3, r1
 8009d90:	3318      	adds	r3, #24
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d96:	78f9      	ldrb	r1, [r7, #3]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f004 fe90 	bl	800eac2 <USBD_LL_Transmit>
 8009da2:	e015      	b.n	8009dd0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00b      	beq.n	8009dd0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009dcc:	78fa      	ldrb	r2, [r7, #3]
 8009dce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	460b      	mov	r3, r1
 8009de4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009dec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d101      	bne.n	8009dfc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	e015      	b.n	8009e28 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f004 fea0 	bl	800eb46 <USBD_LL_GetRxDataSize>
 8009e06:	4602      	mov	r2, r0
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009e22:	4611      	mov	r1, r2
 8009e24:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e01a      	b.n	8009e80 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d014      	beq.n	8009e7e <USBD_CDC_EP0_RxReady+0x4e>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009e5a:	2bff      	cmp	r3, #255	@ 0xff
 8009e5c:	d00f      	beq.n	8009e7e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009e6c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	22ff      	movs	r2, #255	@ 0xff
 8009e7a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2243      	movs	r2, #67	@ 0x43
 8009e94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009e96:	4b03      	ldr	r3, [pc, #12]	@ (8009ea4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	20000094 	.word	0x20000094

08009ea8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2243      	movs	r2, #67	@ 0x43
 8009eb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009eb6:	4b03      	ldr	r3, [pc, #12]	@ (8009ec4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	20000050 	.word	0x20000050

08009ec8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2243      	movs	r2, #67	@ 0x43
 8009ed4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009ed6:	4b03      	ldr	r3, [pc, #12]	@ (8009ee4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	200000d8 	.word	0x200000d8

08009ee8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	220a      	movs	r2, #10
 8009ef4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009ef6:	4b03      	ldr	r3, [pc, #12]	@ (8009f04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	2000000c 	.word	0x2000000c

08009f08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e004      	b.n	8009f26 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b087      	sub	sp, #28
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f44:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e008      	b.n	8009f62 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b085      	sub	sp, #20
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e004      	b.n	8009f94 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e01a      	b.n	8009ff8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d114      	bne.n	8009ff6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009fea:	2181      	movs	r1, #129	@ 0x81
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f004 fd68 	bl	800eac2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a00e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e016      	b.n	800a04c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	7c1b      	ldrb	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d109      	bne.n	800a03a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a02c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a030:	2101      	movs	r1, #1
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f004 fd66 	bl	800eb04 <USBD_LL_PrepareReceive>
 800a038:	e007      	b.n	800a04a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a040:	2340      	movs	r3, #64	@ 0x40
 800a042:	2101      	movs	r1, #1
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f004 fd5d 	bl	800eb04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	4613      	mov	r3, r2
 800a060:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a068:	2303      	movs	r3, #3
 800a06a:	e01f      	b.n	800a0ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	79fa      	ldrb	r2, [r7, #7]
 800a09e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f004 fbc5 	bl	800e830 <USBD_LL_Init>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a0aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e016      	b.n	800a0fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00b      	beq.n	800a0f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e8:	f107 020e 	add.w	r2, r7, #14
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4798      	blx	r3
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b082      	sub	sp, #8
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f004 fbf0 	bl	800e8f0 <USBD_LL_Start>
 800a110:	4603      	mov	r3, r0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b083      	sub	sp, #12
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a13c:	2303      	movs	r3, #3
 800a13e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a146:	2b00      	cmp	r3, #0
 800a148:	d009      	beq.n	800a15e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	78fa      	ldrb	r2, [r7, #3]
 800a154:	4611      	mov	r1, r2
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	4798      	blx	r3
 800a15a:	4603      	mov	r3, r0
 800a15c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d007      	beq.n	800a18e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	78fa      	ldrb	r2, [r7, #3]
 800a188:	4611      	mov	r1, r2
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	4798      	blx	r3
  }

  return USBD_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 ff46 	bl	800b03c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a1be:	461a      	mov	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a1cc:	f003 031f 	and.w	r3, r3, #31
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d01a      	beq.n	800a20a <USBD_LL_SetupStage+0x72>
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d822      	bhi.n	800a21e <USBD_LL_SetupStage+0x86>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <USBD_LL_SetupStage+0x4a>
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d00a      	beq.n	800a1f6 <USBD_LL_SetupStage+0x5e>
 800a1e0:	e01d      	b.n	800a21e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f9ee 	bl	800a5cc <USBD_StdDevReq>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1f4:	e020      	b.n	800a238 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fa52 	bl	800a6a8 <USBD_StdItfReq>
 800a204:	4603      	mov	r3, r0
 800a206:	73fb      	strb	r3, [r7, #15]
      break;
 800a208:	e016      	b.n	800a238 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa91 	bl	800a73a <USBD_StdEPReq>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
      break;
 800a21c:	e00c      	b.n	800a238 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a224:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f004 fbbf 	bl	800e9b0 <USBD_LL_StallEP>
 800a232:	4603      	mov	r3, r0
 800a234:	73fb      	strb	r3, [r7, #15]
      break;
 800a236:	bf00      	nop
  }

  return ret;
 800a238:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b086      	sub	sp, #24
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	460b      	mov	r3, r1
 800a24c:	607a      	str	r2, [r7, #4]
 800a24e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a250:	7afb      	ldrb	r3, [r7, #11]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d138      	bne.n	800a2c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a25c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a264:	2b03      	cmp	r3, #3
 800a266:	d14a      	bne.n	800a2fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	429a      	cmp	r2, r3
 800a272:	d913      	bls.n	800a29c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	689a      	ldr	r2, [r3, #8]
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	1ad2      	subs	r2, r2, r3
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	68da      	ldr	r2, [r3, #12]
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	4293      	cmp	r3, r2
 800a28c:	bf28      	it	cs
 800a28e:	4613      	movcs	r3, r2
 800a290:	461a      	mov	r2, r3
 800a292:	6879      	ldr	r1, [r7, #4]
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f000 ffc5 	bl	800b224 <USBD_CtlContinueRx>
 800a29a:	e030      	b.n	800a2fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d10b      	bne.n	800a2c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d005      	beq.n	800a2c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 ffc0 	bl	800b246 <USBD_CtlSendStatus>
 800a2c6:	e01a      	b.n	800a2fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d114      	bne.n	800a2fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00e      	beq.n	800a2fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	7afa      	ldrb	r2, [r7, #11]
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	4798      	blx	r3
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
 800a2fc:	e000      	b.n	800a300 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	460b      	mov	r3, r1
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a316:	7afb      	ldrb	r3, [r7, #11]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d16b      	bne.n	800a3f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3314      	adds	r3, #20
 800a320:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d156      	bne.n	800a3da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	689a      	ldr	r2, [r3, #8]
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	429a      	cmp	r2, r3
 800a336:	d914      	bls.n	800a362 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	689a      	ldr	r2, [r3, #8]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	1ad2      	subs	r2, r2, r3
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	461a      	mov	r2, r3
 800a34c:	6879      	ldr	r1, [r7, #4]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 ff3a 	bl	800b1c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a354:	2300      	movs	r3, #0
 800a356:	2200      	movs	r2, #0
 800a358:	2100      	movs	r1, #0
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f004 fbd2 	bl	800eb04 <USBD_LL_PrepareReceive>
 800a360:	e03b      	b.n	800a3da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	68da      	ldr	r2, [r3, #12]
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d11c      	bne.n	800a3a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a376:	429a      	cmp	r2, r3
 800a378:	d316      	bcc.n	800a3a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a384:	429a      	cmp	r2, r3
 800a386:	d20f      	bcs.n	800a3a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a388:	2200      	movs	r2, #0
 800a38a:	2100      	movs	r1, #0
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 ff1b 	bl	800b1c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2200      	movs	r2, #0
 800a396:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a39a:	2300      	movs	r3, #0
 800a39c:	2200      	movs	r2, #0
 800a39e:	2100      	movs	r1, #0
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f004 fbaf 	bl	800eb04 <USBD_LL_PrepareReceive>
 800a3a6:	e018      	b.n	800a3da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d10b      	bne.n	800a3cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d005      	beq.n	800a3cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3cc:	2180      	movs	r1, #128	@ 0x80
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f004 faee 	bl	800e9b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 ff49 	bl	800b26c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d122      	bne.n	800a42a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f7ff fe98 	bl	800a11a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a3f2:	e01a      	b.n	800a42a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d114      	bne.n	800a42a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00e      	beq.n	800a42a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	7afa      	ldrb	r2, [r7, #11]
 800a416:	4611      	mov	r1, r2
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	4798      	blx	r3
 800a41c:	4603      	mov	r3, r0
 800a41e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	e000      	b.n	800a42c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a464:	2303      	movs	r3, #3
 800a466:	e02f      	b.n	800a4c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00f      	beq.n	800a492 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d009      	beq.n	800a492 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6852      	ldr	r2, [r2, #4]
 800a48a:	b2d2      	uxtb	r2, r2
 800a48c:	4611      	mov	r1, r2
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a492:	2340      	movs	r3, #64	@ 0x40
 800a494:	2200      	movs	r2, #0
 800a496:	2100      	movs	r1, #0
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f004 fa44 	bl	800e926 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2240      	movs	r2, #64	@ 0x40
 800a4aa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4ae:	2340      	movs	r3, #64	@ 0x40
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2180      	movs	r1, #128	@ 0x80
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f004 fa36 	bl	800e926 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2240      	movs	r2, #64	@ 0x40
 800a4c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	78fa      	ldrb	r2, [r7, #3]
 800a4e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2204      	movs	r2, #4
 800a50a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d106      	bne.n	800a53e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a536:	b2da      	uxtb	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a55e:	2303      	movs	r3, #3
 800a560:	e012      	b.n	800a588 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d10b      	bne.n	800a586 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d005      	beq.n	800a586 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5ae:	8a3b      	ldrh	r3, [r7, #16]
 800a5b0:	021b      	lsls	r3, r3, #8
 800a5b2:	b21a      	sxth	r2, r3
 800a5b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	b21b      	sxth	r3, r3
 800a5bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5be:	89fb      	ldrh	r3, [r7, #14]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5e2:	2b40      	cmp	r3, #64	@ 0x40
 800a5e4:	d005      	beq.n	800a5f2 <USBD_StdDevReq+0x26>
 800a5e6:	2b40      	cmp	r3, #64	@ 0x40
 800a5e8:	d853      	bhi.n	800a692 <USBD_StdDevReq+0xc6>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00b      	beq.n	800a606 <USBD_StdDevReq+0x3a>
 800a5ee:	2b20      	cmp	r3, #32
 800a5f0:	d14f      	bne.n	800a692 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	4798      	blx	r3
 800a600:	4603      	mov	r3, r0
 800a602:	73fb      	strb	r3, [r7, #15]
      break;
 800a604:	e04a      	b.n	800a69c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	785b      	ldrb	r3, [r3, #1]
 800a60a:	2b09      	cmp	r3, #9
 800a60c:	d83b      	bhi.n	800a686 <USBD_StdDevReq+0xba>
 800a60e:	a201      	add	r2, pc, #4	@ (adr r2, 800a614 <USBD_StdDevReq+0x48>)
 800a610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a614:	0800a669 	.word	0x0800a669
 800a618:	0800a67d 	.word	0x0800a67d
 800a61c:	0800a687 	.word	0x0800a687
 800a620:	0800a673 	.word	0x0800a673
 800a624:	0800a687 	.word	0x0800a687
 800a628:	0800a647 	.word	0x0800a647
 800a62c:	0800a63d 	.word	0x0800a63d
 800a630:	0800a687 	.word	0x0800a687
 800a634:	0800a65f 	.word	0x0800a65f
 800a638:	0800a651 	.word	0x0800a651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f9de 	bl	800aa00 <USBD_GetDescriptor>
          break;
 800a644:	e024      	b.n	800a690 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fb6d 	bl	800ad28 <USBD_SetAddress>
          break;
 800a64e:	e01f      	b.n	800a690 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fbac 	bl	800adb0 <USBD_SetConfig>
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]
          break;
 800a65c:	e018      	b.n	800a690 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fc4b 	bl	800aefc <USBD_GetConfig>
          break;
 800a666:	e013      	b.n	800a690 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fc7c 	bl	800af68 <USBD_GetStatus>
          break;
 800a670:	e00e      	b.n	800a690 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fcab 	bl	800afd0 <USBD_SetFeature>
          break;
 800a67a:	e009      	b.n	800a690 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fcba 	bl	800aff8 <USBD_ClrFeature>
          break;
 800a684:	e004      	b.n	800a690 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fd11 	bl	800b0b0 <USBD_CtlError>
          break;
 800a68e:	bf00      	nop
      }
      break;
 800a690:	e004      	b.n	800a69c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fd0b 	bl	800b0b0 <USBD_CtlError>
      break;
 800a69a:	bf00      	nop
  }

  return ret;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop

0800a6a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6be:	2b40      	cmp	r3, #64	@ 0x40
 800a6c0:	d005      	beq.n	800a6ce <USBD_StdItfReq+0x26>
 800a6c2:	2b40      	cmp	r3, #64	@ 0x40
 800a6c4:	d82f      	bhi.n	800a726 <USBD_StdItfReq+0x7e>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <USBD_StdItfReq+0x26>
 800a6ca:	2b20      	cmp	r3, #32
 800a6cc:	d12b      	bne.n	800a726 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d81d      	bhi.n	800a718 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	889b      	ldrh	r3, [r3, #4]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d813      	bhi.n	800a70e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	4798      	blx	r3
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	88db      	ldrh	r3, [r3, #6]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d110      	bne.n	800a722 <USBD_StdItfReq+0x7a>
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10d      	bne.n	800a722 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fd9d 	bl	800b246 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a70c:	e009      	b.n	800a722 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fccd 	bl	800b0b0 <USBD_CtlError>
          break;
 800a716:	e004      	b.n	800a722 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a718:	6839      	ldr	r1, [r7, #0]
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fcc8 	bl	800b0b0 <USBD_CtlError>
          break;
 800a720:	e000      	b.n	800a724 <USBD_StdItfReq+0x7c>
          break;
 800a722:	bf00      	nop
      }
      break;
 800a724:	e004      	b.n	800a730 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a726:	6839      	ldr	r1, [r7, #0]
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 fcc1 	bl	800b0b0 <USBD_CtlError>
      break;
 800a72e:	bf00      	nop
  }

  return ret;
 800a730:	7bfb      	ldrb	r3, [r7, #15]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	889b      	ldrh	r3, [r3, #4]
 800a74c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a756:	2b40      	cmp	r3, #64	@ 0x40
 800a758:	d007      	beq.n	800a76a <USBD_StdEPReq+0x30>
 800a75a:	2b40      	cmp	r3, #64	@ 0x40
 800a75c:	f200 8145 	bhi.w	800a9ea <USBD_StdEPReq+0x2b0>
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00c      	beq.n	800a77e <USBD_StdEPReq+0x44>
 800a764:	2b20      	cmp	r3, #32
 800a766:	f040 8140 	bne.w	800a9ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	4798      	blx	r3
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]
      break;
 800a77c:	e13a      	b.n	800a9f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	785b      	ldrb	r3, [r3, #1]
 800a782:	2b03      	cmp	r3, #3
 800a784:	d007      	beq.n	800a796 <USBD_StdEPReq+0x5c>
 800a786:	2b03      	cmp	r3, #3
 800a788:	f300 8129 	bgt.w	800a9de <USBD_StdEPReq+0x2a4>
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d07f      	beq.n	800a890 <USBD_StdEPReq+0x156>
 800a790:	2b01      	cmp	r3, #1
 800a792:	d03c      	beq.n	800a80e <USBD_StdEPReq+0xd4>
 800a794:	e123      	b.n	800a9de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d002      	beq.n	800a7a8 <USBD_StdEPReq+0x6e>
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d016      	beq.n	800a7d4 <USBD_StdEPReq+0x9a>
 800a7a6:	e02c      	b.n	800a802 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00d      	beq.n	800a7ca <USBD_StdEPReq+0x90>
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	2b80      	cmp	r3, #128	@ 0x80
 800a7b2:	d00a      	beq.n	800a7ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7b4:	7bbb      	ldrb	r3, [r7, #14]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f004 f8f9 	bl	800e9b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7be:	2180      	movs	r1, #128	@ 0x80
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f004 f8f5 	bl	800e9b0 <USBD_LL_StallEP>
 800a7c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7c8:	e020      	b.n	800a80c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fc6f 	bl	800b0b0 <USBD_CtlError>
              break;
 800a7d2:	e01b      	b.n	800a80c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	885b      	ldrh	r3, [r3, #2]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10e      	bne.n	800a7fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00b      	beq.n	800a7fa <USBD_StdEPReq+0xc0>
 800a7e2:	7bbb      	ldrb	r3, [r7, #14]
 800a7e4:	2b80      	cmp	r3, #128	@ 0x80
 800a7e6:	d008      	beq.n	800a7fa <USBD_StdEPReq+0xc0>
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	88db      	ldrh	r3, [r3, #6]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d104      	bne.n	800a7fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f004 f8db 	bl	800e9b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fd23 	bl	800b246 <USBD_CtlSendStatus>

              break;
 800a800:	e004      	b.n	800a80c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fc53 	bl	800b0b0 <USBD_CtlError>
              break;
 800a80a:	bf00      	nop
          }
          break;
 800a80c:	e0ec      	b.n	800a9e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b02      	cmp	r3, #2
 800a818:	d002      	beq.n	800a820 <USBD_StdEPReq+0xe6>
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d016      	beq.n	800a84c <USBD_StdEPReq+0x112>
 800a81e:	e030      	b.n	800a882 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00d      	beq.n	800a842 <USBD_StdEPReq+0x108>
 800a826:	7bbb      	ldrb	r3, [r7, #14]
 800a828:	2b80      	cmp	r3, #128	@ 0x80
 800a82a:	d00a      	beq.n	800a842 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f004 f8bd 	bl	800e9b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a836:	2180      	movs	r1, #128	@ 0x80
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f004 f8b9 	bl	800e9b0 <USBD_LL_StallEP>
 800a83e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a840:	e025      	b.n	800a88e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fc33 	bl	800b0b0 <USBD_CtlError>
              break;
 800a84a:	e020      	b.n	800a88e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	885b      	ldrh	r3, [r3, #2]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d11b      	bne.n	800a88c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a854:	7bbb      	ldrb	r3, [r7, #14]
 800a856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d004      	beq.n	800a868 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a85e:	7bbb      	ldrb	r3, [r7, #14]
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f004 f8c3 	bl	800e9ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fcec 	bl	800b246 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	4798      	blx	r3
 800a87c:	4603      	mov	r3, r0
 800a87e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a880:	e004      	b.n	800a88c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fc13 	bl	800b0b0 <USBD_CtlError>
              break;
 800a88a:	e000      	b.n	800a88e <USBD_StdEPReq+0x154>
              break;
 800a88c:	bf00      	nop
          }
          break;
 800a88e:	e0ab      	b.n	800a9e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a896:	b2db      	uxtb	r3, r3
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d002      	beq.n	800a8a2 <USBD_StdEPReq+0x168>
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d032      	beq.n	800a906 <USBD_StdEPReq+0x1cc>
 800a8a0:	e097      	b.n	800a9d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <USBD_StdEPReq+0x17e>
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	2b80      	cmp	r3, #128	@ 0x80
 800a8ac:	d004      	beq.n	800a8b8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fbfd 	bl	800b0b0 <USBD_CtlError>
                break;
 800a8b6:	e091      	b.n	800a9dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	da0b      	bge.n	800a8d8 <USBD_StdEPReq+0x19e>
 800a8c0:	7bbb      	ldrb	r3, [r7, #14]
 800a8c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	3310      	adds	r3, #16
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	e00b      	b.n	800a8f0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8de:	4613      	mov	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4413      	add	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fc47 	bl	800b192 <USBD_CtlSendData>
              break;
 800a904:	e06a      	b.n	800a9dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	da11      	bge.n	800a932 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	f003 020f 	and.w	r2, r3, #15
 800a914:	6879      	ldr	r1, [r7, #4]
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	440b      	add	r3, r1
 800a920:	3324      	adds	r3, #36	@ 0x24
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d117      	bne.n	800a958 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fbc0 	bl	800b0b0 <USBD_CtlError>
                  break;
 800a930:	e054      	b.n	800a9dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a932:	7bbb      	ldrb	r3, [r7, #14]
 800a934:	f003 020f 	and.w	r2, r3, #15
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	440b      	add	r3, r1
 800a944:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d104      	bne.n	800a958 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fbad 	bl	800b0b0 <USBD_CtlError>
                  break;
 800a956:	e041      	b.n	800a9dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	da0b      	bge.n	800a978 <USBD_StdEPReq+0x23e>
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a966:	4613      	mov	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	3310      	adds	r3, #16
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	4413      	add	r3, r2
 800a974:	3304      	adds	r3, #4
 800a976:	e00b      	b.n	800a990 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a97e:	4613      	mov	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4413      	add	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	4413      	add	r3, r2
 800a98e:	3304      	adds	r3, #4
 800a990:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <USBD_StdEPReq+0x264>
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	2b80      	cmp	r3, #128	@ 0x80
 800a99c:	d103      	bne.n	800a9a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	e00e      	b.n	800a9c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f004 f83e 	bl	800ea2c <USBD_LL_IsStallEP>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d003      	beq.n	800a9be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	601a      	str	r2, [r3, #0]
 800a9bc:	e002      	b.n	800a9c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fbe1 	bl	800b192 <USBD_CtlSendData>
              break;
 800a9d0:	e004      	b.n	800a9dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a9d2:	6839      	ldr	r1, [r7, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fb6b 	bl	800b0b0 <USBD_CtlError>
              break;
 800a9da:	bf00      	nop
          }
          break;
 800a9dc:	e004      	b.n	800a9e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fb65 	bl	800b0b0 <USBD_CtlError>
          break;
 800a9e6:	bf00      	nop
      }
      break;
 800a9e8:	e004      	b.n	800a9f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fb5f 	bl	800b0b0 <USBD_CtlError>
      break;
 800a9f2:	bf00      	nop
  }

  return ret;
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
	...

0800aa00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	885b      	ldrh	r3, [r3, #2]
 800aa1a:	0a1b      	lsrs	r3, r3, #8
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	2b0e      	cmp	r3, #14
 800aa22:	f200 8152 	bhi.w	800acca <USBD_GetDescriptor+0x2ca>
 800aa26:	a201      	add	r2, pc, #4	@ (adr r2, 800aa2c <USBD_GetDescriptor+0x2c>)
 800aa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2c:	0800aa9d 	.word	0x0800aa9d
 800aa30:	0800aab5 	.word	0x0800aab5
 800aa34:	0800aaf5 	.word	0x0800aaf5
 800aa38:	0800accb 	.word	0x0800accb
 800aa3c:	0800accb 	.word	0x0800accb
 800aa40:	0800ac6b 	.word	0x0800ac6b
 800aa44:	0800ac97 	.word	0x0800ac97
 800aa48:	0800accb 	.word	0x0800accb
 800aa4c:	0800accb 	.word	0x0800accb
 800aa50:	0800accb 	.word	0x0800accb
 800aa54:	0800accb 	.word	0x0800accb
 800aa58:	0800accb 	.word	0x0800accb
 800aa5c:	0800accb 	.word	0x0800accb
 800aa60:	0800accb 	.word	0x0800accb
 800aa64:	0800aa69 	.word	0x0800aa69
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa6e:	69db      	ldr	r3, [r3, #28]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	7c12      	ldrb	r2, [r2, #16]
 800aa80:	f107 0108 	add.w	r1, r7, #8
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
 800aa88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa8a:	e126      	b.n	800acda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fb0e 	bl	800b0b0 <USBD_CtlError>
        err++;
 800aa94:	7afb      	ldrb	r3, [r7, #11]
 800aa96:	3301      	adds	r3, #1
 800aa98:	72fb      	strb	r3, [r7, #11]
      break;
 800aa9a:	e11e      	b.n	800acda <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	7c12      	ldrb	r2, [r2, #16]
 800aaa8:	f107 0108 	add.w	r1, r7, #8
 800aaac:	4610      	mov	r0, r2
 800aaae:	4798      	blx	r3
 800aab0:	60f8      	str	r0, [r7, #12]
      break;
 800aab2:	e112      	b.n	800acda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	7c1b      	ldrb	r3, [r3, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10d      	bne.n	800aad8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac4:	f107 0208 	add.w	r2, r7, #8
 800aac8:	4610      	mov	r0, r2
 800aaca:	4798      	blx	r3
 800aacc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3301      	adds	r3, #1
 800aad2:	2202      	movs	r2, #2
 800aad4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aad6:	e100      	b.n	800acda <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae0:	f107 0208 	add.w	r2, r7, #8
 800aae4:	4610      	mov	r0, r2
 800aae6:	4798      	blx	r3
 800aae8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3301      	adds	r3, #1
 800aaee:	2202      	movs	r2, #2
 800aaf0:	701a      	strb	r2, [r3, #0]
      break;
 800aaf2:	e0f2      	b.n	800acda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	885b      	ldrh	r3, [r3, #2]
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b05      	cmp	r3, #5
 800aafc:	f200 80ac 	bhi.w	800ac58 <USBD_GetDescriptor+0x258>
 800ab00:	a201      	add	r2, pc, #4	@ (adr r2, 800ab08 <USBD_GetDescriptor+0x108>)
 800ab02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab06:	bf00      	nop
 800ab08:	0800ab21 	.word	0x0800ab21
 800ab0c:	0800ab55 	.word	0x0800ab55
 800ab10:	0800ab89 	.word	0x0800ab89
 800ab14:	0800abbd 	.word	0x0800abbd
 800ab18:	0800abf1 	.word	0x0800abf1
 800ab1c:	0800ac25 	.word	0x0800ac25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00b      	beq.n	800ab44 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	7c12      	ldrb	r2, [r2, #16]
 800ab38:	f107 0108 	add.w	r1, r7, #8
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	4798      	blx	r3
 800ab40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab42:	e091      	b.n	800ac68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fab2 	bl	800b0b0 <USBD_CtlError>
            err++;
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	72fb      	strb	r3, [r7, #11]
          break;
 800ab52:	e089      	b.n	800ac68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00b      	beq.n	800ab78 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	7c12      	ldrb	r2, [r2, #16]
 800ab6c:	f107 0108 	add.w	r1, r7, #8
 800ab70:	4610      	mov	r0, r2
 800ab72:	4798      	blx	r3
 800ab74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab76:	e077      	b.n	800ac68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fa98 	bl	800b0b0 <USBD_CtlError>
            err++;
 800ab80:	7afb      	ldrb	r3, [r7, #11]
 800ab82:	3301      	adds	r3, #1
 800ab84:	72fb      	strb	r3, [r7, #11]
          break;
 800ab86:	e06f      	b.n	800ac68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	7c12      	ldrb	r2, [r2, #16]
 800aba0:	f107 0108 	add.w	r1, r7, #8
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3
 800aba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abaa:	e05d      	b.n	800ac68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 fa7e 	bl	800b0b0 <USBD_CtlError>
            err++;
 800abb4:	7afb      	ldrb	r3, [r7, #11]
 800abb6:	3301      	adds	r3, #1
 800abb8:	72fb      	strb	r3, [r7, #11]
          break;
 800abba:	e055      	b.n	800ac68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00b      	beq.n	800abe0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	7c12      	ldrb	r2, [r2, #16]
 800abd4:	f107 0108 	add.w	r1, r7, #8
 800abd8:	4610      	mov	r0, r2
 800abda:	4798      	blx	r3
 800abdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abde:	e043      	b.n	800ac68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fa64 	bl	800b0b0 <USBD_CtlError>
            err++;
 800abe8:	7afb      	ldrb	r3, [r7, #11]
 800abea:	3301      	adds	r3, #1
 800abec:	72fb      	strb	r3, [r7, #11]
          break;
 800abee:	e03b      	b.n	800ac68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	7c12      	ldrb	r2, [r2, #16]
 800ac08:	f107 0108 	add.w	r1, r7, #8
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
 800ac10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac12:	e029      	b.n	800ac68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa4a 	bl	800b0b0 <USBD_CtlError>
            err++;
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
          break;
 800ac22:	e021      	b.n	800ac68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	7c12      	ldrb	r2, [r2, #16]
 800ac3c:	f107 0108 	add.w	r1, r7, #8
 800ac40:	4610      	mov	r0, r2
 800ac42:	4798      	blx	r3
 800ac44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac46:	e00f      	b.n	800ac68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa30 	bl	800b0b0 <USBD_CtlError>
            err++;
 800ac50:	7afb      	ldrb	r3, [r7, #11]
 800ac52:	3301      	adds	r3, #1
 800ac54:	72fb      	strb	r3, [r7, #11]
          break;
 800ac56:	e007      	b.n	800ac68 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fa28 	bl	800b0b0 <USBD_CtlError>
          err++;
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	3301      	adds	r3, #1
 800ac64:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ac66:	bf00      	nop
      }
      break;
 800ac68:	e037      	b.n	800acda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	7c1b      	ldrb	r3, [r3, #16]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d109      	bne.n	800ac86 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7a:	f107 0208 	add.w	r2, r7, #8
 800ac7e:	4610      	mov	r0, r2
 800ac80:	4798      	blx	r3
 800ac82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac84:	e029      	b.n	800acda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fa11 	bl	800b0b0 <USBD_CtlError>
        err++;
 800ac8e:	7afb      	ldrb	r3, [r7, #11]
 800ac90:	3301      	adds	r3, #1
 800ac92:	72fb      	strb	r3, [r7, #11]
      break;
 800ac94:	e021      	b.n	800acda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	7c1b      	ldrb	r3, [r3, #16]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10d      	bne.n	800acba <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aca6:	f107 0208 	add.w	r2, r7, #8
 800acaa:	4610      	mov	r0, r2
 800acac:	4798      	blx	r3
 800acae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3301      	adds	r3, #1
 800acb4:	2207      	movs	r2, #7
 800acb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acb8:	e00f      	b.n	800acda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800acba:	6839      	ldr	r1, [r7, #0]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f9f7 	bl	800b0b0 <USBD_CtlError>
        err++;
 800acc2:	7afb      	ldrb	r3, [r7, #11]
 800acc4:	3301      	adds	r3, #1
 800acc6:	72fb      	strb	r3, [r7, #11]
      break;
 800acc8:	e007      	b.n	800acda <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f9ef 	bl	800b0b0 <USBD_CtlError>
      err++;
 800acd2:	7afb      	ldrb	r3, [r7, #11]
 800acd4:	3301      	adds	r3, #1
 800acd6:	72fb      	strb	r3, [r7, #11]
      break;
 800acd8:	bf00      	nop
  }

  if (err != 0U)
 800acda:	7afb      	ldrb	r3, [r7, #11]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d11e      	bne.n	800ad1e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	88db      	ldrh	r3, [r3, #6]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d016      	beq.n	800ad16 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ace8:	893b      	ldrh	r3, [r7, #8]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00e      	beq.n	800ad0c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	88da      	ldrh	r2, [r3, #6]
 800acf2:	893b      	ldrh	r3, [r7, #8]
 800acf4:	4293      	cmp	r3, r2
 800acf6:	bf28      	it	cs
 800acf8:	4613      	movcs	r3, r2
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acfe:	893b      	ldrh	r3, [r7, #8]
 800ad00:	461a      	mov	r2, r3
 800ad02:	68f9      	ldr	r1, [r7, #12]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fa44 	bl	800b192 <USBD_CtlSendData>
 800ad0a:	e009      	b.n	800ad20 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f9ce 	bl	800b0b0 <USBD_CtlError>
 800ad14:	e004      	b.n	800ad20 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fa95 	bl	800b246 <USBD_CtlSendStatus>
 800ad1c:	e000      	b.n	800ad20 <USBD_GetDescriptor+0x320>
    return;
 800ad1e:	bf00      	nop
  }
}
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop

0800ad28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	889b      	ldrh	r3, [r3, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d131      	bne.n	800ad9e <USBD_SetAddress+0x76>
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	88db      	ldrh	r3, [r3, #6]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d12d      	bne.n	800ad9e <USBD_SetAddress+0x76>
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	885b      	ldrh	r3, [r3, #2]
 800ad46:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad48:	d829      	bhi.n	800ad9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	885b      	ldrh	r3, [r3, #2]
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d104      	bne.n	800ad6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f9a3 	bl	800b0b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6a:	e01d      	b.n	800ada8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	7bfa      	ldrb	r2, [r7, #15]
 800ad70:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f003 fe83 	bl	800ea84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fa61 	bl	800b246 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d004      	beq.n	800ad94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad92:	e009      	b.n	800ada8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad9c:	e004      	b.n	800ada8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f985 	bl	800b0b0 <USBD_CtlError>
  }
}
 800ada6:	bf00      	nop
 800ada8:	bf00      	nop
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	885b      	ldrh	r3, [r3, #2]
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	4b4c      	ldr	r3, [pc, #304]	@ (800aef8 <USBD_SetConfig+0x148>)
 800adc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800adc8:	4b4b      	ldr	r3, [pc, #300]	@ (800aef8 <USBD_SetConfig+0x148>)
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d905      	bls.n	800addc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f96c 	bl	800b0b0 <USBD_CtlError>
    return USBD_FAIL;
 800add8:	2303      	movs	r3, #3
 800adda:	e088      	b.n	800aeee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d002      	beq.n	800adee <USBD_SetConfig+0x3e>
 800ade8:	2b03      	cmp	r3, #3
 800adea:	d025      	beq.n	800ae38 <USBD_SetConfig+0x88>
 800adec:	e071      	b.n	800aed2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800adee:	4b42      	ldr	r3, [pc, #264]	@ (800aef8 <USBD_SetConfig+0x148>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d01c      	beq.n	800ae30 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800adf6:	4b40      	ldr	r3, [pc, #256]	@ (800aef8 <USBD_SetConfig+0x148>)
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae00:	4b3d      	ldr	r3, [pc, #244]	@ (800aef8 <USBD_SetConfig+0x148>)
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	4619      	mov	r1, r3
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff f992 	bl	800a130 <USBD_SetClassConfig>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d004      	beq.n	800ae20 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f949 	bl	800b0b0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae1e:	e065      	b.n	800aeec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fa10 	bl	800b246 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2203      	movs	r2, #3
 800ae2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ae2e:	e05d      	b.n	800aeec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fa08 	bl	800b246 <USBD_CtlSendStatus>
      break;
 800ae36:	e059      	b.n	800aeec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae38:	4b2f      	ldr	r3, [pc, #188]	@ (800aef8 <USBD_SetConfig+0x148>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d112      	bne.n	800ae66 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ae48:	4b2b      	ldr	r3, [pc, #172]	@ (800aef8 <USBD_SetConfig+0x148>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae52:	4b29      	ldr	r3, [pc, #164]	@ (800aef8 <USBD_SetConfig+0x148>)
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff f985 	bl	800a168 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f9f1 	bl	800b246 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae64:	e042      	b.n	800aeec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ae66:	4b24      	ldr	r3, [pc, #144]	@ (800aef8 <USBD_SetConfig+0x148>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d02a      	beq.n	800aeca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff f973 	bl	800a168 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae82:	4b1d      	ldr	r3, [pc, #116]	@ (800aef8 <USBD_SetConfig+0x148>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae8c:	4b1a      	ldr	r3, [pc, #104]	@ (800aef8 <USBD_SetConfig+0x148>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff f94c 	bl	800a130 <USBD_SetClassConfig>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00f      	beq.n	800aec2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f903 	bl	800b0b0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff f958 	bl	800a168 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aec0:	e014      	b.n	800aeec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f9bf 	bl	800b246 <USBD_CtlSendStatus>
      break;
 800aec8:	e010      	b.n	800aeec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f9bb 	bl	800b246 <USBD_CtlSendStatus>
      break;
 800aed0:	e00c      	b.n	800aeec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f8eb 	bl	800b0b0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aeda:	4b07      	ldr	r3, [pc, #28]	@ (800aef8 <USBD_SetConfig+0x148>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7ff f941 	bl	800a168 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aee6:	2303      	movs	r3, #3
 800aee8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeea:	bf00      	nop
  }

  return ret;
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20000508 	.word	0x20000508

0800aefc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	88db      	ldrh	r3, [r3, #6]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d004      	beq.n	800af18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f8cd 	bl	800b0b0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af16:	e023      	b.n	800af60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b02      	cmp	r3, #2
 800af22:	dc02      	bgt.n	800af2a <USBD_GetConfig+0x2e>
 800af24:	2b00      	cmp	r3, #0
 800af26:	dc03      	bgt.n	800af30 <USBD_GetConfig+0x34>
 800af28:	e015      	b.n	800af56 <USBD_GetConfig+0x5a>
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d00b      	beq.n	800af46 <USBD_GetConfig+0x4a>
 800af2e:	e012      	b.n	800af56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	3308      	adds	r3, #8
 800af3a:	2201      	movs	r2, #1
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f927 	bl	800b192 <USBD_CtlSendData>
        break;
 800af44:	e00c      	b.n	800af60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3304      	adds	r3, #4
 800af4a:	2201      	movs	r2, #1
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f91f 	bl	800b192 <USBD_CtlSendData>
        break;
 800af54:	e004      	b.n	800af60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f8a9 	bl	800b0b0 <USBD_CtlError>
        break;
 800af5e:	bf00      	nop
}
 800af60:	bf00      	nop
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	3b01      	subs	r3, #1
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d81e      	bhi.n	800afbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	88db      	ldrh	r3, [r3, #6]
 800af84:	2b02      	cmp	r3, #2
 800af86:	d004      	beq.n	800af92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f890 	bl	800b0b0 <USBD_CtlError>
        break;
 800af90:	e01a      	b.n	800afc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2201      	movs	r2, #1
 800af96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d005      	beq.n	800afae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	f043 0202 	orr.w	r2, r3, #2
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	330c      	adds	r3, #12
 800afb2:	2202      	movs	r2, #2
 800afb4:	4619      	mov	r1, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f8eb 	bl	800b192 <USBD_CtlSendData>
      break;
 800afbc:	e004      	b.n	800afc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f875 	bl	800b0b0 <USBD_CtlError>
      break;
 800afc6:	bf00      	nop
  }
}
 800afc8:	bf00      	nop
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	885b      	ldrh	r3, [r3, #2]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d106      	bne.n	800aff0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f92b 	bl	800b246 <USBD_CtlSendStatus>
  }
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	3b01      	subs	r3, #1
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d80b      	bhi.n	800b028 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	885b      	ldrh	r3, [r3, #2]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d10c      	bne.n	800b032 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f910 	bl	800b246 <USBD_CtlSendStatus>
      }
      break;
 800b026:	e004      	b.n	800b032 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f840 	bl	800b0b0 <USBD_CtlError>
      break;
 800b030:	e000      	b.n	800b034 <USBD_ClrFeature+0x3c>
      break;
 800b032:	bf00      	nop
  }
}
 800b034:	bf00      	nop
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	781a      	ldrb	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3301      	adds	r3, #1
 800b056:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	781a      	ldrb	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3301      	adds	r3, #1
 800b064:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f7ff fa92 	bl	800a590 <SWAPBYTE>
 800b06c:	4603      	mov	r3, r0
 800b06e:	461a      	mov	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3301      	adds	r3, #1
 800b078:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	3301      	adds	r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff fa85 	bl	800a590 <SWAPBYTE>
 800b086:	4603      	mov	r3, r0
 800b088:	461a      	mov	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	3301      	adds	r3, #1
 800b092:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	3301      	adds	r3, #1
 800b098:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f7ff fa78 	bl	800a590 <SWAPBYTE>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	80da      	strh	r2, [r3, #6]
}
 800b0a8:	bf00      	nop
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0ba:	2180      	movs	r1, #128	@ 0x80
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f003 fc77 	bl	800e9b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f003 fc73 	bl	800e9b0 <USBD_LL_StallEP>
}
 800b0ca:	bf00      	nop
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b086      	sub	sp, #24
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	60f8      	str	r0, [r7, #12]
 800b0da:	60b9      	str	r1, [r7, #8]
 800b0dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d036      	beq.n	800b156 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0ec:	6938      	ldr	r0, [r7, #16]
 800b0ee:	f000 f836 	bl	800b15e <USBD_GetLen>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	005b      	lsls	r3, r3, #1
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b100:	7dfb      	ldrb	r3, [r7, #23]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	4413      	add	r3, r2
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	7812      	ldrb	r2, [r2, #0]
 800b10a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
 800b10e:	3301      	adds	r3, #1
 800b110:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b112:	7dfb      	ldrb	r3, [r7, #23]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	4413      	add	r3, r2
 800b118:	2203      	movs	r2, #3
 800b11a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	3301      	adds	r3, #1
 800b120:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b122:	e013      	b.n	800b14c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b124:	7dfb      	ldrb	r3, [r7, #23]
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	4413      	add	r3, r2
 800b12a:	693a      	ldr	r2, [r7, #16]
 800b12c:	7812      	ldrb	r2, [r2, #0]
 800b12e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	3301      	adds	r3, #1
 800b134:	613b      	str	r3, [r7, #16]
    idx++;
 800b136:	7dfb      	ldrb	r3, [r7, #23]
 800b138:	3301      	adds	r3, #1
 800b13a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b13c:	7dfb      	ldrb	r3, [r7, #23]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	4413      	add	r3, r2
 800b142:	2200      	movs	r2, #0
 800b144:	701a      	strb	r2, [r3, #0]
    idx++;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
 800b148:	3301      	adds	r3, #1
 800b14a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e7      	bne.n	800b124 <USBD_GetString+0x52>
 800b154:	e000      	b.n	800b158 <USBD_GetString+0x86>
    return;
 800b156:	bf00      	nop
  }
}
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b15e:	b480      	push	{r7}
 800b160:	b085      	sub	sp, #20
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b166:	2300      	movs	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b16e:	e005      	b.n	800b17c <USBD_GetLen+0x1e>
  {
    len++;
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	3301      	adds	r3, #1
 800b174:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	3301      	adds	r3, #1
 800b17a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1f5      	bne.n	800b170 <USBD_GetLen+0x12>
  }

  return len;
 800b184:	7bfb      	ldrb	r3, [r7, #15]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	60f8      	str	r0, [r7, #12]
 800b19a:	60b9      	str	r1, [r7, #8]
 800b19c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2202      	movs	r2, #2
 800b1a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f003 fc82 	bl	800eac2 <USBD_LL_Transmit>

  return USBD_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	2100      	movs	r1, #0
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f003 fc71 	bl	800eac2 <USBD_LL_Transmit>

  return USBD_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	60f8      	str	r0, [r7, #12]
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2203      	movs	r2, #3
 800b1fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	2100      	movs	r1, #0
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f003 fc75 	bl	800eb04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	2100      	movs	r1, #0
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f003 fc64 	bl	800eb04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b082      	sub	sp, #8
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2204      	movs	r2, #4
 800b252:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b256:	2300      	movs	r3, #0
 800b258:	2200      	movs	r2, #0
 800b25a:	2100      	movs	r1, #0
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f003 fc30 	bl	800eac2 <USBD_LL_Transmit>

  return USBD_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2205      	movs	r2, #5
 800b278:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b27c:	2300      	movs	r3, #0
 800b27e:	2200      	movs	r2, #0
 800b280:	2100      	movs	r1, #0
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f003 fc3e 	bl	800eb04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
	...

0800b294 <__NVIC_SetPriority>:
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	4603      	mov	r3, r0
 800b29c:	6039      	str	r1, [r7, #0]
 800b29e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b2a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	db0a      	blt.n	800b2be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	490c      	ldr	r1, [pc, #48]	@ (800b2e0 <__NVIC_SetPriority+0x4c>)
 800b2ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2b2:	0112      	lsls	r2, r2, #4
 800b2b4:	b2d2      	uxtb	r2, r2
 800b2b6:	440b      	add	r3, r1
 800b2b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b2bc:	e00a      	b.n	800b2d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	4908      	ldr	r1, [pc, #32]	@ (800b2e4 <__NVIC_SetPriority+0x50>)
 800b2c4:	79fb      	ldrb	r3, [r7, #7]
 800b2c6:	f003 030f 	and.w	r3, r3, #15
 800b2ca:	3b04      	subs	r3, #4
 800b2cc:	0112      	lsls	r2, r2, #4
 800b2ce:	b2d2      	uxtb	r2, r2
 800b2d0:	440b      	add	r3, r1
 800b2d2:	761a      	strb	r2, [r3, #24]
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	e000e100 	.word	0xe000e100
 800b2e4:	e000ed00 	.word	0xe000ed00

0800b2e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b2ec:	4b05      	ldr	r3, [pc, #20]	@ (800b304 <SysTick_Handler+0x1c>)
 800b2ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b2f0:	f001 ff36 	bl	800d160 <xTaskGetSchedulerState>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d001      	beq.n	800b2fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b2fa:	f002 fd2d 	bl	800dd58 <xPortSysTickHandler>
  }
}
 800b2fe:	bf00      	nop
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	e000e010 	.word	0xe000e010

0800b308 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b308:	b580      	push	{r7, lr}
 800b30a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b30c:	2100      	movs	r1, #0
 800b30e:	f06f 0004 	mvn.w	r0, #4
 800b312:	f7ff ffbf 	bl	800b294 <__NVIC_SetPriority>
#endif
}
 800b316:	bf00      	nop
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b322:	f3ef 8305 	mrs	r3, IPSR
 800b326:	603b      	str	r3, [r7, #0]
  return(result);
 800b328:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b32e:	f06f 0305 	mvn.w	r3, #5
 800b332:	607b      	str	r3, [r7, #4]
 800b334:	e00c      	b.n	800b350 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b336:	4b0a      	ldr	r3, [pc, #40]	@ (800b360 <osKernelInitialize+0x44>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d105      	bne.n	800b34a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b33e:	4b08      	ldr	r3, [pc, #32]	@ (800b360 <osKernelInitialize+0x44>)
 800b340:	2201      	movs	r2, #1
 800b342:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b344:	2300      	movs	r3, #0
 800b346:	607b      	str	r3, [r7, #4]
 800b348:	e002      	b.n	800b350 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b34a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b34e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b350:	687b      	ldr	r3, [r7, #4]
}
 800b352:	4618      	mov	r0, r3
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	2000050c 	.word	0x2000050c

0800b364 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b36a:	f3ef 8305 	mrs	r3, IPSR
 800b36e:	603b      	str	r3, [r7, #0]
  return(result);
 800b370:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b376:	f06f 0305 	mvn.w	r3, #5
 800b37a:	607b      	str	r3, [r7, #4]
 800b37c:	e010      	b.n	800b3a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b37e:	4b0b      	ldr	r3, [pc, #44]	@ (800b3ac <osKernelStart+0x48>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d109      	bne.n	800b39a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b386:	f7ff ffbf 	bl	800b308 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b38a:	4b08      	ldr	r3, [pc, #32]	@ (800b3ac <osKernelStart+0x48>)
 800b38c:	2202      	movs	r2, #2
 800b38e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b390:	f001 fa82 	bl	800c898 <vTaskStartScheduler>
      stat = osOK;
 800b394:	2300      	movs	r3, #0
 800b396:	607b      	str	r3, [r7, #4]
 800b398:	e002      	b.n	800b3a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b39a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b39e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b3a0:	687b      	ldr	r3, [r7, #4]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	2000050c 	.word	0x2000050c

0800b3b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b08e      	sub	sp, #56	@ 0x38
 800b3b4:	af04      	add	r7, sp, #16
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3c0:	f3ef 8305 	mrs	r3, IPSR
 800b3c4:	617b      	str	r3, [r7, #20]
  return(result);
 800b3c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d17f      	bne.n	800b4cc <osThreadNew+0x11c>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d07c      	beq.n	800b4cc <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b3d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b3d6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b3d8:	2318      	movs	r3, #24
 800b3da:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b3e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d045      	beq.n	800b478 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <osThreadNew+0x4a>
        name = attr->name;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d002      	beq.n	800b408 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d008      	beq.n	800b420 <osThreadNew+0x70>
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	2b38      	cmp	r3, #56	@ 0x38
 800b412:	d805      	bhi.n	800b420 <osThreadNew+0x70>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <osThreadNew+0x74>
        return (NULL);
 800b420:	2300      	movs	r3, #0
 800b422:	e054      	b.n	800b4ce <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	089b      	lsrs	r3, r3, #2
 800b432:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00e      	beq.n	800b45a <osThreadNew+0xaa>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	2ba7      	cmp	r3, #167	@ 0xa7
 800b442:	d90a      	bls.n	800b45a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d006      	beq.n	800b45a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	695b      	ldr	r3, [r3, #20]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <osThreadNew+0xaa>
        mem = 1;
 800b454:	2301      	movs	r3, #1
 800b456:	61bb      	str	r3, [r7, #24]
 800b458:	e010      	b.n	800b47c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10c      	bne.n	800b47c <osThreadNew+0xcc>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d108      	bne.n	800b47c <osThreadNew+0xcc>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d104      	bne.n	800b47c <osThreadNew+0xcc>
          mem = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	61bb      	str	r3, [r7, #24]
 800b476:	e001      	b.n	800b47c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d110      	bne.n	800b4a4 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b48a:	9202      	str	r2, [sp, #8]
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	6a3a      	ldr	r2, [r7, #32]
 800b496:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f001 f809 	bl	800c4b0 <xTaskCreateStatic>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	613b      	str	r3, [r7, #16]
 800b4a2:	e013      	b.n	800b4cc <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d110      	bne.n	800b4cc <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	f107 0310 	add.w	r3, r7, #16
 800b4b2:	9301      	str	r3, [sp, #4]
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f001 f857 	bl	800c570 <xTaskCreate>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d001      	beq.n	800b4cc <osThreadNew+0x11c>
            hTask = NULL;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b4cc:	693b      	ldr	r3, [r7, #16]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3728      	adds	r7, #40	@ 0x28
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4de:	f3ef 8305 	mrs	r3, IPSR
 800b4e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d003      	beq.n	800b4f2 <osDelay+0x1c>
    stat = osErrorISR;
 800b4ea:	f06f 0305 	mvn.w	r3, #5
 800b4ee:	60fb      	str	r3, [r7, #12]
 800b4f0:	e007      	b.n	800b502 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f001 f995 	bl	800c82c <vTaskDelay>
    }
  }

  return (stat);
 800b502:	68fb      	ldr	r3, [r7, #12]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b08a      	sub	sp, #40	@ 0x28
 800b510:	af02      	add	r7, sp, #8
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b518:	2300      	movs	r3, #0
 800b51a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b51c:	f3ef 8305 	mrs	r3, IPSR
 800b520:	613b      	str	r3, [r7, #16]
  return(result);
 800b522:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b524:	2b00      	cmp	r3, #0
 800b526:	d15f      	bne.n	800b5e8 <osMessageQueueNew+0xdc>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d05c      	beq.n	800b5e8 <osMessageQueueNew+0xdc>
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d059      	beq.n	800b5e8 <osMessageQueueNew+0xdc>
    mem = -1;
 800b534:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b538:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d029      	beq.n	800b594 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d012      	beq.n	800b56e <osMessageQueueNew+0x62>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	2b4f      	cmp	r3, #79	@ 0x4f
 800b54e:	d90e      	bls.n	800b56e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00a      	beq.n	800b56e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	695a      	ldr	r2, [r3, #20]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	68b9      	ldr	r1, [r7, #8]
 800b560:	fb01 f303 	mul.w	r3, r1, r3
 800b564:	429a      	cmp	r2, r3
 800b566:	d302      	bcc.n	800b56e <osMessageQueueNew+0x62>
        mem = 1;
 800b568:	2301      	movs	r3, #1
 800b56a:	61bb      	str	r3, [r7, #24]
 800b56c:	e014      	b.n	800b598 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d110      	bne.n	800b598 <osMessageQueueNew+0x8c>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d10c      	bne.n	800b598 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b582:	2b00      	cmp	r3, #0
 800b584:	d108      	bne.n	800b598 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d104      	bne.n	800b598 <osMessageQueueNew+0x8c>
          mem = 0;
 800b58e:	2300      	movs	r3, #0
 800b590:	61bb      	str	r3, [r7, #24]
 800b592:	e001      	b.n	800b598 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b594:	2300      	movs	r3, #0
 800b596:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d10b      	bne.n	800b5b6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	691a      	ldr	r2, [r3, #16]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	9100      	str	r1, [sp, #0]
 800b5aa:	68b9      	ldr	r1, [r7, #8]
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f000 fa31 	bl	800ba14 <xQueueGenericCreateStatic>
 800b5b2:	61f8      	str	r0, [r7, #28]
 800b5b4:	e008      	b.n	800b5c8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d105      	bne.n	800b5c8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b5bc:	2200      	movs	r2, #0
 800b5be:	68b9      	ldr	r1, [r7, #8]
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f000 faa4 	bl	800bb0e <xQueueGenericCreate>
 800b5c6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00c      	beq.n	800b5e8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d003      	beq.n	800b5dc <osMessageQueueNew+0xd0>
        name = attr->name;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	e001      	b.n	800b5e0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b5e0:	6979      	ldr	r1, [r7, #20]
 800b5e2:	69f8      	ldr	r0, [r7, #28]
 800b5e4:	f000 ff06 	bl	800c3f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b5e8:	69fb      	ldr	r3, [r7, #28]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3720      	adds	r7, #32
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
	...

0800b5f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	4613      	mov	r3, r2
 800b602:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b608:	2300      	movs	r3, #0
 800b60a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b60c:	f3ef 8305 	mrs	r3, IPSR
 800b610:	617b      	str	r3, [r7, #20]
  return(result);
 800b612:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b614:	2b00      	cmp	r3, #0
 800b616:	d028      	beq.n	800b66a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d005      	beq.n	800b62a <osMessageQueuePut+0x36>
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <osMessageQueuePut+0x36>
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d003      	beq.n	800b632 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b62a:	f06f 0303 	mvn.w	r3, #3
 800b62e:	61fb      	str	r3, [r7, #28]
 800b630:	e038      	b.n	800b6a4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b632:	2300      	movs	r3, #0
 800b634:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b636:	f107 0210 	add.w	r2, r7, #16
 800b63a:	2300      	movs	r3, #0
 800b63c:	68b9      	ldr	r1, [r7, #8]
 800b63e:	69b8      	ldr	r0, [r7, #24]
 800b640:	f000 fbc6 	bl	800bdd0 <xQueueGenericSendFromISR>
 800b644:	4603      	mov	r3, r0
 800b646:	2b01      	cmp	r3, #1
 800b648:	d003      	beq.n	800b652 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b64a:	f06f 0302 	mvn.w	r3, #2
 800b64e:	61fb      	str	r3, [r7, #28]
 800b650:	e028      	b.n	800b6a4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d025      	beq.n	800b6a4 <osMessageQueuePut+0xb0>
 800b658:	4b15      	ldr	r3, [pc, #84]	@ (800b6b0 <osMessageQueuePut+0xbc>)
 800b65a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	e01c      	b.n	800b6a4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <osMessageQueuePut+0x82>
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d103      	bne.n	800b67e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b676:	f06f 0303 	mvn.w	r3, #3
 800b67a:	61fb      	str	r3, [r7, #28]
 800b67c:	e012      	b.n	800b6a4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b67e:	2300      	movs	r3, #0
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	68b9      	ldr	r1, [r7, #8]
 800b684:	69b8      	ldr	r0, [r7, #24]
 800b686:	f000 faa1 	bl	800bbcc <xQueueGenericSend>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d009      	beq.n	800b6a4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d003      	beq.n	800b69e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b696:	f06f 0301 	mvn.w	r3, #1
 800b69a:	61fb      	str	r3, [r7, #28]
 800b69c:	e002      	b.n	800b6a4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b69e:	f06f 0302 	mvn.w	r3, #2
 800b6a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b6a4:	69fb      	ldr	r3, [r7, #28]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3720      	adds	r7, #32
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b088      	sub	sp, #32
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ca:	f3ef 8305 	mrs	r3, IPSR
 800b6ce:	617b      	str	r3, [r7, #20]
  return(result);
 800b6d0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d028      	beq.n	800b728 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d005      	beq.n	800b6e8 <osMessageQueueGet+0x34>
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <osMessageQueueGet+0x34>
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d003      	beq.n	800b6f0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b6e8:	f06f 0303 	mvn.w	r3, #3
 800b6ec:	61fb      	str	r3, [r7, #28]
 800b6ee:	e037      	b.n	800b760 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b6f4:	f107 0310 	add.w	r3, r7, #16
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	68b9      	ldr	r1, [r7, #8]
 800b6fc:	69b8      	ldr	r0, [r7, #24]
 800b6fe:	f000 fce7 	bl	800c0d0 <xQueueReceiveFromISR>
 800b702:	4603      	mov	r3, r0
 800b704:	2b01      	cmp	r3, #1
 800b706:	d003      	beq.n	800b710 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b708:	f06f 0302 	mvn.w	r3, #2
 800b70c:	61fb      	str	r3, [r7, #28]
 800b70e:	e027      	b.n	800b760 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d024      	beq.n	800b760 <osMessageQueueGet+0xac>
 800b716:	4b15      	ldr	r3, [pc, #84]	@ (800b76c <osMessageQueueGet+0xb8>)
 800b718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	e01b      	b.n	800b760 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <osMessageQueueGet+0x80>
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d103      	bne.n	800b73c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b734:	f06f 0303 	mvn.w	r3, #3
 800b738:	61fb      	str	r3, [r7, #28]
 800b73a:	e011      	b.n	800b760 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	68b9      	ldr	r1, [r7, #8]
 800b740:	69b8      	ldr	r0, [r7, #24]
 800b742:	f000 fbe3 	bl	800bf0c <xQueueReceive>
 800b746:	4603      	mov	r3, r0
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d009      	beq.n	800b760 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d003      	beq.n	800b75a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b752:	f06f 0301 	mvn.w	r3, #1
 800b756:	61fb      	str	r3, [r7, #28]
 800b758:	e002      	b.n	800b760 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b75a:	f06f 0302 	mvn.w	r3, #2
 800b75e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b760:	69fb      	ldr	r3, [r7, #28]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3720      	adds	r7, #32
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	e000ed04 	.word	0xe000ed04

0800b770 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4a07      	ldr	r2, [pc, #28]	@ (800b79c <vApplicationGetIdleTaskMemory+0x2c>)
 800b780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	4a06      	ldr	r2, [pc, #24]	@ (800b7a0 <vApplicationGetIdleTaskMemory+0x30>)
 800b786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b78e:	601a      	str	r2, [r3, #0]
}
 800b790:	bf00      	nop
 800b792:	3714      	adds	r7, #20
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	20000510 	.word	0x20000510
 800b7a0:	200005b8 	.word	0x200005b8

0800b7a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	4a07      	ldr	r2, [pc, #28]	@ (800b7d0 <vApplicationGetTimerTaskMemory+0x2c>)
 800b7b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	4a06      	ldr	r2, [pc, #24]	@ (800b7d4 <vApplicationGetTimerTaskMemory+0x30>)
 800b7ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f44f 6283 	mov.w	r2, #1048	@ 0x418
 800b7c2:	601a      	str	r2, [r3, #0]
}
 800b7c4:	bf00      	nop
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	20001558 	.word	0x20001558
 800b7d4:	20001600 	.word	0x20001600

0800b7d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f103 0208 	add.w	r2, r3, #8
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f103 0208 	add.w	r2, r3, #8
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f103 0208 	add.w	r2, r3, #8
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b80c:	bf00      	nop
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b826:	bf00      	nop
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b832:	b480      	push	{r7}
 800b834:	b085      	sub	sp, #20
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	689a      	ldr	r2, [r3, #8]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	601a      	str	r2, [r3, #0]
}
 800b86e:	bf00      	nop
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b87a:	b480      	push	{r7}
 800b87c:	b085      	sub	sp, #20
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b890:	d103      	bne.n	800b89a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	60fb      	str	r3, [r7, #12]
 800b898:	e00c      	b.n	800b8b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	3308      	adds	r3, #8
 800b89e:	60fb      	str	r3, [r7, #12]
 800b8a0:	e002      	b.n	800b8a8 <vListInsert+0x2e>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d2f6      	bcs.n	800b8a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	685a      	ldr	r2, [r3, #4]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	683a      	ldr	r2, [r7, #0]
 800b8ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	1c5a      	adds	r2, r3, #1
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	601a      	str	r2, [r3, #0]
}
 800b8e0:	bf00      	nop
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	6892      	ldr	r2, [r2, #8]
 800b902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	6852      	ldr	r2, [r2, #4]
 800b90c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	429a      	cmp	r2, r3
 800b916:	d103      	bne.n	800b920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	689a      	ldr	r2, [r3, #8]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	1e5a      	subs	r2, r3, #1
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10b      	bne.n	800b96c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b966:	bf00      	nop
 800b968:	bf00      	nop
 800b96a:	e7fd      	b.n	800b968 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b96c:	f002 f964 	bl	800dc38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b978:	68f9      	ldr	r1, [r7, #12]
 800b97a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b97c:	fb01 f303 	mul.w	r3, r1, r3
 800b980:	441a      	add	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b99c:	3b01      	subs	r3, #1
 800b99e:	68f9      	ldr	r1, [r7, #12]
 800b9a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b9a2:	fb01 f303 	mul.w	r3, r1, r3
 800b9a6:	441a      	add	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	22ff      	movs	r2, #255	@ 0xff
 800b9b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	22ff      	movs	r2, #255	@ 0xff
 800b9b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d114      	bne.n	800b9ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d01a      	beq.n	800ba00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3310      	adds	r3, #16
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f001 fa00 	bl	800cdd4 <xTaskRemoveFromEventList>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d012      	beq.n	800ba00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b9da:	4b0d      	ldr	r3, [pc, #52]	@ (800ba10 <xQueueGenericReset+0xd0>)
 800b9dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	e009      	b.n	800ba00 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	3310      	adds	r3, #16
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7ff fef1 	bl	800b7d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3324      	adds	r3, #36	@ 0x24
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff feec 	bl	800b7d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ba00:	f002 f94c 	bl	800dc9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ba04:	2301      	movs	r3, #1
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	e000ed04 	.word	0xe000ed04

0800ba14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b08e      	sub	sp, #56	@ 0x38
 800ba18:	af02      	add	r7, sp, #8
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
 800ba20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10b      	bne.n	800ba40 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ba28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2c:	f383 8811 	msr	BASEPRI, r3
 800ba30:	f3bf 8f6f 	isb	sy
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ba3a:	bf00      	nop
 800ba3c:	bf00      	nop
 800ba3e:	e7fd      	b.n	800ba3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d10b      	bne.n	800ba5e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba58:	bf00      	nop
 800ba5a:	bf00      	nop
 800ba5c:	e7fd      	b.n	800ba5a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <xQueueGenericCreateStatic+0x56>
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <xQueueGenericCreateStatic+0x5a>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e000      	b.n	800ba70 <xQueueGenericCreateStatic+0x5c>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10b      	bne.n	800ba8c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ba74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba78:	f383 8811 	msr	BASEPRI, r3
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	623b      	str	r3, [r7, #32]
}
 800ba86:	bf00      	nop
 800ba88:	bf00      	nop
 800ba8a:	e7fd      	b.n	800ba88 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d102      	bne.n	800ba98 <xQueueGenericCreateStatic+0x84>
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <xQueueGenericCreateStatic+0x88>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e000      	b.n	800ba9e <xQueueGenericCreateStatic+0x8a>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10b      	bne.n	800baba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	61fb      	str	r3, [r7, #28]
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop
 800bab8:	e7fd      	b.n	800bab6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800baba:	2350      	movs	r3, #80	@ 0x50
 800babc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	2b50      	cmp	r3, #80	@ 0x50
 800bac2:	d00b      	beq.n	800badc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	61bb      	str	r3, [r7, #24]
}
 800bad6:	bf00      	nop
 800bad8:	bf00      	nop
 800bada:	e7fd      	b.n	800bad8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800badc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00d      	beq.n	800bb04 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baea:	2201      	movs	r2, #1
 800baec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800baf0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800baf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	4613      	mov	r3, r2
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	68b9      	ldr	r1, [r7, #8]
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f000 f840 	bl	800bb84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3730      	adds	r7, #48	@ 0x30
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b08a      	sub	sp, #40	@ 0x28
 800bb12:	af02      	add	r7, sp, #8
 800bb14:	60f8      	str	r0, [r7, #12]
 800bb16:	60b9      	str	r1, [r7, #8]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10b      	bne.n	800bb3a <xQueueGenericCreate+0x2c>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	613b      	str	r3, [r7, #16]
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop
 800bb38:	e7fd      	b.n	800bb36 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	fb02 f303 	mul.w	r3, r2, r3
 800bb42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	3350      	adds	r3, #80	@ 0x50
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f002 f997 	bl	800de7c <pvPortMalloc>
 800bb4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d011      	beq.n	800bb7a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	3350      	adds	r3, #80	@ 0x50
 800bb5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb68:	79fa      	ldrb	r2, [r7, #7]
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	68b9      	ldr	r1, [r7, #8]
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 f805 	bl	800bb84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb7a:	69bb      	ldr	r3, [r7, #24]
	}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3720      	adds	r7, #32
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
 800bb90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d103      	bne.n	800bba0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	69ba      	ldr	r2, [r7, #24]
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	e002      	b.n	800bba6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	69b8      	ldr	r0, [r7, #24]
 800bbb6:	f7ff fec3 	bl	800b940 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	78fa      	ldrb	r2, [r7, #3]
 800bbbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bbc2:	bf00      	nop
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
	...

0800bbcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b08e      	sub	sp, #56	@ 0x38
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
 800bbd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10b      	bne.n	800bc00 <xQueueGenericSend+0x34>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bbfa:	bf00      	nop
 800bbfc:	bf00      	nop
 800bbfe:	e7fd      	b.n	800bbfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d103      	bne.n	800bc0e <xQueueGenericSend+0x42>
 800bc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d101      	bne.n	800bc12 <xQueueGenericSend+0x46>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e000      	b.n	800bc14 <xQueueGenericSend+0x48>
 800bc12:	2300      	movs	r3, #0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10b      	bne.n	800bc30 <xQueueGenericSend+0x64>
	__asm volatile
 800bc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc2a:	bf00      	nop
 800bc2c:	bf00      	nop
 800bc2e:	e7fd      	b.n	800bc2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d103      	bne.n	800bc3e <xQueueGenericSend+0x72>
 800bc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d101      	bne.n	800bc42 <xQueueGenericSend+0x76>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e000      	b.n	800bc44 <xQueueGenericSend+0x78>
 800bc42:	2300      	movs	r3, #0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10b      	bne.n	800bc60 <xQueueGenericSend+0x94>
	__asm volatile
 800bc48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	623b      	str	r3, [r7, #32]
}
 800bc5a:	bf00      	nop
 800bc5c:	bf00      	nop
 800bc5e:	e7fd      	b.n	800bc5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc60:	f001 fa7e 	bl	800d160 <xTaskGetSchedulerState>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d102      	bne.n	800bc70 <xQueueGenericSend+0xa4>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <xQueueGenericSend+0xa8>
 800bc70:	2301      	movs	r3, #1
 800bc72:	e000      	b.n	800bc76 <xQueueGenericSend+0xaa>
 800bc74:	2300      	movs	r3, #0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10b      	bne.n	800bc92 <xQueueGenericSend+0xc6>
	__asm volatile
 800bc7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	61fb      	str	r3, [r7, #28]
}
 800bc8c:	bf00      	nop
 800bc8e:	bf00      	nop
 800bc90:	e7fd      	b.n	800bc8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc92:	f001 ffd1 	bl	800dc38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d302      	bcc.n	800bca8 <xQueueGenericSend+0xdc>
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	d129      	bne.n	800bcfc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bca8:	683a      	ldr	r2, [r7, #0]
 800bcaa:	68b9      	ldr	r1, [r7, #8]
 800bcac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bcae:	f000 fa91 	bl	800c1d4 <prvCopyDataToQueue>
 800bcb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d010      	beq.n	800bcde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbe:	3324      	adds	r3, #36	@ 0x24
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f001 f887 	bl	800cdd4 <xTaskRemoveFromEventList>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d013      	beq.n	800bcf4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bccc:	4b3f      	ldr	r3, [pc, #252]	@ (800bdcc <xQueueGenericSend+0x200>)
 800bcce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	e00a      	b.n	800bcf4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d007      	beq.n	800bcf4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bce4:	4b39      	ldr	r3, [pc, #228]	@ (800bdcc <xQueueGenericSend+0x200>)
 800bce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcea:	601a      	str	r2, [r3, #0]
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bcf4:	f001 ffd2 	bl	800dc9c <vPortExitCritical>
				return pdPASS;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e063      	b.n	800bdc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d103      	bne.n	800bd0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd02:	f001 ffcb 	bl	800dc9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	e05c      	b.n	800bdc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d106      	bne.n	800bd1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd10:	f107 0314 	add.w	r3, r7, #20
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 f8c1 	bl	800ce9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd1e:	f001 ffbd 	bl	800dc9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd22:	f000 fe29 	bl	800c978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd26:	f001 ff87 	bl	800dc38 <vPortEnterCritical>
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd30:	b25b      	sxtb	r3, r3
 800bd32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd36:	d103      	bne.n	800bd40 <xQueueGenericSend+0x174>
 800bd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd46:	b25b      	sxtb	r3, r3
 800bd48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd4c:	d103      	bne.n	800bd56 <xQueueGenericSend+0x18a>
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd56:	f001 ffa1 	bl	800dc9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd5a:	1d3a      	adds	r2, r7, #4
 800bd5c:	f107 0314 	add.w	r3, r7, #20
 800bd60:	4611      	mov	r1, r2
 800bd62:	4618      	mov	r0, r3
 800bd64:	f001 f8b0 	bl	800cec8 <xTaskCheckForTimeOut>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d124      	bne.n	800bdb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd70:	f000 fb28 	bl	800c3c4 <prvIsQueueFull>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d018      	beq.n	800bdac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7c:	3310      	adds	r3, #16
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	4611      	mov	r1, r2
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 ffd4 	bl	800cd30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd8a:	f000 fab3 	bl	800c2f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd8e:	f000 fe01 	bl	800c994 <xTaskResumeAll>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f47f af7c 	bne.w	800bc92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bd9a:	4b0c      	ldr	r3, [pc, #48]	@ (800bdcc <xQueueGenericSend+0x200>)
 800bd9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bda0:	601a      	str	r2, [r3, #0]
 800bda2:	f3bf 8f4f 	dsb	sy
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	e772      	b.n	800bc92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bdac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdae:	f000 faa1 	bl	800c2f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdb2:	f000 fdef 	bl	800c994 <xTaskResumeAll>
 800bdb6:	e76c      	b.n	800bc92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bdb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdba:	f000 fa9b 	bl	800c2f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdbe:	f000 fde9 	bl	800c994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bdc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3738      	adds	r7, #56	@ 0x38
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	e000ed04 	.word	0xe000ed04

0800bdd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b090      	sub	sp, #64	@ 0x40
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10b      	bne.n	800be00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdec:	f383 8811 	msr	BASEPRI, r3
 800bdf0:	f3bf 8f6f 	isb	sy
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bdfa:	bf00      	nop
 800bdfc:	bf00      	nop
 800bdfe:	e7fd      	b.n	800bdfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d103      	bne.n	800be0e <xQueueGenericSendFromISR+0x3e>
 800be06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <xQueueGenericSendFromISR+0x42>
 800be0e:	2301      	movs	r3, #1
 800be10:	e000      	b.n	800be14 <xQueueGenericSendFromISR+0x44>
 800be12:	2300      	movs	r3, #0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10b      	bne.n	800be30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be2a:	bf00      	nop
 800be2c:	bf00      	nop
 800be2e:	e7fd      	b.n	800be2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d103      	bne.n	800be3e <xQueueGenericSendFromISR+0x6e>
 800be36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d101      	bne.n	800be42 <xQueueGenericSendFromISR+0x72>
 800be3e:	2301      	movs	r3, #1
 800be40:	e000      	b.n	800be44 <xQueueGenericSendFromISR+0x74>
 800be42:	2300      	movs	r3, #0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10b      	bne.n	800be60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800be48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	623b      	str	r3, [r7, #32]
}
 800be5a:	bf00      	nop
 800be5c:	bf00      	nop
 800be5e:	e7fd      	b.n	800be5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be60:	f001 ffca 	bl	800ddf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be64:	f3ef 8211 	mrs	r2, BASEPRI
 800be68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	61fa      	str	r2, [r7, #28]
 800be7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800be7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be88:	429a      	cmp	r2, r3
 800be8a:	d302      	bcc.n	800be92 <xQueueGenericSendFromISR+0xc2>
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d12f      	bne.n	800bef2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	68b9      	ldr	r1, [r7, #8]
 800bea6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bea8:	f000 f994 	bl	800c1d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800beac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800beb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800beb4:	d112      	bne.n	800bedc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d016      	beq.n	800beec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec0:	3324      	adds	r3, #36	@ 0x24
 800bec2:	4618      	mov	r0, r3
 800bec4:	f000 ff86 	bl	800cdd4 <xTaskRemoveFromEventList>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00e      	beq.n	800beec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00b      	beq.n	800beec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	e007      	b.n	800beec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bedc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bee0:	3301      	adds	r3, #1
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	b25a      	sxtb	r2, r3
 800bee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800beec:	2301      	movs	r3, #1
 800beee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bef0:	e001      	b.n	800bef6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bef8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3740      	adds	r7, #64	@ 0x40
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b08c      	sub	sp, #48	@ 0x30
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10b      	bne.n	800bf3e <xQueueReceive+0x32>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	623b      	str	r3, [r7, #32]
}
 800bf38:	bf00      	nop
 800bf3a:	bf00      	nop
 800bf3c:	e7fd      	b.n	800bf3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d103      	bne.n	800bf4c <xQueueReceive+0x40>
 800bf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <xQueueReceive+0x44>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <xQueueReceive+0x46>
 800bf50:	2300      	movs	r3, #0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10b      	bne.n	800bf6e <xQueueReceive+0x62>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	61fb      	str	r3, [r7, #28]
}
 800bf68:	bf00      	nop
 800bf6a:	bf00      	nop
 800bf6c:	e7fd      	b.n	800bf6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf6e:	f001 f8f7 	bl	800d160 <xTaskGetSchedulerState>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d102      	bne.n	800bf7e <xQueueReceive+0x72>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <xQueueReceive+0x76>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e000      	b.n	800bf84 <xQueueReceive+0x78>
 800bf82:	2300      	movs	r3, #0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10b      	bne.n	800bfa0 <xQueueReceive+0x94>
	__asm volatile
 800bf88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	61bb      	str	r3, [r7, #24]
}
 800bf9a:	bf00      	nop
 800bf9c:	bf00      	nop
 800bf9e:	e7fd      	b.n	800bf9c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfa0:	f001 fe4a 	bl	800dc38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d01f      	beq.n	800bff0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfb0:	68b9      	ldr	r1, [r7, #8]
 800bfb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfb4:	f000 f978 	bl	800c2a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfba:	1e5a      	subs	r2, r3, #1
 800bfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfbe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00f      	beq.n	800bfe8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfca:	3310      	adds	r3, #16
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f000 ff01 	bl	800cdd4 <xTaskRemoveFromEventList>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d007      	beq.n	800bfe8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bfd8:	4b3c      	ldr	r3, [pc, #240]	@ (800c0cc <xQueueReceive+0x1c0>)
 800bfda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfde:	601a      	str	r2, [r3, #0]
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfe8:	f001 fe58 	bl	800dc9c <vPortExitCritical>
				return pdPASS;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e069      	b.n	800c0c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d103      	bne.n	800bffe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bff6:	f001 fe51 	bl	800dc9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bffa:	2300      	movs	r3, #0
 800bffc:	e062      	b.n	800c0c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c000:	2b00      	cmp	r3, #0
 800c002:	d106      	bne.n	800c012 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c004:	f107 0310 	add.w	r3, r7, #16
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 ff47 	bl	800ce9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c00e:	2301      	movs	r3, #1
 800c010:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c012:	f001 fe43 	bl	800dc9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c016:	f000 fcaf 	bl	800c978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c01a:	f001 fe0d 	bl	800dc38 <vPortEnterCritical>
 800c01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c020:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c024:	b25b      	sxtb	r3, r3
 800c026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c02a:	d103      	bne.n	800c034 <xQueueReceive+0x128>
 800c02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02e:	2200      	movs	r2, #0
 800c030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c036:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c03a:	b25b      	sxtb	r3, r3
 800c03c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c040:	d103      	bne.n	800c04a <xQueueReceive+0x13e>
 800c042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c04a:	f001 fe27 	bl	800dc9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c04e:	1d3a      	adds	r2, r7, #4
 800c050:	f107 0310 	add.w	r3, r7, #16
 800c054:	4611      	mov	r1, r2
 800c056:	4618      	mov	r0, r3
 800c058:	f000 ff36 	bl	800cec8 <xTaskCheckForTimeOut>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d123      	bne.n	800c0aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c064:	f000 f998 	bl	800c398 <prvIsQueueEmpty>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d017      	beq.n	800c09e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c070:	3324      	adds	r3, #36	@ 0x24
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	4611      	mov	r1, r2
 800c076:	4618      	mov	r0, r3
 800c078:	f000 fe5a 	bl	800cd30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c07c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c07e:	f000 f939 	bl	800c2f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c082:	f000 fc87 	bl	800c994 <xTaskResumeAll>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d189      	bne.n	800bfa0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c08c:	4b0f      	ldr	r3, [pc, #60]	@ (800c0cc <xQueueReceive+0x1c0>)
 800c08e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	e780      	b.n	800bfa0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c09e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0a0:	f000 f928 	bl	800c2f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0a4:	f000 fc76 	bl	800c994 <xTaskResumeAll>
 800c0a8:	e77a      	b.n	800bfa0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c0aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0ac:	f000 f922 	bl	800c2f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0b0:	f000 fc70 	bl	800c994 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0b6:	f000 f96f 	bl	800c398 <prvIsQueueEmpty>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f43f af6f 	beq.w	800bfa0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3730      	adds	r7, #48	@ 0x30
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	e000ed04 	.word	0xe000ed04

0800c0d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b08e      	sub	sp, #56	@ 0x38
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10b      	bne.n	800c0fe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	623b      	str	r3, [r7, #32]
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop
 800c0fc:	e7fd      	b.n	800c0fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d103      	bne.n	800c10c <xQueueReceiveFromISR+0x3c>
 800c104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <xQueueReceiveFromISR+0x40>
 800c10c:	2301      	movs	r3, #1
 800c10e:	e000      	b.n	800c112 <xQueueReceiveFromISR+0x42>
 800c110:	2300      	movs	r3, #0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10b      	bne.n	800c12e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	61fb      	str	r3, [r7, #28]
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	e7fd      	b.n	800c12a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c12e:	f001 fe63 	bl	800ddf8 <vPortValidateInterruptPriority>
	__asm volatile
 800c132:	f3ef 8211 	mrs	r2, BASEPRI
 800c136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	61ba      	str	r2, [r7, #24]
 800c148:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c14a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c14c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c152:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c156:	2b00      	cmp	r3, #0
 800c158:	d02f      	beq.n	800c1ba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c164:	68b9      	ldr	r1, [r7, #8]
 800c166:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c168:	f000 f89e 	bl	800c2a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16e:	1e5a      	subs	r2, r3, #1
 800c170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c172:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c174:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c17c:	d112      	bne.n	800c1a4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d016      	beq.n	800c1b4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c188:	3310      	adds	r3, #16
 800c18a:	4618      	mov	r0, r3
 800c18c:	f000 fe22 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00e      	beq.n	800c1b4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00b      	beq.n	800c1b4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	601a      	str	r2, [r3, #0]
 800c1a2:	e007      	b.n	800c1b4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	b25a      	sxtb	r2, r3
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1b8:	e001      	b.n	800c1be <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	f383 8811 	msr	BASEPRI, r3
}
 800c1c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3738      	adds	r7, #56	@ 0x38
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10d      	bne.n	800c20e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d14d      	bne.n	800c296 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 ffcc 	bl	800d19c <xTaskPriorityDisinherit>
 800c204:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	609a      	str	r2, [r3, #8]
 800c20c:	e043      	b.n	800c296 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d119      	bne.n	800c248 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6858      	ldr	r0, [r3, #4]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c21c:	461a      	mov	r2, r3
 800c21e:	68b9      	ldr	r1, [r7, #8]
 800c220:	f003 fb07 	bl	800f832 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c22c:	441a      	add	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	685a      	ldr	r2, [r3, #4]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d32b      	bcc.n	800c296 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	605a      	str	r2, [r3, #4]
 800c246:	e026      	b.n	800c296 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	68d8      	ldr	r0, [r3, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c250:	461a      	mov	r2, r3
 800c252:	68b9      	ldr	r1, [r7, #8]
 800c254:	f003 faed 	bl	800f832 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68da      	ldr	r2, [r3, #12]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c260:	425b      	negs	r3, r3
 800c262:	441a      	add	r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	68da      	ldr	r2, [r3, #12]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	429a      	cmp	r2, r3
 800c272:	d207      	bcs.n	800c284 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	689a      	ldr	r2, [r3, #8]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c27c:	425b      	negs	r3, r3
 800c27e:	441a      	add	r2, r3
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b02      	cmp	r3, #2
 800c288:	d105      	bne.n	800c296 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d002      	beq.n	800c296 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	3b01      	subs	r3, #1
 800c294:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c29e:	697b      	ldr	r3, [r7, #20]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3718      	adds	r7, #24
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d018      	beq.n	800c2ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68da      	ldr	r2, [r3, #12]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2c2:	441a      	add	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68da      	ldr	r2, [r3, #12]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d303      	bcc.n	800c2dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	68d9      	ldr	r1, [r3, #12]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	6838      	ldr	r0, [r7, #0]
 800c2e8:	f003 faa3 	bl	800f832 <memcpy>
	}
}
 800c2ec:	bf00      	nop
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2fc:	f001 fc9c 	bl	800dc38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c306:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c308:	e011      	b.n	800c32e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d012      	beq.n	800c338 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	3324      	adds	r3, #36	@ 0x24
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fd5c 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c322:	f000 fe35 	bl	800cf90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c326:	7bfb      	ldrb	r3, [r7, #15]
 800c328:	3b01      	subs	r3, #1
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c32e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c332:	2b00      	cmp	r3, #0
 800c334:	dce9      	bgt.n	800c30a <prvUnlockQueue+0x16>
 800c336:	e000      	b.n	800c33a <prvUnlockQueue+0x46>
					break;
 800c338:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	22ff      	movs	r2, #255	@ 0xff
 800c33e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c342:	f001 fcab 	bl	800dc9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c346:	f001 fc77 	bl	800dc38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c350:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c352:	e011      	b.n	800c378 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d012      	beq.n	800c382 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	3310      	adds	r3, #16
 800c360:	4618      	mov	r0, r3
 800c362:	f000 fd37 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c36c:	f000 fe10 	bl	800cf90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c370:	7bbb      	ldrb	r3, [r7, #14]
 800c372:	3b01      	subs	r3, #1
 800c374:	b2db      	uxtb	r3, r3
 800c376:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dce9      	bgt.n	800c354 <prvUnlockQueue+0x60>
 800c380:	e000      	b.n	800c384 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c382:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	22ff      	movs	r2, #255	@ 0xff
 800c388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c38c:	f001 fc86 	bl	800dc9c <vPortExitCritical>
}
 800c390:	bf00      	nop
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3a0:	f001 fc4a 	bl	800dc38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d102      	bne.n	800c3b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	60fb      	str	r3, [r7, #12]
 800c3b0:	e001      	b.n	800c3b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3b6:	f001 fc71 	bl	800dc9c <vPortExitCritical>

	return xReturn;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3cc:	f001 fc34 	bl	800dc38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d102      	bne.n	800c3e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	e001      	b.n	800c3e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3e6:	f001 fc59 	bl	800dc9c <vPortExitCritical>

	return xReturn;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3fe:	2300      	movs	r3, #0
 800c400:	60fb      	str	r3, [r7, #12]
 800c402:	e014      	b.n	800c42e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c404:	4a0f      	ldr	r2, [pc, #60]	@ (800c444 <vQueueAddToRegistry+0x50>)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10b      	bne.n	800c428 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c410:	490c      	ldr	r1, [pc, #48]	@ (800c444 <vQueueAddToRegistry+0x50>)
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c41a:	4a0a      	ldr	r2, [pc, #40]	@ (800c444 <vQueueAddToRegistry+0x50>)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	4413      	add	r3, r2
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c426:	e006      	b.n	800c436 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	3301      	adds	r3, #1
 800c42c:	60fb      	str	r3, [r7, #12]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2b07      	cmp	r3, #7
 800c432:	d9e7      	bls.n	800c404 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c434:	bf00      	nop
 800c436:	bf00      	nop
 800c438:	3714      	adds	r7, #20
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	20002660 	.word	0x20002660

0800c448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c458:	f001 fbee 	bl	800dc38 <vPortEnterCritical>
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c462:	b25b      	sxtb	r3, r3
 800c464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c468:	d103      	bne.n	800c472 <vQueueWaitForMessageRestricted+0x2a>
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c478:	b25b      	sxtb	r3, r3
 800c47a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c47e:	d103      	bne.n	800c488 <vQueueWaitForMessageRestricted+0x40>
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	2200      	movs	r2, #0
 800c484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c488:	f001 fc08 	bl	800dc9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c490:	2b00      	cmp	r3, #0
 800c492:	d106      	bne.n	800c4a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	3324      	adds	r3, #36	@ 0x24
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	68b9      	ldr	r1, [r7, #8]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 fc6d 	bl	800cd7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c4a2:	6978      	ldr	r0, [r7, #20]
 800c4a4:	f7ff ff26 	bl	800c2f4 <prvUnlockQueue>
	}
 800c4a8:	bf00      	nop
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b08e      	sub	sp, #56	@ 0x38
 800c4b4:	af04      	add	r7, sp, #16
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
 800c4bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c4be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10b      	bne.n	800c4dc <xTaskCreateStatic+0x2c>
	__asm volatile
 800c4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c8:	f383 8811 	msr	BASEPRI, r3
 800c4cc:	f3bf 8f6f 	isb	sy
 800c4d0:	f3bf 8f4f 	dsb	sy
 800c4d4:	623b      	str	r3, [r7, #32]
}
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	e7fd      	b.n	800c4d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10b      	bne.n	800c4fa <xTaskCreateStatic+0x4a>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	61fb      	str	r3, [r7, #28]
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop
 800c4f8:	e7fd      	b.n	800c4f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4fa:	23a8      	movs	r3, #168	@ 0xa8
 800c4fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	2ba8      	cmp	r3, #168	@ 0xa8
 800c502:	d00b      	beq.n	800c51c <xTaskCreateStatic+0x6c>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	61bb      	str	r3, [r7, #24]
}
 800c516:	bf00      	nop
 800c518:	bf00      	nop
 800c51a:	e7fd      	b.n	800c518 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c51c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c520:	2b00      	cmp	r3, #0
 800c522:	d01e      	beq.n	800c562 <xTaskCreateStatic+0xb2>
 800c524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c526:	2b00      	cmp	r3, #0
 800c528:	d01b      	beq.n	800c562 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c530:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c532:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c536:	2202      	movs	r2, #2
 800c538:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c53c:	2300      	movs	r3, #0
 800c53e:	9303      	str	r3, [sp, #12]
 800c540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c542:	9302      	str	r3, [sp, #8]
 800c544:	f107 0314 	add.w	r3, r7, #20
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	68b9      	ldr	r1, [r7, #8]
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f000 f851 	bl	800c5fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c55a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c55c:	f000 f8f6 	bl	800c74c <prvAddNewTaskToReadyList>
 800c560:	e001      	b.n	800c566 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c562:	2300      	movs	r3, #0
 800c564:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c566:	697b      	ldr	r3, [r7, #20]
	}
 800c568:	4618      	mov	r0, r3
 800c56a:	3728      	adds	r7, #40	@ 0x28
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c570:	b580      	push	{r7, lr}
 800c572:	b08c      	sub	sp, #48	@ 0x30
 800c574:	af04      	add	r7, sp, #16
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	603b      	str	r3, [r7, #0]
 800c57c:	4613      	mov	r3, r2
 800c57e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c580:	88fb      	ldrh	r3, [r7, #6]
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4618      	mov	r0, r3
 800c586:	f001 fc79 	bl	800de7c <pvPortMalloc>
 800c58a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00e      	beq.n	800c5b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c592:	20a8      	movs	r0, #168	@ 0xa8
 800c594:	f001 fc72 	bl	800de7c <pvPortMalloc>
 800c598:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d003      	beq.n	800c5a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	631a      	str	r2, [r3, #48]	@ 0x30
 800c5a6:	e005      	b.n	800c5b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c5a8:	6978      	ldr	r0, [r7, #20]
 800c5aa:	f001 fd35 	bl	800e018 <vPortFree>
 800c5ae:	e001      	b.n	800c5b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d017      	beq.n	800c5ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5c2:	88fa      	ldrh	r2, [r7, #6]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9303      	str	r3, [sp, #12]
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	9302      	str	r3, [sp, #8]
 800c5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	68b9      	ldr	r1, [r7, #8]
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f000 f80f 	bl	800c5fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5de:	69f8      	ldr	r0, [r7, #28]
 800c5e0:	f000 f8b4 	bl	800c74c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	61bb      	str	r3, [r7, #24]
 800c5e8:	e002      	b.n	800c5f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5f0:	69bb      	ldr	r3, [r7, #24]
	}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3720      	adds	r7, #32
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
	...

0800c5fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b088      	sub	sp, #32
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
 800c608:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	461a      	mov	r2, r3
 800c614:	21a5      	movs	r1, #165	@ 0xa5
 800c616:	f003 f87d 	bl	800f714 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c624:	3b01      	subs	r3, #1
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	f023 0307 	bic.w	r3, r3, #7
 800c632:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	f003 0307 	and.w	r3, r3, #7
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00b      	beq.n	800c656 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	617b      	str	r3, [r7, #20]
}
 800c650:	bf00      	nop
 800c652:	bf00      	nop
 800c654:	e7fd      	b.n	800c652 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d01f      	beq.n	800c69c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c65c:	2300      	movs	r3, #0
 800c65e:	61fb      	str	r3, [r7, #28]
 800c660:	e012      	b.n	800c688 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	4413      	add	r3, r2
 800c668:	7819      	ldrb	r1, [r3, #0]
 800c66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	4413      	add	r3, r2
 800c670:	3334      	adds	r3, #52	@ 0x34
 800c672:	460a      	mov	r2, r1
 800c674:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	4413      	add	r3, r2
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d006      	beq.n	800c690 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	3301      	adds	r3, #1
 800c686:	61fb      	str	r3, [r7, #28]
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	2b0f      	cmp	r3, #15
 800c68c:	d9e9      	bls.n	800c662 <prvInitialiseNewTask+0x66>
 800c68e:	e000      	b.n	800c692 <prvInitialiseNewTask+0x96>
			{
				break;
 800c690:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c694:	2200      	movs	r2, #0
 800c696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c69a:	e003      	b.n	800c6a4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a6:	2b37      	cmp	r3, #55	@ 0x37
 800c6a8:	d901      	bls.n	800c6ae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c6aa:	2337      	movs	r3, #55	@ 0x37
 800c6ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6bc:	2200      	movs	r2, #0
 800c6be:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7ff f8a7 	bl	800b818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6cc:	3318      	adds	r3, #24
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7ff f8a2 	bl	800b818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fc:	3354      	adds	r3, #84	@ 0x54
 800c6fe:	224c      	movs	r2, #76	@ 0x4c
 800c700:	2100      	movs	r1, #0
 800c702:	4618      	mov	r0, r3
 800c704:	f003 f806 	bl	800f714 <memset>
 800c708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70a:	4a0d      	ldr	r2, [pc, #52]	@ (800c740 <prvInitialiseNewTask+0x144>)
 800c70c:	659a      	str	r2, [r3, #88]	@ 0x58
 800c70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c710:	4a0c      	ldr	r2, [pc, #48]	@ (800c744 <prvInitialiseNewTask+0x148>)
 800c712:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c716:	4a0c      	ldr	r2, [pc, #48]	@ (800c748 <prvInitialiseNewTask+0x14c>)
 800c718:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	68f9      	ldr	r1, [r7, #12]
 800c71e:	69b8      	ldr	r0, [r7, #24]
 800c720:	f001 f95a 	bl	800d9d8 <pxPortInitialiseStack>
 800c724:	4602      	mov	r2, r0
 800c726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c728:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c736:	bf00      	nop
 800c738:	3720      	adds	r7, #32
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	20010240 	.word	0x20010240
 800c744:	200102a8 	.word	0x200102a8
 800c748:	20010310 	.word	0x20010310

0800c74c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c754:	f001 fa70 	bl	800dc38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c758:	4b2d      	ldr	r3, [pc, #180]	@ (800c810 <prvAddNewTaskToReadyList+0xc4>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3301      	adds	r3, #1
 800c75e:	4a2c      	ldr	r2, [pc, #176]	@ (800c810 <prvAddNewTaskToReadyList+0xc4>)
 800c760:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c762:	4b2c      	ldr	r3, [pc, #176]	@ (800c814 <prvAddNewTaskToReadyList+0xc8>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d109      	bne.n	800c77e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c76a:	4a2a      	ldr	r2, [pc, #168]	@ (800c814 <prvAddNewTaskToReadyList+0xc8>)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c770:	4b27      	ldr	r3, [pc, #156]	@ (800c810 <prvAddNewTaskToReadyList+0xc4>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d110      	bne.n	800c79a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c778:	f000 fc2e 	bl	800cfd8 <prvInitialiseTaskLists>
 800c77c:	e00d      	b.n	800c79a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c77e:	4b26      	ldr	r3, [pc, #152]	@ (800c818 <prvAddNewTaskToReadyList+0xcc>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d109      	bne.n	800c79a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c786:	4b23      	ldr	r3, [pc, #140]	@ (800c814 <prvAddNewTaskToReadyList+0xc8>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c790:	429a      	cmp	r2, r3
 800c792:	d802      	bhi.n	800c79a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c794:	4a1f      	ldr	r2, [pc, #124]	@ (800c814 <prvAddNewTaskToReadyList+0xc8>)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c79a:	4b20      	ldr	r3, [pc, #128]	@ (800c81c <prvAddNewTaskToReadyList+0xd0>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	4a1e      	ldr	r2, [pc, #120]	@ (800c81c <prvAddNewTaskToReadyList+0xd0>)
 800c7a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c7a4:	4b1d      	ldr	r3, [pc, #116]	@ (800c81c <prvAddNewTaskToReadyList+0xd0>)
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7b0:	4b1b      	ldr	r3, [pc, #108]	@ (800c820 <prvAddNewTaskToReadyList+0xd4>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d903      	bls.n	800c7c0 <prvAddNewTaskToReadyList+0x74>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7bc:	4a18      	ldr	r2, [pc, #96]	@ (800c820 <prvAddNewTaskToReadyList+0xd4>)
 800c7be:	6013      	str	r3, [r2, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4a15      	ldr	r2, [pc, #84]	@ (800c824 <prvAddNewTaskToReadyList+0xd8>)
 800c7ce:	441a      	add	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3304      	adds	r3, #4
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	4610      	mov	r0, r2
 800c7d8:	f7ff f82b 	bl	800b832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c7dc:	f001 fa5e 	bl	800dc9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c7e0:	4b0d      	ldr	r3, [pc, #52]	@ (800c818 <prvAddNewTaskToReadyList+0xcc>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00e      	beq.n	800c806 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c7e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c814 <prvAddNewTaskToReadyList+0xc8>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d207      	bcs.n	800c806 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7f6:	4b0c      	ldr	r3, [pc, #48]	@ (800c828 <prvAddNewTaskToReadyList+0xdc>)
 800c7f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7fc:	601a      	str	r2, [r3, #0]
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c806:	bf00      	nop
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20002b74 	.word	0x20002b74
 800c814:	200026a0 	.word	0x200026a0
 800c818:	20002b80 	.word	0x20002b80
 800c81c:	20002b90 	.word	0x20002b90
 800c820:	20002b7c 	.word	0x20002b7c
 800c824:	200026a4 	.word	0x200026a4
 800c828:	e000ed04 	.word	0xe000ed04

0800c82c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d018      	beq.n	800c870 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c83e:	4b14      	ldr	r3, [pc, #80]	@ (800c890 <vTaskDelay+0x64>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00b      	beq.n	800c85e <vTaskDelay+0x32>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	60bb      	str	r3, [r7, #8]
}
 800c858:	bf00      	nop
 800c85a:	bf00      	nop
 800c85c:	e7fd      	b.n	800c85a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c85e:	f000 f88b 	bl	800c978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c862:	2100      	movs	r1, #0
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fd09 	bl	800d27c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c86a:	f000 f893 	bl	800c994 <xTaskResumeAll>
 800c86e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d107      	bne.n	800c886 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c876:	4b07      	ldr	r3, [pc, #28]	@ (800c894 <vTaskDelay+0x68>)
 800c878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c87c:	601a      	str	r2, [r3, #0]
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c886:	bf00      	nop
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	20002b9c 	.word	0x20002b9c
 800c894:	e000ed04 	.word	0xe000ed04

0800c898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b08a      	sub	sp, #40	@ 0x28
 800c89c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c8a6:	463a      	mov	r2, r7
 800c8a8:	1d39      	adds	r1, r7, #4
 800c8aa:	f107 0308 	add.w	r3, r7, #8
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fe ff5e 	bl	800b770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c8b4:	6839      	ldr	r1, [r7, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	68ba      	ldr	r2, [r7, #8]
 800c8ba:	9202      	str	r2, [sp, #8]
 800c8bc:	9301      	str	r3, [sp, #4]
 800c8be:	2300      	movs	r3, #0
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	460a      	mov	r2, r1
 800c8c6:	4924      	ldr	r1, [pc, #144]	@ (800c958 <vTaskStartScheduler+0xc0>)
 800c8c8:	4824      	ldr	r0, [pc, #144]	@ (800c95c <vTaskStartScheduler+0xc4>)
 800c8ca:	f7ff fdf1 	bl	800c4b0 <xTaskCreateStatic>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	4a23      	ldr	r2, [pc, #140]	@ (800c960 <vTaskStartScheduler+0xc8>)
 800c8d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c8d4:	4b22      	ldr	r3, [pc, #136]	@ (800c960 <vTaskStartScheduler+0xc8>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	617b      	str	r3, [r7, #20]
 800c8e0:	e001      	b.n	800c8e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d102      	bne.n	800c8f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8ec:	f000 fd1a 	bl	800d324 <xTimerCreateTimerTask>
 800c8f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d11b      	bne.n	800c930 <vTaskStartScheduler+0x98>
	__asm volatile
 800c8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	613b      	str	r3, [r7, #16]
}
 800c90a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c90c:	4b15      	ldr	r3, [pc, #84]	@ (800c964 <vTaskStartScheduler+0xcc>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3354      	adds	r3, #84	@ 0x54
 800c912:	4a15      	ldr	r2, [pc, #84]	@ (800c968 <vTaskStartScheduler+0xd0>)
 800c914:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c916:	4b15      	ldr	r3, [pc, #84]	@ (800c96c <vTaskStartScheduler+0xd4>)
 800c918:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c91c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c91e:	4b14      	ldr	r3, [pc, #80]	@ (800c970 <vTaskStartScheduler+0xd8>)
 800c920:	2201      	movs	r2, #1
 800c922:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c924:	4b13      	ldr	r3, [pc, #76]	@ (800c974 <vTaskStartScheduler+0xdc>)
 800c926:	2200      	movs	r2, #0
 800c928:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c92a:	f001 f8e1 	bl	800daf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c92e:	e00f      	b.n	800c950 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c936:	d10b      	bne.n	800c950 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c93c:	f383 8811 	msr	BASEPRI, r3
 800c940:	f3bf 8f6f 	isb	sy
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	60fb      	str	r3, [r7, #12]
}
 800c94a:	bf00      	nop
 800c94c:	bf00      	nop
 800c94e:	e7fd      	b.n	800c94c <vTaskStartScheduler+0xb4>
}
 800c950:	bf00      	nop
 800c952:	3718      	adds	r7, #24
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	08011c98 	.word	0x08011c98
 800c95c:	0800cfa9 	.word	0x0800cfa9
 800c960:	20002b98 	.word	0x20002b98
 800c964:	200026a0 	.word	0x200026a0
 800c968:	20000194 	.word	0x20000194
 800c96c:	20002b94 	.word	0x20002b94
 800c970:	20002b80 	.word	0x20002b80
 800c974:	20002b78 	.word	0x20002b78

0800c978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c978:	b480      	push	{r7}
 800c97a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c97c:	4b04      	ldr	r3, [pc, #16]	@ (800c990 <vTaskSuspendAll+0x18>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	3301      	adds	r3, #1
 800c982:	4a03      	ldr	r2, [pc, #12]	@ (800c990 <vTaskSuspendAll+0x18>)
 800c984:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c986:	bf00      	nop
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	20002b9c 	.word	0x20002b9c

0800c994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c99a:	2300      	movs	r3, #0
 800c99c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c9a2:	4b42      	ldr	r3, [pc, #264]	@ (800caac <xTaskResumeAll+0x118>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10b      	bne.n	800c9c2 <xTaskResumeAll+0x2e>
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	603b      	str	r3, [r7, #0]
}
 800c9bc:	bf00      	nop
 800c9be:	bf00      	nop
 800c9c0:	e7fd      	b.n	800c9be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c9c2:	f001 f939 	bl	800dc38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c9c6:	4b39      	ldr	r3, [pc, #228]	@ (800caac <xTaskResumeAll+0x118>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	4a37      	ldr	r2, [pc, #220]	@ (800caac <xTaskResumeAll+0x118>)
 800c9ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9d0:	4b36      	ldr	r3, [pc, #216]	@ (800caac <xTaskResumeAll+0x118>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d162      	bne.n	800ca9e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c9d8:	4b35      	ldr	r3, [pc, #212]	@ (800cab0 <xTaskResumeAll+0x11c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d05e      	beq.n	800ca9e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9e0:	e02f      	b.n	800ca42 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9e2:	4b34      	ldr	r3, [pc, #208]	@ (800cab4 <xTaskResumeAll+0x120>)
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	3318      	adds	r3, #24
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe ff7c 	bl	800b8ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fe ff77 	bl	800b8ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca02:	4b2d      	ldr	r3, [pc, #180]	@ (800cab8 <xTaskResumeAll+0x124>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d903      	bls.n	800ca12 <xTaskResumeAll+0x7e>
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca0e:	4a2a      	ldr	r2, [pc, #168]	@ (800cab8 <xTaskResumeAll+0x124>)
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca16:	4613      	mov	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4a27      	ldr	r2, [pc, #156]	@ (800cabc <xTaskResumeAll+0x128>)
 800ca20:	441a      	add	r2, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	3304      	adds	r3, #4
 800ca26:	4619      	mov	r1, r3
 800ca28:	4610      	mov	r0, r2
 800ca2a:	f7fe ff02 	bl	800b832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca32:	4b23      	ldr	r3, [pc, #140]	@ (800cac0 <xTaskResumeAll+0x12c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d302      	bcc.n	800ca42 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ca3c:	4b21      	ldr	r3, [pc, #132]	@ (800cac4 <xTaskResumeAll+0x130>)
 800ca3e:	2201      	movs	r2, #1
 800ca40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca42:	4b1c      	ldr	r3, [pc, #112]	@ (800cab4 <xTaskResumeAll+0x120>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1cb      	bne.n	800c9e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d001      	beq.n	800ca54 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca50:	f000 fb66 	bl	800d120 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca54:	4b1c      	ldr	r3, [pc, #112]	@ (800cac8 <xTaskResumeAll+0x134>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d010      	beq.n	800ca82 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca60:	f000 f846 	bl	800caf0 <xTaskIncrementTick>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d002      	beq.n	800ca70 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ca6a:	4b16      	ldr	r3, [pc, #88]	@ (800cac4 <xTaskResumeAll+0x130>)
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	3b01      	subs	r3, #1
 800ca74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1f1      	bne.n	800ca60 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ca7c:	4b12      	ldr	r3, [pc, #72]	@ (800cac8 <xTaskResumeAll+0x134>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca82:	4b10      	ldr	r3, [pc, #64]	@ (800cac4 <xTaskResumeAll+0x130>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d009      	beq.n	800ca9e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca8e:	4b0f      	ldr	r3, [pc, #60]	@ (800cacc <xTaskResumeAll+0x138>)
 800ca90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca94:	601a      	str	r2, [r3, #0]
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca9e:	f001 f8fd 	bl	800dc9c <vPortExitCritical>

	return xAlreadyYielded;
 800caa2:	68bb      	ldr	r3, [r7, #8]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	20002b9c 	.word	0x20002b9c
 800cab0:	20002b74 	.word	0x20002b74
 800cab4:	20002b34 	.word	0x20002b34
 800cab8:	20002b7c 	.word	0x20002b7c
 800cabc:	200026a4 	.word	0x200026a4
 800cac0:	200026a0 	.word	0x200026a0
 800cac4:	20002b88 	.word	0x20002b88
 800cac8:	20002b84 	.word	0x20002b84
 800cacc:	e000ed04 	.word	0xe000ed04

0800cad0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cad6:	4b05      	ldr	r3, [pc, #20]	@ (800caec <xTaskGetTickCount+0x1c>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cadc:	687b      	ldr	r3, [r7, #4]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	20002b78 	.word	0x20002b78

0800caf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800caf6:	2300      	movs	r3, #0
 800caf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cafa:	4b4f      	ldr	r3, [pc, #316]	@ (800cc38 <xTaskIncrementTick+0x148>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f040 8090 	bne.w	800cc24 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb04:	4b4d      	ldr	r3, [pc, #308]	@ (800cc3c <xTaskIncrementTick+0x14c>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb0c:	4a4b      	ldr	r2, [pc, #300]	@ (800cc3c <xTaskIncrementTick+0x14c>)
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d121      	bne.n	800cb5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb18:	4b49      	ldr	r3, [pc, #292]	@ (800cc40 <xTaskIncrementTick+0x150>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00b      	beq.n	800cb3a <xTaskIncrementTick+0x4a>
	__asm volatile
 800cb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb26:	f383 8811 	msr	BASEPRI, r3
 800cb2a:	f3bf 8f6f 	isb	sy
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	603b      	str	r3, [r7, #0]
}
 800cb34:	bf00      	nop
 800cb36:	bf00      	nop
 800cb38:	e7fd      	b.n	800cb36 <xTaskIncrementTick+0x46>
 800cb3a:	4b41      	ldr	r3, [pc, #260]	@ (800cc40 <xTaskIncrementTick+0x150>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	60fb      	str	r3, [r7, #12]
 800cb40:	4b40      	ldr	r3, [pc, #256]	@ (800cc44 <xTaskIncrementTick+0x154>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a3e      	ldr	r2, [pc, #248]	@ (800cc40 <xTaskIncrementTick+0x150>)
 800cb46:	6013      	str	r3, [r2, #0]
 800cb48:	4a3e      	ldr	r2, [pc, #248]	@ (800cc44 <xTaskIncrementTick+0x154>)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6013      	str	r3, [r2, #0]
 800cb4e:	4b3e      	ldr	r3, [pc, #248]	@ (800cc48 <xTaskIncrementTick+0x158>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3301      	adds	r3, #1
 800cb54:	4a3c      	ldr	r2, [pc, #240]	@ (800cc48 <xTaskIncrementTick+0x158>)
 800cb56:	6013      	str	r3, [r2, #0]
 800cb58:	f000 fae2 	bl	800d120 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb5c:	4b3b      	ldr	r3, [pc, #236]	@ (800cc4c <xTaskIncrementTick+0x15c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d349      	bcc.n	800cbfa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb66:	4b36      	ldr	r3, [pc, #216]	@ (800cc40 <xTaskIncrementTick+0x150>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d104      	bne.n	800cb7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb70:	4b36      	ldr	r3, [pc, #216]	@ (800cc4c <xTaskIncrementTick+0x15c>)
 800cb72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb76:	601a      	str	r2, [r3, #0]
					break;
 800cb78:	e03f      	b.n	800cbfa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb7a:	4b31      	ldr	r3, [pc, #196]	@ (800cc40 <xTaskIncrementTick+0x150>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d203      	bcs.n	800cb9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb92:	4a2e      	ldr	r2, [pc, #184]	@ (800cc4c <xTaskIncrementTick+0x15c>)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb98:	e02f      	b.n	800cbfa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe fea4 	bl	800b8ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d004      	beq.n	800cbb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	3318      	adds	r3, #24
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fe fe9b 	bl	800b8ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbba:	4b25      	ldr	r3, [pc, #148]	@ (800cc50 <xTaskIncrementTick+0x160>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d903      	bls.n	800cbca <xTaskIncrementTick+0xda>
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbc6:	4a22      	ldr	r2, [pc, #136]	@ (800cc50 <xTaskIncrementTick+0x160>)
 800cbc8:	6013      	str	r3, [r2, #0]
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbce:	4613      	mov	r3, r2
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	4413      	add	r3, r2
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4a1f      	ldr	r2, [pc, #124]	@ (800cc54 <xTaskIncrementTick+0x164>)
 800cbd8:	441a      	add	r2, r3
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	3304      	adds	r3, #4
 800cbde:	4619      	mov	r1, r3
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	f7fe fe26 	bl	800b832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbea:	4b1b      	ldr	r3, [pc, #108]	@ (800cc58 <xTaskIncrementTick+0x168>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d3b8      	bcc.n	800cb66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbf8:	e7b5      	b.n	800cb66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cbfa:	4b17      	ldr	r3, [pc, #92]	@ (800cc58 <xTaskIncrementTick+0x168>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc00:	4914      	ldr	r1, [pc, #80]	@ (800cc54 <xTaskIncrementTick+0x164>)
 800cc02:	4613      	mov	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	440b      	add	r3, r1
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d901      	bls.n	800cc16 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cc12:	2301      	movs	r3, #1
 800cc14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc16:	4b11      	ldr	r3, [pc, #68]	@ (800cc5c <xTaskIncrementTick+0x16c>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d007      	beq.n	800cc2e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	e004      	b.n	800cc2e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc24:	4b0e      	ldr	r3, [pc, #56]	@ (800cc60 <xTaskIncrementTick+0x170>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	4a0d      	ldr	r2, [pc, #52]	@ (800cc60 <xTaskIncrementTick+0x170>)
 800cc2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc2e:	697b      	ldr	r3, [r7, #20]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3718      	adds	r7, #24
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	20002b9c 	.word	0x20002b9c
 800cc3c:	20002b78 	.word	0x20002b78
 800cc40:	20002b2c 	.word	0x20002b2c
 800cc44:	20002b30 	.word	0x20002b30
 800cc48:	20002b8c 	.word	0x20002b8c
 800cc4c:	20002b94 	.word	0x20002b94
 800cc50:	20002b7c 	.word	0x20002b7c
 800cc54:	200026a4 	.word	0x200026a4
 800cc58:	200026a0 	.word	0x200026a0
 800cc5c:	20002b88 	.word	0x20002b88
 800cc60:	20002b84 	.word	0x20002b84

0800cc64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc6a:	4b2b      	ldr	r3, [pc, #172]	@ (800cd18 <vTaskSwitchContext+0xb4>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc72:	4b2a      	ldr	r3, [pc, #168]	@ (800cd1c <vTaskSwitchContext+0xb8>)
 800cc74:	2201      	movs	r2, #1
 800cc76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc78:	e047      	b.n	800cd0a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800cc7a:	4b28      	ldr	r3, [pc, #160]	@ (800cd1c <vTaskSwitchContext+0xb8>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc80:	4b27      	ldr	r3, [pc, #156]	@ (800cd20 <vTaskSwitchContext+0xbc>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	60fb      	str	r3, [r7, #12]
 800cc86:	e011      	b.n	800ccac <vTaskSwitchContext+0x48>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10b      	bne.n	800cca6 <vTaskSwitchContext+0x42>
	__asm volatile
 800cc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc92:	f383 8811 	msr	BASEPRI, r3
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	f3bf 8f4f 	dsb	sy
 800cc9e:	607b      	str	r3, [r7, #4]
}
 800cca0:	bf00      	nop
 800cca2:	bf00      	nop
 800cca4:	e7fd      	b.n	800cca2 <vTaskSwitchContext+0x3e>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	491d      	ldr	r1, [pc, #116]	@ (800cd24 <vTaskSwitchContext+0xc0>)
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	440b      	add	r3, r1
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d0e3      	beq.n	800cc88 <vTaskSwitchContext+0x24>
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	4a16      	ldr	r2, [pc, #88]	@ (800cd24 <vTaskSwitchContext+0xc0>)
 800cccc:	4413      	add	r3, r2
 800ccce:	60bb      	str	r3, [r7, #8]
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	685a      	ldr	r2, [r3, #4]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	605a      	str	r2, [r3, #4]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	685a      	ldr	r2, [r3, #4]
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	3308      	adds	r3, #8
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d104      	bne.n	800ccf0 <vTaskSwitchContext+0x8c>
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	685a      	ldr	r2, [r3, #4]
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	605a      	str	r2, [r3, #4]
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	4a0c      	ldr	r2, [pc, #48]	@ (800cd28 <vTaskSwitchContext+0xc4>)
 800ccf8:	6013      	str	r3, [r2, #0]
 800ccfa:	4a09      	ldr	r2, [pc, #36]	@ (800cd20 <vTaskSwitchContext+0xbc>)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd00:	4b09      	ldr	r3, [pc, #36]	@ (800cd28 <vTaskSwitchContext+0xc4>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	3354      	adds	r3, #84	@ 0x54
 800cd06:	4a09      	ldr	r2, [pc, #36]	@ (800cd2c <vTaskSwitchContext+0xc8>)
 800cd08:	6013      	str	r3, [r2, #0]
}
 800cd0a:	bf00      	nop
 800cd0c:	3714      	adds	r7, #20
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	20002b9c 	.word	0x20002b9c
 800cd1c:	20002b88 	.word	0x20002b88
 800cd20:	20002b7c 	.word	0x20002b7c
 800cd24:	200026a4 	.word	0x200026a4
 800cd28:	200026a0 	.word	0x200026a0
 800cd2c:	20000194 	.word	0x20000194

0800cd30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10b      	bne.n	800cd58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	60fb      	str	r3, [r7, #12]
}
 800cd52:	bf00      	nop
 800cd54:	bf00      	nop
 800cd56:	e7fd      	b.n	800cd54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd58:	4b07      	ldr	r3, [pc, #28]	@ (800cd78 <vTaskPlaceOnEventList+0x48>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3318      	adds	r3, #24
 800cd5e:	4619      	mov	r1, r3
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7fe fd8a 	bl	800b87a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd66:	2101      	movs	r1, #1
 800cd68:	6838      	ldr	r0, [r7, #0]
 800cd6a:	f000 fa87 	bl	800d27c <prvAddCurrentTaskToDelayedList>
}
 800cd6e:	bf00      	nop
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	200026a0 	.word	0x200026a0

0800cd7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10b      	bne.n	800cda6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	617b      	str	r3, [r7, #20]
}
 800cda0:	bf00      	nop
 800cda2:	bf00      	nop
 800cda4:	e7fd      	b.n	800cda2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cda6:	4b0a      	ldr	r3, [pc, #40]	@ (800cdd0 <vTaskPlaceOnEventListRestricted+0x54>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3318      	adds	r3, #24
 800cdac:	4619      	mov	r1, r3
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f7fe fd3f 	bl	800b832 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cdba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdbe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	68b8      	ldr	r0, [r7, #8]
 800cdc4:	f000 fa5a 	bl	800d27c <prvAddCurrentTaskToDelayedList>
	}
 800cdc8:	bf00      	nop
 800cdca:	3718      	adds	r7, #24
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	200026a0 	.word	0x200026a0

0800cdd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d10b      	bne.n	800ce02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	60fb      	str	r3, [r7, #12]
}
 800cdfc:	bf00      	nop
 800cdfe:	bf00      	nop
 800ce00:	e7fd      	b.n	800cdfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	3318      	adds	r3, #24
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fe fd70 	bl	800b8ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce0c:	4b1d      	ldr	r3, [pc, #116]	@ (800ce84 <xTaskRemoveFromEventList+0xb0>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d11d      	bne.n	800ce50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	3304      	adds	r3, #4
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe fd67 	bl	800b8ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce22:	4b19      	ldr	r3, [pc, #100]	@ (800ce88 <xTaskRemoveFromEventList+0xb4>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d903      	bls.n	800ce32 <xTaskRemoveFromEventList+0x5e>
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce2e:	4a16      	ldr	r2, [pc, #88]	@ (800ce88 <xTaskRemoveFromEventList+0xb4>)
 800ce30:	6013      	str	r3, [r2, #0]
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce36:	4613      	mov	r3, r2
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4413      	add	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4a13      	ldr	r2, [pc, #76]	@ (800ce8c <xTaskRemoveFromEventList+0xb8>)
 800ce40:	441a      	add	r2, r3
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	3304      	adds	r3, #4
 800ce46:	4619      	mov	r1, r3
 800ce48:	4610      	mov	r0, r2
 800ce4a:	f7fe fcf2 	bl	800b832 <vListInsertEnd>
 800ce4e:	e005      	b.n	800ce5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	3318      	adds	r3, #24
 800ce54:	4619      	mov	r1, r3
 800ce56:	480e      	ldr	r0, [pc, #56]	@ (800ce90 <xTaskRemoveFromEventList+0xbc>)
 800ce58:	f7fe fceb 	bl	800b832 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce60:	4b0c      	ldr	r3, [pc, #48]	@ (800ce94 <xTaskRemoveFromEventList+0xc0>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d905      	bls.n	800ce76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce98 <xTaskRemoveFromEventList+0xc4>)
 800ce70:	2201      	movs	r2, #1
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	e001      	b.n	800ce7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ce76:	2300      	movs	r3, #0
 800ce78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce7a:	697b      	ldr	r3, [r7, #20]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	20002b9c 	.word	0x20002b9c
 800ce88:	20002b7c 	.word	0x20002b7c
 800ce8c:	200026a4 	.word	0x200026a4
 800ce90:	20002b34 	.word	0x20002b34
 800ce94:	200026a0 	.word	0x200026a0
 800ce98:	20002b88 	.word	0x20002b88

0800ce9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cea4:	4b06      	ldr	r3, [pc, #24]	@ (800cec0 <vTaskInternalSetTimeOutState+0x24>)
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ceac:	4b05      	ldr	r3, [pc, #20]	@ (800cec4 <vTaskInternalSetTimeOutState+0x28>)
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	605a      	str	r2, [r3, #4]
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr
 800cec0:	20002b8c 	.word	0x20002b8c
 800cec4:	20002b78 	.word	0x20002b78

0800cec8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10b      	bne.n	800cef0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ced8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	613b      	str	r3, [r7, #16]
}
 800ceea:	bf00      	nop
 800ceec:	bf00      	nop
 800ceee:	e7fd      	b.n	800ceec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10b      	bne.n	800cf0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	60fb      	str	r3, [r7, #12]
}
 800cf08:	bf00      	nop
 800cf0a:	bf00      	nop
 800cf0c:	e7fd      	b.n	800cf0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cf0e:	f000 fe93 	bl	800dc38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf12:	4b1d      	ldr	r3, [pc, #116]	@ (800cf88 <xTaskCheckForTimeOut+0xc0>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	69ba      	ldr	r2, [r7, #24]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf2a:	d102      	bne.n	800cf32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	61fb      	str	r3, [r7, #28]
 800cf30:	e023      	b.n	800cf7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	4b15      	ldr	r3, [pc, #84]	@ (800cf8c <xTaskCheckForTimeOut+0xc4>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d007      	beq.n	800cf4e <xTaskCheckForTimeOut+0x86>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	69ba      	ldr	r2, [r7, #24]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d302      	bcc.n	800cf4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	61fb      	str	r3, [r7, #28]
 800cf4c:	e015      	b.n	800cf7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	697a      	ldr	r2, [r7, #20]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d20b      	bcs.n	800cf70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	1ad2      	subs	r2, r2, r3
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff ff99 	bl	800ce9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	61fb      	str	r3, [r7, #28]
 800cf6e:	e004      	b.n	800cf7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf76:	2301      	movs	r3, #1
 800cf78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf7a:	f000 fe8f 	bl	800dc9c <vPortExitCritical>

	return xReturn;
 800cf7e:	69fb      	ldr	r3, [r7, #28]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3720      	adds	r7, #32
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	20002b78 	.word	0x20002b78
 800cf8c:	20002b8c 	.word	0x20002b8c

0800cf90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf90:	b480      	push	{r7}
 800cf92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf94:	4b03      	ldr	r3, [pc, #12]	@ (800cfa4 <vTaskMissedYield+0x14>)
 800cf96:	2201      	movs	r2, #1
 800cf98:	601a      	str	r2, [r3, #0]
}
 800cf9a:	bf00      	nop
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	20002b88 	.word	0x20002b88

0800cfa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cfb0:	f000 f852 	bl	800d058 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cfb4:	4b06      	ldr	r3, [pc, #24]	@ (800cfd0 <prvIdleTask+0x28>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d9f9      	bls.n	800cfb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cfbc:	4b05      	ldr	r3, [pc, #20]	@ (800cfd4 <prvIdleTask+0x2c>)
 800cfbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cfcc:	e7f0      	b.n	800cfb0 <prvIdleTask+0x8>
 800cfce:	bf00      	nop
 800cfd0:	200026a4 	.word	0x200026a4
 800cfd4:	e000ed04 	.word	0xe000ed04

0800cfd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfde:	2300      	movs	r3, #0
 800cfe0:	607b      	str	r3, [r7, #4]
 800cfe2:	e00c      	b.n	800cffe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	4413      	add	r3, r2
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	4a12      	ldr	r2, [pc, #72]	@ (800d038 <prvInitialiseTaskLists+0x60>)
 800cff0:	4413      	add	r3, r2
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe fbf0 	bl	800b7d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	3301      	adds	r3, #1
 800cffc:	607b      	str	r3, [r7, #4]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2b37      	cmp	r3, #55	@ 0x37
 800d002:	d9ef      	bls.n	800cfe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d004:	480d      	ldr	r0, [pc, #52]	@ (800d03c <prvInitialiseTaskLists+0x64>)
 800d006:	f7fe fbe7 	bl	800b7d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d00a:	480d      	ldr	r0, [pc, #52]	@ (800d040 <prvInitialiseTaskLists+0x68>)
 800d00c:	f7fe fbe4 	bl	800b7d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d010:	480c      	ldr	r0, [pc, #48]	@ (800d044 <prvInitialiseTaskLists+0x6c>)
 800d012:	f7fe fbe1 	bl	800b7d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d016:	480c      	ldr	r0, [pc, #48]	@ (800d048 <prvInitialiseTaskLists+0x70>)
 800d018:	f7fe fbde 	bl	800b7d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d01c:	480b      	ldr	r0, [pc, #44]	@ (800d04c <prvInitialiseTaskLists+0x74>)
 800d01e:	f7fe fbdb 	bl	800b7d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d022:	4b0b      	ldr	r3, [pc, #44]	@ (800d050 <prvInitialiseTaskLists+0x78>)
 800d024:	4a05      	ldr	r2, [pc, #20]	@ (800d03c <prvInitialiseTaskLists+0x64>)
 800d026:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d028:	4b0a      	ldr	r3, [pc, #40]	@ (800d054 <prvInitialiseTaskLists+0x7c>)
 800d02a:	4a05      	ldr	r2, [pc, #20]	@ (800d040 <prvInitialiseTaskLists+0x68>)
 800d02c:	601a      	str	r2, [r3, #0]
}
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	200026a4 	.word	0x200026a4
 800d03c:	20002b04 	.word	0x20002b04
 800d040:	20002b18 	.word	0x20002b18
 800d044:	20002b34 	.word	0x20002b34
 800d048:	20002b48 	.word	0x20002b48
 800d04c:	20002b60 	.word	0x20002b60
 800d050:	20002b2c 	.word	0x20002b2c
 800d054:	20002b30 	.word	0x20002b30

0800d058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d05e:	e019      	b.n	800d094 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d060:	f000 fdea 	bl	800dc38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d064:	4b10      	ldr	r3, [pc, #64]	@ (800d0a8 <prvCheckTasksWaitingTermination+0x50>)
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3304      	adds	r3, #4
 800d070:	4618      	mov	r0, r3
 800d072:	f7fe fc3b 	bl	800b8ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d076:	4b0d      	ldr	r3, [pc, #52]	@ (800d0ac <prvCheckTasksWaitingTermination+0x54>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	4a0b      	ldr	r2, [pc, #44]	@ (800d0ac <prvCheckTasksWaitingTermination+0x54>)
 800d07e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d080:	4b0b      	ldr	r3, [pc, #44]	@ (800d0b0 <prvCheckTasksWaitingTermination+0x58>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3b01      	subs	r3, #1
 800d086:	4a0a      	ldr	r2, [pc, #40]	@ (800d0b0 <prvCheckTasksWaitingTermination+0x58>)
 800d088:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d08a:	f000 fe07 	bl	800dc9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f810 	bl	800d0b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d094:	4b06      	ldr	r3, [pc, #24]	@ (800d0b0 <prvCheckTasksWaitingTermination+0x58>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1e1      	bne.n	800d060 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d09c:	bf00      	nop
 800d09e:	bf00      	nop
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20002b48 	.word	0x20002b48
 800d0ac:	20002b74 	.word	0x20002b74
 800d0b0:	20002b5c 	.word	0x20002b5c

0800d0b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	3354      	adds	r3, #84	@ 0x54
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f002 fb33 	bl	800f72c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d108      	bne.n	800d0e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f000 ff9f 	bl	800e018 <vPortFree>
				vPortFree( pxTCB );
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 ff9c 	bl	800e018 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d0e0:	e019      	b.n	800d116 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d103      	bne.n	800d0f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 ff93 	bl	800e018 <vPortFree>
	}
 800d0f2:	e010      	b.n	800d116 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d00b      	beq.n	800d116 <prvDeleteTCB+0x62>
	__asm volatile
 800d0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	60fb      	str	r3, [r7, #12]
}
 800d110:	bf00      	nop
 800d112:	bf00      	nop
 800d114:	e7fd      	b.n	800d112 <prvDeleteTCB+0x5e>
	}
 800d116:	bf00      	nop
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
	...

0800d120 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d126:	4b0c      	ldr	r3, [pc, #48]	@ (800d158 <prvResetNextTaskUnblockTime+0x38>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d104      	bne.n	800d13a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d130:	4b0a      	ldr	r3, [pc, #40]	@ (800d15c <prvResetNextTaskUnblockTime+0x3c>)
 800d132:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d136:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d138:	e008      	b.n	800d14c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d13a:	4b07      	ldr	r3, [pc, #28]	@ (800d158 <prvResetNextTaskUnblockTime+0x38>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	4a04      	ldr	r2, [pc, #16]	@ (800d15c <prvResetNextTaskUnblockTime+0x3c>)
 800d14a:	6013      	str	r3, [r2, #0]
}
 800d14c:	bf00      	nop
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	20002b2c 	.word	0x20002b2c
 800d15c:	20002b94 	.word	0x20002b94

0800d160 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d166:	4b0b      	ldr	r3, [pc, #44]	@ (800d194 <xTaskGetSchedulerState+0x34>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d102      	bne.n	800d174 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d16e:	2301      	movs	r3, #1
 800d170:	607b      	str	r3, [r7, #4]
 800d172:	e008      	b.n	800d186 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d174:	4b08      	ldr	r3, [pc, #32]	@ (800d198 <xTaskGetSchedulerState+0x38>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d102      	bne.n	800d182 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d17c:	2302      	movs	r3, #2
 800d17e:	607b      	str	r3, [r7, #4]
 800d180:	e001      	b.n	800d186 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d182:	2300      	movs	r3, #0
 800d184:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d186:	687b      	ldr	r3, [r7, #4]
	}
 800d188:	4618      	mov	r0, r3
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr
 800d194:	20002b80 	.word	0x20002b80
 800d198:	20002b9c 	.word	0x20002b9c

0800d19c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b086      	sub	sp, #24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d058      	beq.n	800d264 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d1b2:	4b2f      	ldr	r3, [pc, #188]	@ (800d270 <xTaskPriorityDisinherit+0xd4>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d00b      	beq.n	800d1d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	60fb      	str	r3, [r7, #12]
}
 800d1ce:	bf00      	nop
 800d1d0:	bf00      	nop
 800d1d2:	e7fd      	b.n	800d1d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10b      	bne.n	800d1f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e0:	f383 8811 	msr	BASEPRI, r3
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	60bb      	str	r3, [r7, #8]
}
 800d1ee:	bf00      	nop
 800d1f0:	bf00      	nop
 800d1f2:	e7fd      	b.n	800d1f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1f8:	1e5a      	subs	r2, r3, #1
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d206:	429a      	cmp	r2, r3
 800d208:	d02c      	beq.n	800d264 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d128      	bne.n	800d264 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	3304      	adds	r3, #4
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe fb68 	bl	800b8ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d228:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d234:	4b0f      	ldr	r3, [pc, #60]	@ (800d274 <xTaskPriorityDisinherit+0xd8>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d903      	bls.n	800d244 <xTaskPriorityDisinherit+0xa8>
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d240:	4a0c      	ldr	r2, [pc, #48]	@ (800d274 <xTaskPriorityDisinherit+0xd8>)
 800d242:	6013      	str	r3, [r2, #0]
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d248:	4613      	mov	r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	4413      	add	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4a09      	ldr	r2, [pc, #36]	@ (800d278 <xTaskPriorityDisinherit+0xdc>)
 800d252:	441a      	add	r2, r3
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	3304      	adds	r3, #4
 800d258:	4619      	mov	r1, r3
 800d25a:	4610      	mov	r0, r2
 800d25c:	f7fe fae9 	bl	800b832 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d260:	2301      	movs	r3, #1
 800d262:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d264:	697b      	ldr	r3, [r7, #20]
	}
 800d266:	4618      	mov	r0, r3
 800d268:	3718      	adds	r7, #24
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	200026a0 	.word	0x200026a0
 800d274:	20002b7c 	.word	0x20002b7c
 800d278:	200026a4 	.word	0x200026a4

0800d27c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d286:	4b21      	ldr	r3, [pc, #132]	@ (800d30c <prvAddCurrentTaskToDelayedList+0x90>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d28c:	4b20      	ldr	r3, [pc, #128]	@ (800d310 <prvAddCurrentTaskToDelayedList+0x94>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3304      	adds	r3, #4
 800d292:	4618      	mov	r0, r3
 800d294:	f7fe fb2a 	bl	800b8ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d29e:	d10a      	bne.n	800d2b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d007      	beq.n	800d2b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2a6:	4b1a      	ldr	r3, [pc, #104]	@ (800d310 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	3304      	adds	r3, #4
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4819      	ldr	r0, [pc, #100]	@ (800d314 <prvAddCurrentTaskToDelayedList+0x98>)
 800d2b0:	f7fe fabf 	bl	800b832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d2b4:	e026      	b.n	800d304 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d2be:	4b14      	ldr	r3, [pc, #80]	@ (800d310 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d2c6:	68ba      	ldr	r2, [r7, #8]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d209      	bcs.n	800d2e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2ce:	4b12      	ldr	r3, [pc, #72]	@ (800d318 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d310 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	3304      	adds	r3, #4
 800d2d8:	4619      	mov	r1, r3
 800d2da:	4610      	mov	r0, r2
 800d2dc:	f7fe facd 	bl	800b87a <vListInsert>
}
 800d2e0:	e010      	b.n	800d304 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2e2:	4b0e      	ldr	r3, [pc, #56]	@ (800d31c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	4b0a      	ldr	r3, [pc, #40]	@ (800d310 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	4610      	mov	r0, r2
 800d2f0:	f7fe fac3 	bl	800b87a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d2f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d320 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d202      	bcs.n	800d304 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d2fe:	4a08      	ldr	r2, [pc, #32]	@ (800d320 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	6013      	str	r3, [r2, #0]
}
 800d304:	bf00      	nop
 800d306:	3710      	adds	r7, #16
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	20002b78 	.word	0x20002b78
 800d310:	200026a0 	.word	0x200026a0
 800d314:	20002b60 	.word	0x20002b60
 800d318:	20002b30 	.word	0x20002b30
 800d31c:	20002b2c 	.word	0x20002b2c
 800d320:	20002b94 	.word	0x20002b94

0800d324 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b08a      	sub	sp, #40	@ 0x28
 800d328:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d32e:	f000 fb13 	bl	800d958 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d332:	4b1d      	ldr	r3, [pc, #116]	@ (800d3a8 <xTimerCreateTimerTask+0x84>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d021      	beq.n	800d37e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d33a:	2300      	movs	r3, #0
 800d33c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d33e:	2300      	movs	r3, #0
 800d340:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d342:	1d3a      	adds	r2, r7, #4
 800d344:	f107 0108 	add.w	r1, r7, #8
 800d348:	f107 030c 	add.w	r3, r7, #12
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fe fa29 	bl	800b7a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d352:	6879      	ldr	r1, [r7, #4]
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	9202      	str	r2, [sp, #8]
 800d35a:	9301      	str	r3, [sp, #4]
 800d35c:	2302      	movs	r3, #2
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	2300      	movs	r3, #0
 800d362:	460a      	mov	r2, r1
 800d364:	4911      	ldr	r1, [pc, #68]	@ (800d3ac <xTimerCreateTimerTask+0x88>)
 800d366:	4812      	ldr	r0, [pc, #72]	@ (800d3b0 <xTimerCreateTimerTask+0x8c>)
 800d368:	f7ff f8a2 	bl	800c4b0 <xTaskCreateStatic>
 800d36c:	4603      	mov	r3, r0
 800d36e:	4a11      	ldr	r2, [pc, #68]	@ (800d3b4 <xTimerCreateTimerTask+0x90>)
 800d370:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d372:	4b10      	ldr	r3, [pc, #64]	@ (800d3b4 <xTimerCreateTimerTask+0x90>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d37a:	2301      	movs	r3, #1
 800d37c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10b      	bne.n	800d39c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	613b      	str	r3, [r7, #16]
}
 800d396:	bf00      	nop
 800d398:	bf00      	nop
 800d39a:	e7fd      	b.n	800d398 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d39c:	697b      	ldr	r3, [r7, #20]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3718      	adds	r7, #24
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20002bd0 	.word	0x20002bd0
 800d3ac:	08011ca0 	.word	0x08011ca0
 800d3b0:	0800d4f1 	.word	0x0800d4f1
 800d3b4:	20002bd4 	.word	0x20002bd4

0800d3b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08a      	sub	sp, #40	@ 0x28
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
 800d3c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d10b      	bne.n	800d3e8 <xTimerGenericCommand+0x30>
	__asm volatile
 800d3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	623b      	str	r3, [r7, #32]
}
 800d3e2:	bf00      	nop
 800d3e4:	bf00      	nop
 800d3e6:	e7fd      	b.n	800d3e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d3e8:	4b19      	ldr	r3, [pc, #100]	@ (800d450 <xTimerGenericCommand+0x98>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d02a      	beq.n	800d446 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2b05      	cmp	r3, #5
 800d400:	dc18      	bgt.n	800d434 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d402:	f7ff fead 	bl	800d160 <xTaskGetSchedulerState>
 800d406:	4603      	mov	r3, r0
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d109      	bne.n	800d420 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d40c:	4b10      	ldr	r3, [pc, #64]	@ (800d450 <xTimerGenericCommand+0x98>)
 800d40e:	6818      	ldr	r0, [r3, #0]
 800d410:	f107 0110 	add.w	r1, r7, #16
 800d414:	2300      	movs	r3, #0
 800d416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d418:	f7fe fbd8 	bl	800bbcc <xQueueGenericSend>
 800d41c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d41e:	e012      	b.n	800d446 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d420:	4b0b      	ldr	r3, [pc, #44]	@ (800d450 <xTimerGenericCommand+0x98>)
 800d422:	6818      	ldr	r0, [r3, #0]
 800d424:	f107 0110 	add.w	r1, r7, #16
 800d428:	2300      	movs	r3, #0
 800d42a:	2200      	movs	r2, #0
 800d42c:	f7fe fbce 	bl	800bbcc <xQueueGenericSend>
 800d430:	6278      	str	r0, [r7, #36]	@ 0x24
 800d432:	e008      	b.n	800d446 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d434:	4b06      	ldr	r3, [pc, #24]	@ (800d450 <xTimerGenericCommand+0x98>)
 800d436:	6818      	ldr	r0, [r3, #0]
 800d438:	f107 0110 	add.w	r1, r7, #16
 800d43c:	2300      	movs	r3, #0
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	f7fe fcc6 	bl	800bdd0 <xQueueGenericSendFromISR>
 800d444:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3728      	adds	r7, #40	@ 0x28
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	20002bd0 	.word	0x20002bd0

0800d454 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b088      	sub	sp, #32
 800d458:	af02      	add	r7, sp, #8
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d45e:	4b23      	ldr	r3, [pc, #140]	@ (800d4ec <prvProcessExpiredTimer+0x98>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	3304      	adds	r3, #4
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fe fa3d 	bl	800b8ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d478:	f003 0304 	and.w	r3, r3, #4
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d023      	beq.n	800d4c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	699a      	ldr	r2, [r3, #24]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	18d1      	adds	r1, r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	683a      	ldr	r2, [r7, #0]
 800d48c:	6978      	ldr	r0, [r7, #20]
 800d48e:	f000 f8d5 	bl	800d63c <prvInsertTimerInActiveList>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d020      	beq.n	800d4da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d498:	2300      	movs	r3, #0
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	2300      	movs	r3, #0
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	6978      	ldr	r0, [r7, #20]
 800d4a4:	f7ff ff88 	bl	800d3b8 <xTimerGenericCommand>
 800d4a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d114      	bne.n	800d4da <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	60fb      	str	r3, [r7, #12]
}
 800d4c2:	bf00      	nop
 800d4c4:	bf00      	nop
 800d4c6:	e7fd      	b.n	800d4c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4ce:	f023 0301 	bic.w	r3, r3, #1
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	6a1b      	ldr	r3, [r3, #32]
 800d4de:	6978      	ldr	r0, [r7, #20]
 800d4e0:	4798      	blx	r3
}
 800d4e2:	bf00      	nop
 800d4e4:	3718      	adds	r7, #24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	20002bc8 	.word	0x20002bc8

0800d4f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d4f8:	f107 0308 	add.w	r3, r7, #8
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 f859 	bl	800d5b4 <prvGetNextExpireTime>
 800d502:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	4619      	mov	r1, r3
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f000 f805 	bl	800d518 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d50e:	f000 f8d7 	bl	800d6c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d512:	bf00      	nop
 800d514:	e7f0      	b.n	800d4f8 <prvTimerTask+0x8>
	...

0800d518 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d522:	f7ff fa29 	bl	800c978 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d526:	f107 0308 	add.w	r3, r7, #8
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 f866 	bl	800d5fc <prvSampleTimeNow>
 800d530:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d130      	bne.n	800d59a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10a      	bne.n	800d554 <prvProcessTimerOrBlockTask+0x3c>
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	429a      	cmp	r2, r3
 800d544:	d806      	bhi.n	800d554 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d546:	f7ff fa25 	bl	800c994 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d54a:	68f9      	ldr	r1, [r7, #12]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f7ff ff81 	bl	800d454 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d552:	e024      	b.n	800d59e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d008      	beq.n	800d56c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d55a:	4b13      	ldr	r3, [pc, #76]	@ (800d5a8 <prvProcessTimerOrBlockTask+0x90>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <prvProcessTimerOrBlockTask+0x50>
 800d564:	2301      	movs	r3, #1
 800d566:	e000      	b.n	800d56a <prvProcessTimerOrBlockTask+0x52>
 800d568:	2300      	movs	r3, #0
 800d56a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d56c:	4b0f      	ldr	r3, [pc, #60]	@ (800d5ac <prvProcessTimerOrBlockTask+0x94>)
 800d56e:	6818      	ldr	r0, [r3, #0]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	4619      	mov	r1, r3
 800d57a:	f7fe ff65 	bl	800c448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d57e:	f7ff fa09 	bl	800c994 <xTaskResumeAll>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d10a      	bne.n	800d59e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d588:	4b09      	ldr	r3, [pc, #36]	@ (800d5b0 <prvProcessTimerOrBlockTask+0x98>)
 800d58a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	f3bf 8f6f 	isb	sy
}
 800d598:	e001      	b.n	800d59e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d59a:	f7ff f9fb 	bl	800c994 <xTaskResumeAll>
}
 800d59e:	bf00      	nop
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20002bcc 	.word	0x20002bcc
 800d5ac:	20002bd0 	.word	0x20002bd0
 800d5b0:	e000ed04 	.word	0xe000ed04

0800d5b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d5bc:	4b0e      	ldr	r3, [pc, #56]	@ (800d5f8 <prvGetNextExpireTime+0x44>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d101      	bne.n	800d5ca <prvGetNextExpireTime+0x16>
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	e000      	b.n	800d5cc <prvGetNextExpireTime+0x18>
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d105      	bne.n	800d5e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5d8:	4b07      	ldr	r3, [pc, #28]	@ (800d5f8 <prvGetNextExpireTime+0x44>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	60fb      	str	r3, [r7, #12]
 800d5e2:	e001      	b.n	800d5e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3714      	adds	r7, #20
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	20002bc8 	.word	0x20002bc8

0800d5fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d604:	f7ff fa64 	bl	800cad0 <xTaskGetTickCount>
 800d608:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d60a:	4b0b      	ldr	r3, [pc, #44]	@ (800d638 <prvSampleTimeNow+0x3c>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	429a      	cmp	r2, r3
 800d612:	d205      	bcs.n	800d620 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d614:	f000 f93a 	bl	800d88c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	e002      	b.n	800d626 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d626:	4a04      	ldr	r2, [pc, #16]	@ (800d638 <prvSampleTimeNow+0x3c>)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d62c:	68fb      	ldr	r3, [r7, #12]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	20002bd8 	.word	0x20002bd8

0800d63c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b086      	sub	sp, #24
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
 800d648:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d64a:	2300      	movs	r3, #0
 800d64c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d812      	bhi.n	800d688 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	1ad2      	subs	r2, r2, r3
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d302      	bcc.n	800d676 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d670:	2301      	movs	r3, #1
 800d672:	617b      	str	r3, [r7, #20]
 800d674:	e01b      	b.n	800d6ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d676:	4b10      	ldr	r3, [pc, #64]	@ (800d6b8 <prvInsertTimerInActiveList+0x7c>)
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	3304      	adds	r3, #4
 800d67e:	4619      	mov	r1, r3
 800d680:	4610      	mov	r0, r2
 800d682:	f7fe f8fa 	bl	800b87a <vListInsert>
 800d686:	e012      	b.n	800d6ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d206      	bcs.n	800d69e <prvInsertTimerInActiveList+0x62>
 800d690:	68ba      	ldr	r2, [r7, #8]
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	429a      	cmp	r2, r3
 800d696:	d302      	bcc.n	800d69e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d698:	2301      	movs	r3, #1
 800d69a:	617b      	str	r3, [r7, #20]
 800d69c:	e007      	b.n	800d6ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d69e:	4b07      	ldr	r3, [pc, #28]	@ (800d6bc <prvInsertTimerInActiveList+0x80>)
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	3304      	adds	r3, #4
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	f7fe f8e6 	bl	800b87a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d6ae:	697b      	ldr	r3, [r7, #20]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3718      	adds	r7, #24
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	20002bcc 	.word	0x20002bcc
 800d6bc:	20002bc8 	.word	0x20002bc8

0800d6c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08e      	sub	sp, #56	@ 0x38
 800d6c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6c6:	e0ce      	b.n	800d866 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	da19      	bge.n	800d702 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d6ce:	1d3b      	adds	r3, r7, #4
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d10b      	bne.n	800d6f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6de:	f383 8811 	msr	BASEPRI, r3
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	61fb      	str	r3, [r7, #28]
}
 800d6ec:	bf00      	nop
 800d6ee:	bf00      	nop
 800d6f0:	e7fd      	b.n	800d6ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6f8:	6850      	ldr	r0, [r2, #4]
 800d6fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6fc:	6892      	ldr	r2, [r2, #8]
 800d6fe:	4611      	mov	r1, r2
 800d700:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	f2c0 80ae 	blt.w	800d866 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d710:	695b      	ldr	r3, [r3, #20]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d004      	beq.n	800d720 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d718:	3304      	adds	r3, #4
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fe f8e6 	bl	800b8ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d720:	463b      	mov	r3, r7
 800d722:	4618      	mov	r0, r3
 800d724:	f7ff ff6a 	bl	800d5fc <prvSampleTimeNow>
 800d728:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b09      	cmp	r3, #9
 800d72e:	f200 8097 	bhi.w	800d860 <prvProcessReceivedCommands+0x1a0>
 800d732:	a201      	add	r2, pc, #4	@ (adr r2, 800d738 <prvProcessReceivedCommands+0x78>)
 800d734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d738:	0800d761 	.word	0x0800d761
 800d73c:	0800d761 	.word	0x0800d761
 800d740:	0800d761 	.word	0x0800d761
 800d744:	0800d7d7 	.word	0x0800d7d7
 800d748:	0800d7eb 	.word	0x0800d7eb
 800d74c:	0800d837 	.word	0x0800d837
 800d750:	0800d761 	.word	0x0800d761
 800d754:	0800d761 	.word	0x0800d761
 800d758:	0800d7d7 	.word	0x0800d7d7
 800d75c:	0800d7eb 	.word	0x0800d7eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d766:	f043 0301 	orr.w	r3, r3, #1
 800d76a:	b2da      	uxtb	r2, r3
 800d76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	18d1      	adds	r1, r2, r3
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d77e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d780:	f7ff ff5c 	bl	800d63c <prvInsertTimerInActiveList>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d06c      	beq.n	800d864 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78c:	6a1b      	ldr	r3, [r3, #32]
 800d78e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d790:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d798:	f003 0304 	and.w	r3, r3, #4
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d061      	beq.n	800d864 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d7a0:	68ba      	ldr	r2, [r7, #8]
 800d7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a4:	699b      	ldr	r3, [r3, #24]
 800d7a6:	441a      	add	r2, r3
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7b2:	f7ff fe01 	bl	800d3b8 <xTimerGenericCommand>
 800d7b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d7b8:	6a3b      	ldr	r3, [r7, #32]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d152      	bne.n	800d864 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	61bb      	str	r3, [r7, #24]
}
 800d7d0:	bf00      	nop
 800d7d2:	bf00      	nop
 800d7d4:	e7fd      	b.n	800d7d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d7dc:	f023 0301 	bic.w	r3, r3, #1
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d7e8:	e03d      	b.n	800d866 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d7f0:	f043 0301 	orr.w	r3, r3, #1
 800d7f4:	b2da      	uxtb	r2, r3
 800d7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d800:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10b      	bne.n	800d822 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d80e:	f383 8811 	msr	BASEPRI, r3
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	f3bf 8f4f 	dsb	sy
 800d81a:	617b      	str	r3, [r7, #20]
}
 800d81c:	bf00      	nop
 800d81e:	bf00      	nop
 800d820:	e7fd      	b.n	800d81e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d824:	699a      	ldr	r2, [r3, #24]
 800d826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d828:	18d1      	adds	r1, r2, r3
 800d82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d82e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d830:	f7ff ff04 	bl	800d63c <prvInsertTimerInActiveList>
					break;
 800d834:	e017      	b.n	800d866 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d83c:	f003 0302 	and.w	r3, r3, #2
 800d840:	2b00      	cmp	r3, #0
 800d842:	d103      	bne.n	800d84c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d846:	f000 fbe7 	bl	800e018 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d84a:	e00c      	b.n	800d866 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d84e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d852:	f023 0301 	bic.w	r3, r3, #1
 800d856:	b2da      	uxtb	r2, r3
 800d858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d85e:	e002      	b.n	800d866 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d860:	bf00      	nop
 800d862:	e000      	b.n	800d866 <prvProcessReceivedCommands+0x1a6>
					break;
 800d864:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d866:	4b08      	ldr	r3, [pc, #32]	@ (800d888 <prvProcessReceivedCommands+0x1c8>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	1d39      	adds	r1, r7, #4
 800d86c:	2200      	movs	r2, #0
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe fb4c 	bl	800bf0c <xQueueReceive>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	f47f af26 	bne.w	800d6c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d87c:	bf00      	nop
 800d87e:	bf00      	nop
 800d880:	3730      	adds	r7, #48	@ 0x30
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	20002bd0 	.word	0x20002bd0

0800d88c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b088      	sub	sp, #32
 800d890:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d892:	e049      	b.n	800d928 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d894:	4b2e      	ldr	r3, [pc, #184]	@ (800d950 <prvSwitchTimerLists+0xc4>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d89e:	4b2c      	ldr	r3, [pc, #176]	@ (800d950 <prvSwitchTimerLists+0xc4>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fe f81d 	bl	800b8ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	6a1b      	ldr	r3, [r3, #32]
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8c0:	f003 0304 	and.w	r3, r3, #4
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d02f      	beq.n	800d928 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	699b      	ldr	r3, [r3, #24]
 800d8cc:	693a      	ldr	r2, [r7, #16]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d90e      	bls.n	800d8f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	68ba      	ldr	r2, [r7, #8]
 800d8de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	68fa      	ldr	r2, [r7, #12]
 800d8e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d8e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d950 <prvSwitchTimerLists+0xc4>)
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	f7fd ffc2 	bl	800b87a <vListInsert>
 800d8f6:	e017      	b.n	800d928 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	693a      	ldr	r2, [r7, #16]
 800d900:	2100      	movs	r1, #0
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f7ff fd58 	bl	800d3b8 <xTimerGenericCommand>
 800d908:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10b      	bne.n	800d928 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	603b      	str	r3, [r7, #0]
}
 800d922:	bf00      	nop
 800d924:	bf00      	nop
 800d926:	e7fd      	b.n	800d924 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d928:	4b09      	ldr	r3, [pc, #36]	@ (800d950 <prvSwitchTimerLists+0xc4>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1b0      	bne.n	800d894 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d932:	4b07      	ldr	r3, [pc, #28]	@ (800d950 <prvSwitchTimerLists+0xc4>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d938:	4b06      	ldr	r3, [pc, #24]	@ (800d954 <prvSwitchTimerLists+0xc8>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a04      	ldr	r2, [pc, #16]	@ (800d950 <prvSwitchTimerLists+0xc4>)
 800d93e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d940:	4a04      	ldr	r2, [pc, #16]	@ (800d954 <prvSwitchTimerLists+0xc8>)
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	6013      	str	r3, [r2, #0]
}
 800d946:	bf00      	nop
 800d948:	3718      	adds	r7, #24
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	20002bc8 	.word	0x20002bc8
 800d954:	20002bcc 	.word	0x20002bcc

0800d958 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d95e:	f000 f96b 	bl	800dc38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d962:	4b15      	ldr	r3, [pc, #84]	@ (800d9b8 <prvCheckForValidListAndQueue+0x60>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d120      	bne.n	800d9ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d96a:	4814      	ldr	r0, [pc, #80]	@ (800d9bc <prvCheckForValidListAndQueue+0x64>)
 800d96c:	f7fd ff34 	bl	800b7d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d970:	4813      	ldr	r0, [pc, #76]	@ (800d9c0 <prvCheckForValidListAndQueue+0x68>)
 800d972:	f7fd ff31 	bl	800b7d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d976:	4b13      	ldr	r3, [pc, #76]	@ (800d9c4 <prvCheckForValidListAndQueue+0x6c>)
 800d978:	4a10      	ldr	r2, [pc, #64]	@ (800d9bc <prvCheckForValidListAndQueue+0x64>)
 800d97a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d97c:	4b12      	ldr	r3, [pc, #72]	@ (800d9c8 <prvCheckForValidListAndQueue+0x70>)
 800d97e:	4a10      	ldr	r2, [pc, #64]	@ (800d9c0 <prvCheckForValidListAndQueue+0x68>)
 800d980:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d982:	2300      	movs	r3, #0
 800d984:	9300      	str	r3, [sp, #0]
 800d986:	4b11      	ldr	r3, [pc, #68]	@ (800d9cc <prvCheckForValidListAndQueue+0x74>)
 800d988:	4a11      	ldr	r2, [pc, #68]	@ (800d9d0 <prvCheckForValidListAndQueue+0x78>)
 800d98a:	2110      	movs	r1, #16
 800d98c:	200a      	movs	r0, #10
 800d98e:	f7fe f841 	bl	800ba14 <xQueueGenericCreateStatic>
 800d992:	4603      	mov	r3, r0
 800d994:	4a08      	ldr	r2, [pc, #32]	@ (800d9b8 <prvCheckForValidListAndQueue+0x60>)
 800d996:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d998:	4b07      	ldr	r3, [pc, #28]	@ (800d9b8 <prvCheckForValidListAndQueue+0x60>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d005      	beq.n	800d9ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d9a0:	4b05      	ldr	r3, [pc, #20]	@ (800d9b8 <prvCheckForValidListAndQueue+0x60>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	490b      	ldr	r1, [pc, #44]	@ (800d9d4 <prvCheckForValidListAndQueue+0x7c>)
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fd24 	bl	800c3f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9ac:	f000 f976 	bl	800dc9c <vPortExitCritical>
}
 800d9b0:	bf00      	nop
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	20002bd0 	.word	0x20002bd0
 800d9bc:	20002ba0 	.word	0x20002ba0
 800d9c0:	20002bb4 	.word	0x20002bb4
 800d9c4:	20002bc8 	.word	0x20002bc8
 800d9c8:	20002bcc 	.word	0x20002bcc
 800d9cc:	20002c7c 	.word	0x20002c7c
 800d9d0:	20002bdc 	.word	0x20002bdc
 800d9d4:	08011ca8 	.word	0x08011ca8

0800d9d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	3b04      	subs	r3, #4
 800d9e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d9f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	3b04      	subs	r3, #4
 800d9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	f023 0201 	bic.w	r2, r3, #1
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	3b04      	subs	r3, #4
 800da06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800da08:	4a0c      	ldr	r2, [pc, #48]	@ (800da3c <pxPortInitialiseStack+0x64>)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	3b14      	subs	r3, #20
 800da12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	3b04      	subs	r3, #4
 800da1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f06f 0202 	mvn.w	r2, #2
 800da26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	3b20      	subs	r3, #32
 800da2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800da2e:	68fb      	ldr	r3, [r7, #12]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3714      	adds	r7, #20
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr
 800da3c:	0800da41 	.word	0x0800da41

0800da40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800da46:	2300      	movs	r3, #0
 800da48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800da4a:	4b13      	ldr	r3, [pc, #76]	@ (800da98 <prvTaskExitError+0x58>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da52:	d00b      	beq.n	800da6c <prvTaskExitError+0x2c>
	__asm volatile
 800da54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da58:	f383 8811 	msr	BASEPRI, r3
 800da5c:	f3bf 8f6f 	isb	sy
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	60fb      	str	r3, [r7, #12]
}
 800da66:	bf00      	nop
 800da68:	bf00      	nop
 800da6a:	e7fd      	b.n	800da68 <prvTaskExitError+0x28>
	__asm volatile
 800da6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da70:	f383 8811 	msr	BASEPRI, r3
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	60bb      	str	r3, [r7, #8]
}
 800da7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da80:	bf00      	nop
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d0fc      	beq.n	800da82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800da88:	bf00      	nop
 800da8a:	bf00      	nop
 800da8c:	3714      	adds	r7, #20
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	2000011c 	.word	0x2000011c
 800da9c:	00000000 	.word	0x00000000

0800daa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800daa0:	4b07      	ldr	r3, [pc, #28]	@ (800dac0 <pxCurrentTCBConst2>)
 800daa2:	6819      	ldr	r1, [r3, #0]
 800daa4:	6808      	ldr	r0, [r1, #0]
 800daa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daaa:	f380 8809 	msr	PSP, r0
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f04f 0000 	mov.w	r0, #0
 800dab6:	f380 8811 	msr	BASEPRI, r0
 800daba:	4770      	bx	lr
 800dabc:	f3af 8000 	nop.w

0800dac0 <pxCurrentTCBConst2>:
 800dac0:	200026a0 	.word	0x200026a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dac4:	bf00      	nop
 800dac6:	bf00      	nop

0800dac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dac8:	4808      	ldr	r0, [pc, #32]	@ (800daec <prvPortStartFirstTask+0x24>)
 800daca:	6800      	ldr	r0, [r0, #0]
 800dacc:	6800      	ldr	r0, [r0, #0]
 800dace:	f380 8808 	msr	MSP, r0
 800dad2:	f04f 0000 	mov.w	r0, #0
 800dad6:	f380 8814 	msr	CONTROL, r0
 800dada:	b662      	cpsie	i
 800dadc:	b661      	cpsie	f
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	df00      	svc	0
 800dae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800daea:	bf00      	nop
 800daec:	e000ed08 	.word	0xe000ed08

0800daf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800daf6:	4b47      	ldr	r3, [pc, #284]	@ (800dc14 <xPortStartScheduler+0x124>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a47      	ldr	r2, [pc, #284]	@ (800dc18 <xPortStartScheduler+0x128>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d10b      	bne.n	800db18 <xPortStartScheduler+0x28>
	__asm volatile
 800db00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db04:	f383 8811 	msr	BASEPRI, r3
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	613b      	str	r3, [r7, #16]
}
 800db12:	bf00      	nop
 800db14:	bf00      	nop
 800db16:	e7fd      	b.n	800db14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800db18:	4b3e      	ldr	r3, [pc, #248]	@ (800dc14 <xPortStartScheduler+0x124>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a3f      	ldr	r2, [pc, #252]	@ (800dc1c <xPortStartScheduler+0x12c>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d10b      	bne.n	800db3a <xPortStartScheduler+0x4a>
	__asm volatile
 800db22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	60fb      	str	r3, [r7, #12]
}
 800db34:	bf00      	nop
 800db36:	bf00      	nop
 800db38:	e7fd      	b.n	800db36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800db3a:	4b39      	ldr	r3, [pc, #228]	@ (800dc20 <xPortStartScheduler+0x130>)
 800db3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	b2db      	uxtb	r3, r3
 800db44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	22ff      	movs	r2, #255	@ 0xff
 800db4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	b2db      	uxtb	r3, r3
 800db52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800db54:	78fb      	ldrb	r3, [r7, #3]
 800db56:	b2db      	uxtb	r3, r3
 800db58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	4b31      	ldr	r3, [pc, #196]	@ (800dc24 <xPortStartScheduler+0x134>)
 800db60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800db62:	4b31      	ldr	r3, [pc, #196]	@ (800dc28 <xPortStartScheduler+0x138>)
 800db64:	2207      	movs	r2, #7
 800db66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db68:	e009      	b.n	800db7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800db6a:	4b2f      	ldr	r3, [pc, #188]	@ (800dc28 <xPortStartScheduler+0x138>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	3b01      	subs	r3, #1
 800db70:	4a2d      	ldr	r2, [pc, #180]	@ (800dc28 <xPortStartScheduler+0x138>)
 800db72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db74:	78fb      	ldrb	r3, [r7, #3]
 800db76:	b2db      	uxtb	r3, r3
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db7e:	78fb      	ldrb	r3, [r7, #3]
 800db80:	b2db      	uxtb	r3, r3
 800db82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db86:	2b80      	cmp	r3, #128	@ 0x80
 800db88:	d0ef      	beq.n	800db6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800db8a:	4b27      	ldr	r3, [pc, #156]	@ (800dc28 <xPortStartScheduler+0x138>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f1c3 0307 	rsb	r3, r3, #7
 800db92:	2b04      	cmp	r3, #4
 800db94:	d00b      	beq.n	800dbae <xPortStartScheduler+0xbe>
	__asm volatile
 800db96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	60bb      	str	r3, [r7, #8]
}
 800dba8:	bf00      	nop
 800dbaa:	bf00      	nop
 800dbac:	e7fd      	b.n	800dbaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dbae:	4b1e      	ldr	r3, [pc, #120]	@ (800dc28 <xPortStartScheduler+0x138>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	021b      	lsls	r3, r3, #8
 800dbb4:	4a1c      	ldr	r2, [pc, #112]	@ (800dc28 <xPortStartScheduler+0x138>)
 800dbb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dbb8:	4b1b      	ldr	r3, [pc, #108]	@ (800dc28 <xPortStartScheduler+0x138>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dbc0:	4a19      	ldr	r2, [pc, #100]	@ (800dc28 <xPortStartScheduler+0x138>)
 800dbc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dbcc:	4b17      	ldr	r3, [pc, #92]	@ (800dc2c <xPortStartScheduler+0x13c>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a16      	ldr	r2, [pc, #88]	@ (800dc2c <xPortStartScheduler+0x13c>)
 800dbd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dbd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dbd8:	4b14      	ldr	r3, [pc, #80]	@ (800dc2c <xPortStartScheduler+0x13c>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a13      	ldr	r2, [pc, #76]	@ (800dc2c <xPortStartScheduler+0x13c>)
 800dbde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dbe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dbe4:	f000 f8da 	bl	800dd9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dbe8:	4b11      	ldr	r3, [pc, #68]	@ (800dc30 <xPortStartScheduler+0x140>)
 800dbea:	2200      	movs	r2, #0
 800dbec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dbee:	f000 f8f9 	bl	800dde4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dbf2:	4b10      	ldr	r3, [pc, #64]	@ (800dc34 <xPortStartScheduler+0x144>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a0f      	ldr	r2, [pc, #60]	@ (800dc34 <xPortStartScheduler+0x144>)
 800dbf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dbfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dbfe:	f7ff ff63 	bl	800dac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dc02:	f7ff f82f 	bl	800cc64 <vTaskSwitchContext>
	prvTaskExitError();
 800dc06:	f7ff ff1b 	bl	800da40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dc0a:	2300      	movs	r3, #0
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	e000ed00 	.word	0xe000ed00
 800dc18:	410fc271 	.word	0x410fc271
 800dc1c:	410fc270 	.word	0x410fc270
 800dc20:	e000e400 	.word	0xe000e400
 800dc24:	20002ccc 	.word	0x20002ccc
 800dc28:	20002cd0 	.word	0x20002cd0
 800dc2c:	e000ed20 	.word	0xe000ed20
 800dc30:	2000011c 	.word	0x2000011c
 800dc34:	e000ef34 	.word	0xe000ef34

0800dc38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
 800dc4e:	607b      	str	r3, [r7, #4]
}
 800dc50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dc52:	4b10      	ldr	r3, [pc, #64]	@ (800dc94 <vPortEnterCritical+0x5c>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	3301      	adds	r3, #1
 800dc58:	4a0e      	ldr	r2, [pc, #56]	@ (800dc94 <vPortEnterCritical+0x5c>)
 800dc5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dc5c:	4b0d      	ldr	r3, [pc, #52]	@ (800dc94 <vPortEnterCritical+0x5c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d110      	bne.n	800dc86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dc64:	4b0c      	ldr	r3, [pc, #48]	@ (800dc98 <vPortEnterCritical+0x60>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d00b      	beq.n	800dc86 <vPortEnterCritical+0x4e>
	__asm volatile
 800dc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	603b      	str	r3, [r7, #0]
}
 800dc80:	bf00      	nop
 800dc82:	bf00      	nop
 800dc84:	e7fd      	b.n	800dc82 <vPortEnterCritical+0x4a>
	}
}
 800dc86:	bf00      	nop
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	2000011c 	.word	0x2000011c
 800dc98:	e000ed04 	.word	0xe000ed04

0800dc9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dca2:	4b12      	ldr	r3, [pc, #72]	@ (800dcec <vPortExitCritical+0x50>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d10b      	bne.n	800dcc2 <vPortExitCritical+0x26>
	__asm volatile
 800dcaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcae:	f383 8811 	msr	BASEPRI, r3
 800dcb2:	f3bf 8f6f 	isb	sy
 800dcb6:	f3bf 8f4f 	dsb	sy
 800dcba:	607b      	str	r3, [r7, #4]
}
 800dcbc:	bf00      	nop
 800dcbe:	bf00      	nop
 800dcc0:	e7fd      	b.n	800dcbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dcc2:	4b0a      	ldr	r3, [pc, #40]	@ (800dcec <vPortExitCritical+0x50>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	4a08      	ldr	r2, [pc, #32]	@ (800dcec <vPortExitCritical+0x50>)
 800dcca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dccc:	4b07      	ldr	r3, [pc, #28]	@ (800dcec <vPortExitCritical+0x50>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d105      	bne.n	800dce0 <vPortExitCritical+0x44>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	f383 8811 	msr	BASEPRI, r3
}
 800dcde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr
 800dcec:	2000011c 	.word	0x2000011c

0800dcf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dcf0:	f3ef 8009 	mrs	r0, PSP
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	4b15      	ldr	r3, [pc, #84]	@ (800dd50 <pxCurrentTCBConst>)
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	f01e 0f10 	tst.w	lr, #16
 800dd00:	bf08      	it	eq
 800dd02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd0a:	6010      	str	r0, [r2, #0]
 800dd0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dd14:	f380 8811 	msr	BASEPRI, r0
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f7fe ffa0 	bl	800cc64 <vTaskSwitchContext>
 800dd24:	f04f 0000 	mov.w	r0, #0
 800dd28:	f380 8811 	msr	BASEPRI, r0
 800dd2c:	bc09      	pop	{r0, r3}
 800dd2e:	6819      	ldr	r1, [r3, #0]
 800dd30:	6808      	ldr	r0, [r1, #0]
 800dd32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd36:	f01e 0f10 	tst.w	lr, #16
 800dd3a:	bf08      	it	eq
 800dd3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dd40:	f380 8809 	msr	PSP, r0
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	f3af 8000 	nop.w

0800dd50 <pxCurrentTCBConst>:
 800dd50:	200026a0 	.word	0x200026a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dd54:	bf00      	nop
 800dd56:	bf00      	nop

0800dd58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	607b      	str	r3, [r7, #4]
}
 800dd70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd72:	f7fe febd 	bl	800caf0 <xTaskIncrementTick>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d003      	beq.n	800dd84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd7c:	4b06      	ldr	r3, [pc, #24]	@ (800dd98 <xPortSysTickHandler+0x40>)
 800dd7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd82:	601a      	str	r2, [r3, #0]
 800dd84:	2300      	movs	r3, #0
 800dd86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	f383 8811 	msr	BASEPRI, r3
}
 800dd8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	e000ed04 	.word	0xe000ed04

0800dd9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dda0:	4b0b      	ldr	r3, [pc, #44]	@ (800ddd0 <vPortSetupTimerInterrupt+0x34>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dda6:	4b0b      	ldr	r3, [pc, #44]	@ (800ddd4 <vPortSetupTimerInterrupt+0x38>)
 800dda8:	2200      	movs	r2, #0
 800ddaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ddac:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd8 <vPortSetupTimerInterrupt+0x3c>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a0a      	ldr	r2, [pc, #40]	@ (800dddc <vPortSetupTimerInterrupt+0x40>)
 800ddb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb6:	099b      	lsrs	r3, r3, #6
 800ddb8:	4a09      	ldr	r2, [pc, #36]	@ (800dde0 <vPortSetupTimerInterrupt+0x44>)
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ddbe:	4b04      	ldr	r3, [pc, #16]	@ (800ddd0 <vPortSetupTimerInterrupt+0x34>)
 800ddc0:	2207      	movs	r2, #7
 800ddc2:	601a      	str	r2, [r3, #0]
}
 800ddc4:	bf00      	nop
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	e000e010 	.word	0xe000e010
 800ddd4:	e000e018 	.word	0xe000e018
 800ddd8:	20000000 	.word	0x20000000
 800dddc:	10624dd3 	.word	0x10624dd3
 800dde0:	e000e014 	.word	0xe000e014

0800dde4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dde4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ddf4 <vPortEnableVFP+0x10>
 800dde8:	6801      	ldr	r1, [r0, #0]
 800ddea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ddee:	6001      	str	r1, [r0, #0]
 800ddf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ddf2:	bf00      	nop
 800ddf4:	e000ed88 	.word	0xe000ed88

0800ddf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ddfe:	f3ef 8305 	mrs	r3, IPSR
 800de02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2b0f      	cmp	r3, #15
 800de08:	d915      	bls.n	800de36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800de0a:	4a18      	ldr	r2, [pc, #96]	@ (800de6c <vPortValidateInterruptPriority+0x74>)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	4413      	add	r3, r2
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800de14:	4b16      	ldr	r3, [pc, #88]	@ (800de70 <vPortValidateInterruptPriority+0x78>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	7afa      	ldrb	r2, [r7, #11]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d20b      	bcs.n	800de36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800de1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de22:	f383 8811 	msr	BASEPRI, r3
 800de26:	f3bf 8f6f 	isb	sy
 800de2a:	f3bf 8f4f 	dsb	sy
 800de2e:	607b      	str	r3, [r7, #4]
}
 800de30:	bf00      	nop
 800de32:	bf00      	nop
 800de34:	e7fd      	b.n	800de32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800de36:	4b0f      	ldr	r3, [pc, #60]	@ (800de74 <vPortValidateInterruptPriority+0x7c>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800de3e:	4b0e      	ldr	r3, [pc, #56]	@ (800de78 <vPortValidateInterruptPriority+0x80>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	429a      	cmp	r2, r3
 800de44:	d90b      	bls.n	800de5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800de46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4a:	f383 8811 	msr	BASEPRI, r3
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	603b      	str	r3, [r7, #0]
}
 800de58:	bf00      	nop
 800de5a:	bf00      	nop
 800de5c:	e7fd      	b.n	800de5a <vPortValidateInterruptPriority+0x62>
	}
 800de5e:	bf00      	nop
 800de60:	3714      	adds	r7, #20
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop
 800de6c:	e000e3f0 	.word	0xe000e3f0
 800de70:	20002ccc 	.word	0x20002ccc
 800de74:	e000ed0c 	.word	0xe000ed0c
 800de78:	20002cd0 	.word	0x20002cd0

0800de7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08a      	sub	sp, #40	@ 0x28
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de84:	2300      	movs	r3, #0
 800de86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de88:	f7fe fd76 	bl	800c978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de8c:	4b5c      	ldr	r3, [pc, #368]	@ (800e000 <pvPortMalloc+0x184>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d101      	bne.n	800de98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de94:	f000 f924 	bl	800e0e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de98:	4b5a      	ldr	r3, [pc, #360]	@ (800e004 <pvPortMalloc+0x188>)
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4013      	ands	r3, r2
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f040 8095 	bne.w	800dfd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d01e      	beq.n	800deea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800deac:	2208      	movs	r2, #8
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4413      	add	r3, r2
 800deb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f003 0307 	and.w	r3, r3, #7
 800deba:	2b00      	cmp	r3, #0
 800debc:	d015      	beq.n	800deea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f023 0307 	bic.w	r3, r3, #7
 800dec4:	3308      	adds	r3, #8
 800dec6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f003 0307 	and.w	r3, r3, #7
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d00b      	beq.n	800deea <pvPortMalloc+0x6e>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	617b      	str	r3, [r7, #20]
}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop
 800dee8:	e7fd      	b.n	800dee6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d06f      	beq.n	800dfd0 <pvPortMalloc+0x154>
 800def0:	4b45      	ldr	r3, [pc, #276]	@ (800e008 <pvPortMalloc+0x18c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	429a      	cmp	r2, r3
 800def8:	d86a      	bhi.n	800dfd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800defa:	4b44      	ldr	r3, [pc, #272]	@ (800e00c <pvPortMalloc+0x190>)
 800defc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800defe:	4b43      	ldr	r3, [pc, #268]	@ (800e00c <pvPortMalloc+0x190>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df04:	e004      	b.n	800df10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800df06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800df0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	429a      	cmp	r2, r3
 800df18:	d903      	bls.n	800df22 <pvPortMalloc+0xa6>
 800df1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1f1      	bne.n	800df06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800df22:	4b37      	ldr	r3, [pc, #220]	@ (800e000 <pvPortMalloc+0x184>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df28:	429a      	cmp	r2, r3
 800df2a:	d051      	beq.n	800dfd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800df2c:	6a3b      	ldr	r3, [r7, #32]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2208      	movs	r2, #8
 800df32:	4413      	add	r3, r2
 800df34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800df36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800df3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	1ad2      	subs	r2, r2, r3
 800df46:	2308      	movs	r3, #8
 800df48:	005b      	lsls	r3, r3, #1
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d920      	bls.n	800df90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800df4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	4413      	add	r3, r2
 800df54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	f003 0307 	and.w	r3, r3, #7
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00b      	beq.n	800df78 <pvPortMalloc+0xfc>
	__asm volatile
 800df60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df64:	f383 8811 	msr	BASEPRI, r3
 800df68:	f3bf 8f6f 	isb	sy
 800df6c:	f3bf 8f4f 	dsb	sy
 800df70:	613b      	str	r3, [r7, #16]
}
 800df72:	bf00      	nop
 800df74:	bf00      	nop
 800df76:	e7fd      	b.n	800df74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	1ad2      	subs	r2, r2, r3
 800df80:	69bb      	ldr	r3, [r7, #24]
 800df82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df8a:	69b8      	ldr	r0, [r7, #24]
 800df8c:	f000 f90a 	bl	800e1a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df90:	4b1d      	ldr	r3, [pc, #116]	@ (800e008 <pvPortMalloc+0x18c>)
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	4a1b      	ldr	r2, [pc, #108]	@ (800e008 <pvPortMalloc+0x18c>)
 800df9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df9e:	4b1a      	ldr	r3, [pc, #104]	@ (800e008 <pvPortMalloc+0x18c>)
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	4b1b      	ldr	r3, [pc, #108]	@ (800e010 <pvPortMalloc+0x194>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d203      	bcs.n	800dfb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dfaa:	4b17      	ldr	r3, [pc, #92]	@ (800e008 <pvPortMalloc+0x18c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a18      	ldr	r2, [pc, #96]	@ (800e010 <pvPortMalloc+0x194>)
 800dfb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb4:	685a      	ldr	r2, [r3, #4]
 800dfb6:	4b13      	ldr	r3, [pc, #76]	@ (800e004 <pvPortMalloc+0x188>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	431a      	orrs	r2, r3
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dfc6:	4b13      	ldr	r3, [pc, #76]	@ (800e014 <pvPortMalloc+0x198>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	4a11      	ldr	r2, [pc, #68]	@ (800e014 <pvPortMalloc+0x198>)
 800dfce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dfd0:	f7fe fce0 	bl	800c994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	f003 0307 	and.w	r3, r3, #7
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00b      	beq.n	800dff6 <pvPortMalloc+0x17a>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	60fb      	str	r3, [r7, #12]
}
 800dff0:	bf00      	nop
 800dff2:	bf00      	nop
 800dff4:	e7fd      	b.n	800dff2 <pvPortMalloc+0x176>
	return pvReturn;
 800dff6:	69fb      	ldr	r3, [r7, #28]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3728      	adds	r7, #40	@ 0x28
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	2000e85c 	.word	0x2000e85c
 800e004:	2000e870 	.word	0x2000e870
 800e008:	2000e860 	.word	0x2000e860
 800e00c:	2000e854 	.word	0x2000e854
 800e010:	2000e864 	.word	0x2000e864
 800e014:	2000e868 	.word	0x2000e868

0800e018 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d04f      	beq.n	800e0ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e02a:	2308      	movs	r3, #8
 800e02c:	425b      	negs	r3, r3
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	4413      	add	r3, r2
 800e032:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	4b25      	ldr	r3, [pc, #148]	@ (800e0d4 <vPortFree+0xbc>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4013      	ands	r3, r2
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10b      	bne.n	800e05e <vPortFree+0x46>
	__asm volatile
 800e046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e04a:	f383 8811 	msr	BASEPRI, r3
 800e04e:	f3bf 8f6f 	isb	sy
 800e052:	f3bf 8f4f 	dsb	sy
 800e056:	60fb      	str	r3, [r7, #12]
}
 800e058:	bf00      	nop
 800e05a:	bf00      	nop
 800e05c:	e7fd      	b.n	800e05a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00b      	beq.n	800e07e <vPortFree+0x66>
	__asm volatile
 800e066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e06a:	f383 8811 	msr	BASEPRI, r3
 800e06e:	f3bf 8f6f 	isb	sy
 800e072:	f3bf 8f4f 	dsb	sy
 800e076:	60bb      	str	r3, [r7, #8]
}
 800e078:	bf00      	nop
 800e07a:	bf00      	nop
 800e07c:	e7fd      	b.n	800e07a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	685a      	ldr	r2, [r3, #4]
 800e082:	4b14      	ldr	r3, [pc, #80]	@ (800e0d4 <vPortFree+0xbc>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4013      	ands	r3, r2
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d01e      	beq.n	800e0ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d11a      	bne.n	800e0ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	685a      	ldr	r2, [r3, #4]
 800e098:	4b0e      	ldr	r3, [pc, #56]	@ (800e0d4 <vPortFree+0xbc>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	43db      	mvns	r3, r3
 800e09e:	401a      	ands	r2, r3
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e0a4:	f7fe fc68 	bl	800c978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	685a      	ldr	r2, [r3, #4]
 800e0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e0d8 <vPortFree+0xc0>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	4a09      	ldr	r2, [pc, #36]	@ (800e0d8 <vPortFree+0xc0>)
 800e0b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e0b6:	6938      	ldr	r0, [r7, #16]
 800e0b8:	f000 f874 	bl	800e1a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e0bc:	4b07      	ldr	r3, [pc, #28]	@ (800e0dc <vPortFree+0xc4>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	4a06      	ldr	r2, [pc, #24]	@ (800e0dc <vPortFree+0xc4>)
 800e0c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e0c6:	f7fe fc65 	bl	800c994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e0ca:	bf00      	nop
 800e0cc:	3718      	adds	r7, #24
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	2000e870 	.word	0x2000e870
 800e0d8:	2000e860 	.word	0x2000e860
 800e0dc:	2000e86c 	.word	0x2000e86c

0800e0e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e0e6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e0ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e0ec:	4b27      	ldr	r3, [pc, #156]	@ (800e18c <prvHeapInit+0xac>)
 800e0ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f003 0307 	and.w	r3, r3, #7
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00c      	beq.n	800e114 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	3307      	adds	r3, #7
 800e0fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f023 0307 	bic.w	r3, r3, #7
 800e106:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	4a1f      	ldr	r2, [pc, #124]	@ (800e18c <prvHeapInit+0xac>)
 800e110:	4413      	add	r3, r2
 800e112:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e118:	4a1d      	ldr	r2, [pc, #116]	@ (800e190 <prvHeapInit+0xb0>)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e11e:	4b1c      	ldr	r3, [pc, #112]	@ (800e190 <prvHeapInit+0xb0>)
 800e120:	2200      	movs	r2, #0
 800e122:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	68ba      	ldr	r2, [r7, #8]
 800e128:	4413      	add	r3, r2
 800e12a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e12c:	2208      	movs	r2, #8
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	1a9b      	subs	r3, r3, r2
 800e132:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f023 0307 	bic.w	r3, r3, #7
 800e13a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	4a15      	ldr	r2, [pc, #84]	@ (800e194 <prvHeapInit+0xb4>)
 800e140:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e142:	4b14      	ldr	r3, [pc, #80]	@ (800e194 <prvHeapInit+0xb4>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2200      	movs	r2, #0
 800e148:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e14a:	4b12      	ldr	r3, [pc, #72]	@ (800e194 <prvHeapInit+0xb4>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2200      	movs	r2, #0
 800e150:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	1ad2      	subs	r2, r2, r3
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e160:	4b0c      	ldr	r3, [pc, #48]	@ (800e194 <prvHeapInit+0xb4>)
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	4a0a      	ldr	r2, [pc, #40]	@ (800e198 <prvHeapInit+0xb8>)
 800e16e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	4a09      	ldr	r2, [pc, #36]	@ (800e19c <prvHeapInit+0xbc>)
 800e176:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e178:	4b09      	ldr	r3, [pc, #36]	@ (800e1a0 <prvHeapInit+0xc0>)
 800e17a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e17e:	601a      	str	r2, [r3, #0]
}
 800e180:	bf00      	nop
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	20002cd4 	.word	0x20002cd4
 800e190:	2000e854 	.word	0x2000e854
 800e194:	2000e85c 	.word	0x2000e85c
 800e198:	2000e864 	.word	0x2000e864
 800e19c:	2000e860 	.word	0x2000e860
 800e1a0:	2000e870 	.word	0x2000e870

0800e1a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e1ac:	4b28      	ldr	r3, [pc, #160]	@ (800e250 <prvInsertBlockIntoFreeList+0xac>)
 800e1ae:	60fb      	str	r3, [r7, #12]
 800e1b0:	e002      	b.n	800e1b8 <prvInsertBlockIntoFreeList+0x14>
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	60fb      	str	r3, [r7, #12]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d8f7      	bhi.n	800e1b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	68ba      	ldr	r2, [r7, #8]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d108      	bne.n	800e1e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	685a      	ldr	r2, [r3, #4]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	441a      	add	r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	441a      	add	r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d118      	bne.n	800e22c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	4b15      	ldr	r3, [pc, #84]	@ (800e254 <prvInsertBlockIntoFreeList+0xb0>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	429a      	cmp	r2, r3
 800e204:	d00d      	beq.n	800e222 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	685a      	ldr	r2, [r3, #4]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	441a      	add	r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	601a      	str	r2, [r3, #0]
 800e220:	e008      	b.n	800e234 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e222:	4b0c      	ldr	r3, [pc, #48]	@ (800e254 <prvInsertBlockIntoFreeList+0xb0>)
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	601a      	str	r2, [r3, #0]
 800e22a:	e003      	b.n	800e234 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d002      	beq.n	800e242 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e242:	bf00      	nop
 800e244:	3714      	adds	r7, #20
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	2000e854 	.word	0x2000e854
 800e254:	2000e85c 	.word	0x2000e85c

0800e258 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e25c:	2200      	movs	r2, #0
 800e25e:	4912      	ldr	r1, [pc, #72]	@ (800e2a8 <MX_USB_Device_Init+0x50>)
 800e260:	4812      	ldr	r0, [pc, #72]	@ (800e2ac <MX_USB_Device_Init+0x54>)
 800e262:	f7fb fef7 	bl	800a054 <USBD_Init>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d001      	beq.n	800e270 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e26c:	f7f3 fb9a 	bl	80019a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e270:	490f      	ldr	r1, [pc, #60]	@ (800e2b0 <MX_USB_Device_Init+0x58>)
 800e272:	480e      	ldr	r0, [pc, #56]	@ (800e2ac <MX_USB_Device_Init+0x54>)
 800e274:	f7fb ff1e 	bl	800a0b4 <USBD_RegisterClass>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e27e:	f7f3 fb91 	bl	80019a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e282:	490c      	ldr	r1, [pc, #48]	@ (800e2b4 <MX_USB_Device_Init+0x5c>)
 800e284:	4809      	ldr	r0, [pc, #36]	@ (800e2ac <MX_USB_Device_Init+0x54>)
 800e286:	f7fb fe3f 	bl	8009f08 <USBD_CDC_RegisterInterface>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d001      	beq.n	800e294 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e290:	f7f3 fb88 	bl	80019a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e294:	4805      	ldr	r0, [pc, #20]	@ (800e2ac <MX_USB_Device_Init+0x54>)
 800e296:	f7fb ff34 	bl	800a102 <USBD_Start>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e2a0:	f7f3 fb80 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e2a4:	bf00      	nop
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	20000134 	.word	0x20000134
 800e2ac:	2000e874 	.word	0x2000e874
 800e2b0:	20000018 	.word	0x20000018
 800e2b4:	20000120 	.word	0x20000120

0800e2b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e2bc:	2200      	movs	r2, #0
 800e2be:	4905      	ldr	r1, [pc, #20]	@ (800e2d4 <CDC_Init_FS+0x1c>)
 800e2c0:	4805      	ldr	r0, [pc, #20]	@ (800e2d8 <CDC_Init_FS+0x20>)
 800e2c2:	f7fb fe36 	bl	8009f32 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e2c6:	4905      	ldr	r1, [pc, #20]	@ (800e2dc <CDC_Init_FS+0x24>)
 800e2c8:	4803      	ldr	r0, [pc, #12]	@ (800e2d8 <CDC_Init_FS+0x20>)
 800e2ca:	f7fb fe50 	bl	8009f6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e2ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	2000f344 	.word	0x2000f344
 800e2d8:	2000e874 	.word	0x2000e874
 800e2dc:	2000eb44 	.word	0x2000eb44

0800e2e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e2e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	6039      	str	r1, [r7, #0]
 800e2fa:	71fb      	strb	r3, [r7, #7]
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e300:	79fb      	ldrb	r3, [r7, #7]
 800e302:	2b23      	cmp	r3, #35	@ 0x23
 800e304:	d84a      	bhi.n	800e39c <CDC_Control_FS+0xac>
 800e306:	a201      	add	r2, pc, #4	@ (adr r2, 800e30c <CDC_Control_FS+0x1c>)
 800e308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e30c:	0800e39d 	.word	0x0800e39d
 800e310:	0800e39d 	.word	0x0800e39d
 800e314:	0800e39d 	.word	0x0800e39d
 800e318:	0800e39d 	.word	0x0800e39d
 800e31c:	0800e39d 	.word	0x0800e39d
 800e320:	0800e39d 	.word	0x0800e39d
 800e324:	0800e39d 	.word	0x0800e39d
 800e328:	0800e39d 	.word	0x0800e39d
 800e32c:	0800e39d 	.word	0x0800e39d
 800e330:	0800e39d 	.word	0x0800e39d
 800e334:	0800e39d 	.word	0x0800e39d
 800e338:	0800e39d 	.word	0x0800e39d
 800e33c:	0800e39d 	.word	0x0800e39d
 800e340:	0800e39d 	.word	0x0800e39d
 800e344:	0800e39d 	.word	0x0800e39d
 800e348:	0800e39d 	.word	0x0800e39d
 800e34c:	0800e39d 	.word	0x0800e39d
 800e350:	0800e39d 	.word	0x0800e39d
 800e354:	0800e39d 	.word	0x0800e39d
 800e358:	0800e39d 	.word	0x0800e39d
 800e35c:	0800e39d 	.word	0x0800e39d
 800e360:	0800e39d 	.word	0x0800e39d
 800e364:	0800e39d 	.word	0x0800e39d
 800e368:	0800e39d 	.word	0x0800e39d
 800e36c:	0800e39d 	.word	0x0800e39d
 800e370:	0800e39d 	.word	0x0800e39d
 800e374:	0800e39d 	.word	0x0800e39d
 800e378:	0800e39d 	.word	0x0800e39d
 800e37c:	0800e39d 	.word	0x0800e39d
 800e380:	0800e39d 	.word	0x0800e39d
 800e384:	0800e39d 	.word	0x0800e39d
 800e388:	0800e39d 	.word	0x0800e39d
 800e38c:	0800e39d 	.word	0x0800e39d
 800e390:	0800e39d 	.word	0x0800e39d
 800e394:	0800e39d 	.word	0x0800e39d
 800e398:	0800e39d 	.word	0x0800e39d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e39c:	bf00      	nop
  }

  return (USBD_OK);
 800e39e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e3b6:	6879      	ldr	r1, [r7, #4]
 800e3b8:	4805      	ldr	r0, [pc, #20]	@ (800e3d0 <CDC_Receive_FS+0x24>)
 800e3ba:	f7fb fdd8 	bl	8009f6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e3be:	4804      	ldr	r0, [pc, #16]	@ (800e3d0 <CDC_Receive_FS+0x24>)
 800e3c0:	f7fb fe1e 	bl	800a000 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e3c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	2000e874 	.word	0x2000e874

0800e3d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e3e4:	4b0d      	ldr	r3, [pc, #52]	@ (800e41c <CDC_Transmit_FS+0x48>)
 800e3e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e3ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e00b      	b.n	800e412 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e3fa:	887b      	ldrh	r3, [r7, #2]
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	6879      	ldr	r1, [r7, #4]
 800e400:	4806      	ldr	r0, [pc, #24]	@ (800e41c <CDC_Transmit_FS+0x48>)
 800e402:	f7fb fd96 	bl	8009f32 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e406:	4805      	ldr	r0, [pc, #20]	@ (800e41c <CDC_Transmit_FS+0x48>)
 800e408:	f7fb fdca 	bl	8009fa0 <USBD_CDC_TransmitPacket>
 800e40c:	4603      	mov	r3, r0
 800e40e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e410:	7bfb      	ldrb	r3, [r7, #15]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	2000e874 	.word	0x2000e874

0800e420 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e420:	b480      	push	{r7}
 800e422:	b087      	sub	sp, #28
 800e424:	af00      	add	r7, sp, #0
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	60b9      	str	r1, [r7, #8]
 800e42a:	4613      	mov	r3, r2
 800e42c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e432:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e436:	4618      	mov	r0, r3
 800e438:	371c      	adds	r7, #28
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
	...

0800e444 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	4603      	mov	r3, r0
 800e44c:	6039      	str	r1, [r7, #0]
 800e44e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	2212      	movs	r2, #18
 800e454:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e456:	4b03      	ldr	r3, [pc, #12]	@ (800e464 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e458:	4618      	mov	r0, r3
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr
 800e464:	20000154 	.word	0x20000154

0800e468 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	4603      	mov	r3, r0
 800e470:	6039      	str	r1, [r7, #0]
 800e472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	2204      	movs	r2, #4
 800e478:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e47a:	4b03      	ldr	r3, [pc, #12]	@ (800e488 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	20000168 	.word	0x20000168

0800e48c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	4603      	mov	r3, r0
 800e494:	6039      	str	r1, [r7, #0]
 800e496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e498:	79fb      	ldrb	r3, [r7, #7]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d105      	bne.n	800e4aa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	4907      	ldr	r1, [pc, #28]	@ (800e4c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e4a2:	4808      	ldr	r0, [pc, #32]	@ (800e4c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e4a4:	f7fc fe15 	bl	800b0d2 <USBD_GetString>
 800e4a8:	e004      	b.n	800e4b4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e4aa:	683a      	ldr	r2, [r7, #0]
 800e4ac:	4904      	ldr	r1, [pc, #16]	@ (800e4c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e4ae:	4805      	ldr	r0, [pc, #20]	@ (800e4c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e4b0:	f7fc fe0f 	bl	800b0d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4b4:	4b02      	ldr	r3, [pc, #8]	@ (800e4c0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3708      	adds	r7, #8
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	2000fb44 	.word	0x2000fb44
 800e4c4:	08011cb0 	.word	0x08011cb0

0800e4c8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	6039      	str	r1, [r7, #0]
 800e4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	4904      	ldr	r1, [pc, #16]	@ (800e4e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e4d8:	4804      	ldr	r0, [pc, #16]	@ (800e4ec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e4da:	f7fc fdfa 	bl	800b0d2 <USBD_GetString>
  return USBD_StrDesc;
 800e4de:	4b02      	ldr	r3, [pc, #8]	@ (800e4e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	2000fb44 	.word	0x2000fb44
 800e4ec:	08011cc8 	.word	0x08011cc8

0800e4f0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	6039      	str	r1, [r7, #0]
 800e4fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	221a      	movs	r2, #26
 800e500:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e502:	f000 f843 	bl	800e58c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e506:	4b02      	ldr	r3, [pc, #8]	@ (800e510 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	2000016c 	.word	0x2000016c

0800e514 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	4603      	mov	r3, r0
 800e51c:	6039      	str	r1, [r7, #0]
 800e51e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e520:	79fb      	ldrb	r3, [r7, #7]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d105      	bne.n	800e532 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e526:	683a      	ldr	r2, [r7, #0]
 800e528:	4907      	ldr	r1, [pc, #28]	@ (800e548 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e52a:	4808      	ldr	r0, [pc, #32]	@ (800e54c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e52c:	f7fc fdd1 	bl	800b0d2 <USBD_GetString>
 800e530:	e004      	b.n	800e53c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	4904      	ldr	r1, [pc, #16]	@ (800e548 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e536:	4805      	ldr	r0, [pc, #20]	@ (800e54c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e538:	f7fc fdcb 	bl	800b0d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e53c:	4b02      	ldr	r3, [pc, #8]	@ (800e548 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	2000fb44 	.word	0x2000fb44
 800e54c:	08011cdc 	.word	0x08011cdc

0800e550 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	6039      	str	r1, [r7, #0]
 800e55a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e55c:	79fb      	ldrb	r3, [r7, #7]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d105      	bne.n	800e56e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e562:	683a      	ldr	r2, [r7, #0]
 800e564:	4907      	ldr	r1, [pc, #28]	@ (800e584 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e566:	4808      	ldr	r0, [pc, #32]	@ (800e588 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e568:	f7fc fdb3 	bl	800b0d2 <USBD_GetString>
 800e56c:	e004      	b.n	800e578 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	4904      	ldr	r1, [pc, #16]	@ (800e584 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e572:	4805      	ldr	r0, [pc, #20]	@ (800e588 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e574:	f7fc fdad 	bl	800b0d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e578:	4b02      	ldr	r3, [pc, #8]	@ (800e584 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	2000fb44 	.word	0x2000fb44
 800e588:	08011ce8 	.word	0x08011ce8

0800e58c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e592:	4b0f      	ldr	r3, [pc, #60]	@ (800e5d0 <Get_SerialNum+0x44>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e598:	4b0e      	ldr	r3, [pc, #56]	@ (800e5d4 <Get_SerialNum+0x48>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e59e:	4b0e      	ldr	r3, [pc, #56]	@ (800e5d8 <Get_SerialNum+0x4c>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d009      	beq.n	800e5c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e5b2:	2208      	movs	r2, #8
 800e5b4:	4909      	ldr	r1, [pc, #36]	@ (800e5dc <Get_SerialNum+0x50>)
 800e5b6:	68f8      	ldr	r0, [r7, #12]
 800e5b8:	f000 f814 	bl	800e5e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e5bc:	2204      	movs	r2, #4
 800e5be:	4908      	ldr	r1, [pc, #32]	@ (800e5e0 <Get_SerialNum+0x54>)
 800e5c0:	68b8      	ldr	r0, [r7, #8]
 800e5c2:	f000 f80f 	bl	800e5e4 <IntToUnicode>
  }
}
 800e5c6:	bf00      	nop
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	1fff7590 	.word	0x1fff7590
 800e5d4:	1fff7594 	.word	0x1fff7594
 800e5d8:	1fff7598 	.word	0x1fff7598
 800e5dc:	2000016e 	.word	0x2000016e
 800e5e0:	2000017e 	.word	0x2000017e

0800e5e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b087      	sub	sp, #28
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	75fb      	strb	r3, [r7, #23]
 800e5fa:	e027      	b.n	800e64c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	0f1b      	lsrs	r3, r3, #28
 800e600:	2b09      	cmp	r3, #9
 800e602:	d80b      	bhi.n	800e61c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	0f1b      	lsrs	r3, r3, #28
 800e608:	b2da      	uxtb	r2, r3
 800e60a:	7dfb      	ldrb	r3, [r7, #23]
 800e60c:	005b      	lsls	r3, r3, #1
 800e60e:	4619      	mov	r1, r3
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	440b      	add	r3, r1
 800e614:	3230      	adds	r2, #48	@ 0x30
 800e616:	b2d2      	uxtb	r2, r2
 800e618:	701a      	strb	r2, [r3, #0]
 800e61a:	e00a      	b.n	800e632 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	0f1b      	lsrs	r3, r3, #28
 800e620:	b2da      	uxtb	r2, r3
 800e622:	7dfb      	ldrb	r3, [r7, #23]
 800e624:	005b      	lsls	r3, r3, #1
 800e626:	4619      	mov	r1, r3
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	440b      	add	r3, r1
 800e62c:	3237      	adds	r2, #55	@ 0x37
 800e62e:	b2d2      	uxtb	r2, r2
 800e630:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	011b      	lsls	r3, r3, #4
 800e636:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e638:	7dfb      	ldrb	r3, [r7, #23]
 800e63a:	005b      	lsls	r3, r3, #1
 800e63c:	3301      	adds	r3, #1
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	4413      	add	r3, r2
 800e642:	2200      	movs	r2, #0
 800e644:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e646:	7dfb      	ldrb	r3, [r7, #23]
 800e648:	3301      	adds	r3, #1
 800e64a:	75fb      	strb	r3, [r7, #23]
 800e64c:	7dfa      	ldrb	r2, [r7, #23]
 800e64e:	79fb      	ldrb	r3, [r7, #7]
 800e650:	429a      	cmp	r2, r3
 800e652:	d3d3      	bcc.n	800e5fc <IntToUnicode+0x18>
  }
}
 800e654:	bf00      	nop
 800e656:	bf00      	nop
 800e658:	371c      	adds	r7, #28
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr
	...

0800e664 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b098      	sub	sp, #96	@ 0x60
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e66c:	f107 0310 	add.w	r3, r7, #16
 800e670:	2250      	movs	r2, #80	@ 0x50
 800e672:	2100      	movs	r1, #0
 800e674:	4618      	mov	r0, r3
 800e676:	f001 f84d 	bl	800f714 <memset>
  if(pcdHandle->Instance==USB)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a15      	ldr	r2, [pc, #84]	@ (800e6d4 <HAL_PCD_MspInit+0x70>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d122      	bne.n	800e6ca <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e684:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e688:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e68a:	2300      	movs	r3, #0
 800e68c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e68e:	f107 0310 	add.w	r3, r7, #16
 800e692:	4618      	mov	r0, r3
 800e694:	f7f8 fdae 	bl	80071f4 <HAL_RCCEx_PeriphCLKConfig>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d001      	beq.n	800e6a2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e69e:	f7f3 f981 	bl	80019a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e6d8 <HAL_PCD_MspInit+0x74>)
 800e6a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6a6:	4a0c      	ldr	r2, [pc, #48]	@ (800e6d8 <HAL_PCD_MspInit+0x74>)
 800e6a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e6ac:	6593      	str	r3, [r2, #88]	@ 0x58
 800e6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800e6d8 <HAL_PCD_MspInit+0x74>)
 800e6b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e6b6:	60fb      	str	r3, [r7, #12]
 800e6b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	2105      	movs	r1, #5
 800e6be:	2014      	movs	r0, #20
 800e6c0:	f7f4 ffd4 	bl	800366c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e6c4:	2014      	movs	r0, #20
 800e6c6:	f7f4 ffeb 	bl	80036a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e6ca:	bf00      	nop
 800e6cc:	3760      	adds	r7, #96	@ 0x60
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	40005c00 	.word	0x40005c00
 800e6d8:	40021000 	.word	0x40021000

0800e6dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	4610      	mov	r0, r2
 800e6f4:	f7fb fd50 	bl	800a198 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e6f8:	bf00      	nop
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	460b      	mov	r3, r1
 800e70a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e712:	78fa      	ldrb	r2, [r7, #3]
 800e714:	6879      	ldr	r1, [r7, #4]
 800e716:	4613      	mov	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4413      	add	r3, r2
 800e71c:	00db      	lsls	r3, r3, #3
 800e71e:	440b      	add	r3, r1
 800e720:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	78fb      	ldrb	r3, [r7, #3]
 800e728:	4619      	mov	r1, r3
 800e72a:	f7fb fd8a 	bl	800a242 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e72e:	bf00      	nop
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b082      	sub	sp, #8
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
 800e73e:	460b      	mov	r3, r1
 800e740:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e748:	78fa      	ldrb	r2, [r7, #3]
 800e74a:	6879      	ldr	r1, [r7, #4]
 800e74c:	4613      	mov	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	00db      	lsls	r3, r3, #3
 800e754:	440b      	add	r3, r1
 800e756:	3324      	adds	r3, #36	@ 0x24
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	78fb      	ldrb	r3, [r7, #3]
 800e75c:	4619      	mov	r1, r3
 800e75e:	f7fb fdd3 	bl	800a308 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e762:	bf00      	nop
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e778:	4618      	mov	r0, r3
 800e77a:	f7fb fee7 	bl	800a54c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e77e:	bf00      	nop
 800e780:	3708      	adds	r7, #8
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}

0800e786 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e786:	b580      	push	{r7, lr}
 800e788:	b084      	sub	sp, #16
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e78e:	2301      	movs	r3, #1
 800e790:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	795b      	ldrb	r3, [r3, #5]
 800e796:	2b02      	cmp	r3, #2
 800e798:	d001      	beq.n	800e79e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e79a:	f7f3 f903 	bl	80019a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e7a4:	7bfa      	ldrb	r2, [r7, #15]
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fb fe91 	bl	800a4d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7fb fe3d 	bl	800a434 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e7ba:	bf00      	nop
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
	...

0800e7c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fb fe8c 	bl	800a4f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7a5b      	ldrb	r3, [r3, #9]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d005      	beq.n	800e7ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e7e0:	4b04      	ldr	r3, [pc, #16]	@ (800e7f4 <HAL_PCD_SuspendCallback+0x30>)
 800e7e2:	691b      	ldr	r3, [r3, #16]
 800e7e4:	4a03      	ldr	r2, [pc, #12]	@ (800e7f4 <HAL_PCD_SuspendCallback+0x30>)
 800e7e6:	f043 0306 	orr.w	r3, r3, #6
 800e7ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e7ec:	bf00      	nop
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	e000ed00 	.word	0xe000ed00

0800e7f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	7a5b      	ldrb	r3, [r3, #9]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d007      	beq.n	800e818 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e808:	4b08      	ldr	r3, [pc, #32]	@ (800e82c <HAL_PCD_ResumeCallback+0x34>)
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	4a07      	ldr	r2, [pc, #28]	@ (800e82c <HAL_PCD_ResumeCallback+0x34>)
 800e80e:	f023 0306 	bic.w	r3, r3, #6
 800e812:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e814:	f000 f9f8 	bl	800ec08 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e81e:	4618      	mov	r0, r3
 800e820:	f7fb fe7c 	bl	800a51c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e824:	bf00      	nop
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	e000ed00 	.word	0xe000ed00

0800e830 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e838:	4a2b      	ldr	r2, [pc, #172]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a29      	ldr	r2, [pc, #164]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e844:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e848:	4b27      	ldr	r3, [pc, #156]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e84a:	4a28      	ldr	r2, [pc, #160]	@ (800e8ec <USBD_LL_Init+0xbc>)
 800e84c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e84e:	4b26      	ldr	r3, [pc, #152]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e850:	2208      	movs	r2, #8
 800e852:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e854:	4b24      	ldr	r3, [pc, #144]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e856:	2202      	movs	r2, #2
 800e858:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e85a:	4b23      	ldr	r3, [pc, #140]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e85c:	2202      	movs	r2, #2
 800e85e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e860:	4b21      	ldr	r3, [pc, #132]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e862:	2200      	movs	r2, #0
 800e864:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e866:	4b20      	ldr	r3, [pc, #128]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e868:	2200      	movs	r2, #0
 800e86a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e86c:	4b1e      	ldr	r3, [pc, #120]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e86e:	2200      	movs	r2, #0
 800e870:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e872:	4b1d      	ldr	r3, [pc, #116]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e874:	2200      	movs	r2, #0
 800e876:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e878:	481b      	ldr	r0, [pc, #108]	@ (800e8e8 <USBD_LL_Init+0xb8>)
 800e87a:	f7f6 f9bc 	bl	8004bf6 <HAL_PCD_Init>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d001      	beq.n	800e888 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e884:	f7f3 f88e 	bl	80019a4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e88e:	2318      	movs	r3, #24
 800e890:	2200      	movs	r2, #0
 800e892:	2100      	movs	r1, #0
 800e894:	f7f7 fe43 	bl	800651e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e89e:	2358      	movs	r3, #88	@ 0x58
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	2180      	movs	r1, #128	@ 0x80
 800e8a4:	f7f7 fe3b 	bl	800651e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e8ae:	23c0      	movs	r3, #192	@ 0xc0
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	2181      	movs	r1, #129	@ 0x81
 800e8b4:	f7f7 fe33 	bl	800651e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e8be:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	2101      	movs	r1, #1
 800e8c6:	f7f7 fe2a 	bl	800651e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e8d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	2182      	movs	r1, #130	@ 0x82
 800e8d8:	f7f7 fe21 	bl	800651e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	2000fd44 	.word	0x2000fd44
 800e8ec:	40005c00 	.word	0x40005c00

0800e8f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e906:	4618      	mov	r0, r3
 800e908:	f7f6 fa43 	bl	8004d92 <HAL_PCD_Start>
 800e90c:	4603      	mov	r3, r0
 800e90e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	4618      	mov	r0, r3
 800e914:	f000 f97e 	bl	800ec14 <USBD_Get_USB_Status>
 800e918:	4603      	mov	r3, r0
 800e91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b084      	sub	sp, #16
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
 800e92e:	4608      	mov	r0, r1
 800e930:	4611      	mov	r1, r2
 800e932:	461a      	mov	r2, r3
 800e934:	4603      	mov	r3, r0
 800e936:	70fb      	strb	r3, [r7, #3]
 800e938:	460b      	mov	r3, r1
 800e93a:	70bb      	strb	r3, [r7, #2]
 800e93c:	4613      	mov	r3, r2
 800e93e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e940:	2300      	movs	r3, #0
 800e942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e944:	2300      	movs	r3, #0
 800e946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e94e:	78bb      	ldrb	r3, [r7, #2]
 800e950:	883a      	ldrh	r2, [r7, #0]
 800e952:	78f9      	ldrb	r1, [r7, #3]
 800e954:	f7f6 fb8a 	bl	800506c <HAL_PCD_EP_Open>
 800e958:	4603      	mov	r3, r0
 800e95a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e95c:	7bfb      	ldrb	r3, [r7, #15]
 800e95e:	4618      	mov	r0, r3
 800e960:	f000 f958 	bl	800ec14 <USBD_Get_USB_Status>
 800e964:	4603      	mov	r3, r0
 800e966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e968:	7bbb      	ldrb	r3, [r7, #14]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3710      	adds	r7, #16
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}

0800e972 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b084      	sub	sp, #16
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
 800e97a:	460b      	mov	r3, r1
 800e97c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e97e:	2300      	movs	r3, #0
 800e980:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e98c:	78fa      	ldrb	r2, [r7, #3]
 800e98e:	4611      	mov	r1, r2
 800e990:	4618      	mov	r0, r3
 800e992:	f7f6 fbca 	bl	800512a <HAL_PCD_EP_Close>
 800e996:	4603      	mov	r3, r0
 800e998:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e99a:	7bfb      	ldrb	r3, [r7, #15]
 800e99c:	4618      	mov	r0, r3
 800e99e:	f000 f939 	bl	800ec14 <USBD_Get_USB_Status>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e9ca:	78fa      	ldrb	r2, [r7, #3]
 800e9cc:	4611      	mov	r1, r2
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7f6 fc73 	bl	80052ba <HAL_PCD_EP_SetStall>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9d8:	7bfb      	ldrb	r3, [r7, #15]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f000 f91a 	bl	800ec14 <USBD_Get_USB_Status>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b084      	sub	sp, #16
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ea08:	78fa      	ldrb	r2, [r7, #3]
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7f6 fca6 	bl	800535e <HAL_PCD_EP_ClrStall>
 800ea12:	4603      	mov	r3, r0
 800ea14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea16:	7bfb      	ldrb	r3, [r7, #15]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 f8fb 	bl	800ec14 <USBD_Get_USB_Status>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea22:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b085      	sub	sp, #20
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	460b      	mov	r3, r1
 800ea36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ea3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ea40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	da0b      	bge.n	800ea60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ea48:	78fb      	ldrb	r3, [r7, #3]
 800ea4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ea4e:	68f9      	ldr	r1, [r7, #12]
 800ea50:	4613      	mov	r3, r2
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	4413      	add	r3, r2
 800ea56:	00db      	lsls	r3, r3, #3
 800ea58:	440b      	add	r3, r1
 800ea5a:	3312      	adds	r3, #18
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	e00b      	b.n	800ea78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ea60:	78fb      	ldrb	r3, [r7, #3]
 800ea62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ea66:	68f9      	ldr	r1, [r7, #12]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	009b      	lsls	r3, r3, #2
 800ea6c:	4413      	add	r3, r2
 800ea6e:	00db      	lsls	r3, r3, #3
 800ea70:	440b      	add	r3, r1
 800ea72:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ea76:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea90:	2300      	movs	r3, #0
 800ea92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea94:	2300      	movs	r3, #0
 800ea96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ea9e:	78fa      	ldrb	r2, [r7, #3]
 800eaa0:	4611      	mov	r1, r2
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7f6 fabe 	bl	8005024 <HAL_PCD_SetAddress>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eaac:	7bfb      	ldrb	r3, [r7, #15]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f000 f8b0 	bl	800ec14 <USBD_Get_USB_Status>
 800eab4:	4603      	mov	r3, r0
 800eab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b086      	sub	sp, #24
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	60f8      	str	r0, [r7, #12]
 800eaca:	607a      	str	r2, [r7, #4]
 800eacc:	603b      	str	r3, [r7, #0]
 800eace:	460b      	mov	r3, r1
 800ead0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ead2:	2300      	movs	r3, #0
 800ead4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ead6:	2300      	movs	r3, #0
 800ead8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800eae0:	7af9      	ldrb	r1, [r7, #11]
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	f7f6 fbb1 	bl	800524c <HAL_PCD_EP_Transmit>
 800eaea:	4603      	mov	r3, r0
 800eaec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eaee:	7dfb      	ldrb	r3, [r7, #23]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f000 f88f 	bl	800ec14 <USBD_Get_USB_Status>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eafa:	7dbb      	ldrb	r3, [r7, #22]
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3718      	adds	r7, #24
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	607a      	str	r2, [r7, #4]
 800eb0e:	603b      	str	r3, [r7, #0]
 800eb10:	460b      	mov	r3, r1
 800eb12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb14:	2300      	movs	r3, #0
 800eb16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800eb22:	7af9      	ldrb	r1, [r7, #11]
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	f7f6 fb47 	bl	80051ba <HAL_PCD_EP_Receive>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb30:	7dfb      	ldrb	r3, [r7, #23]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f000 f86e 	bl	800ec14 <USBD_Get_USB_Status>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb3c:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3718      	adds	r7, #24
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b082      	sub	sp, #8
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800eb58:	78fa      	ldrb	r2, [r7, #3]
 800eb5a:	4611      	mov	r1, r2
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7f6 fb5d 	bl	800521c <HAL_PCD_EP_GetRxCount>
 800eb62:	4603      	mov	r3, r0
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3708      	adds	r7, #8
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	460b      	mov	r3, r1
 800eb76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800eb78:	78fb      	ldrb	r3, [r7, #3]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d002      	beq.n	800eb84 <HAL_PCDEx_LPM_Callback+0x18>
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d013      	beq.n	800ebaa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800eb82:	e023      	b.n	800ebcc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	7a5b      	ldrb	r3, [r3, #9]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d007      	beq.n	800eb9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800eb8c:	f000 f83c 	bl	800ec08 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb90:	4b10      	ldr	r3, [pc, #64]	@ (800ebd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800eb92:	691b      	ldr	r3, [r3, #16]
 800eb94:	4a0f      	ldr	r2, [pc, #60]	@ (800ebd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800eb96:	f023 0306 	bic.w	r3, r3, #6
 800eb9a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7fb fcba 	bl	800a51c <USBD_LL_Resume>
    break;
 800eba8:	e010      	b.n	800ebcc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fb fc9d 	bl	800a4f0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	7a5b      	ldrb	r3, [r3, #9]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d005      	beq.n	800ebca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ebbe:	4b05      	ldr	r3, [pc, #20]	@ (800ebd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800ebc0:	691b      	ldr	r3, [r3, #16]
 800ebc2:	4a04      	ldr	r2, [pc, #16]	@ (800ebd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800ebc4:	f043 0306 	orr.w	r3, r3, #6
 800ebc8:	6113      	str	r3, [r2, #16]
    break;
 800ebca:	bf00      	nop
}
 800ebcc:	bf00      	nop
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	e000ed00 	.word	0xe000ed00

0800ebd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ebe0:	4b03      	ldr	r3, [pc, #12]	@ (800ebf0 <USBD_static_malloc+0x18>)
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	370c      	adds	r7, #12
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	20010020 	.word	0x20010020

0800ebf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]

}
 800ebfc:	bf00      	nop
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ec0c:	f7f2 fc26 	bl	800145c <SystemClock_Config>
}
 800ec10:	bf00      	nop
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ec22:	79fb      	ldrb	r3, [r7, #7]
 800ec24:	2b03      	cmp	r3, #3
 800ec26:	d817      	bhi.n	800ec58 <USBD_Get_USB_Status+0x44>
 800ec28:	a201      	add	r2, pc, #4	@ (adr r2, 800ec30 <USBD_Get_USB_Status+0x1c>)
 800ec2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec2e:	bf00      	nop
 800ec30:	0800ec41 	.word	0x0800ec41
 800ec34:	0800ec47 	.word	0x0800ec47
 800ec38:	0800ec4d 	.word	0x0800ec4d
 800ec3c:	0800ec53 	.word	0x0800ec53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ec40:	2300      	movs	r3, #0
 800ec42:	73fb      	strb	r3, [r7, #15]
    break;
 800ec44:	e00b      	b.n	800ec5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec46:	2303      	movs	r3, #3
 800ec48:	73fb      	strb	r3, [r7, #15]
    break;
 800ec4a:	e008      	b.n	800ec5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec50:	e005      	b.n	800ec5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec52:	2303      	movs	r3, #3
 800ec54:	73fb      	strb	r3, [r7, #15]
    break;
 800ec56:	e002      	b.n	800ec5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec5c:	bf00      	nop
  }
  return usb_status;
 800ec5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3714      	adds	r7, #20
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <__cvt>:
 800ec6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec70:	ec57 6b10 	vmov	r6, r7, d0
 800ec74:	2f00      	cmp	r7, #0
 800ec76:	460c      	mov	r4, r1
 800ec78:	4619      	mov	r1, r3
 800ec7a:	463b      	mov	r3, r7
 800ec7c:	bfbb      	ittet	lt
 800ec7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ec82:	461f      	movlt	r7, r3
 800ec84:	2300      	movge	r3, #0
 800ec86:	232d      	movlt	r3, #45	@ 0x2d
 800ec88:	700b      	strb	r3, [r1, #0]
 800ec8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ec90:	4691      	mov	r9, r2
 800ec92:	f023 0820 	bic.w	r8, r3, #32
 800ec96:	bfbc      	itt	lt
 800ec98:	4632      	movlt	r2, r6
 800ec9a:	4616      	movlt	r6, r2
 800ec9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eca0:	d005      	beq.n	800ecae <__cvt+0x42>
 800eca2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eca6:	d100      	bne.n	800ecaa <__cvt+0x3e>
 800eca8:	3401      	adds	r4, #1
 800ecaa:	2102      	movs	r1, #2
 800ecac:	e000      	b.n	800ecb0 <__cvt+0x44>
 800ecae:	2103      	movs	r1, #3
 800ecb0:	ab03      	add	r3, sp, #12
 800ecb2:	9301      	str	r3, [sp, #4]
 800ecb4:	ab02      	add	r3, sp, #8
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	ec47 6b10 	vmov	d0, r6, r7
 800ecbc:	4653      	mov	r3, sl
 800ecbe:	4622      	mov	r2, r4
 800ecc0:	f000 fe4e 	bl	800f960 <_dtoa_r>
 800ecc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ecc8:	4605      	mov	r5, r0
 800ecca:	d119      	bne.n	800ed00 <__cvt+0x94>
 800eccc:	f019 0f01 	tst.w	r9, #1
 800ecd0:	d00e      	beq.n	800ecf0 <__cvt+0x84>
 800ecd2:	eb00 0904 	add.w	r9, r0, r4
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	2300      	movs	r3, #0
 800ecda:	4630      	mov	r0, r6
 800ecdc:	4639      	mov	r1, r7
 800ecde:	f7f1 ff1b 	bl	8000b18 <__aeabi_dcmpeq>
 800ece2:	b108      	cbz	r0, 800ece8 <__cvt+0x7c>
 800ece4:	f8cd 900c 	str.w	r9, [sp, #12]
 800ece8:	2230      	movs	r2, #48	@ 0x30
 800ecea:	9b03      	ldr	r3, [sp, #12]
 800ecec:	454b      	cmp	r3, r9
 800ecee:	d31e      	bcc.n	800ed2e <__cvt+0xc2>
 800ecf0:	9b03      	ldr	r3, [sp, #12]
 800ecf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecf4:	1b5b      	subs	r3, r3, r5
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	6013      	str	r3, [r2, #0]
 800ecfa:	b004      	add	sp, #16
 800ecfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ed04:	eb00 0904 	add.w	r9, r0, r4
 800ed08:	d1e5      	bne.n	800ecd6 <__cvt+0x6a>
 800ed0a:	7803      	ldrb	r3, [r0, #0]
 800ed0c:	2b30      	cmp	r3, #48	@ 0x30
 800ed0e:	d10a      	bne.n	800ed26 <__cvt+0xba>
 800ed10:	2200      	movs	r2, #0
 800ed12:	2300      	movs	r3, #0
 800ed14:	4630      	mov	r0, r6
 800ed16:	4639      	mov	r1, r7
 800ed18:	f7f1 fefe 	bl	8000b18 <__aeabi_dcmpeq>
 800ed1c:	b918      	cbnz	r0, 800ed26 <__cvt+0xba>
 800ed1e:	f1c4 0401 	rsb	r4, r4, #1
 800ed22:	f8ca 4000 	str.w	r4, [sl]
 800ed26:	f8da 3000 	ldr.w	r3, [sl]
 800ed2a:	4499      	add	r9, r3
 800ed2c:	e7d3      	b.n	800ecd6 <__cvt+0x6a>
 800ed2e:	1c59      	adds	r1, r3, #1
 800ed30:	9103      	str	r1, [sp, #12]
 800ed32:	701a      	strb	r2, [r3, #0]
 800ed34:	e7d9      	b.n	800ecea <__cvt+0x7e>

0800ed36 <__exponent>:
 800ed36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed38:	2900      	cmp	r1, #0
 800ed3a:	bfba      	itte	lt
 800ed3c:	4249      	neglt	r1, r1
 800ed3e:	232d      	movlt	r3, #45	@ 0x2d
 800ed40:	232b      	movge	r3, #43	@ 0x2b
 800ed42:	2909      	cmp	r1, #9
 800ed44:	7002      	strb	r2, [r0, #0]
 800ed46:	7043      	strb	r3, [r0, #1]
 800ed48:	dd29      	ble.n	800ed9e <__exponent+0x68>
 800ed4a:	f10d 0307 	add.w	r3, sp, #7
 800ed4e:	461d      	mov	r5, r3
 800ed50:	270a      	movs	r7, #10
 800ed52:	461a      	mov	r2, r3
 800ed54:	fbb1 f6f7 	udiv	r6, r1, r7
 800ed58:	fb07 1416 	mls	r4, r7, r6, r1
 800ed5c:	3430      	adds	r4, #48	@ 0x30
 800ed5e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ed62:	460c      	mov	r4, r1
 800ed64:	2c63      	cmp	r4, #99	@ 0x63
 800ed66:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ed6a:	4631      	mov	r1, r6
 800ed6c:	dcf1      	bgt.n	800ed52 <__exponent+0x1c>
 800ed6e:	3130      	adds	r1, #48	@ 0x30
 800ed70:	1e94      	subs	r4, r2, #2
 800ed72:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ed76:	1c41      	adds	r1, r0, #1
 800ed78:	4623      	mov	r3, r4
 800ed7a:	42ab      	cmp	r3, r5
 800ed7c:	d30a      	bcc.n	800ed94 <__exponent+0x5e>
 800ed7e:	f10d 0309 	add.w	r3, sp, #9
 800ed82:	1a9b      	subs	r3, r3, r2
 800ed84:	42ac      	cmp	r4, r5
 800ed86:	bf88      	it	hi
 800ed88:	2300      	movhi	r3, #0
 800ed8a:	3302      	adds	r3, #2
 800ed8c:	4403      	add	r3, r0
 800ed8e:	1a18      	subs	r0, r3, r0
 800ed90:	b003      	add	sp, #12
 800ed92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed94:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ed98:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ed9c:	e7ed      	b.n	800ed7a <__exponent+0x44>
 800ed9e:	2330      	movs	r3, #48	@ 0x30
 800eda0:	3130      	adds	r1, #48	@ 0x30
 800eda2:	7083      	strb	r3, [r0, #2]
 800eda4:	70c1      	strb	r1, [r0, #3]
 800eda6:	1d03      	adds	r3, r0, #4
 800eda8:	e7f1      	b.n	800ed8e <__exponent+0x58>
	...

0800edac <_printf_float>:
 800edac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb0:	b08d      	sub	sp, #52	@ 0x34
 800edb2:	460c      	mov	r4, r1
 800edb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800edb8:	4616      	mov	r6, r2
 800edba:	461f      	mov	r7, r3
 800edbc:	4605      	mov	r5, r0
 800edbe:	f000 fcb1 	bl	800f724 <_localeconv_r>
 800edc2:	6803      	ldr	r3, [r0, #0]
 800edc4:	9304      	str	r3, [sp, #16]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7f1 fa7a 	bl	80002c0 <strlen>
 800edcc:	2300      	movs	r3, #0
 800edce:	930a      	str	r3, [sp, #40]	@ 0x28
 800edd0:	f8d8 3000 	ldr.w	r3, [r8]
 800edd4:	9005      	str	r0, [sp, #20]
 800edd6:	3307      	adds	r3, #7
 800edd8:	f023 0307 	bic.w	r3, r3, #7
 800eddc:	f103 0208 	add.w	r2, r3, #8
 800ede0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ede4:	f8d4 b000 	ldr.w	fp, [r4]
 800ede8:	f8c8 2000 	str.w	r2, [r8]
 800edec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edf0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800edf4:	9307      	str	r3, [sp, #28]
 800edf6:	f8cd 8018 	str.w	r8, [sp, #24]
 800edfa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800edfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee02:	4b9c      	ldr	r3, [pc, #624]	@ (800f074 <_printf_float+0x2c8>)
 800ee04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee08:	f7f1 feb8 	bl	8000b7c <__aeabi_dcmpun>
 800ee0c:	bb70      	cbnz	r0, 800ee6c <_printf_float+0xc0>
 800ee0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee12:	4b98      	ldr	r3, [pc, #608]	@ (800f074 <_printf_float+0x2c8>)
 800ee14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee18:	f7f1 fe92 	bl	8000b40 <__aeabi_dcmple>
 800ee1c:	bb30      	cbnz	r0, 800ee6c <_printf_float+0xc0>
 800ee1e:	2200      	movs	r2, #0
 800ee20:	2300      	movs	r3, #0
 800ee22:	4640      	mov	r0, r8
 800ee24:	4649      	mov	r1, r9
 800ee26:	f7f1 fe81 	bl	8000b2c <__aeabi_dcmplt>
 800ee2a:	b110      	cbz	r0, 800ee32 <_printf_float+0x86>
 800ee2c:	232d      	movs	r3, #45	@ 0x2d
 800ee2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee32:	4a91      	ldr	r2, [pc, #580]	@ (800f078 <_printf_float+0x2cc>)
 800ee34:	4b91      	ldr	r3, [pc, #580]	@ (800f07c <_printf_float+0x2d0>)
 800ee36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ee3a:	bf94      	ite	ls
 800ee3c:	4690      	movls	r8, r2
 800ee3e:	4698      	movhi	r8, r3
 800ee40:	2303      	movs	r3, #3
 800ee42:	6123      	str	r3, [r4, #16]
 800ee44:	f02b 0304 	bic.w	r3, fp, #4
 800ee48:	6023      	str	r3, [r4, #0]
 800ee4a:	f04f 0900 	mov.w	r9, #0
 800ee4e:	9700      	str	r7, [sp, #0]
 800ee50:	4633      	mov	r3, r6
 800ee52:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ee54:	4621      	mov	r1, r4
 800ee56:	4628      	mov	r0, r5
 800ee58:	f000 f9d2 	bl	800f200 <_printf_common>
 800ee5c:	3001      	adds	r0, #1
 800ee5e:	f040 808d 	bne.w	800ef7c <_printf_float+0x1d0>
 800ee62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee66:	b00d      	add	sp, #52	@ 0x34
 800ee68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee6c:	4642      	mov	r2, r8
 800ee6e:	464b      	mov	r3, r9
 800ee70:	4640      	mov	r0, r8
 800ee72:	4649      	mov	r1, r9
 800ee74:	f7f1 fe82 	bl	8000b7c <__aeabi_dcmpun>
 800ee78:	b140      	cbz	r0, 800ee8c <_printf_float+0xe0>
 800ee7a:	464b      	mov	r3, r9
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	bfbc      	itt	lt
 800ee80:	232d      	movlt	r3, #45	@ 0x2d
 800ee82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ee86:	4a7e      	ldr	r2, [pc, #504]	@ (800f080 <_printf_float+0x2d4>)
 800ee88:	4b7e      	ldr	r3, [pc, #504]	@ (800f084 <_printf_float+0x2d8>)
 800ee8a:	e7d4      	b.n	800ee36 <_printf_float+0x8a>
 800ee8c:	6863      	ldr	r3, [r4, #4]
 800ee8e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ee92:	9206      	str	r2, [sp, #24]
 800ee94:	1c5a      	adds	r2, r3, #1
 800ee96:	d13b      	bne.n	800ef10 <_printf_float+0x164>
 800ee98:	2306      	movs	r3, #6
 800ee9a:	6063      	str	r3, [r4, #4]
 800ee9c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eea0:	2300      	movs	r3, #0
 800eea2:	6022      	str	r2, [r4, #0]
 800eea4:	9303      	str	r3, [sp, #12]
 800eea6:	ab0a      	add	r3, sp, #40	@ 0x28
 800eea8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800eeac:	ab09      	add	r3, sp, #36	@ 0x24
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	6861      	ldr	r1, [r4, #4]
 800eeb2:	ec49 8b10 	vmov	d0, r8, r9
 800eeb6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800eeba:	4628      	mov	r0, r5
 800eebc:	f7ff fed6 	bl	800ec6c <__cvt>
 800eec0:	9b06      	ldr	r3, [sp, #24]
 800eec2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eec4:	2b47      	cmp	r3, #71	@ 0x47
 800eec6:	4680      	mov	r8, r0
 800eec8:	d129      	bne.n	800ef1e <_printf_float+0x172>
 800eeca:	1cc8      	adds	r0, r1, #3
 800eecc:	db02      	blt.n	800eed4 <_printf_float+0x128>
 800eece:	6863      	ldr	r3, [r4, #4]
 800eed0:	4299      	cmp	r1, r3
 800eed2:	dd41      	ble.n	800ef58 <_printf_float+0x1ac>
 800eed4:	f1aa 0a02 	sub.w	sl, sl, #2
 800eed8:	fa5f fa8a 	uxtb.w	sl, sl
 800eedc:	3901      	subs	r1, #1
 800eede:	4652      	mov	r2, sl
 800eee0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eee4:	9109      	str	r1, [sp, #36]	@ 0x24
 800eee6:	f7ff ff26 	bl	800ed36 <__exponent>
 800eeea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eeec:	1813      	adds	r3, r2, r0
 800eeee:	2a01      	cmp	r2, #1
 800eef0:	4681      	mov	r9, r0
 800eef2:	6123      	str	r3, [r4, #16]
 800eef4:	dc02      	bgt.n	800eefc <_printf_float+0x150>
 800eef6:	6822      	ldr	r2, [r4, #0]
 800eef8:	07d2      	lsls	r2, r2, #31
 800eefa:	d501      	bpl.n	800ef00 <_printf_float+0x154>
 800eefc:	3301      	adds	r3, #1
 800eefe:	6123      	str	r3, [r4, #16]
 800ef00:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d0a2      	beq.n	800ee4e <_printf_float+0xa2>
 800ef08:	232d      	movs	r3, #45	@ 0x2d
 800ef0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef0e:	e79e      	b.n	800ee4e <_printf_float+0xa2>
 800ef10:	9a06      	ldr	r2, [sp, #24]
 800ef12:	2a47      	cmp	r2, #71	@ 0x47
 800ef14:	d1c2      	bne.n	800ee9c <_printf_float+0xf0>
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1c0      	bne.n	800ee9c <_printf_float+0xf0>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e7bd      	b.n	800ee9a <_printf_float+0xee>
 800ef1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ef22:	d9db      	bls.n	800eedc <_printf_float+0x130>
 800ef24:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ef28:	d118      	bne.n	800ef5c <_printf_float+0x1b0>
 800ef2a:	2900      	cmp	r1, #0
 800ef2c:	6863      	ldr	r3, [r4, #4]
 800ef2e:	dd0b      	ble.n	800ef48 <_printf_float+0x19c>
 800ef30:	6121      	str	r1, [r4, #16]
 800ef32:	b913      	cbnz	r3, 800ef3a <_printf_float+0x18e>
 800ef34:	6822      	ldr	r2, [r4, #0]
 800ef36:	07d0      	lsls	r0, r2, #31
 800ef38:	d502      	bpl.n	800ef40 <_printf_float+0x194>
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	440b      	add	r3, r1
 800ef3e:	6123      	str	r3, [r4, #16]
 800ef40:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ef42:	f04f 0900 	mov.w	r9, #0
 800ef46:	e7db      	b.n	800ef00 <_printf_float+0x154>
 800ef48:	b913      	cbnz	r3, 800ef50 <_printf_float+0x1a4>
 800ef4a:	6822      	ldr	r2, [r4, #0]
 800ef4c:	07d2      	lsls	r2, r2, #31
 800ef4e:	d501      	bpl.n	800ef54 <_printf_float+0x1a8>
 800ef50:	3302      	adds	r3, #2
 800ef52:	e7f4      	b.n	800ef3e <_printf_float+0x192>
 800ef54:	2301      	movs	r3, #1
 800ef56:	e7f2      	b.n	800ef3e <_printf_float+0x192>
 800ef58:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ef5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef5e:	4299      	cmp	r1, r3
 800ef60:	db05      	blt.n	800ef6e <_printf_float+0x1c2>
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	6121      	str	r1, [r4, #16]
 800ef66:	07d8      	lsls	r0, r3, #31
 800ef68:	d5ea      	bpl.n	800ef40 <_printf_float+0x194>
 800ef6a:	1c4b      	adds	r3, r1, #1
 800ef6c:	e7e7      	b.n	800ef3e <_printf_float+0x192>
 800ef6e:	2900      	cmp	r1, #0
 800ef70:	bfd4      	ite	le
 800ef72:	f1c1 0202 	rsble	r2, r1, #2
 800ef76:	2201      	movgt	r2, #1
 800ef78:	4413      	add	r3, r2
 800ef7a:	e7e0      	b.n	800ef3e <_printf_float+0x192>
 800ef7c:	6823      	ldr	r3, [r4, #0]
 800ef7e:	055a      	lsls	r2, r3, #21
 800ef80:	d407      	bmi.n	800ef92 <_printf_float+0x1e6>
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	4642      	mov	r2, r8
 800ef86:	4631      	mov	r1, r6
 800ef88:	4628      	mov	r0, r5
 800ef8a:	47b8      	blx	r7
 800ef8c:	3001      	adds	r0, #1
 800ef8e:	d12b      	bne.n	800efe8 <_printf_float+0x23c>
 800ef90:	e767      	b.n	800ee62 <_printf_float+0xb6>
 800ef92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ef96:	f240 80dd 	bls.w	800f154 <_printf_float+0x3a8>
 800ef9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ef9e:	2200      	movs	r2, #0
 800efa0:	2300      	movs	r3, #0
 800efa2:	f7f1 fdb9 	bl	8000b18 <__aeabi_dcmpeq>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d033      	beq.n	800f012 <_printf_float+0x266>
 800efaa:	4a37      	ldr	r2, [pc, #220]	@ (800f088 <_printf_float+0x2dc>)
 800efac:	2301      	movs	r3, #1
 800efae:	4631      	mov	r1, r6
 800efb0:	4628      	mov	r0, r5
 800efb2:	47b8      	blx	r7
 800efb4:	3001      	adds	r0, #1
 800efb6:	f43f af54 	beq.w	800ee62 <_printf_float+0xb6>
 800efba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800efbe:	4543      	cmp	r3, r8
 800efc0:	db02      	blt.n	800efc8 <_printf_float+0x21c>
 800efc2:	6823      	ldr	r3, [r4, #0]
 800efc4:	07d8      	lsls	r0, r3, #31
 800efc6:	d50f      	bpl.n	800efe8 <_printf_float+0x23c>
 800efc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efcc:	4631      	mov	r1, r6
 800efce:	4628      	mov	r0, r5
 800efd0:	47b8      	blx	r7
 800efd2:	3001      	adds	r0, #1
 800efd4:	f43f af45 	beq.w	800ee62 <_printf_float+0xb6>
 800efd8:	f04f 0900 	mov.w	r9, #0
 800efdc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800efe0:	f104 0a1a 	add.w	sl, r4, #26
 800efe4:	45c8      	cmp	r8, r9
 800efe6:	dc09      	bgt.n	800effc <_printf_float+0x250>
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	079b      	lsls	r3, r3, #30
 800efec:	f100 8103 	bmi.w	800f1f6 <_printf_float+0x44a>
 800eff0:	68e0      	ldr	r0, [r4, #12]
 800eff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eff4:	4298      	cmp	r0, r3
 800eff6:	bfb8      	it	lt
 800eff8:	4618      	movlt	r0, r3
 800effa:	e734      	b.n	800ee66 <_printf_float+0xba>
 800effc:	2301      	movs	r3, #1
 800effe:	4652      	mov	r2, sl
 800f000:	4631      	mov	r1, r6
 800f002:	4628      	mov	r0, r5
 800f004:	47b8      	blx	r7
 800f006:	3001      	adds	r0, #1
 800f008:	f43f af2b 	beq.w	800ee62 <_printf_float+0xb6>
 800f00c:	f109 0901 	add.w	r9, r9, #1
 800f010:	e7e8      	b.n	800efe4 <_printf_float+0x238>
 800f012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f014:	2b00      	cmp	r3, #0
 800f016:	dc39      	bgt.n	800f08c <_printf_float+0x2e0>
 800f018:	4a1b      	ldr	r2, [pc, #108]	@ (800f088 <_printf_float+0x2dc>)
 800f01a:	2301      	movs	r3, #1
 800f01c:	4631      	mov	r1, r6
 800f01e:	4628      	mov	r0, r5
 800f020:	47b8      	blx	r7
 800f022:	3001      	adds	r0, #1
 800f024:	f43f af1d 	beq.w	800ee62 <_printf_float+0xb6>
 800f028:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f02c:	ea59 0303 	orrs.w	r3, r9, r3
 800f030:	d102      	bne.n	800f038 <_printf_float+0x28c>
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	07d9      	lsls	r1, r3, #31
 800f036:	d5d7      	bpl.n	800efe8 <_printf_float+0x23c>
 800f038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f03c:	4631      	mov	r1, r6
 800f03e:	4628      	mov	r0, r5
 800f040:	47b8      	blx	r7
 800f042:	3001      	adds	r0, #1
 800f044:	f43f af0d 	beq.w	800ee62 <_printf_float+0xb6>
 800f048:	f04f 0a00 	mov.w	sl, #0
 800f04c:	f104 0b1a 	add.w	fp, r4, #26
 800f050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f052:	425b      	negs	r3, r3
 800f054:	4553      	cmp	r3, sl
 800f056:	dc01      	bgt.n	800f05c <_printf_float+0x2b0>
 800f058:	464b      	mov	r3, r9
 800f05a:	e793      	b.n	800ef84 <_printf_float+0x1d8>
 800f05c:	2301      	movs	r3, #1
 800f05e:	465a      	mov	r2, fp
 800f060:	4631      	mov	r1, r6
 800f062:	4628      	mov	r0, r5
 800f064:	47b8      	blx	r7
 800f066:	3001      	adds	r0, #1
 800f068:	f43f aefb 	beq.w	800ee62 <_printf_float+0xb6>
 800f06c:	f10a 0a01 	add.w	sl, sl, #1
 800f070:	e7ee      	b.n	800f050 <_printf_float+0x2a4>
 800f072:	bf00      	nop
 800f074:	7fefffff 	.word	0x7fefffff
 800f078:	08011da4 	.word	0x08011da4
 800f07c:	08011da8 	.word	0x08011da8
 800f080:	08011dac 	.word	0x08011dac
 800f084:	08011db0 	.word	0x08011db0
 800f088:	08011db4 	.word	0x08011db4
 800f08c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f08e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f092:	4553      	cmp	r3, sl
 800f094:	bfa8      	it	ge
 800f096:	4653      	movge	r3, sl
 800f098:	2b00      	cmp	r3, #0
 800f09a:	4699      	mov	r9, r3
 800f09c:	dc36      	bgt.n	800f10c <_printf_float+0x360>
 800f09e:	f04f 0b00 	mov.w	fp, #0
 800f0a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0a6:	f104 021a 	add.w	r2, r4, #26
 800f0aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f0ac:	9306      	str	r3, [sp, #24]
 800f0ae:	eba3 0309 	sub.w	r3, r3, r9
 800f0b2:	455b      	cmp	r3, fp
 800f0b4:	dc31      	bgt.n	800f11a <_printf_float+0x36e>
 800f0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0b8:	459a      	cmp	sl, r3
 800f0ba:	dc3a      	bgt.n	800f132 <_printf_float+0x386>
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	07da      	lsls	r2, r3, #31
 800f0c0:	d437      	bmi.n	800f132 <_printf_float+0x386>
 800f0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0c4:	ebaa 0903 	sub.w	r9, sl, r3
 800f0c8:	9b06      	ldr	r3, [sp, #24]
 800f0ca:	ebaa 0303 	sub.w	r3, sl, r3
 800f0ce:	4599      	cmp	r9, r3
 800f0d0:	bfa8      	it	ge
 800f0d2:	4699      	movge	r9, r3
 800f0d4:	f1b9 0f00 	cmp.w	r9, #0
 800f0d8:	dc33      	bgt.n	800f142 <_printf_float+0x396>
 800f0da:	f04f 0800 	mov.w	r8, #0
 800f0de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0e2:	f104 0b1a 	add.w	fp, r4, #26
 800f0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0e8:	ebaa 0303 	sub.w	r3, sl, r3
 800f0ec:	eba3 0309 	sub.w	r3, r3, r9
 800f0f0:	4543      	cmp	r3, r8
 800f0f2:	f77f af79 	ble.w	800efe8 <_printf_float+0x23c>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	465a      	mov	r2, fp
 800f0fa:	4631      	mov	r1, r6
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	47b8      	blx	r7
 800f100:	3001      	adds	r0, #1
 800f102:	f43f aeae 	beq.w	800ee62 <_printf_float+0xb6>
 800f106:	f108 0801 	add.w	r8, r8, #1
 800f10a:	e7ec      	b.n	800f0e6 <_printf_float+0x33a>
 800f10c:	4642      	mov	r2, r8
 800f10e:	4631      	mov	r1, r6
 800f110:	4628      	mov	r0, r5
 800f112:	47b8      	blx	r7
 800f114:	3001      	adds	r0, #1
 800f116:	d1c2      	bne.n	800f09e <_printf_float+0x2f2>
 800f118:	e6a3      	b.n	800ee62 <_printf_float+0xb6>
 800f11a:	2301      	movs	r3, #1
 800f11c:	4631      	mov	r1, r6
 800f11e:	4628      	mov	r0, r5
 800f120:	9206      	str	r2, [sp, #24]
 800f122:	47b8      	blx	r7
 800f124:	3001      	adds	r0, #1
 800f126:	f43f ae9c 	beq.w	800ee62 <_printf_float+0xb6>
 800f12a:	9a06      	ldr	r2, [sp, #24]
 800f12c:	f10b 0b01 	add.w	fp, fp, #1
 800f130:	e7bb      	b.n	800f0aa <_printf_float+0x2fe>
 800f132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f136:	4631      	mov	r1, r6
 800f138:	4628      	mov	r0, r5
 800f13a:	47b8      	blx	r7
 800f13c:	3001      	adds	r0, #1
 800f13e:	d1c0      	bne.n	800f0c2 <_printf_float+0x316>
 800f140:	e68f      	b.n	800ee62 <_printf_float+0xb6>
 800f142:	9a06      	ldr	r2, [sp, #24]
 800f144:	464b      	mov	r3, r9
 800f146:	4442      	add	r2, r8
 800f148:	4631      	mov	r1, r6
 800f14a:	4628      	mov	r0, r5
 800f14c:	47b8      	blx	r7
 800f14e:	3001      	adds	r0, #1
 800f150:	d1c3      	bne.n	800f0da <_printf_float+0x32e>
 800f152:	e686      	b.n	800ee62 <_printf_float+0xb6>
 800f154:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f158:	f1ba 0f01 	cmp.w	sl, #1
 800f15c:	dc01      	bgt.n	800f162 <_printf_float+0x3b6>
 800f15e:	07db      	lsls	r3, r3, #31
 800f160:	d536      	bpl.n	800f1d0 <_printf_float+0x424>
 800f162:	2301      	movs	r3, #1
 800f164:	4642      	mov	r2, r8
 800f166:	4631      	mov	r1, r6
 800f168:	4628      	mov	r0, r5
 800f16a:	47b8      	blx	r7
 800f16c:	3001      	adds	r0, #1
 800f16e:	f43f ae78 	beq.w	800ee62 <_printf_float+0xb6>
 800f172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f176:	4631      	mov	r1, r6
 800f178:	4628      	mov	r0, r5
 800f17a:	47b8      	blx	r7
 800f17c:	3001      	adds	r0, #1
 800f17e:	f43f ae70 	beq.w	800ee62 <_printf_float+0xb6>
 800f182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f186:	2200      	movs	r2, #0
 800f188:	2300      	movs	r3, #0
 800f18a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f18e:	f7f1 fcc3 	bl	8000b18 <__aeabi_dcmpeq>
 800f192:	b9c0      	cbnz	r0, 800f1c6 <_printf_float+0x41a>
 800f194:	4653      	mov	r3, sl
 800f196:	f108 0201 	add.w	r2, r8, #1
 800f19a:	4631      	mov	r1, r6
 800f19c:	4628      	mov	r0, r5
 800f19e:	47b8      	blx	r7
 800f1a0:	3001      	adds	r0, #1
 800f1a2:	d10c      	bne.n	800f1be <_printf_float+0x412>
 800f1a4:	e65d      	b.n	800ee62 <_printf_float+0xb6>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	465a      	mov	r2, fp
 800f1aa:	4631      	mov	r1, r6
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	47b8      	blx	r7
 800f1b0:	3001      	adds	r0, #1
 800f1b2:	f43f ae56 	beq.w	800ee62 <_printf_float+0xb6>
 800f1b6:	f108 0801 	add.w	r8, r8, #1
 800f1ba:	45d0      	cmp	r8, sl
 800f1bc:	dbf3      	blt.n	800f1a6 <_printf_float+0x3fa>
 800f1be:	464b      	mov	r3, r9
 800f1c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f1c4:	e6df      	b.n	800ef86 <_printf_float+0x1da>
 800f1c6:	f04f 0800 	mov.w	r8, #0
 800f1ca:	f104 0b1a 	add.w	fp, r4, #26
 800f1ce:	e7f4      	b.n	800f1ba <_printf_float+0x40e>
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	4642      	mov	r2, r8
 800f1d4:	e7e1      	b.n	800f19a <_printf_float+0x3ee>
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	464a      	mov	r2, r9
 800f1da:	4631      	mov	r1, r6
 800f1dc:	4628      	mov	r0, r5
 800f1de:	47b8      	blx	r7
 800f1e0:	3001      	adds	r0, #1
 800f1e2:	f43f ae3e 	beq.w	800ee62 <_printf_float+0xb6>
 800f1e6:	f108 0801 	add.w	r8, r8, #1
 800f1ea:	68e3      	ldr	r3, [r4, #12]
 800f1ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f1ee:	1a5b      	subs	r3, r3, r1
 800f1f0:	4543      	cmp	r3, r8
 800f1f2:	dcf0      	bgt.n	800f1d6 <_printf_float+0x42a>
 800f1f4:	e6fc      	b.n	800eff0 <_printf_float+0x244>
 800f1f6:	f04f 0800 	mov.w	r8, #0
 800f1fa:	f104 0919 	add.w	r9, r4, #25
 800f1fe:	e7f4      	b.n	800f1ea <_printf_float+0x43e>

0800f200 <_printf_common>:
 800f200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f204:	4616      	mov	r6, r2
 800f206:	4698      	mov	r8, r3
 800f208:	688a      	ldr	r2, [r1, #8]
 800f20a:	690b      	ldr	r3, [r1, #16]
 800f20c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f210:	4293      	cmp	r3, r2
 800f212:	bfb8      	it	lt
 800f214:	4613      	movlt	r3, r2
 800f216:	6033      	str	r3, [r6, #0]
 800f218:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f21c:	4607      	mov	r7, r0
 800f21e:	460c      	mov	r4, r1
 800f220:	b10a      	cbz	r2, 800f226 <_printf_common+0x26>
 800f222:	3301      	adds	r3, #1
 800f224:	6033      	str	r3, [r6, #0]
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	0699      	lsls	r1, r3, #26
 800f22a:	bf42      	ittt	mi
 800f22c:	6833      	ldrmi	r3, [r6, #0]
 800f22e:	3302      	addmi	r3, #2
 800f230:	6033      	strmi	r3, [r6, #0]
 800f232:	6825      	ldr	r5, [r4, #0]
 800f234:	f015 0506 	ands.w	r5, r5, #6
 800f238:	d106      	bne.n	800f248 <_printf_common+0x48>
 800f23a:	f104 0a19 	add.w	sl, r4, #25
 800f23e:	68e3      	ldr	r3, [r4, #12]
 800f240:	6832      	ldr	r2, [r6, #0]
 800f242:	1a9b      	subs	r3, r3, r2
 800f244:	42ab      	cmp	r3, r5
 800f246:	dc26      	bgt.n	800f296 <_printf_common+0x96>
 800f248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f24c:	6822      	ldr	r2, [r4, #0]
 800f24e:	3b00      	subs	r3, #0
 800f250:	bf18      	it	ne
 800f252:	2301      	movne	r3, #1
 800f254:	0692      	lsls	r2, r2, #26
 800f256:	d42b      	bmi.n	800f2b0 <_printf_common+0xb0>
 800f258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f25c:	4641      	mov	r1, r8
 800f25e:	4638      	mov	r0, r7
 800f260:	47c8      	blx	r9
 800f262:	3001      	adds	r0, #1
 800f264:	d01e      	beq.n	800f2a4 <_printf_common+0xa4>
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	6922      	ldr	r2, [r4, #16]
 800f26a:	f003 0306 	and.w	r3, r3, #6
 800f26e:	2b04      	cmp	r3, #4
 800f270:	bf02      	ittt	eq
 800f272:	68e5      	ldreq	r5, [r4, #12]
 800f274:	6833      	ldreq	r3, [r6, #0]
 800f276:	1aed      	subeq	r5, r5, r3
 800f278:	68a3      	ldr	r3, [r4, #8]
 800f27a:	bf0c      	ite	eq
 800f27c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f280:	2500      	movne	r5, #0
 800f282:	4293      	cmp	r3, r2
 800f284:	bfc4      	itt	gt
 800f286:	1a9b      	subgt	r3, r3, r2
 800f288:	18ed      	addgt	r5, r5, r3
 800f28a:	2600      	movs	r6, #0
 800f28c:	341a      	adds	r4, #26
 800f28e:	42b5      	cmp	r5, r6
 800f290:	d11a      	bne.n	800f2c8 <_printf_common+0xc8>
 800f292:	2000      	movs	r0, #0
 800f294:	e008      	b.n	800f2a8 <_printf_common+0xa8>
 800f296:	2301      	movs	r3, #1
 800f298:	4652      	mov	r2, sl
 800f29a:	4641      	mov	r1, r8
 800f29c:	4638      	mov	r0, r7
 800f29e:	47c8      	blx	r9
 800f2a0:	3001      	adds	r0, #1
 800f2a2:	d103      	bne.n	800f2ac <_printf_common+0xac>
 800f2a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ac:	3501      	adds	r5, #1
 800f2ae:	e7c6      	b.n	800f23e <_printf_common+0x3e>
 800f2b0:	18e1      	adds	r1, r4, r3
 800f2b2:	1c5a      	adds	r2, r3, #1
 800f2b4:	2030      	movs	r0, #48	@ 0x30
 800f2b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f2ba:	4422      	add	r2, r4
 800f2bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f2c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f2c4:	3302      	adds	r3, #2
 800f2c6:	e7c7      	b.n	800f258 <_printf_common+0x58>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	4622      	mov	r2, r4
 800f2cc:	4641      	mov	r1, r8
 800f2ce:	4638      	mov	r0, r7
 800f2d0:	47c8      	blx	r9
 800f2d2:	3001      	adds	r0, #1
 800f2d4:	d0e6      	beq.n	800f2a4 <_printf_common+0xa4>
 800f2d6:	3601      	adds	r6, #1
 800f2d8:	e7d9      	b.n	800f28e <_printf_common+0x8e>
	...

0800f2dc <_printf_i>:
 800f2dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2e0:	7e0f      	ldrb	r7, [r1, #24]
 800f2e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f2e4:	2f78      	cmp	r7, #120	@ 0x78
 800f2e6:	4691      	mov	r9, r2
 800f2e8:	4680      	mov	r8, r0
 800f2ea:	460c      	mov	r4, r1
 800f2ec:	469a      	mov	sl, r3
 800f2ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f2f2:	d807      	bhi.n	800f304 <_printf_i+0x28>
 800f2f4:	2f62      	cmp	r7, #98	@ 0x62
 800f2f6:	d80a      	bhi.n	800f30e <_printf_i+0x32>
 800f2f8:	2f00      	cmp	r7, #0
 800f2fa:	f000 80d2 	beq.w	800f4a2 <_printf_i+0x1c6>
 800f2fe:	2f58      	cmp	r7, #88	@ 0x58
 800f300:	f000 80b9 	beq.w	800f476 <_printf_i+0x19a>
 800f304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f308:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f30c:	e03a      	b.n	800f384 <_printf_i+0xa8>
 800f30e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f312:	2b15      	cmp	r3, #21
 800f314:	d8f6      	bhi.n	800f304 <_printf_i+0x28>
 800f316:	a101      	add	r1, pc, #4	@ (adr r1, 800f31c <_printf_i+0x40>)
 800f318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f31c:	0800f375 	.word	0x0800f375
 800f320:	0800f389 	.word	0x0800f389
 800f324:	0800f305 	.word	0x0800f305
 800f328:	0800f305 	.word	0x0800f305
 800f32c:	0800f305 	.word	0x0800f305
 800f330:	0800f305 	.word	0x0800f305
 800f334:	0800f389 	.word	0x0800f389
 800f338:	0800f305 	.word	0x0800f305
 800f33c:	0800f305 	.word	0x0800f305
 800f340:	0800f305 	.word	0x0800f305
 800f344:	0800f305 	.word	0x0800f305
 800f348:	0800f489 	.word	0x0800f489
 800f34c:	0800f3b3 	.word	0x0800f3b3
 800f350:	0800f443 	.word	0x0800f443
 800f354:	0800f305 	.word	0x0800f305
 800f358:	0800f305 	.word	0x0800f305
 800f35c:	0800f4ab 	.word	0x0800f4ab
 800f360:	0800f305 	.word	0x0800f305
 800f364:	0800f3b3 	.word	0x0800f3b3
 800f368:	0800f305 	.word	0x0800f305
 800f36c:	0800f305 	.word	0x0800f305
 800f370:	0800f44b 	.word	0x0800f44b
 800f374:	6833      	ldr	r3, [r6, #0]
 800f376:	1d1a      	adds	r2, r3, #4
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	6032      	str	r2, [r6, #0]
 800f37c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f380:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f384:	2301      	movs	r3, #1
 800f386:	e09d      	b.n	800f4c4 <_printf_i+0x1e8>
 800f388:	6833      	ldr	r3, [r6, #0]
 800f38a:	6820      	ldr	r0, [r4, #0]
 800f38c:	1d19      	adds	r1, r3, #4
 800f38e:	6031      	str	r1, [r6, #0]
 800f390:	0606      	lsls	r6, r0, #24
 800f392:	d501      	bpl.n	800f398 <_printf_i+0xbc>
 800f394:	681d      	ldr	r5, [r3, #0]
 800f396:	e003      	b.n	800f3a0 <_printf_i+0xc4>
 800f398:	0645      	lsls	r5, r0, #25
 800f39a:	d5fb      	bpl.n	800f394 <_printf_i+0xb8>
 800f39c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f3a0:	2d00      	cmp	r5, #0
 800f3a2:	da03      	bge.n	800f3ac <_printf_i+0xd0>
 800f3a4:	232d      	movs	r3, #45	@ 0x2d
 800f3a6:	426d      	negs	r5, r5
 800f3a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3ac:	4859      	ldr	r0, [pc, #356]	@ (800f514 <_printf_i+0x238>)
 800f3ae:	230a      	movs	r3, #10
 800f3b0:	e011      	b.n	800f3d6 <_printf_i+0xfa>
 800f3b2:	6821      	ldr	r1, [r4, #0]
 800f3b4:	6833      	ldr	r3, [r6, #0]
 800f3b6:	0608      	lsls	r0, r1, #24
 800f3b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f3bc:	d402      	bmi.n	800f3c4 <_printf_i+0xe8>
 800f3be:	0649      	lsls	r1, r1, #25
 800f3c0:	bf48      	it	mi
 800f3c2:	b2ad      	uxthmi	r5, r5
 800f3c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f3c6:	4853      	ldr	r0, [pc, #332]	@ (800f514 <_printf_i+0x238>)
 800f3c8:	6033      	str	r3, [r6, #0]
 800f3ca:	bf14      	ite	ne
 800f3cc:	230a      	movne	r3, #10
 800f3ce:	2308      	moveq	r3, #8
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f3d6:	6866      	ldr	r6, [r4, #4]
 800f3d8:	60a6      	str	r6, [r4, #8]
 800f3da:	2e00      	cmp	r6, #0
 800f3dc:	bfa2      	ittt	ge
 800f3de:	6821      	ldrge	r1, [r4, #0]
 800f3e0:	f021 0104 	bicge.w	r1, r1, #4
 800f3e4:	6021      	strge	r1, [r4, #0]
 800f3e6:	b90d      	cbnz	r5, 800f3ec <_printf_i+0x110>
 800f3e8:	2e00      	cmp	r6, #0
 800f3ea:	d04b      	beq.n	800f484 <_printf_i+0x1a8>
 800f3ec:	4616      	mov	r6, r2
 800f3ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800f3f2:	fb03 5711 	mls	r7, r3, r1, r5
 800f3f6:	5dc7      	ldrb	r7, [r0, r7]
 800f3f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f3fc:	462f      	mov	r7, r5
 800f3fe:	42bb      	cmp	r3, r7
 800f400:	460d      	mov	r5, r1
 800f402:	d9f4      	bls.n	800f3ee <_printf_i+0x112>
 800f404:	2b08      	cmp	r3, #8
 800f406:	d10b      	bne.n	800f420 <_printf_i+0x144>
 800f408:	6823      	ldr	r3, [r4, #0]
 800f40a:	07df      	lsls	r7, r3, #31
 800f40c:	d508      	bpl.n	800f420 <_printf_i+0x144>
 800f40e:	6923      	ldr	r3, [r4, #16]
 800f410:	6861      	ldr	r1, [r4, #4]
 800f412:	4299      	cmp	r1, r3
 800f414:	bfde      	ittt	le
 800f416:	2330      	movle	r3, #48	@ 0x30
 800f418:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f41c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f420:	1b92      	subs	r2, r2, r6
 800f422:	6122      	str	r2, [r4, #16]
 800f424:	f8cd a000 	str.w	sl, [sp]
 800f428:	464b      	mov	r3, r9
 800f42a:	aa03      	add	r2, sp, #12
 800f42c:	4621      	mov	r1, r4
 800f42e:	4640      	mov	r0, r8
 800f430:	f7ff fee6 	bl	800f200 <_printf_common>
 800f434:	3001      	adds	r0, #1
 800f436:	d14a      	bne.n	800f4ce <_printf_i+0x1f2>
 800f438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f43c:	b004      	add	sp, #16
 800f43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	f043 0320 	orr.w	r3, r3, #32
 800f448:	6023      	str	r3, [r4, #0]
 800f44a:	4833      	ldr	r0, [pc, #204]	@ (800f518 <_printf_i+0x23c>)
 800f44c:	2778      	movs	r7, #120	@ 0x78
 800f44e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f452:	6823      	ldr	r3, [r4, #0]
 800f454:	6831      	ldr	r1, [r6, #0]
 800f456:	061f      	lsls	r7, r3, #24
 800f458:	f851 5b04 	ldr.w	r5, [r1], #4
 800f45c:	d402      	bmi.n	800f464 <_printf_i+0x188>
 800f45e:	065f      	lsls	r7, r3, #25
 800f460:	bf48      	it	mi
 800f462:	b2ad      	uxthmi	r5, r5
 800f464:	6031      	str	r1, [r6, #0]
 800f466:	07d9      	lsls	r1, r3, #31
 800f468:	bf44      	itt	mi
 800f46a:	f043 0320 	orrmi.w	r3, r3, #32
 800f46e:	6023      	strmi	r3, [r4, #0]
 800f470:	b11d      	cbz	r5, 800f47a <_printf_i+0x19e>
 800f472:	2310      	movs	r3, #16
 800f474:	e7ac      	b.n	800f3d0 <_printf_i+0xf4>
 800f476:	4827      	ldr	r0, [pc, #156]	@ (800f514 <_printf_i+0x238>)
 800f478:	e7e9      	b.n	800f44e <_printf_i+0x172>
 800f47a:	6823      	ldr	r3, [r4, #0]
 800f47c:	f023 0320 	bic.w	r3, r3, #32
 800f480:	6023      	str	r3, [r4, #0]
 800f482:	e7f6      	b.n	800f472 <_printf_i+0x196>
 800f484:	4616      	mov	r6, r2
 800f486:	e7bd      	b.n	800f404 <_printf_i+0x128>
 800f488:	6833      	ldr	r3, [r6, #0]
 800f48a:	6825      	ldr	r5, [r4, #0]
 800f48c:	6961      	ldr	r1, [r4, #20]
 800f48e:	1d18      	adds	r0, r3, #4
 800f490:	6030      	str	r0, [r6, #0]
 800f492:	062e      	lsls	r6, r5, #24
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	d501      	bpl.n	800f49c <_printf_i+0x1c0>
 800f498:	6019      	str	r1, [r3, #0]
 800f49a:	e002      	b.n	800f4a2 <_printf_i+0x1c6>
 800f49c:	0668      	lsls	r0, r5, #25
 800f49e:	d5fb      	bpl.n	800f498 <_printf_i+0x1bc>
 800f4a0:	8019      	strh	r1, [r3, #0]
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	6123      	str	r3, [r4, #16]
 800f4a6:	4616      	mov	r6, r2
 800f4a8:	e7bc      	b.n	800f424 <_printf_i+0x148>
 800f4aa:	6833      	ldr	r3, [r6, #0]
 800f4ac:	1d1a      	adds	r2, r3, #4
 800f4ae:	6032      	str	r2, [r6, #0]
 800f4b0:	681e      	ldr	r6, [r3, #0]
 800f4b2:	6862      	ldr	r2, [r4, #4]
 800f4b4:	2100      	movs	r1, #0
 800f4b6:	4630      	mov	r0, r6
 800f4b8:	f7f0 feb2 	bl	8000220 <memchr>
 800f4bc:	b108      	cbz	r0, 800f4c2 <_printf_i+0x1e6>
 800f4be:	1b80      	subs	r0, r0, r6
 800f4c0:	6060      	str	r0, [r4, #4]
 800f4c2:	6863      	ldr	r3, [r4, #4]
 800f4c4:	6123      	str	r3, [r4, #16]
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4cc:	e7aa      	b.n	800f424 <_printf_i+0x148>
 800f4ce:	6923      	ldr	r3, [r4, #16]
 800f4d0:	4632      	mov	r2, r6
 800f4d2:	4649      	mov	r1, r9
 800f4d4:	4640      	mov	r0, r8
 800f4d6:	47d0      	blx	sl
 800f4d8:	3001      	adds	r0, #1
 800f4da:	d0ad      	beq.n	800f438 <_printf_i+0x15c>
 800f4dc:	6823      	ldr	r3, [r4, #0]
 800f4de:	079b      	lsls	r3, r3, #30
 800f4e0:	d413      	bmi.n	800f50a <_printf_i+0x22e>
 800f4e2:	68e0      	ldr	r0, [r4, #12]
 800f4e4:	9b03      	ldr	r3, [sp, #12]
 800f4e6:	4298      	cmp	r0, r3
 800f4e8:	bfb8      	it	lt
 800f4ea:	4618      	movlt	r0, r3
 800f4ec:	e7a6      	b.n	800f43c <_printf_i+0x160>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	4632      	mov	r2, r6
 800f4f2:	4649      	mov	r1, r9
 800f4f4:	4640      	mov	r0, r8
 800f4f6:	47d0      	blx	sl
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	d09d      	beq.n	800f438 <_printf_i+0x15c>
 800f4fc:	3501      	adds	r5, #1
 800f4fe:	68e3      	ldr	r3, [r4, #12]
 800f500:	9903      	ldr	r1, [sp, #12]
 800f502:	1a5b      	subs	r3, r3, r1
 800f504:	42ab      	cmp	r3, r5
 800f506:	dcf2      	bgt.n	800f4ee <_printf_i+0x212>
 800f508:	e7eb      	b.n	800f4e2 <_printf_i+0x206>
 800f50a:	2500      	movs	r5, #0
 800f50c:	f104 0619 	add.w	r6, r4, #25
 800f510:	e7f5      	b.n	800f4fe <_printf_i+0x222>
 800f512:	bf00      	nop
 800f514:	08011db6 	.word	0x08011db6
 800f518:	08011dc7 	.word	0x08011dc7

0800f51c <std>:
 800f51c:	2300      	movs	r3, #0
 800f51e:	b510      	push	{r4, lr}
 800f520:	4604      	mov	r4, r0
 800f522:	e9c0 3300 	strd	r3, r3, [r0]
 800f526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f52a:	6083      	str	r3, [r0, #8]
 800f52c:	8181      	strh	r1, [r0, #12]
 800f52e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f530:	81c2      	strh	r2, [r0, #14]
 800f532:	6183      	str	r3, [r0, #24]
 800f534:	4619      	mov	r1, r3
 800f536:	2208      	movs	r2, #8
 800f538:	305c      	adds	r0, #92	@ 0x5c
 800f53a:	f000 f8eb 	bl	800f714 <memset>
 800f53e:	4b0d      	ldr	r3, [pc, #52]	@ (800f574 <std+0x58>)
 800f540:	6263      	str	r3, [r4, #36]	@ 0x24
 800f542:	4b0d      	ldr	r3, [pc, #52]	@ (800f578 <std+0x5c>)
 800f544:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f546:	4b0d      	ldr	r3, [pc, #52]	@ (800f57c <std+0x60>)
 800f548:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f54a:	4b0d      	ldr	r3, [pc, #52]	@ (800f580 <std+0x64>)
 800f54c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f54e:	4b0d      	ldr	r3, [pc, #52]	@ (800f584 <std+0x68>)
 800f550:	6224      	str	r4, [r4, #32]
 800f552:	429c      	cmp	r4, r3
 800f554:	d006      	beq.n	800f564 <std+0x48>
 800f556:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f55a:	4294      	cmp	r4, r2
 800f55c:	d002      	beq.n	800f564 <std+0x48>
 800f55e:	33d0      	adds	r3, #208	@ 0xd0
 800f560:	429c      	cmp	r4, r3
 800f562:	d105      	bne.n	800f570 <std+0x54>
 800f564:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f56c:	f000 b95e 	b.w	800f82c <__retarget_lock_init_recursive>
 800f570:	bd10      	pop	{r4, pc}
 800f572:	bf00      	nop
 800f574:	080111f5 	.word	0x080111f5
 800f578:	08011217 	.word	0x08011217
 800f57c:	0801124f 	.word	0x0801124f
 800f580:	08011273 	.word	0x08011273
 800f584:	20010240 	.word	0x20010240

0800f588 <stdio_exit_handler>:
 800f588:	4a02      	ldr	r2, [pc, #8]	@ (800f594 <stdio_exit_handler+0xc>)
 800f58a:	4903      	ldr	r1, [pc, #12]	@ (800f598 <stdio_exit_handler+0x10>)
 800f58c:	4803      	ldr	r0, [pc, #12]	@ (800f59c <stdio_exit_handler+0x14>)
 800f58e:	f000 b869 	b.w	800f664 <_fwalk_sglue>
 800f592:	bf00      	nop
 800f594:	20000188 	.word	0x20000188
 800f598:	08010a89 	.word	0x08010a89
 800f59c:	20000198 	.word	0x20000198

0800f5a0 <cleanup_stdio>:
 800f5a0:	6841      	ldr	r1, [r0, #4]
 800f5a2:	4b0c      	ldr	r3, [pc, #48]	@ (800f5d4 <cleanup_stdio+0x34>)
 800f5a4:	4299      	cmp	r1, r3
 800f5a6:	b510      	push	{r4, lr}
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	d001      	beq.n	800f5b0 <cleanup_stdio+0x10>
 800f5ac:	f001 fa6c 	bl	8010a88 <_fflush_r>
 800f5b0:	68a1      	ldr	r1, [r4, #8]
 800f5b2:	4b09      	ldr	r3, [pc, #36]	@ (800f5d8 <cleanup_stdio+0x38>)
 800f5b4:	4299      	cmp	r1, r3
 800f5b6:	d002      	beq.n	800f5be <cleanup_stdio+0x1e>
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f001 fa65 	bl	8010a88 <_fflush_r>
 800f5be:	68e1      	ldr	r1, [r4, #12]
 800f5c0:	4b06      	ldr	r3, [pc, #24]	@ (800f5dc <cleanup_stdio+0x3c>)
 800f5c2:	4299      	cmp	r1, r3
 800f5c4:	d004      	beq.n	800f5d0 <cleanup_stdio+0x30>
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5cc:	f001 ba5c 	b.w	8010a88 <_fflush_r>
 800f5d0:	bd10      	pop	{r4, pc}
 800f5d2:	bf00      	nop
 800f5d4:	20010240 	.word	0x20010240
 800f5d8:	200102a8 	.word	0x200102a8
 800f5dc:	20010310 	.word	0x20010310

0800f5e0 <global_stdio_init.part.0>:
 800f5e0:	b510      	push	{r4, lr}
 800f5e2:	4b0b      	ldr	r3, [pc, #44]	@ (800f610 <global_stdio_init.part.0+0x30>)
 800f5e4:	4c0b      	ldr	r4, [pc, #44]	@ (800f614 <global_stdio_init.part.0+0x34>)
 800f5e6:	4a0c      	ldr	r2, [pc, #48]	@ (800f618 <global_stdio_init.part.0+0x38>)
 800f5e8:	601a      	str	r2, [r3, #0]
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	2104      	movs	r1, #4
 800f5f0:	f7ff ff94 	bl	800f51c <std>
 800f5f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	2109      	movs	r1, #9
 800f5fc:	f7ff ff8e 	bl	800f51c <std>
 800f600:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f604:	2202      	movs	r2, #2
 800f606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f60a:	2112      	movs	r1, #18
 800f60c:	f7ff bf86 	b.w	800f51c <std>
 800f610:	20010378 	.word	0x20010378
 800f614:	20010240 	.word	0x20010240
 800f618:	0800f589 	.word	0x0800f589

0800f61c <__sfp_lock_acquire>:
 800f61c:	4801      	ldr	r0, [pc, #4]	@ (800f624 <__sfp_lock_acquire+0x8>)
 800f61e:	f000 b906 	b.w	800f82e <__retarget_lock_acquire_recursive>
 800f622:	bf00      	nop
 800f624:	20010381 	.word	0x20010381

0800f628 <__sfp_lock_release>:
 800f628:	4801      	ldr	r0, [pc, #4]	@ (800f630 <__sfp_lock_release+0x8>)
 800f62a:	f000 b901 	b.w	800f830 <__retarget_lock_release_recursive>
 800f62e:	bf00      	nop
 800f630:	20010381 	.word	0x20010381

0800f634 <__sinit>:
 800f634:	b510      	push	{r4, lr}
 800f636:	4604      	mov	r4, r0
 800f638:	f7ff fff0 	bl	800f61c <__sfp_lock_acquire>
 800f63c:	6a23      	ldr	r3, [r4, #32]
 800f63e:	b11b      	cbz	r3, 800f648 <__sinit+0x14>
 800f640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f644:	f7ff bff0 	b.w	800f628 <__sfp_lock_release>
 800f648:	4b04      	ldr	r3, [pc, #16]	@ (800f65c <__sinit+0x28>)
 800f64a:	6223      	str	r3, [r4, #32]
 800f64c:	4b04      	ldr	r3, [pc, #16]	@ (800f660 <__sinit+0x2c>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1f5      	bne.n	800f640 <__sinit+0xc>
 800f654:	f7ff ffc4 	bl	800f5e0 <global_stdio_init.part.0>
 800f658:	e7f2      	b.n	800f640 <__sinit+0xc>
 800f65a:	bf00      	nop
 800f65c:	0800f5a1 	.word	0x0800f5a1
 800f660:	20010378 	.word	0x20010378

0800f664 <_fwalk_sglue>:
 800f664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f668:	4607      	mov	r7, r0
 800f66a:	4688      	mov	r8, r1
 800f66c:	4614      	mov	r4, r2
 800f66e:	2600      	movs	r6, #0
 800f670:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f674:	f1b9 0901 	subs.w	r9, r9, #1
 800f678:	d505      	bpl.n	800f686 <_fwalk_sglue+0x22>
 800f67a:	6824      	ldr	r4, [r4, #0]
 800f67c:	2c00      	cmp	r4, #0
 800f67e:	d1f7      	bne.n	800f670 <_fwalk_sglue+0xc>
 800f680:	4630      	mov	r0, r6
 800f682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f686:	89ab      	ldrh	r3, [r5, #12]
 800f688:	2b01      	cmp	r3, #1
 800f68a:	d907      	bls.n	800f69c <_fwalk_sglue+0x38>
 800f68c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f690:	3301      	adds	r3, #1
 800f692:	d003      	beq.n	800f69c <_fwalk_sglue+0x38>
 800f694:	4629      	mov	r1, r5
 800f696:	4638      	mov	r0, r7
 800f698:	47c0      	blx	r8
 800f69a:	4306      	orrs	r6, r0
 800f69c:	3568      	adds	r5, #104	@ 0x68
 800f69e:	e7e9      	b.n	800f674 <_fwalk_sglue+0x10>

0800f6a0 <_vsniprintf_r>:
 800f6a0:	b530      	push	{r4, r5, lr}
 800f6a2:	4614      	mov	r4, r2
 800f6a4:	2c00      	cmp	r4, #0
 800f6a6:	b09b      	sub	sp, #108	@ 0x6c
 800f6a8:	4605      	mov	r5, r0
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	da05      	bge.n	800f6ba <_vsniprintf_r+0x1a>
 800f6ae:	238b      	movs	r3, #139	@ 0x8b
 800f6b0:	6003      	str	r3, [r0, #0]
 800f6b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6b6:	b01b      	add	sp, #108	@ 0x6c
 800f6b8:	bd30      	pop	{r4, r5, pc}
 800f6ba:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f6be:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f6c2:	bf14      	ite	ne
 800f6c4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800f6c8:	4623      	moveq	r3, r4
 800f6ca:	9302      	str	r3, [sp, #8]
 800f6cc:	9305      	str	r3, [sp, #20]
 800f6ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f6d2:	9100      	str	r1, [sp, #0]
 800f6d4:	9104      	str	r1, [sp, #16]
 800f6d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f6da:	4669      	mov	r1, sp
 800f6dc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f6de:	f000 ffa9 	bl	8010634 <_svfiprintf_r>
 800f6e2:	1c43      	adds	r3, r0, #1
 800f6e4:	bfbc      	itt	lt
 800f6e6:	238b      	movlt	r3, #139	@ 0x8b
 800f6e8:	602b      	strlt	r3, [r5, #0]
 800f6ea:	2c00      	cmp	r4, #0
 800f6ec:	d0e3      	beq.n	800f6b6 <_vsniprintf_r+0x16>
 800f6ee:	9b00      	ldr	r3, [sp, #0]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	701a      	strb	r2, [r3, #0]
 800f6f4:	e7df      	b.n	800f6b6 <_vsniprintf_r+0x16>
	...

0800f6f8 <vsniprintf>:
 800f6f8:	b507      	push	{r0, r1, r2, lr}
 800f6fa:	9300      	str	r3, [sp, #0]
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	460a      	mov	r2, r1
 800f700:	4601      	mov	r1, r0
 800f702:	4803      	ldr	r0, [pc, #12]	@ (800f710 <vsniprintf+0x18>)
 800f704:	6800      	ldr	r0, [r0, #0]
 800f706:	f7ff ffcb 	bl	800f6a0 <_vsniprintf_r>
 800f70a:	b003      	add	sp, #12
 800f70c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f710:	20000194 	.word	0x20000194

0800f714 <memset>:
 800f714:	4402      	add	r2, r0
 800f716:	4603      	mov	r3, r0
 800f718:	4293      	cmp	r3, r2
 800f71a:	d100      	bne.n	800f71e <memset+0xa>
 800f71c:	4770      	bx	lr
 800f71e:	f803 1b01 	strb.w	r1, [r3], #1
 800f722:	e7f9      	b.n	800f718 <memset+0x4>

0800f724 <_localeconv_r>:
 800f724:	4800      	ldr	r0, [pc, #0]	@ (800f728 <_localeconv_r+0x4>)
 800f726:	4770      	bx	lr
 800f728:	200002d4 	.word	0x200002d4

0800f72c <_reclaim_reent>:
 800f72c:	4b29      	ldr	r3, [pc, #164]	@ (800f7d4 <_reclaim_reent+0xa8>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4283      	cmp	r3, r0
 800f732:	b570      	push	{r4, r5, r6, lr}
 800f734:	4604      	mov	r4, r0
 800f736:	d04b      	beq.n	800f7d0 <_reclaim_reent+0xa4>
 800f738:	69c3      	ldr	r3, [r0, #28]
 800f73a:	b1ab      	cbz	r3, 800f768 <_reclaim_reent+0x3c>
 800f73c:	68db      	ldr	r3, [r3, #12]
 800f73e:	b16b      	cbz	r3, 800f75c <_reclaim_reent+0x30>
 800f740:	2500      	movs	r5, #0
 800f742:	69e3      	ldr	r3, [r4, #28]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	5959      	ldr	r1, [r3, r5]
 800f748:	2900      	cmp	r1, #0
 800f74a:	d13b      	bne.n	800f7c4 <_reclaim_reent+0x98>
 800f74c:	3504      	adds	r5, #4
 800f74e:	2d80      	cmp	r5, #128	@ 0x80
 800f750:	d1f7      	bne.n	800f742 <_reclaim_reent+0x16>
 800f752:	69e3      	ldr	r3, [r4, #28]
 800f754:	4620      	mov	r0, r4
 800f756:	68d9      	ldr	r1, [r3, #12]
 800f758:	f000 fec6 	bl	80104e8 <_free_r>
 800f75c:	69e3      	ldr	r3, [r4, #28]
 800f75e:	6819      	ldr	r1, [r3, #0]
 800f760:	b111      	cbz	r1, 800f768 <_reclaim_reent+0x3c>
 800f762:	4620      	mov	r0, r4
 800f764:	f000 fec0 	bl	80104e8 <_free_r>
 800f768:	6961      	ldr	r1, [r4, #20]
 800f76a:	b111      	cbz	r1, 800f772 <_reclaim_reent+0x46>
 800f76c:	4620      	mov	r0, r4
 800f76e:	f000 febb 	bl	80104e8 <_free_r>
 800f772:	69e1      	ldr	r1, [r4, #28]
 800f774:	b111      	cbz	r1, 800f77c <_reclaim_reent+0x50>
 800f776:	4620      	mov	r0, r4
 800f778:	f000 feb6 	bl	80104e8 <_free_r>
 800f77c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f77e:	b111      	cbz	r1, 800f786 <_reclaim_reent+0x5a>
 800f780:	4620      	mov	r0, r4
 800f782:	f000 feb1 	bl	80104e8 <_free_r>
 800f786:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f788:	b111      	cbz	r1, 800f790 <_reclaim_reent+0x64>
 800f78a:	4620      	mov	r0, r4
 800f78c:	f000 feac 	bl	80104e8 <_free_r>
 800f790:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f792:	b111      	cbz	r1, 800f79a <_reclaim_reent+0x6e>
 800f794:	4620      	mov	r0, r4
 800f796:	f000 fea7 	bl	80104e8 <_free_r>
 800f79a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f79c:	b111      	cbz	r1, 800f7a4 <_reclaim_reent+0x78>
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f000 fea2 	bl	80104e8 <_free_r>
 800f7a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f7a6:	b111      	cbz	r1, 800f7ae <_reclaim_reent+0x82>
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f000 fe9d 	bl	80104e8 <_free_r>
 800f7ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f7b0:	b111      	cbz	r1, 800f7b8 <_reclaim_reent+0x8c>
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f000 fe98 	bl	80104e8 <_free_r>
 800f7b8:	6a23      	ldr	r3, [r4, #32]
 800f7ba:	b14b      	cbz	r3, 800f7d0 <_reclaim_reent+0xa4>
 800f7bc:	4620      	mov	r0, r4
 800f7be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7c2:	4718      	bx	r3
 800f7c4:	680e      	ldr	r6, [r1, #0]
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	f000 fe8e 	bl	80104e8 <_free_r>
 800f7cc:	4631      	mov	r1, r6
 800f7ce:	e7bb      	b.n	800f748 <_reclaim_reent+0x1c>
 800f7d0:	bd70      	pop	{r4, r5, r6, pc}
 800f7d2:	bf00      	nop
 800f7d4:	20000194 	.word	0x20000194

0800f7d8 <__errno>:
 800f7d8:	4b01      	ldr	r3, [pc, #4]	@ (800f7e0 <__errno+0x8>)
 800f7da:	6818      	ldr	r0, [r3, #0]
 800f7dc:	4770      	bx	lr
 800f7de:	bf00      	nop
 800f7e0:	20000194 	.word	0x20000194

0800f7e4 <__libc_init_array>:
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	4d0d      	ldr	r5, [pc, #52]	@ (800f81c <__libc_init_array+0x38>)
 800f7e8:	4c0d      	ldr	r4, [pc, #52]	@ (800f820 <__libc_init_array+0x3c>)
 800f7ea:	1b64      	subs	r4, r4, r5
 800f7ec:	10a4      	asrs	r4, r4, #2
 800f7ee:	2600      	movs	r6, #0
 800f7f0:	42a6      	cmp	r6, r4
 800f7f2:	d109      	bne.n	800f808 <__libc_init_array+0x24>
 800f7f4:	4d0b      	ldr	r5, [pc, #44]	@ (800f824 <__libc_init_array+0x40>)
 800f7f6:	4c0c      	ldr	r4, [pc, #48]	@ (800f828 <__libc_init_array+0x44>)
 800f7f8:	f002 f8ee 	bl	80119d8 <_init>
 800f7fc:	1b64      	subs	r4, r4, r5
 800f7fe:	10a4      	asrs	r4, r4, #2
 800f800:	2600      	movs	r6, #0
 800f802:	42a6      	cmp	r6, r4
 800f804:	d105      	bne.n	800f812 <__libc_init_array+0x2e>
 800f806:	bd70      	pop	{r4, r5, r6, pc}
 800f808:	f855 3b04 	ldr.w	r3, [r5], #4
 800f80c:	4798      	blx	r3
 800f80e:	3601      	adds	r6, #1
 800f810:	e7ee      	b.n	800f7f0 <__libc_init_array+0xc>
 800f812:	f855 3b04 	ldr.w	r3, [r5], #4
 800f816:	4798      	blx	r3
 800f818:	3601      	adds	r6, #1
 800f81a:	e7f2      	b.n	800f802 <__libc_init_array+0x1e>
 800f81c:	08012120 	.word	0x08012120
 800f820:	08012120 	.word	0x08012120
 800f824:	08012120 	.word	0x08012120
 800f828:	08012124 	.word	0x08012124

0800f82c <__retarget_lock_init_recursive>:
 800f82c:	4770      	bx	lr

0800f82e <__retarget_lock_acquire_recursive>:
 800f82e:	4770      	bx	lr

0800f830 <__retarget_lock_release_recursive>:
 800f830:	4770      	bx	lr

0800f832 <memcpy>:
 800f832:	440a      	add	r2, r1
 800f834:	4291      	cmp	r1, r2
 800f836:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f83a:	d100      	bne.n	800f83e <memcpy+0xc>
 800f83c:	4770      	bx	lr
 800f83e:	b510      	push	{r4, lr}
 800f840:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f844:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f848:	4291      	cmp	r1, r2
 800f84a:	d1f9      	bne.n	800f840 <memcpy+0xe>
 800f84c:	bd10      	pop	{r4, pc}

0800f84e <quorem>:
 800f84e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f852:	6903      	ldr	r3, [r0, #16]
 800f854:	690c      	ldr	r4, [r1, #16]
 800f856:	42a3      	cmp	r3, r4
 800f858:	4607      	mov	r7, r0
 800f85a:	db7e      	blt.n	800f95a <quorem+0x10c>
 800f85c:	3c01      	subs	r4, #1
 800f85e:	f101 0814 	add.w	r8, r1, #20
 800f862:	00a3      	lsls	r3, r4, #2
 800f864:	f100 0514 	add.w	r5, r0, #20
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f86e:	9301      	str	r3, [sp, #4]
 800f870:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f874:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f878:	3301      	adds	r3, #1
 800f87a:	429a      	cmp	r2, r3
 800f87c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f880:	fbb2 f6f3 	udiv	r6, r2, r3
 800f884:	d32e      	bcc.n	800f8e4 <quorem+0x96>
 800f886:	f04f 0a00 	mov.w	sl, #0
 800f88a:	46c4      	mov	ip, r8
 800f88c:	46ae      	mov	lr, r5
 800f88e:	46d3      	mov	fp, sl
 800f890:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f894:	b298      	uxth	r0, r3
 800f896:	fb06 a000 	mla	r0, r6, r0, sl
 800f89a:	0c02      	lsrs	r2, r0, #16
 800f89c:	0c1b      	lsrs	r3, r3, #16
 800f89e:	fb06 2303 	mla	r3, r6, r3, r2
 800f8a2:	f8de 2000 	ldr.w	r2, [lr]
 800f8a6:	b280      	uxth	r0, r0
 800f8a8:	b292      	uxth	r2, r2
 800f8aa:	1a12      	subs	r2, r2, r0
 800f8ac:	445a      	add	r2, fp
 800f8ae:	f8de 0000 	ldr.w	r0, [lr]
 800f8b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f8bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f8c0:	b292      	uxth	r2, r2
 800f8c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f8c6:	45e1      	cmp	r9, ip
 800f8c8:	f84e 2b04 	str.w	r2, [lr], #4
 800f8cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f8d0:	d2de      	bcs.n	800f890 <quorem+0x42>
 800f8d2:	9b00      	ldr	r3, [sp, #0]
 800f8d4:	58eb      	ldr	r3, [r5, r3]
 800f8d6:	b92b      	cbnz	r3, 800f8e4 <quorem+0x96>
 800f8d8:	9b01      	ldr	r3, [sp, #4]
 800f8da:	3b04      	subs	r3, #4
 800f8dc:	429d      	cmp	r5, r3
 800f8de:	461a      	mov	r2, r3
 800f8e0:	d32f      	bcc.n	800f942 <quorem+0xf4>
 800f8e2:	613c      	str	r4, [r7, #16]
 800f8e4:	4638      	mov	r0, r7
 800f8e6:	f001 fb7d 	bl	8010fe4 <__mcmp>
 800f8ea:	2800      	cmp	r0, #0
 800f8ec:	db25      	blt.n	800f93a <quorem+0xec>
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	2000      	movs	r0, #0
 800f8f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800f8f6:	f8d1 c000 	ldr.w	ip, [r1]
 800f8fa:	fa1f fe82 	uxth.w	lr, r2
 800f8fe:	fa1f f38c 	uxth.w	r3, ip
 800f902:	eba3 030e 	sub.w	r3, r3, lr
 800f906:	4403      	add	r3, r0
 800f908:	0c12      	lsrs	r2, r2, #16
 800f90a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f90e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f912:	b29b      	uxth	r3, r3
 800f914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f918:	45c1      	cmp	r9, r8
 800f91a:	f841 3b04 	str.w	r3, [r1], #4
 800f91e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f922:	d2e6      	bcs.n	800f8f2 <quorem+0xa4>
 800f924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f928:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f92c:	b922      	cbnz	r2, 800f938 <quorem+0xea>
 800f92e:	3b04      	subs	r3, #4
 800f930:	429d      	cmp	r5, r3
 800f932:	461a      	mov	r2, r3
 800f934:	d30b      	bcc.n	800f94e <quorem+0x100>
 800f936:	613c      	str	r4, [r7, #16]
 800f938:	3601      	adds	r6, #1
 800f93a:	4630      	mov	r0, r6
 800f93c:	b003      	add	sp, #12
 800f93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f942:	6812      	ldr	r2, [r2, #0]
 800f944:	3b04      	subs	r3, #4
 800f946:	2a00      	cmp	r2, #0
 800f948:	d1cb      	bne.n	800f8e2 <quorem+0x94>
 800f94a:	3c01      	subs	r4, #1
 800f94c:	e7c6      	b.n	800f8dc <quorem+0x8e>
 800f94e:	6812      	ldr	r2, [r2, #0]
 800f950:	3b04      	subs	r3, #4
 800f952:	2a00      	cmp	r2, #0
 800f954:	d1ef      	bne.n	800f936 <quorem+0xe8>
 800f956:	3c01      	subs	r4, #1
 800f958:	e7ea      	b.n	800f930 <quorem+0xe2>
 800f95a:	2000      	movs	r0, #0
 800f95c:	e7ee      	b.n	800f93c <quorem+0xee>
	...

0800f960 <_dtoa_r>:
 800f960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f964:	69c7      	ldr	r7, [r0, #28]
 800f966:	b099      	sub	sp, #100	@ 0x64
 800f968:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f96c:	ec55 4b10 	vmov	r4, r5, d0
 800f970:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f972:	9109      	str	r1, [sp, #36]	@ 0x24
 800f974:	4683      	mov	fp, r0
 800f976:	920e      	str	r2, [sp, #56]	@ 0x38
 800f978:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f97a:	b97f      	cbnz	r7, 800f99c <_dtoa_r+0x3c>
 800f97c:	2010      	movs	r0, #16
 800f97e:	f000 ff55 	bl	801082c <malloc>
 800f982:	4602      	mov	r2, r0
 800f984:	f8cb 001c 	str.w	r0, [fp, #28]
 800f988:	b920      	cbnz	r0, 800f994 <_dtoa_r+0x34>
 800f98a:	4ba7      	ldr	r3, [pc, #668]	@ (800fc28 <_dtoa_r+0x2c8>)
 800f98c:	21ef      	movs	r1, #239	@ 0xef
 800f98e:	48a7      	ldr	r0, [pc, #668]	@ (800fc2c <_dtoa_r+0x2cc>)
 800f990:	f001 fd12 	bl	80113b8 <__assert_func>
 800f994:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f998:	6007      	str	r7, [r0, #0]
 800f99a:	60c7      	str	r7, [r0, #12]
 800f99c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f9a0:	6819      	ldr	r1, [r3, #0]
 800f9a2:	b159      	cbz	r1, 800f9bc <_dtoa_r+0x5c>
 800f9a4:	685a      	ldr	r2, [r3, #4]
 800f9a6:	604a      	str	r2, [r1, #4]
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	4093      	lsls	r3, r2
 800f9ac:	608b      	str	r3, [r1, #8]
 800f9ae:	4658      	mov	r0, fp
 800f9b0:	f001 f8de 	bl	8010b70 <_Bfree>
 800f9b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	601a      	str	r2, [r3, #0]
 800f9bc:	1e2b      	subs	r3, r5, #0
 800f9be:	bfb9      	ittee	lt
 800f9c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f9c4:	9303      	strlt	r3, [sp, #12]
 800f9c6:	2300      	movge	r3, #0
 800f9c8:	6033      	strge	r3, [r6, #0]
 800f9ca:	9f03      	ldr	r7, [sp, #12]
 800f9cc:	4b98      	ldr	r3, [pc, #608]	@ (800fc30 <_dtoa_r+0x2d0>)
 800f9ce:	bfbc      	itt	lt
 800f9d0:	2201      	movlt	r2, #1
 800f9d2:	6032      	strlt	r2, [r6, #0]
 800f9d4:	43bb      	bics	r3, r7
 800f9d6:	d112      	bne.n	800f9fe <_dtoa_r+0x9e>
 800f9d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f9da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f9de:	6013      	str	r3, [r2, #0]
 800f9e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f9e4:	4323      	orrs	r3, r4
 800f9e6:	f000 854d 	beq.w	8010484 <_dtoa_r+0xb24>
 800f9ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f9ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fc44 <_dtoa_r+0x2e4>
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f000 854f 	beq.w	8010494 <_dtoa_r+0xb34>
 800f9f6:	f10a 0303 	add.w	r3, sl, #3
 800f9fa:	f000 bd49 	b.w	8010490 <_dtoa_r+0xb30>
 800f9fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa02:	2200      	movs	r2, #0
 800fa04:	ec51 0b17 	vmov	r0, r1, d7
 800fa08:	2300      	movs	r3, #0
 800fa0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fa0e:	f7f1 f883 	bl	8000b18 <__aeabi_dcmpeq>
 800fa12:	4680      	mov	r8, r0
 800fa14:	b158      	cbz	r0, 800fa2e <_dtoa_r+0xce>
 800fa16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa18:	2301      	movs	r3, #1
 800fa1a:	6013      	str	r3, [r2, #0]
 800fa1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa1e:	b113      	cbz	r3, 800fa26 <_dtoa_r+0xc6>
 800fa20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fa22:	4b84      	ldr	r3, [pc, #528]	@ (800fc34 <_dtoa_r+0x2d4>)
 800fa24:	6013      	str	r3, [r2, #0]
 800fa26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fc48 <_dtoa_r+0x2e8>
 800fa2a:	f000 bd33 	b.w	8010494 <_dtoa_r+0xb34>
 800fa2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fa32:	aa16      	add	r2, sp, #88	@ 0x58
 800fa34:	a917      	add	r1, sp, #92	@ 0x5c
 800fa36:	4658      	mov	r0, fp
 800fa38:	f001 fb84 	bl	8011144 <__d2b>
 800fa3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fa40:	4681      	mov	r9, r0
 800fa42:	2e00      	cmp	r6, #0
 800fa44:	d077      	beq.n	800fb36 <_dtoa_r+0x1d6>
 800fa46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fa4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fa58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fa5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fa60:	4619      	mov	r1, r3
 800fa62:	2200      	movs	r2, #0
 800fa64:	4b74      	ldr	r3, [pc, #464]	@ (800fc38 <_dtoa_r+0x2d8>)
 800fa66:	f7f0 fc37 	bl	80002d8 <__aeabi_dsub>
 800fa6a:	a369      	add	r3, pc, #420	@ (adr r3, 800fc10 <_dtoa_r+0x2b0>)
 800fa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa70:	f7f0 fdea 	bl	8000648 <__aeabi_dmul>
 800fa74:	a368      	add	r3, pc, #416	@ (adr r3, 800fc18 <_dtoa_r+0x2b8>)
 800fa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7a:	f7f0 fc2f 	bl	80002dc <__adddf3>
 800fa7e:	4604      	mov	r4, r0
 800fa80:	4630      	mov	r0, r6
 800fa82:	460d      	mov	r5, r1
 800fa84:	f7f0 fd76 	bl	8000574 <__aeabi_i2d>
 800fa88:	a365      	add	r3, pc, #404	@ (adr r3, 800fc20 <_dtoa_r+0x2c0>)
 800fa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8e:	f7f0 fddb 	bl	8000648 <__aeabi_dmul>
 800fa92:	4602      	mov	r2, r0
 800fa94:	460b      	mov	r3, r1
 800fa96:	4620      	mov	r0, r4
 800fa98:	4629      	mov	r1, r5
 800fa9a:	f7f0 fc1f 	bl	80002dc <__adddf3>
 800fa9e:	4604      	mov	r4, r0
 800faa0:	460d      	mov	r5, r1
 800faa2:	f7f1 f881 	bl	8000ba8 <__aeabi_d2iz>
 800faa6:	2200      	movs	r2, #0
 800faa8:	4607      	mov	r7, r0
 800faaa:	2300      	movs	r3, #0
 800faac:	4620      	mov	r0, r4
 800faae:	4629      	mov	r1, r5
 800fab0:	f7f1 f83c 	bl	8000b2c <__aeabi_dcmplt>
 800fab4:	b140      	cbz	r0, 800fac8 <_dtoa_r+0x168>
 800fab6:	4638      	mov	r0, r7
 800fab8:	f7f0 fd5c 	bl	8000574 <__aeabi_i2d>
 800fabc:	4622      	mov	r2, r4
 800fabe:	462b      	mov	r3, r5
 800fac0:	f7f1 f82a 	bl	8000b18 <__aeabi_dcmpeq>
 800fac4:	b900      	cbnz	r0, 800fac8 <_dtoa_r+0x168>
 800fac6:	3f01      	subs	r7, #1
 800fac8:	2f16      	cmp	r7, #22
 800faca:	d851      	bhi.n	800fb70 <_dtoa_r+0x210>
 800facc:	4b5b      	ldr	r3, [pc, #364]	@ (800fc3c <_dtoa_r+0x2dc>)
 800face:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fada:	f7f1 f827 	bl	8000b2c <__aeabi_dcmplt>
 800fade:	2800      	cmp	r0, #0
 800fae0:	d048      	beq.n	800fb74 <_dtoa_r+0x214>
 800fae2:	3f01      	subs	r7, #1
 800fae4:	2300      	movs	r3, #0
 800fae6:	9312      	str	r3, [sp, #72]	@ 0x48
 800fae8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800faea:	1b9b      	subs	r3, r3, r6
 800faec:	1e5a      	subs	r2, r3, #1
 800faee:	bf44      	itt	mi
 800faf0:	f1c3 0801 	rsbmi	r8, r3, #1
 800faf4:	2300      	movmi	r3, #0
 800faf6:	9208      	str	r2, [sp, #32]
 800faf8:	bf54      	ite	pl
 800fafa:	f04f 0800 	movpl.w	r8, #0
 800fafe:	9308      	strmi	r3, [sp, #32]
 800fb00:	2f00      	cmp	r7, #0
 800fb02:	db39      	blt.n	800fb78 <_dtoa_r+0x218>
 800fb04:	9b08      	ldr	r3, [sp, #32]
 800fb06:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fb08:	443b      	add	r3, r7
 800fb0a:	9308      	str	r3, [sp, #32]
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb12:	2b09      	cmp	r3, #9
 800fb14:	d864      	bhi.n	800fbe0 <_dtoa_r+0x280>
 800fb16:	2b05      	cmp	r3, #5
 800fb18:	bfc4      	itt	gt
 800fb1a:	3b04      	subgt	r3, #4
 800fb1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fb1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb20:	f1a3 0302 	sub.w	r3, r3, #2
 800fb24:	bfcc      	ite	gt
 800fb26:	2400      	movgt	r4, #0
 800fb28:	2401      	movle	r4, #1
 800fb2a:	2b03      	cmp	r3, #3
 800fb2c:	d863      	bhi.n	800fbf6 <_dtoa_r+0x296>
 800fb2e:	e8df f003 	tbb	[pc, r3]
 800fb32:	372a      	.short	0x372a
 800fb34:	5535      	.short	0x5535
 800fb36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fb3a:	441e      	add	r6, r3
 800fb3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fb40:	2b20      	cmp	r3, #32
 800fb42:	bfc1      	itttt	gt
 800fb44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fb48:	409f      	lslgt	r7, r3
 800fb4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fb4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fb52:	bfd6      	itet	le
 800fb54:	f1c3 0320 	rsble	r3, r3, #32
 800fb58:	ea47 0003 	orrgt.w	r0, r7, r3
 800fb5c:	fa04 f003 	lslle.w	r0, r4, r3
 800fb60:	f7f0 fcf8 	bl	8000554 <__aeabi_ui2d>
 800fb64:	2201      	movs	r2, #1
 800fb66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fb6a:	3e01      	subs	r6, #1
 800fb6c:	9214      	str	r2, [sp, #80]	@ 0x50
 800fb6e:	e777      	b.n	800fa60 <_dtoa_r+0x100>
 800fb70:	2301      	movs	r3, #1
 800fb72:	e7b8      	b.n	800fae6 <_dtoa_r+0x186>
 800fb74:	9012      	str	r0, [sp, #72]	@ 0x48
 800fb76:	e7b7      	b.n	800fae8 <_dtoa_r+0x188>
 800fb78:	427b      	negs	r3, r7
 800fb7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	eba8 0807 	sub.w	r8, r8, r7
 800fb82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fb84:	e7c4      	b.n	800fb10 <_dtoa_r+0x1b0>
 800fb86:	2300      	movs	r3, #0
 800fb88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	dc35      	bgt.n	800fbfc <_dtoa_r+0x29c>
 800fb90:	2301      	movs	r3, #1
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	9307      	str	r3, [sp, #28]
 800fb96:	461a      	mov	r2, r3
 800fb98:	920e      	str	r2, [sp, #56]	@ 0x38
 800fb9a:	e00b      	b.n	800fbb4 <_dtoa_r+0x254>
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e7f3      	b.n	800fb88 <_dtoa_r+0x228>
 800fba0:	2300      	movs	r3, #0
 800fba2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fba4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fba6:	18fb      	adds	r3, r7, r3
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	9307      	str	r3, [sp, #28]
 800fbb0:	bfb8      	it	lt
 800fbb2:	2301      	movlt	r3, #1
 800fbb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fbb8:	2100      	movs	r1, #0
 800fbba:	2204      	movs	r2, #4
 800fbbc:	f102 0514 	add.w	r5, r2, #20
 800fbc0:	429d      	cmp	r5, r3
 800fbc2:	d91f      	bls.n	800fc04 <_dtoa_r+0x2a4>
 800fbc4:	6041      	str	r1, [r0, #4]
 800fbc6:	4658      	mov	r0, fp
 800fbc8:	f000 ff92 	bl	8010af0 <_Balloc>
 800fbcc:	4682      	mov	sl, r0
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d13c      	bne.n	800fc4c <_dtoa_r+0x2ec>
 800fbd2:	4b1b      	ldr	r3, [pc, #108]	@ (800fc40 <_dtoa_r+0x2e0>)
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	f240 11af 	movw	r1, #431	@ 0x1af
 800fbda:	e6d8      	b.n	800f98e <_dtoa_r+0x2e>
 800fbdc:	2301      	movs	r3, #1
 800fbde:	e7e0      	b.n	800fba2 <_dtoa_r+0x242>
 800fbe0:	2401      	movs	r4, #1
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbe6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fbe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fbec:	9300      	str	r3, [sp, #0]
 800fbee:	9307      	str	r3, [sp, #28]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	2312      	movs	r3, #18
 800fbf4:	e7d0      	b.n	800fb98 <_dtoa_r+0x238>
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbfa:	e7f5      	b.n	800fbe8 <_dtoa_r+0x288>
 800fbfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	9307      	str	r3, [sp, #28]
 800fc02:	e7d7      	b.n	800fbb4 <_dtoa_r+0x254>
 800fc04:	3101      	adds	r1, #1
 800fc06:	0052      	lsls	r2, r2, #1
 800fc08:	e7d8      	b.n	800fbbc <_dtoa_r+0x25c>
 800fc0a:	bf00      	nop
 800fc0c:	f3af 8000 	nop.w
 800fc10:	636f4361 	.word	0x636f4361
 800fc14:	3fd287a7 	.word	0x3fd287a7
 800fc18:	8b60c8b3 	.word	0x8b60c8b3
 800fc1c:	3fc68a28 	.word	0x3fc68a28
 800fc20:	509f79fb 	.word	0x509f79fb
 800fc24:	3fd34413 	.word	0x3fd34413
 800fc28:	08011de5 	.word	0x08011de5
 800fc2c:	08011dfc 	.word	0x08011dfc
 800fc30:	7ff00000 	.word	0x7ff00000
 800fc34:	08011db5 	.word	0x08011db5
 800fc38:	3ff80000 	.word	0x3ff80000
 800fc3c:	08011f08 	.word	0x08011f08
 800fc40:	08011e54 	.word	0x08011e54
 800fc44:	08011de1 	.word	0x08011de1
 800fc48:	08011db4 	.word	0x08011db4
 800fc4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fc50:	6018      	str	r0, [r3, #0]
 800fc52:	9b07      	ldr	r3, [sp, #28]
 800fc54:	2b0e      	cmp	r3, #14
 800fc56:	f200 80a4 	bhi.w	800fda2 <_dtoa_r+0x442>
 800fc5a:	2c00      	cmp	r4, #0
 800fc5c:	f000 80a1 	beq.w	800fda2 <_dtoa_r+0x442>
 800fc60:	2f00      	cmp	r7, #0
 800fc62:	dd33      	ble.n	800fccc <_dtoa_r+0x36c>
 800fc64:	4bad      	ldr	r3, [pc, #692]	@ (800ff1c <_dtoa_r+0x5bc>)
 800fc66:	f007 020f 	and.w	r2, r7, #15
 800fc6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc6e:	ed93 7b00 	vldr	d7, [r3]
 800fc72:	05f8      	lsls	r0, r7, #23
 800fc74:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fc78:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fc7c:	d516      	bpl.n	800fcac <_dtoa_r+0x34c>
 800fc7e:	4ba8      	ldr	r3, [pc, #672]	@ (800ff20 <_dtoa_r+0x5c0>)
 800fc80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fc88:	f7f0 fe08 	bl	800089c <__aeabi_ddiv>
 800fc8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc90:	f004 040f 	and.w	r4, r4, #15
 800fc94:	2603      	movs	r6, #3
 800fc96:	4da2      	ldr	r5, [pc, #648]	@ (800ff20 <_dtoa_r+0x5c0>)
 800fc98:	b954      	cbnz	r4, 800fcb0 <_dtoa_r+0x350>
 800fc9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fca2:	f7f0 fdfb 	bl	800089c <__aeabi_ddiv>
 800fca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcaa:	e028      	b.n	800fcfe <_dtoa_r+0x39e>
 800fcac:	2602      	movs	r6, #2
 800fcae:	e7f2      	b.n	800fc96 <_dtoa_r+0x336>
 800fcb0:	07e1      	lsls	r1, r4, #31
 800fcb2:	d508      	bpl.n	800fcc6 <_dtoa_r+0x366>
 800fcb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fcbc:	f7f0 fcc4 	bl	8000648 <__aeabi_dmul>
 800fcc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcc4:	3601      	adds	r6, #1
 800fcc6:	1064      	asrs	r4, r4, #1
 800fcc8:	3508      	adds	r5, #8
 800fcca:	e7e5      	b.n	800fc98 <_dtoa_r+0x338>
 800fccc:	f000 80d2 	beq.w	800fe74 <_dtoa_r+0x514>
 800fcd0:	427c      	negs	r4, r7
 800fcd2:	4b92      	ldr	r3, [pc, #584]	@ (800ff1c <_dtoa_r+0x5bc>)
 800fcd4:	4d92      	ldr	r5, [pc, #584]	@ (800ff20 <_dtoa_r+0x5c0>)
 800fcd6:	f004 020f 	and.w	r2, r4, #15
 800fcda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fce6:	f7f0 fcaf 	bl	8000648 <__aeabi_dmul>
 800fcea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcee:	1124      	asrs	r4, r4, #4
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	2602      	movs	r6, #2
 800fcf4:	2c00      	cmp	r4, #0
 800fcf6:	f040 80b2 	bne.w	800fe5e <_dtoa_r+0x4fe>
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1d3      	bne.n	800fca6 <_dtoa_r+0x346>
 800fcfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	f000 80b7 	beq.w	800fe78 <_dtoa_r+0x518>
 800fd0a:	4b86      	ldr	r3, [pc, #536]	@ (800ff24 <_dtoa_r+0x5c4>)
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	4620      	mov	r0, r4
 800fd10:	4629      	mov	r1, r5
 800fd12:	f7f0 ff0b 	bl	8000b2c <__aeabi_dcmplt>
 800fd16:	2800      	cmp	r0, #0
 800fd18:	f000 80ae 	beq.w	800fe78 <_dtoa_r+0x518>
 800fd1c:	9b07      	ldr	r3, [sp, #28]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f000 80aa 	beq.w	800fe78 <_dtoa_r+0x518>
 800fd24:	9b00      	ldr	r3, [sp, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	dd37      	ble.n	800fd9a <_dtoa_r+0x43a>
 800fd2a:	1e7b      	subs	r3, r7, #1
 800fd2c:	9304      	str	r3, [sp, #16]
 800fd2e:	4620      	mov	r0, r4
 800fd30:	4b7d      	ldr	r3, [pc, #500]	@ (800ff28 <_dtoa_r+0x5c8>)
 800fd32:	2200      	movs	r2, #0
 800fd34:	4629      	mov	r1, r5
 800fd36:	f7f0 fc87 	bl	8000648 <__aeabi_dmul>
 800fd3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd3e:	9c00      	ldr	r4, [sp, #0]
 800fd40:	3601      	adds	r6, #1
 800fd42:	4630      	mov	r0, r6
 800fd44:	f7f0 fc16 	bl	8000574 <__aeabi_i2d>
 800fd48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd4c:	f7f0 fc7c 	bl	8000648 <__aeabi_dmul>
 800fd50:	4b76      	ldr	r3, [pc, #472]	@ (800ff2c <_dtoa_r+0x5cc>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	f7f0 fac2 	bl	80002dc <__adddf3>
 800fd58:	4605      	mov	r5, r0
 800fd5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fd5e:	2c00      	cmp	r4, #0
 800fd60:	f040 808d 	bne.w	800fe7e <_dtoa_r+0x51e>
 800fd64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd68:	4b71      	ldr	r3, [pc, #452]	@ (800ff30 <_dtoa_r+0x5d0>)
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f7f0 fab4 	bl	80002d8 <__aeabi_dsub>
 800fd70:	4602      	mov	r2, r0
 800fd72:	460b      	mov	r3, r1
 800fd74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd78:	462a      	mov	r2, r5
 800fd7a:	4633      	mov	r3, r6
 800fd7c:	f7f0 fef4 	bl	8000b68 <__aeabi_dcmpgt>
 800fd80:	2800      	cmp	r0, #0
 800fd82:	f040 828b 	bne.w	801029c <_dtoa_r+0x93c>
 800fd86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd8a:	462a      	mov	r2, r5
 800fd8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fd90:	f7f0 fecc 	bl	8000b2c <__aeabi_dcmplt>
 800fd94:	2800      	cmp	r0, #0
 800fd96:	f040 8128 	bne.w	800ffea <_dtoa_r+0x68a>
 800fd9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fd9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fda2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f2c0 815a 	blt.w	801005e <_dtoa_r+0x6fe>
 800fdaa:	2f0e      	cmp	r7, #14
 800fdac:	f300 8157 	bgt.w	801005e <_dtoa_r+0x6fe>
 800fdb0:	4b5a      	ldr	r3, [pc, #360]	@ (800ff1c <_dtoa_r+0x5bc>)
 800fdb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fdb6:	ed93 7b00 	vldr	d7, [r3]
 800fdba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	ed8d 7b00 	vstr	d7, [sp]
 800fdc2:	da03      	bge.n	800fdcc <_dtoa_r+0x46c>
 800fdc4:	9b07      	ldr	r3, [sp, #28]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	f340 8101 	ble.w	800ffce <_dtoa_r+0x66e>
 800fdcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fdd0:	4656      	mov	r6, sl
 800fdd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	4629      	mov	r1, r5
 800fdda:	f7f0 fd5f 	bl	800089c <__aeabi_ddiv>
 800fdde:	f7f0 fee3 	bl	8000ba8 <__aeabi_d2iz>
 800fde2:	4680      	mov	r8, r0
 800fde4:	f7f0 fbc6 	bl	8000574 <__aeabi_i2d>
 800fde8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdec:	f7f0 fc2c 	bl	8000648 <__aeabi_dmul>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	4620      	mov	r0, r4
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fdfc:	f7f0 fa6c 	bl	80002d8 <__aeabi_dsub>
 800fe00:	f806 4b01 	strb.w	r4, [r6], #1
 800fe04:	9d07      	ldr	r5, [sp, #28]
 800fe06:	eba6 040a 	sub.w	r4, r6, sl
 800fe0a:	42a5      	cmp	r5, r4
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	460b      	mov	r3, r1
 800fe10:	f040 8117 	bne.w	8010042 <_dtoa_r+0x6e2>
 800fe14:	f7f0 fa62 	bl	80002dc <__adddf3>
 800fe18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	460d      	mov	r5, r1
 800fe20:	f7f0 fea2 	bl	8000b68 <__aeabi_dcmpgt>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	f040 80f9 	bne.w	801001c <_dtoa_r+0x6bc>
 800fe2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe2e:	4620      	mov	r0, r4
 800fe30:	4629      	mov	r1, r5
 800fe32:	f7f0 fe71 	bl	8000b18 <__aeabi_dcmpeq>
 800fe36:	b118      	cbz	r0, 800fe40 <_dtoa_r+0x4e0>
 800fe38:	f018 0f01 	tst.w	r8, #1
 800fe3c:	f040 80ee 	bne.w	801001c <_dtoa_r+0x6bc>
 800fe40:	4649      	mov	r1, r9
 800fe42:	4658      	mov	r0, fp
 800fe44:	f000 fe94 	bl	8010b70 <_Bfree>
 800fe48:	2300      	movs	r3, #0
 800fe4a:	7033      	strb	r3, [r6, #0]
 800fe4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fe4e:	3701      	adds	r7, #1
 800fe50:	601f      	str	r7, [r3, #0]
 800fe52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	f000 831d 	beq.w	8010494 <_dtoa_r+0xb34>
 800fe5a:	601e      	str	r6, [r3, #0]
 800fe5c:	e31a      	b.n	8010494 <_dtoa_r+0xb34>
 800fe5e:	07e2      	lsls	r2, r4, #31
 800fe60:	d505      	bpl.n	800fe6e <_dtoa_r+0x50e>
 800fe62:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe66:	f7f0 fbef 	bl	8000648 <__aeabi_dmul>
 800fe6a:	3601      	adds	r6, #1
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	1064      	asrs	r4, r4, #1
 800fe70:	3508      	adds	r5, #8
 800fe72:	e73f      	b.n	800fcf4 <_dtoa_r+0x394>
 800fe74:	2602      	movs	r6, #2
 800fe76:	e742      	b.n	800fcfe <_dtoa_r+0x39e>
 800fe78:	9c07      	ldr	r4, [sp, #28]
 800fe7a:	9704      	str	r7, [sp, #16]
 800fe7c:	e761      	b.n	800fd42 <_dtoa_r+0x3e2>
 800fe7e:	4b27      	ldr	r3, [pc, #156]	@ (800ff1c <_dtoa_r+0x5bc>)
 800fe80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe8a:	4454      	add	r4, sl
 800fe8c:	2900      	cmp	r1, #0
 800fe8e:	d053      	beq.n	800ff38 <_dtoa_r+0x5d8>
 800fe90:	4928      	ldr	r1, [pc, #160]	@ (800ff34 <_dtoa_r+0x5d4>)
 800fe92:	2000      	movs	r0, #0
 800fe94:	f7f0 fd02 	bl	800089c <__aeabi_ddiv>
 800fe98:	4633      	mov	r3, r6
 800fe9a:	462a      	mov	r2, r5
 800fe9c:	f7f0 fa1c 	bl	80002d8 <__aeabi_dsub>
 800fea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fea4:	4656      	mov	r6, sl
 800fea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800feaa:	f7f0 fe7d 	bl	8000ba8 <__aeabi_d2iz>
 800feae:	4605      	mov	r5, r0
 800feb0:	f7f0 fb60 	bl	8000574 <__aeabi_i2d>
 800feb4:	4602      	mov	r2, r0
 800feb6:	460b      	mov	r3, r1
 800feb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800febc:	f7f0 fa0c 	bl	80002d8 <__aeabi_dsub>
 800fec0:	3530      	adds	r5, #48	@ 0x30
 800fec2:	4602      	mov	r2, r0
 800fec4:	460b      	mov	r3, r1
 800fec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800feca:	f806 5b01 	strb.w	r5, [r6], #1
 800fece:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fed2:	f7f0 fe2b 	bl	8000b2c <__aeabi_dcmplt>
 800fed6:	2800      	cmp	r0, #0
 800fed8:	d171      	bne.n	800ffbe <_dtoa_r+0x65e>
 800feda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fede:	4911      	ldr	r1, [pc, #68]	@ (800ff24 <_dtoa_r+0x5c4>)
 800fee0:	2000      	movs	r0, #0
 800fee2:	f7f0 f9f9 	bl	80002d8 <__aeabi_dsub>
 800fee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800feea:	f7f0 fe1f 	bl	8000b2c <__aeabi_dcmplt>
 800feee:	2800      	cmp	r0, #0
 800fef0:	f040 8095 	bne.w	801001e <_dtoa_r+0x6be>
 800fef4:	42a6      	cmp	r6, r4
 800fef6:	f43f af50 	beq.w	800fd9a <_dtoa_r+0x43a>
 800fefa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fefe:	4b0a      	ldr	r3, [pc, #40]	@ (800ff28 <_dtoa_r+0x5c8>)
 800ff00:	2200      	movs	r2, #0
 800ff02:	f7f0 fba1 	bl	8000648 <__aeabi_dmul>
 800ff06:	4b08      	ldr	r3, [pc, #32]	@ (800ff28 <_dtoa_r+0x5c8>)
 800ff08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff12:	f7f0 fb99 	bl	8000648 <__aeabi_dmul>
 800ff16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff1a:	e7c4      	b.n	800fea6 <_dtoa_r+0x546>
 800ff1c:	08011f08 	.word	0x08011f08
 800ff20:	08011ee0 	.word	0x08011ee0
 800ff24:	3ff00000 	.word	0x3ff00000
 800ff28:	40240000 	.word	0x40240000
 800ff2c:	401c0000 	.word	0x401c0000
 800ff30:	40140000 	.word	0x40140000
 800ff34:	3fe00000 	.word	0x3fe00000
 800ff38:	4631      	mov	r1, r6
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	f7f0 fb84 	bl	8000648 <__aeabi_dmul>
 800ff40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff44:	9415      	str	r4, [sp, #84]	@ 0x54
 800ff46:	4656      	mov	r6, sl
 800ff48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff4c:	f7f0 fe2c 	bl	8000ba8 <__aeabi_d2iz>
 800ff50:	4605      	mov	r5, r0
 800ff52:	f7f0 fb0f 	bl	8000574 <__aeabi_i2d>
 800ff56:	4602      	mov	r2, r0
 800ff58:	460b      	mov	r3, r1
 800ff5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff5e:	f7f0 f9bb 	bl	80002d8 <__aeabi_dsub>
 800ff62:	3530      	adds	r5, #48	@ 0x30
 800ff64:	f806 5b01 	strb.w	r5, [r6], #1
 800ff68:	4602      	mov	r2, r0
 800ff6a:	460b      	mov	r3, r1
 800ff6c:	42a6      	cmp	r6, r4
 800ff6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff72:	f04f 0200 	mov.w	r2, #0
 800ff76:	d124      	bne.n	800ffc2 <_dtoa_r+0x662>
 800ff78:	4bac      	ldr	r3, [pc, #688]	@ (801022c <_dtoa_r+0x8cc>)
 800ff7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ff7e:	f7f0 f9ad 	bl	80002dc <__adddf3>
 800ff82:	4602      	mov	r2, r0
 800ff84:	460b      	mov	r3, r1
 800ff86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff8a:	f7f0 fded 	bl	8000b68 <__aeabi_dcmpgt>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	d145      	bne.n	801001e <_dtoa_r+0x6be>
 800ff92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff96:	49a5      	ldr	r1, [pc, #660]	@ (801022c <_dtoa_r+0x8cc>)
 800ff98:	2000      	movs	r0, #0
 800ff9a:	f7f0 f99d 	bl	80002d8 <__aeabi_dsub>
 800ff9e:	4602      	mov	r2, r0
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffa6:	f7f0 fdc1 	bl	8000b2c <__aeabi_dcmplt>
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	f43f aef5 	beq.w	800fd9a <_dtoa_r+0x43a>
 800ffb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ffb2:	1e73      	subs	r3, r6, #1
 800ffb4:	9315      	str	r3, [sp, #84]	@ 0x54
 800ffb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ffba:	2b30      	cmp	r3, #48	@ 0x30
 800ffbc:	d0f8      	beq.n	800ffb0 <_dtoa_r+0x650>
 800ffbe:	9f04      	ldr	r7, [sp, #16]
 800ffc0:	e73e      	b.n	800fe40 <_dtoa_r+0x4e0>
 800ffc2:	4b9b      	ldr	r3, [pc, #620]	@ (8010230 <_dtoa_r+0x8d0>)
 800ffc4:	f7f0 fb40 	bl	8000648 <__aeabi_dmul>
 800ffc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffcc:	e7bc      	b.n	800ff48 <_dtoa_r+0x5e8>
 800ffce:	d10c      	bne.n	800ffea <_dtoa_r+0x68a>
 800ffd0:	4b98      	ldr	r3, [pc, #608]	@ (8010234 <_dtoa_r+0x8d4>)
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffd8:	f7f0 fb36 	bl	8000648 <__aeabi_dmul>
 800ffdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffe0:	f7f0 fdb8 	bl	8000b54 <__aeabi_dcmpge>
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	f000 8157 	beq.w	8010298 <_dtoa_r+0x938>
 800ffea:	2400      	movs	r4, #0
 800ffec:	4625      	mov	r5, r4
 800ffee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fff0:	43db      	mvns	r3, r3
 800fff2:	9304      	str	r3, [sp, #16]
 800fff4:	4656      	mov	r6, sl
 800fff6:	2700      	movs	r7, #0
 800fff8:	4621      	mov	r1, r4
 800fffa:	4658      	mov	r0, fp
 800fffc:	f000 fdb8 	bl	8010b70 <_Bfree>
 8010000:	2d00      	cmp	r5, #0
 8010002:	d0dc      	beq.n	800ffbe <_dtoa_r+0x65e>
 8010004:	b12f      	cbz	r7, 8010012 <_dtoa_r+0x6b2>
 8010006:	42af      	cmp	r7, r5
 8010008:	d003      	beq.n	8010012 <_dtoa_r+0x6b2>
 801000a:	4639      	mov	r1, r7
 801000c:	4658      	mov	r0, fp
 801000e:	f000 fdaf 	bl	8010b70 <_Bfree>
 8010012:	4629      	mov	r1, r5
 8010014:	4658      	mov	r0, fp
 8010016:	f000 fdab 	bl	8010b70 <_Bfree>
 801001a:	e7d0      	b.n	800ffbe <_dtoa_r+0x65e>
 801001c:	9704      	str	r7, [sp, #16]
 801001e:	4633      	mov	r3, r6
 8010020:	461e      	mov	r6, r3
 8010022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010026:	2a39      	cmp	r2, #57	@ 0x39
 8010028:	d107      	bne.n	801003a <_dtoa_r+0x6da>
 801002a:	459a      	cmp	sl, r3
 801002c:	d1f8      	bne.n	8010020 <_dtoa_r+0x6c0>
 801002e:	9a04      	ldr	r2, [sp, #16]
 8010030:	3201      	adds	r2, #1
 8010032:	9204      	str	r2, [sp, #16]
 8010034:	2230      	movs	r2, #48	@ 0x30
 8010036:	f88a 2000 	strb.w	r2, [sl]
 801003a:	781a      	ldrb	r2, [r3, #0]
 801003c:	3201      	adds	r2, #1
 801003e:	701a      	strb	r2, [r3, #0]
 8010040:	e7bd      	b.n	800ffbe <_dtoa_r+0x65e>
 8010042:	4b7b      	ldr	r3, [pc, #492]	@ (8010230 <_dtoa_r+0x8d0>)
 8010044:	2200      	movs	r2, #0
 8010046:	f7f0 faff 	bl	8000648 <__aeabi_dmul>
 801004a:	2200      	movs	r2, #0
 801004c:	2300      	movs	r3, #0
 801004e:	4604      	mov	r4, r0
 8010050:	460d      	mov	r5, r1
 8010052:	f7f0 fd61 	bl	8000b18 <__aeabi_dcmpeq>
 8010056:	2800      	cmp	r0, #0
 8010058:	f43f aebb 	beq.w	800fdd2 <_dtoa_r+0x472>
 801005c:	e6f0      	b.n	800fe40 <_dtoa_r+0x4e0>
 801005e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010060:	2a00      	cmp	r2, #0
 8010062:	f000 80db 	beq.w	801021c <_dtoa_r+0x8bc>
 8010066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010068:	2a01      	cmp	r2, #1
 801006a:	f300 80bf 	bgt.w	80101ec <_dtoa_r+0x88c>
 801006e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010070:	2a00      	cmp	r2, #0
 8010072:	f000 80b7 	beq.w	80101e4 <_dtoa_r+0x884>
 8010076:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801007a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801007c:	4646      	mov	r6, r8
 801007e:	9a08      	ldr	r2, [sp, #32]
 8010080:	2101      	movs	r1, #1
 8010082:	441a      	add	r2, r3
 8010084:	4658      	mov	r0, fp
 8010086:	4498      	add	r8, r3
 8010088:	9208      	str	r2, [sp, #32]
 801008a:	f000 fe25 	bl	8010cd8 <__i2b>
 801008e:	4605      	mov	r5, r0
 8010090:	b15e      	cbz	r6, 80100aa <_dtoa_r+0x74a>
 8010092:	9b08      	ldr	r3, [sp, #32]
 8010094:	2b00      	cmp	r3, #0
 8010096:	dd08      	ble.n	80100aa <_dtoa_r+0x74a>
 8010098:	42b3      	cmp	r3, r6
 801009a:	9a08      	ldr	r2, [sp, #32]
 801009c:	bfa8      	it	ge
 801009e:	4633      	movge	r3, r6
 80100a0:	eba8 0803 	sub.w	r8, r8, r3
 80100a4:	1af6      	subs	r6, r6, r3
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	9308      	str	r3, [sp, #32]
 80100aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100ac:	b1f3      	cbz	r3, 80100ec <_dtoa_r+0x78c>
 80100ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f000 80b7 	beq.w	8010224 <_dtoa_r+0x8c4>
 80100b6:	b18c      	cbz	r4, 80100dc <_dtoa_r+0x77c>
 80100b8:	4629      	mov	r1, r5
 80100ba:	4622      	mov	r2, r4
 80100bc:	4658      	mov	r0, fp
 80100be:	f000 fecb 	bl	8010e58 <__pow5mult>
 80100c2:	464a      	mov	r2, r9
 80100c4:	4601      	mov	r1, r0
 80100c6:	4605      	mov	r5, r0
 80100c8:	4658      	mov	r0, fp
 80100ca:	f000 fe1b 	bl	8010d04 <__multiply>
 80100ce:	4649      	mov	r1, r9
 80100d0:	9004      	str	r0, [sp, #16]
 80100d2:	4658      	mov	r0, fp
 80100d4:	f000 fd4c 	bl	8010b70 <_Bfree>
 80100d8:	9b04      	ldr	r3, [sp, #16]
 80100da:	4699      	mov	r9, r3
 80100dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100de:	1b1a      	subs	r2, r3, r4
 80100e0:	d004      	beq.n	80100ec <_dtoa_r+0x78c>
 80100e2:	4649      	mov	r1, r9
 80100e4:	4658      	mov	r0, fp
 80100e6:	f000 feb7 	bl	8010e58 <__pow5mult>
 80100ea:	4681      	mov	r9, r0
 80100ec:	2101      	movs	r1, #1
 80100ee:	4658      	mov	r0, fp
 80100f0:	f000 fdf2 	bl	8010cd8 <__i2b>
 80100f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100f6:	4604      	mov	r4, r0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f000 81cf 	beq.w	801049c <_dtoa_r+0xb3c>
 80100fe:	461a      	mov	r2, r3
 8010100:	4601      	mov	r1, r0
 8010102:	4658      	mov	r0, fp
 8010104:	f000 fea8 	bl	8010e58 <__pow5mult>
 8010108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801010a:	2b01      	cmp	r3, #1
 801010c:	4604      	mov	r4, r0
 801010e:	f300 8095 	bgt.w	801023c <_dtoa_r+0x8dc>
 8010112:	9b02      	ldr	r3, [sp, #8]
 8010114:	2b00      	cmp	r3, #0
 8010116:	f040 8087 	bne.w	8010228 <_dtoa_r+0x8c8>
 801011a:	9b03      	ldr	r3, [sp, #12]
 801011c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010120:	2b00      	cmp	r3, #0
 8010122:	f040 8089 	bne.w	8010238 <_dtoa_r+0x8d8>
 8010126:	9b03      	ldr	r3, [sp, #12]
 8010128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801012c:	0d1b      	lsrs	r3, r3, #20
 801012e:	051b      	lsls	r3, r3, #20
 8010130:	b12b      	cbz	r3, 801013e <_dtoa_r+0x7de>
 8010132:	9b08      	ldr	r3, [sp, #32]
 8010134:	3301      	adds	r3, #1
 8010136:	9308      	str	r3, [sp, #32]
 8010138:	f108 0801 	add.w	r8, r8, #1
 801013c:	2301      	movs	r3, #1
 801013e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010142:	2b00      	cmp	r3, #0
 8010144:	f000 81b0 	beq.w	80104a8 <_dtoa_r+0xb48>
 8010148:	6923      	ldr	r3, [r4, #16]
 801014a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801014e:	6918      	ldr	r0, [r3, #16]
 8010150:	f000 fd76 	bl	8010c40 <__hi0bits>
 8010154:	f1c0 0020 	rsb	r0, r0, #32
 8010158:	9b08      	ldr	r3, [sp, #32]
 801015a:	4418      	add	r0, r3
 801015c:	f010 001f 	ands.w	r0, r0, #31
 8010160:	d077      	beq.n	8010252 <_dtoa_r+0x8f2>
 8010162:	f1c0 0320 	rsb	r3, r0, #32
 8010166:	2b04      	cmp	r3, #4
 8010168:	dd6b      	ble.n	8010242 <_dtoa_r+0x8e2>
 801016a:	9b08      	ldr	r3, [sp, #32]
 801016c:	f1c0 001c 	rsb	r0, r0, #28
 8010170:	4403      	add	r3, r0
 8010172:	4480      	add	r8, r0
 8010174:	4406      	add	r6, r0
 8010176:	9308      	str	r3, [sp, #32]
 8010178:	f1b8 0f00 	cmp.w	r8, #0
 801017c:	dd05      	ble.n	801018a <_dtoa_r+0x82a>
 801017e:	4649      	mov	r1, r9
 8010180:	4642      	mov	r2, r8
 8010182:	4658      	mov	r0, fp
 8010184:	f000 fec2 	bl	8010f0c <__lshift>
 8010188:	4681      	mov	r9, r0
 801018a:	9b08      	ldr	r3, [sp, #32]
 801018c:	2b00      	cmp	r3, #0
 801018e:	dd05      	ble.n	801019c <_dtoa_r+0x83c>
 8010190:	4621      	mov	r1, r4
 8010192:	461a      	mov	r2, r3
 8010194:	4658      	mov	r0, fp
 8010196:	f000 feb9 	bl	8010f0c <__lshift>
 801019a:	4604      	mov	r4, r0
 801019c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d059      	beq.n	8010256 <_dtoa_r+0x8f6>
 80101a2:	4621      	mov	r1, r4
 80101a4:	4648      	mov	r0, r9
 80101a6:	f000 ff1d 	bl	8010fe4 <__mcmp>
 80101aa:	2800      	cmp	r0, #0
 80101ac:	da53      	bge.n	8010256 <_dtoa_r+0x8f6>
 80101ae:	1e7b      	subs	r3, r7, #1
 80101b0:	9304      	str	r3, [sp, #16]
 80101b2:	4649      	mov	r1, r9
 80101b4:	2300      	movs	r3, #0
 80101b6:	220a      	movs	r2, #10
 80101b8:	4658      	mov	r0, fp
 80101ba:	f000 fcfb 	bl	8010bb4 <__multadd>
 80101be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101c0:	4681      	mov	r9, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	f000 8172 	beq.w	80104ac <_dtoa_r+0xb4c>
 80101c8:	2300      	movs	r3, #0
 80101ca:	4629      	mov	r1, r5
 80101cc:	220a      	movs	r2, #10
 80101ce:	4658      	mov	r0, fp
 80101d0:	f000 fcf0 	bl	8010bb4 <__multadd>
 80101d4:	9b00      	ldr	r3, [sp, #0]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	4605      	mov	r5, r0
 80101da:	dc67      	bgt.n	80102ac <_dtoa_r+0x94c>
 80101dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101de:	2b02      	cmp	r3, #2
 80101e0:	dc41      	bgt.n	8010266 <_dtoa_r+0x906>
 80101e2:	e063      	b.n	80102ac <_dtoa_r+0x94c>
 80101e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80101e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80101ea:	e746      	b.n	801007a <_dtoa_r+0x71a>
 80101ec:	9b07      	ldr	r3, [sp, #28]
 80101ee:	1e5c      	subs	r4, r3, #1
 80101f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101f2:	42a3      	cmp	r3, r4
 80101f4:	bfbf      	itttt	lt
 80101f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80101f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80101fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80101fc:	1ae3      	sublt	r3, r4, r3
 80101fe:	bfb4      	ite	lt
 8010200:	18d2      	addlt	r2, r2, r3
 8010202:	1b1c      	subge	r4, r3, r4
 8010204:	9b07      	ldr	r3, [sp, #28]
 8010206:	bfbc      	itt	lt
 8010208:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801020a:	2400      	movlt	r4, #0
 801020c:	2b00      	cmp	r3, #0
 801020e:	bfb5      	itete	lt
 8010210:	eba8 0603 	sublt.w	r6, r8, r3
 8010214:	9b07      	ldrge	r3, [sp, #28]
 8010216:	2300      	movlt	r3, #0
 8010218:	4646      	movge	r6, r8
 801021a:	e730      	b.n	801007e <_dtoa_r+0x71e>
 801021c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801021e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010220:	4646      	mov	r6, r8
 8010222:	e735      	b.n	8010090 <_dtoa_r+0x730>
 8010224:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010226:	e75c      	b.n	80100e2 <_dtoa_r+0x782>
 8010228:	2300      	movs	r3, #0
 801022a:	e788      	b.n	801013e <_dtoa_r+0x7de>
 801022c:	3fe00000 	.word	0x3fe00000
 8010230:	40240000 	.word	0x40240000
 8010234:	40140000 	.word	0x40140000
 8010238:	9b02      	ldr	r3, [sp, #8]
 801023a:	e780      	b.n	801013e <_dtoa_r+0x7de>
 801023c:	2300      	movs	r3, #0
 801023e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010240:	e782      	b.n	8010148 <_dtoa_r+0x7e8>
 8010242:	d099      	beq.n	8010178 <_dtoa_r+0x818>
 8010244:	9a08      	ldr	r2, [sp, #32]
 8010246:	331c      	adds	r3, #28
 8010248:	441a      	add	r2, r3
 801024a:	4498      	add	r8, r3
 801024c:	441e      	add	r6, r3
 801024e:	9208      	str	r2, [sp, #32]
 8010250:	e792      	b.n	8010178 <_dtoa_r+0x818>
 8010252:	4603      	mov	r3, r0
 8010254:	e7f6      	b.n	8010244 <_dtoa_r+0x8e4>
 8010256:	9b07      	ldr	r3, [sp, #28]
 8010258:	9704      	str	r7, [sp, #16]
 801025a:	2b00      	cmp	r3, #0
 801025c:	dc20      	bgt.n	80102a0 <_dtoa_r+0x940>
 801025e:	9300      	str	r3, [sp, #0]
 8010260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010262:	2b02      	cmp	r3, #2
 8010264:	dd1e      	ble.n	80102a4 <_dtoa_r+0x944>
 8010266:	9b00      	ldr	r3, [sp, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	f47f aec0 	bne.w	800ffee <_dtoa_r+0x68e>
 801026e:	4621      	mov	r1, r4
 8010270:	2205      	movs	r2, #5
 8010272:	4658      	mov	r0, fp
 8010274:	f000 fc9e 	bl	8010bb4 <__multadd>
 8010278:	4601      	mov	r1, r0
 801027a:	4604      	mov	r4, r0
 801027c:	4648      	mov	r0, r9
 801027e:	f000 feb1 	bl	8010fe4 <__mcmp>
 8010282:	2800      	cmp	r0, #0
 8010284:	f77f aeb3 	ble.w	800ffee <_dtoa_r+0x68e>
 8010288:	4656      	mov	r6, sl
 801028a:	2331      	movs	r3, #49	@ 0x31
 801028c:	f806 3b01 	strb.w	r3, [r6], #1
 8010290:	9b04      	ldr	r3, [sp, #16]
 8010292:	3301      	adds	r3, #1
 8010294:	9304      	str	r3, [sp, #16]
 8010296:	e6ae      	b.n	800fff6 <_dtoa_r+0x696>
 8010298:	9c07      	ldr	r4, [sp, #28]
 801029a:	9704      	str	r7, [sp, #16]
 801029c:	4625      	mov	r5, r4
 801029e:	e7f3      	b.n	8010288 <_dtoa_r+0x928>
 80102a0:	9b07      	ldr	r3, [sp, #28]
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f000 8104 	beq.w	80104b4 <_dtoa_r+0xb54>
 80102ac:	2e00      	cmp	r6, #0
 80102ae:	dd05      	ble.n	80102bc <_dtoa_r+0x95c>
 80102b0:	4629      	mov	r1, r5
 80102b2:	4632      	mov	r2, r6
 80102b4:	4658      	mov	r0, fp
 80102b6:	f000 fe29 	bl	8010f0c <__lshift>
 80102ba:	4605      	mov	r5, r0
 80102bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d05a      	beq.n	8010378 <_dtoa_r+0xa18>
 80102c2:	6869      	ldr	r1, [r5, #4]
 80102c4:	4658      	mov	r0, fp
 80102c6:	f000 fc13 	bl	8010af0 <_Balloc>
 80102ca:	4606      	mov	r6, r0
 80102cc:	b928      	cbnz	r0, 80102da <_dtoa_r+0x97a>
 80102ce:	4b84      	ldr	r3, [pc, #528]	@ (80104e0 <_dtoa_r+0xb80>)
 80102d0:	4602      	mov	r2, r0
 80102d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80102d6:	f7ff bb5a 	b.w	800f98e <_dtoa_r+0x2e>
 80102da:	692a      	ldr	r2, [r5, #16]
 80102dc:	3202      	adds	r2, #2
 80102de:	0092      	lsls	r2, r2, #2
 80102e0:	f105 010c 	add.w	r1, r5, #12
 80102e4:	300c      	adds	r0, #12
 80102e6:	f7ff faa4 	bl	800f832 <memcpy>
 80102ea:	2201      	movs	r2, #1
 80102ec:	4631      	mov	r1, r6
 80102ee:	4658      	mov	r0, fp
 80102f0:	f000 fe0c 	bl	8010f0c <__lshift>
 80102f4:	f10a 0301 	add.w	r3, sl, #1
 80102f8:	9307      	str	r3, [sp, #28]
 80102fa:	9b00      	ldr	r3, [sp, #0]
 80102fc:	4453      	add	r3, sl
 80102fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010300:	9b02      	ldr	r3, [sp, #8]
 8010302:	f003 0301 	and.w	r3, r3, #1
 8010306:	462f      	mov	r7, r5
 8010308:	930a      	str	r3, [sp, #40]	@ 0x28
 801030a:	4605      	mov	r5, r0
 801030c:	9b07      	ldr	r3, [sp, #28]
 801030e:	4621      	mov	r1, r4
 8010310:	3b01      	subs	r3, #1
 8010312:	4648      	mov	r0, r9
 8010314:	9300      	str	r3, [sp, #0]
 8010316:	f7ff fa9a 	bl	800f84e <quorem>
 801031a:	4639      	mov	r1, r7
 801031c:	9002      	str	r0, [sp, #8]
 801031e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010322:	4648      	mov	r0, r9
 8010324:	f000 fe5e 	bl	8010fe4 <__mcmp>
 8010328:	462a      	mov	r2, r5
 801032a:	9008      	str	r0, [sp, #32]
 801032c:	4621      	mov	r1, r4
 801032e:	4658      	mov	r0, fp
 8010330:	f000 fe74 	bl	801101c <__mdiff>
 8010334:	68c2      	ldr	r2, [r0, #12]
 8010336:	4606      	mov	r6, r0
 8010338:	bb02      	cbnz	r2, 801037c <_dtoa_r+0xa1c>
 801033a:	4601      	mov	r1, r0
 801033c:	4648      	mov	r0, r9
 801033e:	f000 fe51 	bl	8010fe4 <__mcmp>
 8010342:	4602      	mov	r2, r0
 8010344:	4631      	mov	r1, r6
 8010346:	4658      	mov	r0, fp
 8010348:	920e      	str	r2, [sp, #56]	@ 0x38
 801034a:	f000 fc11 	bl	8010b70 <_Bfree>
 801034e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010350:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010352:	9e07      	ldr	r6, [sp, #28]
 8010354:	ea43 0102 	orr.w	r1, r3, r2
 8010358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801035a:	4319      	orrs	r1, r3
 801035c:	d110      	bne.n	8010380 <_dtoa_r+0xa20>
 801035e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010362:	d029      	beq.n	80103b8 <_dtoa_r+0xa58>
 8010364:	9b08      	ldr	r3, [sp, #32]
 8010366:	2b00      	cmp	r3, #0
 8010368:	dd02      	ble.n	8010370 <_dtoa_r+0xa10>
 801036a:	9b02      	ldr	r3, [sp, #8]
 801036c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010370:	9b00      	ldr	r3, [sp, #0]
 8010372:	f883 8000 	strb.w	r8, [r3]
 8010376:	e63f      	b.n	800fff8 <_dtoa_r+0x698>
 8010378:	4628      	mov	r0, r5
 801037a:	e7bb      	b.n	80102f4 <_dtoa_r+0x994>
 801037c:	2201      	movs	r2, #1
 801037e:	e7e1      	b.n	8010344 <_dtoa_r+0x9e4>
 8010380:	9b08      	ldr	r3, [sp, #32]
 8010382:	2b00      	cmp	r3, #0
 8010384:	db04      	blt.n	8010390 <_dtoa_r+0xa30>
 8010386:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010388:	430b      	orrs	r3, r1
 801038a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801038c:	430b      	orrs	r3, r1
 801038e:	d120      	bne.n	80103d2 <_dtoa_r+0xa72>
 8010390:	2a00      	cmp	r2, #0
 8010392:	dded      	ble.n	8010370 <_dtoa_r+0xa10>
 8010394:	4649      	mov	r1, r9
 8010396:	2201      	movs	r2, #1
 8010398:	4658      	mov	r0, fp
 801039a:	f000 fdb7 	bl	8010f0c <__lshift>
 801039e:	4621      	mov	r1, r4
 80103a0:	4681      	mov	r9, r0
 80103a2:	f000 fe1f 	bl	8010fe4 <__mcmp>
 80103a6:	2800      	cmp	r0, #0
 80103a8:	dc03      	bgt.n	80103b2 <_dtoa_r+0xa52>
 80103aa:	d1e1      	bne.n	8010370 <_dtoa_r+0xa10>
 80103ac:	f018 0f01 	tst.w	r8, #1
 80103b0:	d0de      	beq.n	8010370 <_dtoa_r+0xa10>
 80103b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80103b6:	d1d8      	bne.n	801036a <_dtoa_r+0xa0a>
 80103b8:	9a00      	ldr	r2, [sp, #0]
 80103ba:	2339      	movs	r3, #57	@ 0x39
 80103bc:	7013      	strb	r3, [r2, #0]
 80103be:	4633      	mov	r3, r6
 80103c0:	461e      	mov	r6, r3
 80103c2:	3b01      	subs	r3, #1
 80103c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80103c8:	2a39      	cmp	r2, #57	@ 0x39
 80103ca:	d052      	beq.n	8010472 <_dtoa_r+0xb12>
 80103cc:	3201      	adds	r2, #1
 80103ce:	701a      	strb	r2, [r3, #0]
 80103d0:	e612      	b.n	800fff8 <_dtoa_r+0x698>
 80103d2:	2a00      	cmp	r2, #0
 80103d4:	dd07      	ble.n	80103e6 <_dtoa_r+0xa86>
 80103d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80103da:	d0ed      	beq.n	80103b8 <_dtoa_r+0xa58>
 80103dc:	9a00      	ldr	r2, [sp, #0]
 80103de:	f108 0301 	add.w	r3, r8, #1
 80103e2:	7013      	strb	r3, [r2, #0]
 80103e4:	e608      	b.n	800fff8 <_dtoa_r+0x698>
 80103e6:	9b07      	ldr	r3, [sp, #28]
 80103e8:	9a07      	ldr	r2, [sp, #28]
 80103ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80103ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d028      	beq.n	8010446 <_dtoa_r+0xae6>
 80103f4:	4649      	mov	r1, r9
 80103f6:	2300      	movs	r3, #0
 80103f8:	220a      	movs	r2, #10
 80103fa:	4658      	mov	r0, fp
 80103fc:	f000 fbda 	bl	8010bb4 <__multadd>
 8010400:	42af      	cmp	r7, r5
 8010402:	4681      	mov	r9, r0
 8010404:	f04f 0300 	mov.w	r3, #0
 8010408:	f04f 020a 	mov.w	r2, #10
 801040c:	4639      	mov	r1, r7
 801040e:	4658      	mov	r0, fp
 8010410:	d107      	bne.n	8010422 <_dtoa_r+0xac2>
 8010412:	f000 fbcf 	bl	8010bb4 <__multadd>
 8010416:	4607      	mov	r7, r0
 8010418:	4605      	mov	r5, r0
 801041a:	9b07      	ldr	r3, [sp, #28]
 801041c:	3301      	adds	r3, #1
 801041e:	9307      	str	r3, [sp, #28]
 8010420:	e774      	b.n	801030c <_dtoa_r+0x9ac>
 8010422:	f000 fbc7 	bl	8010bb4 <__multadd>
 8010426:	4629      	mov	r1, r5
 8010428:	4607      	mov	r7, r0
 801042a:	2300      	movs	r3, #0
 801042c:	220a      	movs	r2, #10
 801042e:	4658      	mov	r0, fp
 8010430:	f000 fbc0 	bl	8010bb4 <__multadd>
 8010434:	4605      	mov	r5, r0
 8010436:	e7f0      	b.n	801041a <_dtoa_r+0xaba>
 8010438:	9b00      	ldr	r3, [sp, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	bfcc      	ite	gt
 801043e:	461e      	movgt	r6, r3
 8010440:	2601      	movle	r6, #1
 8010442:	4456      	add	r6, sl
 8010444:	2700      	movs	r7, #0
 8010446:	4649      	mov	r1, r9
 8010448:	2201      	movs	r2, #1
 801044a:	4658      	mov	r0, fp
 801044c:	f000 fd5e 	bl	8010f0c <__lshift>
 8010450:	4621      	mov	r1, r4
 8010452:	4681      	mov	r9, r0
 8010454:	f000 fdc6 	bl	8010fe4 <__mcmp>
 8010458:	2800      	cmp	r0, #0
 801045a:	dcb0      	bgt.n	80103be <_dtoa_r+0xa5e>
 801045c:	d102      	bne.n	8010464 <_dtoa_r+0xb04>
 801045e:	f018 0f01 	tst.w	r8, #1
 8010462:	d1ac      	bne.n	80103be <_dtoa_r+0xa5e>
 8010464:	4633      	mov	r3, r6
 8010466:	461e      	mov	r6, r3
 8010468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801046c:	2a30      	cmp	r2, #48	@ 0x30
 801046e:	d0fa      	beq.n	8010466 <_dtoa_r+0xb06>
 8010470:	e5c2      	b.n	800fff8 <_dtoa_r+0x698>
 8010472:	459a      	cmp	sl, r3
 8010474:	d1a4      	bne.n	80103c0 <_dtoa_r+0xa60>
 8010476:	9b04      	ldr	r3, [sp, #16]
 8010478:	3301      	adds	r3, #1
 801047a:	9304      	str	r3, [sp, #16]
 801047c:	2331      	movs	r3, #49	@ 0x31
 801047e:	f88a 3000 	strb.w	r3, [sl]
 8010482:	e5b9      	b.n	800fff8 <_dtoa_r+0x698>
 8010484:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010486:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80104e4 <_dtoa_r+0xb84>
 801048a:	b11b      	cbz	r3, 8010494 <_dtoa_r+0xb34>
 801048c:	f10a 0308 	add.w	r3, sl, #8
 8010490:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010492:	6013      	str	r3, [r2, #0]
 8010494:	4650      	mov	r0, sl
 8010496:	b019      	add	sp, #100	@ 0x64
 8010498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801049c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801049e:	2b01      	cmp	r3, #1
 80104a0:	f77f ae37 	ble.w	8010112 <_dtoa_r+0x7b2>
 80104a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80104a8:	2001      	movs	r0, #1
 80104aa:	e655      	b.n	8010158 <_dtoa_r+0x7f8>
 80104ac:	9b00      	ldr	r3, [sp, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	f77f aed6 	ble.w	8010260 <_dtoa_r+0x900>
 80104b4:	4656      	mov	r6, sl
 80104b6:	4621      	mov	r1, r4
 80104b8:	4648      	mov	r0, r9
 80104ba:	f7ff f9c8 	bl	800f84e <quorem>
 80104be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80104c2:	f806 8b01 	strb.w	r8, [r6], #1
 80104c6:	9b00      	ldr	r3, [sp, #0]
 80104c8:	eba6 020a 	sub.w	r2, r6, sl
 80104cc:	4293      	cmp	r3, r2
 80104ce:	ddb3      	ble.n	8010438 <_dtoa_r+0xad8>
 80104d0:	4649      	mov	r1, r9
 80104d2:	2300      	movs	r3, #0
 80104d4:	220a      	movs	r2, #10
 80104d6:	4658      	mov	r0, fp
 80104d8:	f000 fb6c 	bl	8010bb4 <__multadd>
 80104dc:	4681      	mov	r9, r0
 80104de:	e7ea      	b.n	80104b6 <_dtoa_r+0xb56>
 80104e0:	08011e54 	.word	0x08011e54
 80104e4:	08011dd8 	.word	0x08011dd8

080104e8 <_free_r>:
 80104e8:	b538      	push	{r3, r4, r5, lr}
 80104ea:	4605      	mov	r5, r0
 80104ec:	2900      	cmp	r1, #0
 80104ee:	d041      	beq.n	8010574 <_free_r+0x8c>
 80104f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104f4:	1f0c      	subs	r4, r1, #4
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	bfb8      	it	lt
 80104fa:	18e4      	addlt	r4, r4, r3
 80104fc:	f000 faec 	bl	8010ad8 <__malloc_lock>
 8010500:	4a1d      	ldr	r2, [pc, #116]	@ (8010578 <_free_r+0x90>)
 8010502:	6813      	ldr	r3, [r2, #0]
 8010504:	b933      	cbnz	r3, 8010514 <_free_r+0x2c>
 8010506:	6063      	str	r3, [r4, #4]
 8010508:	6014      	str	r4, [r2, #0]
 801050a:	4628      	mov	r0, r5
 801050c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010510:	f000 bae8 	b.w	8010ae4 <__malloc_unlock>
 8010514:	42a3      	cmp	r3, r4
 8010516:	d908      	bls.n	801052a <_free_r+0x42>
 8010518:	6820      	ldr	r0, [r4, #0]
 801051a:	1821      	adds	r1, r4, r0
 801051c:	428b      	cmp	r3, r1
 801051e:	bf01      	itttt	eq
 8010520:	6819      	ldreq	r1, [r3, #0]
 8010522:	685b      	ldreq	r3, [r3, #4]
 8010524:	1809      	addeq	r1, r1, r0
 8010526:	6021      	streq	r1, [r4, #0]
 8010528:	e7ed      	b.n	8010506 <_free_r+0x1e>
 801052a:	461a      	mov	r2, r3
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	b10b      	cbz	r3, 8010534 <_free_r+0x4c>
 8010530:	42a3      	cmp	r3, r4
 8010532:	d9fa      	bls.n	801052a <_free_r+0x42>
 8010534:	6811      	ldr	r1, [r2, #0]
 8010536:	1850      	adds	r0, r2, r1
 8010538:	42a0      	cmp	r0, r4
 801053a:	d10b      	bne.n	8010554 <_free_r+0x6c>
 801053c:	6820      	ldr	r0, [r4, #0]
 801053e:	4401      	add	r1, r0
 8010540:	1850      	adds	r0, r2, r1
 8010542:	4283      	cmp	r3, r0
 8010544:	6011      	str	r1, [r2, #0]
 8010546:	d1e0      	bne.n	801050a <_free_r+0x22>
 8010548:	6818      	ldr	r0, [r3, #0]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	6053      	str	r3, [r2, #4]
 801054e:	4408      	add	r0, r1
 8010550:	6010      	str	r0, [r2, #0]
 8010552:	e7da      	b.n	801050a <_free_r+0x22>
 8010554:	d902      	bls.n	801055c <_free_r+0x74>
 8010556:	230c      	movs	r3, #12
 8010558:	602b      	str	r3, [r5, #0]
 801055a:	e7d6      	b.n	801050a <_free_r+0x22>
 801055c:	6820      	ldr	r0, [r4, #0]
 801055e:	1821      	adds	r1, r4, r0
 8010560:	428b      	cmp	r3, r1
 8010562:	bf04      	itt	eq
 8010564:	6819      	ldreq	r1, [r3, #0]
 8010566:	685b      	ldreq	r3, [r3, #4]
 8010568:	6063      	str	r3, [r4, #4]
 801056a:	bf04      	itt	eq
 801056c:	1809      	addeq	r1, r1, r0
 801056e:	6021      	streq	r1, [r4, #0]
 8010570:	6054      	str	r4, [r2, #4]
 8010572:	e7ca      	b.n	801050a <_free_r+0x22>
 8010574:	bd38      	pop	{r3, r4, r5, pc}
 8010576:	bf00      	nop
 8010578:	20010388 	.word	0x20010388

0801057c <__ssputs_r>:
 801057c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010580:	688e      	ldr	r6, [r1, #8]
 8010582:	461f      	mov	r7, r3
 8010584:	42be      	cmp	r6, r7
 8010586:	680b      	ldr	r3, [r1, #0]
 8010588:	4682      	mov	sl, r0
 801058a:	460c      	mov	r4, r1
 801058c:	4690      	mov	r8, r2
 801058e:	d82d      	bhi.n	80105ec <__ssputs_r+0x70>
 8010590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010594:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010598:	d026      	beq.n	80105e8 <__ssputs_r+0x6c>
 801059a:	6965      	ldr	r5, [r4, #20]
 801059c:	6909      	ldr	r1, [r1, #16]
 801059e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105a2:	eba3 0901 	sub.w	r9, r3, r1
 80105a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80105aa:	1c7b      	adds	r3, r7, #1
 80105ac:	444b      	add	r3, r9
 80105ae:	106d      	asrs	r5, r5, #1
 80105b0:	429d      	cmp	r5, r3
 80105b2:	bf38      	it	cc
 80105b4:	461d      	movcc	r5, r3
 80105b6:	0553      	lsls	r3, r2, #21
 80105b8:	d527      	bpl.n	801060a <__ssputs_r+0x8e>
 80105ba:	4629      	mov	r1, r5
 80105bc:	f000 f960 	bl	8010880 <_malloc_r>
 80105c0:	4606      	mov	r6, r0
 80105c2:	b360      	cbz	r0, 801061e <__ssputs_r+0xa2>
 80105c4:	6921      	ldr	r1, [r4, #16]
 80105c6:	464a      	mov	r2, r9
 80105c8:	f7ff f933 	bl	800f832 <memcpy>
 80105cc:	89a3      	ldrh	r3, [r4, #12]
 80105ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80105d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105d6:	81a3      	strh	r3, [r4, #12]
 80105d8:	6126      	str	r6, [r4, #16]
 80105da:	6165      	str	r5, [r4, #20]
 80105dc:	444e      	add	r6, r9
 80105de:	eba5 0509 	sub.w	r5, r5, r9
 80105e2:	6026      	str	r6, [r4, #0]
 80105e4:	60a5      	str	r5, [r4, #8]
 80105e6:	463e      	mov	r6, r7
 80105e8:	42be      	cmp	r6, r7
 80105ea:	d900      	bls.n	80105ee <__ssputs_r+0x72>
 80105ec:	463e      	mov	r6, r7
 80105ee:	6820      	ldr	r0, [r4, #0]
 80105f0:	4632      	mov	r2, r6
 80105f2:	4641      	mov	r1, r8
 80105f4:	f000 fe6f 	bl	80112d6 <memmove>
 80105f8:	68a3      	ldr	r3, [r4, #8]
 80105fa:	1b9b      	subs	r3, r3, r6
 80105fc:	60a3      	str	r3, [r4, #8]
 80105fe:	6823      	ldr	r3, [r4, #0]
 8010600:	4433      	add	r3, r6
 8010602:	6023      	str	r3, [r4, #0]
 8010604:	2000      	movs	r0, #0
 8010606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801060a:	462a      	mov	r2, r5
 801060c:	f000 fe35 	bl	801127a <_realloc_r>
 8010610:	4606      	mov	r6, r0
 8010612:	2800      	cmp	r0, #0
 8010614:	d1e0      	bne.n	80105d8 <__ssputs_r+0x5c>
 8010616:	6921      	ldr	r1, [r4, #16]
 8010618:	4650      	mov	r0, sl
 801061a:	f7ff ff65 	bl	80104e8 <_free_r>
 801061e:	230c      	movs	r3, #12
 8010620:	f8ca 3000 	str.w	r3, [sl]
 8010624:	89a3      	ldrh	r3, [r4, #12]
 8010626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801062a:	81a3      	strh	r3, [r4, #12]
 801062c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010630:	e7e9      	b.n	8010606 <__ssputs_r+0x8a>
	...

08010634 <_svfiprintf_r>:
 8010634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010638:	4698      	mov	r8, r3
 801063a:	898b      	ldrh	r3, [r1, #12]
 801063c:	061b      	lsls	r3, r3, #24
 801063e:	b09d      	sub	sp, #116	@ 0x74
 8010640:	4607      	mov	r7, r0
 8010642:	460d      	mov	r5, r1
 8010644:	4614      	mov	r4, r2
 8010646:	d510      	bpl.n	801066a <_svfiprintf_r+0x36>
 8010648:	690b      	ldr	r3, [r1, #16]
 801064a:	b973      	cbnz	r3, 801066a <_svfiprintf_r+0x36>
 801064c:	2140      	movs	r1, #64	@ 0x40
 801064e:	f000 f917 	bl	8010880 <_malloc_r>
 8010652:	6028      	str	r0, [r5, #0]
 8010654:	6128      	str	r0, [r5, #16]
 8010656:	b930      	cbnz	r0, 8010666 <_svfiprintf_r+0x32>
 8010658:	230c      	movs	r3, #12
 801065a:	603b      	str	r3, [r7, #0]
 801065c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010660:	b01d      	add	sp, #116	@ 0x74
 8010662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010666:	2340      	movs	r3, #64	@ 0x40
 8010668:	616b      	str	r3, [r5, #20]
 801066a:	2300      	movs	r3, #0
 801066c:	9309      	str	r3, [sp, #36]	@ 0x24
 801066e:	2320      	movs	r3, #32
 8010670:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010674:	f8cd 800c 	str.w	r8, [sp, #12]
 8010678:	2330      	movs	r3, #48	@ 0x30
 801067a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010818 <_svfiprintf_r+0x1e4>
 801067e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010682:	f04f 0901 	mov.w	r9, #1
 8010686:	4623      	mov	r3, r4
 8010688:	469a      	mov	sl, r3
 801068a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801068e:	b10a      	cbz	r2, 8010694 <_svfiprintf_r+0x60>
 8010690:	2a25      	cmp	r2, #37	@ 0x25
 8010692:	d1f9      	bne.n	8010688 <_svfiprintf_r+0x54>
 8010694:	ebba 0b04 	subs.w	fp, sl, r4
 8010698:	d00b      	beq.n	80106b2 <_svfiprintf_r+0x7e>
 801069a:	465b      	mov	r3, fp
 801069c:	4622      	mov	r2, r4
 801069e:	4629      	mov	r1, r5
 80106a0:	4638      	mov	r0, r7
 80106a2:	f7ff ff6b 	bl	801057c <__ssputs_r>
 80106a6:	3001      	adds	r0, #1
 80106a8:	f000 80a7 	beq.w	80107fa <_svfiprintf_r+0x1c6>
 80106ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106ae:	445a      	add	r2, fp
 80106b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80106b2:	f89a 3000 	ldrb.w	r3, [sl]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	f000 809f 	beq.w	80107fa <_svfiprintf_r+0x1c6>
 80106bc:	2300      	movs	r3, #0
 80106be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80106c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106c6:	f10a 0a01 	add.w	sl, sl, #1
 80106ca:	9304      	str	r3, [sp, #16]
 80106cc:	9307      	str	r3, [sp, #28]
 80106ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80106d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80106d4:	4654      	mov	r4, sl
 80106d6:	2205      	movs	r2, #5
 80106d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106dc:	484e      	ldr	r0, [pc, #312]	@ (8010818 <_svfiprintf_r+0x1e4>)
 80106de:	f7ef fd9f 	bl	8000220 <memchr>
 80106e2:	9a04      	ldr	r2, [sp, #16]
 80106e4:	b9d8      	cbnz	r0, 801071e <_svfiprintf_r+0xea>
 80106e6:	06d0      	lsls	r0, r2, #27
 80106e8:	bf44      	itt	mi
 80106ea:	2320      	movmi	r3, #32
 80106ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106f0:	0711      	lsls	r1, r2, #28
 80106f2:	bf44      	itt	mi
 80106f4:	232b      	movmi	r3, #43	@ 0x2b
 80106f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106fa:	f89a 3000 	ldrb.w	r3, [sl]
 80106fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010700:	d015      	beq.n	801072e <_svfiprintf_r+0xfa>
 8010702:	9a07      	ldr	r2, [sp, #28]
 8010704:	4654      	mov	r4, sl
 8010706:	2000      	movs	r0, #0
 8010708:	f04f 0c0a 	mov.w	ip, #10
 801070c:	4621      	mov	r1, r4
 801070e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010712:	3b30      	subs	r3, #48	@ 0x30
 8010714:	2b09      	cmp	r3, #9
 8010716:	d94b      	bls.n	80107b0 <_svfiprintf_r+0x17c>
 8010718:	b1b0      	cbz	r0, 8010748 <_svfiprintf_r+0x114>
 801071a:	9207      	str	r2, [sp, #28]
 801071c:	e014      	b.n	8010748 <_svfiprintf_r+0x114>
 801071e:	eba0 0308 	sub.w	r3, r0, r8
 8010722:	fa09 f303 	lsl.w	r3, r9, r3
 8010726:	4313      	orrs	r3, r2
 8010728:	9304      	str	r3, [sp, #16]
 801072a:	46a2      	mov	sl, r4
 801072c:	e7d2      	b.n	80106d4 <_svfiprintf_r+0xa0>
 801072e:	9b03      	ldr	r3, [sp, #12]
 8010730:	1d19      	adds	r1, r3, #4
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	9103      	str	r1, [sp, #12]
 8010736:	2b00      	cmp	r3, #0
 8010738:	bfbb      	ittet	lt
 801073a:	425b      	neglt	r3, r3
 801073c:	f042 0202 	orrlt.w	r2, r2, #2
 8010740:	9307      	strge	r3, [sp, #28]
 8010742:	9307      	strlt	r3, [sp, #28]
 8010744:	bfb8      	it	lt
 8010746:	9204      	strlt	r2, [sp, #16]
 8010748:	7823      	ldrb	r3, [r4, #0]
 801074a:	2b2e      	cmp	r3, #46	@ 0x2e
 801074c:	d10a      	bne.n	8010764 <_svfiprintf_r+0x130>
 801074e:	7863      	ldrb	r3, [r4, #1]
 8010750:	2b2a      	cmp	r3, #42	@ 0x2a
 8010752:	d132      	bne.n	80107ba <_svfiprintf_r+0x186>
 8010754:	9b03      	ldr	r3, [sp, #12]
 8010756:	1d1a      	adds	r2, r3, #4
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	9203      	str	r2, [sp, #12]
 801075c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010760:	3402      	adds	r4, #2
 8010762:	9305      	str	r3, [sp, #20]
 8010764:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010828 <_svfiprintf_r+0x1f4>
 8010768:	7821      	ldrb	r1, [r4, #0]
 801076a:	2203      	movs	r2, #3
 801076c:	4650      	mov	r0, sl
 801076e:	f7ef fd57 	bl	8000220 <memchr>
 8010772:	b138      	cbz	r0, 8010784 <_svfiprintf_r+0x150>
 8010774:	9b04      	ldr	r3, [sp, #16]
 8010776:	eba0 000a 	sub.w	r0, r0, sl
 801077a:	2240      	movs	r2, #64	@ 0x40
 801077c:	4082      	lsls	r2, r0
 801077e:	4313      	orrs	r3, r2
 8010780:	3401      	adds	r4, #1
 8010782:	9304      	str	r3, [sp, #16]
 8010784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010788:	4824      	ldr	r0, [pc, #144]	@ (801081c <_svfiprintf_r+0x1e8>)
 801078a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801078e:	2206      	movs	r2, #6
 8010790:	f7ef fd46 	bl	8000220 <memchr>
 8010794:	2800      	cmp	r0, #0
 8010796:	d036      	beq.n	8010806 <_svfiprintf_r+0x1d2>
 8010798:	4b21      	ldr	r3, [pc, #132]	@ (8010820 <_svfiprintf_r+0x1ec>)
 801079a:	bb1b      	cbnz	r3, 80107e4 <_svfiprintf_r+0x1b0>
 801079c:	9b03      	ldr	r3, [sp, #12]
 801079e:	3307      	adds	r3, #7
 80107a0:	f023 0307 	bic.w	r3, r3, #7
 80107a4:	3308      	adds	r3, #8
 80107a6:	9303      	str	r3, [sp, #12]
 80107a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107aa:	4433      	add	r3, r6
 80107ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80107ae:	e76a      	b.n	8010686 <_svfiprintf_r+0x52>
 80107b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80107b4:	460c      	mov	r4, r1
 80107b6:	2001      	movs	r0, #1
 80107b8:	e7a8      	b.n	801070c <_svfiprintf_r+0xd8>
 80107ba:	2300      	movs	r3, #0
 80107bc:	3401      	adds	r4, #1
 80107be:	9305      	str	r3, [sp, #20]
 80107c0:	4619      	mov	r1, r3
 80107c2:	f04f 0c0a 	mov.w	ip, #10
 80107c6:	4620      	mov	r0, r4
 80107c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107cc:	3a30      	subs	r2, #48	@ 0x30
 80107ce:	2a09      	cmp	r2, #9
 80107d0:	d903      	bls.n	80107da <_svfiprintf_r+0x1a6>
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d0c6      	beq.n	8010764 <_svfiprintf_r+0x130>
 80107d6:	9105      	str	r1, [sp, #20]
 80107d8:	e7c4      	b.n	8010764 <_svfiprintf_r+0x130>
 80107da:	fb0c 2101 	mla	r1, ip, r1, r2
 80107de:	4604      	mov	r4, r0
 80107e0:	2301      	movs	r3, #1
 80107e2:	e7f0      	b.n	80107c6 <_svfiprintf_r+0x192>
 80107e4:	ab03      	add	r3, sp, #12
 80107e6:	9300      	str	r3, [sp, #0]
 80107e8:	462a      	mov	r2, r5
 80107ea:	4b0e      	ldr	r3, [pc, #56]	@ (8010824 <_svfiprintf_r+0x1f0>)
 80107ec:	a904      	add	r1, sp, #16
 80107ee:	4638      	mov	r0, r7
 80107f0:	f7fe fadc 	bl	800edac <_printf_float>
 80107f4:	1c42      	adds	r2, r0, #1
 80107f6:	4606      	mov	r6, r0
 80107f8:	d1d6      	bne.n	80107a8 <_svfiprintf_r+0x174>
 80107fa:	89ab      	ldrh	r3, [r5, #12]
 80107fc:	065b      	lsls	r3, r3, #25
 80107fe:	f53f af2d 	bmi.w	801065c <_svfiprintf_r+0x28>
 8010802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010804:	e72c      	b.n	8010660 <_svfiprintf_r+0x2c>
 8010806:	ab03      	add	r3, sp, #12
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	462a      	mov	r2, r5
 801080c:	4b05      	ldr	r3, [pc, #20]	@ (8010824 <_svfiprintf_r+0x1f0>)
 801080e:	a904      	add	r1, sp, #16
 8010810:	4638      	mov	r0, r7
 8010812:	f7fe fd63 	bl	800f2dc <_printf_i>
 8010816:	e7ed      	b.n	80107f4 <_svfiprintf_r+0x1c0>
 8010818:	08011e65 	.word	0x08011e65
 801081c:	08011e6f 	.word	0x08011e6f
 8010820:	0800edad 	.word	0x0800edad
 8010824:	0801057d 	.word	0x0801057d
 8010828:	08011e6b 	.word	0x08011e6b

0801082c <malloc>:
 801082c:	4b02      	ldr	r3, [pc, #8]	@ (8010838 <malloc+0xc>)
 801082e:	4601      	mov	r1, r0
 8010830:	6818      	ldr	r0, [r3, #0]
 8010832:	f000 b825 	b.w	8010880 <_malloc_r>
 8010836:	bf00      	nop
 8010838:	20000194 	.word	0x20000194

0801083c <sbrk_aligned>:
 801083c:	b570      	push	{r4, r5, r6, lr}
 801083e:	4e0f      	ldr	r6, [pc, #60]	@ (801087c <sbrk_aligned+0x40>)
 8010840:	460c      	mov	r4, r1
 8010842:	6831      	ldr	r1, [r6, #0]
 8010844:	4605      	mov	r5, r0
 8010846:	b911      	cbnz	r1, 801084e <sbrk_aligned+0x12>
 8010848:	f000 fd94 	bl	8011374 <_sbrk_r>
 801084c:	6030      	str	r0, [r6, #0]
 801084e:	4621      	mov	r1, r4
 8010850:	4628      	mov	r0, r5
 8010852:	f000 fd8f 	bl	8011374 <_sbrk_r>
 8010856:	1c43      	adds	r3, r0, #1
 8010858:	d103      	bne.n	8010862 <sbrk_aligned+0x26>
 801085a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801085e:	4620      	mov	r0, r4
 8010860:	bd70      	pop	{r4, r5, r6, pc}
 8010862:	1cc4      	adds	r4, r0, #3
 8010864:	f024 0403 	bic.w	r4, r4, #3
 8010868:	42a0      	cmp	r0, r4
 801086a:	d0f8      	beq.n	801085e <sbrk_aligned+0x22>
 801086c:	1a21      	subs	r1, r4, r0
 801086e:	4628      	mov	r0, r5
 8010870:	f000 fd80 	bl	8011374 <_sbrk_r>
 8010874:	3001      	adds	r0, #1
 8010876:	d1f2      	bne.n	801085e <sbrk_aligned+0x22>
 8010878:	e7ef      	b.n	801085a <sbrk_aligned+0x1e>
 801087a:	bf00      	nop
 801087c:	20010384 	.word	0x20010384

08010880 <_malloc_r>:
 8010880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010884:	1ccd      	adds	r5, r1, #3
 8010886:	f025 0503 	bic.w	r5, r5, #3
 801088a:	3508      	adds	r5, #8
 801088c:	2d0c      	cmp	r5, #12
 801088e:	bf38      	it	cc
 8010890:	250c      	movcc	r5, #12
 8010892:	2d00      	cmp	r5, #0
 8010894:	4606      	mov	r6, r0
 8010896:	db01      	blt.n	801089c <_malloc_r+0x1c>
 8010898:	42a9      	cmp	r1, r5
 801089a:	d904      	bls.n	80108a6 <_malloc_r+0x26>
 801089c:	230c      	movs	r3, #12
 801089e:	6033      	str	r3, [r6, #0]
 80108a0:	2000      	movs	r0, #0
 80108a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801097c <_malloc_r+0xfc>
 80108aa:	f000 f915 	bl	8010ad8 <__malloc_lock>
 80108ae:	f8d8 3000 	ldr.w	r3, [r8]
 80108b2:	461c      	mov	r4, r3
 80108b4:	bb44      	cbnz	r4, 8010908 <_malloc_r+0x88>
 80108b6:	4629      	mov	r1, r5
 80108b8:	4630      	mov	r0, r6
 80108ba:	f7ff ffbf 	bl	801083c <sbrk_aligned>
 80108be:	1c43      	adds	r3, r0, #1
 80108c0:	4604      	mov	r4, r0
 80108c2:	d158      	bne.n	8010976 <_malloc_r+0xf6>
 80108c4:	f8d8 4000 	ldr.w	r4, [r8]
 80108c8:	4627      	mov	r7, r4
 80108ca:	2f00      	cmp	r7, #0
 80108cc:	d143      	bne.n	8010956 <_malloc_r+0xd6>
 80108ce:	2c00      	cmp	r4, #0
 80108d0:	d04b      	beq.n	801096a <_malloc_r+0xea>
 80108d2:	6823      	ldr	r3, [r4, #0]
 80108d4:	4639      	mov	r1, r7
 80108d6:	4630      	mov	r0, r6
 80108d8:	eb04 0903 	add.w	r9, r4, r3
 80108dc:	f000 fd4a 	bl	8011374 <_sbrk_r>
 80108e0:	4581      	cmp	r9, r0
 80108e2:	d142      	bne.n	801096a <_malloc_r+0xea>
 80108e4:	6821      	ldr	r1, [r4, #0]
 80108e6:	1a6d      	subs	r5, r5, r1
 80108e8:	4629      	mov	r1, r5
 80108ea:	4630      	mov	r0, r6
 80108ec:	f7ff ffa6 	bl	801083c <sbrk_aligned>
 80108f0:	3001      	adds	r0, #1
 80108f2:	d03a      	beq.n	801096a <_malloc_r+0xea>
 80108f4:	6823      	ldr	r3, [r4, #0]
 80108f6:	442b      	add	r3, r5
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	f8d8 3000 	ldr.w	r3, [r8]
 80108fe:	685a      	ldr	r2, [r3, #4]
 8010900:	bb62      	cbnz	r2, 801095c <_malloc_r+0xdc>
 8010902:	f8c8 7000 	str.w	r7, [r8]
 8010906:	e00f      	b.n	8010928 <_malloc_r+0xa8>
 8010908:	6822      	ldr	r2, [r4, #0]
 801090a:	1b52      	subs	r2, r2, r5
 801090c:	d420      	bmi.n	8010950 <_malloc_r+0xd0>
 801090e:	2a0b      	cmp	r2, #11
 8010910:	d917      	bls.n	8010942 <_malloc_r+0xc2>
 8010912:	1961      	adds	r1, r4, r5
 8010914:	42a3      	cmp	r3, r4
 8010916:	6025      	str	r5, [r4, #0]
 8010918:	bf18      	it	ne
 801091a:	6059      	strne	r1, [r3, #4]
 801091c:	6863      	ldr	r3, [r4, #4]
 801091e:	bf08      	it	eq
 8010920:	f8c8 1000 	streq.w	r1, [r8]
 8010924:	5162      	str	r2, [r4, r5]
 8010926:	604b      	str	r3, [r1, #4]
 8010928:	4630      	mov	r0, r6
 801092a:	f000 f8db 	bl	8010ae4 <__malloc_unlock>
 801092e:	f104 000b 	add.w	r0, r4, #11
 8010932:	1d23      	adds	r3, r4, #4
 8010934:	f020 0007 	bic.w	r0, r0, #7
 8010938:	1ac2      	subs	r2, r0, r3
 801093a:	bf1c      	itt	ne
 801093c:	1a1b      	subne	r3, r3, r0
 801093e:	50a3      	strne	r3, [r4, r2]
 8010940:	e7af      	b.n	80108a2 <_malloc_r+0x22>
 8010942:	6862      	ldr	r2, [r4, #4]
 8010944:	42a3      	cmp	r3, r4
 8010946:	bf0c      	ite	eq
 8010948:	f8c8 2000 	streq.w	r2, [r8]
 801094c:	605a      	strne	r2, [r3, #4]
 801094e:	e7eb      	b.n	8010928 <_malloc_r+0xa8>
 8010950:	4623      	mov	r3, r4
 8010952:	6864      	ldr	r4, [r4, #4]
 8010954:	e7ae      	b.n	80108b4 <_malloc_r+0x34>
 8010956:	463c      	mov	r4, r7
 8010958:	687f      	ldr	r7, [r7, #4]
 801095a:	e7b6      	b.n	80108ca <_malloc_r+0x4a>
 801095c:	461a      	mov	r2, r3
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	42a3      	cmp	r3, r4
 8010962:	d1fb      	bne.n	801095c <_malloc_r+0xdc>
 8010964:	2300      	movs	r3, #0
 8010966:	6053      	str	r3, [r2, #4]
 8010968:	e7de      	b.n	8010928 <_malloc_r+0xa8>
 801096a:	230c      	movs	r3, #12
 801096c:	6033      	str	r3, [r6, #0]
 801096e:	4630      	mov	r0, r6
 8010970:	f000 f8b8 	bl	8010ae4 <__malloc_unlock>
 8010974:	e794      	b.n	80108a0 <_malloc_r+0x20>
 8010976:	6005      	str	r5, [r0, #0]
 8010978:	e7d6      	b.n	8010928 <_malloc_r+0xa8>
 801097a:	bf00      	nop
 801097c:	20010388 	.word	0x20010388

08010980 <__sflush_r>:
 8010980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010988:	0716      	lsls	r6, r2, #28
 801098a:	4605      	mov	r5, r0
 801098c:	460c      	mov	r4, r1
 801098e:	d454      	bmi.n	8010a3a <__sflush_r+0xba>
 8010990:	684b      	ldr	r3, [r1, #4]
 8010992:	2b00      	cmp	r3, #0
 8010994:	dc02      	bgt.n	801099c <__sflush_r+0x1c>
 8010996:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010998:	2b00      	cmp	r3, #0
 801099a:	dd48      	ble.n	8010a2e <__sflush_r+0xae>
 801099c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801099e:	2e00      	cmp	r6, #0
 80109a0:	d045      	beq.n	8010a2e <__sflush_r+0xae>
 80109a2:	2300      	movs	r3, #0
 80109a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80109a8:	682f      	ldr	r7, [r5, #0]
 80109aa:	6a21      	ldr	r1, [r4, #32]
 80109ac:	602b      	str	r3, [r5, #0]
 80109ae:	d030      	beq.n	8010a12 <__sflush_r+0x92>
 80109b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80109b2:	89a3      	ldrh	r3, [r4, #12]
 80109b4:	0759      	lsls	r1, r3, #29
 80109b6:	d505      	bpl.n	80109c4 <__sflush_r+0x44>
 80109b8:	6863      	ldr	r3, [r4, #4]
 80109ba:	1ad2      	subs	r2, r2, r3
 80109bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109be:	b10b      	cbz	r3, 80109c4 <__sflush_r+0x44>
 80109c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80109c2:	1ad2      	subs	r2, r2, r3
 80109c4:	2300      	movs	r3, #0
 80109c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109c8:	6a21      	ldr	r1, [r4, #32]
 80109ca:	4628      	mov	r0, r5
 80109cc:	47b0      	blx	r6
 80109ce:	1c43      	adds	r3, r0, #1
 80109d0:	89a3      	ldrh	r3, [r4, #12]
 80109d2:	d106      	bne.n	80109e2 <__sflush_r+0x62>
 80109d4:	6829      	ldr	r1, [r5, #0]
 80109d6:	291d      	cmp	r1, #29
 80109d8:	d82b      	bhi.n	8010a32 <__sflush_r+0xb2>
 80109da:	4a2a      	ldr	r2, [pc, #168]	@ (8010a84 <__sflush_r+0x104>)
 80109dc:	410a      	asrs	r2, r1
 80109de:	07d6      	lsls	r6, r2, #31
 80109e0:	d427      	bmi.n	8010a32 <__sflush_r+0xb2>
 80109e2:	2200      	movs	r2, #0
 80109e4:	6062      	str	r2, [r4, #4]
 80109e6:	04d9      	lsls	r1, r3, #19
 80109e8:	6922      	ldr	r2, [r4, #16]
 80109ea:	6022      	str	r2, [r4, #0]
 80109ec:	d504      	bpl.n	80109f8 <__sflush_r+0x78>
 80109ee:	1c42      	adds	r2, r0, #1
 80109f0:	d101      	bne.n	80109f6 <__sflush_r+0x76>
 80109f2:	682b      	ldr	r3, [r5, #0]
 80109f4:	b903      	cbnz	r3, 80109f8 <__sflush_r+0x78>
 80109f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80109f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109fa:	602f      	str	r7, [r5, #0]
 80109fc:	b1b9      	cbz	r1, 8010a2e <__sflush_r+0xae>
 80109fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a02:	4299      	cmp	r1, r3
 8010a04:	d002      	beq.n	8010a0c <__sflush_r+0x8c>
 8010a06:	4628      	mov	r0, r5
 8010a08:	f7ff fd6e 	bl	80104e8 <_free_r>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a10:	e00d      	b.n	8010a2e <__sflush_r+0xae>
 8010a12:	2301      	movs	r3, #1
 8010a14:	4628      	mov	r0, r5
 8010a16:	47b0      	blx	r6
 8010a18:	4602      	mov	r2, r0
 8010a1a:	1c50      	adds	r0, r2, #1
 8010a1c:	d1c9      	bne.n	80109b2 <__sflush_r+0x32>
 8010a1e:	682b      	ldr	r3, [r5, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d0c6      	beq.n	80109b2 <__sflush_r+0x32>
 8010a24:	2b1d      	cmp	r3, #29
 8010a26:	d001      	beq.n	8010a2c <__sflush_r+0xac>
 8010a28:	2b16      	cmp	r3, #22
 8010a2a:	d11e      	bne.n	8010a6a <__sflush_r+0xea>
 8010a2c:	602f      	str	r7, [r5, #0]
 8010a2e:	2000      	movs	r0, #0
 8010a30:	e022      	b.n	8010a78 <__sflush_r+0xf8>
 8010a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a36:	b21b      	sxth	r3, r3
 8010a38:	e01b      	b.n	8010a72 <__sflush_r+0xf2>
 8010a3a:	690f      	ldr	r7, [r1, #16]
 8010a3c:	2f00      	cmp	r7, #0
 8010a3e:	d0f6      	beq.n	8010a2e <__sflush_r+0xae>
 8010a40:	0793      	lsls	r3, r2, #30
 8010a42:	680e      	ldr	r6, [r1, #0]
 8010a44:	bf08      	it	eq
 8010a46:	694b      	ldreq	r3, [r1, #20]
 8010a48:	600f      	str	r7, [r1, #0]
 8010a4a:	bf18      	it	ne
 8010a4c:	2300      	movne	r3, #0
 8010a4e:	eba6 0807 	sub.w	r8, r6, r7
 8010a52:	608b      	str	r3, [r1, #8]
 8010a54:	f1b8 0f00 	cmp.w	r8, #0
 8010a58:	dde9      	ble.n	8010a2e <__sflush_r+0xae>
 8010a5a:	6a21      	ldr	r1, [r4, #32]
 8010a5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a5e:	4643      	mov	r3, r8
 8010a60:	463a      	mov	r2, r7
 8010a62:	4628      	mov	r0, r5
 8010a64:	47b0      	blx	r6
 8010a66:	2800      	cmp	r0, #0
 8010a68:	dc08      	bgt.n	8010a7c <__sflush_r+0xfc>
 8010a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a72:	81a3      	strh	r3, [r4, #12]
 8010a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a7c:	4407      	add	r7, r0
 8010a7e:	eba8 0800 	sub.w	r8, r8, r0
 8010a82:	e7e7      	b.n	8010a54 <__sflush_r+0xd4>
 8010a84:	dfbffffe 	.word	0xdfbffffe

08010a88 <_fflush_r>:
 8010a88:	b538      	push	{r3, r4, r5, lr}
 8010a8a:	690b      	ldr	r3, [r1, #16]
 8010a8c:	4605      	mov	r5, r0
 8010a8e:	460c      	mov	r4, r1
 8010a90:	b913      	cbnz	r3, 8010a98 <_fflush_r+0x10>
 8010a92:	2500      	movs	r5, #0
 8010a94:	4628      	mov	r0, r5
 8010a96:	bd38      	pop	{r3, r4, r5, pc}
 8010a98:	b118      	cbz	r0, 8010aa2 <_fflush_r+0x1a>
 8010a9a:	6a03      	ldr	r3, [r0, #32]
 8010a9c:	b90b      	cbnz	r3, 8010aa2 <_fflush_r+0x1a>
 8010a9e:	f7fe fdc9 	bl	800f634 <__sinit>
 8010aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d0f3      	beq.n	8010a92 <_fflush_r+0xa>
 8010aaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010aac:	07d0      	lsls	r0, r2, #31
 8010aae:	d404      	bmi.n	8010aba <_fflush_r+0x32>
 8010ab0:	0599      	lsls	r1, r3, #22
 8010ab2:	d402      	bmi.n	8010aba <_fflush_r+0x32>
 8010ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ab6:	f7fe feba 	bl	800f82e <__retarget_lock_acquire_recursive>
 8010aba:	4628      	mov	r0, r5
 8010abc:	4621      	mov	r1, r4
 8010abe:	f7ff ff5f 	bl	8010980 <__sflush_r>
 8010ac2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ac4:	07da      	lsls	r2, r3, #31
 8010ac6:	4605      	mov	r5, r0
 8010ac8:	d4e4      	bmi.n	8010a94 <_fflush_r+0xc>
 8010aca:	89a3      	ldrh	r3, [r4, #12]
 8010acc:	059b      	lsls	r3, r3, #22
 8010ace:	d4e1      	bmi.n	8010a94 <_fflush_r+0xc>
 8010ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ad2:	f7fe fead 	bl	800f830 <__retarget_lock_release_recursive>
 8010ad6:	e7dd      	b.n	8010a94 <_fflush_r+0xc>

08010ad8 <__malloc_lock>:
 8010ad8:	4801      	ldr	r0, [pc, #4]	@ (8010ae0 <__malloc_lock+0x8>)
 8010ada:	f7fe bea8 	b.w	800f82e <__retarget_lock_acquire_recursive>
 8010ade:	bf00      	nop
 8010ae0:	20010380 	.word	0x20010380

08010ae4 <__malloc_unlock>:
 8010ae4:	4801      	ldr	r0, [pc, #4]	@ (8010aec <__malloc_unlock+0x8>)
 8010ae6:	f7fe bea3 	b.w	800f830 <__retarget_lock_release_recursive>
 8010aea:	bf00      	nop
 8010aec:	20010380 	.word	0x20010380

08010af0 <_Balloc>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	69c6      	ldr	r6, [r0, #28]
 8010af4:	4604      	mov	r4, r0
 8010af6:	460d      	mov	r5, r1
 8010af8:	b976      	cbnz	r6, 8010b18 <_Balloc+0x28>
 8010afa:	2010      	movs	r0, #16
 8010afc:	f7ff fe96 	bl	801082c <malloc>
 8010b00:	4602      	mov	r2, r0
 8010b02:	61e0      	str	r0, [r4, #28]
 8010b04:	b920      	cbnz	r0, 8010b10 <_Balloc+0x20>
 8010b06:	4b18      	ldr	r3, [pc, #96]	@ (8010b68 <_Balloc+0x78>)
 8010b08:	4818      	ldr	r0, [pc, #96]	@ (8010b6c <_Balloc+0x7c>)
 8010b0a:	216b      	movs	r1, #107	@ 0x6b
 8010b0c:	f000 fc54 	bl	80113b8 <__assert_func>
 8010b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b14:	6006      	str	r6, [r0, #0]
 8010b16:	60c6      	str	r6, [r0, #12]
 8010b18:	69e6      	ldr	r6, [r4, #28]
 8010b1a:	68f3      	ldr	r3, [r6, #12]
 8010b1c:	b183      	cbz	r3, 8010b40 <_Balloc+0x50>
 8010b1e:	69e3      	ldr	r3, [r4, #28]
 8010b20:	68db      	ldr	r3, [r3, #12]
 8010b22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b26:	b9b8      	cbnz	r0, 8010b58 <_Balloc+0x68>
 8010b28:	2101      	movs	r1, #1
 8010b2a:	fa01 f605 	lsl.w	r6, r1, r5
 8010b2e:	1d72      	adds	r2, r6, #5
 8010b30:	0092      	lsls	r2, r2, #2
 8010b32:	4620      	mov	r0, r4
 8010b34:	f000 fc5e 	bl	80113f4 <_calloc_r>
 8010b38:	b160      	cbz	r0, 8010b54 <_Balloc+0x64>
 8010b3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b3e:	e00e      	b.n	8010b5e <_Balloc+0x6e>
 8010b40:	2221      	movs	r2, #33	@ 0x21
 8010b42:	2104      	movs	r1, #4
 8010b44:	4620      	mov	r0, r4
 8010b46:	f000 fc55 	bl	80113f4 <_calloc_r>
 8010b4a:	69e3      	ldr	r3, [r4, #28]
 8010b4c:	60f0      	str	r0, [r6, #12]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1e4      	bne.n	8010b1e <_Balloc+0x2e>
 8010b54:	2000      	movs	r0, #0
 8010b56:	bd70      	pop	{r4, r5, r6, pc}
 8010b58:	6802      	ldr	r2, [r0, #0]
 8010b5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010b5e:	2300      	movs	r3, #0
 8010b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010b64:	e7f7      	b.n	8010b56 <_Balloc+0x66>
 8010b66:	bf00      	nop
 8010b68:	08011de5 	.word	0x08011de5
 8010b6c:	08011e76 	.word	0x08011e76

08010b70 <_Bfree>:
 8010b70:	b570      	push	{r4, r5, r6, lr}
 8010b72:	69c6      	ldr	r6, [r0, #28]
 8010b74:	4605      	mov	r5, r0
 8010b76:	460c      	mov	r4, r1
 8010b78:	b976      	cbnz	r6, 8010b98 <_Bfree+0x28>
 8010b7a:	2010      	movs	r0, #16
 8010b7c:	f7ff fe56 	bl	801082c <malloc>
 8010b80:	4602      	mov	r2, r0
 8010b82:	61e8      	str	r0, [r5, #28]
 8010b84:	b920      	cbnz	r0, 8010b90 <_Bfree+0x20>
 8010b86:	4b09      	ldr	r3, [pc, #36]	@ (8010bac <_Bfree+0x3c>)
 8010b88:	4809      	ldr	r0, [pc, #36]	@ (8010bb0 <_Bfree+0x40>)
 8010b8a:	218f      	movs	r1, #143	@ 0x8f
 8010b8c:	f000 fc14 	bl	80113b8 <__assert_func>
 8010b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b94:	6006      	str	r6, [r0, #0]
 8010b96:	60c6      	str	r6, [r0, #12]
 8010b98:	b13c      	cbz	r4, 8010baa <_Bfree+0x3a>
 8010b9a:	69eb      	ldr	r3, [r5, #28]
 8010b9c:	6862      	ldr	r2, [r4, #4]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ba4:	6021      	str	r1, [r4, #0]
 8010ba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010baa:	bd70      	pop	{r4, r5, r6, pc}
 8010bac:	08011de5 	.word	0x08011de5
 8010bb0:	08011e76 	.word	0x08011e76

08010bb4 <__multadd>:
 8010bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb8:	690d      	ldr	r5, [r1, #16]
 8010bba:	4607      	mov	r7, r0
 8010bbc:	460c      	mov	r4, r1
 8010bbe:	461e      	mov	r6, r3
 8010bc0:	f101 0c14 	add.w	ip, r1, #20
 8010bc4:	2000      	movs	r0, #0
 8010bc6:	f8dc 3000 	ldr.w	r3, [ip]
 8010bca:	b299      	uxth	r1, r3
 8010bcc:	fb02 6101 	mla	r1, r2, r1, r6
 8010bd0:	0c1e      	lsrs	r6, r3, #16
 8010bd2:	0c0b      	lsrs	r3, r1, #16
 8010bd4:	fb02 3306 	mla	r3, r2, r6, r3
 8010bd8:	b289      	uxth	r1, r1
 8010bda:	3001      	adds	r0, #1
 8010bdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010be0:	4285      	cmp	r5, r0
 8010be2:	f84c 1b04 	str.w	r1, [ip], #4
 8010be6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010bea:	dcec      	bgt.n	8010bc6 <__multadd+0x12>
 8010bec:	b30e      	cbz	r6, 8010c32 <__multadd+0x7e>
 8010bee:	68a3      	ldr	r3, [r4, #8]
 8010bf0:	42ab      	cmp	r3, r5
 8010bf2:	dc19      	bgt.n	8010c28 <__multadd+0x74>
 8010bf4:	6861      	ldr	r1, [r4, #4]
 8010bf6:	4638      	mov	r0, r7
 8010bf8:	3101      	adds	r1, #1
 8010bfa:	f7ff ff79 	bl	8010af0 <_Balloc>
 8010bfe:	4680      	mov	r8, r0
 8010c00:	b928      	cbnz	r0, 8010c0e <__multadd+0x5a>
 8010c02:	4602      	mov	r2, r0
 8010c04:	4b0c      	ldr	r3, [pc, #48]	@ (8010c38 <__multadd+0x84>)
 8010c06:	480d      	ldr	r0, [pc, #52]	@ (8010c3c <__multadd+0x88>)
 8010c08:	21ba      	movs	r1, #186	@ 0xba
 8010c0a:	f000 fbd5 	bl	80113b8 <__assert_func>
 8010c0e:	6922      	ldr	r2, [r4, #16]
 8010c10:	3202      	adds	r2, #2
 8010c12:	f104 010c 	add.w	r1, r4, #12
 8010c16:	0092      	lsls	r2, r2, #2
 8010c18:	300c      	adds	r0, #12
 8010c1a:	f7fe fe0a 	bl	800f832 <memcpy>
 8010c1e:	4621      	mov	r1, r4
 8010c20:	4638      	mov	r0, r7
 8010c22:	f7ff ffa5 	bl	8010b70 <_Bfree>
 8010c26:	4644      	mov	r4, r8
 8010c28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c2c:	3501      	adds	r5, #1
 8010c2e:	615e      	str	r6, [r3, #20]
 8010c30:	6125      	str	r5, [r4, #16]
 8010c32:	4620      	mov	r0, r4
 8010c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c38:	08011e54 	.word	0x08011e54
 8010c3c:	08011e76 	.word	0x08011e76

08010c40 <__hi0bits>:
 8010c40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010c44:	4603      	mov	r3, r0
 8010c46:	bf36      	itet	cc
 8010c48:	0403      	lslcc	r3, r0, #16
 8010c4a:	2000      	movcs	r0, #0
 8010c4c:	2010      	movcc	r0, #16
 8010c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010c52:	bf3c      	itt	cc
 8010c54:	021b      	lslcc	r3, r3, #8
 8010c56:	3008      	addcc	r0, #8
 8010c58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c5c:	bf3c      	itt	cc
 8010c5e:	011b      	lslcc	r3, r3, #4
 8010c60:	3004      	addcc	r0, #4
 8010c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c66:	bf3c      	itt	cc
 8010c68:	009b      	lslcc	r3, r3, #2
 8010c6a:	3002      	addcc	r0, #2
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	db05      	blt.n	8010c7c <__hi0bits+0x3c>
 8010c70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010c74:	f100 0001 	add.w	r0, r0, #1
 8010c78:	bf08      	it	eq
 8010c7a:	2020      	moveq	r0, #32
 8010c7c:	4770      	bx	lr

08010c7e <__lo0bits>:
 8010c7e:	6803      	ldr	r3, [r0, #0]
 8010c80:	4602      	mov	r2, r0
 8010c82:	f013 0007 	ands.w	r0, r3, #7
 8010c86:	d00b      	beq.n	8010ca0 <__lo0bits+0x22>
 8010c88:	07d9      	lsls	r1, r3, #31
 8010c8a:	d421      	bmi.n	8010cd0 <__lo0bits+0x52>
 8010c8c:	0798      	lsls	r0, r3, #30
 8010c8e:	bf49      	itett	mi
 8010c90:	085b      	lsrmi	r3, r3, #1
 8010c92:	089b      	lsrpl	r3, r3, #2
 8010c94:	2001      	movmi	r0, #1
 8010c96:	6013      	strmi	r3, [r2, #0]
 8010c98:	bf5c      	itt	pl
 8010c9a:	6013      	strpl	r3, [r2, #0]
 8010c9c:	2002      	movpl	r0, #2
 8010c9e:	4770      	bx	lr
 8010ca0:	b299      	uxth	r1, r3
 8010ca2:	b909      	cbnz	r1, 8010ca8 <__lo0bits+0x2a>
 8010ca4:	0c1b      	lsrs	r3, r3, #16
 8010ca6:	2010      	movs	r0, #16
 8010ca8:	b2d9      	uxtb	r1, r3
 8010caa:	b909      	cbnz	r1, 8010cb0 <__lo0bits+0x32>
 8010cac:	3008      	adds	r0, #8
 8010cae:	0a1b      	lsrs	r3, r3, #8
 8010cb0:	0719      	lsls	r1, r3, #28
 8010cb2:	bf04      	itt	eq
 8010cb4:	091b      	lsreq	r3, r3, #4
 8010cb6:	3004      	addeq	r0, #4
 8010cb8:	0799      	lsls	r1, r3, #30
 8010cba:	bf04      	itt	eq
 8010cbc:	089b      	lsreq	r3, r3, #2
 8010cbe:	3002      	addeq	r0, #2
 8010cc0:	07d9      	lsls	r1, r3, #31
 8010cc2:	d403      	bmi.n	8010ccc <__lo0bits+0x4e>
 8010cc4:	085b      	lsrs	r3, r3, #1
 8010cc6:	f100 0001 	add.w	r0, r0, #1
 8010cca:	d003      	beq.n	8010cd4 <__lo0bits+0x56>
 8010ccc:	6013      	str	r3, [r2, #0]
 8010cce:	4770      	bx	lr
 8010cd0:	2000      	movs	r0, #0
 8010cd2:	4770      	bx	lr
 8010cd4:	2020      	movs	r0, #32
 8010cd6:	4770      	bx	lr

08010cd8 <__i2b>:
 8010cd8:	b510      	push	{r4, lr}
 8010cda:	460c      	mov	r4, r1
 8010cdc:	2101      	movs	r1, #1
 8010cde:	f7ff ff07 	bl	8010af0 <_Balloc>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	b928      	cbnz	r0, 8010cf2 <__i2b+0x1a>
 8010ce6:	4b05      	ldr	r3, [pc, #20]	@ (8010cfc <__i2b+0x24>)
 8010ce8:	4805      	ldr	r0, [pc, #20]	@ (8010d00 <__i2b+0x28>)
 8010cea:	f240 1145 	movw	r1, #325	@ 0x145
 8010cee:	f000 fb63 	bl	80113b8 <__assert_func>
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	6144      	str	r4, [r0, #20]
 8010cf6:	6103      	str	r3, [r0, #16]
 8010cf8:	bd10      	pop	{r4, pc}
 8010cfa:	bf00      	nop
 8010cfc:	08011e54 	.word	0x08011e54
 8010d00:	08011e76 	.word	0x08011e76

08010d04 <__multiply>:
 8010d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d08:	4614      	mov	r4, r2
 8010d0a:	690a      	ldr	r2, [r1, #16]
 8010d0c:	6923      	ldr	r3, [r4, #16]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	bfa8      	it	ge
 8010d12:	4623      	movge	r3, r4
 8010d14:	460f      	mov	r7, r1
 8010d16:	bfa4      	itt	ge
 8010d18:	460c      	movge	r4, r1
 8010d1a:	461f      	movge	r7, r3
 8010d1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010d20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010d24:	68a3      	ldr	r3, [r4, #8]
 8010d26:	6861      	ldr	r1, [r4, #4]
 8010d28:	eb0a 0609 	add.w	r6, sl, r9
 8010d2c:	42b3      	cmp	r3, r6
 8010d2e:	b085      	sub	sp, #20
 8010d30:	bfb8      	it	lt
 8010d32:	3101      	addlt	r1, #1
 8010d34:	f7ff fedc 	bl	8010af0 <_Balloc>
 8010d38:	b930      	cbnz	r0, 8010d48 <__multiply+0x44>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	4b44      	ldr	r3, [pc, #272]	@ (8010e50 <__multiply+0x14c>)
 8010d3e:	4845      	ldr	r0, [pc, #276]	@ (8010e54 <__multiply+0x150>)
 8010d40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010d44:	f000 fb38 	bl	80113b8 <__assert_func>
 8010d48:	f100 0514 	add.w	r5, r0, #20
 8010d4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010d50:	462b      	mov	r3, r5
 8010d52:	2200      	movs	r2, #0
 8010d54:	4543      	cmp	r3, r8
 8010d56:	d321      	bcc.n	8010d9c <__multiply+0x98>
 8010d58:	f107 0114 	add.w	r1, r7, #20
 8010d5c:	f104 0214 	add.w	r2, r4, #20
 8010d60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010d64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010d68:	9302      	str	r3, [sp, #8]
 8010d6a:	1b13      	subs	r3, r2, r4
 8010d6c:	3b15      	subs	r3, #21
 8010d6e:	f023 0303 	bic.w	r3, r3, #3
 8010d72:	3304      	adds	r3, #4
 8010d74:	f104 0715 	add.w	r7, r4, #21
 8010d78:	42ba      	cmp	r2, r7
 8010d7a:	bf38      	it	cc
 8010d7c:	2304      	movcc	r3, #4
 8010d7e:	9301      	str	r3, [sp, #4]
 8010d80:	9b02      	ldr	r3, [sp, #8]
 8010d82:	9103      	str	r1, [sp, #12]
 8010d84:	428b      	cmp	r3, r1
 8010d86:	d80c      	bhi.n	8010da2 <__multiply+0x9e>
 8010d88:	2e00      	cmp	r6, #0
 8010d8a:	dd03      	ble.n	8010d94 <__multiply+0x90>
 8010d8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d05b      	beq.n	8010e4c <__multiply+0x148>
 8010d94:	6106      	str	r6, [r0, #16]
 8010d96:	b005      	add	sp, #20
 8010d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d9c:	f843 2b04 	str.w	r2, [r3], #4
 8010da0:	e7d8      	b.n	8010d54 <__multiply+0x50>
 8010da2:	f8b1 a000 	ldrh.w	sl, [r1]
 8010da6:	f1ba 0f00 	cmp.w	sl, #0
 8010daa:	d024      	beq.n	8010df6 <__multiply+0xf2>
 8010dac:	f104 0e14 	add.w	lr, r4, #20
 8010db0:	46a9      	mov	r9, r5
 8010db2:	f04f 0c00 	mov.w	ip, #0
 8010db6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010dba:	f8d9 3000 	ldr.w	r3, [r9]
 8010dbe:	fa1f fb87 	uxth.w	fp, r7
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8010dc8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010dcc:	f8d9 7000 	ldr.w	r7, [r9]
 8010dd0:	4463      	add	r3, ip
 8010dd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010dd6:	fb0a c70b 	mla	r7, sl, fp, ip
 8010dda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010de4:	4572      	cmp	r2, lr
 8010de6:	f849 3b04 	str.w	r3, [r9], #4
 8010dea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010dee:	d8e2      	bhi.n	8010db6 <__multiply+0xb2>
 8010df0:	9b01      	ldr	r3, [sp, #4]
 8010df2:	f845 c003 	str.w	ip, [r5, r3]
 8010df6:	9b03      	ldr	r3, [sp, #12]
 8010df8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010dfc:	3104      	adds	r1, #4
 8010dfe:	f1b9 0f00 	cmp.w	r9, #0
 8010e02:	d021      	beq.n	8010e48 <__multiply+0x144>
 8010e04:	682b      	ldr	r3, [r5, #0]
 8010e06:	f104 0c14 	add.w	ip, r4, #20
 8010e0a:	46ae      	mov	lr, r5
 8010e0c:	f04f 0a00 	mov.w	sl, #0
 8010e10:	f8bc b000 	ldrh.w	fp, [ip]
 8010e14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010e18:	fb09 770b 	mla	r7, r9, fp, r7
 8010e1c:	4457      	add	r7, sl
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010e24:	f84e 3b04 	str.w	r3, [lr], #4
 8010e28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010e2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e30:	f8be 3000 	ldrh.w	r3, [lr]
 8010e34:	fb09 330a 	mla	r3, r9, sl, r3
 8010e38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010e3c:	4562      	cmp	r2, ip
 8010e3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e42:	d8e5      	bhi.n	8010e10 <__multiply+0x10c>
 8010e44:	9f01      	ldr	r7, [sp, #4]
 8010e46:	51eb      	str	r3, [r5, r7]
 8010e48:	3504      	adds	r5, #4
 8010e4a:	e799      	b.n	8010d80 <__multiply+0x7c>
 8010e4c:	3e01      	subs	r6, #1
 8010e4e:	e79b      	b.n	8010d88 <__multiply+0x84>
 8010e50:	08011e54 	.word	0x08011e54
 8010e54:	08011e76 	.word	0x08011e76

08010e58 <__pow5mult>:
 8010e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e5c:	4615      	mov	r5, r2
 8010e5e:	f012 0203 	ands.w	r2, r2, #3
 8010e62:	4607      	mov	r7, r0
 8010e64:	460e      	mov	r6, r1
 8010e66:	d007      	beq.n	8010e78 <__pow5mult+0x20>
 8010e68:	4c25      	ldr	r4, [pc, #148]	@ (8010f00 <__pow5mult+0xa8>)
 8010e6a:	3a01      	subs	r2, #1
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e72:	f7ff fe9f 	bl	8010bb4 <__multadd>
 8010e76:	4606      	mov	r6, r0
 8010e78:	10ad      	asrs	r5, r5, #2
 8010e7a:	d03d      	beq.n	8010ef8 <__pow5mult+0xa0>
 8010e7c:	69fc      	ldr	r4, [r7, #28]
 8010e7e:	b97c      	cbnz	r4, 8010ea0 <__pow5mult+0x48>
 8010e80:	2010      	movs	r0, #16
 8010e82:	f7ff fcd3 	bl	801082c <malloc>
 8010e86:	4602      	mov	r2, r0
 8010e88:	61f8      	str	r0, [r7, #28]
 8010e8a:	b928      	cbnz	r0, 8010e98 <__pow5mult+0x40>
 8010e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8010f04 <__pow5mult+0xac>)
 8010e8e:	481e      	ldr	r0, [pc, #120]	@ (8010f08 <__pow5mult+0xb0>)
 8010e90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010e94:	f000 fa90 	bl	80113b8 <__assert_func>
 8010e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e9c:	6004      	str	r4, [r0, #0]
 8010e9e:	60c4      	str	r4, [r0, #12]
 8010ea0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ea8:	b94c      	cbnz	r4, 8010ebe <__pow5mult+0x66>
 8010eaa:	f240 2171 	movw	r1, #625	@ 0x271
 8010eae:	4638      	mov	r0, r7
 8010eb0:	f7ff ff12 	bl	8010cd8 <__i2b>
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010eba:	4604      	mov	r4, r0
 8010ebc:	6003      	str	r3, [r0, #0]
 8010ebe:	f04f 0900 	mov.w	r9, #0
 8010ec2:	07eb      	lsls	r3, r5, #31
 8010ec4:	d50a      	bpl.n	8010edc <__pow5mult+0x84>
 8010ec6:	4631      	mov	r1, r6
 8010ec8:	4622      	mov	r2, r4
 8010eca:	4638      	mov	r0, r7
 8010ecc:	f7ff ff1a 	bl	8010d04 <__multiply>
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	4680      	mov	r8, r0
 8010ed4:	4638      	mov	r0, r7
 8010ed6:	f7ff fe4b 	bl	8010b70 <_Bfree>
 8010eda:	4646      	mov	r6, r8
 8010edc:	106d      	asrs	r5, r5, #1
 8010ede:	d00b      	beq.n	8010ef8 <__pow5mult+0xa0>
 8010ee0:	6820      	ldr	r0, [r4, #0]
 8010ee2:	b938      	cbnz	r0, 8010ef4 <__pow5mult+0x9c>
 8010ee4:	4622      	mov	r2, r4
 8010ee6:	4621      	mov	r1, r4
 8010ee8:	4638      	mov	r0, r7
 8010eea:	f7ff ff0b 	bl	8010d04 <__multiply>
 8010eee:	6020      	str	r0, [r4, #0]
 8010ef0:	f8c0 9000 	str.w	r9, [r0]
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	e7e4      	b.n	8010ec2 <__pow5mult+0x6a>
 8010ef8:	4630      	mov	r0, r6
 8010efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010efe:	bf00      	nop
 8010f00:	08011ed0 	.word	0x08011ed0
 8010f04:	08011de5 	.word	0x08011de5
 8010f08:	08011e76 	.word	0x08011e76

08010f0c <__lshift>:
 8010f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f10:	460c      	mov	r4, r1
 8010f12:	6849      	ldr	r1, [r1, #4]
 8010f14:	6923      	ldr	r3, [r4, #16]
 8010f16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f1a:	68a3      	ldr	r3, [r4, #8]
 8010f1c:	4607      	mov	r7, r0
 8010f1e:	4691      	mov	r9, r2
 8010f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f24:	f108 0601 	add.w	r6, r8, #1
 8010f28:	42b3      	cmp	r3, r6
 8010f2a:	db0b      	blt.n	8010f44 <__lshift+0x38>
 8010f2c:	4638      	mov	r0, r7
 8010f2e:	f7ff fddf 	bl	8010af0 <_Balloc>
 8010f32:	4605      	mov	r5, r0
 8010f34:	b948      	cbnz	r0, 8010f4a <__lshift+0x3e>
 8010f36:	4602      	mov	r2, r0
 8010f38:	4b28      	ldr	r3, [pc, #160]	@ (8010fdc <__lshift+0xd0>)
 8010f3a:	4829      	ldr	r0, [pc, #164]	@ (8010fe0 <__lshift+0xd4>)
 8010f3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010f40:	f000 fa3a 	bl	80113b8 <__assert_func>
 8010f44:	3101      	adds	r1, #1
 8010f46:	005b      	lsls	r3, r3, #1
 8010f48:	e7ee      	b.n	8010f28 <__lshift+0x1c>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	f100 0114 	add.w	r1, r0, #20
 8010f50:	f100 0210 	add.w	r2, r0, #16
 8010f54:	4618      	mov	r0, r3
 8010f56:	4553      	cmp	r3, sl
 8010f58:	db33      	blt.n	8010fc2 <__lshift+0xb6>
 8010f5a:	6920      	ldr	r0, [r4, #16]
 8010f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f60:	f104 0314 	add.w	r3, r4, #20
 8010f64:	f019 091f 	ands.w	r9, r9, #31
 8010f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f70:	d02b      	beq.n	8010fca <__lshift+0xbe>
 8010f72:	f1c9 0e20 	rsb	lr, r9, #32
 8010f76:	468a      	mov	sl, r1
 8010f78:	2200      	movs	r2, #0
 8010f7a:	6818      	ldr	r0, [r3, #0]
 8010f7c:	fa00 f009 	lsl.w	r0, r0, r9
 8010f80:	4310      	orrs	r0, r2
 8010f82:	f84a 0b04 	str.w	r0, [sl], #4
 8010f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f8a:	459c      	cmp	ip, r3
 8010f8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f90:	d8f3      	bhi.n	8010f7a <__lshift+0x6e>
 8010f92:	ebac 0304 	sub.w	r3, ip, r4
 8010f96:	3b15      	subs	r3, #21
 8010f98:	f023 0303 	bic.w	r3, r3, #3
 8010f9c:	3304      	adds	r3, #4
 8010f9e:	f104 0015 	add.w	r0, r4, #21
 8010fa2:	4584      	cmp	ip, r0
 8010fa4:	bf38      	it	cc
 8010fa6:	2304      	movcc	r3, #4
 8010fa8:	50ca      	str	r2, [r1, r3]
 8010faa:	b10a      	cbz	r2, 8010fb0 <__lshift+0xa4>
 8010fac:	f108 0602 	add.w	r6, r8, #2
 8010fb0:	3e01      	subs	r6, #1
 8010fb2:	4638      	mov	r0, r7
 8010fb4:	612e      	str	r6, [r5, #16]
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	f7ff fdda 	bl	8010b70 <_Bfree>
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	e7c5      	b.n	8010f56 <__lshift+0x4a>
 8010fca:	3904      	subs	r1, #4
 8010fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010fd4:	459c      	cmp	ip, r3
 8010fd6:	d8f9      	bhi.n	8010fcc <__lshift+0xc0>
 8010fd8:	e7ea      	b.n	8010fb0 <__lshift+0xa4>
 8010fda:	bf00      	nop
 8010fdc:	08011e54 	.word	0x08011e54
 8010fe0:	08011e76 	.word	0x08011e76

08010fe4 <__mcmp>:
 8010fe4:	690a      	ldr	r2, [r1, #16]
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	6900      	ldr	r0, [r0, #16]
 8010fea:	1a80      	subs	r0, r0, r2
 8010fec:	b530      	push	{r4, r5, lr}
 8010fee:	d10e      	bne.n	801100e <__mcmp+0x2a>
 8010ff0:	3314      	adds	r3, #20
 8010ff2:	3114      	adds	r1, #20
 8010ff4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010ff8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011004:	4295      	cmp	r5, r2
 8011006:	d003      	beq.n	8011010 <__mcmp+0x2c>
 8011008:	d205      	bcs.n	8011016 <__mcmp+0x32>
 801100a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801100e:	bd30      	pop	{r4, r5, pc}
 8011010:	42a3      	cmp	r3, r4
 8011012:	d3f3      	bcc.n	8010ffc <__mcmp+0x18>
 8011014:	e7fb      	b.n	801100e <__mcmp+0x2a>
 8011016:	2001      	movs	r0, #1
 8011018:	e7f9      	b.n	801100e <__mcmp+0x2a>
	...

0801101c <__mdiff>:
 801101c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011020:	4689      	mov	r9, r1
 8011022:	4606      	mov	r6, r0
 8011024:	4611      	mov	r1, r2
 8011026:	4648      	mov	r0, r9
 8011028:	4614      	mov	r4, r2
 801102a:	f7ff ffdb 	bl	8010fe4 <__mcmp>
 801102e:	1e05      	subs	r5, r0, #0
 8011030:	d112      	bne.n	8011058 <__mdiff+0x3c>
 8011032:	4629      	mov	r1, r5
 8011034:	4630      	mov	r0, r6
 8011036:	f7ff fd5b 	bl	8010af0 <_Balloc>
 801103a:	4602      	mov	r2, r0
 801103c:	b928      	cbnz	r0, 801104a <__mdiff+0x2e>
 801103e:	4b3f      	ldr	r3, [pc, #252]	@ (801113c <__mdiff+0x120>)
 8011040:	f240 2137 	movw	r1, #567	@ 0x237
 8011044:	483e      	ldr	r0, [pc, #248]	@ (8011140 <__mdiff+0x124>)
 8011046:	f000 f9b7 	bl	80113b8 <__assert_func>
 801104a:	2301      	movs	r3, #1
 801104c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011050:	4610      	mov	r0, r2
 8011052:	b003      	add	sp, #12
 8011054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011058:	bfbc      	itt	lt
 801105a:	464b      	movlt	r3, r9
 801105c:	46a1      	movlt	r9, r4
 801105e:	4630      	mov	r0, r6
 8011060:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011064:	bfba      	itte	lt
 8011066:	461c      	movlt	r4, r3
 8011068:	2501      	movlt	r5, #1
 801106a:	2500      	movge	r5, #0
 801106c:	f7ff fd40 	bl	8010af0 <_Balloc>
 8011070:	4602      	mov	r2, r0
 8011072:	b918      	cbnz	r0, 801107c <__mdiff+0x60>
 8011074:	4b31      	ldr	r3, [pc, #196]	@ (801113c <__mdiff+0x120>)
 8011076:	f240 2145 	movw	r1, #581	@ 0x245
 801107a:	e7e3      	b.n	8011044 <__mdiff+0x28>
 801107c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011080:	6926      	ldr	r6, [r4, #16]
 8011082:	60c5      	str	r5, [r0, #12]
 8011084:	f109 0310 	add.w	r3, r9, #16
 8011088:	f109 0514 	add.w	r5, r9, #20
 801108c:	f104 0e14 	add.w	lr, r4, #20
 8011090:	f100 0b14 	add.w	fp, r0, #20
 8011094:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011098:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801109c:	9301      	str	r3, [sp, #4]
 801109e:	46d9      	mov	r9, fp
 80110a0:	f04f 0c00 	mov.w	ip, #0
 80110a4:	9b01      	ldr	r3, [sp, #4]
 80110a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80110aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80110ae:	9301      	str	r3, [sp, #4]
 80110b0:	fa1f f38a 	uxth.w	r3, sl
 80110b4:	4619      	mov	r1, r3
 80110b6:	b283      	uxth	r3, r0
 80110b8:	1acb      	subs	r3, r1, r3
 80110ba:	0c00      	lsrs	r0, r0, #16
 80110bc:	4463      	add	r3, ip
 80110be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80110c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80110cc:	4576      	cmp	r6, lr
 80110ce:	f849 3b04 	str.w	r3, [r9], #4
 80110d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80110d6:	d8e5      	bhi.n	80110a4 <__mdiff+0x88>
 80110d8:	1b33      	subs	r3, r6, r4
 80110da:	3b15      	subs	r3, #21
 80110dc:	f023 0303 	bic.w	r3, r3, #3
 80110e0:	3415      	adds	r4, #21
 80110e2:	3304      	adds	r3, #4
 80110e4:	42a6      	cmp	r6, r4
 80110e6:	bf38      	it	cc
 80110e8:	2304      	movcc	r3, #4
 80110ea:	441d      	add	r5, r3
 80110ec:	445b      	add	r3, fp
 80110ee:	461e      	mov	r6, r3
 80110f0:	462c      	mov	r4, r5
 80110f2:	4544      	cmp	r4, r8
 80110f4:	d30e      	bcc.n	8011114 <__mdiff+0xf8>
 80110f6:	f108 0103 	add.w	r1, r8, #3
 80110fa:	1b49      	subs	r1, r1, r5
 80110fc:	f021 0103 	bic.w	r1, r1, #3
 8011100:	3d03      	subs	r5, #3
 8011102:	45a8      	cmp	r8, r5
 8011104:	bf38      	it	cc
 8011106:	2100      	movcc	r1, #0
 8011108:	440b      	add	r3, r1
 801110a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801110e:	b191      	cbz	r1, 8011136 <__mdiff+0x11a>
 8011110:	6117      	str	r7, [r2, #16]
 8011112:	e79d      	b.n	8011050 <__mdiff+0x34>
 8011114:	f854 1b04 	ldr.w	r1, [r4], #4
 8011118:	46e6      	mov	lr, ip
 801111a:	0c08      	lsrs	r0, r1, #16
 801111c:	fa1c fc81 	uxtah	ip, ip, r1
 8011120:	4471      	add	r1, lr
 8011122:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011126:	b289      	uxth	r1, r1
 8011128:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801112c:	f846 1b04 	str.w	r1, [r6], #4
 8011130:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011134:	e7dd      	b.n	80110f2 <__mdiff+0xd6>
 8011136:	3f01      	subs	r7, #1
 8011138:	e7e7      	b.n	801110a <__mdiff+0xee>
 801113a:	bf00      	nop
 801113c:	08011e54 	.word	0x08011e54
 8011140:	08011e76 	.word	0x08011e76

08011144 <__d2b>:
 8011144:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011148:	460f      	mov	r7, r1
 801114a:	2101      	movs	r1, #1
 801114c:	ec59 8b10 	vmov	r8, r9, d0
 8011150:	4616      	mov	r6, r2
 8011152:	f7ff fccd 	bl	8010af0 <_Balloc>
 8011156:	4604      	mov	r4, r0
 8011158:	b930      	cbnz	r0, 8011168 <__d2b+0x24>
 801115a:	4602      	mov	r2, r0
 801115c:	4b23      	ldr	r3, [pc, #140]	@ (80111ec <__d2b+0xa8>)
 801115e:	4824      	ldr	r0, [pc, #144]	@ (80111f0 <__d2b+0xac>)
 8011160:	f240 310f 	movw	r1, #783	@ 0x30f
 8011164:	f000 f928 	bl	80113b8 <__assert_func>
 8011168:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801116c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011170:	b10d      	cbz	r5, 8011176 <__d2b+0x32>
 8011172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011176:	9301      	str	r3, [sp, #4]
 8011178:	f1b8 0300 	subs.w	r3, r8, #0
 801117c:	d023      	beq.n	80111c6 <__d2b+0x82>
 801117e:	4668      	mov	r0, sp
 8011180:	9300      	str	r3, [sp, #0]
 8011182:	f7ff fd7c 	bl	8010c7e <__lo0bits>
 8011186:	e9dd 1200 	ldrd	r1, r2, [sp]
 801118a:	b1d0      	cbz	r0, 80111c2 <__d2b+0x7e>
 801118c:	f1c0 0320 	rsb	r3, r0, #32
 8011190:	fa02 f303 	lsl.w	r3, r2, r3
 8011194:	430b      	orrs	r3, r1
 8011196:	40c2      	lsrs	r2, r0
 8011198:	6163      	str	r3, [r4, #20]
 801119a:	9201      	str	r2, [sp, #4]
 801119c:	9b01      	ldr	r3, [sp, #4]
 801119e:	61a3      	str	r3, [r4, #24]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	bf0c      	ite	eq
 80111a4:	2201      	moveq	r2, #1
 80111a6:	2202      	movne	r2, #2
 80111a8:	6122      	str	r2, [r4, #16]
 80111aa:	b1a5      	cbz	r5, 80111d6 <__d2b+0x92>
 80111ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80111b0:	4405      	add	r5, r0
 80111b2:	603d      	str	r5, [r7, #0]
 80111b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80111b8:	6030      	str	r0, [r6, #0]
 80111ba:	4620      	mov	r0, r4
 80111bc:	b003      	add	sp, #12
 80111be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111c2:	6161      	str	r1, [r4, #20]
 80111c4:	e7ea      	b.n	801119c <__d2b+0x58>
 80111c6:	a801      	add	r0, sp, #4
 80111c8:	f7ff fd59 	bl	8010c7e <__lo0bits>
 80111cc:	9b01      	ldr	r3, [sp, #4]
 80111ce:	6163      	str	r3, [r4, #20]
 80111d0:	3020      	adds	r0, #32
 80111d2:	2201      	movs	r2, #1
 80111d4:	e7e8      	b.n	80111a8 <__d2b+0x64>
 80111d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80111de:	6038      	str	r0, [r7, #0]
 80111e0:	6918      	ldr	r0, [r3, #16]
 80111e2:	f7ff fd2d 	bl	8010c40 <__hi0bits>
 80111e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111ea:	e7e5      	b.n	80111b8 <__d2b+0x74>
 80111ec:	08011e54 	.word	0x08011e54
 80111f0:	08011e76 	.word	0x08011e76

080111f4 <__sread>:
 80111f4:	b510      	push	{r4, lr}
 80111f6:	460c      	mov	r4, r1
 80111f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111fc:	f000 f8a8 	bl	8011350 <_read_r>
 8011200:	2800      	cmp	r0, #0
 8011202:	bfab      	itete	ge
 8011204:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011206:	89a3      	ldrhlt	r3, [r4, #12]
 8011208:	181b      	addge	r3, r3, r0
 801120a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801120e:	bfac      	ite	ge
 8011210:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011212:	81a3      	strhlt	r3, [r4, #12]
 8011214:	bd10      	pop	{r4, pc}

08011216 <__swrite>:
 8011216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801121a:	461f      	mov	r7, r3
 801121c:	898b      	ldrh	r3, [r1, #12]
 801121e:	05db      	lsls	r3, r3, #23
 8011220:	4605      	mov	r5, r0
 8011222:	460c      	mov	r4, r1
 8011224:	4616      	mov	r6, r2
 8011226:	d505      	bpl.n	8011234 <__swrite+0x1e>
 8011228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801122c:	2302      	movs	r3, #2
 801122e:	2200      	movs	r2, #0
 8011230:	f000 f87c 	bl	801132c <_lseek_r>
 8011234:	89a3      	ldrh	r3, [r4, #12]
 8011236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801123a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801123e:	81a3      	strh	r3, [r4, #12]
 8011240:	4632      	mov	r2, r6
 8011242:	463b      	mov	r3, r7
 8011244:	4628      	mov	r0, r5
 8011246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801124a:	f000 b8a3 	b.w	8011394 <_write_r>

0801124e <__sseek>:
 801124e:	b510      	push	{r4, lr}
 8011250:	460c      	mov	r4, r1
 8011252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011256:	f000 f869 	bl	801132c <_lseek_r>
 801125a:	1c43      	adds	r3, r0, #1
 801125c:	89a3      	ldrh	r3, [r4, #12]
 801125e:	bf15      	itete	ne
 8011260:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011262:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011266:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801126a:	81a3      	strheq	r3, [r4, #12]
 801126c:	bf18      	it	ne
 801126e:	81a3      	strhne	r3, [r4, #12]
 8011270:	bd10      	pop	{r4, pc}

08011272 <__sclose>:
 8011272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011276:	f000 b849 	b.w	801130c <_close_r>

0801127a <_realloc_r>:
 801127a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801127e:	4680      	mov	r8, r0
 8011280:	4615      	mov	r5, r2
 8011282:	460c      	mov	r4, r1
 8011284:	b921      	cbnz	r1, 8011290 <_realloc_r+0x16>
 8011286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801128a:	4611      	mov	r1, r2
 801128c:	f7ff baf8 	b.w	8010880 <_malloc_r>
 8011290:	b92a      	cbnz	r2, 801129e <_realloc_r+0x24>
 8011292:	f7ff f929 	bl	80104e8 <_free_r>
 8011296:	2400      	movs	r4, #0
 8011298:	4620      	mov	r0, r4
 801129a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801129e:	f000 f8cf 	bl	8011440 <_malloc_usable_size_r>
 80112a2:	4285      	cmp	r5, r0
 80112a4:	4606      	mov	r6, r0
 80112a6:	d802      	bhi.n	80112ae <_realloc_r+0x34>
 80112a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80112ac:	d8f4      	bhi.n	8011298 <_realloc_r+0x1e>
 80112ae:	4629      	mov	r1, r5
 80112b0:	4640      	mov	r0, r8
 80112b2:	f7ff fae5 	bl	8010880 <_malloc_r>
 80112b6:	4607      	mov	r7, r0
 80112b8:	2800      	cmp	r0, #0
 80112ba:	d0ec      	beq.n	8011296 <_realloc_r+0x1c>
 80112bc:	42b5      	cmp	r5, r6
 80112be:	462a      	mov	r2, r5
 80112c0:	4621      	mov	r1, r4
 80112c2:	bf28      	it	cs
 80112c4:	4632      	movcs	r2, r6
 80112c6:	f7fe fab4 	bl	800f832 <memcpy>
 80112ca:	4621      	mov	r1, r4
 80112cc:	4640      	mov	r0, r8
 80112ce:	f7ff f90b 	bl	80104e8 <_free_r>
 80112d2:	463c      	mov	r4, r7
 80112d4:	e7e0      	b.n	8011298 <_realloc_r+0x1e>

080112d6 <memmove>:
 80112d6:	4288      	cmp	r0, r1
 80112d8:	b510      	push	{r4, lr}
 80112da:	eb01 0402 	add.w	r4, r1, r2
 80112de:	d902      	bls.n	80112e6 <memmove+0x10>
 80112e0:	4284      	cmp	r4, r0
 80112e2:	4623      	mov	r3, r4
 80112e4:	d807      	bhi.n	80112f6 <memmove+0x20>
 80112e6:	1e43      	subs	r3, r0, #1
 80112e8:	42a1      	cmp	r1, r4
 80112ea:	d008      	beq.n	80112fe <memmove+0x28>
 80112ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112f4:	e7f8      	b.n	80112e8 <memmove+0x12>
 80112f6:	4402      	add	r2, r0
 80112f8:	4601      	mov	r1, r0
 80112fa:	428a      	cmp	r2, r1
 80112fc:	d100      	bne.n	8011300 <memmove+0x2a>
 80112fe:	bd10      	pop	{r4, pc}
 8011300:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011304:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011308:	e7f7      	b.n	80112fa <memmove+0x24>
	...

0801130c <_close_r>:
 801130c:	b538      	push	{r3, r4, r5, lr}
 801130e:	4d06      	ldr	r5, [pc, #24]	@ (8011328 <_close_r+0x1c>)
 8011310:	2300      	movs	r3, #0
 8011312:	4604      	mov	r4, r0
 8011314:	4608      	mov	r0, r1
 8011316:	602b      	str	r3, [r5, #0]
 8011318:	f7f0 fd8a 	bl	8001e30 <_close>
 801131c:	1c43      	adds	r3, r0, #1
 801131e:	d102      	bne.n	8011326 <_close_r+0x1a>
 8011320:	682b      	ldr	r3, [r5, #0]
 8011322:	b103      	cbz	r3, 8011326 <_close_r+0x1a>
 8011324:	6023      	str	r3, [r4, #0]
 8011326:	bd38      	pop	{r3, r4, r5, pc}
 8011328:	2001037c 	.word	0x2001037c

0801132c <_lseek_r>:
 801132c:	b538      	push	{r3, r4, r5, lr}
 801132e:	4d07      	ldr	r5, [pc, #28]	@ (801134c <_lseek_r+0x20>)
 8011330:	4604      	mov	r4, r0
 8011332:	4608      	mov	r0, r1
 8011334:	4611      	mov	r1, r2
 8011336:	2200      	movs	r2, #0
 8011338:	602a      	str	r2, [r5, #0]
 801133a:	461a      	mov	r2, r3
 801133c:	f7f0 fd9f 	bl	8001e7e <_lseek>
 8011340:	1c43      	adds	r3, r0, #1
 8011342:	d102      	bne.n	801134a <_lseek_r+0x1e>
 8011344:	682b      	ldr	r3, [r5, #0]
 8011346:	b103      	cbz	r3, 801134a <_lseek_r+0x1e>
 8011348:	6023      	str	r3, [r4, #0]
 801134a:	bd38      	pop	{r3, r4, r5, pc}
 801134c:	2001037c 	.word	0x2001037c

08011350 <_read_r>:
 8011350:	b538      	push	{r3, r4, r5, lr}
 8011352:	4d07      	ldr	r5, [pc, #28]	@ (8011370 <_read_r+0x20>)
 8011354:	4604      	mov	r4, r0
 8011356:	4608      	mov	r0, r1
 8011358:	4611      	mov	r1, r2
 801135a:	2200      	movs	r2, #0
 801135c:	602a      	str	r2, [r5, #0]
 801135e:	461a      	mov	r2, r3
 8011360:	f7f0 fd2d 	bl	8001dbe <_read>
 8011364:	1c43      	adds	r3, r0, #1
 8011366:	d102      	bne.n	801136e <_read_r+0x1e>
 8011368:	682b      	ldr	r3, [r5, #0]
 801136a:	b103      	cbz	r3, 801136e <_read_r+0x1e>
 801136c:	6023      	str	r3, [r4, #0]
 801136e:	bd38      	pop	{r3, r4, r5, pc}
 8011370:	2001037c 	.word	0x2001037c

08011374 <_sbrk_r>:
 8011374:	b538      	push	{r3, r4, r5, lr}
 8011376:	4d06      	ldr	r5, [pc, #24]	@ (8011390 <_sbrk_r+0x1c>)
 8011378:	2300      	movs	r3, #0
 801137a:	4604      	mov	r4, r0
 801137c:	4608      	mov	r0, r1
 801137e:	602b      	str	r3, [r5, #0]
 8011380:	f7f0 fd8a 	bl	8001e98 <_sbrk>
 8011384:	1c43      	adds	r3, r0, #1
 8011386:	d102      	bne.n	801138e <_sbrk_r+0x1a>
 8011388:	682b      	ldr	r3, [r5, #0]
 801138a:	b103      	cbz	r3, 801138e <_sbrk_r+0x1a>
 801138c:	6023      	str	r3, [r4, #0]
 801138e:	bd38      	pop	{r3, r4, r5, pc}
 8011390:	2001037c 	.word	0x2001037c

08011394 <_write_r>:
 8011394:	b538      	push	{r3, r4, r5, lr}
 8011396:	4d07      	ldr	r5, [pc, #28]	@ (80113b4 <_write_r+0x20>)
 8011398:	4604      	mov	r4, r0
 801139a:	4608      	mov	r0, r1
 801139c:	4611      	mov	r1, r2
 801139e:	2200      	movs	r2, #0
 80113a0:	602a      	str	r2, [r5, #0]
 80113a2:	461a      	mov	r2, r3
 80113a4:	f7f0 fd28 	bl	8001df8 <_write>
 80113a8:	1c43      	adds	r3, r0, #1
 80113aa:	d102      	bne.n	80113b2 <_write_r+0x1e>
 80113ac:	682b      	ldr	r3, [r5, #0]
 80113ae:	b103      	cbz	r3, 80113b2 <_write_r+0x1e>
 80113b0:	6023      	str	r3, [r4, #0]
 80113b2:	bd38      	pop	{r3, r4, r5, pc}
 80113b4:	2001037c 	.word	0x2001037c

080113b8 <__assert_func>:
 80113b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113ba:	4614      	mov	r4, r2
 80113bc:	461a      	mov	r2, r3
 80113be:	4b09      	ldr	r3, [pc, #36]	@ (80113e4 <__assert_func+0x2c>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	4605      	mov	r5, r0
 80113c4:	68d8      	ldr	r0, [r3, #12]
 80113c6:	b954      	cbnz	r4, 80113de <__assert_func+0x26>
 80113c8:	4b07      	ldr	r3, [pc, #28]	@ (80113e8 <__assert_func+0x30>)
 80113ca:	461c      	mov	r4, r3
 80113cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80113d0:	9100      	str	r1, [sp, #0]
 80113d2:	462b      	mov	r3, r5
 80113d4:	4905      	ldr	r1, [pc, #20]	@ (80113ec <__assert_func+0x34>)
 80113d6:	f000 f83b 	bl	8011450 <fiprintf>
 80113da:	f000 f858 	bl	801148e <abort>
 80113de:	4b04      	ldr	r3, [pc, #16]	@ (80113f0 <__assert_func+0x38>)
 80113e0:	e7f4      	b.n	80113cc <__assert_func+0x14>
 80113e2:	bf00      	nop
 80113e4:	20000194 	.word	0x20000194
 80113e8:	08012116 	.word	0x08012116
 80113ec:	080120e8 	.word	0x080120e8
 80113f0:	080120db 	.word	0x080120db

080113f4 <_calloc_r>:
 80113f4:	b570      	push	{r4, r5, r6, lr}
 80113f6:	fba1 5402 	umull	r5, r4, r1, r2
 80113fa:	b93c      	cbnz	r4, 801140c <_calloc_r+0x18>
 80113fc:	4629      	mov	r1, r5
 80113fe:	f7ff fa3f 	bl	8010880 <_malloc_r>
 8011402:	4606      	mov	r6, r0
 8011404:	b928      	cbnz	r0, 8011412 <_calloc_r+0x1e>
 8011406:	2600      	movs	r6, #0
 8011408:	4630      	mov	r0, r6
 801140a:	bd70      	pop	{r4, r5, r6, pc}
 801140c:	220c      	movs	r2, #12
 801140e:	6002      	str	r2, [r0, #0]
 8011410:	e7f9      	b.n	8011406 <_calloc_r+0x12>
 8011412:	462a      	mov	r2, r5
 8011414:	4621      	mov	r1, r4
 8011416:	f7fe f97d 	bl	800f714 <memset>
 801141a:	e7f5      	b.n	8011408 <_calloc_r+0x14>

0801141c <__ascii_mbtowc>:
 801141c:	b082      	sub	sp, #8
 801141e:	b901      	cbnz	r1, 8011422 <__ascii_mbtowc+0x6>
 8011420:	a901      	add	r1, sp, #4
 8011422:	b142      	cbz	r2, 8011436 <__ascii_mbtowc+0x1a>
 8011424:	b14b      	cbz	r3, 801143a <__ascii_mbtowc+0x1e>
 8011426:	7813      	ldrb	r3, [r2, #0]
 8011428:	600b      	str	r3, [r1, #0]
 801142a:	7812      	ldrb	r2, [r2, #0]
 801142c:	1e10      	subs	r0, r2, #0
 801142e:	bf18      	it	ne
 8011430:	2001      	movne	r0, #1
 8011432:	b002      	add	sp, #8
 8011434:	4770      	bx	lr
 8011436:	4610      	mov	r0, r2
 8011438:	e7fb      	b.n	8011432 <__ascii_mbtowc+0x16>
 801143a:	f06f 0001 	mvn.w	r0, #1
 801143e:	e7f8      	b.n	8011432 <__ascii_mbtowc+0x16>

08011440 <_malloc_usable_size_r>:
 8011440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011444:	1f18      	subs	r0, r3, #4
 8011446:	2b00      	cmp	r3, #0
 8011448:	bfbc      	itt	lt
 801144a:	580b      	ldrlt	r3, [r1, r0]
 801144c:	18c0      	addlt	r0, r0, r3
 801144e:	4770      	bx	lr

08011450 <fiprintf>:
 8011450:	b40e      	push	{r1, r2, r3}
 8011452:	b503      	push	{r0, r1, lr}
 8011454:	4601      	mov	r1, r0
 8011456:	ab03      	add	r3, sp, #12
 8011458:	4805      	ldr	r0, [pc, #20]	@ (8011470 <fiprintf+0x20>)
 801145a:	f853 2b04 	ldr.w	r2, [r3], #4
 801145e:	6800      	ldr	r0, [r0, #0]
 8011460:	9301      	str	r3, [sp, #4]
 8011462:	f000 f845 	bl	80114f0 <_vfiprintf_r>
 8011466:	b002      	add	sp, #8
 8011468:	f85d eb04 	ldr.w	lr, [sp], #4
 801146c:	b003      	add	sp, #12
 801146e:	4770      	bx	lr
 8011470:	20000194 	.word	0x20000194

08011474 <__ascii_wctomb>:
 8011474:	4603      	mov	r3, r0
 8011476:	4608      	mov	r0, r1
 8011478:	b141      	cbz	r1, 801148c <__ascii_wctomb+0x18>
 801147a:	2aff      	cmp	r2, #255	@ 0xff
 801147c:	d904      	bls.n	8011488 <__ascii_wctomb+0x14>
 801147e:	228a      	movs	r2, #138	@ 0x8a
 8011480:	601a      	str	r2, [r3, #0]
 8011482:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011486:	4770      	bx	lr
 8011488:	700a      	strb	r2, [r1, #0]
 801148a:	2001      	movs	r0, #1
 801148c:	4770      	bx	lr

0801148e <abort>:
 801148e:	b508      	push	{r3, lr}
 8011490:	2006      	movs	r0, #6
 8011492:	f000 fa85 	bl	80119a0 <raise>
 8011496:	2001      	movs	r0, #1
 8011498:	f7f0 fc86 	bl	8001da8 <_exit>

0801149c <__sfputc_r>:
 801149c:	6893      	ldr	r3, [r2, #8]
 801149e:	3b01      	subs	r3, #1
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	b410      	push	{r4}
 80114a4:	6093      	str	r3, [r2, #8]
 80114a6:	da08      	bge.n	80114ba <__sfputc_r+0x1e>
 80114a8:	6994      	ldr	r4, [r2, #24]
 80114aa:	42a3      	cmp	r3, r4
 80114ac:	db01      	blt.n	80114b2 <__sfputc_r+0x16>
 80114ae:	290a      	cmp	r1, #10
 80114b0:	d103      	bne.n	80114ba <__sfputc_r+0x1e>
 80114b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114b6:	f000 b933 	b.w	8011720 <__swbuf_r>
 80114ba:	6813      	ldr	r3, [r2, #0]
 80114bc:	1c58      	adds	r0, r3, #1
 80114be:	6010      	str	r0, [r2, #0]
 80114c0:	7019      	strb	r1, [r3, #0]
 80114c2:	4608      	mov	r0, r1
 80114c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114c8:	4770      	bx	lr

080114ca <__sfputs_r>:
 80114ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114cc:	4606      	mov	r6, r0
 80114ce:	460f      	mov	r7, r1
 80114d0:	4614      	mov	r4, r2
 80114d2:	18d5      	adds	r5, r2, r3
 80114d4:	42ac      	cmp	r4, r5
 80114d6:	d101      	bne.n	80114dc <__sfputs_r+0x12>
 80114d8:	2000      	movs	r0, #0
 80114da:	e007      	b.n	80114ec <__sfputs_r+0x22>
 80114dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e0:	463a      	mov	r2, r7
 80114e2:	4630      	mov	r0, r6
 80114e4:	f7ff ffda 	bl	801149c <__sfputc_r>
 80114e8:	1c43      	adds	r3, r0, #1
 80114ea:	d1f3      	bne.n	80114d4 <__sfputs_r+0xa>
 80114ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080114f0 <_vfiprintf_r>:
 80114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f4:	460d      	mov	r5, r1
 80114f6:	b09d      	sub	sp, #116	@ 0x74
 80114f8:	4614      	mov	r4, r2
 80114fa:	4698      	mov	r8, r3
 80114fc:	4606      	mov	r6, r0
 80114fe:	b118      	cbz	r0, 8011508 <_vfiprintf_r+0x18>
 8011500:	6a03      	ldr	r3, [r0, #32]
 8011502:	b90b      	cbnz	r3, 8011508 <_vfiprintf_r+0x18>
 8011504:	f7fe f896 	bl	800f634 <__sinit>
 8011508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801150a:	07d9      	lsls	r1, r3, #31
 801150c:	d405      	bmi.n	801151a <_vfiprintf_r+0x2a>
 801150e:	89ab      	ldrh	r3, [r5, #12]
 8011510:	059a      	lsls	r2, r3, #22
 8011512:	d402      	bmi.n	801151a <_vfiprintf_r+0x2a>
 8011514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011516:	f7fe f98a 	bl	800f82e <__retarget_lock_acquire_recursive>
 801151a:	89ab      	ldrh	r3, [r5, #12]
 801151c:	071b      	lsls	r3, r3, #28
 801151e:	d501      	bpl.n	8011524 <_vfiprintf_r+0x34>
 8011520:	692b      	ldr	r3, [r5, #16]
 8011522:	b99b      	cbnz	r3, 801154c <_vfiprintf_r+0x5c>
 8011524:	4629      	mov	r1, r5
 8011526:	4630      	mov	r0, r6
 8011528:	f000 f938 	bl	801179c <__swsetup_r>
 801152c:	b170      	cbz	r0, 801154c <_vfiprintf_r+0x5c>
 801152e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011530:	07dc      	lsls	r4, r3, #31
 8011532:	d504      	bpl.n	801153e <_vfiprintf_r+0x4e>
 8011534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011538:	b01d      	add	sp, #116	@ 0x74
 801153a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153e:	89ab      	ldrh	r3, [r5, #12]
 8011540:	0598      	lsls	r0, r3, #22
 8011542:	d4f7      	bmi.n	8011534 <_vfiprintf_r+0x44>
 8011544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011546:	f7fe f973 	bl	800f830 <__retarget_lock_release_recursive>
 801154a:	e7f3      	b.n	8011534 <_vfiprintf_r+0x44>
 801154c:	2300      	movs	r3, #0
 801154e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011550:	2320      	movs	r3, #32
 8011552:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011556:	f8cd 800c 	str.w	r8, [sp, #12]
 801155a:	2330      	movs	r3, #48	@ 0x30
 801155c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801170c <_vfiprintf_r+0x21c>
 8011560:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011564:	f04f 0901 	mov.w	r9, #1
 8011568:	4623      	mov	r3, r4
 801156a:	469a      	mov	sl, r3
 801156c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011570:	b10a      	cbz	r2, 8011576 <_vfiprintf_r+0x86>
 8011572:	2a25      	cmp	r2, #37	@ 0x25
 8011574:	d1f9      	bne.n	801156a <_vfiprintf_r+0x7a>
 8011576:	ebba 0b04 	subs.w	fp, sl, r4
 801157a:	d00b      	beq.n	8011594 <_vfiprintf_r+0xa4>
 801157c:	465b      	mov	r3, fp
 801157e:	4622      	mov	r2, r4
 8011580:	4629      	mov	r1, r5
 8011582:	4630      	mov	r0, r6
 8011584:	f7ff ffa1 	bl	80114ca <__sfputs_r>
 8011588:	3001      	adds	r0, #1
 801158a:	f000 80a7 	beq.w	80116dc <_vfiprintf_r+0x1ec>
 801158e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011590:	445a      	add	r2, fp
 8011592:	9209      	str	r2, [sp, #36]	@ 0x24
 8011594:	f89a 3000 	ldrb.w	r3, [sl]
 8011598:	2b00      	cmp	r3, #0
 801159a:	f000 809f 	beq.w	80116dc <_vfiprintf_r+0x1ec>
 801159e:	2300      	movs	r3, #0
 80115a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80115a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115a8:	f10a 0a01 	add.w	sl, sl, #1
 80115ac:	9304      	str	r3, [sp, #16]
 80115ae:	9307      	str	r3, [sp, #28]
 80115b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80115b6:	4654      	mov	r4, sl
 80115b8:	2205      	movs	r2, #5
 80115ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115be:	4853      	ldr	r0, [pc, #332]	@ (801170c <_vfiprintf_r+0x21c>)
 80115c0:	f7ee fe2e 	bl	8000220 <memchr>
 80115c4:	9a04      	ldr	r2, [sp, #16]
 80115c6:	b9d8      	cbnz	r0, 8011600 <_vfiprintf_r+0x110>
 80115c8:	06d1      	lsls	r1, r2, #27
 80115ca:	bf44      	itt	mi
 80115cc:	2320      	movmi	r3, #32
 80115ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115d2:	0713      	lsls	r3, r2, #28
 80115d4:	bf44      	itt	mi
 80115d6:	232b      	movmi	r3, #43	@ 0x2b
 80115d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115dc:	f89a 3000 	ldrb.w	r3, [sl]
 80115e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80115e2:	d015      	beq.n	8011610 <_vfiprintf_r+0x120>
 80115e4:	9a07      	ldr	r2, [sp, #28]
 80115e6:	4654      	mov	r4, sl
 80115e8:	2000      	movs	r0, #0
 80115ea:	f04f 0c0a 	mov.w	ip, #10
 80115ee:	4621      	mov	r1, r4
 80115f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115f4:	3b30      	subs	r3, #48	@ 0x30
 80115f6:	2b09      	cmp	r3, #9
 80115f8:	d94b      	bls.n	8011692 <_vfiprintf_r+0x1a2>
 80115fa:	b1b0      	cbz	r0, 801162a <_vfiprintf_r+0x13a>
 80115fc:	9207      	str	r2, [sp, #28]
 80115fe:	e014      	b.n	801162a <_vfiprintf_r+0x13a>
 8011600:	eba0 0308 	sub.w	r3, r0, r8
 8011604:	fa09 f303 	lsl.w	r3, r9, r3
 8011608:	4313      	orrs	r3, r2
 801160a:	9304      	str	r3, [sp, #16]
 801160c:	46a2      	mov	sl, r4
 801160e:	e7d2      	b.n	80115b6 <_vfiprintf_r+0xc6>
 8011610:	9b03      	ldr	r3, [sp, #12]
 8011612:	1d19      	adds	r1, r3, #4
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	9103      	str	r1, [sp, #12]
 8011618:	2b00      	cmp	r3, #0
 801161a:	bfbb      	ittet	lt
 801161c:	425b      	neglt	r3, r3
 801161e:	f042 0202 	orrlt.w	r2, r2, #2
 8011622:	9307      	strge	r3, [sp, #28]
 8011624:	9307      	strlt	r3, [sp, #28]
 8011626:	bfb8      	it	lt
 8011628:	9204      	strlt	r2, [sp, #16]
 801162a:	7823      	ldrb	r3, [r4, #0]
 801162c:	2b2e      	cmp	r3, #46	@ 0x2e
 801162e:	d10a      	bne.n	8011646 <_vfiprintf_r+0x156>
 8011630:	7863      	ldrb	r3, [r4, #1]
 8011632:	2b2a      	cmp	r3, #42	@ 0x2a
 8011634:	d132      	bne.n	801169c <_vfiprintf_r+0x1ac>
 8011636:	9b03      	ldr	r3, [sp, #12]
 8011638:	1d1a      	adds	r2, r3, #4
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	9203      	str	r2, [sp, #12]
 801163e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011642:	3402      	adds	r4, #2
 8011644:	9305      	str	r3, [sp, #20]
 8011646:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801171c <_vfiprintf_r+0x22c>
 801164a:	7821      	ldrb	r1, [r4, #0]
 801164c:	2203      	movs	r2, #3
 801164e:	4650      	mov	r0, sl
 8011650:	f7ee fde6 	bl	8000220 <memchr>
 8011654:	b138      	cbz	r0, 8011666 <_vfiprintf_r+0x176>
 8011656:	9b04      	ldr	r3, [sp, #16]
 8011658:	eba0 000a 	sub.w	r0, r0, sl
 801165c:	2240      	movs	r2, #64	@ 0x40
 801165e:	4082      	lsls	r2, r0
 8011660:	4313      	orrs	r3, r2
 8011662:	3401      	adds	r4, #1
 8011664:	9304      	str	r3, [sp, #16]
 8011666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801166a:	4829      	ldr	r0, [pc, #164]	@ (8011710 <_vfiprintf_r+0x220>)
 801166c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011670:	2206      	movs	r2, #6
 8011672:	f7ee fdd5 	bl	8000220 <memchr>
 8011676:	2800      	cmp	r0, #0
 8011678:	d03f      	beq.n	80116fa <_vfiprintf_r+0x20a>
 801167a:	4b26      	ldr	r3, [pc, #152]	@ (8011714 <_vfiprintf_r+0x224>)
 801167c:	bb1b      	cbnz	r3, 80116c6 <_vfiprintf_r+0x1d6>
 801167e:	9b03      	ldr	r3, [sp, #12]
 8011680:	3307      	adds	r3, #7
 8011682:	f023 0307 	bic.w	r3, r3, #7
 8011686:	3308      	adds	r3, #8
 8011688:	9303      	str	r3, [sp, #12]
 801168a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801168c:	443b      	add	r3, r7
 801168e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011690:	e76a      	b.n	8011568 <_vfiprintf_r+0x78>
 8011692:	fb0c 3202 	mla	r2, ip, r2, r3
 8011696:	460c      	mov	r4, r1
 8011698:	2001      	movs	r0, #1
 801169a:	e7a8      	b.n	80115ee <_vfiprintf_r+0xfe>
 801169c:	2300      	movs	r3, #0
 801169e:	3401      	adds	r4, #1
 80116a0:	9305      	str	r3, [sp, #20]
 80116a2:	4619      	mov	r1, r3
 80116a4:	f04f 0c0a 	mov.w	ip, #10
 80116a8:	4620      	mov	r0, r4
 80116aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116ae:	3a30      	subs	r2, #48	@ 0x30
 80116b0:	2a09      	cmp	r2, #9
 80116b2:	d903      	bls.n	80116bc <_vfiprintf_r+0x1cc>
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d0c6      	beq.n	8011646 <_vfiprintf_r+0x156>
 80116b8:	9105      	str	r1, [sp, #20]
 80116ba:	e7c4      	b.n	8011646 <_vfiprintf_r+0x156>
 80116bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80116c0:	4604      	mov	r4, r0
 80116c2:	2301      	movs	r3, #1
 80116c4:	e7f0      	b.n	80116a8 <_vfiprintf_r+0x1b8>
 80116c6:	ab03      	add	r3, sp, #12
 80116c8:	9300      	str	r3, [sp, #0]
 80116ca:	462a      	mov	r2, r5
 80116cc:	4b12      	ldr	r3, [pc, #72]	@ (8011718 <_vfiprintf_r+0x228>)
 80116ce:	a904      	add	r1, sp, #16
 80116d0:	4630      	mov	r0, r6
 80116d2:	f7fd fb6b 	bl	800edac <_printf_float>
 80116d6:	4607      	mov	r7, r0
 80116d8:	1c78      	adds	r0, r7, #1
 80116da:	d1d6      	bne.n	801168a <_vfiprintf_r+0x19a>
 80116dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80116de:	07d9      	lsls	r1, r3, #31
 80116e0:	d405      	bmi.n	80116ee <_vfiprintf_r+0x1fe>
 80116e2:	89ab      	ldrh	r3, [r5, #12]
 80116e4:	059a      	lsls	r2, r3, #22
 80116e6:	d402      	bmi.n	80116ee <_vfiprintf_r+0x1fe>
 80116e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80116ea:	f7fe f8a1 	bl	800f830 <__retarget_lock_release_recursive>
 80116ee:	89ab      	ldrh	r3, [r5, #12]
 80116f0:	065b      	lsls	r3, r3, #25
 80116f2:	f53f af1f 	bmi.w	8011534 <_vfiprintf_r+0x44>
 80116f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116f8:	e71e      	b.n	8011538 <_vfiprintf_r+0x48>
 80116fa:	ab03      	add	r3, sp, #12
 80116fc:	9300      	str	r3, [sp, #0]
 80116fe:	462a      	mov	r2, r5
 8011700:	4b05      	ldr	r3, [pc, #20]	@ (8011718 <_vfiprintf_r+0x228>)
 8011702:	a904      	add	r1, sp, #16
 8011704:	4630      	mov	r0, r6
 8011706:	f7fd fde9 	bl	800f2dc <_printf_i>
 801170a:	e7e4      	b.n	80116d6 <_vfiprintf_r+0x1e6>
 801170c:	08011e65 	.word	0x08011e65
 8011710:	08011e6f 	.word	0x08011e6f
 8011714:	0800edad 	.word	0x0800edad
 8011718:	080114cb 	.word	0x080114cb
 801171c:	08011e6b 	.word	0x08011e6b

08011720 <__swbuf_r>:
 8011720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011722:	460e      	mov	r6, r1
 8011724:	4614      	mov	r4, r2
 8011726:	4605      	mov	r5, r0
 8011728:	b118      	cbz	r0, 8011732 <__swbuf_r+0x12>
 801172a:	6a03      	ldr	r3, [r0, #32]
 801172c:	b90b      	cbnz	r3, 8011732 <__swbuf_r+0x12>
 801172e:	f7fd ff81 	bl	800f634 <__sinit>
 8011732:	69a3      	ldr	r3, [r4, #24]
 8011734:	60a3      	str	r3, [r4, #8]
 8011736:	89a3      	ldrh	r3, [r4, #12]
 8011738:	071a      	lsls	r2, r3, #28
 801173a:	d501      	bpl.n	8011740 <__swbuf_r+0x20>
 801173c:	6923      	ldr	r3, [r4, #16]
 801173e:	b943      	cbnz	r3, 8011752 <__swbuf_r+0x32>
 8011740:	4621      	mov	r1, r4
 8011742:	4628      	mov	r0, r5
 8011744:	f000 f82a 	bl	801179c <__swsetup_r>
 8011748:	b118      	cbz	r0, 8011752 <__swbuf_r+0x32>
 801174a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801174e:	4638      	mov	r0, r7
 8011750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011752:	6823      	ldr	r3, [r4, #0]
 8011754:	6922      	ldr	r2, [r4, #16]
 8011756:	1a98      	subs	r0, r3, r2
 8011758:	6963      	ldr	r3, [r4, #20]
 801175a:	b2f6      	uxtb	r6, r6
 801175c:	4283      	cmp	r3, r0
 801175e:	4637      	mov	r7, r6
 8011760:	dc05      	bgt.n	801176e <__swbuf_r+0x4e>
 8011762:	4621      	mov	r1, r4
 8011764:	4628      	mov	r0, r5
 8011766:	f7ff f98f 	bl	8010a88 <_fflush_r>
 801176a:	2800      	cmp	r0, #0
 801176c:	d1ed      	bne.n	801174a <__swbuf_r+0x2a>
 801176e:	68a3      	ldr	r3, [r4, #8]
 8011770:	3b01      	subs	r3, #1
 8011772:	60a3      	str	r3, [r4, #8]
 8011774:	6823      	ldr	r3, [r4, #0]
 8011776:	1c5a      	adds	r2, r3, #1
 8011778:	6022      	str	r2, [r4, #0]
 801177a:	701e      	strb	r6, [r3, #0]
 801177c:	6962      	ldr	r2, [r4, #20]
 801177e:	1c43      	adds	r3, r0, #1
 8011780:	429a      	cmp	r2, r3
 8011782:	d004      	beq.n	801178e <__swbuf_r+0x6e>
 8011784:	89a3      	ldrh	r3, [r4, #12]
 8011786:	07db      	lsls	r3, r3, #31
 8011788:	d5e1      	bpl.n	801174e <__swbuf_r+0x2e>
 801178a:	2e0a      	cmp	r6, #10
 801178c:	d1df      	bne.n	801174e <__swbuf_r+0x2e>
 801178e:	4621      	mov	r1, r4
 8011790:	4628      	mov	r0, r5
 8011792:	f7ff f979 	bl	8010a88 <_fflush_r>
 8011796:	2800      	cmp	r0, #0
 8011798:	d0d9      	beq.n	801174e <__swbuf_r+0x2e>
 801179a:	e7d6      	b.n	801174a <__swbuf_r+0x2a>

0801179c <__swsetup_r>:
 801179c:	b538      	push	{r3, r4, r5, lr}
 801179e:	4b29      	ldr	r3, [pc, #164]	@ (8011844 <__swsetup_r+0xa8>)
 80117a0:	4605      	mov	r5, r0
 80117a2:	6818      	ldr	r0, [r3, #0]
 80117a4:	460c      	mov	r4, r1
 80117a6:	b118      	cbz	r0, 80117b0 <__swsetup_r+0x14>
 80117a8:	6a03      	ldr	r3, [r0, #32]
 80117aa:	b90b      	cbnz	r3, 80117b0 <__swsetup_r+0x14>
 80117ac:	f7fd ff42 	bl	800f634 <__sinit>
 80117b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117b4:	0719      	lsls	r1, r3, #28
 80117b6:	d422      	bmi.n	80117fe <__swsetup_r+0x62>
 80117b8:	06da      	lsls	r2, r3, #27
 80117ba:	d407      	bmi.n	80117cc <__swsetup_r+0x30>
 80117bc:	2209      	movs	r2, #9
 80117be:	602a      	str	r2, [r5, #0]
 80117c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117c4:	81a3      	strh	r3, [r4, #12]
 80117c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117ca:	e033      	b.n	8011834 <__swsetup_r+0x98>
 80117cc:	0758      	lsls	r0, r3, #29
 80117ce:	d512      	bpl.n	80117f6 <__swsetup_r+0x5a>
 80117d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117d2:	b141      	cbz	r1, 80117e6 <__swsetup_r+0x4a>
 80117d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117d8:	4299      	cmp	r1, r3
 80117da:	d002      	beq.n	80117e2 <__swsetup_r+0x46>
 80117dc:	4628      	mov	r0, r5
 80117de:	f7fe fe83 	bl	80104e8 <_free_r>
 80117e2:	2300      	movs	r3, #0
 80117e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80117e6:	89a3      	ldrh	r3, [r4, #12]
 80117e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80117ec:	81a3      	strh	r3, [r4, #12]
 80117ee:	2300      	movs	r3, #0
 80117f0:	6063      	str	r3, [r4, #4]
 80117f2:	6923      	ldr	r3, [r4, #16]
 80117f4:	6023      	str	r3, [r4, #0]
 80117f6:	89a3      	ldrh	r3, [r4, #12]
 80117f8:	f043 0308 	orr.w	r3, r3, #8
 80117fc:	81a3      	strh	r3, [r4, #12]
 80117fe:	6923      	ldr	r3, [r4, #16]
 8011800:	b94b      	cbnz	r3, 8011816 <__swsetup_r+0x7a>
 8011802:	89a3      	ldrh	r3, [r4, #12]
 8011804:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801180c:	d003      	beq.n	8011816 <__swsetup_r+0x7a>
 801180e:	4621      	mov	r1, r4
 8011810:	4628      	mov	r0, r5
 8011812:	f000 f83f 	bl	8011894 <__smakebuf_r>
 8011816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801181a:	f013 0201 	ands.w	r2, r3, #1
 801181e:	d00a      	beq.n	8011836 <__swsetup_r+0x9a>
 8011820:	2200      	movs	r2, #0
 8011822:	60a2      	str	r2, [r4, #8]
 8011824:	6962      	ldr	r2, [r4, #20]
 8011826:	4252      	negs	r2, r2
 8011828:	61a2      	str	r2, [r4, #24]
 801182a:	6922      	ldr	r2, [r4, #16]
 801182c:	b942      	cbnz	r2, 8011840 <__swsetup_r+0xa4>
 801182e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011832:	d1c5      	bne.n	80117c0 <__swsetup_r+0x24>
 8011834:	bd38      	pop	{r3, r4, r5, pc}
 8011836:	0799      	lsls	r1, r3, #30
 8011838:	bf58      	it	pl
 801183a:	6962      	ldrpl	r2, [r4, #20]
 801183c:	60a2      	str	r2, [r4, #8]
 801183e:	e7f4      	b.n	801182a <__swsetup_r+0x8e>
 8011840:	2000      	movs	r0, #0
 8011842:	e7f7      	b.n	8011834 <__swsetup_r+0x98>
 8011844:	20000194 	.word	0x20000194

08011848 <__swhatbuf_r>:
 8011848:	b570      	push	{r4, r5, r6, lr}
 801184a:	460c      	mov	r4, r1
 801184c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011850:	2900      	cmp	r1, #0
 8011852:	b096      	sub	sp, #88	@ 0x58
 8011854:	4615      	mov	r5, r2
 8011856:	461e      	mov	r6, r3
 8011858:	da0d      	bge.n	8011876 <__swhatbuf_r+0x2e>
 801185a:	89a3      	ldrh	r3, [r4, #12]
 801185c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011860:	f04f 0100 	mov.w	r1, #0
 8011864:	bf14      	ite	ne
 8011866:	2340      	movne	r3, #64	@ 0x40
 8011868:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801186c:	2000      	movs	r0, #0
 801186e:	6031      	str	r1, [r6, #0]
 8011870:	602b      	str	r3, [r5, #0]
 8011872:	b016      	add	sp, #88	@ 0x58
 8011874:	bd70      	pop	{r4, r5, r6, pc}
 8011876:	466a      	mov	r2, sp
 8011878:	f000 f848 	bl	801190c <_fstat_r>
 801187c:	2800      	cmp	r0, #0
 801187e:	dbec      	blt.n	801185a <__swhatbuf_r+0x12>
 8011880:	9901      	ldr	r1, [sp, #4]
 8011882:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011886:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801188a:	4259      	negs	r1, r3
 801188c:	4159      	adcs	r1, r3
 801188e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011892:	e7eb      	b.n	801186c <__swhatbuf_r+0x24>

08011894 <__smakebuf_r>:
 8011894:	898b      	ldrh	r3, [r1, #12]
 8011896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011898:	079d      	lsls	r5, r3, #30
 801189a:	4606      	mov	r6, r0
 801189c:	460c      	mov	r4, r1
 801189e:	d507      	bpl.n	80118b0 <__smakebuf_r+0x1c>
 80118a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80118a4:	6023      	str	r3, [r4, #0]
 80118a6:	6123      	str	r3, [r4, #16]
 80118a8:	2301      	movs	r3, #1
 80118aa:	6163      	str	r3, [r4, #20]
 80118ac:	b003      	add	sp, #12
 80118ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118b0:	ab01      	add	r3, sp, #4
 80118b2:	466a      	mov	r2, sp
 80118b4:	f7ff ffc8 	bl	8011848 <__swhatbuf_r>
 80118b8:	9f00      	ldr	r7, [sp, #0]
 80118ba:	4605      	mov	r5, r0
 80118bc:	4639      	mov	r1, r7
 80118be:	4630      	mov	r0, r6
 80118c0:	f7fe ffde 	bl	8010880 <_malloc_r>
 80118c4:	b948      	cbnz	r0, 80118da <__smakebuf_r+0x46>
 80118c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118ca:	059a      	lsls	r2, r3, #22
 80118cc:	d4ee      	bmi.n	80118ac <__smakebuf_r+0x18>
 80118ce:	f023 0303 	bic.w	r3, r3, #3
 80118d2:	f043 0302 	orr.w	r3, r3, #2
 80118d6:	81a3      	strh	r3, [r4, #12]
 80118d8:	e7e2      	b.n	80118a0 <__smakebuf_r+0xc>
 80118da:	89a3      	ldrh	r3, [r4, #12]
 80118dc:	6020      	str	r0, [r4, #0]
 80118de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118e2:	81a3      	strh	r3, [r4, #12]
 80118e4:	9b01      	ldr	r3, [sp, #4]
 80118e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80118ea:	b15b      	cbz	r3, 8011904 <__smakebuf_r+0x70>
 80118ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118f0:	4630      	mov	r0, r6
 80118f2:	f000 f81d 	bl	8011930 <_isatty_r>
 80118f6:	b128      	cbz	r0, 8011904 <__smakebuf_r+0x70>
 80118f8:	89a3      	ldrh	r3, [r4, #12]
 80118fa:	f023 0303 	bic.w	r3, r3, #3
 80118fe:	f043 0301 	orr.w	r3, r3, #1
 8011902:	81a3      	strh	r3, [r4, #12]
 8011904:	89a3      	ldrh	r3, [r4, #12]
 8011906:	431d      	orrs	r5, r3
 8011908:	81a5      	strh	r5, [r4, #12]
 801190a:	e7cf      	b.n	80118ac <__smakebuf_r+0x18>

0801190c <_fstat_r>:
 801190c:	b538      	push	{r3, r4, r5, lr}
 801190e:	4d07      	ldr	r5, [pc, #28]	@ (801192c <_fstat_r+0x20>)
 8011910:	2300      	movs	r3, #0
 8011912:	4604      	mov	r4, r0
 8011914:	4608      	mov	r0, r1
 8011916:	4611      	mov	r1, r2
 8011918:	602b      	str	r3, [r5, #0]
 801191a:	f7f0 fa95 	bl	8001e48 <_fstat>
 801191e:	1c43      	adds	r3, r0, #1
 8011920:	d102      	bne.n	8011928 <_fstat_r+0x1c>
 8011922:	682b      	ldr	r3, [r5, #0]
 8011924:	b103      	cbz	r3, 8011928 <_fstat_r+0x1c>
 8011926:	6023      	str	r3, [r4, #0]
 8011928:	bd38      	pop	{r3, r4, r5, pc}
 801192a:	bf00      	nop
 801192c:	2001037c 	.word	0x2001037c

08011930 <_isatty_r>:
 8011930:	b538      	push	{r3, r4, r5, lr}
 8011932:	4d06      	ldr	r5, [pc, #24]	@ (801194c <_isatty_r+0x1c>)
 8011934:	2300      	movs	r3, #0
 8011936:	4604      	mov	r4, r0
 8011938:	4608      	mov	r0, r1
 801193a:	602b      	str	r3, [r5, #0]
 801193c:	f7f0 fa94 	bl	8001e68 <_isatty>
 8011940:	1c43      	adds	r3, r0, #1
 8011942:	d102      	bne.n	801194a <_isatty_r+0x1a>
 8011944:	682b      	ldr	r3, [r5, #0]
 8011946:	b103      	cbz	r3, 801194a <_isatty_r+0x1a>
 8011948:	6023      	str	r3, [r4, #0]
 801194a:	bd38      	pop	{r3, r4, r5, pc}
 801194c:	2001037c 	.word	0x2001037c

08011950 <_raise_r>:
 8011950:	291f      	cmp	r1, #31
 8011952:	b538      	push	{r3, r4, r5, lr}
 8011954:	4605      	mov	r5, r0
 8011956:	460c      	mov	r4, r1
 8011958:	d904      	bls.n	8011964 <_raise_r+0x14>
 801195a:	2316      	movs	r3, #22
 801195c:	6003      	str	r3, [r0, #0]
 801195e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011962:	bd38      	pop	{r3, r4, r5, pc}
 8011964:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011966:	b112      	cbz	r2, 801196e <_raise_r+0x1e>
 8011968:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801196c:	b94b      	cbnz	r3, 8011982 <_raise_r+0x32>
 801196e:	4628      	mov	r0, r5
 8011970:	f000 f830 	bl	80119d4 <_getpid_r>
 8011974:	4622      	mov	r2, r4
 8011976:	4601      	mov	r1, r0
 8011978:	4628      	mov	r0, r5
 801197a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801197e:	f000 b817 	b.w	80119b0 <_kill_r>
 8011982:	2b01      	cmp	r3, #1
 8011984:	d00a      	beq.n	801199c <_raise_r+0x4c>
 8011986:	1c59      	adds	r1, r3, #1
 8011988:	d103      	bne.n	8011992 <_raise_r+0x42>
 801198a:	2316      	movs	r3, #22
 801198c:	6003      	str	r3, [r0, #0]
 801198e:	2001      	movs	r0, #1
 8011990:	e7e7      	b.n	8011962 <_raise_r+0x12>
 8011992:	2100      	movs	r1, #0
 8011994:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011998:	4620      	mov	r0, r4
 801199a:	4798      	blx	r3
 801199c:	2000      	movs	r0, #0
 801199e:	e7e0      	b.n	8011962 <_raise_r+0x12>

080119a0 <raise>:
 80119a0:	4b02      	ldr	r3, [pc, #8]	@ (80119ac <raise+0xc>)
 80119a2:	4601      	mov	r1, r0
 80119a4:	6818      	ldr	r0, [r3, #0]
 80119a6:	f7ff bfd3 	b.w	8011950 <_raise_r>
 80119aa:	bf00      	nop
 80119ac:	20000194 	.word	0x20000194

080119b0 <_kill_r>:
 80119b0:	b538      	push	{r3, r4, r5, lr}
 80119b2:	4d07      	ldr	r5, [pc, #28]	@ (80119d0 <_kill_r+0x20>)
 80119b4:	2300      	movs	r3, #0
 80119b6:	4604      	mov	r4, r0
 80119b8:	4608      	mov	r0, r1
 80119ba:	4611      	mov	r1, r2
 80119bc:	602b      	str	r3, [r5, #0]
 80119be:	f7f0 f9e3 	bl	8001d88 <_kill>
 80119c2:	1c43      	adds	r3, r0, #1
 80119c4:	d102      	bne.n	80119cc <_kill_r+0x1c>
 80119c6:	682b      	ldr	r3, [r5, #0]
 80119c8:	b103      	cbz	r3, 80119cc <_kill_r+0x1c>
 80119ca:	6023      	str	r3, [r4, #0]
 80119cc:	bd38      	pop	{r3, r4, r5, pc}
 80119ce:	bf00      	nop
 80119d0:	2001037c 	.word	0x2001037c

080119d4 <_getpid_r>:
 80119d4:	f7f0 b9d0 	b.w	8001d78 <_getpid>

080119d8 <_init>:
 80119d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119da:	bf00      	nop
 80119dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119de:	bc08      	pop	{r3}
 80119e0:	469e      	mov	lr, r3
 80119e2:	4770      	bx	lr

080119e4 <_fini>:
 80119e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119e6:	bf00      	nop
 80119e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119ea:	bc08      	pop	{r3}
 80119ec:	469e      	mov	lr, r3
 80119ee:	4770      	bx	lr
