
ValveBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e84  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  08012068  08012068  00013068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801273c  0801273c  00014350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801273c  0801273c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012744  08012744  00014350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012744  08012744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012748  08012748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0801274c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a30c  20000350  08012a9c  00014350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a65c  08012a9c  0001465c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030390  00000000  00000000  00014380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062a6  00000000  00000000  00044710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002730  00000000  00000000  0004a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e3d  00000000  00000000  0004d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028460  00000000  00000000  0004ef25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e84c  00000000  00000000  00077385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd3fb  00000000  00000000  000a5bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a2fcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b8fc  00000000  00000000  001a3010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001ae90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801204c 	.word	0x0801204c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	0801204c 	.word	0x0801204c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b988 	b.w	8000fc0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <LTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int LTC2990_Init(LTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c, uint8_t address) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	71fb      	strb	r3, [r7, #7]
	int8_t ack;

	handle->hi2c = hi2c;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	601a      	str	r2, [r3, #0]

	//Initialize current to NAN
	handle->current = NAN;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4a20      	ldr	r2, [pc, #128]	@ (800105c <LTC2990_Init+0x98>)
 8000fdc:	611a      	str	r2, [r3, #16]

	handle->i2c_address = address;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	711a      	strb	r2, [r3, #4]

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, CLEAR_ALL); // was V1DV2_V3DV4 //
 8000fe4:	22ff      	movs	r2, #255	@ 0xff
 8000fe6:	211f      	movs	r1, #31
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 f97f 	bl	80012ec <LTC2990_Set_Mode>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8000ff2:	2064      	movs	r0, #100	@ 0x64
 8000ff4:	f001 fa10 	bl	8002418 <HAL_Delay>

	if(ack != 0) {
 8000ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <LTC2990_Init+0x46>
		CDC_Transmit_Print("Failed to set in Differential Voltage Mode \n");
 8001000:	4817      	ldr	r0, [pc, #92]	@ (8001060 <LTC2990_Init+0x9c>)
 8001002:	f000 fb49 	bl	8001698 <CDC_Transmit_Print>
		while(1);
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <LTC2990_Init+0x42>
	}

	uint8_t reg_check;
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_check);
 800100a:	f107 0316 	add.w	r3, r7, #22
 800100e:	461a      	mov	r2, r3
 8001010:	2101      	movs	r1, #1
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 fae6 	bl	80015e4 <LTC2990_Read_Register>
 8001018:	4603      	mov	r3, r0
 800101a:	75fb      	strb	r3, [r7, #23]
	while(reg_check != 0x1F) {
 800101c:	e010      	b.n	8001040 <LTC2990_Init+0x7c>
		CDC_Transmit_Print("NOT SETTING CONTROL REGISTER CORRECTLY\n");
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <LTC2990_Init+0xa0>)
 8001020:	f000 fb3a 	bl	8001698 <CDC_Transmit_Print>
		CDC_Transmit_Print("GOT %X\n", reg_check);
 8001024:	7dbb      	ldrb	r3, [r7, #22]
 8001026:	4619      	mov	r1, r3
 8001028:	480f      	ldr	r0, [pc, #60]	@ (8001068 <LTC2990_Init+0xa4>)
 800102a:	f000 fb35 	bl	8001698 <CDC_Transmit_Print>
		ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_check);
 800102e:	f107 0316 	add.w	r3, r7, #22
 8001032:	461a      	mov	r2, r3
 8001034:	2101      	movs	r1, #1
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 fad4 	bl	80015e4 <LTC2990_Read_Register>
 800103c:	4603      	mov	r3, r0
 800103e:	75fb      	strb	r3, [r7, #23]
	while(reg_check != 0x1F) {
 8001040:	7dbb      	ldrb	r3, [r7, #22]
 8001042:	2b1f      	cmp	r3, #31
 8001044:	d1eb      	bne.n	800101e <LTC2990_Init+0x5a>
	}

	CDC_Transmit_Print("LTC2990 configured for Differential Voltage Monitoring. \n");
 8001046:	4809      	ldr	r0, [pc, #36]	@ (800106c <LTC2990_Init+0xa8>)
 8001048:	f000 fb26 	bl	8001698 <CDC_Transmit_Print>

	//Initial data reading
	LTC2990_Step(handle);
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f80f 	bl	8001070 <LTC2990_Step>

	return 0;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	7fc00000 	.word	0x7fc00000
 8001060:	08012068 	.word	0x08012068
 8001064:	08012098 	.word	0x08012098
 8001068:	080120c0 	.word	0x080120c0
 800106c:	080120c8 	.word	0x080120c8

08001070 <LTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void LTC2990_Step(LTC2990_Handle_t *handle) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	int8_t data_valid;


	// Read differential voltage V1-V2

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, 0x5F);
 8001078:	225f      	movs	r2, #95	@ 0x5f
 800107a:	211f      	movs	r1, #31
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f935 	bl	80012ec <LTC2990_Set_Mode>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]

	if(ack != 0) {
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <LTC2990_Step+0x28>
		CDC_Transmit_Print("Failed to switch mode \n");
 800108e:	487e      	ldr	r0, [pc, #504]	@ (8001288 <LTC2990_Step+0x218>)
 8001090:	f000 fb02 	bl	8001698 <CDC_Transmit_Print>
		while(1);
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <LTC2990_Step+0x24>
	}

	HAL_Delay(50);
 8001098:	2032      	movs	r0, #50	@ 0x32
 800109a:	f001 f9bd 	bl	8002418 <HAL_Delay>

	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f968 	bl	8001374 <LTC2990_Trigger_Conversion>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
	if(ack != 0) {
 80010a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <LTC2990_Step+0x48>
		CDC_Transmit_Print("Failed to trigger conversion.");
 80010b0:	4876      	ldr	r0, [pc, #472]	@ (800128c <LTC2990_Step+0x21c>)
 80010b2:	f000 faf1 	bl	8001698 <CDC_Transmit_Print>
		return;
 80010b6:	e0e0      	b.n	800127a <LTC2990_Step+0x20a>
	}

	// Allow time for conversion
	HAL_Delay(100);
 80010b8:	2064      	movs	r0, #100	@ 0x64
 80010ba:	f001 f9ad 	bl	8002418 <HAL_Delay>


	ack = LTC2990_ADC_Read_New_Data(handle, V1_MSB_REG, &adc_code, &data_valid);
 80010be:	f107 030b 	add.w	r3, r7, #11
 80010c2:	f107 020c 	add.w	r2, r7, #12
 80010c6:	2106      	movs	r1, #6
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f961 	bl	8001390 <LTC2990_ADC_Read_New_Data>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <LTC2990_Step+0x72>
 80010da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d019      	beq.n	8001116 <LTC2990_Step+0xa6>
		CDC_Transmit_Print("Error reading Register %x \n", V1_MSB_REG);
 80010e2:	2106      	movs	r1, #6
 80010e4:	486a      	ldr	r0, [pc, #424]	@ (8001290 <LTC2990_Step+0x220>)
 80010e6:	f000 fad7 	bl	8001698 <CDC_Transmit_Print>
		HAL_Delay(50);
 80010ea:	2032      	movs	r0, #50	@ 0x32
 80010ec:	f001 f994 	bl	8002418 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4867      	ldr	r0, [pc, #412]	@ (8001294 <LTC2990_Step+0x224>)
 80010f8:	f000 face 	bl	8001698 <CDC_Transmit_Print>
		HAL_Delay(50);
 80010fc:	2032      	movs	r0, #50	@ 0x32
 80010fe:	f001 f98b 	bl	8002418 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8001102:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001106:	4619      	mov	r1, r3
 8001108:	4863      	ldr	r0, [pc, #396]	@ (8001298 <LTC2990_Step+0x228>)
 800110a:	f000 fac5 	bl	8001698 <CDC_Transmit_Print>
		handle->voltages[0] = NAN;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a62      	ldr	r2, [pc, #392]	@ (800129c <LTC2990_Step+0x22c>)
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	e017      	b.n	8001146 <LTC2990_Step+0xd6>
	} else {
		handle->voltages[0] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code) * (28.0/10.0);
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fa22 	bl	8001564 <LTC2990_Code_To_Single_Ended_Voltage>
 8001120:	ee10 3a10 	vmov	r3, s0
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa37 	bl	8000598 <__aeabi_f2d>
 800112a:	a355      	add	r3, pc, #340	@ (adr r3, 8001280 <LTC2990_Step+0x210>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fa8a 	bl	8000648 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fd5c 	bl	8000bf8 <__aeabi_d2f>
 8001140:	4602      	mov	r2, r0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	609a      	str	r2, [r3, #8]
	}

	ack = LTC2990_ADC_Read_New_Data(handle, V2_MSB_REG, &adc_code, &data_valid);
 8001146:	f107 030b 	add.w	r3, r7, #11
 800114a:	f107 020c 	add.w	r2, r7, #12
 800114e:	2108      	movs	r1, #8
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f91d 	bl	8001390 <LTC2990_ADC_Read_New_Data>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d103      	bne.n	800116a <LTC2990_Step+0xfa>
 8001162:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d019      	beq.n	800119e <LTC2990_Step+0x12e>
		CDC_Transmit_Print("Error reading Register %x \n", V2_MSB_REG);
 800116a:	2108      	movs	r1, #8
 800116c:	4848      	ldr	r0, [pc, #288]	@ (8001290 <LTC2990_Step+0x220>)
 800116e:	f000 fa93 	bl	8001698 <CDC_Transmit_Print>
		HAL_Delay(50);
 8001172:	2032      	movs	r0, #50	@ 0x32
 8001174:	f001 f950 	bl	8002418 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	4619      	mov	r1, r3
 800117e:	4845      	ldr	r0, [pc, #276]	@ (8001294 <LTC2990_Step+0x224>)
 8001180:	f000 fa8a 	bl	8001698 <CDC_Transmit_Print>
		HAL_Delay(50);
 8001184:	2032      	movs	r0, #50	@ 0x32
 8001186:	f001 f947 	bl	8002418 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 800118a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800118e:	4619      	mov	r1, r3
 8001190:	4841      	ldr	r0, [pc, #260]	@ (8001298 <LTC2990_Step+0x228>)
 8001192:	f000 fa81 	bl	8001698 <CDC_Transmit_Print>
		handle->voltages[0] = NAN;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a40      	ldr	r2, [pc, #256]	@ (800129c <LTC2990_Step+0x22c>)
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	e017      	b.n	80011ce <LTC2990_Step+0x15e>
	} else {
		handle->voltages[1] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code) * (40.0/10.0);
 800119e:	89bb      	ldrh	r3, [r7, #12]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f9de 	bl	8001564 <LTC2990_Code_To_Single_Ended_Voltage>
 80011a8:	ee10 3a10 	vmov	r3, s0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9f3 	bl	8000598 <__aeabi_f2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b3a      	ldr	r3, [pc, #232]	@ (80012a0 <LTC2990_Step+0x230>)
 80011b8:	f7ff fa46 	bl	8000648 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fd18 	bl	8000bf8 <__aeabi_d2f>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60da      	str	r2, [r3, #12]
	}

	ack = LTC2990_Set_Mode(handle, V1DV2_V3DV4, CLEAR_ALL); // was V1DV2_V3DV4 //
 80011ce:	22ff      	movs	r2, #255	@ 0xff
 80011d0:	215e      	movs	r1, #94	@ 0x5e
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f88a 	bl	80012ec <LTC2990_Set_Mode>
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]

	if(ack != 0) {
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <LTC2990_Step+0x17e>
		CDC_Transmit_Print("Failed to switch mode \n");
 80011e4:	4828      	ldr	r0, [pc, #160]	@ (8001288 <LTC2990_Step+0x218>)
 80011e6:	f000 fa57 	bl	8001698 <CDC_Transmit_Print>
		while(1);
 80011ea:	bf00      	nop
 80011ec:	e7fd      	b.n	80011ea <LTC2990_Step+0x17a>
	}

	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f8c0 	bl	8001374 <LTC2990_Trigger_Conversion>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
	if(ack != 0) {
 80011f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <LTC2990_Step+0x198>
		CDC_Transmit_Print("Failed to trigger conversion.");
 8001200:	4822      	ldr	r0, [pc, #136]	@ (800128c <LTC2990_Step+0x21c>)
 8001202:	f000 fa49 	bl	8001698 <CDC_Transmit_Print>
		return;
 8001206:	e038      	b.n	800127a <LTC2990_Step+0x20a>
	}

	// Allow time for conversion
	HAL_Delay(100);
 8001208:	2064      	movs	r0, #100	@ 0x64
 800120a:	f001 f905 	bl	8002418 <HAL_Delay>

	ack = LTC2990_ADC_Read_New_Data(handle, V3DV4_MSB_REG, &adc_code, &data_valid);
 800120e:	f107 030b 	add.w	r3, r7, #11
 8001212:	f107 020c 	add.w	r2, r7, #12
 8001216:	210a      	movs	r1, #10
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f8b9 	bl	8001390 <LTC2990_ADC_Read_New_Data>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <LTC2990_Step+0x1c2>
 800122a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d019      	beq.n	8001266 <LTC2990_Step+0x1f6>
		CDC_Transmit_Print("Error reading Register %x \n", V3DV4_MSB_REG);
 8001232:	210a      	movs	r1, #10
 8001234:	4816      	ldr	r0, [pc, #88]	@ (8001290 <LTC2990_Step+0x220>)
 8001236:	f000 fa2f 	bl	8001698 <CDC_Transmit_Print>
		HAL_Delay(50);
 800123a:	2032      	movs	r0, #50	@ 0x32
 800123c:	f001 f8ec 	bl	8002418 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 8001240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001244:	4619      	mov	r1, r3
 8001246:	4813      	ldr	r0, [pc, #76]	@ (8001294 <LTC2990_Step+0x224>)
 8001248:	f000 fa26 	bl	8001698 <CDC_Transmit_Print>
		HAL_Delay(50);
 800124c:	2032      	movs	r0, #50	@ 0x32
 800124e:	f001 f8e3 	bl	8002418 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8001252:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001256:	4619      	mov	r1, r3
 8001258:	480f      	ldr	r0, [pc, #60]	@ (8001298 <LTC2990_Step+0x228>)
 800125a:	f000 fa1d 	bl	8001698 <CDC_Transmit_Print>
		handle->current = NAN;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <LTC2990_Step+0x22c>)
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	e009      	b.n	800127a <LTC2990_Step+0x20a>
	} else {
		handle->current = LTC2990_Code_To_Current(handle, adc_code);
 8001266:	89bb      	ldrh	r3, [r7, #12]
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f914 	bl	8001498 <LTC2990_Code_To_Current>
 8001270:	eef0 7a40 	vmov.f32	s15, s0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edc3 7a04 	vstr	s15, [r3, #16]
	}

}
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	66666666 	.word	0x66666666
 8001284:	40066666 	.word	0x40066666
 8001288:	08012104 	.word	0x08012104
 800128c:	0801211c 	.word	0x0801211c
 8001290:	0801213c 	.word	0x0801213c
 8001294:	08012158 	.word	0x08012158
 8001298:	08012170 	.word	0x08012170
 800129c:	7fc00000 	.word	0x7fc00000
 80012a0:	40100000 	.word	0x40100000

080012a4 <LTC2990_Get_Current>:
/**
  * @brief  Puts the latest voltage readings in the array passed
  * @param  Pointer to the LTC2990 handle
  * @param 	Pointer to the array to store voltage values to
  */
float LTC2990_Get_Current(LTC2990_Handle_t* handle) {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	return handle->current;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	ee07 3a90 	vmov	s15, r3
}
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LTC2990_Get_Single_Ended_Voltage>:


void LTC2990_Get_Single_Ended_Voltage(LTC2990_Handle_t* handle, float* volts) {
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
	volts[0] = handle->voltages[0];
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	601a      	str	r2, [r3, #0]
	volts[1] = handle->voltages[1];
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	3304      	adds	r3, #4
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	68d2      	ldr	r2, [r2, #12]
 80012dc:	601a      	str	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <LTC2990_Set_Mode>:

int8_t LTC2990_Set_Mode(LTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
 80012f8:	4613      	mov	r3, r2
 80012fa:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 80012fc:	f107 030e 	add.w	r3, r7, #14
 8001300:	461a      	mov	r2, r3
 8001302:	2101      	movs	r1, #1
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f96d 	bl	80015e4 <LTC2990_Read_Register>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <LTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 8001316:	4815      	ldr	r0, [pc, #84]	@ (800136c <LTC2990_Set_Mode+0x80>)
 8001318:	f000 f9be 	bl	8001698 <CDC_Transmit_Print>
		return ack;
 800131c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001320:	e01f      	b.n	8001362 <LTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 8001322:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001326:	43db      	mvns	r3, r3
 8001328:	b25a      	sxtb	r2, r3
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	4013      	ands	r3, r2
 8001330:	b25b      	sxtb	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 8001336:	7bba      	ldrb	r2, [r7, #14]
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	4313      	orrs	r3, r2
 800133c:	b2db      	uxtb	r3, r3
 800133e:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = LTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	461a      	mov	r2, r3
 8001344:	2101      	movs	r1, #1
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f978 	bl	800163c <LTC2990_Write_Register>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 8001350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <LTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <LTC2990_Set_Mode+0x84>)
 800135a:	f000 f99d 	bl	8001698 <CDC_Transmit_Print>
	}
	return ack;
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	08012190 	.word	0x08012190
 8001370:	080121b8 	.word	0x080121b8

08001374 <LTC2990_Trigger_Conversion>:

int8_t LTC2990_Trigger_Conversion(LTC2990_Handle_t *handle) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	return LTC2990_Write_Register(handle, TRIGGER_REG, 0x01);
 800137c:	2201      	movs	r2, #1
 800137e:	2102      	movs	r1, #2
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f95b 	bl	800163c <LTC2990_Write_Register>
 8001386:	4603      	mov	r3, r0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <LTC2990_ADC_Read_New_Data>:


uint8_t LTC2990_ADC_Read_New_Data(LTC2990_Handle_t *handle, uint8_t msb_register_address, uint16_t* adc_code, int8_t* data_valid) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	460b      	mov	r3, r1
 800139e:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 80013a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a4:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 80013a6:	7afb      	ldrb	r3, [r7, #11]
 80013a8:	085b      	lsrs	r3, r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	3b01      	subs	r3, #1
 80013ae:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 80013b0:	e01a      	b.n	80013e8 <LTC2990_ADC_Read_New_Data+0x58>
		ack = LTC2990_Read_Register(handle, STATUS_REG, &status);
 80013b2:	f107 0319 	add.w	r3, r7, #25
 80013b6:	461a      	mov	r2, r3
 80013b8:	2100      	movs	r1, #0
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f912 	bl	80015e4 <LTC2990_Read_Register>
 80013c0:	4603      	mov	r3, r0
 80013c2:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 80013c4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <LTC2990_ADC_Read_New_Data+0x40>
			return ack;
 80013cc:	7f3b      	ldrb	r3, [r7, #28]
 80013ce:	e05b      	b.n	8001488 <LTC2990_ADC_Read_New_Data+0xf8>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 80013d0:	7e7b      	ldrb	r3, [r7, #25]
 80013d2:	461a      	mov	r2, r3
 80013d4:	7f7b      	ldrb	r3, [r7, #29]
 80013d6:	fa42 f303 	asr.w	r3, r2, r3
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <LTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f001 f818 	bl	8002418 <HAL_Delay>
	while (--timeout) {
 80013e8:	8bfb      	ldrh	r3, [r7, #30]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	83fb      	strh	r3, [r7, #30]
 80013ee:	8bfb      	ldrh	r3, [r7, #30]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1de      	bne.n	80013b2 <LTC2990_ADC_Read_New_Data+0x22>
 80013f4:	e000      	b.n	80013f8 <LTC2990_ADC_Read_New_Data+0x68>
			break;
 80013f6:	bf00      	nop
	}


	if (timeout == 0) {
 80013f8:	8bfb      	ldrh	r3, [r7, #30]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d104      	bne.n	8001408 <LTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 80013fe:	4824      	ldr	r0, [pc, #144]	@ (8001490 <LTC2990_ADC_Read_New_Data+0x100>)
 8001400:	f000 f94a 	bl	8001698 <CDC_Transmit_Print>
		return 1;
 8001404:	2301      	movs	r3, #1
 8001406:	e03f      	b.n	8001488 <LTC2990_ADC_Read_New_Data+0xf8>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = LTC2990_Read_Register(handle, msb_register_address, &msb);
 8001408:	f107 0218 	add.w	r2, r7, #24
 800140c:	7afb      	ldrb	r3, [r7, #11]
 800140e:	4619      	mov	r1, r3
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 f8e7 	bl	80015e4 <LTC2990_Read_Register>
 8001416:	4603      	mov	r3, r0
 8001418:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 800141a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <LTC2990_ADC_Read_New_Data+0x96>
		return ack;
 8001422:	7f3b      	ldrb	r3, [r7, #28]
 8001424:	e030      	b.n	8001488 <LTC2990_ADC_Read_New_Data+0xf8>
	}

	ack = LTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	3301      	adds	r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f107 0217 	add.w	r2, r7, #23
 8001430:	4619      	mov	r1, r3
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f000 f8d6 	bl	80015e4 <LTC2990_Read_Register>
 8001438:	4603      	mov	r3, r0
 800143a:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 800143c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <LTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 8001444:	7f3b      	ldrb	r3, [r7, #28]
 8001446:	e01f      	b.n	8001488 <LTC2990_ADC_Read_New_Data+0xf8>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 8001448:	7e3b      	ldrb	r3, [r7, #24]
 800144a:	b21b      	sxth	r3, r3
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 800145a:	8b7b      	ldrh	r3, [r7, #26]
 800145c:	0bdb      	lsrs	r3, r3, #15
 800145e:	b29b      	uxth	r3, r3
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	b25a      	sxtb	r2, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x7FFF;
 800146c:	8b7b      	ldrh	r3, [r7, #26]
 800146e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001472:	b29a      	uxth	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	801a      	strh	r2, [r3, #0]


	return (*data_valid == 1) ? 0 : 1;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f993 3000 	ldrsb.w	r3, [r3]
 800147e:	2b01      	cmp	r3, #1
 8001480:	bf14      	ite	ne
 8001482:	2301      	movne	r3, #1
 8001484:	2300      	moveq	r3, #0
 8001486:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
 8001488:	4618      	mov	r0, r3
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	080121e0 	.word	0x080121e0
 8001494:	00000000 	.word	0x00000000

08001498 <LTC2990_Code_To_Current>:

float LTC2990_Code_To_Current(LTC2990_Handle_t *handle, uint16_t adc_code) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	81fb      	strh	r3, [r7, #14]


	if(adc_code & 0x4000) { //If the code is negative //was 0x4000
 80014a8:	887b      	ldrh	r3, [r7, #2]
 80014aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00d      	beq.n	80014ce <LTC2990_Code_To_Current+0x36>
		CDC_Transmit_Print("Negative??? \r\n");
 80014b2:	482b      	ldr	r0, [pc, #172]	@ (8001560 <LTC2990_Code_To_Current+0xc8>)
 80014b4:	f000 f8f0 	bl	8001698 <CDC_Transmit_Print>
		adc_code = (adc_code ^ 0x3FFF) + 1;// Two's compliment //was 0x7FFF
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	f483 537f 	eor.w	r3, r3, #16320	@ 0x3fc0
 80014be:	f083 033f 	eor.w	r3, r3, #63	@ 0x3f
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	807b      	strh	r3, [r7, #2]
		sign = -1;
 80014c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014cc:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014d4:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * CSINGLE_ENDED_LSB;
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e0:	ee17 0a90 	vmov	r0, s15
 80014e4:	f7ff f858 	bl	8000598 <__aeabi_f2d>
 80014e8:	a319      	add	r3, pc, #100	@ (adr r3, 8001550 <LTC2990_Code_To_Current+0xb8>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff f8ab 	bl	8000648 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff fb7d 	bl	8000bf8 <__aeabi_d2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	60bb      	str	r3, [r7, #8]
	voltage /= RSENSE;
 8001502:	68b8      	ldr	r0, [r7, #8]
 8001504:	f7ff f848 	bl	8000598 <__aeabi_f2d>
 8001508:	a313      	add	r3, pc, #76	@ (adr r3, 8001558 <LTC2990_Code_To_Current+0xc0>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f9c5 	bl	800089c <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fb6d 	bl	8000bf8 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	60bb      	str	r3, [r7, #8]
	voltage *= sign;
 8001522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001536:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	ee07 3a90 	vmov	s15, r3
}
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w
 8001550:	ac083127 	.word	0xac083127
 8001554:	3ef45a1c 	.word	0x3ef45a1c
 8001558:	47ae147b 	.word	0x47ae147b
 800155c:	3f947ae1 	.word	0x3f947ae1
 8001560:	080121f4 	.word	0x080121f4

08001564 <LTC2990_Code_To_Single_Ended_Voltage>:
	voltage *= sign;

	return voltage;
}

float LTC2990_Code_To_Single_Ended_Voltage(LTC2990_Handle_t *handle, uint16_t adc_code) {
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	81fb      	strh	r3, [r7, #14]


	if(adc_code & 0x4000) { //If the code is negative //was 0x4000
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00a      	beq.n	8001594 <LTC2990_Code_To_Single_Ended_Voltage+0x30>
		adc_code = (adc_code ^ 0x3FFF) + 1;// Two's compliment //was 0x7FFF
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	f483 537f 	eor.w	r3, r3, #16320	@ 0x3fc0
 8001584:	f083 033f 	eor.w	r3, r3, #63	@ 0x3f
 8001588:	b29b      	uxth	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	807b      	strh	r3, [r7, #2]
		sign = -1;
 800158e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001592:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800159a:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * VSINGLE_ENDED_LSB;
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80015e0 <LTC2990_Code_To_Single_Ended_Voltage+0x7c>
 80015aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ae:	edc7 7a02 	vstr	s15, [r7, #8]
	voltage *= sign;
 80015b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015be:	ed97 7a02 	vldr	s14, [r7, #8]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	edc7 7a02 	vstr	s15, [r7, #8]


	return voltage;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	ee07 3a90 	vmov	s15, r3
}
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	39a00000 	.word	0x39a00000

080015e4 <LTC2990_Read_Register>:


int8_t LTC2990_Read_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	460b      	mov	r3, r1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	791b      	ldrb	r3, [r3, #4]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	b299      	uxth	r1, r3
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	b29a      	uxth	r2, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	2301      	movs	r3, #1
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	f002 fd2b 	bl	800406c <HAL_I2C_Mem_Read>
 8001616:	4603      	mov	r3, r0
 8001618:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK) {
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <LTC2990_Read_Register+0x40>
		return 0;
 8001620:	2300      	movs	r3, #0
 8001622:	e005      	b.n	8001630 <LTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	4619      	mov	r1, r3
 8001628:	4803      	ldr	r0, [pc, #12]	@ (8001638 <LTC2990_Read_Register+0x54>)
 800162a:	f000 f835 	bl	8001698 <CDC_Transmit_Print>
	return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	08012204 	.word	0x08012204

0800163c <LTC2990_Write_Register>:

int8_t LTC2990_Write_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af04      	add	r7, sp, #16
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
 8001648:	4613      	mov	r3, r2
 800164a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	791b      	ldrb	r3, [r3, #4]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b299      	uxth	r1, r3
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	b29a      	uxth	r2, r3
 800165c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001660:	9302      	str	r3, [sp, #8]
 8001662:	2301      	movs	r3, #1
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	1cbb      	adds	r3, r7, #2
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2301      	movs	r3, #1
 800166c:	f002 fbea 	bl	8003e44 <HAL_I2C_Mem_Write>
 8001670:	4603      	mov	r3, r0
 8001672:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK) {
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <LTC2990_Write_Register+0x42>
		return 0;
 800167a:	2300      	movs	r3, #0
 800167c:	e005      	b.n	800168a <LTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	4619      	mov	r1, r3
 8001682:	4804      	ldr	r0, [pc, #16]	@ (8001694 <LTC2990_Write_Register+0x58>)
 8001684:	f000 f808 	bl	8001698 <CDC_Transmit_Print>

	return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	0801222c 	.word	0x0801222c

08001698 <CDC_Transmit_Print>:
/* USER CODE BEGIN 0 */

#define PRINT_BUFFER_SIZE     256

void CDC_Transmit_Print(const char *format, ...)
{
 8001698:	b40f      	push	{r0, r1, r2, r3}
 800169a:	b580      	push	{r7, lr}
 800169c:	b0c2      	sub	sp, #264	@ 0x108
 800169e:	af00      	add	r7, sp, #0
  char buf[PRINT_BUFFER_SIZE];
  va_list args;
  va_start(args, format);
 80016a0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80016a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80016a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80016ac:	601a      	str	r2, [r3, #0]
  int n = vsprintf(buf, format, args);
 80016ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80016b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80016b6:	1d38      	adds	r0, r7, #4
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80016be:	f00e fb8f 	bl	800fde0 <vsiprintf>
 80016c2:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  va_end(args);
  CDC_Transmit_FS(buf, n);
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00d f9c9 	bl	800ea64 <CDC_Transmit_FS>
}
 80016d2:	bf00      	nop
 80016d4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80016d8:	46bd      	mov	sp, r7
 80016da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016de:	b004      	add	sp, #16
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_GPIO_EXTI_Callback>:
uint32_t adc_data;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == EMER_VALVE_IN_Pin) {
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10d      	bne.n	8001710 <HAL_GPIO_EXTI_Callback+0x2c>
		GPIO_PinState in = HAL_GPIO_ReadPin(EMER_VALVE_IN_GPIO_Port, EMER_VALVE_IN_Pin);
 80016f4:	2101      	movs	r1, #1
 80016f6:	4812      	ldr	r0, [pc, #72]	@ (8001740 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016f8:	f002 faa6 	bl	8003c48 <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(Emergency_Valve_OUT_GPIO_Port, Emergency_Valve_OUT_Pin, in);
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	461a      	mov	r2, r3
 8001704:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001708:	480d      	ldr	r0, [pc, #52]	@ (8001740 <HAL_GPIO_EXTI_Callback+0x5c>)
 800170a:	f002 fab5 	bl	8003c78 <HAL_GPIO_WritePin>
 800170e:	e014      	b.n	800173a <HAL_GPIO_EXTI_Callback+0x56>
	} else if (GPIO_Pin == FC_FAULT_Pin) {
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	2b04      	cmp	r3, #4
 8001714:	d106      	bne.n	8001724 <HAL_GPIO_EXTI_Callback+0x40>
		HAL_GPIO_WritePin(Emergency_Valve_OUT_GPIO_Port, Emergency_Valve_OUT_Pin, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800171c:	4808      	ldr	r0, [pc, #32]	@ (8001740 <HAL_GPIO_EXTI_Callback+0x5c>)
 800171e:	f002 faab 	bl	8003c78 <HAL_GPIO_WritePin>
 8001722:	e00a      	b.n	800173a <HAL_GPIO_EXTI_Callback+0x56>
	} else if (GPIO_Pin == SOLENOID_IN_Pin) {
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d106      	bne.n	8001738 <HAL_GPIO_EXTI_Callback+0x54>
		HAL_GPIO_WritePin(Solenoid_OUT_GPIO_Port, Solenoid_OUT_Pin, GPIO_PIN_SET);
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001730:	4803      	ldr	r0, [pc, #12]	@ (8001740 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001732:	f002 faa1 	bl	8003c78 <HAL_GPIO_WritePin>
 8001736:	e000      	b.n	800173a <HAL_GPIO_EXTI_Callback+0x56>
	} else {
		return;
 8001738:	bf00      	nop
	}
}
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	48000400 	.word	0x48000400

08001744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001748:	f000 fe2f 	bl	80023aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174c:	f000 f840 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001750:	f000 f9c2 	bl	8001ad8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001754:	f000 f87e 	bl	8001854 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8001758:	f000 f8ee 	bl	8001938 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 800175c:	f000 f932 	bl	80019c4 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001760:	f000 f970 	bl	8001a44 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_FDCAN_Start(&hfdcan2);
 8001764:	4810      	ldr	r0, [pc, #64]	@ (80017a8 <main+0x64>)
 8001766:	f002 f863 	bl	8003830 <HAL_FDCAN_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800176a:	f00a fb0d 	bl	800bd88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED */
  blinkLEDHandle = osThreadNew(startBlinkLED, NULL, &blinkLED_attributes);
 800176e:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <main+0x68>)
 8001770:	2100      	movs	r1, #0
 8001772:	480f      	ldr	r0, [pc, #60]	@ (80017b0 <main+0x6c>)
 8001774:	f00a fb52 	bl	800be1c <osThreadNew>
 8001778:	4603      	mov	r3, r0
 800177a:	4a0e      	ldr	r2, [pc, #56]	@ (80017b4 <main+0x70>)
 800177c:	6013      	str	r3, [r2, #0]

  /* creation of readInstrumenta */
  readInstrumentaHandle = osThreadNew(startReadInstrumentation, NULL, &readInstrumenta_attributes);
 800177e:	4a0e      	ldr	r2, [pc, #56]	@ (80017b8 <main+0x74>)
 8001780:	2100      	movs	r1, #0
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <main+0x78>)
 8001784:	f00a fb4a 	bl	800be1c <osThreadNew>
 8001788:	4603      	mov	r3, r0
 800178a:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <main+0x7c>)
 800178c:	6013      	str	r3, [r2, #0]

  /* creation of printInstrument */
  printInstrumentHandle = osThreadNew(startPrintInstrumentation, NULL, &printInstrument_attributes);
 800178e:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <main+0x80>)
 8001790:	2100      	movs	r1, #0
 8001792:	480d      	ldr	r0, [pc, #52]	@ (80017c8 <main+0x84>)
 8001794:	f00a fb42 	bl	800be1c <osThreadNew>
 8001798:	4603      	mov	r3, r0
 800179a:	4a0c      	ldr	r2, [pc, #48]	@ (80017cc <main+0x88>)
 800179c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800179e:	f00a fb17 	bl	800bdd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017a2:	bf00      	nop
 80017a4:	e7fd      	b.n	80017a2 <main+0x5e>
 80017a6:	bf00      	nop
 80017a8:	200003d8 	.word	0x200003d8
 80017ac:	0801231c 	.word	0x0801231c
 80017b0:	08001c35 	.word	0x08001c35
 80017b4:	20000524 	.word	0x20000524
 80017b8:	08012340 	.word	0x08012340
 80017bc:	08001c59 	.word	0x08001c59
 80017c0:	20000528 	.word	0x20000528
 80017c4:	08012364 	.word	0x08012364
 80017c8:	08001c85 	.word	0x08001c85
 80017cc:	2000052c 	.word	0x2000052c

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	@ 0x50
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0318 	add.w	r3, r7, #24
 80017da:	2238      	movs	r2, #56	@ 0x38
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f00e fb08 	bl	800fdf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017f6:	f004 fdad 	bl	8006354 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80017fa:	2322      	movs	r3, #34	@ 0x22
 80017fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001804:	2340      	movs	r3, #64	@ 0x40
 8001806:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fe51 	bl	80064bc <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001820:	f000 fa80 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001824:	230f      	movs	r3, #15
 8001826:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001828:	2301      	movs	r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f005 f94f 	bl	8006ae0 <HAL_RCC_ClockConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001848:	f000 fa6c 	bl	8001d24 <Error_Handler>
  }
}
 800184c:	bf00      	nop
 800184e:	3750      	adds	r7, #80	@ 0x50
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800185a:	463b      	mov	r3, r7
 800185c:	2220      	movs	r2, #32
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f00e fac7 	bl	800fdf4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001866:	4b31      	ldr	r3, [pc, #196]	@ (800192c <MX_ADC3_Init+0xd8>)
 8001868:	4a31      	ldr	r2, [pc, #196]	@ (8001930 <MX_ADC3_Init+0xdc>)
 800186a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800186c:	4b2f      	ldr	r3, [pc, #188]	@ (800192c <MX_ADC3_Init+0xd8>)
 800186e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001872:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001874:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <MX_ADC3_Init+0xd8>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800187a:	4b2c      	ldr	r3, [pc, #176]	@ (800192c <MX_ADC3_Init+0xd8>)
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001880:	4b2a      	ldr	r3, [pc, #168]	@ (800192c <MX_ADC3_Init+0xd8>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001886:	4b29      	ldr	r3, [pc, #164]	@ (800192c <MX_ADC3_Init+0xd8>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800188c:	4b27      	ldr	r3, [pc, #156]	@ (800192c <MX_ADC3_Init+0xd8>)
 800188e:	2204      	movs	r2, #4
 8001890:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001892:	4b26      	ldr	r3, [pc, #152]	@ (800192c <MX_ADC3_Init+0xd8>)
 8001894:	2200      	movs	r2, #0
 8001896:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001898:	4b24      	ldr	r3, [pc, #144]	@ (800192c <MX_ADC3_Init+0xd8>)
 800189a:	2200      	movs	r2, #0
 800189c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800189e:	4b23      	ldr	r3, [pc, #140]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018a4:	4b21      	ldr	r3, [pc, #132]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 80018c6:	4b19      	ldr	r3, [pc, #100]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80018ce:	4b17      	ldr	r3, [pc, #92]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018d0:	220c      	movs	r2, #12
 80018d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80018da:	4b14      	ldr	r3, [pc, #80]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018e6:	4811      	ldr	r0, [pc, #68]	@ (800192c <MX_ADC3_Init+0xd8>)
 80018e8:	f000 ff8e 	bl	8002808 <HAL_ADC_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_ADC3_Init+0xa2>
  {
    Error_Handler();
 80018f2:	f000 fa17 	bl	8001d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <MX_ADC3_Init+0xe0>)
 80018f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018fa:	2306      	movs	r3, #6
 80018fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001902:	237f      	movs	r3, #127	@ 0x7f
 8001904:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001906:	2304      	movs	r3, #4
 8001908:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800190e:	463b      	mov	r3, r7
 8001910:	4619      	mov	r1, r3
 8001912:	4806      	ldr	r0, [pc, #24]	@ (800192c <MX_ADC3_Init+0xd8>)
 8001914:	f001 f926 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800191e:	f000 fa01 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000036c 	.word	0x2000036c
 8001930:	50000400 	.word	0x50000400
 8001934:	14f00020 	.word	0x14f00020

08001938 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 800193e:	4a20      	ldr	r2, [pc, #128]	@ (80019c0 <MX_FDCAN2_Init+0x88>)
 8001940:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800194e:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 8001956:	2200      	movs	r2, #0
 8001958:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 800195c:	2200      	movs	r2, #0
 800195e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001960:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 8001962:	2200      	movs	r2, #0
 8001964:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 8001968:	2210      	movs	r2, #16
 800196a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 800196e:	2201      	movs	r2, #1
 8001970:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 8001974:	2201      	movs	r2, #1
 8001976:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8001978:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 800197a:	2201      	movs	r2, #1
 800197c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800197e:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 8001980:	2201      	movs	r2, #1
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001984:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 8001986:	2201      	movs	r2, #1
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800198a:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 800198c:	2201      	movs	r2, #1
 800198e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001990:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 8001992:	2201      	movs	r2, #1
 8001994:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 8001998:	2200      	movs	r2, #0
 800199a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800199c:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 800199e:	2200      	movs	r2, #0
 80019a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	@ (80019bc <MX_FDCAN2_Init+0x84>)
 80019aa:	f001 fde7 	bl	800357c <HAL_FDCAN_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80019b4:	f000 f9b6 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200003d8 	.word	0x200003d8
 80019c0:	40006800 	.word	0x40006800

080019c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <MX_I2C2_Init+0x74>)
 80019ca:	4a1c      	ldr	r2, [pc, #112]	@ (8001a3c <MX_I2C2_Init+0x78>)
 80019cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <MX_I2C2_Init+0x74>)
 80019d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a40 <MX_I2C2_Init+0x7c>)
 80019d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019d4:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <MX_I2C2_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019da:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <MX_I2C2_Init+0x74>)
 80019dc:	2201      	movs	r2, #1
 80019de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e0:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <MX_I2C2_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019e6:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <MX_I2C2_Init+0x74>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <MX_I2C2_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f2:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <MX_I2C2_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <MX_I2C2_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019fe:	480e      	ldr	r0, [pc, #56]	@ (8001a38 <MX_I2C2_Init+0x74>)
 8001a00:	f002 f984 	bl	8003d0c <HAL_I2C_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a0a:	f000 f98b 	bl	8001d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4809      	ldr	r0, [pc, #36]	@ (8001a38 <MX_I2C2_Init+0x74>)
 8001a12:	f002 ff07 	bl	8004824 <HAL_I2CEx_ConfigAnalogFilter>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a1c:	f000 f982 	bl	8001d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a20:	2100      	movs	r1, #0
 8001a22:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <MX_I2C2_Init+0x74>)
 8001a24:	f002 ff49 	bl	80048ba <HAL_I2CEx_ConfigDigitalFilter>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a2e:	f000 f979 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000043c 	.word	0x2000043c
 8001a3c:	40005800 	.word	0x40005800
 8001a40:	00503d58 	.word	0x00503d58

08001a44 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a48:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a4a:	4a21      	ldr	r2, [pc, #132]	@ (8001ad0 <MX_LPUART1_UART_Init+0x8c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a50:	4a20      	ldr	r2, [pc, #128]	@ (8001ad4 <MX_LPUART1_UART_Init+0x90>)
 8001a52:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a66:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a68:	220c      	movs	r2, #12
 8001a6a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a72:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a78:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a84:	4811      	ldr	r0, [pc, #68]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a86:	f005 ffef 	bl	8007a68 <HAL_UART_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001a90:	f000 f948 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a94:	2100      	movs	r1, #0
 8001a96:	480d      	ldr	r0, [pc, #52]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001a98:	f006 fd8a 	bl	80085b0 <HAL_UARTEx_SetTxFifoThreshold>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001aa2:	f000 f93f 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4808      	ldr	r0, [pc, #32]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001aaa:	f006 fdbf 	bl	800862c <HAL_UARTEx_SetRxFifoThreshold>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001ab4:	f000 f936 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ab8:	4804      	ldr	r0, [pc, #16]	@ (8001acc <MX_LPUART1_UART_Init+0x88>)
 8001aba:	f006 fd40 	bl	800853e <HAL_UARTEx_DisableFifoMode>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001ac4:	f000 f92e 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000490 	.word	0x20000490
 8001ad0:	40008000 	.word	0x40008000
 8001ad4:	00033324 	.word	0x00033324

08001ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	4b4f      	ldr	r3, [pc, #316]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	4a4e      	ldr	r2, [pc, #312]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afa:	4b4c      	ldr	r3, [pc, #304]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b06:	4b49      	ldr	r3, [pc, #292]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	4a48      	ldr	r2, [pc, #288]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001b0c:	f043 0320 	orr.w	r3, r3, #32
 8001b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b12:	4b46      	ldr	r3, [pc, #280]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b43      	ldr	r3, [pc, #268]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	4a42      	ldr	r2, [pc, #264]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2a:	4b40      	ldr	r3, [pc, #256]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b42:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <MX_GPIO_Init+0x154>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Solenoid_OUT_Pin|Emergency_Valve_OUT_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001b54:	4836      	ldr	r0, [pc, #216]	@ (8001c30 <MX_GPIO_Init+0x158>)
 8001b56:	f002 f88f 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin, GPIO_PIN_SET);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b64:	f002 f888 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EMER_VALVE_IN_Pin */
  GPIO_InitStruct.Pin = EMER_VALVE_IN_Pin;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b6c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_VALVE_IN_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	482c      	ldr	r0, [pc, #176]	@ (8001c30 <MX_GPIO_Init+0x158>)
 8001b7e:	f001 fee1 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOLENOID_IN_Pin */
  GPIO_InitStruct.Pin = SOLENOID_IN_Pin;
 8001b82:	2302      	movs	r3, #2
 8001b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SOLENOID_IN_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4826      	ldr	r0, [pc, #152]	@ (8001c30 <MX_GPIO_Init+0x158>)
 8001b98:	f001 fed4 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : FC_FAULT_Pin */
  GPIO_InitStruct.Pin = FC_FAULT_Pin;
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ba0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	481f      	ldr	r0, [pc, #124]	@ (8001c30 <MX_GPIO_Init+0x158>)
 8001bb2:	f001 fec7 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pins : Solenoid_OUT_Pin Emergency_Valve_OUT_Pin */
  GPIO_InitStruct.Pin = Solenoid_OUT_Pin|Emergency_Valve_OUT_Pin;
 8001bb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4818      	ldr	r0, [pc, #96]	@ (8001c30 <MX_GPIO_Init+0x158>)
 8001bd0:	f001 feb8 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_LED_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin;
 8001bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRONT_LED_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf0:	f001 fea8 	bl	8003944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	2006      	movs	r0, #6
 8001bfa:	f001 fc97 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bfe:	2006      	movs	r0, #6
 8001c00:	f001 fcae 	bl	8003560 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2105      	movs	r1, #5
 8001c08:	2007      	movs	r0, #7
 8001c0a:	f001 fc8f 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c0e:	2007      	movs	r0, #7
 8001c10:	f001 fca6 	bl	8003560 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2105      	movs	r1, #5
 8001c18:	2008      	movs	r0, #8
 8001c1a:	f001 fc87 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c1e:	2008      	movs	r0, #8
 8001c20:	f001 fc9e 	bl	8003560 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	@ 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000400 	.word	0x48000400

08001c34 <startBlinkLED>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startBlinkLED */
void startBlinkLED(void *argument)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8001c3c:	f00c fe54 	bl	800e8e8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001c40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c48:	f002 f82e 	bl	8003ca8 <HAL_GPIO_TogglePin>
    osDelay(100);
 8001c4c:	2064      	movs	r0, #100	@ 0x64
 8001c4e:	f00a f978 	bl	800bf42 <osDelay>
	HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001c52:	bf00      	nop
 8001c54:	e7f4      	b.n	8001c40 <startBlinkLED+0xc>
	...

08001c58 <startReadInstrumentation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadInstrumentation */
void startReadInstrumentation(void *argument)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadInstrumentation */
	LTC2990_Init(&LTC2990_Handle, &hi2c2, LTC2990_I2C_ADDRESS);
 8001c60:	224c      	movs	r2, #76	@ 0x4c
 8001c62:	4906      	ldr	r1, [pc, #24]	@ (8001c7c <startReadInstrumentation+0x24>)
 8001c64:	4806      	ldr	r0, [pc, #24]	@ (8001c80 <startReadInstrumentation+0x28>)
 8001c66:	f7ff f9ad 	bl	8000fc4 <LTC2990_Init>
  /* Infinite loop */
  for(;;)
  {
	LTC2990_Step(&LTC2990_Handle);
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <startReadInstrumentation+0x28>)
 8001c6c:	f7ff fa00 	bl	8001070 <LTC2990_Step>
    osDelay(1);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f00a f966 	bl	800bf42 <osDelay>
	LTC2990_Step(&LTC2990_Handle);
 8001c76:	bf00      	nop
 8001c78:	e7f7      	b.n	8001c6a <startReadInstrumentation+0x12>
 8001c7a:	bf00      	nop
 8001c7c:	2000043c 	.word	0x2000043c
 8001c80:	20000530 	.word	0x20000530

08001c84 <startPrintInstrumentation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintInstrumentation */
void startPrintInstrumentation(void *argument)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPrintInstrumentation */
  /* Infinite loop */
  for(;;)
  {
	float raw_voltage[2];
	LTC2990_Get_Single_Ended_Voltage(&LTC2990_Handle, raw_voltage);
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	4619      	mov	r1, r3
 8001c92:	4817      	ldr	r0, [pc, #92]	@ (8001cf0 <startPrintInstrumentation+0x6c>)
 8001c94:	f7ff fb15 	bl	80012c2 <LTC2990_Get_Single_Ended_Voltage>

	CDC_Transmit_Print("Voltage 1: %f \r\n", raw_voltage[0]);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc7c 	bl	8000598 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4813      	ldr	r0, [pc, #76]	@ (8001cf4 <startPrintInstrumentation+0x70>)
 8001ca6:	f7ff fcf7 	bl	8001698 <CDC_Transmit_Print>
	osDelay(10);
 8001caa:	200a      	movs	r0, #10
 8001cac:	f00a f949 	bl	800bf42 <osDelay>
	CDC_Transmit_Print("Voltage 2: %f \r\n", raw_voltage[1]);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc70 	bl	8000598 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	480e      	ldr	r0, [pc, #56]	@ (8001cf8 <startPrintInstrumentation+0x74>)
 8001cbe:	f7ff fceb 	bl	8001698 <CDC_Transmit_Print>
	osDelay(10);
 8001cc2:	200a      	movs	r0, #10
 8001cc4:	f00a f93d 	bl	800bf42 <osDelay>
	CDC_Transmit_Print("Current is: %f \r\n", LTC2990_Get_Current(&LTC2990_Handle));
 8001cc8:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <startPrintInstrumentation+0x6c>)
 8001cca:	f7ff faeb 	bl	80012a4 <LTC2990_Get_Current>
 8001cce:	ee10 3a10 	vmov	r3, s0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc60 	bl	8000598 <__aeabi_f2d>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4807      	ldr	r0, [pc, #28]	@ (8001cfc <startPrintInstrumentation+0x78>)
 8001cde:	f7ff fcdb 	bl	8001698 <CDC_Transmit_Print>
	osDelay(750);
 8001ce2:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001ce6:	f00a f92c 	bl	800bf42 <osDelay>
  {
 8001cea:	bf00      	nop
 8001cec:	e7ce      	b.n	8001c8c <startPrintInstrumentation+0x8>
 8001cee:	bf00      	nop
 8001cf0:	20000530 	.word	0x20000530
 8001cf4:	08012280 	.word	0x08012280
 8001cf8:	08012294 	.word	0x08012294
 8001cfc:	080122a8 	.word	0x080122a8

08001d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d12:	f000 fb63 	bl	80023dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40012c00 	.word	0x40012c00

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <Error_Handler+0x8>

08001d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_MspInit+0x50>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3a:	4a11      	ldr	r2, [pc, #68]	@ (8001d80 <HAL_MspInit+0x50>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d42:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <HAL_MspInit+0x50>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <HAL_MspInit+0x50>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d52:	4a0b      	ldr	r2, [pc, #44]	@ (8001d80 <HAL_MspInit+0x50>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_MspInit+0x50>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	210f      	movs	r1, #15
 8001d6a:	f06f 0001 	mvn.w	r0, #1
 8001d6e:	f001 fbdd 	bl	800352c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d72:	f004 fb93 	bl	800649c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b09e      	sub	sp, #120	@ 0x78
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2250      	movs	r2, #80	@ 0x50
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00e f825 	bl	800fdf4 <memset>
  if(hadc->Instance==ADC3)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1e      	ldr	r2, [pc, #120]	@ (8001e28 <HAL_ADC_MspInit+0xa4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d134      	bne.n	8001e1e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001db4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001db8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001dba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001dbe:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f005 f8d9 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001dd0:	f7ff ffa8 	bl	8001d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001dd4:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd8:	4a14      	ldr	r2, [pc, #80]	@ (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001dda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df0:	4a0e      	ldr	r2, [pc, #56]	@ (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = Pressure_IN_Pin;
 8001e04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Pressure_IN_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e16:	4619      	mov	r1, r3
 8001e18:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <HAL_ADC_MspInit+0xac>)
 8001e1a:	f001 fd93 	bl	8003944 <HAL_GPIO_Init>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001e1e:	bf00      	nop
 8001e20:	3778      	adds	r7, #120	@ 0x78
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	50000400 	.word	0x50000400
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000400 	.word	0x48000400

08001e34 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b09e      	sub	sp, #120	@ 0x78
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2250      	movs	r2, #80	@ 0x50
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00d ffcd 	bl	800fdf4 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001edc <HAL_FDCAN_MspInit+0xa8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d137      	bne.n	8001ed4 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e68:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4618      	mov	r0, r3
 8001e76:	f005 f881 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001e80:	f7ff ff50 	bl	8001d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e84:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <HAL_FDCAN_MspInit+0xac>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	4a15      	ldr	r2, [pc, #84]	@ (8001ee0 <HAL_FDCAN_MspInit+0xac>)
 8001e8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <HAL_FDCAN_MspInit+0xac>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <HAL_FDCAN_MspInit+0xac>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee0 <HAL_FDCAN_MspInit+0xac>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_FDCAN_MspInit+0xac>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001eb4:	2360      	movs	r3, #96	@ 0x60
 8001eb6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001ec4:	2309      	movs	r3, #9
 8001ec6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <HAL_FDCAN_MspInit+0xb0>)
 8001ed0:	f001 fd38 	bl	8003944 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001ed4:	bf00      	nop
 8001ed6:	3778      	adds	r7, #120	@ 0x78
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40006800 	.word	0x40006800
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	48000400 	.word	0x48000400

08001ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b09e      	sub	sp, #120	@ 0x78
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2250      	movs	r2, #80	@ 0x50
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f00d ff73 	bl	800fdf4 <memset>
  if(hi2c->Instance==I2C2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1f      	ldr	r2, [pc, #124]	@ (8001f90 <HAL_I2C_MspInit+0xa8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d137      	bne.n	8001f88 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4618      	mov	r0, r3
 8001f26:	f005 f829 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f30:	f7ff fef8 	bl	8001d24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <HAL_I2C_MspInit+0xac>)
 8001f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f38:	4a16      	ldr	r2, [pc, #88]	@ (8001f94 <HAL_I2C_MspInit+0xac>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <HAL_I2C_MspInit+0xac>)
 8001f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f52:	2312      	movs	r3, #18
 8001f54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f66:	4619      	mov	r1, r3
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f6c:	f001 fcea 	bl	8003944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f70:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <HAL_I2C_MspInit+0xac>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	4a07      	ldr	r2, [pc, #28]	@ (8001f94 <HAL_I2C_MspInit+0xac>)
 8001f76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <HAL_I2C_MspInit+0xac>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001f88:	bf00      	nop
 8001f8a:	3778      	adds	r7, #120	@ 0x78
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40005800 	.word	0x40005800
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b09e      	sub	sp, #120	@ 0x78
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2250      	movs	r2, #80	@ 0x50
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00d ff1b 	bl	800fdf4 <memset>
  if(huart->Instance==LPUART1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002040 <HAL_UART_MspInit+0xa8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d136      	bne.n	8002036 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f004 ffd1 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe0:	f7ff fea0 	bl	8001d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fe4:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <HAL_UART_MspInit+0xac>)
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe8:	4a16      	ldr	r2, [pc, #88]	@ (8002044 <HAL_UART_MspInit+0xac>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001ff0:	4b14      	ldr	r3, [pc, #80]	@ (8002044 <HAL_UART_MspInit+0xac>)
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <HAL_UART_MspInit+0xac>)
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002000:	4a10      	ldr	r2, [pc, #64]	@ (8002044 <HAL_UART_MspInit+0xac>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002008:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <HAL_UART_MspInit+0xac>)
 800200a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002014:	230c      	movs	r3, #12
 8002016:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002024:	230c      	movs	r3, #12
 8002026:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800202c:	4619      	mov	r1, r3
 800202e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002032:	f001 fc87 	bl	8003944 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002036:	bf00      	nop
 8002038:	3778      	adds	r7, #120	@ 0x78
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40008000 	.word	0x40008000
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	@ 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002058:	4b2c      	ldr	r3, [pc, #176]	@ (800210c <HAL_InitTick+0xc4>)
 800205a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205c:	4a2b      	ldr	r2, [pc, #172]	@ (800210c <HAL_InitTick+0xc4>)
 800205e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002062:	6613      	str	r3, [r2, #96]	@ 0x60
 8002064:	4b29      	ldr	r3, [pc, #164]	@ (800210c <HAL_InitTick+0xc4>)
 8002066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002070:	f107 020c 	add.w	r2, r7, #12
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f004 ff06 	bl	8006e8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002080:	f004 feee 	bl	8006e60 <HAL_RCC_GetPCLK2Freq>
 8002084:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002088:	4a21      	ldr	r2, [pc, #132]	@ (8002110 <HAL_InitTick+0xc8>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	3b01      	subs	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002094:	4b1f      	ldr	r3, [pc, #124]	@ (8002114 <HAL_InitTick+0xcc>)
 8002096:	4a20      	ldr	r2, [pc, #128]	@ (8002118 <HAL_InitTick+0xd0>)
 8002098:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800209a:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <HAL_InitTick+0xcc>)
 800209c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002114 <HAL_InitTick+0xcc>)
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <HAL_InitTick+0xcc>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <HAL_InitTick+0xcc>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80020b4:	4817      	ldr	r0, [pc, #92]	@ (8002114 <HAL_InitTick+0xcc>)
 80020b6:	f005 f99d 	bl	80073f4 <HAL_TIM_Base_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80020c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d11b      	bne.n	8002100 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80020c8:	4812      	ldr	r0, [pc, #72]	@ (8002114 <HAL_InitTick+0xcc>)
 80020ca:	f005 f9f5 	bl	80074b8 <HAL_TIM_Base_Start_IT>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80020d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d111      	bne.n	8002100 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80020dc:	2019      	movs	r0, #25
 80020de:	f001 fa3f 	bl	8003560 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d808      	bhi.n	80020fa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	2019      	movs	r0, #25
 80020ee:	f001 fa1d 	bl	800352c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <HAL_InitTick+0xd4>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	e002      	b.n	8002100 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002100:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002104:	4618      	mov	r0, r3
 8002106:	3730      	adds	r7, #48	@ 0x30
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	431bde83 	.word	0x431bde83
 8002114:	20000544 	.word	0x20000544
 8002118:	40012c00 	.word	0x40012c00
 800211c:	20000004 	.word	0x20000004

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <NMI_Handler+0x4>

08002128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <MemManage_Handler+0x4>

08002138 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <UsageFault_Handler+0x4>

08002148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_VALVE_IN_Pin);
 800215a:	2001      	movs	r0, #1
 800215c:	f001 fdbe 	bl	8003cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SOLENOID_IN_Pin);
 8002168:	2002      	movs	r0, #2
 800216a:	f001 fdb7 	bl	8003cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}

08002172 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FC_FAULT_Pin);
 8002176:	2004      	movs	r0, #4
 8002178:	f001 fdb0 	bl	8003cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002184:	4802      	ldr	r0, [pc, #8]	@ (8002190 <USB_LP_IRQHandler+0x10>)
 8002186:	f002 fcd4 	bl	8004b32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000a014 	.word	0x2000a014

08002194 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800219a:	f005 f9fd 	bl	8007598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000544 	.word	0x20000544

080021a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return 1;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_kill>:

int _kill(int pid, int sig)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021c2:	f00d fec7 	bl	800ff54 <__errno>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2216      	movs	r2, #22
 80021ca:	601a      	str	r2, [r3, #0]
  return -1;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_exit>:

void _exit (int status)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ffe7 	bl	80021b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ea:	bf00      	nop
 80021ec:	e7fd      	b.n	80021ea <_exit+0x12>

080021ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	e00a      	b.n	8002216 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002200:	f3af 8000 	nop.w
 8002204:	4601      	mov	r1, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	60ba      	str	r2, [r7, #8]
 800220c:	b2ca      	uxtb	r2, r1
 800220e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3301      	adds	r3, #1
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	dbf0      	blt.n	8002200 <_read+0x12>
  }

  return len;
 800221e:	687b      	ldr	r3, [r7, #4]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e009      	b.n	800224e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	60ba      	str	r2, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3301      	adds	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	dbf1      	blt.n	800223a <_write+0x12>
  }
  return len;
 8002256:	687b      	ldr	r3, [r7, #4]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_close>:

int _close(int file)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002288:	605a      	str	r2, [r3, #4]
  return 0;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_isatty>:

int _isatty(int file)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a0:	2301      	movs	r3, #1
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d0:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <_sbrk+0x5c>)
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <_sbrk+0x60>)
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <_sbrk+0x64>)
 80022e6:	4a12      	ldr	r2, [pc, #72]	@ (8002330 <_sbrk+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ea:	4b10      	ldr	r3, [pc, #64]	@ (800232c <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d207      	bcs.n	8002308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f8:	f00d fe2c 	bl	800ff54 <__errno>
 80022fc:	4603      	mov	r3, r0
 80022fe:	220c      	movs	r2, #12
 8002300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	e009      	b.n	800231c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230e:	4b07      	ldr	r3, [pc, #28]	@ (800232c <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	4a05      	ldr	r2, [pc, #20]	@ (800232c <_sbrk+0x64>)
 8002318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2001c000 	.word	0x2001c000
 8002328:	00000400 	.word	0x00000400
 800232c:	20000590 	.word	0x20000590
 8002330:	2000a660 	.word	0x2000a660

08002334 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <SystemInit+0x20>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <SystemInit+0x20>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002358:	480d      	ldr	r0, [pc, #52]	@ (8002390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800235a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800235c:	f7ff ffea 	bl	8002334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002360:	480c      	ldr	r0, [pc, #48]	@ (8002394 <LoopForever+0x6>)
  ldr r1, =_edata
 8002362:	490d      	ldr	r1, [pc, #52]	@ (8002398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <LoopForever+0xe>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002378:	4c0a      	ldr	r4, [pc, #40]	@ (80023a4 <LoopForever+0x16>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002386:	f00d fdeb 	bl	800ff60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800238a:	f7ff f9db 	bl	8001744 <main>

0800238e <LoopForever>:

LoopForever:
    b LoopForever
 800238e:	e7fe      	b.n	800238e <LoopForever>
  ldr   r0, =_estack
 8002390:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800239c:	0801274c 	.word	0x0801274c
  ldr r2, =_sbss
 80023a0:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80023a4:	2000a65c 	.word	0x2000a65c

080023a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC1_2_IRQHandler>

080023aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f001 f8ae 	bl	8003516 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ba:	200f      	movs	r0, #15
 80023bc:	f7ff fe44 	bl	8002048 <HAL_InitTick>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	71fb      	strb	r3, [r7, #7]
 80023ca:	e001      	b.n	80023d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023cc:	f7ff fcb0 	bl	8001d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023d0:	79fb      	ldrb	r3, [r7, #7]

}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_IncTick+0x1c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_IncTick+0x20>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a03      	ldr	r2, [pc, #12]	@ (80023f8 <HAL_IncTick+0x1c>)
 80023ec:	6013      	str	r3, [r2, #0]
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	20000594 	.word	0x20000594
 80023fc:	20000008 	.word	0x20000008

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000594 	.word	0x20000594

08002418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff ffee 	bl	8002400 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d004      	beq.n	800243c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_Delay+0x40>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800243c:	bf00      	nop
 800243e:	f7ff ffdf 	bl	8002400 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	429a      	cmp	r2, r3
 800244c:	d8f7      	bhi.n	800243e <HAL_Delay+0x26>
  {
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000008 	.word	0x20000008

0800245c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3360      	adds	r3, #96	@ 0x60
 80024d6:	461a      	mov	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <LL_ADC_SetOffset+0x44>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024fc:	bf00      	nop
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	03fff000 	.word	0x03fff000

0800250c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3360      	adds	r3, #96	@ 0x60
 800251a:	461a      	mov	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3360      	adds	r3, #96	@ 0x60
 8002548:	461a      	mov	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	431a      	orrs	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800256e:	b480      	push	{r7}
 8002570:	b087      	sub	sp, #28
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3360      	adds	r3, #96	@ 0x60
 800257e:	461a      	mov	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	431a      	orrs	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002598:	bf00      	nop
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3360      	adds	r3, #96	@ 0x60
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	615a      	str	r2, [r3, #20]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3330      	adds	r3, #48	@ 0x30
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	4413      	add	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	211f      	movs	r1, #31
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	0e9b      	lsrs	r3, r3, #26
 8002638:	f003 011f 	and.w	r1, r3, #31
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	431a      	orrs	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3314      	adds	r3, #20
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	0e5b      	lsrs	r3, r3, #25
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	4413      	add	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	0d1b      	lsrs	r3, r3, #20
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	2107      	movs	r1, #7
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	401a      	ands	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0d1b      	lsrs	r3, r3, #20
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0318 	and.w	r3, r3, #24
 80026d2:	4908      	ldr	r1, [pc, #32]	@ (80026f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026d4:	40d9      	lsrs	r1, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	400b      	ands	r3, r1
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	431a      	orrs	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	0007ffff 	.word	0x0007ffff

080026f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002708:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6093      	str	r3, [r2, #8]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800272c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002730:	d101      	bne.n	8002736 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002754:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002758:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002780:	d101      	bne.n	8002786 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <LL_ADC_IsEnabled+0x18>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <LL_ADC_IsEnabled+0x1a>
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d101      	bne.n	80027d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d101      	bne.n	80027f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e19b      	b.n	8002b5a <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff faa7 	bl	8001d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff67 	bl	800271c <LL_ADC_IsDeepPowerDownEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff4d 	bl	80026f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff82 	bl	800276c <LL_ADC_IsInternalRegulatorEnabled>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d115      	bne.n	800289a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff66 	bl	8002744 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002878:	4b97      	ldr	r3, [pc, #604]	@ (8002ad8 <HAL_ADC_Init+0x2d0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	4a97      	ldr	r2, [pc, #604]	@ (8002adc <HAL_ADC_Init+0x2d4>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	3301      	adds	r3, #1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800288c:	e002      	b.n	8002894 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3b01      	subs	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff64 	bl	800276c <LL_ADC_IsInternalRegulatorEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10d      	bne.n	80028c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff75 	bl	80027ba <LL_ADC_REG_IsConversionOngoing>
 80028d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 8134 	bne.w	8002b48 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 8130 	bne.w	8002b48 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80028f0:	f043 0202 	orr.w	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff49 	bl	8002794 <LL_ADC_IsEnabled>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d137      	bne.n	8002978 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002910:	d004      	beq.n	800291c <HAL_ADC_Init+0x114>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a72      	ldr	r2, [pc, #456]	@ (8002ae0 <HAL_ADC_Init+0x2d8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10f      	bne.n	800293c <HAL_ADC_Init+0x134>
 800291c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002920:	f7ff ff38 	bl	8002794 <LL_ADC_IsEnabled>
 8002924:	4604      	mov	r4, r0
 8002926:	486e      	ldr	r0, [pc, #440]	@ (8002ae0 <HAL_ADC_Init+0x2d8>)
 8002928:	f7ff ff34 	bl	8002794 <LL_ADC_IsEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	4323      	orrs	r3, r4
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	e008      	b.n	800294e <HAL_ADC_Init+0x146>
 800293c:	4869      	ldr	r0, [pc, #420]	@ (8002ae4 <HAL_ADC_Init+0x2dc>)
 800293e:	f7ff ff29 	bl	8002794 <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d012      	beq.n	8002978 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800295a:	d004      	beq.n	8002966 <HAL_ADC_Init+0x15e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5f      	ldr	r2, [pc, #380]	@ (8002ae0 <HAL_ADC_Init+0x2d8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_ADC_Init+0x162>
 8002966:	4a60      	ldr	r2, [pc, #384]	@ (8002ae8 <HAL_ADC_Init+0x2e0>)
 8002968:	e000      	b.n	800296c <HAL_ADC_Init+0x164>
 800296a:	4a60      	ldr	r2, [pc, #384]	@ (8002aec <HAL_ADC_Init+0x2e4>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f7ff fd72 	bl	800245c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7f5b      	ldrb	r3, [r3, #29]
 800297c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002982:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002988:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800298e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002996:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d106      	bne.n	80029b4 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029aa:	3b01      	subs	r3, #1
 80029ac:	045b      	lsls	r3, r3, #17
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b46      	ldr	r3, [pc, #280]	@ (8002af0 <HAL_ADC_Init+0x2e8>)
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	69b9      	ldr	r1, [r7, #24]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff feee 	bl	80027e0 <LL_ADC_INJ_IsConversionOngoing>
 8002a04:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d17b      	bne.n	8002b04 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d178      	bne.n	8002b04 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a16:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a2e:	f023 0302 	bic.w	r3, r3, #2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d017      	beq.n	8002a74 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6911      	ldr	r1, [r2, #16]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a72:	e013      	b.n	8002a9c <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a98:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d126      	bne.n	8002af4 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002abc:	4311      	orrs	r1, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	e015      	b.n	8002b04 <HAL_ADC_Init+0x2fc>
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	053e2d63 	.word	0x053e2d63
 8002ae0:	50000100 	.word	0x50000100
 8002ae4:	50000400 	.word	0x50000400
 8002ae8:	50000300 	.word	0x50000300
 8002aec:	50000700 	.word	0x50000700
 8002af0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d10c      	bne.n	8002b26 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f023 010f 	bic.w	r1, r3, #15
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	1e5a      	subs	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b24:	e007      	b.n	8002b36 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 020f 	bic.w	r2, r2, #15
 8002b34:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b46:	e007      	b.n	8002b58 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4c:	f043 0210 	orr.w	r2, r3, #16
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b58:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	@ 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd90      	pop	{r4, r7, pc}
 8002b62:	bf00      	nop

08002b64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0b6      	sub	sp, #216	@ 0xd8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d102      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x24>
 8002b82:	2302      	movs	r3, #2
 8002b84:	f000 bc04 	b.w	8003390 <HAL_ADC_ConfigChannel+0x82c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fe10 	bl	80027ba <LL_ADC_REG_IsConversionOngoing>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 83e8 	bne.w	8003372 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f7ff fd26 	bl	8002600 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fdfe 	bl	80027ba <LL_ADC_REG_IsConversionOngoing>
 8002bbe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fe0a 	bl	80027e0 <LL_ADC_INJ_IsConversionOngoing>
 8002bcc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 81d9 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 81d4 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bec:	d10f      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7ff fd2d 	bl	8002658 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fce7 	bl	80025da <LL_ADC_SetSamplingTimeCommonConfig>
 8002c0c:	e00e      	b.n	8002c2c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f7ff fd1c 	bl	8002658 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fcd7 	bl	80025da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d022      	beq.n	8002c94 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6919      	ldr	r1, [r3, #16]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c5e:	f7ff fc31 	bl	80024c4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f7ff fc7d 	bl	800256e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d102      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x126>
 8002c84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c88:	e000      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x128>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f7ff fc89 	bl	80025a4 <LL_ADC_SetOffsetSaturation>
 8002c92:	e17b      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fc36 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x15c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fc2b 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	e01e      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x19a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fc20 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e004      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d105      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x1b2>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	e018      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x1e4>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e004      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d106      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fbef 	bl	8002538 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fbd3 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x222>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fbc8 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	e01e      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x260>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fbbd 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e004      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x278>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	e018      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x2aa>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e004      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fb8c 	bl	8002538 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2102      	movs	r1, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fb70 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x2e8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fb65 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	e01e      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x326>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2102      	movs	r1, #2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fb5a 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	e004      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x33e>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	e016      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x36c>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002eb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	e004      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d106      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2102      	movs	r1, #2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fb2b 	bl	8002538 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fb0f 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x3aa>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2103      	movs	r1, #3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fb04 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002f04:	4603      	mov	r3, r0
 8002f06:	0e9b      	lsrs	r3, r3, #26
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	e017      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x3da>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2103      	movs	r1, #3
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff faf9 	bl	800250c <LL_ADC_GetOffsetChannel>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f28:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e003      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x3f2>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0e9b      	lsrs	r3, r3, #26
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	e011      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x416>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f6e:	2320      	movs	r3, #32
 8002f70:	e003      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d106      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2103      	movs	r1, #3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fad6 	bl	8002538 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fbff 	bl	8002794 <LL_ADC_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f040 813d 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f7ff fb80 	bl	80026b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4aa2      	ldr	r2, [pc, #648]	@ (8003240 <HAL_ADC_ConfigChannel+0x6dc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	f040 812e 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x480>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0e9b      	lsrs	r3, r3, #26
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2b09      	cmp	r3, #9
 8002fda:	bf94      	ite	ls
 8002fdc:	2301      	movls	r3, #1
 8002fde:	2300      	movhi	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e019      	b.n	8003018 <HAL_ADC_ConfigChannel+0x4b4>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ff4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e003      	b.n	8003008 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2b09      	cmp	r3, #9
 8003010:	bf94      	ite	ls
 8003012:	2301      	movls	r3, #1
 8003014:	2300      	movhi	r3, #0
 8003016:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003018:	2b00      	cmp	r3, #0
 800301a:	d079      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x4d4>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	3301      	adds	r3, #1
 8003030:	069b      	lsls	r3, r3, #26
 8003032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003036:	e015      	b.n	8003064 <HAL_ADC_ConfigChannel+0x500>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003048:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800304a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	e003      	b.n	800305c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3301      	adds	r3, #1
 800305e:	069b      	lsls	r3, r3, #26
 8003060:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x520>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	e017      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x550>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003094:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800309c:	2320      	movs	r3, #32
 800309e:	e003      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80030a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	ea42 0103 	orr.w	r1, r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_ADC_ConfigChannel+0x576>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	3301      	adds	r3, #1
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	051b      	lsls	r3, r3, #20
 80030d8:	e018      	b.n	800310c <HAL_ADC_ConfigChannel+0x5a8>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80030ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e003      	b.n	80030fe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80030f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800310c:	430b      	orrs	r3, r1
 800310e:	e07e      	b.n	800320e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <HAL_ADC_ConfigChannel+0x5c8>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	0e9b      	lsrs	r3, r3, #26
 8003122:	3301      	adds	r3, #1
 8003124:	069b      	lsls	r3, r3, #26
 8003126:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800312a:	e015      	b.n	8003158 <HAL_ADC_ConfigChannel+0x5f4>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800313a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800313e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003144:	2320      	movs	r3, #32
 8003146:	e003      	b.n	8003150 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	069b      	lsls	r3, r3, #26
 8003154:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x614>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e9b      	lsrs	r3, r3, #26
 800316a:	3301      	adds	r3, #1
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	e017      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x644>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	61fb      	str	r3, [r7, #28]
  return result;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003190:	2320      	movs	r3, #32
 8003192:	e003      	b.n	800319c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	ea42 0103 	orr.w	r1, r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10d      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x670>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	0e9b      	lsrs	r3, r3, #26
 80031be:	3301      	adds	r3, #1
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	3b1e      	subs	r3, #30
 80031cc:	051b      	lsls	r3, r3, #20
 80031ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	e01b      	b.n	800320c <HAL_ADC_ConfigChannel+0x6a8>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	613b      	str	r3, [r7, #16]
  return result;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e003      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	f003 021f 	and.w	r2, r3, #31
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	3b1e      	subs	r3, #30
 8003206:	051b      	lsls	r3, r3, #20
 8003208:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800320c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003212:	4619      	mov	r1, r3
 8003214:	f7ff fa20 	bl	8002658 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <HAL_ADC_ConfigChannel+0x6e0>)
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80af 	beq.w	8003384 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800322e:	d004      	beq.n	800323a <HAL_ADC_ConfigChannel+0x6d6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <HAL_ADC_ConfigChannel+0x6e4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d10a      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x6ec>
 800323a:	4b04      	ldr	r3, [pc, #16]	@ (800324c <HAL_ADC_ConfigChannel+0x6e8>)
 800323c:	e009      	b.n	8003252 <HAL_ADC_ConfigChannel+0x6ee>
 800323e:	bf00      	nop
 8003240:	407f0000 	.word	0x407f0000
 8003244:	80080000 	.word	0x80080000
 8003248:	50000100 	.word	0x50000100
 800324c:	50000300 	.word	0x50000300
 8003250:	4b51      	ldr	r3, [pc, #324]	@ (8003398 <HAL_ADC_ConfigChannel+0x834>)
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff f928 	bl	80024a8 <LL_ADC_GetCommonPathInternalCh>
 8003258:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a4e      	ldr	r2, [pc, #312]	@ (800339c <HAL_ADC_ConfigChannel+0x838>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_ADC_ConfigChannel+0x70c>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a4d      	ldr	r2, [pc, #308]	@ (80033a0 <HAL_ADC_ConfigChannel+0x83c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d134      	bne.n	80032da <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003270:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003274:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d12e      	bne.n	80032da <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003284:	d17e      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800328e:	d004      	beq.n	800329a <HAL_ADC_ConfigChannel+0x736>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a43      	ldr	r2, [pc, #268]	@ (80033a4 <HAL_ADC_ConfigChannel+0x840>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x73a>
 800329a:	4a43      	ldr	r2, [pc, #268]	@ (80033a8 <HAL_ADC_ConfigChannel+0x844>)
 800329c:	e000      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x73c>
 800329e:	4a3e      	ldr	r2, [pc, #248]	@ (8003398 <HAL_ADC_ConfigChannel+0x834>)
 80032a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f7ff f8e9 	bl	8002482 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032b0:	4b3e      	ldr	r3, [pc, #248]	@ (80033ac <HAL_ADC_ConfigChannel+0x848>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	4a3e      	ldr	r2, [pc, #248]	@ (80033b0 <HAL_ADC_ConfigChannel+0x84c>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ca:	e002      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f9      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032d8:	e054      	b.n	8003384 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a35      	ldr	r2, [pc, #212]	@ (80033b4 <HAL_ADC_ConfigChannel+0x850>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d120      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11a      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032f8:	d144      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003302:	d004      	beq.n	800330e <HAL_ADC_ConfigChannel+0x7aa>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a26      	ldr	r2, [pc, #152]	@ (80033a4 <HAL_ADC_ConfigChannel+0x840>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x7ae>
 800330e:	4a26      	ldr	r2, [pc, #152]	@ (80033a8 <HAL_ADC_ConfigChannel+0x844>)
 8003310:	e000      	b.n	8003314 <HAL_ADC_ConfigChannel+0x7b0>
 8003312:	4a21      	ldr	r2, [pc, #132]	@ (8003398 <HAL_ADC_ConfigChannel+0x834>)
 8003314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003318:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f7ff f8af 	bl	8002482 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003324:	e02e      	b.n	8003384 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a23      	ldr	r2, [pc, #140]	@ (80033b8 <HAL_ADC_ConfigChannel+0x854>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d129      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d123      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <HAL_ADC_ConfigChannel+0x840>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01e      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800334e:	d004      	beq.n	800335a <HAL_ADC_ConfigChannel+0x7f6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a13      	ldr	r2, [pc, #76]	@ (80033a4 <HAL_ADC_ConfigChannel+0x840>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x7fa>
 800335a:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <HAL_ADC_ConfigChannel+0x844>)
 800335c:	e000      	b.n	8003360 <HAL_ADC_ConfigChannel+0x7fc>
 800335e:	4a0e      	ldr	r2, [pc, #56]	@ (8003398 <HAL_ADC_ConfigChannel+0x834>)
 8003360:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003364:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f7ff f889 	bl	8002482 <LL_ADC_SetCommonPathInternalCh>
 8003370:	e008      	b.n	8003384 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800338c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003390:	4618      	mov	r0, r3
 8003392:	37d8      	adds	r7, #216	@ 0xd8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	50000700 	.word	0x50000700
 800339c:	c3210000 	.word	0xc3210000
 80033a0:	90c00010 	.word	0x90c00010
 80033a4:	50000100 	.word	0x50000100
 80033a8:	50000300 	.word	0x50000300
 80033ac:	20000000 	.word	0x20000000
 80033b0:	053e2d63 	.word	0x053e2d63
 80033b4:	c7520000 	.word	0xc7520000
 80033b8:	cb840000 	.word	0xcb840000

080033bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033d8:	4013      	ands	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ee:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	60d3      	str	r3, [r2, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <__NVIC_GetPriorityGrouping+0x18>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f003 0307 	and.w	r3, r3, #7
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	db0b      	blt.n	800344a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4907      	ldr	r1, [pc, #28]	@ (8003458 <__NVIC_EnableIRQ+0x38>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2001      	movs	r0, #1
 8003442:	fa00 f202 	lsl.w	r2, r0, r2
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000e100 	.word	0xe000e100

0800345c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	6039      	str	r1, [r7, #0]
 8003466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346c:	2b00      	cmp	r3, #0
 800346e:	db0a      	blt.n	8003486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	490c      	ldr	r1, [pc, #48]	@ (80034a8 <__NVIC_SetPriority+0x4c>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	440b      	add	r3, r1
 8003480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003484:	e00a      	b.n	800349c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4908      	ldr	r1, [pc, #32]	@ (80034ac <__NVIC_SetPriority+0x50>)
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	3b04      	subs	r3, #4
 8003494:	0112      	lsls	r2, r2, #4
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	440b      	add	r3, r1
 800349a:	761a      	strb	r2, [r3, #24]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000e100 	.word	0xe000e100
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	@ 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f1c3 0307 	rsb	r3, r3, #7
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	bf28      	it	cs
 80034ce:	2304      	movcs	r3, #4
 80034d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d902      	bls.n	80034e0 <NVIC_EncodePriority+0x30>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3b03      	subs	r3, #3
 80034de:	e000      	b.n	80034e2 <NVIC_EncodePriority+0x32>
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	401a      	ands	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f8:	f04f 31ff 	mov.w	r1, #4294967295
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43d9      	mvns	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	4313      	orrs	r3, r2
         );
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	@ 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ff4c 	bl	80033bc <__NVIC_SetPriorityGrouping>
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800353a:	f7ff ff63 	bl	8003404 <__NVIC_GetPriorityGrouping>
 800353e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	6978      	ldr	r0, [r7, #20]
 8003546:	f7ff ffb3 	bl	80034b0 <NVIC_EncodePriority>
 800354a:	4602      	mov	r2, r0
 800354c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ff82 	bl	800345c <__NVIC_SetPriority>
}
 8003558:	bf00      	nop
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff ff56 	bl	8003420 <__NVIC_EnableIRQ>
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e147      	b.n	800381e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fe fc46 	bl	8001e34 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0210 	bic.w	r2, r2, #16
 80035b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b8:	f7fe ff22 	bl	8002400 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035be:	e012      	b.n	80035e6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80035c0:	f7fe ff1e 	bl	8002400 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b0a      	cmp	r3, #10
 80035cc:	d90b      	bls.n	80035e6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e11b      	b.n	800381e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d0e5      	beq.n	80035c0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003604:	f7fe fefc 	bl	8002400 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800360a:	e012      	b.n	8003632 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800360c:	f7fe fef8 	bl	8002400 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b0a      	cmp	r3, #10
 8003618:	d90b      	bls.n	8003632 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0f5      	b.n	800381e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0e5      	beq.n	800360c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0202 	orr.w	r2, r2, #2
 800364e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a74      	ldr	r2, [pc, #464]	@ (8003828 <HAL_FDCAN_Init+0x2ac>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d103      	bne.n	8003662 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800365a:	4a74      	ldr	r2, [pc, #464]	@ (800382c <HAL_FDCAN_Init+0x2b0>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7c1b      	ldrb	r3, [r3, #16]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d108      	bne.n	800367c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699a      	ldr	r2, [r3, #24]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003678:	619a      	str	r2, [r3, #24]
 800367a:	e007      	b.n	800368c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800368a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	7c5b      	ldrb	r3, [r3, #17]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d108      	bne.n	80036a6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036a2:	619a      	str	r2, [r3, #24]
 80036a4:	e007      	b.n	80036b6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	7c9b      	ldrb	r3, [r3, #18]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d108      	bne.n	80036d0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036cc:	619a      	str	r2, [r3, #24]
 80036ce:	e007      	b.n	80036e0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036de:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003704:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0210 	bic.w	r2, r2, #16
 8003714:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d108      	bne.n	8003730 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0204 	orr.w	r2, r2, #4
 800372c:	619a      	str	r2, [r3, #24]
 800372e:	e02c      	b.n	800378a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d028      	beq.n	800378a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d01c      	beq.n	800377a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800374e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0210 	orr.w	r2, r2, #16
 800375e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d110      	bne.n	800378a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0220 	orr.w	r2, r2, #32
 8003776:	619a      	str	r2, [r3, #24]
 8003778:	e007      	b.n	800378a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0220 	orr.w	r2, r2, #32
 8003788:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	3b01      	subs	r3, #1
 8003790:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	3b01      	subs	r3, #1
 8003798:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800379a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037a2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037b2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037b4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037be:	d115      	bne.n	80037ec <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	3b01      	subs	r3, #1
 80037cc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037ce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	3b01      	subs	r3, #1
 80037d6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80037d8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	3b01      	subs	r3, #1
 80037e2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80037e8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037ea:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f83c 	bl	8003880 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40006400 	.word	0x40006400
 800382c:	40006500 	.word	0x40006500

08003830 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d110      	bne.n	8003866 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e006      	b.n	8003874 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
  }
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003888:	4b2c      	ldr	r3, [pc, #176]	@ (800393c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800388a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2b      	ldr	r2, [pc, #172]	@ (8003940 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d103      	bne.n	800389e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800389c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ac:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038da:	061a      	lsls	r2, r3, #24
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e005      	b.n	8003920 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3304      	adds	r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	429a      	cmp	r2, r3
 800392a:	d3f3      	bcc.n	8003914 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	4000a400 	.word	0x4000a400
 8003940:	40006800 	.word	0x40006800

08003944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003952:	e15a      	b.n	8003c0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2101      	movs	r1, #1
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 814c 	beq.w	8003c04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d005      	beq.n	8003984 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003980:	2b02      	cmp	r3, #2
 8003982:	d130      	bne.n	80039e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ba:	2201      	movs	r2, #1
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 0201 	and.w	r2, r3, #1
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d017      	beq.n	8003a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	2203      	movs	r2, #3
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d123      	bne.n	8003a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	08da      	lsrs	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3208      	adds	r2, #8
 8003a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	08da      	lsrs	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3208      	adds	r2, #8
 8003a70:	6939      	ldr	r1, [r7, #16]
 8003a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	2203      	movs	r2, #3
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0203 	and.w	r2, r3, #3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80a6 	beq.w	8003c04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab8:	4b5b      	ldr	r3, [pc, #364]	@ (8003c28 <HAL_GPIO_Init+0x2e4>)
 8003aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abc:	4a5a      	ldr	r2, [pc, #360]	@ (8003c28 <HAL_GPIO_Init+0x2e4>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ac4:	4b58      	ldr	r3, [pc, #352]	@ (8003c28 <HAL_GPIO_Init+0x2e4>)
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ad0:	4a56      	ldr	r2, [pc, #344]	@ (8003c2c <HAL_GPIO_Init+0x2e8>)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	220f      	movs	r2, #15
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003afa:	d01f      	beq.n	8003b3c <HAL_GPIO_Init+0x1f8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a4c      	ldr	r2, [pc, #304]	@ (8003c30 <HAL_GPIO_Init+0x2ec>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d019      	beq.n	8003b38 <HAL_GPIO_Init+0x1f4>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a4b      	ldr	r2, [pc, #300]	@ (8003c34 <HAL_GPIO_Init+0x2f0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d013      	beq.n	8003b34 <HAL_GPIO_Init+0x1f0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c38 <HAL_GPIO_Init+0x2f4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00d      	beq.n	8003b30 <HAL_GPIO_Init+0x1ec>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a49      	ldr	r2, [pc, #292]	@ (8003c3c <HAL_GPIO_Init+0x2f8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d007      	beq.n	8003b2c <HAL_GPIO_Init+0x1e8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a48      	ldr	r2, [pc, #288]	@ (8003c40 <HAL_GPIO_Init+0x2fc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <HAL_GPIO_Init+0x1e4>
 8003b24:	2305      	movs	r3, #5
 8003b26:	e00a      	b.n	8003b3e <HAL_GPIO_Init+0x1fa>
 8003b28:	2306      	movs	r3, #6
 8003b2a:	e008      	b.n	8003b3e <HAL_GPIO_Init+0x1fa>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	e006      	b.n	8003b3e <HAL_GPIO_Init+0x1fa>
 8003b30:	2303      	movs	r3, #3
 8003b32:	e004      	b.n	8003b3e <HAL_GPIO_Init+0x1fa>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e002      	b.n	8003b3e <HAL_GPIO_Init+0x1fa>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_GPIO_Init+0x1fa>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	f002 0203 	and.w	r2, r2, #3
 8003b44:	0092      	lsls	r2, r2, #2
 8003b46:	4093      	lsls	r3, r2
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b4e:	4937      	ldr	r1, [pc, #220]	@ (8003c2c <HAL_GPIO_Init+0x2e8>)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	3302      	adds	r3, #2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b5c:	4b39      	ldr	r3, [pc, #228]	@ (8003c44 <HAL_GPIO_Init+0x300>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	43db      	mvns	r3, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b80:	4a30      	ldr	r2, [pc, #192]	@ (8003c44 <HAL_GPIO_Init+0x300>)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b86:	4b2f      	ldr	r3, [pc, #188]	@ (8003c44 <HAL_GPIO_Init+0x300>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003baa:	4a26      	ldr	r2, [pc, #152]	@ (8003c44 <HAL_GPIO_Init+0x300>)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003bb0:	4b24      	ldr	r3, [pc, #144]	@ (8003c44 <HAL_GPIO_Init+0x300>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c44 <HAL_GPIO_Init+0x300>)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bda:	4b1a      	ldr	r3, [pc, #104]	@ (8003c44 <HAL_GPIO_Init+0x300>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bfe:	4a11      	ldr	r2, [pc, #68]	@ (8003c44 <HAL_GPIO_Init+0x300>)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3301      	adds	r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f47f ae9d 	bne.w	8003954 <HAL_GPIO_Init+0x10>
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	48000400 	.word	0x48000400
 8003c34:	48000800 	.word	0x48000800
 8003c38:	48000c00 	.word	0x48000c00
 8003c3c:	48001000 	.word	0x48001000
 8003c40:	48001400 	.word	0x48001400
 8003c44:	40010400 	.word	0x40010400

08003c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
 8003c64:	e001      	b.n	8003c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c94:	e002      	b.n	8003c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c96:	887a      	ldrh	r2, [r7, #2]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	041a      	lsls	r2, r3, #16
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	43d9      	mvns	r1, r3
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	400b      	ands	r3, r1
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	619a      	str	r2, [r3, #24]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ce6:	4b08      	ldr	r3, [pc, #32]	@ (8003d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d006      	beq.n	8003d00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cf2:	4a05      	ldr	r2, [pc, #20]	@ (8003d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd fcf2 	bl	80016e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40010400 	.word	0x40010400

08003d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e08d      	b.n	8003e3a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fe f8d8 	bl	8001ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	@ 0x24
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d107      	bne.n	8003d86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	e006      	b.n	8003d94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d108      	bne.n	8003dae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	e007      	b.n	8003dbe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003de0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69d9      	ldr	r1, [r3, #28]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	817b      	strh	r3, [r7, #10]
 8003e56:	460b      	mov	r3, r1
 8003e58:	813b      	strh	r3, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	f040 80f9 	bne.w	800405e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_I2C_Mem_Write+0x34>
 8003e72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0ed      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2C_Mem_Write+0x4e>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0e6      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e9a:	f7fe fab1 	bl	8002400 <HAL_GetTick>
 8003e9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2319      	movs	r3, #25
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fac3 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0d1      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2221      	movs	r2, #33	@ 0x21
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2240      	movs	r2, #64	@ 0x40
 8003ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ee4:	88f8      	ldrh	r0, [r7, #6]
 8003ee6:	893a      	ldrh	r2, [r7, #8]
 8003ee8:	8979      	ldrh	r1, [r7, #10]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f9d3 	bl	80042a0 <I2C_RequestMemoryWrite>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0a9      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2bff      	cmp	r3, #255	@ 0xff
 8003f14:	d90e      	bls.n	8003f34 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	22ff      	movs	r2, #255	@ 0xff
 8003f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	8979      	ldrh	r1, [r7, #10]
 8003f24:	2300      	movs	r3, #0
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fc47 	bl	80047c0 <I2C_TransferConfig>
 8003f32:	e00f      	b.n	8003f54 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	8979      	ldrh	r1, [r7, #10]
 8003f46:	2300      	movs	r3, #0
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fc36 	bl	80047c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fac6 	bl	80044ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e07b      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d034      	beq.n	800400c <HAL_I2C_Mem_Write+0x1c8>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d130      	bne.n	800400c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2180      	movs	r1, #128	@ 0x80
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fa3f 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e04d      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2bff      	cmp	r3, #255	@ 0xff
 8003fcc:	d90e      	bls.n	8003fec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	22ff      	movs	r2, #255	@ 0xff
 8003fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	8979      	ldrh	r1, [r7, #10]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fbeb 	bl	80047c0 <I2C_TransferConfig>
 8003fea:	e00f      	b.n	800400c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	8979      	ldrh	r1, [r7, #10]
 8003ffe:	2300      	movs	r3, #0
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fbda 	bl	80047c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d19e      	bne.n	8003f54 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 faac 	bl	8004578 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e01a      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2220      	movs	r2, #32
 8004030:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <HAL_I2C_Mem_Write+0x224>)
 800403e:	400b      	ands	r3, r1
 8004040:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	fe00e800 	.word	0xfe00e800

0800406c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	817b      	strh	r3, [r7, #10]
 800407e:	460b      	mov	r3, r1
 8004080:	813b      	strh	r3, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b20      	cmp	r3, #32
 8004090:	f040 80fd 	bne.w	800428e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_I2C_Mem_Read+0x34>
 800409a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0f1      	b.n	8004290 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_I2C_Mem_Read+0x4e>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e0ea      	b.n	8004290 <HAL_I2C_Mem_Read+0x224>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040c2:	f7fe f99d 	bl	8002400 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2319      	movs	r3, #25
 80040ce:	2201      	movs	r2, #1
 80040d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f9af 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0d5      	b.n	8004290 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2222      	movs	r2, #34	@ 0x22
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2240      	movs	r2, #64	@ 0x40
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800410c:	88f8      	ldrh	r0, [r7, #6]
 800410e:	893a      	ldrh	r2, [r7, #8]
 8004110:	8979      	ldrh	r1, [r7, #10]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	4603      	mov	r3, r0
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f913 	bl	8004348 <I2C_RequestMemoryRead>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0ad      	b.n	8004290 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2bff      	cmp	r3, #255	@ 0xff
 800413c:	d90e      	bls.n	800415c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	22ff      	movs	r2, #255	@ 0xff
 8004142:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004148:	b2da      	uxtb	r2, r3
 800414a:	8979      	ldrh	r1, [r7, #10]
 800414c:	4b52      	ldr	r3, [pc, #328]	@ (8004298 <HAL_I2C_Mem_Read+0x22c>)
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fb33 	bl	80047c0 <I2C_TransferConfig>
 800415a:	e00f      	b.n	800417c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416a:	b2da      	uxtb	r2, r3
 800416c:	8979      	ldrh	r1, [r7, #10]
 800416e:	4b4a      	ldr	r3, [pc, #296]	@ (8004298 <HAL_I2C_Mem_Read+0x22c>)
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fb22 	bl	80047c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004182:	2200      	movs	r2, #0
 8004184:	2104      	movs	r1, #4
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f956 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07c      	b.n	8004290 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d034      	beq.n	800423c <HAL_I2C_Mem_Read+0x1d0>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d130      	bne.n	800423c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e0:	2200      	movs	r2, #0
 80041e2:	2180      	movs	r1, #128	@ 0x80
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f927 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e04d      	b.n	8004290 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2bff      	cmp	r3, #255	@ 0xff
 80041fc:	d90e      	bls.n	800421c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	22ff      	movs	r2, #255	@ 0xff
 8004202:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004208:	b2da      	uxtb	r2, r3
 800420a:	8979      	ldrh	r1, [r7, #10]
 800420c:	2300      	movs	r3, #0
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 fad3 	bl	80047c0 <I2C_TransferConfig>
 800421a:	e00f      	b.n	800423c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422a:	b2da      	uxtb	r2, r3
 800422c:	8979      	ldrh	r1, [r7, #10]
 800422e:	2300      	movs	r3, #0
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fac2 	bl	80047c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d19a      	bne.n	800417c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f994 	bl	8004578 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e01a      	b.n	8004290 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2220      	movs	r2, #32
 8004260:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6859      	ldr	r1, [r3, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <HAL_I2C_Mem_Read+0x230>)
 800426e:	400b      	ands	r3, r1
 8004270:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	e000      	b.n	8004290 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800428e:	2302      	movs	r3, #2
  }
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	80002400 	.word	0x80002400
 800429c:	fe00e800 	.word	0xfe00e800

080042a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	4608      	mov	r0, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	461a      	mov	r2, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	817b      	strh	r3, [r7, #10]
 80042b2:	460b      	mov	r3, r1
 80042b4:	813b      	strh	r3, [r7, #8]
 80042b6:	4613      	mov	r3, r2
 80042b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	8979      	ldrh	r1, [r7, #10]
 80042c0:	4b20      	ldr	r3, [pc, #128]	@ (8004344 <I2C_RequestMemoryWrite+0xa4>)
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fa79 	bl	80047c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	69b9      	ldr	r1, [r7, #24]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f909 	bl	80044ea <I2C_WaitOnTXISFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e02c      	b.n	800433c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042e8:	893b      	ldrh	r3, [r7, #8]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80042f2:	e015      	b.n	8004320 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042f4:	893b      	ldrh	r3, [r7, #8]
 80042f6:	0a1b      	lsrs	r3, r3, #8
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f8ef 	bl	80044ea <I2C_WaitOnTXISFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e012      	b.n	800433c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004316:	893b      	ldrh	r3, [r7, #8]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2200      	movs	r2, #0
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f884 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	80002000 	.word	0x80002000

08004348 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	4608      	mov	r0, r1
 8004352:	4611      	mov	r1, r2
 8004354:	461a      	mov	r2, r3
 8004356:	4603      	mov	r3, r0
 8004358:	817b      	strh	r3, [r7, #10]
 800435a:	460b      	mov	r3, r1
 800435c:	813b      	strh	r3, [r7, #8]
 800435e:	4613      	mov	r3, r2
 8004360:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	8979      	ldrh	r1, [r7, #10]
 8004368:	4b20      	ldr	r3, [pc, #128]	@ (80043ec <I2C_RequestMemoryRead+0xa4>)
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	2300      	movs	r3, #0
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fa26 	bl	80047c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	69b9      	ldr	r1, [r7, #24]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f8b6 	bl	80044ea <I2C_WaitOnTXISFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e02c      	b.n	80043e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800438e:	893b      	ldrh	r3, [r7, #8]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	629a      	str	r2, [r3, #40]	@ 0x28
 8004398:	e015      	b.n	80043c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800439a:	893b      	ldrh	r3, [r7, #8]
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	b29b      	uxth	r3, r3
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	69b9      	ldr	r1, [r7, #24]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f89c 	bl	80044ea <I2C_WaitOnTXISFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e012      	b.n	80043e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043bc:	893b      	ldrh	r3, [r7, #8]
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2200      	movs	r2, #0
 80043ce:	2140      	movs	r1, #64	@ 0x40
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f831 	bl	8004438 <I2C_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	80002000 	.word	0x80002000

080043f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b02      	cmp	r3, #2
 8004404:	d103      	bne.n	800440e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d007      	beq.n	800442c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	619a      	str	r2, [r3, #24]
  }
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004448:	e03b      	b.n	80044c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8d6 	bl	8004600 <I2C_IsErrorOccurred>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e041      	b.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d02d      	beq.n	80044c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004466:	f7fd ffcb 	bl	8002400 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d302      	bcc.n	800447c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d122      	bne.n	80044c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	429a      	cmp	r2, r3
 8004498:	d113      	bne.n	80044c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	f043 0220 	orr.w	r2, r3, #32
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e00f      	b.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4013      	ands	r3, r2
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	bf0c      	ite	eq
 80044d2:	2301      	moveq	r3, #1
 80044d4:	2300      	movne	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d0b4      	beq.n	800444a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044f6:	e033      	b.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f87f 	bl	8004600 <I2C_IsErrorOccurred>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e031      	b.n	8004570 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d025      	beq.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004514:	f7fd ff74 	bl	8002400 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	429a      	cmp	r2, r3
 8004522:	d302      	bcc.n	800452a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d11a      	bne.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b02      	cmp	r3, #2
 8004536:	d013      	beq.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e007      	b.n	8004570 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d1c4      	bne.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004584:	e02f      	b.n	80045e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f838 	bl	8004600 <I2C_IsErrorOccurred>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e02d      	b.n	80045f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fd ff31 	bl	8002400 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d11a      	bne.n	80045e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d013      	beq.n	80045e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e007      	b.n	80045f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d1c8      	bne.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	@ 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	d068      	beq.n	80046fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2210      	movs	r2, #16
 8004632:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004634:	e049      	b.n	80046ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d045      	beq.n	80046ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800463e:	f7fd fedf 	bl	8002400 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	d302      	bcc.n	8004654 <I2C_IsErrorOccurred+0x54>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d13a      	bne.n	80046ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800465e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004666:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004676:	d121      	bne.n	80046bc <I2C_IsErrorOccurred+0xbc>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800467e:	d01d      	beq.n	80046bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b20      	cmp	r3, #32
 8004684:	d01a      	beq.n	80046bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004694:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004696:	f7fd feb3 	bl	8002400 <HAL_GetTick>
 800469a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800469c:	e00e      	b.n	80046bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800469e:	f7fd feaf 	bl	8002400 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b19      	cmp	r3, #25
 80046aa:	d907      	bls.n	80046bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	f043 0320 	orr.w	r3, r3, #32
 80046b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80046ba:	e006      	b.n	80046ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d1e9      	bne.n	800469e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d003      	beq.n	80046e0 <I2C_IsErrorOccurred+0xe0>
 80046d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0aa      	beq.n	8004636 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2220      	movs	r2, #32
 80046ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00b      	beq.n	8004728 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004720:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	f043 0308 	orr.w	r3, r3, #8
 8004738:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004742:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	f043 0302 	orr.w	r3, r3, #2
 800475a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004764:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800476c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01c      	beq.n	80047ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff fe3b 	bl	80043f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b0d      	ldr	r3, [pc, #52]	@ (80047bc <I2C_IsErrorOccurred+0x1bc>)
 8004786:	400b      	ands	r3, r1
 8004788:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	431a      	orrs	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80047ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3728      	adds	r7, #40	@ 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	fe00e800 	.word	0xfe00e800

080047c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	817b      	strh	r3, [r7, #10]
 80047ce:	4613      	mov	r3, r2
 80047d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047d2:	897b      	ldrh	r3, [r7, #10]
 80047d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047d8:	7a7b      	ldrb	r3, [r7, #9]
 80047da:	041b      	lsls	r3, r3, #16
 80047dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	0d5b      	lsrs	r3, r3, #21
 80047fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80047fe:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <I2C_TransferConfig+0x60>)
 8004800:	430b      	orrs	r3, r1
 8004802:	43db      	mvns	r3, r3
 8004804:	ea02 0103 	and.w	r1, r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	03ff63ff 	.word	0x03ff63ff

08004824 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b20      	cmp	r3, #32
 8004838:	d138      	bne.n	80048ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004844:	2302      	movs	r3, #2
 8004846:	e032      	b.n	80048ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2224      	movs	r2, #36	@ 0x24
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0201 	bic.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004876:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6819      	ldr	r1, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d139      	bne.n	8004944 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048da:	2302      	movs	r3, #2
 80048dc:	e033      	b.n	8004946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2224      	movs	r2, #36	@ 0x24
 80048ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800490c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	e000      	b.n	8004946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004944:	2302      	movs	r3, #2
  }
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0c0      	b.n	8004ae6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f00a f9bb 	bl	800ecf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2203      	movs	r2, #3
 8004982:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f003 fef1 	bl	8008772 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004990:	2300      	movs	r3, #0
 8004992:	73fb      	strb	r3, [r7, #15]
 8004994:	e03e      	b.n	8004a14 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004996:	7bfa      	ldrb	r2, [r7, #15]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	440b      	add	r3, r1
 80049a4:	3311      	adds	r3, #17
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	440b      	add	r3, r1
 80049b8:	3310      	adds	r3, #16
 80049ba:	7bfa      	ldrb	r2, [r7, #15]
 80049bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	3313      	adds	r3, #19
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	3320      	adds	r3, #32
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049e6:	7bfa      	ldrb	r2, [r7, #15]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	440b      	add	r3, r1
 80049f4:	3324      	adds	r3, #36	@ 0x24
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	440b      	add	r3, r1
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	3301      	adds	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	791b      	ldrb	r3, [r3, #4]
 8004a18:	7bfa      	ldrb	r2, [r7, #15]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d3bb      	bcc.n	8004996 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
 8004a22:	e044      	b.n	8004aae <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	440b      	add	r3, r1
 8004a32:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a3a:	7bfa      	ldrb	r2, [r7, #15]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	440b      	add	r3, r1
 8004a5e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	440b      	add	r3, r1
 8004a74:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a7c:	7bfa      	ldrb	r2, [r7, #15]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	440b      	add	r3, r1
 8004a8a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	440b      	add	r3, r1
 8004aa0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	791b      	ldrb	r3, [r3, #4]
 8004ab2:	7bfa      	ldrb	r2, [r7, #15]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d3b5      	bcc.n	8004a24 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004ac4:	f003 fe70 	bl	80087a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7a9b      	ldrb	r3, [r3, #10]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d102      	bne.n	8004ae4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f001 fc0e 	bl	8006300 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_PCD_Start+0x16>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e012      	b.n	8004b2a <HAL_PCD_Start+0x3c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f003 fe17 	bl	8008744 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f005 fbf4 	bl	800a308 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f005 fbf9 	bl	800a336 <USB_ReadInterrupts>
 8004b44:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb06 	bl	8005162 <PCD_EP_ISR_Handler>

    return;
 8004b56:	e110      	b.n	8004d7a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d013      	beq.n	8004b8a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b74:	b292      	uxth	r2, r2
 8004b76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f00a f94b 	bl	800ee16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b80:	2100      	movs	r1, #0
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f8fc 	bl	8004d80 <HAL_PCD_SetAddress>

    return;
 8004b88:	e0f7      	b.n	8004d7a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00c      	beq.n	8004bae <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004bac:	e0e5      	b.n	8004d7a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00c      	beq.n	8004bd2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bca:	b292      	uxth	r2, r2
 8004bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004bd0:	e0d3      	b.n	8004d7a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d034      	beq.n	8004c46 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0204 	bic.w	r2, r2, #4
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0208 	bic.w	r2, r2, #8
 8004c06:	b292      	uxth	r2, r2
 8004c08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d107      	bne.n	8004c26 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c1e:	2100      	movs	r1, #0
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f00a faeb 	bl	800f1fc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f00a f92e 	bl	800ee88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004c44:	e099      	b.n	8004d7a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d027      	beq.n	8004ca0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0208 	orr.w	r2, r2, #8
 8004c62:	b292      	uxth	r2, r2
 8004c64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0204 	orr.w	r2, r2, #4
 8004c92:	b292      	uxth	r2, r2
 8004c94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f00a f8db 	bl	800ee54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c9e:	e06c      	b.n	8004d7a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d040      	beq.n	8004d2c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cbc:	b292      	uxth	r2, r2
 8004cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d12b      	bne.n	8004d24 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0204 	orr.w	r2, r2, #4
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0208 	orr.w	r2, r2, #8
 8004cf6:	b292      	uxth	r2, r2
 8004cf8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	089b      	lsrs	r3, r3, #2
 8004d10:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f00a fa6d 	bl	800f1fc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004d22:	e02a      	b.n	8004d7a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f00a f895 	bl	800ee54 <HAL_PCD_SuspendCallback>
    return;
 8004d2a:	e026      	b.n	8004d7a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00f      	beq.n	8004d56 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f00a f853 	bl	800edfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d54:	e011      	b.n	8004d7a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00c      	beq.n	8004d7a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d72:	b292      	uxth	r2, r2
 8004d74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d78:	bf00      	nop
  }
}
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_PCD_SetAddress+0x1a>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e012      	b.n	8004dc0 <HAL_PCD_SetAddress+0x40>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	4611      	mov	r1, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f005 fa95 	bl	800a2e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	70fb      	strb	r3, [r7, #3]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	803b      	strh	r3, [r7, #0]
 8004dde:	4613      	mov	r3, r2
 8004de0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da0e      	bge.n	8004e0c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	f003 0207 	and.w	r2, r3, #7
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	3310      	adds	r3, #16
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	705a      	strb	r2, [r3, #1]
 8004e0a:	e00e      	b.n	8004e2a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	f003 0207 	and.w	r2, r3, #7
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4413      	add	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004e36:	883b      	ldrh	r3, [r7, #0]
 8004e38:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	78ba      	ldrb	r2, [r7, #2]
 8004e44:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e46:	78bb      	ldrb	r3, [r7, #2]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d102      	bne.n	8004e52 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_PCD_EP_Open+0x98>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e00e      	b.n	8004e7e <HAL_PCD_EP_Open+0xb6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68f9      	ldr	r1, [r7, #12]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f003 fcb8 	bl	80087e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004e7c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da0e      	bge.n	8004eb8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	f003 0207 	and.w	r2, r3, #7
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	3310      	adds	r3, #16
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	705a      	strb	r2, [r3, #1]
 8004eb6:	e00e      	b.n	8004ed6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eb8:	78fb      	ldrb	r3, [r7, #3]
 8004eba:	f003 0207 	and.w	r2, r3, #7
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_PCD_EP_Close+0x6a>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e00e      	b.n	8004f0e <HAL_PCD_EP_Close+0x88>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68f9      	ldr	r1, [r7, #12]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f004 f958 	bl	80091b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b086      	sub	sp, #24
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	460b      	mov	r3, r1
 8004f24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f26:	7afb      	ldrb	r3, [r7, #11]
 8004f28:	f003 0207 	and.w	r2, r3, #7
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2200      	movs	r2, #0
 8004f54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f56:	7afb      	ldrb	r3, [r7, #11]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f004 fb10 	bl	800958e <USB_EPStartXfer>

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	f003 0207 	and.w	r2, r3, #7
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	440b      	add	r3, r1
 8004f96:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004f9a:	681b      	ldr	r3, [r3, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fb8:	7afb      	ldrb	r3, [r7, #11]
 8004fba:	f003 0207 	and.w	r2, r3, #7
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	3310      	adds	r3, #16
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2200      	movs	r2, #0
 8004fec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ff4:	7afb      	ldrb	r3, [r7, #11]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	4618      	mov	r0, r3
 8005008:	f004 fac1 	bl	800958e <USB_EPStartXfer>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	7912      	ldrb	r2, [r2, #4]
 800502c:	4293      	cmp	r3, r2
 800502e:	d901      	bls.n	8005034 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e03e      	b.n	80050b2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005038:	2b00      	cmp	r3, #0
 800503a:	da0e      	bge.n	800505a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 0207 	and.w	r2, r3, #7
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	3310      	adds	r3, #16
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4413      	add	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	705a      	strb	r2, [r3, #1]
 8005058:	e00c      	b.n	8005074 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4413      	add	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_PCD_EP_SetStall+0x7e>
 8005090:	2302      	movs	r3, #2
 8005092:	e00e      	b.n	80050b2 <HAL_PCD_EP_SetStall+0x9c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68f9      	ldr	r1, [r7, #12]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f005 f822 	bl	800a0ec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	7912      	ldrb	r2, [r2, #4]
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e040      	b.n	800515a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	da0e      	bge.n	80050fe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	f003 0207 	and.w	r2, r3, #7
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	3310      	adds	r3, #16
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4413      	add	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	705a      	strb	r2, [r3, #1]
 80050fc:	e00e      	b.n	800511c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	f003 0207 	and.w	r2, r3, #7
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	4413      	add	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	b2da      	uxtb	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_PCD_EP_ClrStall+0x82>
 8005138:	2302      	movs	r3, #2
 800513a:	e00e      	b.n	800515a <HAL_PCD_EP_ClrStall+0xa0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	4618      	mov	r0, r3
 800514c:	f005 f81f 	bl	800a18e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b092      	sub	sp, #72	@ 0x48
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800516a:	e333      	b.n	80057d4 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005174:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005176:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005182:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005186:	2b00      	cmp	r3, #0
 8005188:	f040 8108 	bne.w	800539c <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800518c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b00      	cmp	r3, #0
 8005194:	d14c      	bne.n	8005230 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80051a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a6:	813b      	strh	r3, [r7, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	893b      	ldrh	r3, [r7, #8]
 80051ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3310      	adds	r3, #16
 80051be:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	4413      	add	r3, r2
 80051da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	441a      	add	r2, r3
 80051f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051f6:	2100      	movs	r1, #0
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f009 fde4 	bl	800edc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	7b1b      	ldrb	r3, [r3, #12]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 82e5 	beq.w	80057d4 <PCD_EP_ISR_Handler+0x672>
 800520a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 82e0 	bne.w	80057d4 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	7b1b      	ldrb	r3, [r3, #12]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800521e:	b2da      	uxtb	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	731a      	strb	r2, [r3, #12]
 800522e:	e2d1      	b.n	80057d4 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005236:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005240:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005246:	2b00      	cmp	r3, #0
 8005248:	d032      	beq.n	80052b0 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005252:	b29b      	uxth	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	4413      	add	r3, r2
 8005264:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800526e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005270:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800527c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800527e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005282:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005284:	b29b      	uxth	r3, r3
 8005286:	f005 f8a9 	bl	800a3dc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29a      	uxth	r2, r3
 8005292:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005296:	4013      	ands	r3, r2
 8005298:	817b      	strh	r3, [r7, #10]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	897a      	ldrh	r2, [r7, #10]
 80052a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052a4:	b292      	uxth	r2, r2
 80052a6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f009 fd5f 	bl	800ed6c <HAL_PCD_SetupStageCallback>
 80052ae:	e291      	b.n	80057d4 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f280 828d 	bge.w	80057d4 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80052c6:	4013      	ands	r3, r2
 80052c8:	81fb      	strh	r3, [r7, #14]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	89fa      	ldrh	r2, [r7, #14]
 80052d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052d4:	b292      	uxth	r2, r2
 80052d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4413      	add	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	4413      	add	r3, r2
 80052f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d019      	beq.n	800533c <PCD_EP_ISR_Handler+0x1da>
 8005308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d015      	beq.n	800533c <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005316:	6959      	ldr	r1, [r3, #20]
 8005318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800531a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800531c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800531e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005320:	b29b      	uxth	r3, r3
 8005322:	f005 f85b 	bl	800a3dc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005328:	695a      	ldr	r2, [r3, #20]
 800532a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	441a      	add	r2, r3
 8005330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005332:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005334:	2100      	movs	r1, #0
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f009 fd2a 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005344:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005346:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800534a:	2b00      	cmp	r3, #0
 800534c:	f040 8242 	bne.w	80057d4 <PCD_EP_ISR_Handler+0x672>
 8005350:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005352:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005356:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800535a:	f000 823b 	beq.w	80057d4 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800536a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536e:	81bb      	strh	r3, [r7, #12]
 8005370:	89bb      	ldrh	r3, [r7, #12]
 8005372:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005376:	81bb      	strh	r3, [r7, #12]
 8005378:	89bb      	ldrh	r3, [r7, #12]
 800537a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800537e:	81bb      	strh	r3, [r7, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	89bb      	ldrh	r3, [r7, #12]
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]
 800539a:	e21b      	b.n	80057d4 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80053ae:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f280 80f1 	bge.w	800559a <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80053ce:	4013      	ands	r3, r2
 80053d0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80053e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053e6:	b292      	uxth	r2, r2
 80053e8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80053ea:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4413      	add	r3, r2
 80053fe:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005402:	7b1b      	ldrb	r3, [r3, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d123      	bne.n	8005450 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005410:	b29b      	uxth	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4413      	add	r3, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	4413      	add	r3, r2
 8005422:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800542c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8005430:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 808b 	beq.w	8005550 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005440:	6959      	ldr	r1, [r3, #20]
 8005442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005444:	88da      	ldrh	r2, [r3, #6]
 8005446:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800544a:	f004 ffc7 	bl	800a3dc <USB_ReadPMA>
 800544e:	e07f      	b.n	8005550 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005452:	78db      	ldrb	r3, [r3, #3]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d109      	bne.n	800546c <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005458:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800545a:	461a      	mov	r2, r3
 800545c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f9c6 	bl	80057f0 <HAL_PCD_EP_DB_Receive>
 8005464:	4603      	mov	r3, r0
 8005466:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800546a:	e071      	b.n	8005550 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005486:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	441a      	add	r2, r3
 8005496:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800549c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d022      	beq.n	800550c <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	4413      	add	r3, r2
 80054e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80054ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d02c      	beq.n	8005550 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054fc:	6959      	ldr	r1, [r3, #20]
 80054fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005500:	891a      	ldrh	r2, [r3, #8]
 8005502:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005506:	f004 ff69 	bl	800a3dc <USB_ReadPMA>
 800550a:	e021      	b.n	8005550 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005514:	b29b      	uxth	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	4413      	add	r3, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	4413      	add	r3, r2
 8005526:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005530:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005534:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005538:	2b00      	cmp	r3, #0
 800553a:	d009      	beq.n	8005550 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005542:	6959      	ldr	r1, [r3, #20]
 8005544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005546:	895a      	ldrh	r2, [r3, #10]
 8005548:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800554c:	f004 ff46 	bl	800a3dc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005558:	441a      	add	r2, r3
 800555a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800555c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800555e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005566:	441a      	add	r2, r3
 8005568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800556a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800556c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <PCD_EP_ISR_Handler+0x41e>
 8005574:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	429a      	cmp	r2, r3
 800557e:	d206      	bcs.n	800558e <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f009 fc02 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
 800558c:	e005      	b.n	800559a <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005594:	4618      	mov	r0, r3
 8005596:	f003 fffa 	bl	800958e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800559a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800559c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8117 	beq.w	80057d4 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80055a6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	3310      	adds	r3, #16
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	4413      	add	r3, r2
 80055b8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80055d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	441a      	add	r2, r3
 80055e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80055e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80055f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055f4:	78db      	ldrb	r3, [r3, #3]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	f040 80a1 	bne.w	800573e <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80055fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055fe:	2200      	movs	r2, #0
 8005600:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005604:	7b1b      	ldrb	r3, [r3, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8092 	beq.w	8005730 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800560c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800560e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d046      	beq.n	80056a4 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d126      	bne.n	800566c <PCD_EP_ISR_Handler+0x50a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800562c:	b29b      	uxth	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	4413      	add	r3, r2
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	00da      	lsls	r2, r3, #3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	4413      	add	r3, r2
 8005640:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005650:	b29a      	uxth	r2, r3
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	801a      	strh	r2, [r3, #0]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005664:	b29a      	uxth	r2, r3
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	801a      	strh	r2, [r3, #0]
 800566a:	e061      	b.n	8005730 <PCD_EP_ISR_Handler+0x5ce>
 800566c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d15d      	bne.n	8005730 <PCD_EP_ISR_Handler+0x5ce>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005682:	b29b      	uxth	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	00da      	lsls	r2, r3, #3
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	2200      	movs	r2, #0
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	e045      	b.n	8005730 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d126      	bne.n	8005700 <PCD_EP_ISR_Handler+0x59e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	4413      	add	r3, r2
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	00da      	lsls	r2, r3, #3
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	4413      	add	r3, r2
 80056d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056d8:	623b      	str	r3, [r7, #32]
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	801a      	strh	r2, [r3, #0]
 80056fe:	e017      	b.n	8005730 <PCD_EP_ISR_Handler+0x5ce>
 8005700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d113      	bne.n	8005730 <PCD_EP_ISR_Handler+0x5ce>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005710:	b29b      	uxth	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005716:	4413      	add	r3, r2
 8005718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800571a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	00da      	lsls	r2, r3, #3
 8005720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005722:	4413      	add	r3, r2
 8005724:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800572a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572c:	2200      	movs	r2, #0
 800572e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f009 fb45 	bl	800edc6 <HAL_PCD_DataInStageCallback>
 800573c:	e04a      	b.n	80057d4 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800573e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d13f      	bne.n	80057c8 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005750:	b29b      	uxth	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	4413      	add	r3, r2
 8005762:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800576c:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800576e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005774:	429a      	cmp	r2, r3
 8005776:	d906      	bls.n	8005786 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8005778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005782:	619a      	str	r2, [r3, #24]
 8005784:	e002      	b.n	800578c <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005788:	2200      	movs	r2, #0
 800578a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800578c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f009 fb13 	bl	800edc6 <HAL_PCD_DataInStageCallback>
 80057a0:	e018      	b.n	80057d4 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80057a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80057a8:	441a      	add	r2, r3
 80057aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ac:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80057ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057b0:	69da      	ldr	r2, [r3, #28]
 80057b2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80057b4:	441a      	add	r2, r3
 80057b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057b8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057c0:	4618      	mov	r0, r3
 80057c2:	f003 fee4 	bl	800958e <USB_EPStartXfer>
 80057c6:	e005      	b.n	80057d4 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80057c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80057ca:	461a      	mov	r2, r3
 80057cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f917 	bl	8005a02 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80057dc:	b29b      	uxth	r3, r3
 80057de:	b21b      	sxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f6ff acc3 	blt.w	800516c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3748      	adds	r7, #72	@ 0x48
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d07c      	beq.n	8005902 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4413      	add	r3, r2
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	4413      	add	r3, r2
 8005822:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800582c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	8b7b      	ldrh	r3, [r7, #26]
 8005834:	429a      	cmp	r2, r3
 8005836:	d306      	bcc.n	8005846 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	8b7b      	ldrh	r3, [r7, #26]
 800583e:	1ad2      	subs	r2, r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	619a      	str	r2, [r3, #24]
 8005844:	e002      	b.n	800584c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2200      	movs	r2, #0
 800584a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d123      	bne.n	800589c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800586a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800586e:	833b      	strh	r3, [r7, #24]
 8005870:	8b3b      	ldrh	r3, [r7, #24]
 8005872:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005876:	833b      	strh	r3, [r7, #24]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	8b3b      	ldrh	r3, [r7, #24]
 8005888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800588c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005898:	b29b      	uxth	r3, r3
 800589a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01f      	beq.n	80058e6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c0:	82fb      	strh	r3, [r7, #22]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	441a      	add	r2, r3
 80058d0:	8afb      	ldrh	r3, [r7, #22]
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80058e6:	8b7b      	ldrh	r3, [r7, #26]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8085 	beq.w	80059f8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6959      	ldr	r1, [r3, #20]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	891a      	ldrh	r2, [r3, #8]
 80058fa:	8b7b      	ldrh	r3, [r7, #26]
 80058fc:	f004 fd6e 	bl	800a3dc <USB_ReadPMA>
 8005900:	e07a      	b.n	80059f8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800590a:	b29b      	uxth	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4413      	add	r3, r2
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	4413      	add	r3, r2
 800591c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005926:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	8b7b      	ldrh	r3, [r7, #26]
 800592e:	429a      	cmp	r2, r3
 8005930:	d306      	bcc.n	8005940 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	8b7b      	ldrh	r3, [r7, #26]
 8005938:	1ad2      	subs	r2, r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	619a      	str	r2, [r3, #24]
 800593e:	e002      	b.n	8005946 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2200      	movs	r2, #0
 8005944:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d123      	bne.n	8005996 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005968:	83fb      	strh	r3, [r7, #30]
 800596a:	8bfb      	ldrh	r3, [r7, #30]
 800596c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005970:	83fb      	strh	r3, [r7, #30]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	8bfb      	ldrh	r3, [r7, #30]
 8005982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800598a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800598e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005992:	b29b      	uxth	r3, r3
 8005994:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d11f      	bne.n	80059e0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ba:	83bb      	strh	r3, [r7, #28]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	441a      	add	r2, r3
 80059ca:	8bbb      	ldrh	r3, [r7, #28]
 80059cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059dc:	b29b      	uxth	r3, r3
 80059de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059e0:	8b7b      	ldrh	r3, [r7, #26]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d008      	beq.n	80059f8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	6959      	ldr	r1, [r3, #20]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	895a      	ldrh	r2, [r3, #10]
 80059f2:	8b7b      	ldrh	r3, [r7, #26]
 80059f4:	f004 fcf2 	bl	800a3dc <USB_ReadPMA>
    }
  }

  return count;
 80059f8:	8b7b      	ldrh	r3, [r7, #26]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b0a6      	sub	sp, #152	@ 0x98
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 81f7 	beq.w	8005e0a <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4413      	add	r3, r2
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a40:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	699a      	ldr	r2, [r3, #24]
 8005a48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d907      	bls.n	8005a60 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	699a      	ldr	r2, [r3, #24]
 8005a54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a58:	1ad2      	subs	r2, r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	619a      	str	r2, [r3, #24]
 8005a5e:	e002      	b.n	8005a66 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2200      	movs	r2, #0
 8005a64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 80e1 	bne.w	8005c32 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d126      	bne.n	8005ac6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	4413      	add	r3, r2
 8005a8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	00da      	lsls	r2, r3, #3
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	4413      	add	r3, r2
 8005a9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac2:	801a      	strh	r2, [r3, #0]
 8005ac4:	e01a      	b.n	8005afc <HAL_PCD_EP_DB_Transmit+0xfa>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d116      	bne.n	8005afc <HAL_PCD_EP_DB_Transmit+0xfa>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae2:	4413      	add	r3, r2
 8005ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	00da      	lsls	r2, r3, #3
 8005aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aee:	4413      	add	r3, r2
 8005af0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af8:	2200      	movs	r2, #0
 8005afa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d126      	bne.n	8005b58 <HAL_PCD_EP_DB_Transmit+0x156>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	4413      	add	r3, r2
 8005b20:	623b      	str	r3, [r7, #32]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	00da      	lsls	r2, r3, #3
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b30:	61fb      	str	r3, [r7, #28]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	e017      	b.n	8005b88 <HAL_PCD_EP_DB_Transmit+0x186>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d113      	bne.n	8005b88 <HAL_PCD_EP_DB_Transmit+0x186>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6e:	4413      	add	r3, r2
 8005b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	00da      	lsls	r2, r3, #3
 8005b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	2200      	movs	r2, #0
 8005b86:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	78db      	ldrb	r3, [r3, #3]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d123      	bne.n	8005bd8 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005baa:	837b      	strh	r3, [r7, #26]
 8005bac:	8b7b      	ldrh	r3, [r7, #26]
 8005bae:	f083 0320 	eor.w	r3, r3, #32
 8005bb2:	837b      	strh	r3, [r7, #26]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	8b7b      	ldrh	r3, [r7, #26]
 8005bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f009 f8f1 	bl	800edc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01f      	beq.n	8005c2e <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c08:	833b      	strh	r3, [r7, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	8b3b      	ldrh	r3, [r7, #24]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e31f      	b.n	8006272 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d021      	beq.n	8005c80 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	441a      	add	r2, r3
 8005c68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	f040 82ca 	bne.w	8006220 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c94:	441a      	add	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	69da      	ldr	r2, [r3, #28]
 8005c9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ca2:	441a      	add	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	6a1a      	ldr	r2, [r3, #32]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d309      	bcc.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cc0:	1ad2      	subs	r2, r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	621a      	str	r2, [r3, #32]
 8005cc6:	e015      	b.n	8005cf4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d107      	bne.n	8005ce0 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8005cd0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005cde:	e009      	b.n	8005cf4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d15f      	bne.n	8005dbc <HAL_PCD_EP_DB_Transmit+0x3ba>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d10:	4413      	add	r3, r2
 8005d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	00da      	lsls	r2, r3, #3
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <HAL_PCD_EP_DB_Transmit+0x34e>
 8005d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4c:	801a      	strh	r2, [r3, #0]
 8005d4e:	e051      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005d50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d52:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d54:	d816      	bhi.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x382>
 8005d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <HAL_PCD_EP_DB_Transmit+0x36a>
 8005d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d68:	3301      	adds	r3, #1
 8005d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	029b      	lsls	r3, r3, #10
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d80:	801a      	strh	r2, [r3, #0]
 8005d82:	e037      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005d84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <HAL_PCD_EP_DB_Transmit+0x398>
 8005d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d96:	3b01      	subs	r3, #1
 8005d98:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	029b      	lsls	r3, r3, #10
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	4313      	orrs	r3, r2
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	e01b      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	785b      	ldrb	r3, [r3, #1]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d117      	bne.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dd8:	4413      	add	r3, r2
 8005dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	00da      	lsls	r2, r3, #3
 8005de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005de4:	4413      	add	r3, r2
 8005de6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6959      	ldr	r1, [r3, #20]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	891a      	ldrh	r2, [r3, #8]
 8005e00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f004 faa7 	bl	800a356 <USB_WritePMA>
 8005e08:	e20a      	b.n	8006220 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	4413      	add	r3, r2
 8005e24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e2e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d307      	bcc.n	8005e4e <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e46:	1ad2      	subs	r2, r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	619a      	str	r2, [r3, #24]
 8005e4c:	e002      	b.n	8005e54 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2200      	movs	r2, #0
 8005e52:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 80f6 	bne.w	800604a <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d126      	bne.n	8005eb4 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e7a:	4413      	add	r3, r2
 8005e7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	00da      	lsls	r2, r3, #3
 8005e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e86:	4413      	add	r3, r2
 8005e88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005eb0:	801a      	strh	r2, [r3, #0]
 8005eb2:	e01a      	b.n	8005eea <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d116      	bne.n	8005eea <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ed0:	4413      	add	r3, r2
 8005ed2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00da      	lsls	r2, r3, #3
 8005eda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ee4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	785b      	ldrb	r3, [r3, #1]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d12f      	bne.n	8005f5a <HAL_PCD_EP_DB_Transmit+0x558>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f12:	4413      	add	r3, r2
 8005f14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	00da      	lsls	r2, r3, #3
 8005f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f22:	4413      	add	r3, r2
 8005f24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f3e:	801a      	strh	r2, [r3, #0]
 8005f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	e01c      	b.n	8005f94 <HAL_PCD_EP_DB_Transmit+0x592>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d118      	bne.n	8005f94 <HAL_PCD_EP_DB_Transmit+0x592>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f72:	4413      	add	r3, r2
 8005f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	00da      	lsls	r2, r3, #3
 8005f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f82:	4413      	add	r3, r2
 8005f84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f90:	2200      	movs	r2, #0
 8005f92:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	78db      	ldrb	r3, [r3, #3]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d127      	bne.n	8005fec <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005fba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005fbe:	f083 0320 	eor.w	r3, r3, #32
 8005fc2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	441a      	add	r2, r3
 8005fd4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f008 fee7 	bl	800edc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ff8:	88fb      	ldrh	r3, [r7, #6]
 8005ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d121      	bne.n	8006046 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800603a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800603e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006042:	b29b      	uxth	r3, r3
 8006044:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	e113      	b.n	8006272 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d121      	bne.n	8006098 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800606e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	441a      	add	r2, r3
 8006080:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006094:	b29b      	uxth	r3, r3
 8006096:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800609e:	2b01      	cmp	r3, #1
 80060a0:	f040 80be 	bne.w	8006220 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	695a      	ldr	r2, [r3, #20]
 80060a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060ac:	441a      	add	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	69da      	ldr	r2, [r3, #28]
 80060b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060ba:	441a      	add	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6a1a      	ldr	r2, [r3, #32]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d309      	bcc.n	80060e0 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060d8:	1ad2      	subs	r2, r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	621a      	str	r2, [r3, #32]
 80060de:	e015      	b.n	800610c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d107      	bne.n	80060f8 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80060e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060ec:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80060f6:	e009      	b.n	800610c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2200      	movs	r2, #0
 8006102:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d15f      	bne.n	80061da <HAL_PCD_EP_DB_Transmit+0x7d8>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006128:	b29b      	uxth	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800612e:	4413      	add	r3, r2
 8006130:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	00da      	lsls	r2, r3, #3
 8006138:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800613a:	4413      	add	r3, r2
 800613c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006140:	667b      	str	r3, [r7, #100]	@ 0x64
 8006142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800614c:	b29a      	uxth	r2, r3
 800614e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006150:	801a      	strh	r2, [r3, #0]
 8006152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <HAL_PCD_EP_DB_Transmit+0x76c>
 8006158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006166:	b29a      	uxth	r2, r3
 8006168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	e04e      	b.n	800620c <HAL_PCD_EP_DB_Transmit+0x80a>
 800616e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006170:	2b3e      	cmp	r3, #62	@ 0x3e
 8006172:	d816      	bhi.n	80061a2 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006174:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	663b      	str	r3, [r7, #96]	@ 0x60
 800617a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_PCD_EP_DB_Transmit+0x788>
 8006184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006186:	3301      	adds	r3, #1
 8006188:	663b      	str	r3, [r7, #96]	@ 0x60
 800618a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29a      	uxth	r2, r3
 8006190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006192:	b29b      	uxth	r3, r3
 8006194:	029b      	lsls	r3, r3, #10
 8006196:	b29b      	uxth	r3, r3
 8006198:	4313      	orrs	r3, r2
 800619a:	b29a      	uxth	r2, r3
 800619c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	e034      	b.n	800620c <HAL_PCD_EP_DB_Transmit+0x80a>
 80061a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80061a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <HAL_PCD_EP_DB_Transmit+0x7b6>
 80061b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061b4:	3b01      	subs	r3, #1
 80061b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80061b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29a      	uxth	r2, r3
 80061be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	029b      	lsls	r3, r3, #10
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e018      	b.n	800620c <HAL_PCD_EP_DB_Transmit+0x80a>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d114      	bne.n	800620c <HAL_PCD_EP_DB_Transmit+0x80a>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061f0:	4413      	add	r3, r2
 80061f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	00da      	lsls	r2, r3, #3
 80061fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061fc:	4413      	add	r3, r2
 80061fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006202:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006206:	b29a      	uxth	r2, r3
 8006208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800620a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	6959      	ldr	r1, [r3, #20]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	895a      	ldrh	r2, [r3, #10]
 8006218:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800621a:	b29b      	uxth	r3, r3
 800621c:	f004 f89b 	bl	800a356 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800623a:	82fb      	strh	r3, [r7, #22]
 800623c:	8afb      	ldrh	r3, [r7, #22]
 800623e:	f083 0310 	eor.w	r3, r3, #16
 8006242:	82fb      	strh	r3, [r7, #22]
 8006244:	8afb      	ldrh	r3, [r7, #22]
 8006246:	f083 0320 	eor.w	r3, r3, #32
 800624a:	82fb      	strh	r3, [r7, #22]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8afb      	ldrh	r3, [r7, #22]
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3798      	adds	r7, #152	@ 0x98
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800627a:	b480      	push	{r7}
 800627c:	b087      	sub	sp, #28
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	817b      	strh	r3, [r7, #10]
 8006288:	4613      	mov	r3, r2
 800628a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800628c:	897b      	ldrh	r3, [r7, #10]
 800628e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00b      	beq.n	80062b0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006298:	897b      	ldrh	r3, [r7, #10]
 800629a:	f003 0207 	and.w	r2, r3, #7
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	3310      	adds	r3, #16
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e009      	b.n	80062c4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062b0:	897a      	ldrh	r2, [r7, #10]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062c4:	893b      	ldrh	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d107      	bne.n	80062da <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2200      	movs	r2, #0
 80062ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	80da      	strh	r2, [r3, #6]
 80062d8:	e00b      	b.n	80062f2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2201      	movs	r2, #1
 80062de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	0c1b      	lsrs	r3, r3, #16
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006324:	b29b      	uxth	r3, r3
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006338:	b29b      	uxth	r3, r3
 800633a:	f043 0302 	orr.w	r3, r3, #2
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d141      	bne.n	80063e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006362:	4b4b      	ldr	r3, [pc, #300]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800636a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800636e:	d131      	bne.n	80063d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006370:	4b47      	ldr	r3, [pc, #284]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006376:	4a46      	ldr	r2, [pc, #280]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800637c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006380:	4b43      	ldr	r3, [pc, #268]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006388:	4a41      	ldr	r2, [pc, #260]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800638e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006390:	4b40      	ldr	r3, [pc, #256]	@ (8006494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2232      	movs	r2, #50	@ 0x32
 8006396:	fb02 f303 	mul.w	r3, r2, r3
 800639a:	4a3f      	ldr	r2, [pc, #252]	@ (8006498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	0c9b      	lsrs	r3, r3, #18
 80063a2:	3301      	adds	r3, #1
 80063a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063a6:	e002      	b.n	80063ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ae:	4b38      	ldr	r3, [pc, #224]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ba:	d102      	bne.n	80063c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f2      	bne.n	80063a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063c2:	4b33      	ldr	r3, [pc, #204]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ce:	d158      	bne.n	8006482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e057      	b.n	8006484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063da:	4a2d      	ldr	r2, [pc, #180]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80063e4:	e04d      	b.n	8006482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ec:	d141      	bne.n	8006472 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063ee:	4b28      	ldr	r3, [pc, #160]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063fa:	d131      	bne.n	8006460 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063fc:	4b24      	ldr	r3, [pc, #144]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006402:	4a23      	ldr	r2, [pc, #140]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800640c:	4b20      	ldr	r3, [pc, #128]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006414:	4a1e      	ldr	r2, [pc, #120]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800641a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800641c:	4b1d      	ldr	r3, [pc, #116]	@ (8006494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2232      	movs	r2, #50	@ 0x32
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	4a1c      	ldr	r2, [pc, #112]	@ (8006498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	0c9b      	lsrs	r3, r3, #18
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006432:	e002      	b.n	800643a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3b01      	subs	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800643a:	4b15      	ldr	r3, [pc, #84]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006446:	d102      	bne.n	800644e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f2      	bne.n	8006434 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800644e:	4b10      	ldr	r3, [pc, #64]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645a:	d112      	bne.n	8006482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e011      	b.n	8006484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006460:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006466:	4a0a      	ldr	r2, [pc, #40]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800646c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006470:	e007      	b.n	8006482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006472:	4b07      	ldr	r3, [pc, #28]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800647a:	4a05      	ldr	r2, [pc, #20]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800647c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006480:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	40007000 	.word	0x40007000
 8006494:	20000000 	.word	0x20000000
 8006498:	431bde83 	.word	0x431bde83

0800649c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80064a0:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4a04      	ldr	r2, [pc, #16]	@ (80064b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064aa:	6093      	str	r3, [r2, #8]
}
 80064ac:	bf00      	nop
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40007000 	.word	0x40007000

080064bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e2fe      	b.n	8006acc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d075      	beq.n	80065c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064da:	4b97      	ldr	r3, [pc, #604]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 030c 	and.w	r3, r3, #12
 80064e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064e4:	4b94      	ldr	r3, [pc, #592]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b0c      	cmp	r3, #12
 80064f2:	d102      	bne.n	80064fa <HAL_RCC_OscConfig+0x3e>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d002      	beq.n	8006500 <HAL_RCC_OscConfig+0x44>
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d10b      	bne.n	8006518 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006500:	4b8d      	ldr	r3, [pc, #564]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d05b      	beq.n	80065c4 <HAL_RCC_OscConfig+0x108>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d157      	bne.n	80065c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e2d9      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006520:	d106      	bne.n	8006530 <HAL_RCC_OscConfig+0x74>
 8006522:	4b85      	ldr	r3, [pc, #532]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a84      	ldr	r2, [pc, #528]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	e01d      	b.n	800656c <HAL_RCC_OscConfig+0xb0>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006538:	d10c      	bne.n	8006554 <HAL_RCC_OscConfig+0x98>
 800653a:	4b7f      	ldr	r3, [pc, #508]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a7e      	ldr	r2, [pc, #504]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	4b7c      	ldr	r3, [pc, #496]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a7b      	ldr	r2, [pc, #492]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 800654c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e00b      	b.n	800656c <HAL_RCC_OscConfig+0xb0>
 8006554:	4b78      	ldr	r3, [pc, #480]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a77      	ldr	r2, [pc, #476]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 800655a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	4b75      	ldr	r3, [pc, #468]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a74      	ldr	r2, [pc, #464]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800656a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d013      	beq.n	800659c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fb ff44 	bl	8002400 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800657c:	f7fb ff40 	bl	8002400 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	@ 0x64
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e29e      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800658e:	4b6a      	ldr	r3, [pc, #424]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f0      	beq.n	800657c <HAL_RCC_OscConfig+0xc0>
 800659a:	e014      	b.n	80065c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659c:	f7fb ff30 	bl	8002400 <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a4:	f7fb ff2c 	bl	8002400 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b64      	cmp	r3, #100	@ 0x64
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e28a      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065b6:	4b60      	ldr	r3, [pc, #384]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f0      	bne.n	80065a4 <HAL_RCC_OscConfig+0xe8>
 80065c2:	e000      	b.n	80065c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d075      	beq.n	80066be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d2:	4b59      	ldr	r3, [pc, #356]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065dc:	4b56      	ldr	r3, [pc, #344]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b0c      	cmp	r3, #12
 80065ea:	d102      	bne.n	80065f2 <HAL_RCC_OscConfig+0x136>
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d002      	beq.n	80065f8 <HAL_RCC_OscConfig+0x13c>
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d11f      	bne.n	8006638 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065f8:	4b4f      	ldr	r3, [pc, #316]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <HAL_RCC_OscConfig+0x154>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e25d      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006610:	4b49      	ldr	r3, [pc, #292]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	4946      	ldr	r1, [pc, #280]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006620:	4313      	orrs	r3, r2
 8006622:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006624:	4b45      	ldr	r3, [pc, #276]	@ (800673c <HAL_RCC_OscConfig+0x280>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	f7fb fd0d 	bl	8002048 <HAL_InitTick>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d043      	beq.n	80066bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e249      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d023      	beq.n	8006688 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006640:	4b3d      	ldr	r3, [pc, #244]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a3c      	ldr	r2, [pc, #240]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800664a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7fb fed8 	bl	8002400 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006654:	f7fb fed4 	bl	8002400 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e232      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006666:	4b34      	ldr	r3, [pc, #208]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006672:	4b31      	ldr	r3, [pc, #196]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	061b      	lsls	r3, r3, #24
 8006680:	492d      	ldr	r1, [pc, #180]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006682:	4313      	orrs	r3, r2
 8006684:	604b      	str	r3, [r1, #4]
 8006686:	e01a      	b.n	80066be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006688:	4b2b      	ldr	r3, [pc, #172]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a2a      	ldr	r2, [pc, #168]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 800668e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006694:	f7fb feb4 	bl	8002400 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800669c:	f7fb feb0 	bl	8002400 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e20e      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066ae:	4b22      	ldr	r3, [pc, #136]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x1e0>
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d041      	beq.n	800674e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01c      	beq.n	800670c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066d2:	4b19      	ldr	r3, [pc, #100]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 80066d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066d8:	4a17      	ldr	r2, [pc, #92]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e2:	f7fb fe8d 	bl	8002400 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ea:	f7fb fe89 	bl	8002400 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e1e7      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 80066fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0ef      	beq.n	80066ea <HAL_RCC_OscConfig+0x22e>
 800670a:	e020      	b.n	800674e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800670c:	4b0a      	ldr	r3, [pc, #40]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 800670e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006712:	4a09      	ldr	r2, [pc, #36]	@ (8006738 <HAL_RCC_OscConfig+0x27c>)
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800671c:	f7fb fe70 	bl	8002400 <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006722:	e00d      	b.n	8006740 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006724:	f7fb fe6c 	bl	8002400 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d906      	bls.n	8006740 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e1ca      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000
 800673c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006740:	4b8c      	ldr	r3, [pc, #560]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 8006742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1ea      	bne.n	8006724 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 80a6 	beq.w	80068a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800675c:	2300      	movs	r3, #0
 800675e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006760:	4b84      	ldr	r3, [pc, #528]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 8006762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_RCC_OscConfig+0x2b4>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <HAL_RCC_OscConfig+0x2b6>
 8006770:	2300      	movs	r3, #0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006776:	4b7f      	ldr	r3, [pc, #508]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677a:	4a7e      	ldr	r2, [pc, #504]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 800677c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006780:	6593      	str	r3, [r2, #88]	@ 0x58
 8006782:	4b7c      	ldr	r3, [pc, #496]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 8006784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800678e:	2301      	movs	r3, #1
 8006790:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006792:	4b79      	ldr	r3, [pc, #484]	@ (8006978 <HAL_RCC_OscConfig+0x4bc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679a:	2b00      	cmp	r3, #0
 800679c:	d118      	bne.n	80067d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800679e:	4b76      	ldr	r3, [pc, #472]	@ (8006978 <HAL_RCC_OscConfig+0x4bc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a75      	ldr	r2, [pc, #468]	@ (8006978 <HAL_RCC_OscConfig+0x4bc>)
 80067a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067aa:	f7fb fe29 	bl	8002400 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067b2:	f7fb fe25 	bl	8002400 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e183      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067c4:	4b6c      	ldr	r3, [pc, #432]	@ (8006978 <HAL_RCC_OscConfig+0x4bc>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f0      	beq.n	80067b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d108      	bne.n	80067ea <HAL_RCC_OscConfig+0x32e>
 80067d8:	4b66      	ldr	r3, [pc, #408]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067de:	4a65      	ldr	r2, [pc, #404]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067e8:	e024      	b.n	8006834 <HAL_RCC_OscConfig+0x378>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b05      	cmp	r3, #5
 80067f0:	d110      	bne.n	8006814 <HAL_RCC_OscConfig+0x358>
 80067f2:	4b60      	ldr	r3, [pc, #384]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f8:	4a5e      	ldr	r2, [pc, #376]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 80067fa:	f043 0304 	orr.w	r3, r3, #4
 80067fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006802:	4b5c      	ldr	r3, [pc, #368]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006808:	4a5a      	ldr	r2, [pc, #360]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006812:	e00f      	b.n	8006834 <HAL_RCC_OscConfig+0x378>
 8006814:	4b57      	ldr	r3, [pc, #348]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681a:	4a56      	ldr	r2, [pc, #344]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006824:	4b53      	ldr	r3, [pc, #332]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682a:	4a52      	ldr	r2, [pc, #328]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 800682c:	f023 0304 	bic.w	r3, r3, #4
 8006830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d016      	beq.n	800686a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683c:	f7fb fde0 	bl	8002400 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006842:	e00a      	b.n	800685a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006844:	f7fb fddc 	bl	8002400 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e138      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800685a:	4b46      	ldr	r3, [pc, #280]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 800685c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0ed      	beq.n	8006844 <HAL_RCC_OscConfig+0x388>
 8006868:	e015      	b.n	8006896 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686a:	f7fb fdc9 	bl	8002400 <HAL_GetTick>
 800686e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006870:	e00a      	b.n	8006888 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006872:	f7fb fdc5 	bl	8002400 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006880:	4293      	cmp	r3, r2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e121      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006888:	4b3a      	ldr	r3, [pc, #232]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 800688a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1ed      	bne.n	8006872 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006896:	7ffb      	ldrb	r3, [r7, #31]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d105      	bne.n	80068a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800689c:	4b35      	ldr	r3, [pc, #212]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a0:	4a34      	ldr	r2, [pc, #208]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 80068a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d03c      	beq.n	800692e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01c      	beq.n	80068f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 80068be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068cc:	f7fb fd98 	bl	8002400 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068d4:	f7fb fd94 	bl	8002400 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e0f2      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068e6:	4b23      	ldr	r3, [pc, #140]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 80068e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0ef      	beq.n	80068d4 <HAL_RCC_OscConfig+0x418>
 80068f4:	e01b      	b.n	800692e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 80068f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006906:	f7fb fd7b 	bl	8002400 <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800690e:	f7fb fd77 	bl	8002400 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e0d5      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006920:	4b14      	ldr	r3, [pc, #80]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 8006922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1ef      	bne.n	800690e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 80c9 	beq.w	8006aca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006938:	4b0e      	ldr	r3, [pc, #56]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 030c 	and.w	r3, r3, #12
 8006940:	2b0c      	cmp	r3, #12
 8006942:	f000 8083 	beq.w	8006a4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d15e      	bne.n	8006a0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800694e:	4b09      	ldr	r3, [pc, #36]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a08      	ldr	r2, [pc, #32]	@ (8006974 <HAL_RCC_OscConfig+0x4b8>)
 8006954:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695a:	f7fb fd51 	bl	8002400 <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006960:	e00c      	b.n	800697c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006962:	f7fb fd4d 	bl	8002400 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d905      	bls.n	800697c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e0ab      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
 8006974:	40021000 	.word	0x40021000
 8006978:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800697c:	4b55      	ldr	r3, [pc, #340]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1ec      	bne.n	8006962 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006988:	4b52      	ldr	r3, [pc, #328]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	4b52      	ldr	r3, [pc, #328]	@ (8006ad8 <HAL_RCC_OscConfig+0x61c>)
 800698e:	4013      	ands	r3, r2
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6a11      	ldr	r1, [r2, #32]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006998:	3a01      	subs	r2, #1
 800699a:	0112      	lsls	r2, r2, #4
 800699c:	4311      	orrs	r1, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80069a2:	0212      	lsls	r2, r2, #8
 80069a4:	4311      	orrs	r1, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069aa:	0852      	lsrs	r2, r2, #1
 80069ac:	3a01      	subs	r2, #1
 80069ae:	0552      	lsls	r2, r2, #21
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069b6:	0852      	lsrs	r2, r2, #1
 80069b8:	3a01      	subs	r2, #1
 80069ba:	0652      	lsls	r2, r2, #25
 80069bc:	4311      	orrs	r1, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069c2:	06d2      	lsls	r2, r2, #27
 80069c4:	430a      	orrs	r2, r1
 80069c6:	4943      	ldr	r1, [pc, #268]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069cc:	4b41      	ldr	r3, [pc, #260]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a40      	ldr	r2, [pc, #256]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 80069d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069d8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	4a3d      	ldr	r2, [pc, #244]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 80069de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e4:	f7fb fd0c 	bl	8002400 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ec:	f7fb fd08 	bl	8002400 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e066      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069fe:	4b35      	ldr	r3, [pc, #212]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f0      	beq.n	80069ec <HAL_RCC_OscConfig+0x530>
 8006a0a:	e05e      	b.n	8006aca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0c:	4b31      	ldr	r3, [pc, #196]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a30      	ldr	r2, [pc, #192]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 8006a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a18:	f7fb fcf2 	bl	8002400 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a20:	f7fb fcee 	bl	8002400 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e04c      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a32:	4b28      	ldr	r3, [pc, #160]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f0      	bne.n	8006a20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a3e:	4b25      	ldr	r3, [pc, #148]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	4924      	ldr	r1, [pc, #144]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 8006a44:	4b25      	ldr	r3, [pc, #148]	@ (8006adc <HAL_RCC_OscConfig+0x620>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	60cb      	str	r3, [r1, #12]
 8006a4a:	e03e      	b.n	8006aca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e039      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a58:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad4 <HAL_RCC_OscConfig+0x618>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f003 0203 	and.w	r2, r3, #3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d12c      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a76:	3b01      	subs	r3, #1
 8006a78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d123      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d11b      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d113      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	085b      	lsrs	r3, r3, #1
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d109      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d001      	beq.n	8006aca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3720      	adds	r7, #32
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	019f800c 	.word	0x019f800c
 8006adc:	feeefffc 	.word	0xfeeefffc

08006ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e11e      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006af8:	4b91      	ldr	r3, [pc, #580]	@ (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d910      	bls.n	8006b28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b06:	4b8e      	ldr	r3, [pc, #568]	@ (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f023 020f 	bic.w	r2, r3, #15
 8006b0e:	498c      	ldr	r1, [pc, #560]	@ (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b16:	4b8a      	ldr	r3, [pc, #552]	@ (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d001      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e106      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d073      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d129      	bne.n	8006b90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b3c:	4b81      	ldr	r3, [pc, #516]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0f4      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b4c:	f000 f9d0 	bl	8006ef0 <RCC_GetSysClockFreqFromPLLSource>
 8006b50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	4a7c      	ldr	r2, [pc, #496]	@ (8006d48 <HAL_RCC_ClockConfig+0x268>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d93f      	bls.n	8006bda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b5a:	4b7a      	ldr	r3, [pc, #488]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d033      	beq.n	8006bda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d12f      	bne.n	8006bda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b7a:	4b72      	ldr	r3, [pc, #456]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b82:	4a70      	ldr	r2, [pc, #448]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b8a:	2380      	movs	r3, #128	@ 0x80
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	e024      	b.n	8006bda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b98:	4b6a      	ldr	r3, [pc, #424]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0c6      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ba8:	4b66      	ldr	r3, [pc, #408]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e0be      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006bb8:	f000 f8ce 	bl	8006d58 <HAL_RCC_GetSysClockFreq>
 8006bbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4a61      	ldr	r2, [pc, #388]	@ (8006d48 <HAL_RCC_ClockConfig+0x268>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d909      	bls.n	8006bda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bce:	4a5d      	ldr	r2, [pc, #372]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bd6:	2380      	movs	r3, #128	@ 0x80
 8006bd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bda:	4b5a      	ldr	r3, [pc, #360]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f023 0203 	bic.w	r2, r3, #3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	4957      	ldr	r1, [pc, #348]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bec:	f7fb fc08 	bl	8002400 <HAL_GetTick>
 8006bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf2:	e00a      	b.n	8006c0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bf4:	f7fb fc04 	bl	8002400 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e095      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0a:	4b4e      	ldr	r3, [pc, #312]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 020c 	and.w	r2, r3, #12
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d1eb      	bne.n	8006bf4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d023      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c34:	4b43      	ldr	r3, [pc, #268]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4a42      	ldr	r2, [pc, #264]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c54:	4a3b      	ldr	r2, [pc, #236]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c5c:	4b39      	ldr	r3, [pc, #228]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4936      	ldr	r1, [pc, #216]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	608b      	str	r3, [r1, #8]
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b80      	cmp	r3, #128	@ 0x80
 8006c74:	d105      	bne.n	8006c82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c76:	4b33      	ldr	r3, [pc, #204]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4a32      	ldr	r2, [pc, #200]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c82:	4b2f      	ldr	r3, [pc, #188]	@ (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d21d      	bcs.n	8006ccc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c90:	4b2b      	ldr	r3, [pc, #172]	@ (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f023 020f 	bic.w	r2, r3, #15
 8006c98:	4929      	ldr	r1, [pc, #164]	@ (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ca0:	f7fb fbae 	bl	8002400 <HAL_GetTick>
 8006ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca6:	e00a      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca8:	f7fb fbaa 	bl	8002400 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e03b      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cbe:	4b20      	ldr	r3, [pc, #128]	@ (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d1ed      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4917      	ldr	r1, [pc, #92]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0308 	and.w	r3, r3, #8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cf6:	4b13      	ldr	r3, [pc, #76]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	490f      	ldr	r1, [pc, #60]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d0a:	f000 f825 	bl	8006d58 <HAL_RCC_GetSysClockFreq>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	4b0c      	ldr	r3, [pc, #48]	@ (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	091b      	lsrs	r3, r3, #4
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	490c      	ldr	r1, [pc, #48]	@ (8006d4c <HAL_RCC_ClockConfig+0x26c>)
 8006d1c:	5ccb      	ldrb	r3, [r1, r3]
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	fa22 f303 	lsr.w	r3, r2, r3
 8006d26:	4a0a      	ldr	r2, [pc, #40]	@ (8006d50 <HAL_RCC_ClockConfig+0x270>)
 8006d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d54 <HAL_RCC_ClockConfig+0x274>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fb f98a 	bl	8002048 <HAL_InitTick>
 8006d34:	4603      	mov	r3, r0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40022000 	.word	0x40022000
 8006d44:	40021000 	.word	0x40021000
 8006d48:	04c4b400 	.word	0x04c4b400
 8006d4c:	08012388 	.word	0x08012388
 8006d50:	20000000 	.word	0x20000000
 8006d54:	20000004 	.word	0x20000004

08006d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 030c 	and.w	r3, r3, #12
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d102      	bne.n	8006d70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	e047      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d70:	4b27      	ldr	r3, [pc, #156]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 030c 	and.w	r3, r3, #12
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d102      	bne.n	8006d82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d7c:	4b26      	ldr	r3, [pc, #152]	@ (8006e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	e03e      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d82:	4b23      	ldr	r3, [pc, #140]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 030c 	and.w	r3, r3, #12
 8006d8a:	2b0c      	cmp	r3, #12
 8006d8c:	d136      	bne.n	8006dfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d8e:	4b20      	ldr	r3, [pc, #128]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d98:	4b1d      	ldr	r3, [pc, #116]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	091b      	lsrs	r3, r3, #4
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	3301      	adds	r3, #1
 8006da4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d10c      	bne.n	8006dc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dac:	4a1a      	ldr	r2, [pc, #104]	@ (8006e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	4a16      	ldr	r2, [pc, #88]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006db6:	68d2      	ldr	r2, [r2, #12]
 8006db8:	0a12      	lsrs	r2, r2, #8
 8006dba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	617b      	str	r3, [r7, #20]
      break;
 8006dc4:	e00c      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dc6:	4a13      	ldr	r2, [pc, #76]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	4a10      	ldr	r2, [pc, #64]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dd0:	68d2      	ldr	r2, [r2, #12]
 8006dd2:	0a12      	lsrs	r2, r2, #8
 8006dd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dd8:	fb02 f303 	mul.w	r3, r2, r3
 8006ddc:	617b      	str	r3, [r7, #20]
      break;
 8006dde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006de0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	0e5b      	lsrs	r3, r3, #25
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	3301      	adds	r3, #1
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	e001      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e00:	693b      	ldr	r3, [r7, #16]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40021000 	.word	0x40021000
 8006e14:	00f42400 	.word	0x00f42400
 8006e18:	007a1200 	.word	0x007a1200

08006e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e20:	4b03      	ldr	r3, [pc, #12]	@ (8006e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e22:	681b      	ldr	r3, [r3, #0]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20000000 	.word	0x20000000

08006e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e38:	f7ff fff0 	bl	8006e1c <HAL_RCC_GetHCLKFreq>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4b06      	ldr	r3, [pc, #24]	@ (8006e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	4904      	ldr	r1, [pc, #16]	@ (8006e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e4a:	5ccb      	ldrb	r3, [r1, r3]
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	08012398 	.word	0x08012398

08006e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e64:	f7ff ffda 	bl	8006e1c <HAL_RCC_GetHCLKFreq>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	4b06      	ldr	r3, [pc, #24]	@ (8006e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	0adb      	lsrs	r3, r3, #11
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	4904      	ldr	r1, [pc, #16]	@ (8006e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e76:	5ccb      	ldrb	r3, [r1, r3]
 8006e78:	f003 031f 	and.w	r3, r3, #31
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40021000 	.word	0x40021000
 8006e88:	08012398 	.word	0x08012398

08006e8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	220f      	movs	r2, #15
 8006e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006e9c:	4b12      	ldr	r3, [pc, #72]	@ (8006ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 0203 	and.w	r2, r3, #3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006ec0:	4b09      	ldr	r3, [pc, #36]	@ (8006ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	08db      	lsrs	r3, r3, #3
 8006ec6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006ece:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <HAL_RCC_GetClockConfig+0x60>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 020f 	and.w	r2, r3, #15
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	601a      	str	r2, [r3, #0]
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	40021000 	.word	0x40021000
 8006eec:	40022000 	.word	0x40022000

08006ef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f00:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	091b      	lsrs	r3, r3, #4
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d10c      	bne.n	8006f2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f14:	4a17      	ldr	r2, [pc, #92]	@ (8006f74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1c:	4a14      	ldr	r2, [pc, #80]	@ (8006f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f1e:	68d2      	ldr	r2, [r2, #12]
 8006f20:	0a12      	lsrs	r2, r2, #8
 8006f22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	617b      	str	r3, [r7, #20]
    break;
 8006f2c:	e00c      	b.n	8006f48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f2e:	4a12      	ldr	r2, [pc, #72]	@ (8006f78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	4a0e      	ldr	r2, [pc, #56]	@ (8006f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f38:	68d2      	ldr	r2, [r2, #12]
 8006f3a:	0a12      	lsrs	r2, r2, #8
 8006f3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
 8006f44:	617b      	str	r3, [r7, #20]
    break;
 8006f46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f48:	4b09      	ldr	r3, [pc, #36]	@ (8006f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	0e5b      	lsrs	r3, r3, #25
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	3301      	adds	r3, #1
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f62:	687b      	ldr	r3, [r7, #4]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	40021000 	.word	0x40021000
 8006f74:	007a1200 	.word	0x007a1200
 8006f78:	00f42400 	.word	0x00f42400

08006f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f84:	2300      	movs	r3, #0
 8006f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f88:	2300      	movs	r3, #0
 8006f8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8098 	beq.w	80070ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f9e:	4b43      	ldr	r3, [pc, #268]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10d      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006faa:	4b40      	ldr	r3, [pc, #256]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fae:	4a3f      	ldr	r2, [pc, #252]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fbe:	60bb      	str	r3, [r7, #8]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a39      	ldr	r2, [pc, #228]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fd2:	f7fb fa15 	bl	8002400 <HAL_GetTick>
 8006fd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fd8:	e009      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fda:	f7fb fa11 	bl	8002400 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d902      	bls.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	74fb      	strb	r3, [r7, #19]
        break;
 8006fec:	e005      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fee:	4b30      	ldr	r3, [pc, #192]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0ef      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ffa:	7cfb      	ldrb	r3, [r7, #19]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d159      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007000:	4b2a      	ldr	r3, [pc, #168]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800700a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d01e      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	429a      	cmp	r2, r3
 800701a:	d019      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800701c:	4b23      	ldr	r3, [pc, #140]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800701e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007028:	4b20      	ldr	r3, [pc, #128]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800702a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702e:	4a1f      	ldr	r2, [pc, #124]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007038:	4b1c      	ldr	r3, [pc, #112]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703e:	4a1b      	ldr	r2, [pc, #108]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007048:	4a18      	ldr	r2, [pc, #96]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d016      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705a:	f7fb f9d1 	bl	8002400 <HAL_GetTick>
 800705e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007060:	e00b      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007062:	f7fb f9cd 	bl	8002400 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007070:	4293      	cmp	r3, r2
 8007072:	d902      	bls.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	74fb      	strb	r3, [r7, #19]
            break;
 8007078:	e006      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800707a:	4b0c      	ldr	r3, [pc, #48]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800707c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0ec      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007088:	7cfb      	ldrb	r3, [r7, #19]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10b      	bne.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800708e:	4b07      	ldr	r3, [pc, #28]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800709c:	4903      	ldr	r1, [pc, #12]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80070a4:	e008      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070a6:	7cfb      	ldrb	r3, [r7, #19]
 80070a8:	74bb      	strb	r3, [r7, #18]
 80070aa:	e005      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80070ac:	40021000 	.word	0x40021000
 80070b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b4:	7cfb      	ldrb	r3, [r7, #19]
 80070b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070b8:	7c7b      	ldrb	r3, [r7, #17]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d105      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070be:	4ba7      	ldr	r3, [pc, #668]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c2:	4aa6      	ldr	r2, [pc, #664]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00a      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070d6:	4ba1      	ldr	r3, [pc, #644]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070dc:	f023 0203 	bic.w	r2, r3, #3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	499d      	ldr	r1, [pc, #628]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070f8:	4b98      	ldr	r3, [pc, #608]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fe:	f023 020c 	bic.w	r2, r3, #12
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	4995      	ldr	r1, [pc, #596]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007108:	4313      	orrs	r3, r2
 800710a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800711a:	4b90      	ldr	r3, [pc, #576]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007120:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	498c      	ldr	r1, [pc, #560]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800713c:	4b87      	ldr	r3, [pc, #540]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800713e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007142:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	4984      	ldr	r1, [pc, #528]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800714c:	4313      	orrs	r3, r2
 800714e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0310 	and.w	r3, r3, #16
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800715e:	4b7f      	ldr	r3, [pc, #508]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007164:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	497b      	ldr	r1, [pc, #492]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800716e:	4313      	orrs	r3, r2
 8007170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007180:	4b76      	ldr	r3, [pc, #472]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007186:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	4973      	ldr	r1, [pc, #460]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007190:	4313      	orrs	r3, r2
 8007192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071a2:	4b6e      	ldr	r3, [pc, #440]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	496a      	ldr	r1, [pc, #424]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071c4:	4b65      	ldr	r3, [pc, #404]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	4962      	ldr	r1, [pc, #392]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071e6:	4b5d      	ldr	r3, [pc, #372]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	4959      	ldr	r1, [pc, #356]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007208:	4b54      	ldr	r3, [pc, #336]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800720a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007216:	4951      	ldr	r1, [pc, #324]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007218:	4313      	orrs	r3, r2
 800721a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007226:	2b00      	cmp	r3, #0
 8007228:	d015      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800722a:	4b4c      	ldr	r3, [pc, #304]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800722c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007230:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007238:	4948      	ldr	r1, [pc, #288]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723a:	4313      	orrs	r3, r2
 800723c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007244:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007248:	d105      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800724a:	4b44      	ldr	r3, [pc, #272]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	4a43      	ldr	r2, [pc, #268]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007250:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007254:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800725e:	2b00      	cmp	r3, #0
 8007260:	d015      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007262:	4b3e      	ldr	r3, [pc, #248]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007268:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007270:	493a      	ldr	r1, [pc, #232]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007272:	4313      	orrs	r3, r2
 8007274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007280:	d105      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007282:	4b36      	ldr	r3, [pc, #216]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	4a35      	ldr	r2, [pc, #212]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007288:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800728c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d015      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800729a:	4b30      	ldr	r3, [pc, #192]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a8:	492c      	ldr	r1, [pc, #176]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072b8:	d105      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072ba:	4b28      	ldr	r3, [pc, #160]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	4a27      	ldr	r2, [pc, #156]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072c4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d015      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072d2:	4b22      	ldr	r3, [pc, #136]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e0:	491e      	ldr	r1, [pc, #120]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072f0:	d105      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072f2:	4b1a      	ldr	r3, [pc, #104]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	4a19      	ldr	r2, [pc, #100]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072fc:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d015      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800730a:	4b14      	ldr	r3, [pc, #80]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800730c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007310:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007318:	4910      	ldr	r1, [pc, #64]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007328:	d105      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800732a:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	4a0b      	ldr	r2, [pc, #44]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007330:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007334:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d018      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007342:	4b06      	ldr	r3, [pc, #24]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007348:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007350:	4902      	ldr	r1, [pc, #8]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007352:	4313      	orrs	r3, r2
 8007354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	e001      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800735c:	40021000 	.word	0x40021000
 8007360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007366:	d105      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007368:	4b21      	ldr	r3, [pc, #132]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	4a20      	ldr	r2, [pc, #128]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800736e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007372:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d015      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007380:	4b1b      	ldr	r3, [pc, #108]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007386:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738e:	4918      	ldr	r1, [pc, #96]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007390:	4313      	orrs	r3, r2
 8007392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800739a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800739e:	d105      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80073a0:	4b13      	ldr	r3, [pc, #76]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	4a12      	ldr	r2, [pc, #72]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80073a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d015      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80073b8:	4b0d      	ldr	r3, [pc, #52]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80073ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073c6:	490a      	ldr	r1, [pc, #40]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073d6:	d105      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073d8:	4b05      	ldr	r3, [pc, #20]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4a04      	ldr	r2, [pc, #16]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80073de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80073e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	40021000 	.word	0x40021000

080073f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e049      	b.n	800749a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d106      	bne.n	8007420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f841 	bl	80074a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3304      	adds	r3, #4
 8007430:	4619      	mov	r1, r3
 8007432:	4610      	mov	r0, r2
 8007434:	f000 fa28 	bl	8007888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
	...

080074b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d001      	beq.n	80074d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e04f      	b.n	8007570 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0201 	orr.w	r2, r2, #1
 80074e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a23      	ldr	r2, [pc, #140]	@ (800757c <HAL_TIM_Base_Start_IT+0xc4>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d01d      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074fa:	d018      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a1f      	ldr	r2, [pc, #124]	@ (8007580 <HAL_TIM_Base_Start_IT+0xc8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d013      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a1e      	ldr	r2, [pc, #120]	@ (8007584 <HAL_TIM_Base_Start_IT+0xcc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00e      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1c      	ldr	r2, [pc, #112]	@ (8007588 <HAL_TIM_Base_Start_IT+0xd0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d009      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a1b      	ldr	r2, [pc, #108]	@ (800758c <HAL_TIM_Base_Start_IT+0xd4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d004      	beq.n	800752e <HAL_TIM_Base_Start_IT+0x76>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a19      	ldr	r2, [pc, #100]	@ (8007590 <HAL_TIM_Base_Start_IT+0xd8>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d115      	bne.n	800755a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	4b17      	ldr	r3, [pc, #92]	@ (8007594 <HAL_TIM_Base_Start_IT+0xdc>)
 8007536:	4013      	ands	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b06      	cmp	r3, #6
 800753e:	d015      	beq.n	800756c <HAL_TIM_Base_Start_IT+0xb4>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007546:	d011      	beq.n	800756c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007558:	e008      	b.n	800756c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f042 0201 	orr.w	r2, r2, #1
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	e000      	b.n	800756e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800756c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	40012c00 	.word	0x40012c00
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40013400 	.word	0x40013400
 800758c:	40014000 	.word	0x40014000
 8007590:	40015000 	.word	0x40015000
 8007594:	00010007 	.word	0x00010007

08007598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d020      	beq.n	80075fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01b      	beq.n	80075fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f06f 0202 	mvn.w	r2, #2
 80075cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f931 	bl	800784a <HAL_TIM_IC_CaptureCallback>
 80075e8:	e005      	b.n	80075f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f923 	bl	8007836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f934 	bl	800785e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d020      	beq.n	8007648 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01b      	beq.n	8007648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0204 	mvn.w	r2, #4
 8007618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f90b 	bl	800784a <HAL_TIM_IC_CaptureCallback>
 8007634:	e005      	b.n	8007642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8fd 	bl	8007836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f90e 	bl	800785e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d020      	beq.n	8007694 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01b      	beq.n	8007694 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f06f 0208 	mvn.w	r2, #8
 8007664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2204      	movs	r2, #4
 800766a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f8e5 	bl	800784a <HAL_TIM_IC_CaptureCallback>
 8007680:	e005      	b.n	800768e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f8d7 	bl	8007836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f8e8 	bl	800785e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f003 0310 	and.w	r3, r3, #16
 800769a:	2b00      	cmp	r3, #0
 800769c:	d020      	beq.n	80076e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01b      	beq.n	80076e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0210 	mvn.w	r2, #16
 80076b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2208      	movs	r2, #8
 80076b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f8bf 	bl	800784a <HAL_TIM_IC_CaptureCallback>
 80076cc:	e005      	b.n	80076da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f8b1 	bl	8007836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f8c2 	bl	800785e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00c      	beq.n	8007704 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0201 	mvn.w	r2, #1
 80076fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fa fafe 	bl	8001d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00c      	beq.n	8007732 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800771e:	2b00      	cmp	r3, #0
 8007720:	d007      	beq.n	8007732 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800772a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f95f 	bl	80079f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00c      	beq.n	8007756 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007742:	2b00      	cmp	r3, #0
 8007744:	d007      	beq.n	8007756 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800774e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f957 	bl	8007a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00c      	beq.n	800777a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f87c 	bl	8007872 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00c      	beq.n	800779e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f06f 0220 	mvn.w	r2, #32
 8007796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f91f 	bl	80079dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00c      	beq.n	80077c2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80077ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f92b 	bl	8007a18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00c      	beq.n	80077e6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80077de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f923 	bl	8007a2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00c      	beq.n	800780a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f91b 	bl	8007a40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00c      	beq.n	800782e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d007      	beq.n	800782e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f913 	bl	8007a54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
	...

08007888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a48      	ldr	r2, [pc, #288]	@ (80079bc <TIM_Base_SetConfig+0x134>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d013      	beq.n	80078c8 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078a6:	d00f      	beq.n	80078c8 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a45      	ldr	r2, [pc, #276]	@ (80079c0 <TIM_Base_SetConfig+0x138>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00b      	beq.n	80078c8 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a44      	ldr	r2, [pc, #272]	@ (80079c4 <TIM_Base_SetConfig+0x13c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d007      	beq.n	80078c8 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a43      	ldr	r2, [pc, #268]	@ (80079c8 <TIM_Base_SetConfig+0x140>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d003      	beq.n	80078c8 <TIM_Base_SetConfig+0x40>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a42      	ldr	r2, [pc, #264]	@ (80079cc <TIM_Base_SetConfig+0x144>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d108      	bne.n	80078da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a37      	ldr	r2, [pc, #220]	@ (80079bc <TIM_Base_SetConfig+0x134>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01f      	beq.n	8007922 <TIM_Base_SetConfig+0x9a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e8:	d01b      	beq.n	8007922 <TIM_Base_SetConfig+0x9a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a34      	ldr	r2, [pc, #208]	@ (80079c0 <TIM_Base_SetConfig+0x138>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d017      	beq.n	8007922 <TIM_Base_SetConfig+0x9a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a33      	ldr	r2, [pc, #204]	@ (80079c4 <TIM_Base_SetConfig+0x13c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d013      	beq.n	8007922 <TIM_Base_SetConfig+0x9a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a32      	ldr	r2, [pc, #200]	@ (80079c8 <TIM_Base_SetConfig+0x140>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00f      	beq.n	8007922 <TIM_Base_SetConfig+0x9a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a32      	ldr	r2, [pc, #200]	@ (80079d0 <TIM_Base_SetConfig+0x148>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00b      	beq.n	8007922 <TIM_Base_SetConfig+0x9a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a31      	ldr	r2, [pc, #196]	@ (80079d4 <TIM_Base_SetConfig+0x14c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d007      	beq.n	8007922 <TIM_Base_SetConfig+0x9a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a30      	ldr	r2, [pc, #192]	@ (80079d8 <TIM_Base_SetConfig+0x150>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d003      	beq.n	8007922 <TIM_Base_SetConfig+0x9a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a2b      	ldr	r2, [pc, #172]	@ (80079cc <TIM_Base_SetConfig+0x144>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d108      	bne.n	8007934 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a18      	ldr	r2, [pc, #96]	@ (80079bc <TIM_Base_SetConfig+0x134>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d013      	beq.n	8007988 <TIM_Base_SetConfig+0x100>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a19      	ldr	r2, [pc, #100]	@ (80079c8 <TIM_Base_SetConfig+0x140>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00f      	beq.n	8007988 <TIM_Base_SetConfig+0x100>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a19      	ldr	r2, [pc, #100]	@ (80079d0 <TIM_Base_SetConfig+0x148>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00b      	beq.n	8007988 <TIM_Base_SetConfig+0x100>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a18      	ldr	r2, [pc, #96]	@ (80079d4 <TIM_Base_SetConfig+0x14c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d007      	beq.n	8007988 <TIM_Base_SetConfig+0x100>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a17      	ldr	r2, [pc, #92]	@ (80079d8 <TIM_Base_SetConfig+0x150>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_Base_SetConfig+0x100>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a12      	ldr	r2, [pc, #72]	@ (80079cc <TIM_Base_SetConfig+0x144>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d103      	bne.n	8007990 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d105      	bne.n	80079ae <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f023 0201 	bic.w	r2, r3, #1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	611a      	str	r2, [r3, #16]
  }
}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	40012c00 	.word	0x40012c00
 80079c0:	40000400 	.word	0x40000400
 80079c4:	40000800 	.word	0x40000800
 80079c8:	40013400 	.word	0x40013400
 80079cc:	40015000 	.word	0x40015000
 80079d0:	40014000 	.word	0x40014000
 80079d4:	40014400 	.word	0x40014400
 80079d8:	40014800 	.word	0x40014800

080079dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e042      	b.n	8007b00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7fa fa83 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2224      	movs	r2, #36	@ 0x24
 8007a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0201 	bic.w	r2, r2, #1
 8007aa8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fb24 	bl	8008100 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f825 	bl	8007b08 <UART_SetConfig>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e01b      	b.n	8007b00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fba3 	bl	8008244 <UART_CheckIdleState>
 8007afe:	4603      	mov	r3, r0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b0c:	b08c      	sub	sp, #48	@ 0x30
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	431a      	orrs	r2, r3
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	4baa      	ldr	r3, [pc, #680]	@ (8007de0 <UART_SetConfig+0x2d8>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a9f      	ldr	r2, [pc, #636]	@ (8007de4 <UART_SetConfig+0x2dc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d004      	beq.n	8007b74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b70:	4313      	orrs	r3, r2
 8007b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007b7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b92:	f023 010f 	bic.w	r1, r3, #15
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a90      	ldr	r2, [pc, #576]	@ (8007de8 <UART_SetConfig+0x2e0>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d125      	bne.n	8007bf8 <UART_SetConfig+0xf0>
 8007bac:	4b8f      	ldr	r3, [pc, #572]	@ (8007dec <UART_SetConfig+0x2e4>)
 8007bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d81a      	bhi.n	8007bf0 <UART_SetConfig+0xe8>
 8007bba:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc0 <UART_SetConfig+0xb8>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007be1 	.word	0x08007be1
 8007bc8:	08007bd9 	.word	0x08007bd9
 8007bcc:	08007be9 	.word	0x08007be9
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bd6:	e116      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bde:	e112      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007be0:	2304      	movs	r3, #4
 8007be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007be6:	e10e      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007be8:	2308      	movs	r3, #8
 8007bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bee:	e10a      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bf6:	e106      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a7c      	ldr	r2, [pc, #496]	@ (8007df0 <UART_SetConfig+0x2e8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d138      	bne.n	8007c74 <UART_SetConfig+0x16c>
 8007c02:	4b7a      	ldr	r3, [pc, #488]	@ (8007dec <UART_SetConfig+0x2e4>)
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c08:	f003 030c 	and.w	r3, r3, #12
 8007c0c:	2b0c      	cmp	r3, #12
 8007c0e:	d82d      	bhi.n	8007c6c <UART_SetConfig+0x164>
 8007c10:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <UART_SetConfig+0x110>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c4d 	.word	0x08007c4d
 8007c1c:	08007c6d 	.word	0x08007c6d
 8007c20:	08007c6d 	.word	0x08007c6d
 8007c24:	08007c6d 	.word	0x08007c6d
 8007c28:	08007c5d 	.word	0x08007c5d
 8007c2c:	08007c6d 	.word	0x08007c6d
 8007c30:	08007c6d 	.word	0x08007c6d
 8007c34:	08007c6d 	.word	0x08007c6d
 8007c38:	08007c55 	.word	0x08007c55
 8007c3c:	08007c6d 	.word	0x08007c6d
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	08007c6d 	.word	0x08007c6d
 8007c48:	08007c65 	.word	0x08007c65
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c52:	e0d8      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007c54:	2302      	movs	r3, #2
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5a:	e0d4      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c62:	e0d0      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007c64:	2308      	movs	r3, #8
 8007c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6a:	e0cc      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c72:	e0c8      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a5e      	ldr	r2, [pc, #376]	@ (8007df4 <UART_SetConfig+0x2ec>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d125      	bne.n	8007cca <UART_SetConfig+0x1c2>
 8007c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8007dec <UART_SetConfig+0x2e4>)
 8007c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c88:	2b30      	cmp	r3, #48	@ 0x30
 8007c8a:	d016      	beq.n	8007cba <UART_SetConfig+0x1b2>
 8007c8c:	2b30      	cmp	r3, #48	@ 0x30
 8007c8e:	d818      	bhi.n	8007cc2 <UART_SetConfig+0x1ba>
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d00a      	beq.n	8007caa <UART_SetConfig+0x1a2>
 8007c94:	2b20      	cmp	r3, #32
 8007c96:	d814      	bhi.n	8007cc2 <UART_SetConfig+0x1ba>
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <UART_SetConfig+0x19a>
 8007c9c:	2b10      	cmp	r3, #16
 8007c9e:	d008      	beq.n	8007cb2 <UART_SetConfig+0x1aa>
 8007ca0:	e00f      	b.n	8007cc2 <UART_SetConfig+0x1ba>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ca8:	e0ad      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007caa:	2302      	movs	r3, #2
 8007cac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cb0:	e0a9      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007cb2:	2304      	movs	r3, #4
 8007cb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cb8:	e0a5      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007cba:	2308      	movs	r3, #8
 8007cbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cc0:	e0a1      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007cc2:	2310      	movs	r3, #16
 8007cc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cc8:	e09d      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a4a      	ldr	r2, [pc, #296]	@ (8007df8 <UART_SetConfig+0x2f0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d125      	bne.n	8007d20 <UART_SetConfig+0x218>
 8007cd4:	4b45      	ldr	r3, [pc, #276]	@ (8007dec <UART_SetConfig+0x2e4>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ce0:	d016      	beq.n	8007d10 <UART_SetConfig+0x208>
 8007ce2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ce4:	d818      	bhi.n	8007d18 <UART_SetConfig+0x210>
 8007ce6:	2b80      	cmp	r3, #128	@ 0x80
 8007ce8:	d00a      	beq.n	8007d00 <UART_SetConfig+0x1f8>
 8007cea:	2b80      	cmp	r3, #128	@ 0x80
 8007cec:	d814      	bhi.n	8007d18 <UART_SetConfig+0x210>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <UART_SetConfig+0x1f0>
 8007cf2:	2b40      	cmp	r3, #64	@ 0x40
 8007cf4:	d008      	beq.n	8007d08 <UART_SetConfig+0x200>
 8007cf6:	e00f      	b.n	8007d18 <UART_SetConfig+0x210>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cfe:	e082      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007d00:	2302      	movs	r3, #2
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d06:	e07e      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007d08:	2304      	movs	r3, #4
 8007d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d0e:	e07a      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007d10:	2308      	movs	r3, #8
 8007d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d16:	e076      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007d18:	2310      	movs	r3, #16
 8007d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d1e:	e072      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a35      	ldr	r2, [pc, #212]	@ (8007dfc <UART_SetConfig+0x2f4>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d12a      	bne.n	8007d80 <UART_SetConfig+0x278>
 8007d2a:	4b30      	ldr	r3, [pc, #192]	@ (8007dec <UART_SetConfig+0x2e4>)
 8007d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d38:	d01a      	beq.n	8007d70 <UART_SetConfig+0x268>
 8007d3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d3e:	d81b      	bhi.n	8007d78 <UART_SetConfig+0x270>
 8007d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d44:	d00c      	beq.n	8007d60 <UART_SetConfig+0x258>
 8007d46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d4a:	d815      	bhi.n	8007d78 <UART_SetConfig+0x270>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <UART_SetConfig+0x250>
 8007d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d54:	d008      	beq.n	8007d68 <UART_SetConfig+0x260>
 8007d56:	e00f      	b.n	8007d78 <UART_SetConfig+0x270>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d5e:	e052      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007d60:	2302      	movs	r3, #2
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d66:	e04e      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d6e:	e04a      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007d70:	2308      	movs	r3, #8
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d76:	e046      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007d78:	2310      	movs	r3, #16
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d7e:	e042      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a17      	ldr	r2, [pc, #92]	@ (8007de4 <UART_SetConfig+0x2dc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d13a      	bne.n	8007e00 <UART_SetConfig+0x2f8>
 8007d8a:	4b18      	ldr	r3, [pc, #96]	@ (8007dec <UART_SetConfig+0x2e4>)
 8007d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d98:	d01a      	beq.n	8007dd0 <UART_SetConfig+0x2c8>
 8007d9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d9e:	d81b      	bhi.n	8007dd8 <UART_SetConfig+0x2d0>
 8007da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007da4:	d00c      	beq.n	8007dc0 <UART_SetConfig+0x2b8>
 8007da6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007daa:	d815      	bhi.n	8007dd8 <UART_SetConfig+0x2d0>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <UART_SetConfig+0x2b0>
 8007db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007db4:	d008      	beq.n	8007dc8 <UART_SetConfig+0x2c0>
 8007db6:	e00f      	b.n	8007dd8 <UART_SetConfig+0x2d0>
 8007db8:	2300      	movs	r3, #0
 8007dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dbe:	e022      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc6:	e01e      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dce:	e01a      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007dd0:	2308      	movs	r3, #8
 8007dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd6:	e016      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007dd8:	2310      	movs	r3, #16
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dde:	e012      	b.n	8007e06 <UART_SetConfig+0x2fe>
 8007de0:	cfff69f3 	.word	0xcfff69f3
 8007de4:	40008000 	.word	0x40008000
 8007de8:	40013800 	.word	0x40013800
 8007dec:	40021000 	.word	0x40021000
 8007df0:	40004400 	.word	0x40004400
 8007df4:	40004800 	.word	0x40004800
 8007df8:	40004c00 	.word	0x40004c00
 8007dfc:	40005000 	.word	0x40005000
 8007e00:	2310      	movs	r3, #16
 8007e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4aae      	ldr	r2, [pc, #696]	@ (80080c4 <UART_SetConfig+0x5bc>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	f040 8097 	bne.w	8007f40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d823      	bhi.n	8007e62 <UART_SetConfig+0x35a>
 8007e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <UART_SetConfig+0x318>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e63 	.word	0x08007e63
 8007e28:	08007e4d 	.word	0x08007e4d
 8007e2c:	08007e63 	.word	0x08007e63
 8007e30:	08007e53 	.word	0x08007e53
 8007e34:	08007e63 	.word	0x08007e63
 8007e38:	08007e63 	.word	0x08007e63
 8007e3c:	08007e63 	.word	0x08007e63
 8007e40:	08007e5b 	.word	0x08007e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e44:	f7fe fff6 	bl	8006e34 <HAL_RCC_GetPCLK1Freq>
 8007e48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e4a:	e010      	b.n	8007e6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e4c:	4b9e      	ldr	r3, [pc, #632]	@ (80080c8 <UART_SetConfig+0x5c0>)
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e50:	e00d      	b.n	8007e6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e52:	f7fe ff81 	bl	8006d58 <HAL_RCC_GetSysClockFreq>
 8007e56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e58:	e009      	b.n	8007e6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e60:	e005      	b.n	8007e6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8130 	beq.w	80080d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7a:	4a94      	ldr	r2, [pc, #592]	@ (80080cc <UART_SetConfig+0x5c4>)
 8007e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e80:	461a      	mov	r2, r3
 8007e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	4413      	add	r3, r2
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d305      	bcc.n	8007ea6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d903      	bls.n	8007eae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007eac:	e113      	b.n	80080d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	60bb      	str	r3, [r7, #8]
 8007eb4:	60fa      	str	r2, [r7, #12]
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eba:	4a84      	ldr	r2, [pc, #528]	@ (80080cc <UART_SetConfig+0x5c4>)
 8007ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	603b      	str	r3, [r7, #0]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ecc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ed0:	f7f8 fee2 	bl	8000c98 <__aeabi_uldivmod>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4619      	mov	r1, r3
 8007edc:	f04f 0200 	mov.w	r2, #0
 8007ee0:	f04f 0300 	mov.w	r3, #0
 8007ee4:	020b      	lsls	r3, r1, #8
 8007ee6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007eea:	0202      	lsls	r2, r0, #8
 8007eec:	6979      	ldr	r1, [r7, #20]
 8007eee:	6849      	ldr	r1, [r1, #4]
 8007ef0:	0849      	lsrs	r1, r1, #1
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	eb12 0804 	adds.w	r8, r2, r4
 8007efc:	eb43 0905 	adc.w	r9, r3, r5
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	469a      	mov	sl, r3
 8007f08:	4693      	mov	fp, r2
 8007f0a:	4652      	mov	r2, sl
 8007f0c:	465b      	mov	r3, fp
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	f7f8 fec1 	bl	8000c98 <__aeabi_uldivmod>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f24:	d308      	bcc.n	8007f38 <UART_SetConfig+0x430>
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f2c:	d204      	bcs.n	8007f38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6a3a      	ldr	r2, [r7, #32]
 8007f34:	60da      	str	r2, [r3, #12]
 8007f36:	e0ce      	b.n	80080d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f3e:	e0ca      	b.n	80080d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f48:	d166      	bne.n	8008018 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007f4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f4e:	2b08      	cmp	r3, #8
 8007f50:	d827      	bhi.n	8007fa2 <UART_SetConfig+0x49a>
 8007f52:	a201      	add	r2, pc, #4	@ (adr r2, 8007f58 <UART_SetConfig+0x450>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f8d 	.word	0x08007f8d
 8007f64:	08007fa3 	.word	0x08007fa3
 8007f68:	08007f93 	.word	0x08007f93
 8007f6c:	08007fa3 	.word	0x08007fa3
 8007f70:	08007fa3 	.word	0x08007fa3
 8007f74:	08007fa3 	.word	0x08007fa3
 8007f78:	08007f9b 	.word	0x08007f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f7c:	f7fe ff5a 	bl	8006e34 <HAL_RCC_GetPCLK1Freq>
 8007f80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f82:	e014      	b.n	8007fae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f84:	f7fe ff6c 	bl	8006e60 <HAL_RCC_GetPCLK2Freq>
 8007f88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f8a:	e010      	b.n	8007fae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f8c:	4b4e      	ldr	r3, [pc, #312]	@ (80080c8 <UART_SetConfig+0x5c0>)
 8007f8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f90:	e00d      	b.n	8007fae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f92:	f7fe fee1 	bl	8006d58 <HAL_RCC_GetSysClockFreq>
 8007f96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f98:	e009      	b.n	8007fae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fa0:	e005      	b.n	8007fae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 8090 	beq.w	80080d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fba:	4a44      	ldr	r2, [pc, #272]	@ (80080cc <UART_SetConfig+0x5c4>)
 8007fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc8:	005a      	lsls	r2, r3, #1
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	085b      	lsrs	r3, r3, #1
 8007fd0:	441a      	add	r2, r3
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	2b0f      	cmp	r3, #15
 8007fe0:	d916      	bls.n	8008010 <UART_SetConfig+0x508>
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fe8:	d212      	bcs.n	8008010 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f023 030f 	bic.w	r3, r3, #15
 8007ff2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	085b      	lsrs	r3, r3, #1
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	8bfb      	ldrh	r3, [r7, #30]
 8008002:	4313      	orrs	r3, r2
 8008004:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	8bfa      	ldrh	r2, [r7, #30]
 800800c:	60da      	str	r2, [r3, #12]
 800800e:	e062      	b.n	80080d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008016:	e05e      	b.n	80080d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008018:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800801c:	2b08      	cmp	r3, #8
 800801e:	d828      	bhi.n	8008072 <UART_SetConfig+0x56a>
 8008020:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <UART_SetConfig+0x520>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	0800804d 	.word	0x0800804d
 800802c:	08008055 	.word	0x08008055
 8008030:	0800805d 	.word	0x0800805d
 8008034:	08008073 	.word	0x08008073
 8008038:	08008063 	.word	0x08008063
 800803c:	08008073 	.word	0x08008073
 8008040:	08008073 	.word	0x08008073
 8008044:	08008073 	.word	0x08008073
 8008048:	0800806b 	.word	0x0800806b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800804c:	f7fe fef2 	bl	8006e34 <HAL_RCC_GetPCLK1Freq>
 8008050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008052:	e014      	b.n	800807e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008054:	f7fe ff04 	bl	8006e60 <HAL_RCC_GetPCLK2Freq>
 8008058:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800805a:	e010      	b.n	800807e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800805c:	4b1a      	ldr	r3, [pc, #104]	@ (80080c8 <UART_SetConfig+0x5c0>)
 800805e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008060:	e00d      	b.n	800807e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008062:	f7fe fe79 	bl	8006d58 <HAL_RCC_GetSysClockFreq>
 8008066:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008068:	e009      	b.n	800807e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800806a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800806e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008070:	e005      	b.n	800807e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800807c:	bf00      	nop
    }

    if (pclk != 0U)
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	d028      	beq.n	80080d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008088:	4a10      	ldr	r2, [pc, #64]	@ (80080cc <UART_SetConfig+0x5c4>)
 800808a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800808e:	461a      	mov	r2, r3
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	fbb3 f2f2 	udiv	r2, r3, r2
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	085b      	lsrs	r3, r3, #1
 800809c:	441a      	add	r2, r3
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	2b0f      	cmp	r3, #15
 80080ac:	d910      	bls.n	80080d0 <UART_SetConfig+0x5c8>
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b4:	d20c      	bcs.n	80080d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60da      	str	r2, [r3, #12]
 80080c0:	e009      	b.n	80080d6 <UART_SetConfig+0x5ce>
 80080c2:	bf00      	nop
 80080c4:	40008000 	.word	0x40008000
 80080c8:	00f42400 	.word	0x00f42400
 80080cc:	080123a0 	.word	0x080123a0
      }
      else
      {
        ret = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2201      	movs	r2, #1
 80080da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2200      	movs	r2, #0
 80080ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2200      	movs	r2, #0
 80080f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3730      	adds	r7, #48	@ 0x30
 80080fa:	46bd      	mov	sp, r7
 80080fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810c:	f003 0308 	and.w	r3, r3, #8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00a      	beq.n	800812a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008172:	f003 0304 	and.w	r3, r3, #4
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01a      	beq.n	8008216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081fe:	d10a      	bne.n	8008216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	430a      	orrs	r2, r1
 8008214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	605a      	str	r2, [r3, #4]
  }
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b098      	sub	sp, #96	@ 0x60
 8008248:	af02      	add	r7, sp, #8
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008254:	f7fa f8d4 	bl	8002400 <HAL_GetTick>
 8008258:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0308 	and.w	r3, r3, #8
 8008264:	2b08      	cmp	r3, #8
 8008266:	d12f      	bne.n	80082c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008268:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008270:	2200      	movs	r2, #0
 8008272:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f88e 	bl	8008398 <UART_WaitOnFlagUntilTimeout>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d022      	beq.n	80082c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008296:	653b      	str	r3, [r7, #80]	@ 0x50
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e6      	bne.n	8008282 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e063      	b.n	8008390 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d149      	bne.n	800836a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082de:	2200      	movs	r2, #0
 80082e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f857 	bl	8008398 <UART_WaitOnFlagUntilTimeout>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d03c      	beq.n	800836a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	623b      	str	r3, [r7, #32]
   return(result);
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008304:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800830e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008310:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800831c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e6      	bne.n	80082f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	60fb      	str	r3, [r7, #12]
   return(result);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f023 0301 	bic.w	r3, r3, #1
 8008338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008342:	61fa      	str	r2, [r7, #28]
 8008344:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	69b9      	ldr	r1, [r7, #24]
 8008348:	69fa      	ldr	r2, [r7, #28]
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	617b      	str	r3, [r7, #20]
   return(result);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e5      	bne.n	8008322 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e012      	b.n	8008390 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3758      	adds	r7, #88	@ 0x58
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	4613      	mov	r3, r2
 80083a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a8:	e04f      	b.n	800844a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b0:	d04b      	beq.n	800844a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b2:	f7fa f825 	bl	8002400 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d302      	bcc.n	80083c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e04e      	b.n	800846a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d037      	beq.n	800844a <UART_WaitOnFlagUntilTimeout+0xb2>
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b80      	cmp	r3, #128	@ 0x80
 80083de:	d034      	beq.n	800844a <UART_WaitOnFlagUntilTimeout+0xb2>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b40      	cmp	r3, #64	@ 0x40
 80083e4:	d031      	beq.n	800844a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	f003 0308 	and.w	r3, r3, #8
 80083f0:	2b08      	cmp	r3, #8
 80083f2:	d110      	bne.n	8008416 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2208      	movs	r2, #8
 80083fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f838 	bl	8008472 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2208      	movs	r2, #8
 8008406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e029      	b.n	800846a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008420:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008424:	d111      	bne.n	800844a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800842e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 f81e 	bl	8008472 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2220      	movs	r2, #32
 800843a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e00f      	b.n	800846a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69da      	ldr	r2, [r3, #28]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	4013      	ands	r3, r2
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	429a      	cmp	r2, r3
 8008458:	bf0c      	ite	eq
 800845a:	2301      	moveq	r3, #1
 800845c:	2300      	movne	r3, #0
 800845e:	b2db      	uxtb	r3, r3
 8008460:	461a      	mov	r2, r3
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	429a      	cmp	r2, r3
 8008466:	d0a0      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008472:	b480      	push	{r7}
 8008474:	b095      	sub	sp, #84	@ 0x54
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008482:	e853 3f00 	ldrex	r3, [r3]
 8008486:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800848e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008498:	643b      	str	r3, [r7, #64]	@ 0x40
 800849a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800849e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084a0:	e841 2300 	strex	r3, r2, [r1]
 80084a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1e6      	bne.n	800847a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3308      	adds	r3, #8
 80084b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084c2:	f023 0301 	bic.w	r3, r3, #1
 80084c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3308      	adds	r3, #8
 80084ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e3      	bne.n	80084ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d118      	bne.n	800851e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f023 0310 	bic.w	r3, r3, #16
 8008500:	647b      	str	r3, [r7, #68]	@ 0x44
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6979      	ldr	r1, [r7, #20]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	613b      	str	r3, [r7, #16]
   return(result);
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e6      	bne.n	80084ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008532:	bf00      	nop
 8008534:	3754      	adds	r7, #84	@ 0x54
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800854c:	2b01      	cmp	r3, #1
 800854e:	d101      	bne.n	8008554 <HAL_UARTEx_DisableFifoMode+0x16>
 8008550:	2302      	movs	r3, #2
 8008552:	e027      	b.n	80085a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2224      	movs	r2, #36	@ 0x24
 8008560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0201 	bic.w	r2, r2, #1
 800857a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008582:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e02d      	b.n	8008624 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2224      	movs	r2, #36	@ 0x24
 80085d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0201 	bic.w	r2, r2, #1
 80085ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f84f 	bl	80086a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008640:	2302      	movs	r3, #2
 8008642:	e02d      	b.n	80086a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2224      	movs	r2, #36	@ 0x24
 8008650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0201 	bic.w	r2, r2, #1
 800866a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f811 	bl	80086a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2220      	movs	r2, #32
 8008692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d108      	bne.n	80086ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086c8:	e031      	b.n	800872e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086ca:	2308      	movs	r3, #8
 80086cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086ce:	2308      	movs	r3, #8
 80086d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	0e5b      	lsrs	r3, r3, #25
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	0f5b      	lsrs	r3, r3, #29
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	7b3a      	ldrb	r2, [r7, #12]
 80086f6:	4911      	ldr	r1, [pc, #68]	@ (800873c <UARTEx_SetNbDataToProcess+0x94>)
 80086f8:	5c8a      	ldrb	r2, [r1, r2]
 80086fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086fe:	7b3a      	ldrb	r2, [r7, #12]
 8008700:	490f      	ldr	r1, [pc, #60]	@ (8008740 <UARTEx_SetNbDataToProcess+0x98>)
 8008702:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008704:	fb93 f3f2 	sdiv	r3, r3, r2
 8008708:	b29a      	uxth	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	7b7a      	ldrb	r2, [r7, #13]
 8008714:	4909      	ldr	r1, [pc, #36]	@ (800873c <UARTEx_SetNbDataToProcess+0x94>)
 8008716:	5c8a      	ldrb	r2, [r1, r2]
 8008718:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800871c:	7b7a      	ldrb	r2, [r7, #13]
 800871e:	4908      	ldr	r1, [pc, #32]	@ (8008740 <UARTEx_SetNbDataToProcess+0x98>)
 8008720:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008722:	fb93 f3f2 	sdiv	r3, r3, r2
 8008726:	b29a      	uxth	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800872e:	bf00      	nop
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	080123b8 	.word	0x080123b8
 8008740:	080123c0 	.word	0x080123c0

08008744 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008754:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008758:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	b29a      	uxth	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800877a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800877e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	b29b      	uxth	r3, r3
 800878c:	43db      	mvns	r3, r3
 800878e:	b29b      	uxth	r3, r3
 8008790:	4013      	ands	r3, r2
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	1d3b      	adds	r3, r7, #4
 80087b2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b0a7      	sub	sp, #156	@ 0x9c
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	b29b      	uxth	r3, r3
 8008802:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800880a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	78db      	ldrb	r3, [r3, #3]
 8008812:	2b03      	cmp	r3, #3
 8008814:	d81f      	bhi.n	8008856 <USB_ActivateEndpoint+0x72>
 8008816:	a201      	add	r2, pc, #4	@ (adr r2, 800881c <USB_ActivateEndpoint+0x38>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	0800882d 	.word	0x0800882d
 8008820:	08008849 	.word	0x08008849
 8008824:	0800885f 	.word	0x0800885f
 8008828:	0800883b 	.word	0x0800883b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800882c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008830:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008834:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008838:	e012      	b.n	8008860 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800883a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800883e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008842:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008846:	e00b      	b.n	8008860 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008848:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800884c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008850:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008854:	e004      	b.n	8008860 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800885c:	e000      	b.n	8008860 <USB_ActivateEndpoint+0x7c>
      break;
 800885e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	441a      	add	r2, r3
 800886a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800886e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800887a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800887e:	b29b      	uxth	r3, r3
 8008880:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	b21b      	sxth	r3, r3
 8008892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800889a:	b21a      	sxth	r2, r3
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	b21b      	sxth	r3, r3
 80088a2:	4313      	orrs	r3, r2
 80088a4:	b21b      	sxth	r3, r3
 80088a6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	441a      	add	r2, r3
 80088b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80088b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	7b1b      	ldrb	r3, [r3, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f040 8180 	bne.w	8008bd6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 8084 	beq.w	80089e8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	61bb      	str	r3, [r7, #24]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	461a      	mov	r2, r3
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	4413      	add	r3, r2
 80088f2:	61bb      	str	r3, [r7, #24]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	00da      	lsls	r2, r3, #3
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008902:	617b      	str	r3, [r7, #20]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	88db      	ldrh	r3, [r3, #6]
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	b29b      	uxth	r3, r3
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	827b      	strh	r3, [r7, #18]
 8008922:	8a7b      	ldrh	r3, [r7, #18]
 8008924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01b      	beq.n	8008964 <USB_ActivateEndpoint+0x180>
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	b29b      	uxth	r3, r3
 800893a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800893e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008942:	823b      	strh	r3, [r7, #16]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	441a      	add	r2, r3
 800894e:	8a3b      	ldrh	r3, [r7, #16]
 8008950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800895c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008960:	b29b      	uxth	r3, r3
 8008962:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	78db      	ldrb	r3, [r3, #3]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d020      	beq.n	80089ae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b29b      	uxth	r3, r3
 800897a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800897e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008982:	81bb      	strh	r3, [r7, #12]
 8008984:	89bb      	ldrh	r3, [r7, #12]
 8008986:	f083 0320 	eor.w	r3, r3, #32
 800898a:	81bb      	strh	r3, [r7, #12]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	441a      	add	r2, r3
 8008996:	89bb      	ldrh	r3, [r7, #12]
 8008998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800899c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	8013      	strh	r3, [r2, #0]
 80089ac:	e3f9      	b.n	80091a2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089c4:	81fb      	strh	r3, [r7, #14]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	441a      	add	r2, r3
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	8013      	strh	r3, [r2, #0]
 80089e6:	e3dc      	b.n	80091a2 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f8:	4413      	add	r3, r2
 80089fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	00da      	lsls	r2, r3, #3
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	4413      	add	r3, r2
 8008a06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	88db      	ldrh	r3, [r3, #6]
 8008a10:	085b      	lsrs	r3, r3, #1
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	461a      	mov	r2, r3
 8008a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2c:	4413      	add	r3, r2
 8008a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	00da      	lsls	r2, r3, #3
 8008a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a38:	4413      	add	r3, r2
 8008a3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4e:	801a      	strh	r2, [r3, #0]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <USB_ActivateEndpoint+0x28a>
 8008a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6a:	801a      	strh	r2, [r3, #0]
 8008a6c:	e041      	b.n	8008af2 <USB_ActivateEndpoint+0x30e>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a74:	d81c      	bhi.n	8008ab0 <USB_ActivateEndpoint+0x2cc>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d004      	beq.n	8008a96 <USB_ActivateEndpoint+0x2b2>
 8008a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a90:	3301      	adds	r3, #1
 8008a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	029b      	lsls	r3, r3, #10
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	e020      	b.n	8008af2 <USB_ActivateEndpoint+0x30e>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 031f 	and.w	r3, r3, #31
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d104      	bne.n	8008ad0 <USB_ActivateEndpoint+0x2ec>
 8008ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008aca:	3b01      	subs	r3, #1
 8008acc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	029b      	lsls	r3, r3, #10
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008b00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d01b      	beq.n	8008b42 <USB_ActivateEndpoint+0x35e>
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b20:	843b      	strh	r3, [r7, #32]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	441a      	add	r2, r3
 8008b2c:	8c3b      	ldrh	r3, [r7, #32]
 8008b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d124      	bne.n	8008b94 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b60:	83bb      	strh	r3, [r7, #28]
 8008b62:	8bbb      	ldrh	r3, [r7, #28]
 8008b64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b68:	83bb      	strh	r3, [r7, #28]
 8008b6a:	8bbb      	ldrh	r3, [r7, #28]
 8008b6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b70:	83bb      	strh	r3, [r7, #28]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	441a      	add	r2, r3
 8008b7c:	8bbb      	ldrh	r3, [r7, #28]
 8008b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	8013      	strh	r3, [r2, #0]
 8008b92:	e306      	b.n	80091a2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008baa:	83fb      	strh	r3, [r7, #30]
 8008bac:	8bfb      	ldrh	r3, [r7, #30]
 8008bae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008bb2:	83fb      	strh	r3, [r7, #30]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	441a      	add	r2, r3
 8008bbe:	8bfb      	ldrh	r3, [r7, #30]
 8008bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	8013      	strh	r3, [r2, #0]
 8008bd4:	e2e5      	b.n	80091a2 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	78db      	ldrb	r3, [r3, #3]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d11e      	bne.n	8008c1c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	441a      	add	r2, r3
 8008c02:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c0e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	8013      	strh	r3, [r2, #0]
 8008c1a:	e01d      	b.n	8008c58 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c32:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	441a      	add	r2, r3
 8008c40:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	461a      	mov	r2, r3
 8008c66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008c68:	4413      	add	r3, r2
 8008c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	00da      	lsls	r2, r3, #3
 8008c72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	891b      	ldrh	r3, [r3, #8]
 8008c80:	085b      	lsrs	r3, r3, #1
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c8a:	801a      	strh	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	461a      	mov	r2, r3
 8008c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c9c:	4413      	add	r3, r2
 8008c9e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	00da      	lsls	r2, r3, #3
 8008ca6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ca8:	4413      	add	r3, r2
 8008caa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008cae:	673b      	str	r3, [r7, #112]	@ 0x70
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	895b      	ldrh	r3, [r3, #10]
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cbe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	785b      	ldrb	r3, [r3, #1]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f040 81af 	bne.w	8009028 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8008cda:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8008cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d01d      	beq.n	8008d22 <USB_ActivateEndpoint+0x53e>
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cfc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	441a      	add	r2, r3
 8008d0a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008d32:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d01d      	beq.n	8008d7a <USB_ActivateEndpoint+0x596>
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d54:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	441a      	add	r2, r3
 8008d62:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d16b      	bne.n	8008e5a <USB_ActivateEndpoint+0x676>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	461a      	mov	r2, r3
 8008d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d92:	4413      	add	r3, r2
 8008d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	00da      	lsls	r2, r3, #3
 8008d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d9e:	4413      	add	r3, r2
 8008da0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008da4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008db4:	801a      	strh	r2, [r3, #0]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10a      	bne.n	8008dd4 <USB_ActivateEndpoint+0x5f0>
 8008dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dd0:	801a      	strh	r2, [r3, #0]
 8008dd2:	e05d      	b.n	8008e90 <USB_ActivateEndpoint+0x6ac>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008dda:	d81c      	bhi.n	8008e16 <USB_ActivateEndpoint+0x632>
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d004      	beq.n	8008dfc <USB_ActivateEndpoint+0x618>
 8008df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008df6:	3301      	adds	r3, #1
 8008df8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dfe:	881b      	ldrh	r3, [r3, #0]
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	029b      	lsls	r3, r3, #10
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e12:	801a      	strh	r2, [r3, #0]
 8008e14:	e03c      	b.n	8008e90 <USB_ActivateEndpoint+0x6ac>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	095b      	lsrs	r3, r3, #5
 8008e1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	f003 031f 	and.w	r3, r3, #31
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <USB_ActivateEndpoint+0x652>
 8008e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e30:	3b01      	subs	r3, #1
 8008e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	029b      	lsls	r3, r3, #10
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	4313      	orrs	r3, r2
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e56:	801a      	strh	r2, [r3, #0]
 8008e58:	e01a      	b.n	8008e90 <USB_ActivateEndpoint+0x6ac>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d116      	bne.n	8008e90 <USB_ActivateEndpoint+0x6ac>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e72:	4413      	add	r3, r2
 8008e74:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	00da      	lsls	r2, r3, #3
 8008e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e7e:	4413      	add	r3, r2
 8008e80:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e84:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e8e:	801a      	strh	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	785b      	ldrb	r3, [r3, #1]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d16b      	bne.n	8008f74 <USB_ActivateEndpoint+0x790>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eac:	4413      	add	r3, r2
 8008eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	00da      	lsls	r2, r3, #3
 8008eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eb8:	4413      	add	r3, r2
 8008eba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ece:	801a      	strh	r2, [r3, #0]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10a      	bne.n	8008eee <USB_ActivateEndpoint+0x70a>
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eea:	801a      	strh	r2, [r3, #0]
 8008eec:	e05b      	b.n	8008fa6 <USB_ActivateEndpoint+0x7c2>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ef4:	d81c      	bhi.n	8008f30 <USB_ActivateEndpoint+0x74c>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	085b      	lsrs	r3, r3, #1
 8008efc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d004      	beq.n	8008f16 <USB_ActivateEndpoint+0x732>
 8008f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f10:	3301      	adds	r3, #1
 8008f12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	029b      	lsls	r3, r3, #10
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	4313      	orrs	r3, r2
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2c:	801a      	strh	r2, [r3, #0]
 8008f2e:	e03a      	b.n	8008fa6 <USB_ActivateEndpoint+0x7c2>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	f003 031f 	and.w	r3, r3, #31
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d104      	bne.n	8008f50 <USB_ActivateEndpoint+0x76c>
 8008f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	029b      	lsls	r3, r3, #10
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	4313      	orrs	r3, r2
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f70:	801a      	strh	r2, [r3, #0]
 8008f72:	e018      	b.n	8008fa6 <USB_ActivateEndpoint+0x7c2>
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d114      	bne.n	8008fa6 <USB_ActivateEndpoint+0x7c2>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	461a      	mov	r2, r3
 8008f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f88:	4413      	add	r3, r2
 8008f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	00da      	lsls	r2, r3, #3
 8008f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f94:	4413      	add	r3, r2
 8008f96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fa4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008fbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008fc0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008fc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008fc6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008fc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008fcc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	441a      	add	r2, r3
 8008fd8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008fda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009004:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	441a      	add	r2, r3
 8009010:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800901a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800901e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009022:	b29b      	uxth	r3, r3
 8009024:	8013      	strh	r3, [r2, #0]
 8009026:	e0bc      	b.n	80091a2 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8009038:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800903c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01d      	beq.n	8009080 <USB_ActivateEndpoint+0x89c>
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b29b      	uxth	r3, r3
 8009052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800905a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	441a      	add	r2, r3
 8009068:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800906c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009074:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800907c:	b29b      	uxth	r3, r3
 800907e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009090:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01d      	beq.n	80090d8 <USB_ActivateEndpoint+0x8f4>
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	441a      	add	r2, r3
 80090c0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80090c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	78db      	ldrb	r3, [r3, #3]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d024      	beq.n	800912a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090f6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80090fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80090fe:	f083 0320 	eor.w	r3, r3, #32
 8009102:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	441a      	add	r2, r3
 8009110:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009114:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009118:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800911c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009124:	b29b      	uxth	r3, r3
 8009126:	8013      	strh	r3, [r2, #0]
 8009128:	e01d      	b.n	8009166 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b29b      	uxth	r3, r3
 8009138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800913c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009140:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	441a      	add	r2, r3
 800914e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800915a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800915e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009162:	b29b      	uxth	r3, r3
 8009164:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	b29b      	uxth	r3, r3
 8009174:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800917c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	441a      	add	r2, r3
 800918a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800918e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800919a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800919e:	b29b      	uxth	r3, r3
 80091a0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80091a2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	379c      	adds	r7, #156	@ 0x9c
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop

080091b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b08d      	sub	sp, #52	@ 0x34
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	7b1b      	ldrb	r3, [r3, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f040 808e 	bne.w	80092e4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d044      	beq.n	800925a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	81bb      	strh	r3, [r7, #12]
 80091de:	89bb      	ldrh	r3, [r7, #12]
 80091e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01b      	beq.n	8009220 <USB_DeactivateEndpoint+0x6c>
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091fe:	817b      	strh	r3, [r7, #10]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	441a      	add	r2, r3
 800920a:	897b      	ldrh	r3, [r7, #10]
 800920c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009218:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800921c:	b29b      	uxth	r3, r3
 800921e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009236:	813b      	strh	r3, [r7, #8]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	441a      	add	r2, r3
 8009242:	893b      	ldrh	r3, [r7, #8]
 8009244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800924c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009254:	b29b      	uxth	r3, r3
 8009256:	8013      	strh	r3, [r2, #0]
 8009258:	e192      	b.n	8009580 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	827b      	strh	r3, [r7, #18]
 8009268:	8a7b      	ldrh	r3, [r7, #18]
 800926a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d01b      	beq.n	80092aa <USB_DeactivateEndpoint+0xf6>
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	b29b      	uxth	r3, r3
 8009280:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009288:	823b      	strh	r3, [r7, #16]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	441a      	add	r2, r3
 8009294:	8a3b      	ldrh	r3, [r7, #16]
 8009296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800929a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800929e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092c0:	81fb      	strh	r3, [r7, #14]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	441a      	add	r2, r3
 80092cc:	89fb      	ldrh	r3, [r7, #14]
 80092ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092de:	b29b      	uxth	r3, r3
 80092e0:	8013      	strh	r3, [r2, #0]
 80092e2:	e14d      	b.n	8009580 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f040 80a5 	bne.w	8009438 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	843b      	strh	r3, [r7, #32]
 80092fc:	8c3b      	ldrh	r3, [r7, #32]
 80092fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d01b      	beq.n	800933e <USB_DeactivateEndpoint+0x18a>
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4413      	add	r3, r2
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	b29b      	uxth	r3, r3
 8009314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800931c:	83fb      	strh	r3, [r7, #30]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	441a      	add	r2, r3
 8009328:	8bfb      	ldrh	r3, [r7, #30]
 800932a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800932e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009332:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800933a:	b29b      	uxth	r3, r3
 800933c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	83bb      	strh	r3, [r7, #28]
 800934c:	8bbb      	ldrh	r3, [r7, #28]
 800934e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	d01b      	beq.n	800938e <USB_DeactivateEndpoint+0x1da>
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800936c:	837b      	strh	r3, [r7, #26]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	441a      	add	r2, r3
 8009378:	8b7b      	ldrh	r3, [r7, #26]
 800937a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800937e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009386:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800938a:	b29b      	uxth	r3, r3
 800938c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	b29b      	uxth	r3, r3
 800939c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093a4:	833b      	strh	r3, [r7, #24]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	441a      	add	r2, r3
 80093b0:	8b3b      	ldrh	r3, [r7, #24]
 80093b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093dc:	82fb      	strh	r3, [r7, #22]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	441a      	add	r2, r3
 80093e8:	8afb      	ldrh	r3, [r7, #22]
 80093ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	b29b      	uxth	r3, r3
 800940c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009414:	82bb      	strh	r3, [r7, #20]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	441a      	add	r2, r3
 8009420:	8abb      	ldrh	r3, [r7, #20]
 8009422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800942a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800942e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009432:	b29b      	uxth	r3, r3
 8009434:	8013      	strh	r3, [r2, #0]
 8009436:	e0a3      	b.n	8009580 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009446:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01b      	beq.n	8009488 <USB_DeactivateEndpoint+0x2d4>
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	b29b      	uxth	r3, r3
 800945e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009466:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	441a      	add	r2, r3
 8009472:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800947c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009484:	b29b      	uxth	r3, r3
 8009486:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009496:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01b      	beq.n	80094d8 <USB_DeactivateEndpoint+0x324>
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	441a      	add	r2, r3
 80094c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80094c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	441a      	add	r2, r3
 80094fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80094fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009500:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009504:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800950c:	b29b      	uxth	r3, r3
 800950e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009526:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	441a      	add	r2, r3
 8009532:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009534:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009538:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800953c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009544:	b29b      	uxth	r3, r3
 8009546:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	b29b      	uxth	r3, r3
 8009556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800955a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800955e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	441a      	add	r2, r3
 800956a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800956c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009570:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009574:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800957c:	b29b      	uxth	r3, r3
 800957e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3734      	adds	r7, #52	@ 0x34
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b0ac      	sub	sp, #176	@ 0xb0
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	2b01      	cmp	r3, #1
 800959e:	f040 84ca 	bne.w	8009f36 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	699a      	ldr	r2, [r3, #24]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d904      	bls.n	80095b8 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095b6:	e003      	b.n	80095c0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	7b1b      	ldrb	r3, [r3, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d122      	bne.n	800960e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	6959      	ldr	r1, [r3, #20]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	88da      	ldrh	r2, [r3, #6]
 80095d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 febd 	bl	800a356 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	613b      	str	r3, [r7, #16]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	461a      	mov	r2, r3
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	4413      	add	r3, r2
 80095ee:	613b      	str	r3, [r7, #16]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	00da      	lsls	r2, r3, #3
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	4413      	add	r3, r2
 80095fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009604:	b29a      	uxth	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	801a      	strh	r2, [r3, #0]
 800960a:	f000 bc6f 	b.w	8009eec <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	78db      	ldrb	r3, [r3, #3]
 8009612:	2b02      	cmp	r3, #2
 8009614:	f040 831e 	bne.w	8009c54 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	6a1a      	ldr	r2, [r3, #32]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	429a      	cmp	r2, r3
 8009622:	f240 82cf 	bls.w	8009bc4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800963c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	441a      	add	r2, r3
 800964a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800964e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009656:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800965a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800965e:	b29b      	uxth	r3, r3
 8009660:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	6a1a      	ldr	r2, [r3, #32]
 8009666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800966a:	1ad2      	subs	r2, r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	b29b      	uxth	r3, r3
 800967e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 814f 	beq.w	8009926 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	633b      	str	r3, [r7, #48]	@ 0x30
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	785b      	ldrb	r3, [r3, #1]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d16b      	bne.n	800976c <USB_EPStartXfer+0x1de>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800969e:	b29b      	uxth	r3, r3
 80096a0:	461a      	mov	r2, r3
 80096a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a4:	4413      	add	r3, r2
 80096a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	00da      	lsls	r2, r3, #3
 80096ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b0:	4413      	add	r3, r2
 80096b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80096b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80096b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c6:	801a      	strh	r2, [r3, #0]
 80096c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <USB_EPStartXfer+0x158>
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096de:	b29a      	uxth	r2, r3
 80096e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e2:	801a      	strh	r2, [r3, #0]
 80096e4:	e05b      	b.n	800979e <USB_EPStartXfer+0x210>
 80096e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80096ec:	d81c      	bhi.n	8009728 <USB_EPStartXfer+0x19a>
 80096ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096f2:	085b      	lsrs	r3, r3, #1
 80096f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	d004      	beq.n	800970e <USB_EPStartXfer+0x180>
 8009704:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009708:	3301      	adds	r3, #1
 800970a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800970e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	b29a      	uxth	r2, r3
 8009714:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009718:	b29b      	uxth	r3, r3
 800971a:	029b      	lsls	r3, r3, #10
 800971c:	b29b      	uxth	r3, r3
 800971e:	4313      	orrs	r3, r2
 8009720:	b29a      	uxth	r2, r3
 8009722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009724:	801a      	strh	r2, [r3, #0]
 8009726:	e03a      	b.n	800979e <USB_EPStartXfer+0x210>
 8009728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800972c:	095b      	lsrs	r3, r3, #5
 800972e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009736:	f003 031f 	and.w	r3, r3, #31
 800973a:	2b00      	cmp	r3, #0
 800973c:	d104      	bne.n	8009748 <USB_EPStartXfer+0x1ba>
 800973e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009742:	3b01      	subs	r3, #1
 8009744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	b29a      	uxth	r2, r3
 800974e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009752:	b29b      	uxth	r3, r3
 8009754:	029b      	lsls	r3, r3, #10
 8009756:	b29b      	uxth	r3, r3
 8009758:	4313      	orrs	r3, r2
 800975a:	b29b      	uxth	r3, r3
 800975c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009764:	b29a      	uxth	r2, r3
 8009766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009768:	801a      	strh	r2, [r3, #0]
 800976a:	e018      	b.n	800979e <USB_EPStartXfer+0x210>
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d114      	bne.n	800979e <USB_EPStartXfer+0x210>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800977a:	b29b      	uxth	r3, r3
 800977c:	461a      	mov	r2, r3
 800977e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009780:	4413      	add	r3, r2
 8009782:	633b      	str	r3, [r7, #48]	@ 0x30
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	00da      	lsls	r2, r3, #3
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	4413      	add	r3, r2
 800978e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009798:	b29a      	uxth	r2, r3
 800979a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	895b      	ldrh	r3, [r3, #10]
 80097a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	6959      	ldr	r1, [r3, #20]
 80097aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fdce 	bl	800a356 <USB_WritePMA>
            ep->xfer_buff += len;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	695a      	ldr	r2, [r3, #20]
 80097be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097c2:	441a      	add	r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	6a1a      	ldr	r2, [r3, #32]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d907      	bls.n	80097e4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	6a1a      	ldr	r2, [r3, #32]
 80097d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097dc:	1ad2      	subs	r2, r2, r3
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	621a      	str	r2, [r3, #32]
 80097e2:	e006      	b.n	80097f2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2200      	movs	r2, #0
 80097f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	785b      	ldrb	r3, [r3, #1]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d16b      	bne.n	80098d2 <USB_EPStartXfer+0x344>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	61bb      	str	r3, [r7, #24]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009804:	b29b      	uxth	r3, r3
 8009806:	461a      	mov	r2, r3
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	4413      	add	r3, r2
 800980c:	61bb      	str	r3, [r7, #24]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	00da      	lsls	r2, r3, #3
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	4413      	add	r3, r2
 8009818:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800981c:	617b      	str	r3, [r7, #20]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009828:	b29a      	uxth	r2, r3
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	801a      	strh	r2, [r3, #0]
 800982e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10a      	bne.n	800984c <USB_EPStartXfer+0x2be>
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	b29b      	uxth	r3, r3
 800983c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009844:	b29a      	uxth	r2, r3
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	801a      	strh	r2, [r3, #0]
 800984a:	e05d      	b.n	8009908 <USB_EPStartXfer+0x37a>
 800984c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009850:	2b3e      	cmp	r3, #62	@ 0x3e
 8009852:	d81c      	bhi.n	800988e <USB_EPStartXfer+0x300>
 8009854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009858:	085b      	lsrs	r3, r3, #1
 800985a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800985e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	d004      	beq.n	8009874 <USB_EPStartXfer+0x2e6>
 800986a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800986e:	3301      	adds	r3, #1
 8009870:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	b29a      	uxth	r2, r3
 800987a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800987e:	b29b      	uxth	r3, r3
 8009880:	029b      	lsls	r3, r3, #10
 8009882:	b29b      	uxth	r3, r3
 8009884:	4313      	orrs	r3, r2
 8009886:	b29a      	uxth	r2, r3
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	e03c      	b.n	8009908 <USB_EPStartXfer+0x37a>
 800988e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009892:	095b      	lsrs	r3, r3, #5
 8009894:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800989c:	f003 031f 	and.w	r3, r3, #31
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <USB_EPStartXfer+0x320>
 80098a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098a8:	3b01      	subs	r3, #1
 80098aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	029b      	lsls	r3, r3, #10
 80098bc:	b29b      	uxth	r3, r3
 80098be:	4313      	orrs	r3, r2
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	801a      	strh	r2, [r3, #0]
 80098d0:	e01a      	b.n	8009908 <USB_EPStartXfer+0x37a>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	785b      	ldrb	r3, [r3, #1]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d116      	bne.n	8009908 <USB_EPStartXfer+0x37a>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	623b      	str	r3, [r7, #32]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	461a      	mov	r2, r3
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	4413      	add	r3, r2
 80098ec:	623b      	str	r3, [r7, #32]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	00da      	lsls	r2, r3, #3
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	4413      	add	r3, r2
 80098f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098fc:	61fb      	str	r3, [r7, #28]
 80098fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009902:	b29a      	uxth	r2, r3
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	891b      	ldrh	r3, [r3, #8]
 800990c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	6959      	ldr	r1, [r3, #20]
 8009914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009918:	b29b      	uxth	r3, r3
 800991a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fd19 	bl	800a356 <USB_WritePMA>
 8009924:	e2e2      	b.n	8009eec <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	785b      	ldrb	r3, [r3, #1]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d16b      	bne.n	8009a06 <USB_EPStartXfer+0x478>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009938:	b29b      	uxth	r3, r3
 800993a:	461a      	mov	r2, r3
 800993c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800993e:	4413      	add	r3, r2
 8009940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	00da      	lsls	r2, r3, #3
 8009948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800994a:	4413      	add	r3, r2
 800994c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009950:	647b      	str	r3, [r7, #68]	@ 0x44
 8009952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	b29b      	uxth	r3, r3
 8009958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800995c:	b29a      	uxth	r2, r3
 800995e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009960:	801a      	strh	r2, [r3, #0]
 8009962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10a      	bne.n	8009980 <USB_EPStartXfer+0x3f2>
 800996a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	b29b      	uxth	r3, r3
 8009970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009978:	b29a      	uxth	r2, r3
 800997a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800997c:	801a      	strh	r2, [r3, #0]
 800997e:	e05d      	b.n	8009a3c <USB_EPStartXfer+0x4ae>
 8009980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009984:	2b3e      	cmp	r3, #62	@ 0x3e
 8009986:	d81c      	bhi.n	80099c2 <USB_EPStartXfer+0x434>
 8009988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800998c:	085b      	lsrs	r3, r3, #1
 800998e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b00      	cmp	r3, #0
 800999c:	d004      	beq.n	80099a8 <USB_EPStartXfer+0x41a>
 800999e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099a2:	3301      	adds	r3, #1
 80099a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	029b      	lsls	r3, r3, #10
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	4313      	orrs	r3, r2
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099be:	801a      	strh	r2, [r3, #0]
 80099c0:	e03c      	b.n	8009a3c <USB_EPStartXfer+0x4ae>
 80099c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099c6:	095b      	lsrs	r3, r3, #5
 80099c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099d0:	f003 031f 	and.w	r3, r3, #31
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d104      	bne.n	80099e2 <USB_EPStartXfer+0x454>
 80099d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099dc:	3b01      	subs	r3, #1
 80099de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	029b      	lsls	r3, r3, #10
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	4313      	orrs	r3, r2
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a02:	801a      	strh	r2, [r3, #0]
 8009a04:	e01a      	b.n	8009a3c <USB_EPStartXfer+0x4ae>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d116      	bne.n	8009a3c <USB_EPStartXfer+0x4ae>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a1e:	4413      	add	r3, r2
 8009a20:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	00da      	lsls	r2, r3, #3
 8009a28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	891b      	ldrh	r3, [r3, #8]
 8009a40:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	6959      	ldr	r1, [r3, #20]
 8009a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fc7f 	bl	800a356 <USB_WritePMA>
            ep->xfer_buff += len;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	695a      	ldr	r2, [r3, #20]
 8009a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a60:	441a      	add	r2, r3
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	6a1a      	ldr	r2, [r3, #32]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d907      	bls.n	8009a82 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	6a1a      	ldr	r2, [r3, #32]
 8009a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a7a:	1ad2      	subs	r2, r2, r3
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	621a      	str	r2, [r3, #32]
 8009a80:	e006      	b.n	8009a90 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	785b      	ldrb	r3, [r3, #1]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d16b      	bne.n	8009b74 <USB_EPStartXfer+0x5e6>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aac:	4413      	add	r3, r2
 8009aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	00da      	lsls	r2, r3, #3
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab8:	4413      	add	r3, r2
 8009aba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ace:	801a      	strh	r2, [r3, #0]
 8009ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <USB_EPStartXfer+0x560>
 8009ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aea:	801a      	strh	r2, [r3, #0]
 8009aec:	e05b      	b.n	8009ba6 <USB_EPStartXfer+0x618>
 8009aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009af2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009af4:	d81c      	bhi.n	8009b30 <USB_EPStartXfer+0x5a2>
 8009af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009afa:	085b      	lsrs	r3, r3, #1
 8009afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d004      	beq.n	8009b16 <USB_EPStartXfer+0x588>
 8009b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b10:	3301      	adds	r3, #1
 8009b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	029b      	lsls	r3, r3, #10
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	4313      	orrs	r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2c:	801a      	strh	r2, [r3, #0]
 8009b2e:	e03a      	b.n	8009ba6 <USB_EPStartXfer+0x618>
 8009b30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b34:	095b      	lsrs	r3, r3, #5
 8009b36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b3e:	f003 031f 	and.w	r3, r3, #31
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d104      	bne.n	8009b50 <USB_EPStartXfer+0x5c2>
 8009b46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	029b      	lsls	r3, r3, #10
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	4313      	orrs	r3, r2
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b70:	801a      	strh	r2, [r3, #0]
 8009b72:	e018      	b.n	8009ba6 <USB_EPStartXfer+0x618>
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d114      	bne.n	8009ba6 <USB_EPStartXfer+0x618>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	461a      	mov	r2, r3
 8009b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b88:	4413      	add	r3, r2
 8009b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	00da      	lsls	r2, r3, #3
 8009b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b94:	4413      	add	r3, r2
 8009b96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	895b      	ldrh	r3, [r3, #10]
 8009baa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	6959      	ldr	r1, [r3, #20]
 8009bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fbca 	bl	800a356 <USB_WritePMA>
 8009bc2:	e193      	b.n	8009eec <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	441a      	add	r2, r3
 8009bf0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	461a      	mov	r2, r3
 8009c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c18:	4413      	add	r3, r2
 8009c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	00da      	lsls	r2, r3, #3
 8009c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c24:	4413      	add	r3, r2
 8009c26:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	891b      	ldrh	r3, [r3, #8]
 8009c3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	6959      	ldr	r1, [r3, #20]
 8009c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fb82 	bl	800a356 <USB_WritePMA>
 8009c52:	e14b      	b.n	8009eec <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	6a1a      	ldr	r2, [r3, #32]
 8009c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c5c:	1ad2      	subs	r2, r2, r3
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 809a 	beq.w	8009dae <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	785b      	ldrb	r3, [r3, #1]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d16b      	bne.n	8009d5e <USB_EPStartXfer+0x7d0>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c96:	4413      	add	r3, r2
 8009c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	00da      	lsls	r2, r3, #3
 8009ca0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ca8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009caa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cb8:	801a      	strh	r2, [r3, #0]
 8009cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <USB_EPStartXfer+0x74a>
 8009cc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cd4:	801a      	strh	r2, [r3, #0]
 8009cd6:	e05b      	b.n	8009d90 <USB_EPStartXfer+0x802>
 8009cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cdc:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cde:	d81c      	bhi.n	8009d1a <USB_EPStartXfer+0x78c>
 8009ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ce4:	085b      	lsrs	r3, r3, #1
 8009ce6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d004      	beq.n	8009d00 <USB_EPStartXfer+0x772>
 8009cf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d02:	881b      	ldrh	r3, [r3, #0]
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	029b      	lsls	r3, r3, #10
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	4313      	orrs	r3, r2
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d16:	801a      	strh	r2, [r3, #0]
 8009d18:	e03a      	b.n	8009d90 <USB_EPStartXfer+0x802>
 8009d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d1e:	095b      	lsrs	r3, r3, #5
 8009d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d28:	f003 031f 	and.w	r3, r3, #31
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d104      	bne.n	8009d3a <USB_EPStartXfer+0x7ac>
 8009d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d34:	3b01      	subs	r3, #1
 8009d36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	029b      	lsls	r3, r3, #10
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d5a:	801a      	strh	r2, [r3, #0]
 8009d5c:	e018      	b.n	8009d90 <USB_EPStartXfer+0x802>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	785b      	ldrb	r3, [r3, #1]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d114      	bne.n	8009d90 <USB_EPStartXfer+0x802>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	461a      	mov	r2, r3
 8009d70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d72:	4413      	add	r3, r2
 8009d74:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	00da      	lsls	r2, r3, #3
 8009d7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d7e:	4413      	add	r3, r2
 8009d80:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	895b      	ldrh	r3, [r3, #10]
 8009d94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	6959      	ldr	r1, [r3, #20]
 8009d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fad5 	bl	800a356 <USB_WritePMA>
 8009dac:	e09e      	b.n	8009eec <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	785b      	ldrb	r3, [r3, #1]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d16b      	bne.n	8009e8e <USB_EPStartXfer+0x900>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009dc6:	4413      	add	r3, r2
 8009dc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	00da      	lsls	r2, r3, #3
 8009dd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009de8:	801a      	strh	r2, [r3, #0]
 8009dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10a      	bne.n	8009e08 <USB_EPStartXfer+0x87a>
 8009df2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e04:	801a      	strh	r2, [r3, #0]
 8009e06:	e063      	b.n	8009ed0 <USB_EPStartXfer+0x942>
 8009e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e0e:	d81c      	bhi.n	8009e4a <USB_EPStartXfer+0x8bc>
 8009e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e14:	085b      	lsrs	r3, r3, #1
 8009e16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d004      	beq.n	8009e30 <USB_EPStartXfer+0x8a2>
 8009e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	029b      	lsls	r3, r3, #10
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	4313      	orrs	r3, r2
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e46:	801a      	strh	r2, [r3, #0]
 8009e48:	e042      	b.n	8009ed0 <USB_EPStartXfer+0x942>
 8009e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e4e:	095b      	lsrs	r3, r3, #5
 8009e50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e58:	f003 031f 	and.w	r3, r3, #31
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d104      	bne.n	8009e6a <USB_EPStartXfer+0x8dc>
 8009e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e64:	3b01      	subs	r3, #1
 8009e66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	029b      	lsls	r3, r3, #10
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e8a:	801a      	strh	r2, [r3, #0]
 8009e8c:	e020      	b.n	8009ed0 <USB_EPStartXfer+0x942>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	785b      	ldrb	r3, [r3, #1]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d11c      	bne.n	8009ed0 <USB_EPStartXfer+0x942>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009eaa:	4413      	add	r3, r2
 8009eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	00da      	lsls	r2, r3, #3
 8009eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009eba:	4413      	add	r3, r2
 8009ebc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ece:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	891b      	ldrh	r3, [r3, #8]
 8009ed4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	6959      	ldr	r1, [r3, #20]
 8009edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fa35 	bl	800a356 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009efe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f02:	817b      	strh	r3, [r7, #10]
 8009f04:	897b      	ldrh	r3, [r7, #10]
 8009f06:	f083 0310 	eor.w	r3, r3, #16
 8009f0a:	817b      	strh	r3, [r7, #10]
 8009f0c:	897b      	ldrh	r3, [r7, #10]
 8009f0e:	f083 0320 	eor.w	r3, r3, #32
 8009f12:	817b      	strh	r3, [r7, #10]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	441a      	add	r2, r3
 8009f1e:	897b      	ldrh	r3, [r7, #10]
 8009f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	8013      	strh	r3, [r2, #0]
 8009f34:	e0d5      	b.n	800a0e2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	7b1b      	ldrb	r3, [r3, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d156      	bne.n	8009fec <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d122      	bne.n	8009f8c <USB_EPStartXfer+0x9fe>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	78db      	ldrb	r3, [r3, #3]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d11e      	bne.n	8009f8c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	881b      	ldrh	r3, [r3, #0]
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f64:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	441a      	add	r2, r3
 8009f72:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f7e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	8013      	strh	r3, [r2, #0]
 8009f8a:	e01d      	b.n	8009fc8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fa2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	441a      	add	r2, r3
 8009fb0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	699a      	ldr	r2, [r3, #24]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d907      	bls.n	8009fe4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	699a      	ldr	r2, [r3, #24]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	1ad2      	subs	r2, r2, r3
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	619a      	str	r2, [r3, #24]
 8009fe2:	e054      	b.n	800a08e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	619a      	str	r2, [r3, #24]
 8009fea:	e050      	b.n	800a08e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	78db      	ldrb	r3, [r3, #3]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d142      	bne.n	800a07a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d048      	beq.n	800a08e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	881b      	ldrh	r3, [r3, #0]
 800a008:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a00c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d005      	beq.n	800a024 <USB_EPStartXfer+0xa96>
 800a018:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10b      	bne.n	800a03c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a024:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d12e      	bne.n	800a08e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a030:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d128      	bne.n	800a08e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a04e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a052:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	441a      	add	r2, r3
 800a060:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a064:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a068:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a06c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a070:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a074:	b29b      	uxth	r3, r3
 800a076:	8013      	strh	r3, [r2, #0]
 800a078:	e009      	b.n	800a08e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	78db      	ldrb	r3, [r3, #3]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d103      	bne.n	800a08a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2200      	movs	r2, #0
 800a086:	619a      	str	r2, [r3, #24]
 800a088:	e001      	b.n	800a08e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e02a      	b.n	800a0e4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a0a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a0ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a0b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a0b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a0b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a0bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	441a      	add	r2, r3
 800a0ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a0ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	37b0      	adds	r7, #176	@ 0xb0
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	785b      	ldrb	r3, [r3, #1]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d020      	beq.n	800a140 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	881b      	ldrh	r3, [r3, #0]
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a114:	81bb      	strh	r3, [r7, #12]
 800a116:	89bb      	ldrh	r3, [r7, #12]
 800a118:	f083 0310 	eor.w	r3, r3, #16
 800a11c:	81bb      	strh	r3, [r7, #12]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	441a      	add	r2, r3
 800a128:	89bb      	ldrh	r3, [r7, #12]
 800a12a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a12e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	8013      	strh	r3, [r2, #0]
 800a13e:	e01f      	b.n	800a180 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a156:	81fb      	strh	r3, [r7, #14]
 800a158:	89fb      	ldrh	r3, [r7, #14]
 800a15a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a15e:	81fb      	strh	r3, [r7, #14]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	441a      	add	r2, r3
 800a16a:	89fb      	ldrh	r3, [r7, #14]
 800a16c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a170:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a18e:	b480      	push	{r7}
 800a190:	b087      	sub	sp, #28
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	785b      	ldrb	r3, [r3, #1]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d04c      	beq.n	800a23a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	823b      	strh	r3, [r7, #16]
 800a1ae:	8a3b      	ldrh	r3, [r7, #16]
 800a1b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01b      	beq.n	800a1f0 <USB_EPClearStall+0x62>
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1ce:	81fb      	strh	r3, [r7, #14]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	441a      	add	r2, r3
 800a1da:	89fb      	ldrh	r3, [r7, #14]
 800a1dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	78db      	ldrb	r3, [r3, #3]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d06c      	beq.n	800a2d2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4413      	add	r3, r2
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	b29b      	uxth	r3, r3
 800a206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a20a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a20e:	81bb      	strh	r3, [r7, #12]
 800a210:	89bb      	ldrh	r3, [r7, #12]
 800a212:	f083 0320 	eor.w	r3, r3, #32
 800a216:	81bb      	strh	r3, [r7, #12]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	441a      	add	r2, r3
 800a222:	89bb      	ldrh	r3, [r7, #12]
 800a224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a22c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a234:	b29b      	uxth	r3, r3
 800a236:	8013      	strh	r3, [r2, #0]
 800a238:	e04b      	b.n	800a2d2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	82fb      	strh	r3, [r7, #22]
 800a248:	8afb      	ldrh	r3, [r7, #22]
 800a24a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d01b      	beq.n	800a28a <USB_EPClearStall+0xfc>
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4413      	add	r3, r2
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a268:	82bb      	strh	r3, [r7, #20]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	441a      	add	r2, r3
 800a274:	8abb      	ldrh	r3, [r7, #20]
 800a276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a27a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a27e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a286:	b29b      	uxth	r3, r3
 800a288:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a29c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2a0:	827b      	strh	r3, [r7, #18]
 800a2a2:	8a7b      	ldrh	r3, [r7, #18]
 800a2a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a2a8:	827b      	strh	r3, [r7, #18]
 800a2aa:	8a7b      	ldrh	r3, [r7, #18]
 800a2ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a2b0:	827b      	strh	r3, [r7, #18]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	441a      	add	r2, r3
 800a2bc:	8a7b      	ldrh	r3, [r7, #18]
 800a2be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a2ec:	78fb      	ldrb	r3, [r7, #3]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d103      	bne.n	800a2fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2280      	movs	r2, #128	@ 0x80
 800a2f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a316:	b29b      	uxth	r3, r3
 800a318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a31c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a320:	b29a      	uxth	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a336:	b480      	push	{r7}
 800a338:	b085      	sub	sp, #20
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a344:	b29b      	uxth	r3, r3
 800a346:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a348:	68fb      	ldr	r3, [r7, #12]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a356:	b480      	push	{r7}
 800a358:	b08b      	sub	sp, #44	@ 0x2c
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
 800a35e:	60b9      	str	r1, [r7, #8]
 800a360:	4611      	mov	r1, r2
 800a362:	461a      	mov	r2, r3
 800a364:	460b      	mov	r3, r1
 800a366:	80fb      	strh	r3, [r7, #6]
 800a368:	4613      	mov	r3, r2
 800a36a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a36c:	88bb      	ldrh	r3, [r7, #4]
 800a36e:	3301      	adds	r3, #1
 800a370:	085b      	lsrs	r3, r3, #1
 800a372:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a37c:	88fa      	ldrh	r2, [r7, #6]
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	4413      	add	r3, r2
 800a382:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a386:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a38c:	e01c      	b.n	800a3c8 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	3301      	adds	r3, #1
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b21b      	sxth	r3, r3
 800a39c:	021b      	lsls	r3, r3, #8
 800a39e:	b21a      	sxth	r2, r3
 800a3a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	b21b      	sxth	r3, r3
 800a3a8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	8a7a      	ldrh	r2, [r7, #18]
 800a3ae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	3302      	adds	r3, #2
 800a3b4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1df      	bne.n	800a38e <USB_WritePMA+0x38>
  }
}
 800a3ce:	bf00      	nop
 800a3d0:	bf00      	nop
 800a3d2:	372c      	adds	r7, #44	@ 0x2c
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b08b      	sub	sp, #44	@ 0x2c
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	80fb      	strh	r3, [r7, #6]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a3f2:	88bb      	ldrh	r3, [r7, #4]
 800a3f4:	085b      	lsrs	r3, r3, #1
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a402:	88fa      	ldrh	r2, [r7, #6]
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	4413      	add	r3, r2
 800a408:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a40c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	627b      	str	r3, [r7, #36]	@ 0x24
 800a412:	e018      	b.n	800a446 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	3302      	adds	r3, #2
 800a420:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	b2da      	uxtb	r2, r3
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	3301      	adds	r3, #1
 800a42e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	0a1b      	lsrs	r3, r3, #8
 800a434:	b2da      	uxtb	r2, r3
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	3301      	adds	r3, #1
 800a43e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a442:	3b01      	subs	r3, #1
 800a444:	627b      	str	r3, [r7, #36]	@ 0x24
 800a446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e3      	bne.n	800a414 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a44c:	88bb      	ldrh	r3, [r7, #4]
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	b29b      	uxth	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	d007      	beq.n	800a468 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	881b      	ldrh	r3, [r3, #0]
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	b2da      	uxtb	r2, r3
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	701a      	strb	r2, [r3, #0]
  }
}
 800a468:	bf00      	nop
 800a46a:	372c      	adds	r7, #44	@ 0x2c
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a480:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a484:	f004 fef0 	bl	800f268 <USBD_static_malloc>
 800a488:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d105      	bne.n	800a49c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a498:	2302      	movs	r3, #2
 800a49a:	e066      	b.n	800a56a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7c1b      	ldrb	r3, [r3, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d119      	bne.n	800a4e0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a4ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	2181      	movs	r1, #129	@ 0x81
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f004 fd7e 	bl	800efb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f004 fd74 	bl	800efb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2210      	movs	r2, #16
 800a4da:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a4de:	e016      	b.n	800a50e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a4e0:	2340      	movs	r3, #64	@ 0x40
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	2181      	movs	r1, #129	@ 0x81
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f004 fd65 	bl	800efb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4f2:	2340      	movs	r3, #64	@ 0x40
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	2101      	movs	r1, #1
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f004 fd5c 	bl	800efb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2210      	movs	r2, #16
 800a50a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a50e:	2308      	movs	r3, #8
 800a510:	2203      	movs	r2, #3
 800a512:	2182      	movs	r1, #130	@ 0x82
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f004 fd4e 	bl	800efb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7c1b      	ldrb	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d109      	bne.n	800a558 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a54a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a54e:	2101      	movs	r1, #1
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f004 fe1f 	bl	800f194 <USBD_LL_PrepareReceive>
 800a556:	e007      	b.n	800a568 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a55e:	2340      	movs	r3, #64	@ 0x40
 800a560:	2101      	movs	r1, #1
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f004 fe16 	bl	800f194 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a57e:	2181      	movs	r1, #129	@ 0x81
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f004 fd3e 	bl	800f002 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a58c:	2101      	movs	r1, #1
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f004 fd37 	bl	800f002 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a59c:	2182      	movs	r1, #130	@ 0x82
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f004 fd2f 	bl	800f002 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00e      	beq.n	800a5dc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f004 fe58 	bl	800f284 <USBD_static_free>
    pdev->pClassData = NULL;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
	...

0800a5e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e0af      	b.n	800a770 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d03f      	beq.n	800a69c <USBD_CDC_Setup+0xb4>
 800a61c:	2b20      	cmp	r3, #32
 800a61e:	f040 809f 	bne.w	800a760 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	88db      	ldrh	r3, [r3, #6]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d02e      	beq.n	800a688 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	b25b      	sxtb	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	da16      	bge.n	800a662 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a640:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	88d2      	ldrh	r2, [r2, #6]
 800a646:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	88db      	ldrh	r3, [r3, #6]
 800a64c:	2b07      	cmp	r3, #7
 800a64e:	bf28      	it	cs
 800a650:	2307      	movcs	r3, #7
 800a652:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	89fa      	ldrh	r2, [r7, #14]
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f001 facf 	bl	800bbfe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a660:	e085      	b.n	800a76e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	785a      	ldrb	r2, [r3, #1]
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	88db      	ldrh	r3, [r3, #6]
 800a670:	b2da      	uxtb	r2, r3
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a678:	6939      	ldr	r1, [r7, #16]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	88db      	ldrh	r3, [r3, #6]
 800a67e:	461a      	mov	r2, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 fae8 	bl	800bc56 <USBD_CtlPrepareRx>
      break;
 800a686:	e072      	b.n	800a76e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	7850      	ldrb	r0, [r2, #1]
 800a694:	2200      	movs	r2, #0
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	4798      	blx	r3
      break;
 800a69a:	e068      	b.n	800a76e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	785b      	ldrb	r3, [r3, #1]
 800a6a0:	2b0b      	cmp	r3, #11
 800a6a2:	d852      	bhi.n	800a74a <USBD_CDC_Setup+0x162>
 800a6a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6ac <USBD_CDC_Setup+0xc4>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a6dd 	.word	0x0800a6dd
 800a6b0:	0800a759 	.word	0x0800a759
 800a6b4:	0800a74b 	.word	0x0800a74b
 800a6b8:	0800a74b 	.word	0x0800a74b
 800a6bc:	0800a74b 	.word	0x0800a74b
 800a6c0:	0800a74b 	.word	0x0800a74b
 800a6c4:	0800a74b 	.word	0x0800a74b
 800a6c8:	0800a74b 	.word	0x0800a74b
 800a6cc:	0800a74b 	.word	0x0800a74b
 800a6d0:	0800a74b 	.word	0x0800a74b
 800a6d4:	0800a707 	.word	0x0800a707
 800a6d8:	0800a731 	.word	0x0800a731
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d107      	bne.n	800a6f8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a6e8:	f107 030a 	add.w	r3, r7, #10
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f001 fa84 	bl	800bbfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6f6:	e032      	b.n	800a75e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f001 fa0e 	bl	800bb1c <USBD_CtlError>
            ret = USBD_FAIL;
 800a700:	2303      	movs	r3, #3
 800a702:	75fb      	strb	r3, [r7, #23]
          break;
 800a704:	e02b      	b.n	800a75e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d107      	bne.n	800a722 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a712:	f107 030d 	add.w	r3, r7, #13
 800a716:	2201      	movs	r2, #1
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 fa6f 	bl	800bbfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a720:	e01d      	b.n	800a75e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f001 f9f9 	bl	800bb1c <USBD_CtlError>
            ret = USBD_FAIL;
 800a72a:	2303      	movs	r3, #3
 800a72c:	75fb      	strb	r3, [r7, #23]
          break;
 800a72e:	e016      	b.n	800a75e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b03      	cmp	r3, #3
 800a73a:	d00f      	beq.n	800a75c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f001 f9ec 	bl	800bb1c <USBD_CtlError>
            ret = USBD_FAIL;
 800a744:	2303      	movs	r3, #3
 800a746:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a748:	e008      	b.n	800a75c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f001 f9e5 	bl	800bb1c <USBD_CtlError>
          ret = USBD_FAIL;
 800a752:	2303      	movs	r3, #3
 800a754:	75fb      	strb	r3, [r7, #23]
          break;
 800a756:	e002      	b.n	800a75e <USBD_CDC_Setup+0x176>
          break;
 800a758:	bf00      	nop
 800a75a:	e008      	b.n	800a76e <USBD_CDC_Setup+0x186>
          break;
 800a75c:	bf00      	nop
      }
      break;
 800a75e:	e006      	b.n	800a76e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 f9da 	bl	800bb1c <USBD_CtlError>
      ret = USBD_FAIL;
 800a768:	2303      	movs	r3, #3
 800a76a:	75fb      	strb	r3, [r7, #23]
      break;
 800a76c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a76e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3718      	adds	r7, #24
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	460b      	mov	r3, r1
 800a782:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a78a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a792:	2b00      	cmp	r3, #0
 800a794:	d101      	bne.n	800a79a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a796:	2303      	movs	r3, #3
 800a798:	e04f      	b.n	800a83a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	3318      	adds	r3, #24
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d029      	beq.n	800a80c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a7b8:	78fa      	ldrb	r2, [r7, #3]
 800a7ba:	6879      	ldr	r1, [r7, #4]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	440b      	add	r3, r1
 800a7c6:	3318      	adds	r3, #24
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	78f9      	ldrb	r1, [r7, #3]
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	4403      	add	r3, r0
 800a7d8:	3320      	adds	r3, #32
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a7e0:	fb01 f303 	mul.w	r3, r1, r3
 800a7e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d110      	bne.n	800a80c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a7ea:	78fa      	ldrb	r2, [r7, #3]
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	440b      	add	r3, r1
 800a7f8:	3318      	adds	r3, #24
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a7fe:	78f9      	ldrb	r1, [r7, #3]
 800a800:	2300      	movs	r3, #0
 800a802:	2200      	movs	r2, #0
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f004 fca4 	bl	800f152 <USBD_LL_Transmit>
 800a80a:	e015      	b.n	800a838 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	2200      	movs	r2, #0
 800a810:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00b      	beq.n	800a838 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a834:	78fa      	ldrb	r2, [r7, #3]
 800a836:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b084      	sub	sp, #16
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a854:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d101      	bne.n	800a864 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a860:	2303      	movs	r3, #3
 800a862:	e015      	b.n	800a890 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a864:	78fb      	ldrb	r3, [r7, #3]
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f004 fcb4 	bl	800f1d6 <USBD_LL_GetRxDataSize>
 800a86e:	4602      	mov	r2, r0
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a88a:	4611      	mov	r1, r2
 800a88c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d101      	bne.n	800a8b2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e01a      	b.n	800a8e8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d014      	beq.n	800a8e6 <USBD_CDC_EP0_RxReady+0x4e>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a8c2:	2bff      	cmp	r3, #255	@ 0xff
 800a8c4:	d00f      	beq.n	800a8e6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a8d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	22ff      	movs	r2, #255	@ 0xff
 800a8e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2243      	movs	r2, #67	@ 0x43
 800a8fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a8fe:	4b03      	ldr	r3, [pc, #12]	@ (800a90c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a900:	4618      	mov	r0, r3
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr
 800a90c:	20000094 	.word	0x20000094

0800a910 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2243      	movs	r2, #67	@ 0x43
 800a91c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a91e:	4b03      	ldr	r3, [pc, #12]	@ (800a92c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	20000050 	.word	0x20000050

0800a930 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2243      	movs	r2, #67	@ 0x43
 800a93c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a93e:	4b03      	ldr	r3, [pc, #12]	@ (800a94c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a940:	4618      	mov	r0, r3
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	200000d8 	.word	0x200000d8

0800a950 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	220a      	movs	r2, #10
 800a95c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a95e:	4b03      	ldr	r3, [pc, #12]	@ (800a96c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a960:	4618      	mov	r0, r3
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	2000000c 	.word	0x2000000c

0800a970 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d101      	bne.n	800a984 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a980:	2303      	movs	r3, #3
 800a982:	e004      	b.n	800a98e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b087      	sub	sp, #28
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	60b9      	str	r1, [r7, #8]
 800a9a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e008      	b.n	800a9ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	68ba      	ldr	r2, [r7, #8]
 800a9bc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b085      	sub	sp, #20
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e004      	b.n	800a9fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa16:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e01a      	b.n	800aa60 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d114      	bne.n	800aa5e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800aa52:	2181      	movs	r1, #129	@ 0x81
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f004 fb7c 	bl	800f152 <USBD_LL_Transmit>

    ret = USBD_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e016      	b.n	800aab4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	7c1b      	ldrb	r3, [r3, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d109      	bne.n	800aaa2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa98:	2101      	movs	r1, #1
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f004 fb7a 	bl	800f194 <USBD_LL_PrepareReceive>
 800aaa0:	e007      	b.n	800aab2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aaa8:	2340      	movs	r3, #64	@ 0x40
 800aaaa:	2101      	movs	r1, #1
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f004 fb71 	bl	800f194 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	4613      	mov	r3, r2
 800aac8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d101      	bne.n	800aad4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aad0:	2303      	movs	r3, #3
 800aad2:	e01f      	b.n	800ab14 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d003      	beq.n	800aafa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	79fa      	ldrb	r2, [r7, #7]
 800ab06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f004 f9d9 	bl	800eec0 <USBD_LL_Init>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e016      	b.n	800ab62 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00b      	beq.n	800ab60 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab50:	f107 020e 	add.w	r2, r7, #14
 800ab54:	4610      	mov	r0, r2
 800ab56:	4798      	blx	r3
 800ab58:	4602      	mov	r2, r0
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f004 fa04 	bl	800ef80 <USBD_LL_Start>
 800ab78:	4603      	mov	r3, r0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b083      	sub	sp, #12
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aba4:	2303      	movs	r3, #3
 800aba6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d009      	beq.n	800abc6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	78fa      	ldrb	r2, [r7, #3]
 800abbc:	4611      	mov	r1, r2
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	4798      	blx	r3
 800abc2:	4603      	mov	r3, r0
 800abc4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d007      	beq.n	800abf6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	78fa      	ldrb	r2, [r7, #3]
 800abf0:	4611      	mov	r1, r2
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	4798      	blx	r3
  }

  return USBD_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 ff48 	bl	800baa8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ac26:	461a      	mov	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac34:	f003 031f 	and.w	r3, r3, #31
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d01a      	beq.n	800ac72 <USBD_LL_SetupStage+0x72>
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d822      	bhi.n	800ac86 <USBD_LL_SetupStage+0x86>
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d002      	beq.n	800ac4a <USBD_LL_SetupStage+0x4a>
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d00a      	beq.n	800ac5e <USBD_LL_SetupStage+0x5e>
 800ac48:	e01d      	b.n	800ac86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f9f0 	bl	800b038 <USBD_StdDevReq>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac5c:	e020      	b.n	800aca0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fa54 	bl	800b114 <USBD_StdItfReq>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac70:	e016      	b.n	800aca0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fa93 	bl	800b1a6 <USBD_StdEPReq>
 800ac80:	4603      	mov	r3, r0
 800ac82:	73fb      	strb	r3, [r7, #15]
      break;
 800ac84:	e00c      	b.n	800aca0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac8c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f004 f9d3 	bl	800f040 <USBD_LL_StallEP>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac9e:	bf00      	nop
  }

  return ret;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b086      	sub	sp, #24
 800acae:	af00      	add	r7, sp, #0
 800acb0:	60f8      	str	r0, [r7, #12]
 800acb2:	460b      	mov	r3, r1
 800acb4:	607a      	str	r2, [r7, #4]
 800acb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800acb8:	7afb      	ldrb	r3, [r7, #11]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d138      	bne.n	800ad30 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800acc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800accc:	2b03      	cmp	r3, #3
 800acce:	d14a      	bne.n	800ad66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	689a      	ldr	r2, [r3, #8]
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d913      	bls.n	800ad04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	689a      	ldr	r2, [r3, #8]
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	1ad2      	subs	r2, r2, r3
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	68da      	ldr	r2, [r3, #12]
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	4293      	cmp	r3, r2
 800acf4:	bf28      	it	cs
 800acf6:	4613      	movcs	r3, r2
 800acf8:	461a      	mov	r2, r3
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 ffc7 	bl	800bc90 <USBD_CtlContinueRx>
 800ad02:	e030      	b.n	800ad66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	2b03      	cmp	r3, #3
 800ad0e:	d10b      	bne.n	800ad28 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d005      	beq.n	800ad28 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 ffc2 	bl	800bcb2 <USBD_CtlSendStatus>
 800ad2e:	e01a      	b.n	800ad66 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d114      	bne.n	800ad66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00e      	beq.n	800ad66 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	7afa      	ldrb	r2, [r7, #11]
 800ad52:	4611      	mov	r1, r2
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	4798      	blx	r3
 800ad58:	4603      	mov	r3, r0
 800ad5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	e000      	b.n	800ad68 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad7e:	7afb      	ldrb	r3, [r7, #11]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d16b      	bne.n	800ae5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3314      	adds	r3, #20
 800ad88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d156      	bne.n	800ae42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	689a      	ldr	r2, [r3, #8]
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d914      	bls.n	800adca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	689a      	ldr	r2, [r3, #8]
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	1ad2      	subs	r2, r2, r3
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	461a      	mov	r2, r3
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f000 ff3c 	bl	800bc34 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adbc:	2300      	movs	r3, #0
 800adbe:	2200      	movs	r2, #0
 800adc0:	2100      	movs	r1, #0
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f004 f9e6 	bl	800f194 <USBD_LL_PrepareReceive>
 800adc8:	e03b      	b.n	800ae42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	68da      	ldr	r2, [r3, #12]
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	429a      	cmp	r2, r3
 800add4:	d11c      	bne.n	800ae10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800adde:	429a      	cmp	r2, r3
 800ade0:	d316      	bcc.n	800ae10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800adec:	429a      	cmp	r2, r3
 800adee:	d20f      	bcs.n	800ae10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800adf0:	2200      	movs	r2, #0
 800adf2:	2100      	movs	r1, #0
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 ff1d 	bl	800bc34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae02:	2300      	movs	r3, #0
 800ae04:	2200      	movs	r2, #0
 800ae06:	2100      	movs	r1, #0
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f004 f9c3 	bl	800f194 <USBD_LL_PrepareReceive>
 800ae0e:	e018      	b.n	800ae42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b03      	cmp	r3, #3
 800ae1a:	d10b      	bne.n	800ae34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d005      	beq.n	800ae34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae34:	2180      	movs	r1, #128	@ 0x80
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f004 f902 	bl	800f040 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 ff4b 	bl	800bcd8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d122      	bne.n	800ae92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f7ff fe98 	bl	800ab82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ae5a:	e01a      	b.n	800ae92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d114      	bne.n	800ae92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00e      	beq.n	800ae92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	7afa      	ldrb	r2, [r7, #11]
 800ae7e:	4611      	mov	r1, r2
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	4798      	blx	r3
 800ae84:	4603      	mov	r3, r0
 800ae86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ae88:	7dfb      	ldrb	r3, [r7, #23]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	e000      	b.n	800ae94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800aecc:	2303      	movs	r3, #3
 800aece:	e02f      	b.n	800af30 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00f      	beq.n	800aefa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d009      	beq.n	800aefa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	6852      	ldr	r2, [r2, #4]
 800aef2:	b2d2      	uxtb	r2, r2
 800aef4:	4611      	mov	r1, r2
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aefa:	2340      	movs	r3, #64	@ 0x40
 800aefc:	2200      	movs	r2, #0
 800aefe:	2100      	movs	r1, #0
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f004 f858 	bl	800efb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2240      	movs	r2, #64	@ 0x40
 800af12:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af16:	2340      	movs	r3, #64	@ 0x40
 800af18:	2200      	movs	r2, #0
 800af1a:	2180      	movs	r1, #128	@ 0x80
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f004 f84a 	bl	800efb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2240      	movs	r2, #64	@ 0x40
 800af2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	78fa      	ldrb	r2, [r7, #3]
 800af48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af66:	b2da      	uxtb	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2204      	movs	r2, #4
 800af72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b04      	cmp	r3, #4
 800af96:	d106      	bne.n	800afa6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e012      	b.n	800aff0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d10b      	bne.n	800afee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afdc:	69db      	ldr	r3, [r3, #28]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d005      	beq.n	800afee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe8:	69db      	ldr	r3, [r3, #28]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	3301      	adds	r3, #1
 800b00e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b016:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b01a:	021b      	lsls	r3, r3, #8
 800b01c:	b21a      	sxth	r2, r3
 800b01e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b022:	4313      	orrs	r3, r2
 800b024:	b21b      	sxth	r3, r3
 800b026:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b028:	89fb      	ldrh	r3, [r7, #14]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
	...

0800b038 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b04e:	2b40      	cmp	r3, #64	@ 0x40
 800b050:	d005      	beq.n	800b05e <USBD_StdDevReq+0x26>
 800b052:	2b40      	cmp	r3, #64	@ 0x40
 800b054:	d853      	bhi.n	800b0fe <USBD_StdDevReq+0xc6>
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00b      	beq.n	800b072 <USBD_StdDevReq+0x3a>
 800b05a:	2b20      	cmp	r3, #32
 800b05c:	d14f      	bne.n	800b0fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	4798      	blx	r3
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]
      break;
 800b070:	e04a      	b.n	800b108 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	785b      	ldrb	r3, [r3, #1]
 800b076:	2b09      	cmp	r3, #9
 800b078:	d83b      	bhi.n	800b0f2 <USBD_StdDevReq+0xba>
 800b07a:	a201      	add	r2, pc, #4	@ (adr r2, 800b080 <USBD_StdDevReq+0x48>)
 800b07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b080:	0800b0d5 	.word	0x0800b0d5
 800b084:	0800b0e9 	.word	0x0800b0e9
 800b088:	0800b0f3 	.word	0x0800b0f3
 800b08c:	0800b0df 	.word	0x0800b0df
 800b090:	0800b0f3 	.word	0x0800b0f3
 800b094:	0800b0b3 	.word	0x0800b0b3
 800b098:	0800b0a9 	.word	0x0800b0a9
 800b09c:	0800b0f3 	.word	0x0800b0f3
 800b0a0:	0800b0cb 	.word	0x0800b0cb
 800b0a4:	0800b0bd 	.word	0x0800b0bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f9de 	bl	800b46c <USBD_GetDescriptor>
          break;
 800b0b0:	e024      	b.n	800b0fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fb6d 	bl	800b794 <USBD_SetAddress>
          break;
 800b0ba:	e01f      	b.n	800b0fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fbac 	bl	800b81c <USBD_SetConfig>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]
          break;
 800b0c8:	e018      	b.n	800b0fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fc4b 	bl	800b968 <USBD_GetConfig>
          break;
 800b0d2:	e013      	b.n	800b0fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fc7c 	bl	800b9d4 <USBD_GetStatus>
          break;
 800b0dc:	e00e      	b.n	800b0fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fcab 	bl	800ba3c <USBD_SetFeature>
          break;
 800b0e6:	e009      	b.n	800b0fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fcba 	bl	800ba64 <USBD_ClrFeature>
          break;
 800b0f0:	e004      	b.n	800b0fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fd11 	bl	800bb1c <USBD_CtlError>
          break;
 800b0fa:	bf00      	nop
      }
      break;
 800b0fc:	e004      	b.n	800b108 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fd0b 	bl	800bb1c <USBD_CtlError>
      break;
 800b106:	bf00      	nop
  }

  return ret;
 800b108:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop

0800b114 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b12a:	2b40      	cmp	r3, #64	@ 0x40
 800b12c:	d005      	beq.n	800b13a <USBD_StdItfReq+0x26>
 800b12e:	2b40      	cmp	r3, #64	@ 0x40
 800b130:	d82f      	bhi.n	800b192 <USBD_StdItfReq+0x7e>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <USBD_StdItfReq+0x26>
 800b136:	2b20      	cmp	r3, #32
 800b138:	d12b      	bne.n	800b192 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b140:	b2db      	uxtb	r3, r3
 800b142:	3b01      	subs	r3, #1
 800b144:	2b02      	cmp	r3, #2
 800b146:	d81d      	bhi.n	800b184 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	889b      	ldrh	r3, [r3, #4]
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d813      	bhi.n	800b17a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	4798      	blx	r3
 800b160:	4603      	mov	r3, r0
 800b162:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	88db      	ldrh	r3, [r3, #6]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d110      	bne.n	800b18e <USBD_StdItfReq+0x7a>
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10d      	bne.n	800b18e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fd9d 	bl	800bcb2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b178:	e009      	b.n	800b18e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fccd 	bl	800bb1c <USBD_CtlError>
          break;
 800b182:	e004      	b.n	800b18e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fcc8 	bl	800bb1c <USBD_CtlError>
          break;
 800b18c:	e000      	b.n	800b190 <USBD_StdItfReq+0x7c>
          break;
 800b18e:	bf00      	nop
      }
      break;
 800b190:	e004      	b.n	800b19c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fcc1 	bl	800bb1c <USBD_CtlError>
      break;
 800b19a:	bf00      	nop
  }

  return ret;
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	889b      	ldrh	r3, [r3, #4]
 800b1b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b1c2:	2b40      	cmp	r3, #64	@ 0x40
 800b1c4:	d007      	beq.n	800b1d6 <USBD_StdEPReq+0x30>
 800b1c6:	2b40      	cmp	r3, #64	@ 0x40
 800b1c8:	f200 8145 	bhi.w	800b456 <USBD_StdEPReq+0x2b0>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00c      	beq.n	800b1ea <USBD_StdEPReq+0x44>
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	f040 8140 	bne.w	800b456 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	4798      	blx	r3
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1e8:	e13a      	b.n	800b460 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	785b      	ldrb	r3, [r3, #1]
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d007      	beq.n	800b202 <USBD_StdEPReq+0x5c>
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	f300 8129 	bgt.w	800b44a <USBD_StdEPReq+0x2a4>
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d07f      	beq.n	800b2fc <USBD_StdEPReq+0x156>
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d03c      	beq.n	800b27a <USBD_StdEPReq+0xd4>
 800b200:	e123      	b.n	800b44a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d002      	beq.n	800b214 <USBD_StdEPReq+0x6e>
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d016      	beq.n	800b240 <USBD_StdEPReq+0x9a>
 800b212:	e02c      	b.n	800b26e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b214:	7bbb      	ldrb	r3, [r7, #14]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00d      	beq.n	800b236 <USBD_StdEPReq+0x90>
 800b21a:	7bbb      	ldrb	r3, [r7, #14]
 800b21c:	2b80      	cmp	r3, #128	@ 0x80
 800b21e:	d00a      	beq.n	800b236 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f003 ff0b 	bl	800f040 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b22a:	2180      	movs	r1, #128	@ 0x80
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f003 ff07 	bl	800f040 <USBD_LL_StallEP>
 800b232:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b234:	e020      	b.n	800b278 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fc6f 	bl	800bb1c <USBD_CtlError>
              break;
 800b23e:	e01b      	b.n	800b278 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	885b      	ldrh	r3, [r3, #2]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10e      	bne.n	800b266 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b248:	7bbb      	ldrb	r3, [r7, #14]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00b      	beq.n	800b266 <USBD_StdEPReq+0xc0>
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
 800b250:	2b80      	cmp	r3, #128	@ 0x80
 800b252:	d008      	beq.n	800b266 <USBD_StdEPReq+0xc0>
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	88db      	ldrh	r3, [r3, #6]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d104      	bne.n	800b266 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
 800b25e:	4619      	mov	r1, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f003 feed 	bl	800f040 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fd23 	bl	800bcb2 <USBD_CtlSendStatus>

              break;
 800b26c:	e004      	b.n	800b278 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fc53 	bl	800bb1c <USBD_CtlError>
              break;
 800b276:	bf00      	nop
          }
          break;
 800b278:	e0ec      	b.n	800b454 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b280:	b2db      	uxtb	r3, r3
 800b282:	2b02      	cmp	r3, #2
 800b284:	d002      	beq.n	800b28c <USBD_StdEPReq+0xe6>
 800b286:	2b03      	cmp	r3, #3
 800b288:	d016      	beq.n	800b2b8 <USBD_StdEPReq+0x112>
 800b28a:	e030      	b.n	800b2ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b28c:	7bbb      	ldrb	r3, [r7, #14]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00d      	beq.n	800b2ae <USBD_StdEPReq+0x108>
 800b292:	7bbb      	ldrb	r3, [r7, #14]
 800b294:	2b80      	cmp	r3, #128	@ 0x80
 800b296:	d00a      	beq.n	800b2ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b298:	7bbb      	ldrb	r3, [r7, #14]
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f003 fecf 	bl	800f040 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2a2:	2180      	movs	r1, #128	@ 0x80
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f003 fecb 	bl	800f040 <USBD_LL_StallEP>
 800b2aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2ac:	e025      	b.n	800b2fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 fc33 	bl	800bb1c <USBD_CtlError>
              break;
 800b2b6:	e020      	b.n	800b2fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	885b      	ldrh	r3, [r3, #2]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d11b      	bne.n	800b2f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d004      	beq.n	800b2d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b2ca:	7bbb      	ldrb	r3, [r7, #14]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f003 fed5 	bl	800f07e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fcec 	bl	800bcb2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	4798      	blx	r3
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b2ec:	e004      	b.n	800b2f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fc13 	bl	800bb1c <USBD_CtlError>
              break;
 800b2f6:	e000      	b.n	800b2fa <USBD_StdEPReq+0x154>
              break;
 800b2f8:	bf00      	nop
          }
          break;
 800b2fa:	e0ab      	b.n	800b454 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b302:	b2db      	uxtb	r3, r3
 800b304:	2b02      	cmp	r3, #2
 800b306:	d002      	beq.n	800b30e <USBD_StdEPReq+0x168>
 800b308:	2b03      	cmp	r3, #3
 800b30a:	d032      	beq.n	800b372 <USBD_StdEPReq+0x1cc>
 800b30c:	e097      	b.n	800b43e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b30e:	7bbb      	ldrb	r3, [r7, #14]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d007      	beq.n	800b324 <USBD_StdEPReq+0x17e>
 800b314:	7bbb      	ldrb	r3, [r7, #14]
 800b316:	2b80      	cmp	r3, #128	@ 0x80
 800b318:	d004      	beq.n	800b324 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fbfd 	bl	800bb1c <USBD_CtlError>
                break;
 800b322:	e091      	b.n	800b448 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	da0b      	bge.n	800b344 <USBD_StdEPReq+0x19e>
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b332:	4613      	mov	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	3310      	adds	r3, #16
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	4413      	add	r3, r2
 800b340:	3304      	adds	r3, #4
 800b342:	e00b      	b.n	800b35c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b344:	7bbb      	ldrb	r3, [r7, #14]
 800b346:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b34a:	4613      	mov	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4413      	add	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	4413      	add	r3, r2
 800b35a:	3304      	adds	r3, #4
 800b35c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2202      	movs	r2, #2
 800b368:	4619      	mov	r1, r3
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fc47 	bl	800bbfe <USBD_CtlSendData>
              break;
 800b370:	e06a      	b.n	800b448 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b376:	2b00      	cmp	r3, #0
 800b378:	da11      	bge.n	800b39e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b37a:	7bbb      	ldrb	r3, [r7, #14]
 800b37c:	f003 020f 	and.w	r2, r3, #15
 800b380:	6879      	ldr	r1, [r7, #4]
 800b382:	4613      	mov	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	440b      	add	r3, r1
 800b38c:	3324      	adds	r3, #36	@ 0x24
 800b38e:	881b      	ldrh	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d117      	bne.n	800b3c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fbc0 	bl	800bb1c <USBD_CtlError>
                  break;
 800b39c:	e054      	b.n	800b448 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b39e:	7bbb      	ldrb	r3, [r7, #14]
 800b3a0:	f003 020f 	and.w	r2, r3, #15
 800b3a4:	6879      	ldr	r1, [r7, #4]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	440b      	add	r3, r1
 800b3b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b3b4:	881b      	ldrh	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d104      	bne.n	800b3c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fbad 	bl	800bb1c <USBD_CtlError>
                  break;
 800b3c2:	e041      	b.n	800b448 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	da0b      	bge.n	800b3e4 <USBD_StdEPReq+0x23e>
 800b3cc:	7bbb      	ldrb	r3, [r7, #14]
 800b3ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	3310      	adds	r3, #16
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	4413      	add	r3, r2
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	e00b      	b.n	800b3fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3e4:	7bbb      	ldrb	r3, [r7, #14]
 800b3e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	4413      	add	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3fe:	7bbb      	ldrb	r3, [r7, #14]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <USBD_StdEPReq+0x264>
 800b404:	7bbb      	ldrb	r3, [r7, #14]
 800b406:	2b80      	cmp	r3, #128	@ 0x80
 800b408:	d103      	bne.n	800b412 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2200      	movs	r2, #0
 800b40e:	601a      	str	r2, [r3, #0]
 800b410:	e00e      	b.n	800b430 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b412:	7bbb      	ldrb	r3, [r7, #14]
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f003 fe50 	bl	800f0bc <USBD_LL_IsStallEP>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d003      	beq.n	800b42a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	2201      	movs	r2, #1
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	e002      	b.n	800b430 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2200      	movs	r2, #0
 800b42e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	2202      	movs	r2, #2
 800b434:	4619      	mov	r1, r3
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fbe1 	bl	800bbfe <USBD_CtlSendData>
              break;
 800b43c:	e004      	b.n	800b448 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fb6b 	bl	800bb1c <USBD_CtlError>
              break;
 800b446:	bf00      	nop
          }
          break;
 800b448:	e004      	b.n	800b454 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fb65 	bl	800bb1c <USBD_CtlError>
          break;
 800b452:	bf00      	nop
      }
      break;
 800b454:	e004      	b.n	800b460 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b456:	6839      	ldr	r1, [r7, #0]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fb5f 	bl	800bb1c <USBD_CtlError>
      break;
 800b45e:	bf00      	nop
  }

  return ret;
 800b460:	7bfb      	ldrb	r3, [r7, #15]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b476:	2300      	movs	r3, #0
 800b478:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b47e:	2300      	movs	r3, #0
 800b480:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	885b      	ldrh	r3, [r3, #2]
 800b486:	0a1b      	lsrs	r3, r3, #8
 800b488:	b29b      	uxth	r3, r3
 800b48a:	3b01      	subs	r3, #1
 800b48c:	2b0e      	cmp	r3, #14
 800b48e:	f200 8152 	bhi.w	800b736 <USBD_GetDescriptor+0x2ca>
 800b492:	a201      	add	r2, pc, #4	@ (adr r2, 800b498 <USBD_GetDescriptor+0x2c>)
 800b494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b498:	0800b509 	.word	0x0800b509
 800b49c:	0800b521 	.word	0x0800b521
 800b4a0:	0800b561 	.word	0x0800b561
 800b4a4:	0800b737 	.word	0x0800b737
 800b4a8:	0800b737 	.word	0x0800b737
 800b4ac:	0800b6d7 	.word	0x0800b6d7
 800b4b0:	0800b703 	.word	0x0800b703
 800b4b4:	0800b737 	.word	0x0800b737
 800b4b8:	0800b737 	.word	0x0800b737
 800b4bc:	0800b737 	.word	0x0800b737
 800b4c0:	0800b737 	.word	0x0800b737
 800b4c4:	0800b737 	.word	0x0800b737
 800b4c8:	0800b737 	.word	0x0800b737
 800b4cc:	0800b737 	.word	0x0800b737
 800b4d0:	0800b4d5 	.word	0x0800b4d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4da:	69db      	ldr	r3, [r3, #28]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00b      	beq.n	800b4f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	7c12      	ldrb	r2, [r2, #16]
 800b4ec:	f107 0108 	add.w	r1, r7, #8
 800b4f0:	4610      	mov	r0, r2
 800b4f2:	4798      	blx	r3
 800b4f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4f6:	e126      	b.n	800b746 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fb0e 	bl	800bb1c <USBD_CtlError>
        err++;
 800b500:	7afb      	ldrb	r3, [r7, #11]
 800b502:	3301      	adds	r3, #1
 800b504:	72fb      	strb	r3, [r7, #11]
      break;
 800b506:	e11e      	b.n	800b746 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	7c12      	ldrb	r2, [r2, #16]
 800b514:	f107 0108 	add.w	r1, r7, #8
 800b518:	4610      	mov	r0, r2
 800b51a:	4798      	blx	r3
 800b51c:	60f8      	str	r0, [r7, #12]
      break;
 800b51e:	e112      	b.n	800b746 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	7c1b      	ldrb	r3, [r3, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10d      	bne.n	800b544 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b530:	f107 0208 	add.w	r2, r7, #8
 800b534:	4610      	mov	r0, r2
 800b536:	4798      	blx	r3
 800b538:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	3301      	adds	r3, #1
 800b53e:	2202      	movs	r2, #2
 800b540:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b542:	e100      	b.n	800b746 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54c:	f107 0208 	add.w	r2, r7, #8
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
 800b554:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3301      	adds	r3, #1
 800b55a:	2202      	movs	r2, #2
 800b55c:	701a      	strb	r2, [r3, #0]
      break;
 800b55e:	e0f2      	b.n	800b746 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	885b      	ldrh	r3, [r3, #2]
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b05      	cmp	r3, #5
 800b568:	f200 80ac 	bhi.w	800b6c4 <USBD_GetDescriptor+0x258>
 800b56c:	a201      	add	r2, pc, #4	@ (adr r2, 800b574 <USBD_GetDescriptor+0x108>)
 800b56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b572:	bf00      	nop
 800b574:	0800b58d 	.word	0x0800b58d
 800b578:	0800b5c1 	.word	0x0800b5c1
 800b57c:	0800b5f5 	.word	0x0800b5f5
 800b580:	0800b629 	.word	0x0800b629
 800b584:	0800b65d 	.word	0x0800b65d
 800b588:	0800b691 	.word	0x0800b691
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d00b      	beq.n	800b5b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	7c12      	ldrb	r2, [r2, #16]
 800b5a4:	f107 0108 	add.w	r1, r7, #8
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	4798      	blx	r3
 800b5ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5ae:	e091      	b.n	800b6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5b0:	6839      	ldr	r1, [r7, #0]
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fab2 	bl	800bb1c <USBD_CtlError>
            err++;
 800b5b8:	7afb      	ldrb	r3, [r7, #11]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b5be:	e089      	b.n	800b6d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00b      	beq.n	800b5e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	7c12      	ldrb	r2, [r2, #16]
 800b5d8:	f107 0108 	add.w	r1, r7, #8
 800b5dc:	4610      	mov	r0, r2
 800b5de:	4798      	blx	r3
 800b5e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5e2:	e077      	b.n	800b6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fa98 	bl	800bb1c <USBD_CtlError>
            err++;
 800b5ec:	7afb      	ldrb	r3, [r7, #11]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5f2:	e06f      	b.n	800b6d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00b      	beq.n	800b618 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	7c12      	ldrb	r2, [r2, #16]
 800b60c:	f107 0108 	add.w	r1, r7, #8
 800b610:	4610      	mov	r0, r2
 800b612:	4798      	blx	r3
 800b614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b616:	e05d      	b.n	800b6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b618:	6839      	ldr	r1, [r7, #0]
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fa7e 	bl	800bb1c <USBD_CtlError>
            err++;
 800b620:	7afb      	ldrb	r3, [r7, #11]
 800b622:	3301      	adds	r3, #1
 800b624:	72fb      	strb	r3, [r7, #11]
          break;
 800b626:	e055      	b.n	800b6d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00b      	beq.n	800b64c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	7c12      	ldrb	r2, [r2, #16]
 800b640:	f107 0108 	add.w	r1, r7, #8
 800b644:	4610      	mov	r0, r2
 800b646:	4798      	blx	r3
 800b648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b64a:	e043      	b.n	800b6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fa64 	bl	800bb1c <USBD_CtlError>
            err++;
 800b654:	7afb      	ldrb	r3, [r7, #11]
 800b656:	3301      	adds	r3, #1
 800b658:	72fb      	strb	r3, [r7, #11]
          break;
 800b65a:	e03b      	b.n	800b6d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00b      	beq.n	800b680 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b66e:	695b      	ldr	r3, [r3, #20]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	7c12      	ldrb	r2, [r2, #16]
 800b674:	f107 0108 	add.w	r1, r7, #8
 800b678:	4610      	mov	r0, r2
 800b67a:	4798      	blx	r3
 800b67c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b67e:	e029      	b.n	800b6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fa4a 	bl	800bb1c <USBD_CtlError>
            err++;
 800b688:	7afb      	ldrb	r3, [r7, #11]
 800b68a:	3301      	adds	r3, #1
 800b68c:	72fb      	strb	r3, [r7, #11]
          break;
 800b68e:	e021      	b.n	800b6d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00b      	beq.n	800b6b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	7c12      	ldrb	r2, [r2, #16]
 800b6a8:	f107 0108 	add.w	r1, r7, #8
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	4798      	blx	r3
 800b6b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6b2:	e00f      	b.n	800b6d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fa30 	bl	800bb1c <USBD_CtlError>
            err++;
 800b6bc:	7afb      	ldrb	r3, [r7, #11]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6c2:	e007      	b.n	800b6d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fa28 	bl	800bb1c <USBD_CtlError>
          err++;
 800b6cc:	7afb      	ldrb	r3, [r7, #11]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b6d2:	bf00      	nop
      }
      break;
 800b6d4:	e037      	b.n	800b746 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	7c1b      	ldrb	r3, [r3, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d109      	bne.n	800b6f2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6e6:	f107 0208 	add.w	r2, r7, #8
 800b6ea:	4610      	mov	r0, r2
 800b6ec:	4798      	blx	r3
 800b6ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6f0:	e029      	b.n	800b746 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fa11 	bl	800bb1c <USBD_CtlError>
        err++;
 800b6fa:	7afb      	ldrb	r3, [r7, #11]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	72fb      	strb	r3, [r7, #11]
      break;
 800b700:	e021      	b.n	800b746 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7c1b      	ldrb	r3, [r3, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10d      	bne.n	800b726 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b712:	f107 0208 	add.w	r2, r7, #8
 800b716:	4610      	mov	r0, r2
 800b718:	4798      	blx	r3
 800b71a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	3301      	adds	r3, #1
 800b720:	2207      	movs	r2, #7
 800b722:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b724:	e00f      	b.n	800b746 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f9f7 	bl	800bb1c <USBD_CtlError>
        err++;
 800b72e:	7afb      	ldrb	r3, [r7, #11]
 800b730:	3301      	adds	r3, #1
 800b732:	72fb      	strb	r3, [r7, #11]
      break;
 800b734:	e007      	b.n	800b746 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f9ef 	bl	800bb1c <USBD_CtlError>
      err++;
 800b73e:	7afb      	ldrb	r3, [r7, #11]
 800b740:	3301      	adds	r3, #1
 800b742:	72fb      	strb	r3, [r7, #11]
      break;
 800b744:	bf00      	nop
  }

  if (err != 0U)
 800b746:	7afb      	ldrb	r3, [r7, #11]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d11e      	bne.n	800b78a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	88db      	ldrh	r3, [r3, #6]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d016      	beq.n	800b782 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b754:	893b      	ldrh	r3, [r7, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00e      	beq.n	800b778 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	88da      	ldrh	r2, [r3, #6]
 800b75e:	893b      	ldrh	r3, [r7, #8]
 800b760:	4293      	cmp	r3, r2
 800b762:	bf28      	it	cs
 800b764:	4613      	movcs	r3, r2
 800b766:	b29b      	uxth	r3, r3
 800b768:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b76a:	893b      	ldrh	r3, [r7, #8]
 800b76c:	461a      	mov	r2, r3
 800b76e:	68f9      	ldr	r1, [r7, #12]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 fa44 	bl	800bbfe <USBD_CtlSendData>
 800b776:	e009      	b.n	800b78c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f9ce 	bl	800bb1c <USBD_CtlError>
 800b780:	e004      	b.n	800b78c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fa95 	bl	800bcb2 <USBD_CtlSendStatus>
 800b788:	e000      	b.n	800b78c <USBD_GetDescriptor+0x320>
    return;
 800b78a:	bf00      	nop
  }
}
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop

0800b794 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	889b      	ldrh	r3, [r3, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d131      	bne.n	800b80a <USBD_SetAddress+0x76>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	88db      	ldrh	r3, [r3, #6]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d12d      	bne.n	800b80a <USBD_SetAddress+0x76>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	885b      	ldrh	r3, [r3, #2]
 800b7b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b7b4:	d829      	bhi.n	800b80a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	885b      	ldrh	r3, [r3, #2]
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	2b03      	cmp	r3, #3
 800b7cc:	d104      	bne.n	800b7d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b7ce:	6839      	ldr	r1, [r7, #0]
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f9a3 	bl	800bb1c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7d6:	e01d      	b.n	800b814 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	7bfa      	ldrb	r2, [r7, #15]
 800b7dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f003 fc95 	bl	800f114 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fa61 	bl	800bcb2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d004      	beq.n	800b800 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7fe:	e009      	b.n	800b814 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b808:	e004      	b.n	800b814 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b80a:	6839      	ldr	r1, [r7, #0]
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f985 	bl	800bb1c <USBD_CtlError>
  }
}
 800b812:	bf00      	nop
 800b814:	bf00      	nop
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	885b      	ldrh	r3, [r3, #2]
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	4b4c      	ldr	r3, [pc, #304]	@ (800b964 <USBD_SetConfig+0x148>)
 800b832:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b834:	4b4b      	ldr	r3, [pc, #300]	@ (800b964 <USBD_SetConfig+0x148>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d905      	bls.n	800b848 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f96c 	bl	800bb1c <USBD_CtlError>
    return USBD_FAIL;
 800b844:	2303      	movs	r3, #3
 800b846:	e088      	b.n	800b95a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	2b02      	cmp	r3, #2
 800b852:	d002      	beq.n	800b85a <USBD_SetConfig+0x3e>
 800b854:	2b03      	cmp	r3, #3
 800b856:	d025      	beq.n	800b8a4 <USBD_SetConfig+0x88>
 800b858:	e071      	b.n	800b93e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b85a:	4b42      	ldr	r3, [pc, #264]	@ (800b964 <USBD_SetConfig+0x148>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d01c      	beq.n	800b89c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b862:	4b40      	ldr	r3, [pc, #256]	@ (800b964 <USBD_SetConfig+0x148>)
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b86c:	4b3d      	ldr	r3, [pc, #244]	@ (800b964 <USBD_SetConfig+0x148>)
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff f990 	bl	800ab98 <USBD_SetClassConfig>
 800b878:	4603      	mov	r3, r0
 800b87a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d004      	beq.n	800b88c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b882:	6839      	ldr	r1, [r7, #0]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f949 	bl	800bb1c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b88a:	e065      	b.n	800b958 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fa10 	bl	800bcb2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2203      	movs	r2, #3
 800b896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b89a:	e05d      	b.n	800b958 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fa08 	bl	800bcb2 <USBD_CtlSendStatus>
      break;
 800b8a2:	e059      	b.n	800b958 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b8a4:	4b2f      	ldr	r3, [pc, #188]	@ (800b964 <USBD_SetConfig+0x148>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d112      	bne.n	800b8d2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b8b4:	4b2b      	ldr	r3, [pc, #172]	@ (800b964 <USBD_SetConfig+0x148>)
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8be:	4b29      	ldr	r3, [pc, #164]	@ (800b964 <USBD_SetConfig+0x148>)
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff f983 	bl	800abd0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f9f1 	bl	800bcb2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8d0:	e042      	b.n	800b958 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b8d2:	4b24      	ldr	r3, [pc, #144]	@ (800b964 <USBD_SetConfig+0x148>)
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d02a      	beq.n	800b936 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7ff f971 	bl	800abd0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b8ee:	4b1d      	ldr	r3, [pc, #116]	@ (800b964 <USBD_SetConfig+0x148>)
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8f8:	4b1a      	ldr	r3, [pc, #104]	@ (800b964 <USBD_SetConfig+0x148>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f7ff f94a 	bl	800ab98 <USBD_SetClassConfig>
 800b904:	4603      	mov	r3, r0
 800b906:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b908:	7bfb      	ldrb	r3, [r7, #15]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00f      	beq.n	800b92e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f903 	bl	800bb1c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	4619      	mov	r1, r3
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7ff f956 	bl	800abd0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2202      	movs	r2, #2
 800b928:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b92c:	e014      	b.n	800b958 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f9bf 	bl	800bcb2 <USBD_CtlSendStatus>
      break;
 800b934:	e010      	b.n	800b958 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f9bb 	bl	800bcb2 <USBD_CtlSendStatus>
      break;
 800b93c:	e00c      	b.n	800b958 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f8eb 	bl	800bb1c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b946:	4b07      	ldr	r3, [pc, #28]	@ (800b964 <USBD_SetConfig+0x148>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f7ff f93f 	bl	800abd0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b952:	2303      	movs	r3, #3
 800b954:	73fb      	strb	r3, [r7, #15]
      break;
 800b956:	bf00      	nop
  }

  return ret;
 800b958:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	20000598 	.word	0x20000598

0800b968 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	88db      	ldrh	r3, [r3, #6]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d004      	beq.n	800b984 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f8cd 	bl	800bb1c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b982:	e023      	b.n	800b9cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	dc02      	bgt.n	800b996 <USBD_GetConfig+0x2e>
 800b990:	2b00      	cmp	r3, #0
 800b992:	dc03      	bgt.n	800b99c <USBD_GetConfig+0x34>
 800b994:	e015      	b.n	800b9c2 <USBD_GetConfig+0x5a>
 800b996:	2b03      	cmp	r3, #3
 800b998:	d00b      	beq.n	800b9b2 <USBD_GetConfig+0x4a>
 800b99a:	e012      	b.n	800b9c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	3308      	adds	r3, #8
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f927 	bl	800bbfe <USBD_CtlSendData>
        break;
 800b9b0:	e00c      	b.n	800b9cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f91f 	bl	800bbfe <USBD_CtlSendData>
        break;
 800b9c0:	e004      	b.n	800b9cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f8a9 	bl	800bb1c <USBD_CtlError>
        break;
 800b9ca:	bf00      	nop
}
 800b9cc:	bf00      	nop
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d81e      	bhi.n	800ba2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	88db      	ldrh	r3, [r3, #6]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d004      	beq.n	800b9fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f890 	bl	800bb1c <USBD_CtlError>
        break;
 800b9fc:	e01a      	b.n	800ba34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2201      	movs	r2, #1
 800ba02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d005      	beq.n	800ba1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f043 0202 	orr.w	r2, r3, #2
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	330c      	adds	r3, #12
 800ba1e:	2202      	movs	r2, #2
 800ba20:	4619      	mov	r1, r3
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f8eb 	bl	800bbfe <USBD_CtlSendData>
      break;
 800ba28:	e004      	b.n	800ba34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f875 	bl	800bb1c <USBD_CtlError>
      break;
 800ba32:	bf00      	nop
  }
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	885b      	ldrh	r3, [r3, #2]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d106      	bne.n	800ba5c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f92b 	bl	800bcb2 <USBD_CtlSendStatus>
  }
}
 800ba5c:	bf00      	nop
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	3b01      	subs	r3, #1
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d80b      	bhi.n	800ba94 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	885b      	ldrh	r3, [r3, #2]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d10c      	bne.n	800ba9e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f910 	bl	800bcb2 <USBD_CtlSendStatus>
      }
      break;
 800ba92:	e004      	b.n	800ba9e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba94:	6839      	ldr	r1, [r7, #0]
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f840 	bl	800bb1c <USBD_CtlError>
      break;
 800ba9c:	e000      	b.n	800baa0 <USBD_ClrFeature+0x3c>
      break;
 800ba9e:	bf00      	nop
  }
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	781a      	ldrb	r2, [r3, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3301      	adds	r3, #1
 800bac2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	781a      	ldrb	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	3301      	adds	r3, #1
 800bad0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff fa90 	bl	800aff8 <SWAPBYTE>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	3301      	adds	r3, #1
 800bae4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	3301      	adds	r3, #1
 800baea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f7ff fa83 	bl	800aff8 <SWAPBYTE>
 800baf2:	4603      	mov	r3, r0
 800baf4:	461a      	mov	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	3301      	adds	r3, #1
 800bafe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3301      	adds	r3, #1
 800bb04:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7ff fa76 	bl	800aff8 <SWAPBYTE>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	461a      	mov	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	80da      	strh	r2, [r3, #6]
}
 800bb14:	bf00      	nop
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb26:	2180      	movs	r1, #128	@ 0x80
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f003 fa89 	bl	800f040 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb2e:	2100      	movs	r1, #0
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f003 fa85 	bl	800f040 <USBD_LL_StallEP>
}
 800bb36:	bf00      	nop
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b086      	sub	sp, #24
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d036      	beq.n	800bbc2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb58:	6938      	ldr	r0, [r7, #16]
 800bb5a:	f000 f836 	bl	800bbca <USBD_GetLen>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	3301      	adds	r3, #1
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	4413      	add	r3, r2
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	7812      	ldrb	r2, [r2, #0]
 800bb76:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb78:	7dfb      	ldrb	r3, [r7, #23]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb7e:	7dfb      	ldrb	r3, [r7, #23]
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	4413      	add	r3, r2
 800bb84:	2203      	movs	r2, #3
 800bb86:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb8e:	e013      	b.n	800bbb8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb90:	7dfb      	ldrb	r3, [r7, #23]
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	4413      	add	r3, r2
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	7812      	ldrb	r2, [r2, #0]
 800bb9a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	613b      	str	r3, [r7, #16]
    idx++;
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	3301      	adds	r3, #1
 800bba6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bba8:	7dfb      	ldrb	r3, [r7, #23]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	4413      	add	r3, r2
 800bbae:	2200      	movs	r2, #0
 800bbb0:	701a      	strb	r2, [r3, #0]
    idx++;
 800bbb2:	7dfb      	ldrb	r3, [r7, #23]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1e7      	bne.n	800bb90 <USBD_GetString+0x52>
 800bbc0:	e000      	b.n	800bbc4 <USBD_GetString+0x86>
    return;
 800bbc2:	bf00      	nop
  }
}
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b085      	sub	sp, #20
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bbda:	e005      	b.n	800bbe8 <USBD_GetLen+0x1e>
  {
    len++;
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1f5      	bne.n	800bbdc <USBD_GetLen+0x12>
  }

  return len;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	60f8      	str	r0, [r7, #12]
 800bc06:	60b9      	str	r1, [r7, #8]
 800bc08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	2100      	movs	r1, #0
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f003 fa94 	bl	800f152 <USBD_LL_Transmit>

  return USBD_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	2100      	movs	r1, #0
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f003 fa83 	bl	800f152 <USBD_LL_Transmit>

  return USBD_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b084      	sub	sp, #16
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	60f8      	str	r0, [r7, #12]
 800bc5e:	60b9      	str	r1, [r7, #8]
 800bc60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2203      	movs	r2, #3
 800bc66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	2100      	movs	r1, #0
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	f003 fa87 	bl	800f194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	2100      	movs	r1, #0
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f003 fa76 	bl	800f194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b082      	sub	sp, #8
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2204      	movs	r2, #4
 800bcbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f003 fa42 	bl	800f152 <USBD_LL_Transmit>

  return USBD_OK;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2205      	movs	r2, #5
 800bce4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bce8:	2300      	movs	r3, #0
 800bcea:	2200      	movs	r2, #0
 800bcec:	2100      	movs	r1, #0
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f003 fa50 	bl	800f194 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
	...

0800bd00 <__NVIC_SetPriority>:
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	4603      	mov	r3, r0
 800bd08:	6039      	str	r1, [r7, #0]
 800bd0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	db0a      	blt.n	800bd2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	490c      	ldr	r1, [pc, #48]	@ (800bd4c <__NVIC_SetPriority+0x4c>)
 800bd1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd1e:	0112      	lsls	r2, r2, #4
 800bd20:	b2d2      	uxtb	r2, r2
 800bd22:	440b      	add	r3, r1
 800bd24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bd28:	e00a      	b.n	800bd40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	4908      	ldr	r1, [pc, #32]	@ (800bd50 <__NVIC_SetPriority+0x50>)
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	f003 030f 	and.w	r3, r3, #15
 800bd36:	3b04      	subs	r3, #4
 800bd38:	0112      	lsls	r2, r2, #4
 800bd3a:	b2d2      	uxtb	r2, r2
 800bd3c:	440b      	add	r3, r1
 800bd3e:	761a      	strb	r2, [r3, #24]
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	e000e100 	.word	0xe000e100
 800bd50:	e000ed00 	.word	0xe000ed00

0800bd54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bd54:	b580      	push	{r7, lr}
 800bd56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bd58:	4b05      	ldr	r3, [pc, #20]	@ (800bd70 <SysTick_Handler+0x1c>)
 800bd5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bd5c:	f001 fd46 	bl	800d7ec <xTaskGetSchedulerState>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d001      	beq.n	800bd6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bd66:	f002 fb3f 	bl	800e3e8 <xPortSysTickHandler>
  }
}
 800bd6a:	bf00      	nop
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	e000e010 	.word	0xe000e010

0800bd74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd74:	b580      	push	{r7, lr}
 800bd76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd78:	2100      	movs	r1, #0
 800bd7a:	f06f 0004 	mvn.w	r0, #4
 800bd7e:	f7ff ffbf 	bl	800bd00 <__NVIC_SetPriority>
#endif
}
 800bd82:	bf00      	nop
 800bd84:	bd80      	pop	{r7, pc}
	...

0800bd88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd8e:	f3ef 8305 	mrs	r3, IPSR
 800bd92:	603b      	str	r3, [r7, #0]
  return(result);
 800bd94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d003      	beq.n	800bda2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd9a:	f06f 0305 	mvn.w	r3, #5
 800bd9e:	607b      	str	r3, [r7, #4]
 800bda0:	e00c      	b.n	800bdbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bda2:	4b0a      	ldr	r3, [pc, #40]	@ (800bdcc <osKernelInitialize+0x44>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d105      	bne.n	800bdb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bdaa:	4b08      	ldr	r3, [pc, #32]	@ (800bdcc <osKernelInitialize+0x44>)
 800bdac:	2201      	movs	r2, #1
 800bdae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	607b      	str	r3, [r7, #4]
 800bdb4:	e002      	b.n	800bdbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bdb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bdbc:	687b      	ldr	r3, [r7, #4]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	370c      	adds	r7, #12
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	2000059c 	.word	0x2000059c

0800bdd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdd6:	f3ef 8305 	mrs	r3, IPSR
 800bdda:	603b      	str	r3, [r7, #0]
  return(result);
 800bddc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d003      	beq.n	800bdea <osKernelStart+0x1a>
    stat = osErrorISR;
 800bde2:	f06f 0305 	mvn.w	r3, #5
 800bde6:	607b      	str	r3, [r7, #4]
 800bde8:	e010      	b.n	800be0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bdea:	4b0b      	ldr	r3, [pc, #44]	@ (800be18 <osKernelStart+0x48>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d109      	bne.n	800be06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bdf2:	f7ff ffbf 	bl	800bd74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bdf6:	4b08      	ldr	r3, [pc, #32]	@ (800be18 <osKernelStart+0x48>)
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bdfc:	f001 f892 	bl	800cf24 <vTaskStartScheduler>
      stat = osOK;
 800be00:	2300      	movs	r3, #0
 800be02:	607b      	str	r3, [r7, #4]
 800be04:	e002      	b.n	800be0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800be06:	f04f 33ff 	mov.w	r3, #4294967295
 800be0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be0c:	687b      	ldr	r3, [r7, #4]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	2000059c 	.word	0x2000059c

0800be1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b08e      	sub	sp, #56	@ 0x38
 800be20:	af04      	add	r7, sp, #16
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800be28:	2300      	movs	r3, #0
 800be2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be2c:	f3ef 8305 	mrs	r3, IPSR
 800be30:	617b      	str	r3, [r7, #20]
  return(result);
 800be32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800be34:	2b00      	cmp	r3, #0
 800be36:	d17f      	bne.n	800bf38 <osThreadNew+0x11c>
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d07c      	beq.n	800bf38 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800be3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800be42:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800be44:	2318      	movs	r3, #24
 800be46:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800be48:	2300      	movs	r3, #0
 800be4a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800be4c:	f04f 33ff 	mov.w	r3, #4294967295
 800be50:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d045      	beq.n	800bee4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <osThreadNew+0x4a>
        name = attr->name;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d008      	beq.n	800be8c <osThreadNew+0x70>
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	2b38      	cmp	r3, #56	@ 0x38
 800be7e:	d805      	bhi.n	800be8c <osThreadNew+0x70>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	f003 0301 	and.w	r3, r3, #1
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <osThreadNew+0x74>
        return (NULL);
 800be8c:	2300      	movs	r3, #0
 800be8e:	e054      	b.n	800bf3a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d003      	beq.n	800bea0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	089b      	lsrs	r3, r3, #2
 800be9e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00e      	beq.n	800bec6 <osThreadNew+0xaa>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	2ba7      	cmp	r3, #167	@ 0xa7
 800beae:	d90a      	bls.n	800bec6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d006      	beq.n	800bec6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	695b      	ldr	r3, [r3, #20]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <osThreadNew+0xaa>
        mem = 1;
 800bec0:	2301      	movs	r3, #1
 800bec2:	61bb      	str	r3, [r7, #24]
 800bec4:	e010      	b.n	800bee8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10c      	bne.n	800bee8 <osThreadNew+0xcc>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d108      	bne.n	800bee8 <osThreadNew+0xcc>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d104      	bne.n	800bee8 <osThreadNew+0xcc>
          mem = 0;
 800bede:	2300      	movs	r3, #0
 800bee0:	61bb      	str	r3, [r7, #24]
 800bee2:	e001      	b.n	800bee8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d110      	bne.n	800bf10 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bef6:	9202      	str	r2, [sp, #8]
 800bef8:	9301      	str	r3, [sp, #4]
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	6a3a      	ldr	r2, [r7, #32]
 800bf02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 fe19 	bl	800cb3c <xTaskCreateStatic>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	613b      	str	r3, [r7, #16]
 800bf0e:	e013      	b.n	800bf38 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d110      	bne.n	800bf38 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	f107 0310 	add.w	r3, r7, #16
 800bf1e:	9301      	str	r3, [sp, #4]
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f000 fe67 	bl	800cbfc <xTaskCreate>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d001      	beq.n	800bf38 <osThreadNew+0x11c>
            hTask = NULL;
 800bf34:	2300      	movs	r3, #0
 800bf36:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bf38:	693b      	ldr	r3, [r7, #16]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3728      	adds	r7, #40	@ 0x28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b084      	sub	sp, #16
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf4a:	f3ef 8305 	mrs	r3, IPSR
 800bf4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d003      	beq.n	800bf5e <osDelay+0x1c>
    stat = osErrorISR;
 800bf56:	f06f 0305 	mvn.w	r3, #5
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	e007      	b.n	800bf6e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <osDelay+0x2c>
      vTaskDelay(ticks);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 ffa5 	bl	800ceb8 <vTaskDelay>
    }
  }

  return (stat);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	4a07      	ldr	r2, [pc, #28]	@ (800bfa4 <vApplicationGetIdleTaskMemory+0x2c>)
 800bf88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	4a06      	ldr	r2, [pc, #24]	@ (800bfa8 <vApplicationGetIdleTaskMemory+0x30>)
 800bf8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bf96:	601a      	str	r2, [r3, #0]
}
 800bf98:	bf00      	nop
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	200005a0 	.word	0x200005a0
 800bfa8:	20000648 	.word	0x20000648

0800bfac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4a07      	ldr	r2, [pc, #28]	@ (800bfd8 <vApplicationGetTimerTaskMemory+0x2c>)
 800bfbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	4a06      	ldr	r2, [pc, #24]	@ (800bfdc <vApplicationGetTimerTaskMemory+0x30>)
 800bfc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f44f 6283 	mov.w	r2, #1048	@ 0x418
 800bfca:	601a      	str	r2, [r3, #0]
}
 800bfcc:	bf00      	nop
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	200015e8 	.word	0x200015e8
 800bfdc:	20001690 	.word	0x20001690

0800bfe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f103 0208 	add.w	r2, r3, #8
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f04f 32ff 	mov.w	r2, #4294967295
 800bff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f103 0208 	add.w	r2, r3, #8
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f103 0208 	add.w	r2, r3, #8
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c02e:	bf00      	nop
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c03a:	b480      	push	{r7}
 800c03c:	b085      	sub	sp, #20
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	689a      	ldr	r2, [r3, #8]
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	601a      	str	r2, [r3, #0]
}
 800c076:	bf00      	nop
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c082:	b480      	push	{r7}
 800c084:	b085      	sub	sp, #20
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c098:	d103      	bne.n	800c0a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	e00c      	b.n	800c0bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3308      	adds	r3, #8
 800c0a6:	60fb      	str	r3, [r7, #12]
 800c0a8:	e002      	b.n	800c0b0 <vListInsert+0x2e>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d2f6      	bcs.n	800c0aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	601a      	str	r2, [r3, #0]
}
 800c0e8:	bf00      	nop
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	6892      	ldr	r2, [r2, #8]
 800c10a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	6852      	ldr	r2, [r2, #4]
 800c114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d103      	bne.n	800c128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	689a      	ldr	r2, [r3, #8]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	1e5a      	subs	r2, r3, #1
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10b      	bne.n	800c174 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c160:	f383 8811 	msr	BASEPRI, r3
 800c164:	f3bf 8f6f 	isb	sy
 800c168:	f3bf 8f4f 	dsb	sy
 800c16c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c16e:	bf00      	nop
 800c170:	bf00      	nop
 800c172:	e7fd      	b.n	800c170 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c174:	f002 f8a8 	bl	800e2c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c180:	68f9      	ldr	r1, [r7, #12]
 800c182:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c184:	fb01 f303 	mul.w	r3, r1, r3
 800c188:	441a      	add	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	68f9      	ldr	r1, [r7, #12]
 800c1a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1aa:	fb01 f303 	mul.w	r3, r1, r3
 800c1ae:	441a      	add	r2, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	22ff      	movs	r2, #255	@ 0xff
 800c1b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	22ff      	movs	r2, #255	@ 0xff
 800c1c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d114      	bne.n	800c1f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d01a      	beq.n	800c208 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3310      	adds	r3, #16
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f001 f942 	bl	800d460 <xTaskRemoveFromEventList>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d012      	beq.n	800c208 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c218 <xQueueGenericReset+0xd0>)
 800c1e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1e8:	601a      	str	r2, [r3, #0]
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	e009      	b.n	800c208 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	3310      	adds	r3, #16
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7ff fef1 	bl	800bfe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3324      	adds	r3, #36	@ 0x24
 800c202:	4618      	mov	r0, r3
 800c204:	f7ff feec 	bl	800bfe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c208:	f002 f890 	bl	800e32c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c20c:	2301      	movs	r3, #1
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	e000ed04 	.word	0xe000ed04

0800c21c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08e      	sub	sp, #56	@ 0x38
 800c220:	af02      	add	r7, sp, #8
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10b      	bne.n	800c248 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c242:	bf00      	nop
 800c244:	bf00      	nop
 800c246:	e7fd      	b.n	800c244 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10b      	bne.n	800c266 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c260:	bf00      	nop
 800c262:	bf00      	nop
 800c264:	e7fd      	b.n	800c262 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <xQueueGenericCreateStatic+0x56>
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <xQueueGenericCreateStatic+0x5a>
 800c272:	2301      	movs	r3, #1
 800c274:	e000      	b.n	800c278 <xQueueGenericCreateStatic+0x5c>
 800c276:	2300      	movs	r3, #0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10b      	bne.n	800c294 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	623b      	str	r3, [r7, #32]
}
 800c28e:	bf00      	nop
 800c290:	bf00      	nop
 800c292:	e7fd      	b.n	800c290 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d102      	bne.n	800c2a0 <xQueueGenericCreateStatic+0x84>
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <xQueueGenericCreateStatic+0x88>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <xQueueGenericCreateStatic+0x8a>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10b      	bne.n	800c2c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	61fb      	str	r3, [r7, #28]
}
 800c2bc:	bf00      	nop
 800c2be:	bf00      	nop
 800c2c0:	e7fd      	b.n	800c2be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c2c2:	2350      	movs	r3, #80	@ 0x50
 800c2c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2b50      	cmp	r3, #80	@ 0x50
 800c2ca:	d00b      	beq.n	800c2e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	61bb      	str	r3, [r7, #24]
}
 800c2de:	bf00      	nop
 800c2e0:	bf00      	nop
 800c2e2:	e7fd      	b.n	800c2e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c2e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00d      	beq.n	800c30c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	4613      	mov	r3, r2
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	68b9      	ldr	r1, [r7, #8]
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f000 f805 	bl	800c316 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c30e:	4618      	mov	r0, r3
 800c310:	3730      	adds	r7, #48	@ 0x30
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	60f8      	str	r0, [r7, #12]
 800c31e:	60b9      	str	r1, [r7, #8]
 800c320:	607a      	str	r2, [r7, #4]
 800c322:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d103      	bne.n	800c332 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	69ba      	ldr	r2, [r7, #24]
 800c32e:	601a      	str	r2, [r3, #0]
 800c330:	e002      	b.n	800c338 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c344:	2101      	movs	r1, #1
 800c346:	69b8      	ldr	r0, [r7, #24]
 800c348:	f7ff fefe 	bl	800c148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	78fa      	ldrb	r2, [r7, #3]
 800c350:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c354:	bf00      	nop
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08e      	sub	sp, #56	@ 0x38
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
 800c368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c36a:	2300      	movs	r3, #0
 800c36c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10b      	bne.n	800c390 <xQueueGenericSend+0x34>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c38a:	bf00      	nop
 800c38c:	bf00      	nop
 800c38e:	e7fd      	b.n	800c38c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d103      	bne.n	800c39e <xQueueGenericSend+0x42>
 800c396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d101      	bne.n	800c3a2 <xQueueGenericSend+0x46>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e000      	b.n	800c3a4 <xQueueGenericSend+0x48>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10b      	bne.n	800c3c0 <xQueueGenericSend+0x64>
	__asm volatile
 800c3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c3ba:	bf00      	nop
 800c3bc:	bf00      	nop
 800c3be:	e7fd      	b.n	800c3bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	d103      	bne.n	800c3ce <xQueueGenericSend+0x72>
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d101      	bne.n	800c3d2 <xQueueGenericSend+0x76>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e000      	b.n	800c3d4 <xQueueGenericSend+0x78>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10b      	bne.n	800c3f0 <xQueueGenericSend+0x94>
	__asm volatile
 800c3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3dc:	f383 8811 	msr	BASEPRI, r3
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	623b      	str	r3, [r7, #32]
}
 800c3ea:	bf00      	nop
 800c3ec:	bf00      	nop
 800c3ee:	e7fd      	b.n	800c3ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3f0:	f001 f9fc 	bl	800d7ec <xTaskGetSchedulerState>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d102      	bne.n	800c400 <xQueueGenericSend+0xa4>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d101      	bne.n	800c404 <xQueueGenericSend+0xa8>
 800c400:	2301      	movs	r3, #1
 800c402:	e000      	b.n	800c406 <xQueueGenericSend+0xaa>
 800c404:	2300      	movs	r3, #0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10b      	bne.n	800c422 <xQueueGenericSend+0xc6>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	61fb      	str	r3, [r7, #28]
}
 800c41c:	bf00      	nop
 800c41e:	bf00      	nop
 800c420:	e7fd      	b.n	800c41e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c422:	f001 ff51 	bl	800e2c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c42e:	429a      	cmp	r2, r3
 800c430:	d302      	bcc.n	800c438 <xQueueGenericSend+0xdc>
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	2b02      	cmp	r3, #2
 800c436:	d129      	bne.n	800c48c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	68b9      	ldr	r1, [r7, #8]
 800c43c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c43e:	f000 fa0f 	bl	800c860 <prvCopyDataToQueue>
 800c442:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d010      	beq.n	800c46e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44e:	3324      	adds	r3, #36	@ 0x24
 800c450:	4618      	mov	r0, r3
 800c452:	f001 f805 	bl	800d460 <xTaskRemoveFromEventList>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d013      	beq.n	800c484 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c45c:	4b3f      	ldr	r3, [pc, #252]	@ (800c55c <xQueueGenericSend+0x200>)
 800c45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	f3bf 8f4f 	dsb	sy
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	e00a      	b.n	800c484 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c470:	2b00      	cmp	r3, #0
 800c472:	d007      	beq.n	800c484 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c474:	4b39      	ldr	r3, [pc, #228]	@ (800c55c <xQueueGenericSend+0x200>)
 800c476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c47a:	601a      	str	r2, [r3, #0]
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c484:	f001 ff52 	bl	800e32c <vPortExitCritical>
				return pdPASS;
 800c488:	2301      	movs	r3, #1
 800c48a:	e063      	b.n	800c554 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d103      	bne.n	800c49a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c492:	f001 ff4b 	bl	800e32c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c496:	2300      	movs	r3, #0
 800c498:	e05c      	b.n	800c554 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d106      	bne.n	800c4ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4a0:	f107 0314 	add.w	r3, r7, #20
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f001 f83f 	bl	800d528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4ae:	f001 ff3d 	bl	800e32c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4b2:	f000 fda7 	bl	800d004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4b6:	f001 ff07 	bl	800e2c8 <vPortEnterCritical>
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c4c0:	b25b      	sxtb	r3, r3
 800c4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c6:	d103      	bne.n	800c4d0 <xQueueGenericSend+0x174>
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4d6:	b25b      	sxtb	r3, r3
 800c4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4dc:	d103      	bne.n	800c4e6 <xQueueGenericSend+0x18a>
 800c4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4e6:	f001 ff21 	bl	800e32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4ea:	1d3a      	adds	r2, r7, #4
 800c4ec:	f107 0314 	add.w	r3, r7, #20
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f001 f82e 	bl	800d554 <xTaskCheckForTimeOut>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d124      	bne.n	800c548 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c4fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c500:	f000 faa6 	bl	800ca50 <prvIsQueueFull>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d018      	beq.n	800c53c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c50c:	3310      	adds	r3, #16
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f000 ff52 	bl	800d3bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c51a:	f000 fa31 	bl	800c980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c51e:	f000 fd7f 	bl	800d020 <xTaskResumeAll>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	f47f af7c 	bne.w	800c422 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c52a:	4b0c      	ldr	r3, [pc, #48]	@ (800c55c <xQueueGenericSend+0x200>)
 800c52c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	e772      	b.n	800c422 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c53c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c53e:	f000 fa1f 	bl	800c980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c542:	f000 fd6d 	bl	800d020 <xTaskResumeAll>
 800c546:	e76c      	b.n	800c422 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c54a:	f000 fa19 	bl	800c980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c54e:	f000 fd67 	bl	800d020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c554:	4618      	mov	r0, r3
 800c556:	3738      	adds	r7, #56	@ 0x38
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	e000ed04 	.word	0xe000ed04

0800c560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b090      	sub	sp, #64	@ 0x40
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
 800c56c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10b      	bne.n	800c590 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c57c:	f383 8811 	msr	BASEPRI, r3
 800c580:	f3bf 8f6f 	isb	sy
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c58a:	bf00      	nop
 800c58c:	bf00      	nop
 800c58e:	e7fd      	b.n	800c58c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d103      	bne.n	800c59e <xQueueGenericSendFromISR+0x3e>
 800c596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d101      	bne.n	800c5a2 <xQueueGenericSendFromISR+0x42>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e000      	b.n	800c5a4 <xQueueGenericSendFromISR+0x44>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10b      	bne.n	800c5c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c5ba:	bf00      	nop
 800c5bc:	bf00      	nop
 800c5be:	e7fd      	b.n	800c5bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d103      	bne.n	800c5ce <xQueueGenericSendFromISR+0x6e>
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d101      	bne.n	800c5d2 <xQueueGenericSendFromISR+0x72>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e000      	b.n	800c5d4 <xQueueGenericSendFromISR+0x74>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d10b      	bne.n	800c5f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	623b      	str	r3, [r7, #32]
}
 800c5ea:	bf00      	nop
 800c5ec:	bf00      	nop
 800c5ee:	e7fd      	b.n	800c5ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5f0:	f001 ff4a 	bl	800e488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c5f4:	f3ef 8211 	mrs	r2, BASEPRI
 800c5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	61fa      	str	r2, [r7, #28]
 800c60a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c60c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c60e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c618:	429a      	cmp	r2, r3
 800c61a:	d302      	bcc.n	800c622 <xQueueGenericSendFromISR+0xc2>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d12f      	bne.n	800c682 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c628:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c630:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c632:	683a      	ldr	r2, [r7, #0]
 800c634:	68b9      	ldr	r1, [r7, #8]
 800c636:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c638:	f000 f912 	bl	800c860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c63c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c644:	d112      	bne.n	800c66c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d016      	beq.n	800c67c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c650:	3324      	adds	r3, #36	@ 0x24
 800c652:	4618      	mov	r0, r3
 800c654:	f000 ff04 	bl	800d460 <xTaskRemoveFromEventList>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00e      	beq.n	800c67c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00b      	beq.n	800c67c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	e007      	b.n	800c67c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c66c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c670:	3301      	adds	r3, #1
 800c672:	b2db      	uxtb	r3, r3
 800c674:	b25a      	sxtb	r2, r3
 800c676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c67c:	2301      	movs	r3, #1
 800c67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c680:	e001      	b.n	800c686 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c682:	2300      	movs	r3, #0
 800c684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c688:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c690:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c694:	4618      	mov	r0, r3
 800c696:	3740      	adds	r7, #64	@ 0x40
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08c      	sub	sp, #48	@ 0x30
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10b      	bne.n	800c6ce <xQueueReceive+0x32>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	623b      	str	r3, [r7, #32]
}
 800c6c8:	bf00      	nop
 800c6ca:	bf00      	nop
 800c6cc:	e7fd      	b.n	800c6ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d103      	bne.n	800c6dc <xQueueReceive+0x40>
 800c6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d101      	bne.n	800c6e0 <xQueueReceive+0x44>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	e000      	b.n	800c6e2 <xQueueReceive+0x46>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10b      	bne.n	800c6fe <xQueueReceive+0x62>
	__asm volatile
 800c6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ea:	f383 8811 	msr	BASEPRI, r3
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	61fb      	str	r3, [r7, #28]
}
 800c6f8:	bf00      	nop
 800c6fa:	bf00      	nop
 800c6fc:	e7fd      	b.n	800c6fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6fe:	f001 f875 	bl	800d7ec <xTaskGetSchedulerState>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d102      	bne.n	800c70e <xQueueReceive+0x72>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d101      	bne.n	800c712 <xQueueReceive+0x76>
 800c70e:	2301      	movs	r3, #1
 800c710:	e000      	b.n	800c714 <xQueueReceive+0x78>
 800c712:	2300      	movs	r3, #0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10b      	bne.n	800c730 <xQueueReceive+0x94>
	__asm volatile
 800c718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71c:	f383 8811 	msr	BASEPRI, r3
 800c720:	f3bf 8f6f 	isb	sy
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	61bb      	str	r3, [r7, #24]
}
 800c72a:	bf00      	nop
 800c72c:	bf00      	nop
 800c72e:	e7fd      	b.n	800c72c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c730:	f001 fdca 	bl	800e2c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c738:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d01f      	beq.n	800c780 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c740:	68b9      	ldr	r1, [r7, #8]
 800c742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c744:	f000 f8f6 	bl	800c934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	1e5a      	subs	r2, r3, #1
 800c74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00f      	beq.n	800c778 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75a:	3310      	adds	r3, #16
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 fe7f 	bl	800d460 <xTaskRemoveFromEventList>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d007      	beq.n	800c778 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c768:	4b3c      	ldr	r3, [pc, #240]	@ (800c85c <xQueueReceive+0x1c0>)
 800c76a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c76e:	601a      	str	r2, [r3, #0]
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c778:	f001 fdd8 	bl	800e32c <vPortExitCritical>
				return pdPASS;
 800c77c:	2301      	movs	r3, #1
 800c77e:	e069      	b.n	800c854 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d103      	bne.n	800c78e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c786:	f001 fdd1 	bl	800e32c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c78a:	2300      	movs	r3, #0
 800c78c:	e062      	b.n	800c854 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c790:	2b00      	cmp	r3, #0
 800c792:	d106      	bne.n	800c7a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c794:	f107 0310 	add.w	r3, r7, #16
 800c798:	4618      	mov	r0, r3
 800c79a:	f000 fec5 	bl	800d528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7a2:	f001 fdc3 	bl	800e32c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7a6:	f000 fc2d 	bl	800d004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7aa:	f001 fd8d 	bl	800e2c8 <vPortEnterCritical>
 800c7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c7b4:	b25b      	sxtb	r3, r3
 800c7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ba:	d103      	bne.n	800c7c4 <xQueueReceive+0x128>
 800c7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7ca:	b25b      	sxtb	r3, r3
 800c7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d0:	d103      	bne.n	800c7da <xQueueReceive+0x13e>
 800c7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7da:	f001 fda7 	bl	800e32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7de:	1d3a      	adds	r2, r7, #4
 800c7e0:	f107 0310 	add.w	r3, r7, #16
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 feb4 	bl	800d554 <xTaskCheckForTimeOut>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d123      	bne.n	800c83a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7f4:	f000 f916 	bl	800ca24 <prvIsQueueEmpty>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d017      	beq.n	800c82e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c800:	3324      	adds	r3, #36	@ 0x24
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	4611      	mov	r1, r2
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fdd8 	bl	800d3bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c80c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c80e:	f000 f8b7 	bl	800c980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c812:	f000 fc05 	bl	800d020 <xTaskResumeAll>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d189      	bne.n	800c730 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c81c:	4b0f      	ldr	r3, [pc, #60]	@ (800c85c <xQueueReceive+0x1c0>)
 800c81e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	e780      	b.n	800c730 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c82e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c830:	f000 f8a6 	bl	800c980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c834:	f000 fbf4 	bl	800d020 <xTaskResumeAll>
 800c838:	e77a      	b.n	800c730 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c83a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c83c:	f000 f8a0 	bl	800c980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c840:	f000 fbee 	bl	800d020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c846:	f000 f8ed 	bl	800ca24 <prvIsQueueEmpty>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f43f af6f 	beq.w	800c730 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c852:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c854:	4618      	mov	r0, r3
 800c856:	3730      	adds	r7, #48	@ 0x30
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	e000ed04 	.word	0xe000ed04

0800c860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c86c:	2300      	movs	r3, #0
 800c86e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10d      	bne.n	800c89a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d14d      	bne.n	800c922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 ffcc 	bl	800d828 <xTaskPriorityDisinherit>
 800c890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	609a      	str	r2, [r3, #8]
 800c898:	e043      	b.n	800c922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d119      	bne.n	800c8d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6858      	ldr	r0, [r3, #4]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	68b9      	ldr	r1, [r7, #8]
 800c8ac:	f003 fb7f 	bl	800ffae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8b8:	441a      	add	r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d32b      	bcc.n	800c922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	605a      	str	r2, [r3, #4]
 800c8d2:	e026      	b.n	800c922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	68d8      	ldr	r0, [r3, #12]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8dc:	461a      	mov	r2, r3
 800c8de:	68b9      	ldr	r1, [r7, #8]
 800c8e0:	f003 fb65 	bl	800ffae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	68da      	ldr	r2, [r3, #12]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ec:	425b      	negs	r3, r3
 800c8ee:	441a      	add	r2, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	68da      	ldr	r2, [r3, #12]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d207      	bcs.n	800c910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	689a      	ldr	r2, [r3, #8]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c908:	425b      	negs	r3, r3
 800c90a:	441a      	add	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2b02      	cmp	r3, #2
 800c914:	d105      	bne.n	800c922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	3b01      	subs	r3, #1
 800c920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	1c5a      	adds	r2, r3, #1
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c92a:	697b      	ldr	r3, [r7, #20]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3718      	adds	r7, #24
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c942:	2b00      	cmp	r3, #0
 800c944:	d018      	beq.n	800c978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68da      	ldr	r2, [r3, #12]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c94e:	441a      	add	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68da      	ldr	r2, [r3, #12]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d303      	bcc.n	800c968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68d9      	ldr	r1, [r3, #12]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c970:	461a      	mov	r2, r3
 800c972:	6838      	ldr	r0, [r7, #0]
 800c974:	f003 fb1b 	bl	800ffae <memcpy>
	}
}
 800c978:	bf00      	nop
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c988:	f001 fc9e 	bl	800e2c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c994:	e011      	b.n	800c9ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d012      	beq.n	800c9c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	3324      	adds	r3, #36	@ 0x24
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 fd5c 	bl	800d460 <xTaskRemoveFromEventList>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9ae:	f000 fe35 	bl	800d61c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	dce9      	bgt.n	800c996 <prvUnlockQueue+0x16>
 800c9c2:	e000      	b.n	800c9c6 <prvUnlockQueue+0x46>
					break;
 800c9c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	22ff      	movs	r2, #255	@ 0xff
 800c9ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c9ce:	f001 fcad 	bl	800e32c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9d2:	f001 fc79 	bl	800e2c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9de:	e011      	b.n	800ca04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	691b      	ldr	r3, [r3, #16]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d012      	beq.n	800ca0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	3310      	adds	r3, #16
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 fd37 	bl	800d460 <xTaskRemoveFromEventList>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c9f8:	f000 fe10 	bl	800d61c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c9fc:	7bbb      	ldrb	r3, [r7, #14]
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	dce9      	bgt.n	800c9e0 <prvUnlockQueue+0x60>
 800ca0c:	e000      	b.n	800ca10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	22ff      	movs	r2, #255	@ 0xff
 800ca14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ca18:	f001 fc88 	bl	800e32c <vPortExitCritical>
}
 800ca1c:	bf00      	nop
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca2c:	f001 fc4c 	bl	800e2c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d102      	bne.n	800ca3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	e001      	b.n	800ca42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca42:	f001 fc73 	bl	800e32c <vPortExitCritical>

	return xReturn;
 800ca46:	68fb      	ldr	r3, [r7, #12]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca58:	f001 fc36 	bl	800e2c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d102      	bne.n	800ca6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	60fb      	str	r3, [r7, #12]
 800ca6c:	e001      	b.n	800ca72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca72:	f001 fc5b 	bl	800e32c <vPortExitCritical>

	return xReturn;
 800ca76:	68fb      	ldr	r3, [r7, #12]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	60fb      	str	r3, [r7, #12]
 800ca8e:	e014      	b.n	800caba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca90:	4a0f      	ldr	r2, [pc, #60]	@ (800cad0 <vQueueAddToRegistry+0x50>)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10b      	bne.n	800cab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca9c:	490c      	ldr	r1, [pc, #48]	@ (800cad0 <vQueueAddToRegistry+0x50>)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	683a      	ldr	r2, [r7, #0]
 800caa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800caa6:	4a0a      	ldr	r2, [pc, #40]	@ (800cad0 <vQueueAddToRegistry+0x50>)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	00db      	lsls	r3, r3, #3
 800caac:	4413      	add	r3, r2
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cab2:	e006      	b.n	800cac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	3301      	adds	r3, #1
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2b07      	cmp	r3, #7
 800cabe:	d9e7      	bls.n	800ca90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cac0:	bf00      	nop
 800cac2:	bf00      	nop
 800cac4:	3714      	adds	r7, #20
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	200026f0 	.word	0x200026f0

0800cad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cae4:	f001 fbf0 	bl	800e2c8 <vPortEnterCritical>
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800caee:	b25b      	sxtb	r3, r3
 800caf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf4:	d103      	bne.n	800cafe <vQueueWaitForMessageRestricted+0x2a>
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb04:	b25b      	sxtb	r3, r3
 800cb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb0a:	d103      	bne.n	800cb14 <vQueueWaitForMessageRestricted+0x40>
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb14:	f001 fc0a 	bl	800e32c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d106      	bne.n	800cb2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	3324      	adds	r3, #36	@ 0x24
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	68b9      	ldr	r1, [r7, #8]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f000 fc6d 	bl	800d408 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cb2e:	6978      	ldr	r0, [r7, #20]
 800cb30:	f7ff ff26 	bl	800c980 <prvUnlockQueue>
	}
 800cb34:	bf00      	nop
 800cb36:	3718      	adds	r7, #24
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08e      	sub	sp, #56	@ 0x38
 800cb40:	af04      	add	r7, sp, #16
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
 800cb48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10b      	bne.n	800cb68 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	623b      	str	r3, [r7, #32]
}
 800cb62:	bf00      	nop
 800cb64:	bf00      	nop
 800cb66:	e7fd      	b.n	800cb64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10b      	bne.n	800cb86 <xTaskCreateStatic+0x4a>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	61fb      	str	r3, [r7, #28]
}
 800cb80:	bf00      	nop
 800cb82:	bf00      	nop
 800cb84:	e7fd      	b.n	800cb82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb86:	23a8      	movs	r3, #168	@ 0xa8
 800cb88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	2ba8      	cmp	r3, #168	@ 0xa8
 800cb8e:	d00b      	beq.n	800cba8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	61bb      	str	r3, [r7, #24]
}
 800cba2:	bf00      	nop
 800cba4:	bf00      	nop
 800cba6:	e7fd      	b.n	800cba4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cba8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d01e      	beq.n	800cbee <xTaskCreateStatic+0xb2>
 800cbb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d01b      	beq.n	800cbee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc2:	2202      	movs	r2, #2
 800cbc4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbc8:	2300      	movs	r3, #0
 800cbca:	9303      	str	r3, [sp, #12]
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbce:	9302      	str	r3, [sp, #8]
 800cbd0:	f107 0314 	add.w	r3, r7, #20
 800cbd4:	9301      	str	r3, [sp, #4]
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	68b9      	ldr	r1, [r7, #8]
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f000 f851 	bl	800cc88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cbe8:	f000 f8f6 	bl	800cdd8 <prvAddNewTaskToReadyList>
 800cbec:	e001      	b.n	800cbf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cbf2:	697b      	ldr	r3, [r7, #20]
	}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3728      	adds	r7, #40	@ 0x28
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08c      	sub	sp, #48	@ 0x30
 800cc00:	af04      	add	r7, sp, #16
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc0c:	88fb      	ldrh	r3, [r7, #6]
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4618      	mov	r0, r3
 800cc12:	f001 fc7b 	bl	800e50c <pvPortMalloc>
 800cc16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00e      	beq.n	800cc3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc1e:	20a8      	movs	r0, #168	@ 0xa8
 800cc20:	f001 fc74 	bl	800e50c <pvPortMalloc>
 800cc24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc32:	e005      	b.n	800cc40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc34:	6978      	ldr	r0, [r7, #20]
 800cc36:	f001 fd37 	bl	800e6a8 <vPortFree>
 800cc3a:	e001      	b.n	800cc40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d017      	beq.n	800cc76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc4e:	88fa      	ldrh	r2, [r7, #6]
 800cc50:	2300      	movs	r3, #0
 800cc52:	9303      	str	r3, [sp, #12]
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	9302      	str	r3, [sp, #8]
 800cc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5a:	9301      	str	r3, [sp, #4]
 800cc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	68b9      	ldr	r1, [r7, #8]
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f000 f80f 	bl	800cc88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc6a:	69f8      	ldr	r0, [r7, #28]
 800cc6c:	f000 f8b4 	bl	800cdd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc70:	2301      	movs	r3, #1
 800cc72:	61bb      	str	r3, [r7, #24]
 800cc74:	e002      	b.n	800cc7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc76:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc7c:	69bb      	ldr	r3, [r7, #24]
	}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3720      	adds	r7, #32
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
	...

0800cc88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b088      	sub	sp, #32
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	461a      	mov	r2, r3
 800cca0:	21a5      	movs	r1, #165	@ 0xa5
 800cca2:	f003 f8a7 	bl	800fdf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	f023 0307 	bic.w	r3, r3, #7
 800ccbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	f003 0307 	and.w	r3, r3, #7
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00b      	beq.n	800cce2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	617b      	str	r3, [r7, #20]
}
 800ccdc:	bf00      	nop
 800ccde:	bf00      	nop
 800cce0:	e7fd      	b.n	800ccde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d01f      	beq.n	800cd28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cce8:	2300      	movs	r3, #0
 800ccea:	61fb      	str	r3, [r7, #28]
 800ccec:	e012      	b.n	800cd14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	7819      	ldrb	r1, [r3, #0]
 800ccf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	3334      	adds	r3, #52	@ 0x34
 800ccfe:	460a      	mov	r2, r1
 800cd00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd02:	68ba      	ldr	r2, [r7, #8]
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	4413      	add	r3, r2
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d006      	beq.n	800cd1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	3301      	adds	r3, #1
 800cd12:	61fb      	str	r3, [r7, #28]
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	2b0f      	cmp	r3, #15
 800cd18:	d9e9      	bls.n	800ccee <prvInitialiseNewTask+0x66>
 800cd1a:	e000      	b.n	800cd1e <prvInitialiseNewTask+0x96>
			{
				break;
 800cd1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cd26:	e003      	b.n	800cd30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd32:	2b37      	cmp	r3, #55	@ 0x37
 800cd34:	d901      	bls.n	800cd3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd36:	2337      	movs	r3, #55	@ 0x37
 800cd38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd48:	2200      	movs	r2, #0
 800cd4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4e:	3304      	adds	r3, #4
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7ff f965 	bl	800c020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd58:	3318      	adds	r3, #24
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7ff f960 	bl	800c020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd88:	3354      	adds	r3, #84	@ 0x54
 800cd8a:	224c      	movs	r2, #76	@ 0x4c
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f003 f830 	bl	800fdf4 <memset>
 800cd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd96:	4a0d      	ldr	r2, [pc, #52]	@ (800cdcc <prvInitialiseNewTask+0x144>)
 800cd98:	659a      	str	r2, [r3, #88]	@ 0x58
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9c:	4a0c      	ldr	r2, [pc, #48]	@ (800cdd0 <prvInitialiseNewTask+0x148>)
 800cd9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda2:	4a0c      	ldr	r2, [pc, #48]	@ (800cdd4 <prvInitialiseNewTask+0x14c>)
 800cda4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	68f9      	ldr	r1, [r7, #12]
 800cdaa:	69b8      	ldr	r0, [r7, #24]
 800cdac:	f001 f95a 	bl	800e064 <pxPortInitialiseStack>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdc2:	bf00      	nop
 800cdc4:	3720      	adds	r7, #32
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	2000a510 	.word	0x2000a510
 800cdd0:	2000a578 	.word	0x2000a578
 800cdd4:	2000a5e0 	.word	0x2000a5e0

0800cdd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cde0:	f001 fa72 	bl	800e2c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cde4:	4b2d      	ldr	r3, [pc, #180]	@ (800ce9c <prvAddNewTaskToReadyList+0xc4>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	3301      	adds	r3, #1
 800cdea:	4a2c      	ldr	r2, [pc, #176]	@ (800ce9c <prvAddNewTaskToReadyList+0xc4>)
 800cdec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cdee:	4b2c      	ldr	r3, [pc, #176]	@ (800cea0 <prvAddNewTaskToReadyList+0xc8>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d109      	bne.n	800ce0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdf6:	4a2a      	ldr	r2, [pc, #168]	@ (800cea0 <prvAddNewTaskToReadyList+0xc8>)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cdfc:	4b27      	ldr	r3, [pc, #156]	@ (800ce9c <prvAddNewTaskToReadyList+0xc4>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d110      	bne.n	800ce26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce04:	f000 fc2e 	bl	800d664 <prvInitialiseTaskLists>
 800ce08:	e00d      	b.n	800ce26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce0a:	4b26      	ldr	r3, [pc, #152]	@ (800cea4 <prvAddNewTaskToReadyList+0xcc>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d109      	bne.n	800ce26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce12:	4b23      	ldr	r3, [pc, #140]	@ (800cea0 <prvAddNewTaskToReadyList+0xc8>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d802      	bhi.n	800ce26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce20:	4a1f      	ldr	r2, [pc, #124]	@ (800cea0 <prvAddNewTaskToReadyList+0xc8>)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce26:	4b20      	ldr	r3, [pc, #128]	@ (800cea8 <prvAddNewTaskToReadyList+0xd0>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	4a1e      	ldr	r2, [pc, #120]	@ (800cea8 <prvAddNewTaskToReadyList+0xd0>)
 800ce2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ce30:	4b1d      	ldr	r3, [pc, #116]	@ (800cea8 <prvAddNewTaskToReadyList+0xd0>)
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce3c:	4b1b      	ldr	r3, [pc, #108]	@ (800ceac <prvAddNewTaskToReadyList+0xd4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d903      	bls.n	800ce4c <prvAddNewTaskToReadyList+0x74>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce48:	4a18      	ldr	r2, [pc, #96]	@ (800ceac <prvAddNewTaskToReadyList+0xd4>)
 800ce4a:	6013      	str	r3, [r2, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce50:	4613      	mov	r3, r2
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4413      	add	r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	4a15      	ldr	r2, [pc, #84]	@ (800ceb0 <prvAddNewTaskToReadyList+0xd8>)
 800ce5a:	441a      	add	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	4619      	mov	r1, r3
 800ce62:	4610      	mov	r0, r2
 800ce64:	f7ff f8e9 	bl	800c03a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce68:	f001 fa60 	bl	800e32c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce6c:	4b0d      	ldr	r3, [pc, #52]	@ (800cea4 <prvAddNewTaskToReadyList+0xcc>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00e      	beq.n	800ce92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce74:	4b0a      	ldr	r3, [pc, #40]	@ (800cea0 <prvAddNewTaskToReadyList+0xc8>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d207      	bcs.n	800ce92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce82:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb4 <prvAddNewTaskToReadyList+0xdc>)
 800ce84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce92:	bf00      	nop
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	20002c04 	.word	0x20002c04
 800cea0:	20002730 	.word	0x20002730
 800cea4:	20002c10 	.word	0x20002c10
 800cea8:	20002c20 	.word	0x20002c20
 800ceac:	20002c0c 	.word	0x20002c0c
 800ceb0:	20002734 	.word	0x20002734
 800ceb4:	e000ed04 	.word	0xe000ed04

0800ceb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cec0:	2300      	movs	r3, #0
 800cec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d018      	beq.n	800cefc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ceca:	4b14      	ldr	r3, [pc, #80]	@ (800cf1c <vTaskDelay+0x64>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00b      	beq.n	800ceea <vTaskDelay+0x32>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	60bb      	str	r3, [r7, #8]
}
 800cee4:	bf00      	nop
 800cee6:	bf00      	nop
 800cee8:	e7fd      	b.n	800cee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ceea:	f000 f88b 	bl	800d004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ceee:	2100      	movs	r1, #0
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 fd09 	bl	800d908 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cef6:	f000 f893 	bl	800d020 <xTaskResumeAll>
 800cefa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d107      	bne.n	800cf12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cf02:	4b07      	ldr	r3, [pc, #28]	@ (800cf20 <vTaskDelay+0x68>)
 800cf04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf12:	bf00      	nop
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	20002c2c 	.word	0x20002c2c
 800cf20:	e000ed04 	.word	0xe000ed04

0800cf24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b08a      	sub	sp, #40	@ 0x28
 800cf28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf32:	463a      	mov	r2, r7
 800cf34:	1d39      	adds	r1, r7, #4
 800cf36:	f107 0308 	add.w	r3, r7, #8
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7ff f81c 	bl	800bf78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	9202      	str	r2, [sp, #8]
 800cf48:	9301      	str	r3, [sp, #4]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	9300      	str	r3, [sp, #0]
 800cf4e:	2300      	movs	r3, #0
 800cf50:	460a      	mov	r2, r1
 800cf52:	4924      	ldr	r1, [pc, #144]	@ (800cfe4 <vTaskStartScheduler+0xc0>)
 800cf54:	4824      	ldr	r0, [pc, #144]	@ (800cfe8 <vTaskStartScheduler+0xc4>)
 800cf56:	f7ff fdf1 	bl	800cb3c <xTaskCreateStatic>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	4a23      	ldr	r2, [pc, #140]	@ (800cfec <vTaskStartScheduler+0xc8>)
 800cf5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf60:	4b22      	ldr	r3, [pc, #136]	@ (800cfec <vTaskStartScheduler+0xc8>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	617b      	str	r3, [r7, #20]
 800cf6c:	e001      	b.n	800cf72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d102      	bne.n	800cf7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cf78:	f000 fd1a 	bl	800d9b0 <xTimerCreateTimerTask>
 800cf7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d11b      	bne.n	800cfbc <vTaskStartScheduler+0x98>
	__asm volatile
 800cf84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf88:	f383 8811 	msr	BASEPRI, r3
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	613b      	str	r3, [r7, #16]
}
 800cf96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf98:	4b15      	ldr	r3, [pc, #84]	@ (800cff0 <vTaskStartScheduler+0xcc>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3354      	adds	r3, #84	@ 0x54
 800cf9e:	4a15      	ldr	r2, [pc, #84]	@ (800cff4 <vTaskStartScheduler+0xd0>)
 800cfa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cfa2:	4b15      	ldr	r3, [pc, #84]	@ (800cff8 <vTaskStartScheduler+0xd4>)
 800cfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cfaa:	4b14      	ldr	r3, [pc, #80]	@ (800cffc <vTaskStartScheduler+0xd8>)
 800cfac:	2201      	movs	r2, #1
 800cfae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cfb0:	4b13      	ldr	r3, [pc, #76]	@ (800d000 <vTaskStartScheduler+0xdc>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cfb6:	f001 f8e3 	bl	800e180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cfba:	e00f      	b.n	800cfdc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc2:	d10b      	bne.n	800cfdc <vTaskStartScheduler+0xb8>
	__asm volatile
 800cfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	60fb      	str	r3, [r7, #12]
}
 800cfd6:	bf00      	nop
 800cfd8:	bf00      	nop
 800cfda:	e7fd      	b.n	800cfd8 <vTaskStartScheduler+0xb4>
}
 800cfdc:	bf00      	nop
 800cfde:	3718      	adds	r7, #24
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	080122bc 	.word	0x080122bc
 800cfe8:	0800d635 	.word	0x0800d635
 800cfec:	20002c28 	.word	0x20002c28
 800cff0:	20002730 	.word	0x20002730
 800cff4:	20000194 	.word	0x20000194
 800cff8:	20002c24 	.word	0x20002c24
 800cffc:	20002c10 	.word	0x20002c10
 800d000:	20002c08 	.word	0x20002c08

0800d004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d004:	b480      	push	{r7}
 800d006:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d008:	4b04      	ldr	r3, [pc, #16]	@ (800d01c <vTaskSuspendAll+0x18>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	3301      	adds	r3, #1
 800d00e:	4a03      	ldr	r2, [pc, #12]	@ (800d01c <vTaskSuspendAll+0x18>)
 800d010:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d012:	bf00      	nop
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	20002c2c 	.word	0x20002c2c

0800d020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d026:	2300      	movs	r3, #0
 800d028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d02a:	2300      	movs	r3, #0
 800d02c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d02e:	4b42      	ldr	r3, [pc, #264]	@ (800d138 <xTaskResumeAll+0x118>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10b      	bne.n	800d04e <xTaskResumeAll+0x2e>
	__asm volatile
 800d036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	603b      	str	r3, [r7, #0]
}
 800d048:	bf00      	nop
 800d04a:	bf00      	nop
 800d04c:	e7fd      	b.n	800d04a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d04e:	f001 f93b 	bl	800e2c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d052:	4b39      	ldr	r3, [pc, #228]	@ (800d138 <xTaskResumeAll+0x118>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3b01      	subs	r3, #1
 800d058:	4a37      	ldr	r2, [pc, #220]	@ (800d138 <xTaskResumeAll+0x118>)
 800d05a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d05c:	4b36      	ldr	r3, [pc, #216]	@ (800d138 <xTaskResumeAll+0x118>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d162      	bne.n	800d12a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d064:	4b35      	ldr	r3, [pc, #212]	@ (800d13c <xTaskResumeAll+0x11c>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d05e      	beq.n	800d12a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d06c:	e02f      	b.n	800d0ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d06e:	4b34      	ldr	r3, [pc, #208]	@ (800d140 <xTaskResumeAll+0x120>)
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	3318      	adds	r3, #24
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7ff f83a 	bl	800c0f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3304      	adds	r3, #4
 800d084:	4618      	mov	r0, r3
 800d086:	f7ff f835 	bl	800c0f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d08e:	4b2d      	ldr	r3, [pc, #180]	@ (800d144 <xTaskResumeAll+0x124>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	429a      	cmp	r2, r3
 800d094:	d903      	bls.n	800d09e <xTaskResumeAll+0x7e>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d09a:	4a2a      	ldr	r2, [pc, #168]	@ (800d144 <xTaskResumeAll+0x124>)
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4413      	add	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	4a27      	ldr	r2, [pc, #156]	@ (800d148 <xTaskResumeAll+0x128>)
 800d0ac:	441a      	add	r2, r3
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	f7fe ffc0 	bl	800c03a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0be:	4b23      	ldr	r3, [pc, #140]	@ (800d14c <xTaskResumeAll+0x12c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d302      	bcc.n	800d0ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d0c8:	4b21      	ldr	r3, [pc, #132]	@ (800d150 <xTaskResumeAll+0x130>)
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800d140 <xTaskResumeAll+0x120>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1cb      	bne.n	800d06e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0dc:	f000 fb66 	bl	800d7ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d0e0:	4b1c      	ldr	r3, [pc, #112]	@ (800d154 <xTaskResumeAll+0x134>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d010      	beq.n	800d10e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0ec:	f000 f846 	bl	800d17c <xTaskIncrementTick>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d002      	beq.n	800d0fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d0f6:	4b16      	ldr	r3, [pc, #88]	@ (800d150 <xTaskResumeAll+0x130>)
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1f1      	bne.n	800d0ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d108:	4b12      	ldr	r3, [pc, #72]	@ (800d154 <xTaskResumeAll+0x134>)
 800d10a:	2200      	movs	r2, #0
 800d10c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d10e:	4b10      	ldr	r3, [pc, #64]	@ (800d150 <xTaskResumeAll+0x130>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d009      	beq.n	800d12a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d116:	2301      	movs	r3, #1
 800d118:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d11a:	4b0f      	ldr	r3, [pc, #60]	@ (800d158 <xTaskResumeAll+0x138>)
 800d11c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d120:	601a      	str	r2, [r3, #0]
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d12a:	f001 f8ff 	bl	800e32c <vPortExitCritical>

	return xAlreadyYielded;
 800d12e:	68bb      	ldr	r3, [r7, #8]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	20002c2c 	.word	0x20002c2c
 800d13c:	20002c04 	.word	0x20002c04
 800d140:	20002bc4 	.word	0x20002bc4
 800d144:	20002c0c 	.word	0x20002c0c
 800d148:	20002734 	.word	0x20002734
 800d14c:	20002730 	.word	0x20002730
 800d150:	20002c18 	.word	0x20002c18
 800d154:	20002c14 	.word	0x20002c14
 800d158:	e000ed04 	.word	0xe000ed04

0800d15c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d162:	4b05      	ldr	r3, [pc, #20]	@ (800d178 <xTaskGetTickCount+0x1c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d168:	687b      	ldr	r3, [r7, #4]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	20002c08 	.word	0x20002c08

0800d17c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d182:	2300      	movs	r3, #0
 800d184:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d186:	4b4f      	ldr	r3, [pc, #316]	@ (800d2c4 <xTaskIncrementTick+0x148>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f040 8090 	bne.w	800d2b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d190:	4b4d      	ldr	r3, [pc, #308]	@ (800d2c8 <xTaskIncrementTick+0x14c>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3301      	adds	r3, #1
 800d196:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d198:	4a4b      	ldr	r2, [pc, #300]	@ (800d2c8 <xTaskIncrementTick+0x14c>)
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d121      	bne.n	800d1e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1a4:	4b49      	ldr	r3, [pc, #292]	@ (800d2cc <xTaskIncrementTick+0x150>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00b      	beq.n	800d1c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	603b      	str	r3, [r7, #0]
}
 800d1c0:	bf00      	nop
 800d1c2:	bf00      	nop
 800d1c4:	e7fd      	b.n	800d1c2 <xTaskIncrementTick+0x46>
 800d1c6:	4b41      	ldr	r3, [pc, #260]	@ (800d2cc <xTaskIncrementTick+0x150>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	60fb      	str	r3, [r7, #12]
 800d1cc:	4b40      	ldr	r3, [pc, #256]	@ (800d2d0 <xTaskIncrementTick+0x154>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a3e      	ldr	r2, [pc, #248]	@ (800d2cc <xTaskIncrementTick+0x150>)
 800d1d2:	6013      	str	r3, [r2, #0]
 800d1d4:	4a3e      	ldr	r2, [pc, #248]	@ (800d2d0 <xTaskIncrementTick+0x154>)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6013      	str	r3, [r2, #0]
 800d1da:	4b3e      	ldr	r3, [pc, #248]	@ (800d2d4 <xTaskIncrementTick+0x158>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	4a3c      	ldr	r2, [pc, #240]	@ (800d2d4 <xTaskIncrementTick+0x158>)
 800d1e2:	6013      	str	r3, [r2, #0]
 800d1e4:	f000 fae2 	bl	800d7ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1e8:	4b3b      	ldr	r3, [pc, #236]	@ (800d2d8 <xTaskIncrementTick+0x15c>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	693a      	ldr	r2, [r7, #16]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d349      	bcc.n	800d286 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1f2:	4b36      	ldr	r3, [pc, #216]	@ (800d2cc <xTaskIncrementTick+0x150>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d104      	bne.n	800d206 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1fc:	4b36      	ldr	r3, [pc, #216]	@ (800d2d8 <xTaskIncrementTick+0x15c>)
 800d1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d202:	601a      	str	r2, [r3, #0]
					break;
 800d204:	e03f      	b.n	800d286 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d206:	4b31      	ldr	r3, [pc, #196]	@ (800d2cc <xTaskIncrementTick+0x150>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d216:	693a      	ldr	r2, [r7, #16]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d203      	bcs.n	800d226 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d21e:	4a2e      	ldr	r2, [pc, #184]	@ (800d2d8 <xTaskIncrementTick+0x15c>)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d224:	e02f      	b.n	800d286 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	3304      	adds	r3, #4
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe ff62 	bl	800c0f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d234:	2b00      	cmp	r3, #0
 800d236:	d004      	beq.n	800d242 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	3318      	adds	r3, #24
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fe ff59 	bl	800c0f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d246:	4b25      	ldr	r3, [pc, #148]	@ (800d2dc <xTaskIncrementTick+0x160>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d903      	bls.n	800d256 <xTaskIncrementTick+0xda>
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d252:	4a22      	ldr	r2, [pc, #136]	@ (800d2dc <xTaskIncrementTick+0x160>)
 800d254:	6013      	str	r3, [r2, #0]
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d25a:	4613      	mov	r3, r2
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4413      	add	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	4a1f      	ldr	r2, [pc, #124]	@ (800d2e0 <xTaskIncrementTick+0x164>)
 800d264:	441a      	add	r2, r3
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	3304      	adds	r3, #4
 800d26a:	4619      	mov	r1, r3
 800d26c:	4610      	mov	r0, r2
 800d26e:	f7fe fee4 	bl	800c03a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d276:	4b1b      	ldr	r3, [pc, #108]	@ (800d2e4 <xTaskIncrementTick+0x168>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d3b8      	bcc.n	800d1f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d280:	2301      	movs	r3, #1
 800d282:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d284:	e7b5      	b.n	800d1f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d286:	4b17      	ldr	r3, [pc, #92]	@ (800d2e4 <xTaskIncrementTick+0x168>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d28c:	4914      	ldr	r1, [pc, #80]	@ (800d2e0 <xTaskIncrementTick+0x164>)
 800d28e:	4613      	mov	r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4413      	add	r3, r2
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	440b      	add	r3, r1
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d901      	bls.n	800d2a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d2a2:	4b11      	ldr	r3, [pc, #68]	@ (800d2e8 <xTaskIncrementTick+0x16c>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d007      	beq.n	800d2ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	617b      	str	r3, [r7, #20]
 800d2ae:	e004      	b.n	800d2ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d2b0:	4b0e      	ldr	r3, [pc, #56]	@ (800d2ec <xTaskIncrementTick+0x170>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	4a0d      	ldr	r2, [pc, #52]	@ (800d2ec <xTaskIncrementTick+0x170>)
 800d2b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d2ba:	697b      	ldr	r3, [r7, #20]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	20002c2c 	.word	0x20002c2c
 800d2c8:	20002c08 	.word	0x20002c08
 800d2cc:	20002bbc 	.word	0x20002bbc
 800d2d0:	20002bc0 	.word	0x20002bc0
 800d2d4:	20002c1c 	.word	0x20002c1c
 800d2d8:	20002c24 	.word	0x20002c24
 800d2dc:	20002c0c 	.word	0x20002c0c
 800d2e0:	20002734 	.word	0x20002734
 800d2e4:	20002730 	.word	0x20002730
 800d2e8:	20002c18 	.word	0x20002c18
 800d2ec:	20002c14 	.word	0x20002c14

0800d2f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2f6:	4b2b      	ldr	r3, [pc, #172]	@ (800d3a4 <vTaskSwitchContext+0xb4>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d003      	beq.n	800d306 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2fe:	4b2a      	ldr	r3, [pc, #168]	@ (800d3a8 <vTaskSwitchContext+0xb8>)
 800d300:	2201      	movs	r2, #1
 800d302:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d304:	e047      	b.n	800d396 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d306:	4b28      	ldr	r3, [pc, #160]	@ (800d3a8 <vTaskSwitchContext+0xb8>)
 800d308:	2200      	movs	r2, #0
 800d30a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d30c:	4b27      	ldr	r3, [pc, #156]	@ (800d3ac <vTaskSwitchContext+0xbc>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	60fb      	str	r3, [r7, #12]
 800d312:	e011      	b.n	800d338 <vTaskSwitchContext+0x48>
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10b      	bne.n	800d332 <vTaskSwitchContext+0x42>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	607b      	str	r3, [r7, #4]
}
 800d32c:	bf00      	nop
 800d32e:	bf00      	nop
 800d330:	e7fd      	b.n	800d32e <vTaskSwitchContext+0x3e>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	3b01      	subs	r3, #1
 800d336:	60fb      	str	r3, [r7, #12]
 800d338:	491d      	ldr	r1, [pc, #116]	@ (800d3b0 <vTaskSwitchContext+0xc0>)
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	4613      	mov	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	440b      	add	r3, r1
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d0e3      	beq.n	800d314 <vTaskSwitchContext+0x24>
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	4613      	mov	r3, r2
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4413      	add	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4a16      	ldr	r2, [pc, #88]	@ (800d3b0 <vTaskSwitchContext+0xc0>)
 800d358:	4413      	add	r3, r2
 800d35a:	60bb      	str	r3, [r7, #8]
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	685a      	ldr	r2, [r3, #4]
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	605a      	str	r2, [r3, #4]
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	685a      	ldr	r2, [r3, #4]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	3308      	adds	r3, #8
 800d36e:	429a      	cmp	r2, r3
 800d370:	d104      	bne.n	800d37c <vTaskSwitchContext+0x8c>
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	685a      	ldr	r2, [r3, #4]
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	605a      	str	r2, [r3, #4]
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	4a0c      	ldr	r2, [pc, #48]	@ (800d3b4 <vTaskSwitchContext+0xc4>)
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	4a09      	ldr	r2, [pc, #36]	@ (800d3ac <vTaskSwitchContext+0xbc>)
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d38c:	4b09      	ldr	r3, [pc, #36]	@ (800d3b4 <vTaskSwitchContext+0xc4>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	3354      	adds	r3, #84	@ 0x54
 800d392:	4a09      	ldr	r2, [pc, #36]	@ (800d3b8 <vTaskSwitchContext+0xc8>)
 800d394:	6013      	str	r3, [r2, #0]
}
 800d396:	bf00      	nop
 800d398:	3714      	adds	r7, #20
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	20002c2c 	.word	0x20002c2c
 800d3a8:	20002c18 	.word	0x20002c18
 800d3ac:	20002c0c 	.word	0x20002c0c
 800d3b0:	20002734 	.word	0x20002734
 800d3b4:	20002730 	.word	0x20002730
 800d3b8:	20000194 	.word	0x20000194

0800d3bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10b      	bne.n	800d3e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d0:	f383 8811 	msr	BASEPRI, r3
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	60fb      	str	r3, [r7, #12]
}
 800d3de:	bf00      	nop
 800d3e0:	bf00      	nop
 800d3e2:	e7fd      	b.n	800d3e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3e4:	4b07      	ldr	r3, [pc, #28]	@ (800d404 <vTaskPlaceOnEventList+0x48>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	3318      	adds	r3, #24
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7fe fe48 	bl	800c082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3f2:	2101      	movs	r1, #1
 800d3f4:	6838      	ldr	r0, [r7, #0]
 800d3f6:	f000 fa87 	bl	800d908 <prvAddCurrentTaskToDelayedList>
}
 800d3fa:	bf00      	nop
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	20002730 	.word	0x20002730

0800d408 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d10b      	bne.n	800d432 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	617b      	str	r3, [r7, #20]
}
 800d42c:	bf00      	nop
 800d42e:	bf00      	nop
 800d430:	e7fd      	b.n	800d42e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d432:	4b0a      	ldr	r3, [pc, #40]	@ (800d45c <vTaskPlaceOnEventListRestricted+0x54>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	3318      	adds	r3, #24
 800d438:	4619      	mov	r1, r3
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f7fe fdfd 	bl	800c03a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d002      	beq.n	800d44c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d446:	f04f 33ff 	mov.w	r3, #4294967295
 800d44a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d44c:	6879      	ldr	r1, [r7, #4]
 800d44e:	68b8      	ldr	r0, [r7, #8]
 800d450:	f000 fa5a 	bl	800d908 <prvAddCurrentTaskToDelayedList>
	}
 800d454:	bf00      	nop
 800d456:	3718      	adds	r7, #24
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	20002730 	.word	0x20002730

0800d460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10b      	bne.n	800d48e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	60fb      	str	r3, [r7, #12]
}
 800d488:	bf00      	nop
 800d48a:	bf00      	nop
 800d48c:	e7fd      	b.n	800d48a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	3318      	adds	r3, #24
 800d492:	4618      	mov	r0, r3
 800d494:	f7fe fe2e 	bl	800c0f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d498:	4b1d      	ldr	r3, [pc, #116]	@ (800d510 <xTaskRemoveFromEventList+0xb0>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d11d      	bne.n	800d4dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fe fe25 	bl	800c0f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ae:	4b19      	ldr	r3, [pc, #100]	@ (800d514 <xTaskRemoveFromEventList+0xb4>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d903      	bls.n	800d4be <xTaskRemoveFromEventList+0x5e>
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ba:	4a16      	ldr	r2, [pc, #88]	@ (800d514 <xTaskRemoveFromEventList+0xb4>)
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	4413      	add	r3, r2
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	4a13      	ldr	r2, [pc, #76]	@ (800d518 <xTaskRemoveFromEventList+0xb8>)
 800d4cc:	441a      	add	r2, r3
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	3304      	adds	r3, #4
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	4610      	mov	r0, r2
 800d4d6:	f7fe fdb0 	bl	800c03a <vListInsertEnd>
 800d4da:	e005      	b.n	800d4e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	3318      	adds	r3, #24
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	480e      	ldr	r0, [pc, #56]	@ (800d51c <xTaskRemoveFromEventList+0xbc>)
 800d4e4:	f7fe fda9 	bl	800c03a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800d520 <xTaskRemoveFromEventList+0xc0>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d905      	bls.n	800d502 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800d524 <xTaskRemoveFromEventList+0xc4>)
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	601a      	str	r2, [r3, #0]
 800d500:	e001      	b.n	800d506 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d502:	2300      	movs	r3, #0
 800d504:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d506:	697b      	ldr	r3, [r7, #20]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3718      	adds	r7, #24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	20002c2c 	.word	0x20002c2c
 800d514:	20002c0c 	.word	0x20002c0c
 800d518:	20002734 	.word	0x20002734
 800d51c:	20002bc4 	.word	0x20002bc4
 800d520:	20002730 	.word	0x20002730
 800d524:	20002c18 	.word	0x20002c18

0800d528 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d530:	4b06      	ldr	r3, [pc, #24]	@ (800d54c <vTaskInternalSetTimeOutState+0x24>)
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d538:	4b05      	ldr	r3, [pc, #20]	@ (800d550 <vTaskInternalSetTimeOutState+0x28>)
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	605a      	str	r2, [r3, #4]
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr
 800d54c:	20002c1c 	.word	0x20002c1c
 800d550:	20002c08 	.word	0x20002c08

0800d554 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b088      	sub	sp, #32
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10b      	bne.n	800d57c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	613b      	str	r3, [r7, #16]
}
 800d576:	bf00      	nop
 800d578:	bf00      	nop
 800d57a:	e7fd      	b.n	800d578 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10b      	bne.n	800d59a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	60fb      	str	r3, [r7, #12]
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop
 800d598:	e7fd      	b.n	800d596 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d59a:	f000 fe95 	bl	800e2c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d59e:	4b1d      	ldr	r3, [pc, #116]	@ (800d614 <xTaskCheckForTimeOut+0xc0>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	69ba      	ldr	r2, [r7, #24]
 800d5aa:	1ad3      	subs	r3, r2, r3
 800d5ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b6:	d102      	bne.n	800d5be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	61fb      	str	r3, [r7, #28]
 800d5bc:	e023      	b.n	800d606 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	4b15      	ldr	r3, [pc, #84]	@ (800d618 <xTaskCheckForTimeOut+0xc4>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d007      	beq.n	800d5da <xTaskCheckForTimeOut+0x86>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	69ba      	ldr	r2, [r7, #24]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d302      	bcc.n	800d5da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	61fb      	str	r3, [r7, #28]
 800d5d8:	e015      	b.n	800d606 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	697a      	ldr	r2, [r7, #20]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d20b      	bcs.n	800d5fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	1ad2      	subs	r2, r2, r3
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f7ff ff99 	bl	800d528 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	61fb      	str	r3, [r7, #28]
 800d5fa:	e004      	b.n	800d606 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	2200      	movs	r2, #0
 800d600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d602:	2301      	movs	r3, #1
 800d604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d606:	f000 fe91 	bl	800e32c <vPortExitCritical>

	return xReturn;
 800d60a:	69fb      	ldr	r3, [r7, #28]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3720      	adds	r7, #32
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	20002c08 	.word	0x20002c08
 800d618:	20002c1c 	.word	0x20002c1c

0800d61c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d61c:	b480      	push	{r7}
 800d61e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d620:	4b03      	ldr	r3, [pc, #12]	@ (800d630 <vTaskMissedYield+0x14>)
 800d622:	2201      	movs	r2, #1
 800d624:	601a      	str	r2, [r3, #0]
}
 800d626:	bf00      	nop
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr
 800d630:	20002c18 	.word	0x20002c18

0800d634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d63c:	f000 f852 	bl	800d6e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d640:	4b06      	ldr	r3, [pc, #24]	@ (800d65c <prvIdleTask+0x28>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b01      	cmp	r3, #1
 800d646:	d9f9      	bls.n	800d63c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d648:	4b05      	ldr	r3, [pc, #20]	@ (800d660 <prvIdleTask+0x2c>)
 800d64a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d658:	e7f0      	b.n	800d63c <prvIdleTask+0x8>
 800d65a:	bf00      	nop
 800d65c:	20002734 	.word	0x20002734
 800d660:	e000ed04 	.word	0xe000ed04

0800d664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d66a:	2300      	movs	r3, #0
 800d66c:	607b      	str	r3, [r7, #4]
 800d66e:	e00c      	b.n	800d68a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	4613      	mov	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4413      	add	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4a12      	ldr	r2, [pc, #72]	@ (800d6c4 <prvInitialiseTaskLists+0x60>)
 800d67c:	4413      	add	r3, r2
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fe fcae 	bl	800bfe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	3301      	adds	r3, #1
 800d688:	607b      	str	r3, [r7, #4]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2b37      	cmp	r3, #55	@ 0x37
 800d68e:	d9ef      	bls.n	800d670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d690:	480d      	ldr	r0, [pc, #52]	@ (800d6c8 <prvInitialiseTaskLists+0x64>)
 800d692:	f7fe fca5 	bl	800bfe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d696:	480d      	ldr	r0, [pc, #52]	@ (800d6cc <prvInitialiseTaskLists+0x68>)
 800d698:	f7fe fca2 	bl	800bfe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d69c:	480c      	ldr	r0, [pc, #48]	@ (800d6d0 <prvInitialiseTaskLists+0x6c>)
 800d69e:	f7fe fc9f 	bl	800bfe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d6a2:	480c      	ldr	r0, [pc, #48]	@ (800d6d4 <prvInitialiseTaskLists+0x70>)
 800d6a4:	f7fe fc9c 	bl	800bfe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6a8:	480b      	ldr	r0, [pc, #44]	@ (800d6d8 <prvInitialiseTaskLists+0x74>)
 800d6aa:	f7fe fc99 	bl	800bfe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d6dc <prvInitialiseTaskLists+0x78>)
 800d6b0:	4a05      	ldr	r2, [pc, #20]	@ (800d6c8 <prvInitialiseTaskLists+0x64>)
 800d6b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e0 <prvInitialiseTaskLists+0x7c>)
 800d6b6:	4a05      	ldr	r2, [pc, #20]	@ (800d6cc <prvInitialiseTaskLists+0x68>)
 800d6b8:	601a      	str	r2, [r3, #0]
}
 800d6ba:	bf00      	nop
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	20002734 	.word	0x20002734
 800d6c8:	20002b94 	.word	0x20002b94
 800d6cc:	20002ba8 	.word	0x20002ba8
 800d6d0:	20002bc4 	.word	0x20002bc4
 800d6d4:	20002bd8 	.word	0x20002bd8
 800d6d8:	20002bf0 	.word	0x20002bf0
 800d6dc:	20002bbc 	.word	0x20002bbc
 800d6e0:	20002bc0 	.word	0x20002bc0

0800d6e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6ea:	e019      	b.n	800d720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6ec:	f000 fdec 	bl	800e2c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6f0:	4b10      	ldr	r3, [pc, #64]	@ (800d734 <prvCheckTasksWaitingTermination+0x50>)
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3304      	adds	r3, #4
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fe fcf9 	bl	800c0f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d702:	4b0d      	ldr	r3, [pc, #52]	@ (800d738 <prvCheckTasksWaitingTermination+0x54>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3b01      	subs	r3, #1
 800d708:	4a0b      	ldr	r2, [pc, #44]	@ (800d738 <prvCheckTasksWaitingTermination+0x54>)
 800d70a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d70c:	4b0b      	ldr	r3, [pc, #44]	@ (800d73c <prvCheckTasksWaitingTermination+0x58>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3b01      	subs	r3, #1
 800d712:	4a0a      	ldr	r2, [pc, #40]	@ (800d73c <prvCheckTasksWaitingTermination+0x58>)
 800d714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d716:	f000 fe09 	bl	800e32c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f810 	bl	800d740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d720:	4b06      	ldr	r3, [pc, #24]	@ (800d73c <prvCheckTasksWaitingTermination+0x58>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e1      	bne.n	800d6ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d728:	bf00      	nop
 800d72a:	bf00      	nop
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	20002bd8 	.word	0x20002bd8
 800d738:	20002c04 	.word	0x20002c04
 800d73c:	20002bec 	.word	0x20002bec

0800d740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	3354      	adds	r3, #84	@ 0x54
 800d74c:	4618      	mov	r0, r3
 800d74e:	f002 fb6d 	bl	800fe2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d108      	bne.n	800d76e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d760:	4618      	mov	r0, r3
 800d762:	f000 ffa1 	bl	800e6a8 <vPortFree>
				vPortFree( pxTCB );
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 ff9e 	bl	800e6a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d76c:	e019      	b.n	800d7a2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d774:	2b01      	cmp	r3, #1
 800d776:	d103      	bne.n	800d780 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f000 ff95 	bl	800e6a8 <vPortFree>
	}
 800d77e:	e010      	b.n	800d7a2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d786:	2b02      	cmp	r3, #2
 800d788:	d00b      	beq.n	800d7a2 <prvDeleteTCB+0x62>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	60fb      	str	r3, [r7, #12]
}
 800d79c:	bf00      	nop
 800d79e:	bf00      	nop
 800d7a0:	e7fd      	b.n	800d79e <prvDeleteTCB+0x5e>
	}
 800d7a2:	bf00      	nop
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
	...

0800d7ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800d7e4 <prvResetNextTaskUnblockTime+0x38>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d104      	bne.n	800d7c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d7e8 <prvResetNextTaskUnblockTime+0x3c>)
 800d7be:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7c4:	e008      	b.n	800d7d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7c6:	4b07      	ldr	r3, [pc, #28]	@ (800d7e4 <prvResetNextTaskUnblockTime+0x38>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	4a04      	ldr	r2, [pc, #16]	@ (800d7e8 <prvResetNextTaskUnblockTime+0x3c>)
 800d7d6:	6013      	str	r3, [r2, #0]
}
 800d7d8:	bf00      	nop
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr
 800d7e4:	20002bbc 	.word	0x20002bbc
 800d7e8:	20002c24 	.word	0x20002c24

0800d7ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d820 <xTaskGetSchedulerState+0x34>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d102      	bne.n	800d800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	607b      	str	r3, [r7, #4]
 800d7fe:	e008      	b.n	800d812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d800:	4b08      	ldr	r3, [pc, #32]	@ (800d824 <xTaskGetSchedulerState+0x38>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d102      	bne.n	800d80e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d808:	2302      	movs	r3, #2
 800d80a:	607b      	str	r3, [r7, #4]
 800d80c:	e001      	b.n	800d812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d80e:	2300      	movs	r3, #0
 800d810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d812:	687b      	ldr	r3, [r7, #4]
	}
 800d814:	4618      	mov	r0, r3
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr
 800d820:	20002c10 	.word	0x20002c10
 800d824:	20002c2c 	.word	0x20002c2c

0800d828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b086      	sub	sp, #24
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d834:	2300      	movs	r3, #0
 800d836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d058      	beq.n	800d8f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d83e:	4b2f      	ldr	r3, [pc, #188]	@ (800d8fc <xTaskPriorityDisinherit+0xd4>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	693a      	ldr	r2, [r7, #16]
 800d844:	429a      	cmp	r2, r3
 800d846:	d00b      	beq.n	800d860 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	60fb      	str	r3, [r7, #12]
}
 800d85a:	bf00      	nop
 800d85c:	bf00      	nop
 800d85e:	e7fd      	b.n	800d85c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10b      	bne.n	800d880 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d86c:	f383 8811 	msr	BASEPRI, r3
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	60bb      	str	r3, [r7, #8]
}
 800d87a:	bf00      	nop
 800d87c:	bf00      	nop
 800d87e:	e7fd      	b.n	800d87c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d884:	1e5a      	subs	r2, r3, #1
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d892:	429a      	cmp	r2, r3
 800d894:	d02c      	beq.n	800d8f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d128      	bne.n	800d8f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fe fc26 	bl	800c0f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800d900 <xTaskPriorityDisinherit+0xd8>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d903      	bls.n	800d8d0 <xTaskPriorityDisinherit+0xa8>
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8cc:	4a0c      	ldr	r2, [pc, #48]	@ (800d900 <xTaskPriorityDisinherit+0xd8>)
 800d8ce:	6013      	str	r3, [r2, #0]
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	4413      	add	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4a09      	ldr	r2, [pc, #36]	@ (800d904 <xTaskPriorityDisinherit+0xdc>)
 800d8de:	441a      	add	r2, r3
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	3304      	adds	r3, #4
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	f7fe fba7 	bl	800c03a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8f0:	697b      	ldr	r3, [r7, #20]
	}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3718      	adds	r7, #24
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20002730 	.word	0x20002730
 800d900:	20002c0c 	.word	0x20002c0c
 800d904:	20002734 	.word	0x20002734

0800d908 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d912:	4b21      	ldr	r3, [pc, #132]	@ (800d998 <prvAddCurrentTaskToDelayedList+0x90>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d918:	4b20      	ldr	r3, [pc, #128]	@ (800d99c <prvAddCurrentTaskToDelayedList+0x94>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	3304      	adds	r3, #4
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fe fbe8 	bl	800c0f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d92a:	d10a      	bne.n	800d942 <prvAddCurrentTaskToDelayedList+0x3a>
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d007      	beq.n	800d942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d932:	4b1a      	ldr	r3, [pc, #104]	@ (800d99c <prvAddCurrentTaskToDelayedList+0x94>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	3304      	adds	r3, #4
 800d938:	4619      	mov	r1, r3
 800d93a:	4819      	ldr	r0, [pc, #100]	@ (800d9a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d93c:	f7fe fb7d 	bl	800c03a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d940:	e026      	b.n	800d990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4413      	add	r3, r2
 800d948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d94a:	4b14      	ldr	r3, [pc, #80]	@ (800d99c <prvAddCurrentTaskToDelayedList+0x94>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	429a      	cmp	r2, r3
 800d958:	d209      	bcs.n	800d96e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d95a:	4b12      	ldr	r3, [pc, #72]	@ (800d9a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	4b0f      	ldr	r3, [pc, #60]	@ (800d99c <prvAddCurrentTaskToDelayedList+0x94>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	3304      	adds	r3, #4
 800d964:	4619      	mov	r1, r3
 800d966:	4610      	mov	r0, r2
 800d968:	f7fe fb8b 	bl	800c082 <vListInsert>
}
 800d96c:	e010      	b.n	800d990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d96e:	4b0e      	ldr	r3, [pc, #56]	@ (800d9a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	4b0a      	ldr	r3, [pc, #40]	@ (800d99c <prvAddCurrentTaskToDelayedList+0x94>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3304      	adds	r3, #4
 800d978:	4619      	mov	r1, r3
 800d97a:	4610      	mov	r0, r2
 800d97c:	f7fe fb81 	bl	800c082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d980:	4b0a      	ldr	r3, [pc, #40]	@ (800d9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	429a      	cmp	r2, r3
 800d988:	d202      	bcs.n	800d990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d98a:	4a08      	ldr	r2, [pc, #32]	@ (800d9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	6013      	str	r3, [r2, #0]
}
 800d990:	bf00      	nop
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	20002c08 	.word	0x20002c08
 800d99c:	20002730 	.word	0x20002730
 800d9a0:	20002bf0 	.word	0x20002bf0
 800d9a4:	20002bc0 	.word	0x20002bc0
 800d9a8:	20002bbc 	.word	0x20002bbc
 800d9ac:	20002c24 	.word	0x20002c24

0800d9b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b08a      	sub	sp, #40	@ 0x28
 800d9b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d9ba:	f000 fb13 	bl	800dfe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d9be:	4b1d      	ldr	r3, [pc, #116]	@ (800da34 <xTimerCreateTimerTask+0x84>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d021      	beq.n	800da0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d9ce:	1d3a      	adds	r2, r7, #4
 800d9d0:	f107 0108 	add.w	r1, r7, #8
 800d9d4:	f107 030c 	add.w	r3, r7, #12
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fe fae7 	bl	800bfac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d9de:	6879      	ldr	r1, [r7, #4]
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	9202      	str	r2, [sp, #8]
 800d9e6:	9301      	str	r3, [sp, #4]
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	460a      	mov	r2, r1
 800d9f0:	4911      	ldr	r1, [pc, #68]	@ (800da38 <xTimerCreateTimerTask+0x88>)
 800d9f2:	4812      	ldr	r0, [pc, #72]	@ (800da3c <xTimerCreateTimerTask+0x8c>)
 800d9f4:	f7ff f8a2 	bl	800cb3c <xTaskCreateStatic>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4a11      	ldr	r2, [pc, #68]	@ (800da40 <xTimerCreateTimerTask+0x90>)
 800d9fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d9fe:	4b10      	ldr	r3, [pc, #64]	@ (800da40 <xTimerCreateTimerTask+0x90>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800da06:	2301      	movs	r3, #1
 800da08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d10b      	bne.n	800da28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800da10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da14:	f383 8811 	msr	BASEPRI, r3
 800da18:	f3bf 8f6f 	isb	sy
 800da1c:	f3bf 8f4f 	dsb	sy
 800da20:	613b      	str	r3, [r7, #16]
}
 800da22:	bf00      	nop
 800da24:	bf00      	nop
 800da26:	e7fd      	b.n	800da24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800da28:	697b      	ldr	r3, [r7, #20]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	20002c60 	.word	0x20002c60
 800da38:	080122c4 	.word	0x080122c4
 800da3c:	0800db7d 	.word	0x0800db7d
 800da40:	20002c64 	.word	0x20002c64

0800da44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b08a      	sub	sp, #40	@ 0x28
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	607a      	str	r2, [r7, #4]
 800da50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da52:	2300      	movs	r3, #0
 800da54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10b      	bne.n	800da74 <xTimerGenericCommand+0x30>
	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	623b      	str	r3, [r7, #32]
}
 800da6e:	bf00      	nop
 800da70:	bf00      	nop
 800da72:	e7fd      	b.n	800da70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da74:	4b19      	ldr	r3, [pc, #100]	@ (800dadc <xTimerGenericCommand+0x98>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d02a      	beq.n	800dad2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2b05      	cmp	r3, #5
 800da8c:	dc18      	bgt.n	800dac0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da8e:	f7ff fead 	bl	800d7ec <xTaskGetSchedulerState>
 800da92:	4603      	mov	r3, r0
 800da94:	2b02      	cmp	r3, #2
 800da96:	d109      	bne.n	800daac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da98:	4b10      	ldr	r3, [pc, #64]	@ (800dadc <xTimerGenericCommand+0x98>)
 800da9a:	6818      	ldr	r0, [r3, #0]
 800da9c:	f107 0110 	add.w	r1, r7, #16
 800daa0:	2300      	movs	r3, #0
 800daa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daa4:	f7fe fc5a 	bl	800c35c <xQueueGenericSend>
 800daa8:	6278      	str	r0, [r7, #36]	@ 0x24
 800daaa:	e012      	b.n	800dad2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800daac:	4b0b      	ldr	r3, [pc, #44]	@ (800dadc <xTimerGenericCommand+0x98>)
 800daae:	6818      	ldr	r0, [r3, #0]
 800dab0:	f107 0110 	add.w	r1, r7, #16
 800dab4:	2300      	movs	r3, #0
 800dab6:	2200      	movs	r2, #0
 800dab8:	f7fe fc50 	bl	800c35c <xQueueGenericSend>
 800dabc:	6278      	str	r0, [r7, #36]	@ 0x24
 800dabe:	e008      	b.n	800dad2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dac0:	4b06      	ldr	r3, [pc, #24]	@ (800dadc <xTimerGenericCommand+0x98>)
 800dac2:	6818      	ldr	r0, [r3, #0]
 800dac4:	f107 0110 	add.w	r1, r7, #16
 800dac8:	2300      	movs	r3, #0
 800daca:	683a      	ldr	r2, [r7, #0]
 800dacc:	f7fe fd48 	bl	800c560 <xQueueGenericSendFromISR>
 800dad0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3728      	adds	r7, #40	@ 0x28
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	20002c60 	.word	0x20002c60

0800dae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af02      	add	r7, sp, #8
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daea:	4b23      	ldr	r3, [pc, #140]	@ (800db78 <prvProcessExpiredTimer+0x98>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	3304      	adds	r3, #4
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fe fafb 	bl	800c0f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db04:	f003 0304 	and.w	r3, r3, #4
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d023      	beq.n	800db54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	699a      	ldr	r2, [r3, #24]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	18d1      	adds	r1, r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	683a      	ldr	r2, [r7, #0]
 800db18:	6978      	ldr	r0, [r7, #20]
 800db1a:	f000 f8d5 	bl	800dcc8 <prvInsertTimerInActiveList>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d020      	beq.n	800db66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db24:	2300      	movs	r3, #0
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	2300      	movs	r3, #0
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	2100      	movs	r1, #0
 800db2e:	6978      	ldr	r0, [r7, #20]
 800db30:	f7ff ff88 	bl	800da44 <xTimerGenericCommand>
 800db34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d114      	bne.n	800db66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800db3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db40:	f383 8811 	msr	BASEPRI, r3
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	60fb      	str	r3, [r7, #12]
}
 800db4e:	bf00      	nop
 800db50:	bf00      	nop
 800db52:	e7fd      	b.n	800db50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db5a:	f023 0301 	bic.w	r3, r3, #1
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	6a1b      	ldr	r3, [r3, #32]
 800db6a:	6978      	ldr	r0, [r7, #20]
 800db6c:	4798      	blx	r3
}
 800db6e:	bf00      	nop
 800db70:	3718      	adds	r7, #24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	20002c58 	.word	0x20002c58

0800db7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db84:	f107 0308 	add.w	r3, r7, #8
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 f859 	bl	800dc40 <prvGetNextExpireTime>
 800db8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	4619      	mov	r1, r3
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f000 f805 	bl	800dba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db9a:	f000 f8d7 	bl	800dd4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db9e:	bf00      	nop
 800dba0:	e7f0      	b.n	800db84 <prvTimerTask+0x8>
	...

0800dba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dbae:	f7ff fa29 	bl	800d004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbb2:	f107 0308 	add.w	r3, r7, #8
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f000 f866 	bl	800dc88 <prvSampleTimeNow>
 800dbbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d130      	bne.n	800dc26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10a      	bne.n	800dbe0 <prvProcessTimerOrBlockTask+0x3c>
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d806      	bhi.n	800dbe0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dbd2:	f7ff fa25 	bl	800d020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dbd6:	68f9      	ldr	r1, [r7, #12]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f7ff ff81 	bl	800dae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dbde:	e024      	b.n	800dc2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d008      	beq.n	800dbf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dbe6:	4b13      	ldr	r3, [pc, #76]	@ (800dc34 <prvProcessTimerOrBlockTask+0x90>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d101      	bne.n	800dbf4 <prvProcessTimerOrBlockTask+0x50>
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e000      	b.n	800dbf6 <prvProcessTimerOrBlockTask+0x52>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dbf8:	4b0f      	ldr	r3, [pc, #60]	@ (800dc38 <prvProcessTimerOrBlockTask+0x94>)
 800dbfa:	6818      	ldr	r0, [r3, #0]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	4619      	mov	r1, r3
 800dc06:	f7fe ff65 	bl	800cad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc0a:	f7ff fa09 	bl	800d020 <xTaskResumeAll>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10a      	bne.n	800dc2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dc14:	4b09      	ldr	r3, [pc, #36]	@ (800dc3c <prvProcessTimerOrBlockTask+0x98>)
 800dc16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc1a:	601a      	str	r2, [r3, #0]
 800dc1c:	f3bf 8f4f 	dsb	sy
 800dc20:	f3bf 8f6f 	isb	sy
}
 800dc24:	e001      	b.n	800dc2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dc26:	f7ff f9fb 	bl	800d020 <xTaskResumeAll>
}
 800dc2a:	bf00      	nop
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20002c5c 	.word	0x20002c5c
 800dc38:	20002c60 	.word	0x20002c60
 800dc3c:	e000ed04 	.word	0xe000ed04

0800dc40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc48:	4b0e      	ldr	r3, [pc, #56]	@ (800dc84 <prvGetNextExpireTime+0x44>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d101      	bne.n	800dc56 <prvGetNextExpireTime+0x16>
 800dc52:	2201      	movs	r2, #1
 800dc54:	e000      	b.n	800dc58 <prvGetNextExpireTime+0x18>
 800dc56:	2200      	movs	r2, #0
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d105      	bne.n	800dc70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc64:	4b07      	ldr	r3, [pc, #28]	@ (800dc84 <prvGetNextExpireTime+0x44>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	60fb      	str	r3, [r7, #12]
 800dc6e:	e001      	b.n	800dc74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc70:	2300      	movs	r3, #0
 800dc72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc74:	68fb      	ldr	r3, [r7, #12]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3714      	adds	r7, #20
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	20002c58 	.word	0x20002c58

0800dc88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc90:	f7ff fa64 	bl	800d15c <xTaskGetTickCount>
 800dc94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc96:	4b0b      	ldr	r3, [pc, #44]	@ (800dcc4 <prvSampleTimeNow+0x3c>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68fa      	ldr	r2, [r7, #12]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d205      	bcs.n	800dcac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dca0:	f000 f93a 	bl	800df18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2201      	movs	r2, #1
 800dca8:	601a      	str	r2, [r3, #0]
 800dcaa:	e002      	b.n	800dcb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dcb2:	4a04      	ldr	r2, [pc, #16]	@ (800dcc4 <prvSampleTimeNow+0x3c>)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	20002c68 	.word	0x20002c68

0800dcc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d812      	bhi.n	800dd14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	1ad2      	subs	r2, r2, r3
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d302      	bcc.n	800dd02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	617b      	str	r3, [r7, #20]
 800dd00:	e01b      	b.n	800dd3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd02:	4b10      	ldr	r3, [pc, #64]	@ (800dd44 <prvInsertTimerInActiveList+0x7c>)
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	3304      	adds	r3, #4
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	4610      	mov	r0, r2
 800dd0e:	f7fe f9b8 	bl	800c082 <vListInsert>
 800dd12:	e012      	b.n	800dd3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d206      	bcs.n	800dd2a <prvInsertTimerInActiveList+0x62>
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d302      	bcc.n	800dd2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dd24:	2301      	movs	r3, #1
 800dd26:	617b      	str	r3, [r7, #20]
 800dd28:	e007      	b.n	800dd3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd2a:	4b07      	ldr	r3, [pc, #28]	@ (800dd48 <prvInsertTimerInActiveList+0x80>)
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	3304      	adds	r3, #4
 800dd32:	4619      	mov	r1, r3
 800dd34:	4610      	mov	r0, r2
 800dd36:	f7fe f9a4 	bl	800c082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd3a:	697b      	ldr	r3, [r7, #20]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3718      	adds	r7, #24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	20002c5c 	.word	0x20002c5c
 800dd48:	20002c58 	.word	0x20002c58

0800dd4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08e      	sub	sp, #56	@ 0x38
 800dd50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd52:	e0ce      	b.n	800def2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	da19      	bge.n	800dd8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd5a:	1d3b      	adds	r3, r7, #4
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d10b      	bne.n	800dd7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd6a:	f383 8811 	msr	BASEPRI, r3
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f3bf 8f4f 	dsb	sy
 800dd76:	61fb      	str	r3, [r7, #28]
}
 800dd78:	bf00      	nop
 800dd7a:	bf00      	nop
 800dd7c:	e7fd      	b.n	800dd7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd84:	6850      	ldr	r0, [r2, #4]
 800dd86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd88:	6892      	ldr	r2, [r2, #8]
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f2c0 80ae 	blt.w	800def2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd9c:	695b      	ldr	r3, [r3, #20]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d004      	beq.n	800ddac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda4:	3304      	adds	r3, #4
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fe f9a4 	bl	800c0f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ddac:	463b      	mov	r3, r7
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff ff6a 	bl	800dc88 <prvSampleTimeNow>
 800ddb4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b09      	cmp	r3, #9
 800ddba:	f200 8097 	bhi.w	800deec <prvProcessReceivedCommands+0x1a0>
 800ddbe:	a201      	add	r2, pc, #4	@ (adr r2, 800ddc4 <prvProcessReceivedCommands+0x78>)
 800ddc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc4:	0800dded 	.word	0x0800dded
 800ddc8:	0800dded 	.word	0x0800dded
 800ddcc:	0800dded 	.word	0x0800dded
 800ddd0:	0800de63 	.word	0x0800de63
 800ddd4:	0800de77 	.word	0x0800de77
 800ddd8:	0800dec3 	.word	0x0800dec3
 800dddc:	0800dded 	.word	0x0800dded
 800dde0:	0800dded 	.word	0x0800dded
 800dde4:	0800de63 	.word	0x0800de63
 800dde8:	0800de77 	.word	0x0800de77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ddec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddf2:	f043 0301 	orr.w	r3, r3, #1
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de02:	699b      	ldr	r3, [r3, #24]
 800de04:	18d1      	adds	r1, r2, r3
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de0c:	f7ff ff5c 	bl	800dcc8 <prvInsertTimerInActiveList>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d06c      	beq.n	800def0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de24:	f003 0304 	and.w	r3, r3, #4
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d061      	beq.n	800def0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de30:	699b      	ldr	r3, [r3, #24]
 800de32:	441a      	add	r2, r3
 800de34:	2300      	movs	r3, #0
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	2300      	movs	r3, #0
 800de3a:	2100      	movs	r1, #0
 800de3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de3e:	f7ff fe01 	bl	800da44 <xTimerGenericCommand>
 800de42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de44:	6a3b      	ldr	r3, [r7, #32]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d152      	bne.n	800def0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800de4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4e:	f383 8811 	msr	BASEPRI, r3
 800de52:	f3bf 8f6f 	isb	sy
 800de56:	f3bf 8f4f 	dsb	sy
 800de5a:	61bb      	str	r3, [r7, #24]
}
 800de5c:	bf00      	nop
 800de5e:	bf00      	nop
 800de60:	e7fd      	b.n	800de5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de68:	f023 0301 	bic.w	r3, r3, #1
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800de74:	e03d      	b.n	800def2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de7c:	f043 0301 	orr.w	r3, r3, #1
 800de80:	b2da      	uxtb	r2, r3
 800de82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de90:	699b      	ldr	r3, [r3, #24]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10b      	bne.n	800deae <prvProcessReceivedCommands+0x162>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	617b      	str	r3, [r7, #20]
}
 800dea8:	bf00      	nop
 800deaa:	bf00      	nop
 800deac:	e7fd      	b.n	800deaa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800deae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb0:	699a      	ldr	r2, [r3, #24]
 800deb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb4:	18d1      	adds	r1, r2, r3
 800deb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800debc:	f7ff ff04 	bl	800dcc8 <prvInsertTimerInActiveList>
					break;
 800dec0:	e017      	b.n	800def2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dec8:	f003 0302 	and.w	r3, r3, #2
 800decc:	2b00      	cmp	r3, #0
 800dece:	d103      	bne.n	800ded8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ded0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ded2:	f000 fbe9 	bl	800e6a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ded6:	e00c      	b.n	800def2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ded8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dede:	f023 0301 	bic.w	r3, r3, #1
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800deea:	e002      	b.n	800def2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800deec:	bf00      	nop
 800deee:	e000      	b.n	800def2 <prvProcessReceivedCommands+0x1a6>
					break;
 800def0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800def2:	4b08      	ldr	r3, [pc, #32]	@ (800df14 <prvProcessReceivedCommands+0x1c8>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	1d39      	adds	r1, r7, #4
 800def8:	2200      	movs	r2, #0
 800defa:	4618      	mov	r0, r3
 800defc:	f7fe fbce 	bl	800c69c <xQueueReceive>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	f47f af26 	bne.w	800dd54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	3730      	adds	r7, #48	@ 0x30
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	20002c60 	.word	0x20002c60

0800df18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b088      	sub	sp, #32
 800df1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df1e:	e049      	b.n	800dfb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df20:	4b2e      	ldr	r3, [pc, #184]	@ (800dfdc <prvSwitchTimerLists+0xc4>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df2a:	4b2c      	ldr	r3, [pc, #176]	@ (800dfdc <prvSwitchTimerLists+0xc4>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3304      	adds	r3, #4
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fe f8db 	bl	800c0f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	d02f      	beq.n	800dfb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	699b      	ldr	r3, [r3, #24]
 800df58:	693a      	ldr	r2, [r7, #16]
 800df5a:	4413      	add	r3, r2
 800df5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	429a      	cmp	r2, r3
 800df64:	d90e      	bls.n	800df84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df72:	4b1a      	ldr	r3, [pc, #104]	@ (800dfdc <prvSwitchTimerLists+0xc4>)
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	3304      	adds	r3, #4
 800df7a:	4619      	mov	r1, r3
 800df7c:	4610      	mov	r0, r2
 800df7e:	f7fe f880 	bl	800c082 <vListInsert>
 800df82:	e017      	b.n	800dfb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df84:	2300      	movs	r3, #0
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	2300      	movs	r3, #0
 800df8a:	693a      	ldr	r2, [r7, #16]
 800df8c:	2100      	movs	r1, #0
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f7ff fd58 	bl	800da44 <xTimerGenericCommand>
 800df94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10b      	bne.n	800dfb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800df9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa0:	f383 8811 	msr	BASEPRI, r3
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	603b      	str	r3, [r7, #0]
}
 800dfae:	bf00      	nop
 800dfb0:	bf00      	nop
 800dfb2:	e7fd      	b.n	800dfb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfb4:	4b09      	ldr	r3, [pc, #36]	@ (800dfdc <prvSwitchTimerLists+0xc4>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1b0      	bne.n	800df20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dfbe:	4b07      	ldr	r3, [pc, #28]	@ (800dfdc <prvSwitchTimerLists+0xc4>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dfc4:	4b06      	ldr	r3, [pc, #24]	@ (800dfe0 <prvSwitchTimerLists+0xc8>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a04      	ldr	r2, [pc, #16]	@ (800dfdc <prvSwitchTimerLists+0xc4>)
 800dfca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dfcc:	4a04      	ldr	r2, [pc, #16]	@ (800dfe0 <prvSwitchTimerLists+0xc8>)
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	6013      	str	r3, [r2, #0]
}
 800dfd2:	bf00      	nop
 800dfd4:	3718      	adds	r7, #24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	20002c58 	.word	0x20002c58
 800dfe0:	20002c5c 	.word	0x20002c5c

0800dfe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dfea:	f000 f96d 	bl	800e2c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dfee:	4b15      	ldr	r3, [pc, #84]	@ (800e044 <prvCheckForValidListAndQueue+0x60>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d120      	bne.n	800e038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dff6:	4814      	ldr	r0, [pc, #80]	@ (800e048 <prvCheckForValidListAndQueue+0x64>)
 800dff8:	f7fd fff2 	bl	800bfe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dffc:	4813      	ldr	r0, [pc, #76]	@ (800e04c <prvCheckForValidListAndQueue+0x68>)
 800dffe:	f7fd ffef 	bl	800bfe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e002:	4b13      	ldr	r3, [pc, #76]	@ (800e050 <prvCheckForValidListAndQueue+0x6c>)
 800e004:	4a10      	ldr	r2, [pc, #64]	@ (800e048 <prvCheckForValidListAndQueue+0x64>)
 800e006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e008:	4b12      	ldr	r3, [pc, #72]	@ (800e054 <prvCheckForValidListAndQueue+0x70>)
 800e00a:	4a10      	ldr	r2, [pc, #64]	@ (800e04c <prvCheckForValidListAndQueue+0x68>)
 800e00c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e00e:	2300      	movs	r3, #0
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	4b11      	ldr	r3, [pc, #68]	@ (800e058 <prvCheckForValidListAndQueue+0x74>)
 800e014:	4a11      	ldr	r2, [pc, #68]	@ (800e05c <prvCheckForValidListAndQueue+0x78>)
 800e016:	2110      	movs	r1, #16
 800e018:	200a      	movs	r0, #10
 800e01a:	f7fe f8ff 	bl	800c21c <xQueueGenericCreateStatic>
 800e01e:	4603      	mov	r3, r0
 800e020:	4a08      	ldr	r2, [pc, #32]	@ (800e044 <prvCheckForValidListAndQueue+0x60>)
 800e022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e024:	4b07      	ldr	r3, [pc, #28]	@ (800e044 <prvCheckForValidListAndQueue+0x60>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d005      	beq.n	800e038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e02c:	4b05      	ldr	r3, [pc, #20]	@ (800e044 <prvCheckForValidListAndQueue+0x60>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	490b      	ldr	r1, [pc, #44]	@ (800e060 <prvCheckForValidListAndQueue+0x7c>)
 800e032:	4618      	mov	r0, r3
 800e034:	f7fe fd24 	bl	800ca80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e038:	f000 f978 	bl	800e32c <vPortExitCritical>
}
 800e03c:	bf00      	nop
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	20002c60 	.word	0x20002c60
 800e048:	20002c30 	.word	0x20002c30
 800e04c:	20002c44 	.word	0x20002c44
 800e050:	20002c58 	.word	0x20002c58
 800e054:	20002c5c 	.word	0x20002c5c
 800e058:	20002d0c 	.word	0x20002d0c
 800e05c:	20002c6c 	.word	0x20002c6c
 800e060:	080122cc 	.word	0x080122cc

0800e064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	3b04      	subs	r3, #4
 800e074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e07c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3b04      	subs	r3, #4
 800e082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	f023 0201 	bic.w	r2, r3, #1
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	3b04      	subs	r3, #4
 800e092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e094:	4a0c      	ldr	r2, [pc, #48]	@ (800e0c8 <pxPortInitialiseStack+0x64>)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	3b14      	subs	r3, #20
 800e09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	3b04      	subs	r3, #4
 800e0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f06f 0202 	mvn.w	r2, #2
 800e0b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	3b20      	subs	r3, #32
 800e0b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3714      	adds	r7, #20
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr
 800e0c8:	0800e0cd 	.word	0x0800e0cd

0800e0cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e0d6:	4b13      	ldr	r3, [pc, #76]	@ (800e124 <prvTaskExitError+0x58>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0de:	d00b      	beq.n	800e0f8 <prvTaskExitError+0x2c>
	__asm volatile
 800e0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e4:	f383 8811 	msr	BASEPRI, r3
 800e0e8:	f3bf 8f6f 	isb	sy
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	60fb      	str	r3, [r7, #12]
}
 800e0f2:	bf00      	nop
 800e0f4:	bf00      	nop
 800e0f6:	e7fd      	b.n	800e0f4 <prvTaskExitError+0x28>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	60bb      	str	r3, [r7, #8]
}
 800e10a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e10c:	bf00      	nop
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d0fc      	beq.n	800e10e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e114:	bf00      	nop
 800e116:	bf00      	nop
 800e118:	3714      	adds	r7, #20
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop
 800e124:	2000011c 	.word	0x2000011c
	...

0800e130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e130:	4b07      	ldr	r3, [pc, #28]	@ (800e150 <pxCurrentTCBConst2>)
 800e132:	6819      	ldr	r1, [r3, #0]
 800e134:	6808      	ldr	r0, [r1, #0]
 800e136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13a:	f380 8809 	msr	PSP, r0
 800e13e:	f3bf 8f6f 	isb	sy
 800e142:	f04f 0000 	mov.w	r0, #0
 800e146:	f380 8811 	msr	BASEPRI, r0
 800e14a:	4770      	bx	lr
 800e14c:	f3af 8000 	nop.w

0800e150 <pxCurrentTCBConst2>:
 800e150:	20002730 	.word	0x20002730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e154:	bf00      	nop
 800e156:	bf00      	nop

0800e158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e158:	4808      	ldr	r0, [pc, #32]	@ (800e17c <prvPortStartFirstTask+0x24>)
 800e15a:	6800      	ldr	r0, [r0, #0]
 800e15c:	6800      	ldr	r0, [r0, #0]
 800e15e:	f380 8808 	msr	MSP, r0
 800e162:	f04f 0000 	mov.w	r0, #0
 800e166:	f380 8814 	msr	CONTROL, r0
 800e16a:	b662      	cpsie	i
 800e16c:	b661      	cpsie	f
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	df00      	svc	0
 800e178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e17a:	bf00      	nop
 800e17c:	e000ed08 	.word	0xe000ed08

0800e180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b086      	sub	sp, #24
 800e184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e186:	4b47      	ldr	r3, [pc, #284]	@ (800e2a4 <xPortStartScheduler+0x124>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a47      	ldr	r2, [pc, #284]	@ (800e2a8 <xPortStartScheduler+0x128>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d10b      	bne.n	800e1a8 <xPortStartScheduler+0x28>
	__asm volatile
 800e190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	60fb      	str	r3, [r7, #12]
}
 800e1a2:	bf00      	nop
 800e1a4:	bf00      	nop
 800e1a6:	e7fd      	b.n	800e1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e1a8:	4b3e      	ldr	r3, [pc, #248]	@ (800e2a4 <xPortStartScheduler+0x124>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a3f      	ldr	r2, [pc, #252]	@ (800e2ac <xPortStartScheduler+0x12c>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d10b      	bne.n	800e1ca <xPortStartScheduler+0x4a>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	613b      	str	r3, [r7, #16]
}
 800e1c4:	bf00      	nop
 800e1c6:	bf00      	nop
 800e1c8:	e7fd      	b.n	800e1c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e1ca:	4b39      	ldr	r3, [pc, #228]	@ (800e2b0 <xPortStartScheduler+0x130>)
 800e1cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	22ff      	movs	r2, #255	@ 0xff
 800e1da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1e4:	78fb      	ldrb	r3, [r7, #3]
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	4b31      	ldr	r3, [pc, #196]	@ (800e2b4 <xPortStartScheduler+0x134>)
 800e1f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1f2:	4b31      	ldr	r3, [pc, #196]	@ (800e2b8 <xPortStartScheduler+0x138>)
 800e1f4:	2207      	movs	r2, #7
 800e1f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1f8:	e009      	b.n	800e20e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e1fa:	4b2f      	ldr	r3, [pc, #188]	@ (800e2b8 <xPortStartScheduler+0x138>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3b01      	subs	r3, #1
 800e200:	4a2d      	ldr	r2, [pc, #180]	@ (800e2b8 <xPortStartScheduler+0x138>)
 800e202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	b2db      	uxtb	r3, r3
 800e208:	005b      	lsls	r3, r3, #1
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e20e:	78fb      	ldrb	r3, [r7, #3]
 800e210:	b2db      	uxtb	r3, r3
 800e212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e216:	2b80      	cmp	r3, #128	@ 0x80
 800e218:	d0ef      	beq.n	800e1fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e21a:	4b27      	ldr	r3, [pc, #156]	@ (800e2b8 <xPortStartScheduler+0x138>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f1c3 0307 	rsb	r3, r3, #7
 800e222:	2b04      	cmp	r3, #4
 800e224:	d00b      	beq.n	800e23e <xPortStartScheduler+0xbe>
	__asm volatile
 800e226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e22a:	f383 8811 	msr	BASEPRI, r3
 800e22e:	f3bf 8f6f 	isb	sy
 800e232:	f3bf 8f4f 	dsb	sy
 800e236:	60bb      	str	r3, [r7, #8]
}
 800e238:	bf00      	nop
 800e23a:	bf00      	nop
 800e23c:	e7fd      	b.n	800e23a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e23e:	4b1e      	ldr	r3, [pc, #120]	@ (800e2b8 <xPortStartScheduler+0x138>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	021b      	lsls	r3, r3, #8
 800e244:	4a1c      	ldr	r2, [pc, #112]	@ (800e2b8 <xPortStartScheduler+0x138>)
 800e246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e248:	4b1b      	ldr	r3, [pc, #108]	@ (800e2b8 <xPortStartScheduler+0x138>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e250:	4a19      	ldr	r2, [pc, #100]	@ (800e2b8 <xPortStartScheduler+0x138>)
 800e252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	b2da      	uxtb	r2, r3
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e25c:	4b17      	ldr	r3, [pc, #92]	@ (800e2bc <xPortStartScheduler+0x13c>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a16      	ldr	r2, [pc, #88]	@ (800e2bc <xPortStartScheduler+0x13c>)
 800e262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e268:	4b14      	ldr	r3, [pc, #80]	@ (800e2bc <xPortStartScheduler+0x13c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a13      	ldr	r2, [pc, #76]	@ (800e2bc <xPortStartScheduler+0x13c>)
 800e26e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e274:	f000 f8da 	bl	800e42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e278:	4b11      	ldr	r3, [pc, #68]	@ (800e2c0 <xPortStartScheduler+0x140>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e27e:	f000 f8f9 	bl	800e474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e282:	4b10      	ldr	r3, [pc, #64]	@ (800e2c4 <xPortStartScheduler+0x144>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a0f      	ldr	r2, [pc, #60]	@ (800e2c4 <xPortStartScheduler+0x144>)
 800e288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e28c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e28e:	f7ff ff63 	bl	800e158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e292:	f7ff f82d 	bl	800d2f0 <vTaskSwitchContext>
	prvTaskExitError();
 800e296:	f7ff ff19 	bl	800e0cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e29a:	2300      	movs	r3, #0
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	e000ed00 	.word	0xe000ed00
 800e2a8:	410fc271 	.word	0x410fc271
 800e2ac:	410fc270 	.word	0x410fc270
 800e2b0:	e000e400 	.word	0xe000e400
 800e2b4:	20002d5c 	.word	0x20002d5c
 800e2b8:	20002d60 	.word	0x20002d60
 800e2bc:	e000ed20 	.word	0xe000ed20
 800e2c0:	2000011c 	.word	0x2000011c
 800e2c4:	e000ef34 	.word	0xe000ef34

0800e2c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	607b      	str	r3, [r7, #4]
}
 800e2e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e2e2:	4b10      	ldr	r3, [pc, #64]	@ (800e324 <vPortEnterCritical+0x5c>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	4a0e      	ldr	r2, [pc, #56]	@ (800e324 <vPortEnterCritical+0x5c>)
 800e2ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e324 <vPortEnterCritical+0x5c>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d110      	bne.n	800e316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800e328 <vPortEnterCritical+0x60>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00b      	beq.n	800e316 <vPortEnterCritical+0x4e>
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	603b      	str	r3, [r7, #0]
}
 800e310:	bf00      	nop
 800e312:	bf00      	nop
 800e314:	e7fd      	b.n	800e312 <vPortEnterCritical+0x4a>
	}
}
 800e316:	bf00      	nop
 800e318:	370c      	adds	r7, #12
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	2000011c 	.word	0x2000011c
 800e328:	e000ed04 	.word	0xe000ed04

0800e32c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e332:	4b12      	ldr	r3, [pc, #72]	@ (800e37c <vPortExitCritical+0x50>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d10b      	bne.n	800e352 <vPortExitCritical+0x26>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	607b      	str	r3, [r7, #4]
}
 800e34c:	bf00      	nop
 800e34e:	bf00      	nop
 800e350:	e7fd      	b.n	800e34e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e352:	4b0a      	ldr	r3, [pc, #40]	@ (800e37c <vPortExitCritical+0x50>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	3b01      	subs	r3, #1
 800e358:	4a08      	ldr	r2, [pc, #32]	@ (800e37c <vPortExitCritical+0x50>)
 800e35a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e35c:	4b07      	ldr	r3, [pc, #28]	@ (800e37c <vPortExitCritical+0x50>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d105      	bne.n	800e370 <vPortExitCritical+0x44>
 800e364:	2300      	movs	r3, #0
 800e366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	f383 8811 	msr	BASEPRI, r3
}
 800e36e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e370:	bf00      	nop
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	2000011c 	.word	0x2000011c

0800e380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e380:	f3ef 8009 	mrs	r0, PSP
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	4b15      	ldr	r3, [pc, #84]	@ (800e3e0 <pxCurrentTCBConst>)
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	f01e 0f10 	tst.w	lr, #16
 800e390:	bf08      	it	eq
 800e392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39a:	6010      	str	r0, [r2, #0]
 800e39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e3a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e3a4:	f380 8811 	msr	BASEPRI, r0
 800e3a8:	f3bf 8f4f 	dsb	sy
 800e3ac:	f3bf 8f6f 	isb	sy
 800e3b0:	f7fe ff9e 	bl	800d2f0 <vTaskSwitchContext>
 800e3b4:	f04f 0000 	mov.w	r0, #0
 800e3b8:	f380 8811 	msr	BASEPRI, r0
 800e3bc:	bc09      	pop	{r0, r3}
 800e3be:	6819      	ldr	r1, [r3, #0]
 800e3c0:	6808      	ldr	r0, [r1, #0]
 800e3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c6:	f01e 0f10 	tst.w	lr, #16
 800e3ca:	bf08      	it	eq
 800e3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e3d0:	f380 8809 	msr	PSP, r0
 800e3d4:	f3bf 8f6f 	isb	sy
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w

0800e3e0 <pxCurrentTCBConst>:
 800e3e0:	20002730 	.word	0x20002730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e3e4:	bf00      	nop
 800e3e6:	bf00      	nop

0800e3e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	607b      	str	r3, [r7, #4]
}
 800e400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e402:	f7fe febb 	bl	800d17c <xTaskIncrementTick>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d003      	beq.n	800e414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e40c:	4b06      	ldr	r3, [pc, #24]	@ (800e428 <xPortSysTickHandler+0x40>)
 800e40e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e412:	601a      	str	r2, [r3, #0]
 800e414:	2300      	movs	r3, #0
 800e416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	f383 8811 	msr	BASEPRI, r3
}
 800e41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e420:	bf00      	nop
 800e422:	3708      	adds	r7, #8
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	e000ed04 	.word	0xe000ed04

0800e42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e42c:	b480      	push	{r7}
 800e42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e430:	4b0b      	ldr	r3, [pc, #44]	@ (800e460 <vPortSetupTimerInterrupt+0x34>)
 800e432:	2200      	movs	r2, #0
 800e434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e436:	4b0b      	ldr	r3, [pc, #44]	@ (800e464 <vPortSetupTimerInterrupt+0x38>)
 800e438:	2200      	movs	r2, #0
 800e43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e43c:	4b0a      	ldr	r3, [pc, #40]	@ (800e468 <vPortSetupTimerInterrupt+0x3c>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4a0a      	ldr	r2, [pc, #40]	@ (800e46c <vPortSetupTimerInterrupt+0x40>)
 800e442:	fba2 2303 	umull	r2, r3, r2, r3
 800e446:	099b      	lsrs	r3, r3, #6
 800e448:	4a09      	ldr	r2, [pc, #36]	@ (800e470 <vPortSetupTimerInterrupt+0x44>)
 800e44a:	3b01      	subs	r3, #1
 800e44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e44e:	4b04      	ldr	r3, [pc, #16]	@ (800e460 <vPortSetupTimerInterrupt+0x34>)
 800e450:	2207      	movs	r2, #7
 800e452:	601a      	str	r2, [r3, #0]
}
 800e454:	bf00      	nop
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr
 800e45e:	bf00      	nop
 800e460:	e000e010 	.word	0xe000e010
 800e464:	e000e018 	.word	0xe000e018
 800e468:	20000000 	.word	0x20000000
 800e46c:	10624dd3 	.word	0x10624dd3
 800e470:	e000e014 	.word	0xe000e014

0800e474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e484 <vPortEnableVFP+0x10>
 800e478:	6801      	ldr	r1, [r0, #0]
 800e47a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e47e:	6001      	str	r1, [r0, #0]
 800e480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e482:	bf00      	nop
 800e484:	e000ed88 	.word	0xe000ed88

0800e488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e48e:	f3ef 8305 	mrs	r3, IPSR
 800e492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2b0f      	cmp	r3, #15
 800e498:	d915      	bls.n	800e4c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e49a:	4a18      	ldr	r2, [pc, #96]	@ (800e4fc <vPortValidateInterruptPriority+0x74>)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	4413      	add	r3, r2
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e4a4:	4b16      	ldr	r3, [pc, #88]	@ (800e500 <vPortValidateInterruptPriority+0x78>)
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	7afa      	ldrb	r2, [r7, #11]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d20b      	bcs.n	800e4c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	607b      	str	r3, [r7, #4]
}
 800e4c0:	bf00      	nop
 800e4c2:	bf00      	nop
 800e4c4:	e7fd      	b.n	800e4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e4c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e504 <vPortValidateInterruptPriority+0x7c>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800e508 <vPortValidateInterruptPriority+0x80>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d90b      	bls.n	800e4ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4da:	f383 8811 	msr	BASEPRI, r3
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	f3bf 8f4f 	dsb	sy
 800e4e6:	603b      	str	r3, [r7, #0]
}
 800e4e8:	bf00      	nop
 800e4ea:	bf00      	nop
 800e4ec:	e7fd      	b.n	800e4ea <vPortValidateInterruptPriority+0x62>
	}
 800e4ee:	bf00      	nop
 800e4f0:	3714      	adds	r7, #20
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop
 800e4fc:	e000e3f0 	.word	0xe000e3f0
 800e500:	20002d5c 	.word	0x20002d5c
 800e504:	e000ed0c 	.word	0xe000ed0c
 800e508:	20002d60 	.word	0x20002d60

0800e50c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b08a      	sub	sp, #40	@ 0x28
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e514:	2300      	movs	r3, #0
 800e516:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e518:	f7fe fd74 	bl	800d004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e51c:	4b5c      	ldr	r3, [pc, #368]	@ (800e690 <pvPortMalloc+0x184>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d101      	bne.n	800e528 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e524:	f000 f924 	bl	800e770 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e528:	4b5a      	ldr	r3, [pc, #360]	@ (800e694 <pvPortMalloc+0x188>)
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4013      	ands	r3, r2
 800e530:	2b00      	cmp	r3, #0
 800e532:	f040 8095 	bne.w	800e660 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d01e      	beq.n	800e57a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e53c:	2208      	movs	r2, #8
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4413      	add	r3, r2
 800e542:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f003 0307 	and.w	r3, r3, #7
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d015      	beq.n	800e57a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f023 0307 	bic.w	r3, r3, #7
 800e554:	3308      	adds	r3, #8
 800e556:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f003 0307 	and.w	r3, r3, #7
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00b      	beq.n	800e57a <pvPortMalloc+0x6e>
	__asm volatile
 800e562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e566:	f383 8811 	msr	BASEPRI, r3
 800e56a:	f3bf 8f6f 	isb	sy
 800e56e:	f3bf 8f4f 	dsb	sy
 800e572:	617b      	str	r3, [r7, #20]
}
 800e574:	bf00      	nop
 800e576:	bf00      	nop
 800e578:	e7fd      	b.n	800e576 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d06f      	beq.n	800e660 <pvPortMalloc+0x154>
 800e580:	4b45      	ldr	r3, [pc, #276]	@ (800e698 <pvPortMalloc+0x18c>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	429a      	cmp	r2, r3
 800e588:	d86a      	bhi.n	800e660 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e58a:	4b44      	ldr	r3, [pc, #272]	@ (800e69c <pvPortMalloc+0x190>)
 800e58c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e58e:	4b43      	ldr	r3, [pc, #268]	@ (800e69c <pvPortMalloc+0x190>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e594:	e004      	b.n	800e5a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d903      	bls.n	800e5b2 <pvPortMalloc+0xa6>
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1f1      	bne.n	800e596 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e5b2:	4b37      	ldr	r3, [pc, #220]	@ (800e690 <pvPortMalloc+0x184>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d051      	beq.n	800e660 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e5bc:	6a3b      	ldr	r3, [r7, #32]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2208      	movs	r2, #8
 800e5c2:	4413      	add	r3, r2
 800e5c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	6a3b      	ldr	r3, [r7, #32]
 800e5cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	1ad2      	subs	r2, r2, r3
 800e5d6:	2308      	movs	r3, #8
 800e5d8:	005b      	lsls	r3, r3, #1
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d920      	bls.n	800e620 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e5de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	f003 0307 	and.w	r3, r3, #7
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d00b      	beq.n	800e608 <pvPortMalloc+0xfc>
	__asm volatile
 800e5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f4:	f383 8811 	msr	BASEPRI, r3
 800e5f8:	f3bf 8f6f 	isb	sy
 800e5fc:	f3bf 8f4f 	dsb	sy
 800e600:	613b      	str	r3, [r7, #16]
}
 800e602:	bf00      	nop
 800e604:	bf00      	nop
 800e606:	e7fd      	b.n	800e604 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	1ad2      	subs	r2, r2, r3
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e61a:	69b8      	ldr	r0, [r7, #24]
 800e61c:	f000 f90a 	bl	800e834 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e620:	4b1d      	ldr	r3, [pc, #116]	@ (800e698 <pvPortMalloc+0x18c>)
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	1ad3      	subs	r3, r2, r3
 800e62a:	4a1b      	ldr	r2, [pc, #108]	@ (800e698 <pvPortMalloc+0x18c>)
 800e62c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e62e:	4b1a      	ldr	r3, [pc, #104]	@ (800e698 <pvPortMalloc+0x18c>)
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	4b1b      	ldr	r3, [pc, #108]	@ (800e6a0 <pvPortMalloc+0x194>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	429a      	cmp	r2, r3
 800e638:	d203      	bcs.n	800e642 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e63a:	4b17      	ldr	r3, [pc, #92]	@ (800e698 <pvPortMalloc+0x18c>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	4a18      	ldr	r2, [pc, #96]	@ (800e6a0 <pvPortMalloc+0x194>)
 800e640:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	4b13      	ldr	r3, [pc, #76]	@ (800e694 <pvPortMalloc+0x188>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	431a      	orrs	r2, r3
 800e64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e64e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e652:	2200      	movs	r2, #0
 800e654:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e656:	4b13      	ldr	r3, [pc, #76]	@ (800e6a4 <pvPortMalloc+0x198>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	3301      	adds	r3, #1
 800e65c:	4a11      	ldr	r2, [pc, #68]	@ (800e6a4 <pvPortMalloc+0x198>)
 800e65e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e660:	f7fe fcde 	bl	800d020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	f003 0307 	and.w	r3, r3, #7
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00b      	beq.n	800e686 <pvPortMalloc+0x17a>
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e672:	f383 8811 	msr	BASEPRI, r3
 800e676:	f3bf 8f6f 	isb	sy
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	60fb      	str	r3, [r7, #12]
}
 800e680:	bf00      	nop
 800e682:	bf00      	nop
 800e684:	e7fd      	b.n	800e682 <pvPortMalloc+0x176>
	return pvReturn;
 800e686:	69fb      	ldr	r3, [r7, #28]
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3728      	adds	r7, #40	@ 0x28
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	20008b2c 	.word	0x20008b2c
 800e694:	20008b40 	.word	0x20008b40
 800e698:	20008b30 	.word	0x20008b30
 800e69c:	20008b24 	.word	0x20008b24
 800e6a0:	20008b34 	.word	0x20008b34
 800e6a4:	20008b38 	.word	0x20008b38

0800e6a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d04f      	beq.n	800e75a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e6ba:	2308      	movs	r3, #8
 800e6bc:	425b      	negs	r3, r3
 800e6be:	697a      	ldr	r2, [r7, #20]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	685a      	ldr	r2, [r3, #4]
 800e6cc:	4b25      	ldr	r3, [pc, #148]	@ (800e764 <vPortFree+0xbc>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4013      	ands	r3, r2
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d10b      	bne.n	800e6ee <vPortFree+0x46>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	60fb      	str	r3, [r7, #12]
}
 800e6e8:	bf00      	nop
 800e6ea:	bf00      	nop
 800e6ec:	e7fd      	b.n	800e6ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00b      	beq.n	800e70e <vPortFree+0x66>
	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	60bb      	str	r3, [r7, #8]
}
 800e708:	bf00      	nop
 800e70a:	bf00      	nop
 800e70c:	e7fd      	b.n	800e70a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	685a      	ldr	r2, [r3, #4]
 800e712:	4b14      	ldr	r3, [pc, #80]	@ (800e764 <vPortFree+0xbc>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4013      	ands	r3, r2
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d01e      	beq.n	800e75a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d11a      	bne.n	800e75a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	685a      	ldr	r2, [r3, #4]
 800e728:	4b0e      	ldr	r3, [pc, #56]	@ (800e764 <vPortFree+0xbc>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	43db      	mvns	r3, r3
 800e72e:	401a      	ands	r2, r3
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e734:	f7fe fc66 	bl	800d004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	685a      	ldr	r2, [r3, #4]
 800e73c:	4b0a      	ldr	r3, [pc, #40]	@ (800e768 <vPortFree+0xc0>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4413      	add	r3, r2
 800e742:	4a09      	ldr	r2, [pc, #36]	@ (800e768 <vPortFree+0xc0>)
 800e744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e746:	6938      	ldr	r0, [r7, #16]
 800e748:	f000 f874 	bl	800e834 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e74c:	4b07      	ldr	r3, [pc, #28]	@ (800e76c <vPortFree+0xc4>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	3301      	adds	r3, #1
 800e752:	4a06      	ldr	r2, [pc, #24]	@ (800e76c <vPortFree+0xc4>)
 800e754:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e756:	f7fe fc63 	bl	800d020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e75a:	bf00      	nop
 800e75c:	3718      	adds	r7, #24
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	20008b40 	.word	0x20008b40
 800e768:	20008b30 	.word	0x20008b30
 800e76c:	20008b3c 	.word	0x20008b3c

0800e770 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e776:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 800e77a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e77c:	4b27      	ldr	r3, [pc, #156]	@ (800e81c <prvHeapInit+0xac>)
 800e77e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f003 0307 	and.w	r3, r3, #7
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00c      	beq.n	800e7a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	3307      	adds	r3, #7
 800e78e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f023 0307 	bic.w	r3, r3, #7
 800e796:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	4a1f      	ldr	r2, [pc, #124]	@ (800e81c <prvHeapInit+0xac>)
 800e7a0:	4413      	add	r3, r2
 800e7a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e7a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e820 <prvHeapInit+0xb0>)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e7ae:	4b1c      	ldr	r3, [pc, #112]	@ (800e820 <prvHeapInit+0xb0>)
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	68ba      	ldr	r2, [r7, #8]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e7bc:	2208      	movs	r2, #8
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	1a9b      	subs	r3, r3, r2
 800e7c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f023 0307 	bic.w	r3, r3, #7
 800e7ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	4a15      	ldr	r2, [pc, #84]	@ (800e824 <prvHeapInit+0xb4>)
 800e7d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e7d2:	4b14      	ldr	r3, [pc, #80]	@ (800e824 <prvHeapInit+0xb4>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e7da:	4b12      	ldr	r3, [pc, #72]	@ (800e824 <prvHeapInit+0xb4>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	1ad2      	subs	r2, r2, r3
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e7f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e824 <prvHeapInit+0xb4>)
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	4a0a      	ldr	r2, [pc, #40]	@ (800e828 <prvHeapInit+0xb8>)
 800e7fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	4a09      	ldr	r2, [pc, #36]	@ (800e82c <prvHeapInit+0xbc>)
 800e806:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e808:	4b09      	ldr	r3, [pc, #36]	@ (800e830 <prvHeapInit+0xc0>)
 800e80a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e80e:	601a      	str	r2, [r3, #0]
}
 800e810:	bf00      	nop
 800e812:	3714      	adds	r7, #20
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr
 800e81c:	20002d64 	.word	0x20002d64
 800e820:	20008b24 	.word	0x20008b24
 800e824:	20008b2c 	.word	0x20008b2c
 800e828:	20008b34 	.word	0x20008b34
 800e82c:	20008b30 	.word	0x20008b30
 800e830:	20008b40 	.word	0x20008b40

0800e834 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e83c:	4b28      	ldr	r3, [pc, #160]	@ (800e8e0 <prvInsertBlockIntoFreeList+0xac>)
 800e83e:	60fb      	str	r3, [r7, #12]
 800e840:	e002      	b.n	800e848 <prvInsertBlockIntoFreeList+0x14>
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	60fb      	str	r3, [r7, #12]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d8f7      	bhi.n	800e842 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	68ba      	ldr	r2, [r7, #8]
 800e85c:	4413      	add	r3, r2
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	429a      	cmp	r2, r3
 800e862:	d108      	bne.n	800e876 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	685a      	ldr	r2, [r3, #4]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	441a      	add	r2, r3
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	68ba      	ldr	r2, [r7, #8]
 800e880:	441a      	add	r2, r3
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	429a      	cmp	r2, r3
 800e888:	d118      	bne.n	800e8bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	4b15      	ldr	r3, [pc, #84]	@ (800e8e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	429a      	cmp	r2, r3
 800e894:	d00d      	beq.n	800e8b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	685a      	ldr	r2, [r3, #4]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	441a      	add	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	601a      	str	r2, [r3, #0]
 800e8b0:	e008      	b.n	800e8c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e8e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	601a      	str	r2, [r3, #0]
 800e8ba:	e003      	b.n	800e8c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d002      	beq.n	800e8d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8d2:	bf00      	nop
 800e8d4:	3714      	adds	r7, #20
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	20008b24 	.word	0x20008b24
 800e8e4:	20008b2c 	.word	0x20008b2c

0800e8e8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4912      	ldr	r1, [pc, #72]	@ (800e938 <MX_USB_Device_Init+0x50>)
 800e8f0:	4812      	ldr	r0, [pc, #72]	@ (800e93c <MX_USB_Device_Init+0x54>)
 800e8f2:	f7fc f8e3 	bl	800aabc <USBD_Init>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d001      	beq.n	800e900 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e8fc:	f7f3 fa12 	bl	8001d24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e900:	490f      	ldr	r1, [pc, #60]	@ (800e940 <MX_USB_Device_Init+0x58>)
 800e902:	480e      	ldr	r0, [pc, #56]	@ (800e93c <MX_USB_Device_Init+0x54>)
 800e904:	f7fc f90a 	bl	800ab1c <USBD_RegisterClass>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d001      	beq.n	800e912 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e90e:	f7f3 fa09 	bl	8001d24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e912:	490c      	ldr	r1, [pc, #48]	@ (800e944 <MX_USB_Device_Init+0x5c>)
 800e914:	4809      	ldr	r0, [pc, #36]	@ (800e93c <MX_USB_Device_Init+0x54>)
 800e916:	f7fc f82b 	bl	800a970 <USBD_CDC_RegisterInterface>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d001      	beq.n	800e924 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e920:	f7f3 fa00 	bl	8001d24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e924:	4805      	ldr	r0, [pc, #20]	@ (800e93c <MX_USB_Device_Init+0x54>)
 800e926:	f7fc f920 	bl	800ab6a <USBD_Start>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d001      	beq.n	800e934 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e930:	f7f3 f9f8 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e934:	bf00      	nop
 800e936:	bd80      	pop	{r7, pc}
 800e938:	20000134 	.word	0x20000134
 800e93c:	20008b44 	.word	0x20008b44
 800e940:	20000018 	.word	0x20000018
 800e944:	20000120 	.word	0x20000120

0800e948 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e94c:	2200      	movs	r2, #0
 800e94e:	4905      	ldr	r1, [pc, #20]	@ (800e964 <CDC_Init_FS+0x1c>)
 800e950:	4805      	ldr	r0, [pc, #20]	@ (800e968 <CDC_Init_FS+0x20>)
 800e952:	f7fc f822 	bl	800a99a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e956:	4905      	ldr	r1, [pc, #20]	@ (800e96c <CDC_Init_FS+0x24>)
 800e958:	4803      	ldr	r0, [pc, #12]	@ (800e968 <CDC_Init_FS+0x20>)
 800e95a:	f7fc f83c 	bl	800a9d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e95e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e960:	4618      	mov	r0, r3
 800e962:	bd80      	pop	{r7, pc}
 800e964:	20009614 	.word	0x20009614
 800e968:	20008b44 	.word	0x20008b44
 800e96c:	20008e14 	.word	0x20008e14

0800e970 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e970:	b480      	push	{r7}
 800e972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e974:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e976:	4618      	mov	r0, r3
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr

0800e980 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	4603      	mov	r3, r0
 800e988:	6039      	str	r1, [r7, #0]
 800e98a:	71fb      	strb	r3, [r7, #7]
 800e98c:	4613      	mov	r3, r2
 800e98e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e990:	79fb      	ldrb	r3, [r7, #7]
 800e992:	2b23      	cmp	r3, #35	@ 0x23
 800e994:	d84a      	bhi.n	800ea2c <CDC_Control_FS+0xac>
 800e996:	a201      	add	r2, pc, #4	@ (adr r2, 800e99c <CDC_Control_FS+0x1c>)
 800e998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99c:	0800ea2d 	.word	0x0800ea2d
 800e9a0:	0800ea2d 	.word	0x0800ea2d
 800e9a4:	0800ea2d 	.word	0x0800ea2d
 800e9a8:	0800ea2d 	.word	0x0800ea2d
 800e9ac:	0800ea2d 	.word	0x0800ea2d
 800e9b0:	0800ea2d 	.word	0x0800ea2d
 800e9b4:	0800ea2d 	.word	0x0800ea2d
 800e9b8:	0800ea2d 	.word	0x0800ea2d
 800e9bc:	0800ea2d 	.word	0x0800ea2d
 800e9c0:	0800ea2d 	.word	0x0800ea2d
 800e9c4:	0800ea2d 	.word	0x0800ea2d
 800e9c8:	0800ea2d 	.word	0x0800ea2d
 800e9cc:	0800ea2d 	.word	0x0800ea2d
 800e9d0:	0800ea2d 	.word	0x0800ea2d
 800e9d4:	0800ea2d 	.word	0x0800ea2d
 800e9d8:	0800ea2d 	.word	0x0800ea2d
 800e9dc:	0800ea2d 	.word	0x0800ea2d
 800e9e0:	0800ea2d 	.word	0x0800ea2d
 800e9e4:	0800ea2d 	.word	0x0800ea2d
 800e9e8:	0800ea2d 	.word	0x0800ea2d
 800e9ec:	0800ea2d 	.word	0x0800ea2d
 800e9f0:	0800ea2d 	.word	0x0800ea2d
 800e9f4:	0800ea2d 	.word	0x0800ea2d
 800e9f8:	0800ea2d 	.word	0x0800ea2d
 800e9fc:	0800ea2d 	.word	0x0800ea2d
 800ea00:	0800ea2d 	.word	0x0800ea2d
 800ea04:	0800ea2d 	.word	0x0800ea2d
 800ea08:	0800ea2d 	.word	0x0800ea2d
 800ea0c:	0800ea2d 	.word	0x0800ea2d
 800ea10:	0800ea2d 	.word	0x0800ea2d
 800ea14:	0800ea2d 	.word	0x0800ea2d
 800ea18:	0800ea2d 	.word	0x0800ea2d
 800ea1c:	0800ea2d 	.word	0x0800ea2d
 800ea20:	0800ea2d 	.word	0x0800ea2d
 800ea24:	0800ea2d 	.word	0x0800ea2d
 800ea28:	0800ea2d 	.word	0x0800ea2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea2c:	bf00      	nop
  }

  return (USBD_OK);
 800ea2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea46:	6879      	ldr	r1, [r7, #4]
 800ea48:	4805      	ldr	r0, [pc, #20]	@ (800ea60 <CDC_Receive_FS+0x24>)
 800ea4a:	f7fb ffc4 	bl	800a9d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea4e:	4804      	ldr	r0, [pc, #16]	@ (800ea60 <CDC_Receive_FS+0x24>)
 800ea50:	f7fc f80a 	bl	800aa68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	20008b44 	.word	0x20008b44

0800ea64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea70:	2300      	movs	r3, #0
 800ea72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea74:	4b0d      	ldr	r3, [pc, #52]	@ (800eaac <CDC_Transmit_FS+0x48>)
 800ea76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea86:	2301      	movs	r3, #1
 800ea88:	e00b      	b.n	800eaa2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea8a:	887b      	ldrh	r3, [r7, #2]
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	6879      	ldr	r1, [r7, #4]
 800ea90:	4806      	ldr	r0, [pc, #24]	@ (800eaac <CDC_Transmit_FS+0x48>)
 800ea92:	f7fb ff82 	bl	800a99a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea96:	4805      	ldr	r0, [pc, #20]	@ (800eaac <CDC_Transmit_FS+0x48>)
 800ea98:	f7fb ffb6 	bl	800aa08 <USBD_CDC_TransmitPacket>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	20008b44 	.word	0x20008b44

0800eab0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	4613      	mov	r3, r2
 800eabc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eabe:	2300      	movs	r3, #0
 800eac0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	371c      	adds	r7, #28
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr
	...

0800ead4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	4603      	mov	r3, r0
 800eadc:	6039      	str	r1, [r7, #0]
 800eade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	2212      	movs	r2, #18
 800eae4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800eae6:	4b03      	ldr	r3, [pc, #12]	@ (800eaf4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr
 800eaf4:	20000154 	.word	0x20000154

0800eaf8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	4603      	mov	r3, r0
 800eb00:	6039      	str	r1, [r7, #0]
 800eb02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	2204      	movs	r2, #4
 800eb08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb0a:	4b03      	ldr	r3, [pc, #12]	@ (800eb18 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	20000168 	.word	0x20000168

0800eb1c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	4603      	mov	r3, r0
 800eb24:	6039      	str	r1, [r7, #0]
 800eb26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb28:	79fb      	ldrb	r3, [r7, #7]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d105      	bne.n	800eb3a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800eb2e:	683a      	ldr	r2, [r7, #0]
 800eb30:	4907      	ldr	r1, [pc, #28]	@ (800eb50 <USBD_CDC_ProductStrDescriptor+0x34>)
 800eb32:	4808      	ldr	r0, [pc, #32]	@ (800eb54 <USBD_CDC_ProductStrDescriptor+0x38>)
 800eb34:	f7fd f803 	bl	800bb3e <USBD_GetString>
 800eb38:	e004      	b.n	800eb44 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800eb3a:	683a      	ldr	r2, [r7, #0]
 800eb3c:	4904      	ldr	r1, [pc, #16]	@ (800eb50 <USBD_CDC_ProductStrDescriptor+0x34>)
 800eb3e:	4805      	ldr	r0, [pc, #20]	@ (800eb54 <USBD_CDC_ProductStrDescriptor+0x38>)
 800eb40:	f7fc fffd 	bl	800bb3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb44:	4b02      	ldr	r3, [pc, #8]	@ (800eb50 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	20009e14 	.word	0x20009e14
 800eb54:	080122d4 	.word	0x080122d4

0800eb58 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	4603      	mov	r3, r0
 800eb60:	6039      	str	r1, [r7, #0]
 800eb62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb64:	683a      	ldr	r2, [r7, #0]
 800eb66:	4904      	ldr	r1, [pc, #16]	@ (800eb78 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800eb68:	4804      	ldr	r0, [pc, #16]	@ (800eb7c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800eb6a:	f7fc ffe8 	bl	800bb3e <USBD_GetString>
  return USBD_StrDesc;
 800eb6e:	4b02      	ldr	r3, [pc, #8]	@ (800eb78 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	20009e14 	.word	0x20009e14
 800eb7c:	080122ec 	.word	0x080122ec

0800eb80 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	4603      	mov	r3, r0
 800eb88:	6039      	str	r1, [r7, #0]
 800eb8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	221a      	movs	r2, #26
 800eb90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb92:	f000 f843 	bl	800ec1c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800eb96:	4b02      	ldr	r3, [pc, #8]	@ (800eba0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	2000016c 	.word	0x2000016c

0800eba4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	4603      	mov	r3, r0
 800ebac:	6039      	str	r1, [r7, #0]
 800ebae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ebb0:	79fb      	ldrb	r3, [r7, #7]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d105      	bne.n	800ebc2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ebb6:	683a      	ldr	r2, [r7, #0]
 800ebb8:	4907      	ldr	r1, [pc, #28]	@ (800ebd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ebba:	4808      	ldr	r0, [pc, #32]	@ (800ebdc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ebbc:	f7fc ffbf 	bl	800bb3e <USBD_GetString>
 800ebc0:	e004      	b.n	800ebcc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ebc2:	683a      	ldr	r2, [r7, #0]
 800ebc4:	4904      	ldr	r1, [pc, #16]	@ (800ebd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ebc6:	4805      	ldr	r0, [pc, #20]	@ (800ebdc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ebc8:	f7fc ffb9 	bl	800bb3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebcc:	4b02      	ldr	r3, [pc, #8]	@ (800ebd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3708      	adds	r7, #8
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	20009e14 	.word	0x20009e14
 800ebdc:	08012300 	.word	0x08012300

0800ebe0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	6039      	str	r1, [r7, #0]
 800ebea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebec:	79fb      	ldrb	r3, [r7, #7]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d105      	bne.n	800ebfe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	4907      	ldr	r1, [pc, #28]	@ (800ec14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ebf6:	4808      	ldr	r0, [pc, #32]	@ (800ec18 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ebf8:	f7fc ffa1 	bl	800bb3e <USBD_GetString>
 800ebfc:	e004      	b.n	800ec08 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ebfe:	683a      	ldr	r2, [r7, #0]
 800ec00:	4904      	ldr	r1, [pc, #16]	@ (800ec14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ec02:	4805      	ldr	r0, [pc, #20]	@ (800ec18 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ec04:	f7fc ff9b 	bl	800bb3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec08:	4b02      	ldr	r3, [pc, #8]	@ (800ec14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	20009e14 	.word	0x20009e14
 800ec18:	0801230c 	.word	0x0801230c

0800ec1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec22:	4b0f      	ldr	r3, [pc, #60]	@ (800ec60 <Get_SerialNum+0x44>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec28:	4b0e      	ldr	r3, [pc, #56]	@ (800ec64 <Get_SerialNum+0x48>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ec68 <Get_SerialNum+0x4c>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4413      	add	r3, r2
 800ec3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d009      	beq.n	800ec56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec42:	2208      	movs	r2, #8
 800ec44:	4909      	ldr	r1, [pc, #36]	@ (800ec6c <Get_SerialNum+0x50>)
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f000 f814 	bl	800ec74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec4c:	2204      	movs	r2, #4
 800ec4e:	4908      	ldr	r1, [pc, #32]	@ (800ec70 <Get_SerialNum+0x54>)
 800ec50:	68b8      	ldr	r0, [r7, #8]
 800ec52:	f000 f80f 	bl	800ec74 <IntToUnicode>
  }
}
 800ec56:	bf00      	nop
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	1fff7590 	.word	0x1fff7590
 800ec64:	1fff7594 	.word	0x1fff7594
 800ec68:	1fff7598 	.word	0x1fff7598
 800ec6c:	2000016e 	.word	0x2000016e
 800ec70:	2000017e 	.word	0x2000017e

0800ec74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b087      	sub	sp, #28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	4613      	mov	r3, r2
 800ec80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec86:	2300      	movs	r3, #0
 800ec88:	75fb      	strb	r3, [r7, #23]
 800ec8a:	e027      	b.n	800ecdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	0f1b      	lsrs	r3, r3, #28
 800ec90:	2b09      	cmp	r3, #9
 800ec92:	d80b      	bhi.n	800ecac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	0f1b      	lsrs	r3, r3, #28
 800ec98:	b2da      	uxtb	r2, r3
 800ec9a:	7dfb      	ldrb	r3, [r7, #23]
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	4619      	mov	r1, r3
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	440b      	add	r3, r1
 800eca4:	3230      	adds	r2, #48	@ 0x30
 800eca6:	b2d2      	uxtb	r2, r2
 800eca8:	701a      	strb	r2, [r3, #0]
 800ecaa:	e00a      	b.n	800ecc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	0f1b      	lsrs	r3, r3, #28
 800ecb0:	b2da      	uxtb	r2, r3
 800ecb2:	7dfb      	ldrb	r3, [r7, #23]
 800ecb4:	005b      	lsls	r3, r3, #1
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	440b      	add	r3, r1
 800ecbc:	3237      	adds	r2, #55	@ 0x37
 800ecbe:	b2d2      	uxtb	r2, r2
 800ecc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	011b      	lsls	r3, r3, #4
 800ecc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ecc8:	7dfb      	ldrb	r3, [r7, #23]
 800ecca:	005b      	lsls	r3, r3, #1
 800eccc:	3301      	adds	r3, #1
 800ecce:	68ba      	ldr	r2, [r7, #8]
 800ecd0:	4413      	add	r3, r2
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ecd6:	7dfb      	ldrb	r3, [r7, #23]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	75fb      	strb	r3, [r7, #23]
 800ecdc:	7dfa      	ldrb	r2, [r7, #23]
 800ecde:	79fb      	ldrb	r3, [r7, #7]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d3d3      	bcc.n	800ec8c <IntToUnicode+0x18>
  }
}
 800ece4:	bf00      	nop
 800ece6:	bf00      	nop
 800ece8:	371c      	adds	r7, #28
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
	...

0800ecf4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b098      	sub	sp, #96	@ 0x60
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ecfc:	f107 0310 	add.w	r3, r7, #16
 800ed00:	2250      	movs	r2, #80	@ 0x50
 800ed02:	2100      	movs	r1, #0
 800ed04:	4618      	mov	r0, r3
 800ed06:	f001 f875 	bl	800fdf4 <memset>
  if(pcdHandle->Instance==USB)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4a15      	ldr	r2, [pc, #84]	@ (800ed64 <HAL_PCD_MspInit+0x70>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d122      	bne.n	800ed5a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ed14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ed18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ed1e:	f107 0310 	add.w	r3, r7, #16
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7f8 f92a 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ed2e:	f7f2 fff9 	bl	8001d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ed32:	4b0d      	ldr	r3, [pc, #52]	@ (800ed68 <HAL_PCD_MspInit+0x74>)
 800ed34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed36:	4a0c      	ldr	r2, [pc, #48]	@ (800ed68 <HAL_PCD_MspInit+0x74>)
 800ed38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ed3c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ed68 <HAL_PCD_MspInit+0x74>)
 800ed40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed46:	60fb      	str	r3, [r7, #12]
 800ed48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	2105      	movs	r1, #5
 800ed4e:	2014      	movs	r0, #20
 800ed50:	f7f4 fbec 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ed54:	2014      	movs	r0, #20
 800ed56:	f7f4 fc03 	bl	8003560 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ed5a:	bf00      	nop
 800ed5c:	3760      	adds	r7, #96	@ 0x60
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	40005c00 	.word	0x40005c00
 800ed68:	40021000 	.word	0x40021000

0800ed6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ed80:	4619      	mov	r1, r3
 800ed82:	4610      	mov	r0, r2
 800ed84:	f7fb ff3c 	bl	800ac00 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ed88:	bf00      	nop
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	460b      	mov	r3, r1
 800ed9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800eda2:	78fa      	ldrb	r2, [r7, #3]
 800eda4:	6879      	ldr	r1, [r7, #4]
 800eda6:	4613      	mov	r3, r2
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	4413      	add	r3, r2
 800edac:	00db      	lsls	r3, r3, #3
 800edae:	440b      	add	r3, r1
 800edb0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	78fb      	ldrb	r3, [r7, #3]
 800edb8:	4619      	mov	r1, r3
 800edba:	f7fb ff76 	bl	800acaa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800edbe:	bf00      	nop
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b082      	sub	sp, #8
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	460b      	mov	r3, r1
 800edd0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800edd8:	78fa      	ldrb	r2, [r7, #3]
 800edda:	6879      	ldr	r1, [r7, #4]
 800eddc:	4613      	mov	r3, r2
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	4413      	add	r3, r2
 800ede2:	00db      	lsls	r3, r3, #3
 800ede4:	440b      	add	r3, r1
 800ede6:	3324      	adds	r3, #36	@ 0x24
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	78fb      	ldrb	r3, [r7, #3]
 800edec:	4619      	mov	r1, r3
 800edee:	f7fb ffbf 	bl	800ad70 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fc f8d3 	bl	800afb4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ee0e:	bf00      	nop
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	795b      	ldrb	r3, [r3, #5]
 800ee26:	2b02      	cmp	r3, #2
 800ee28:	d001      	beq.n	800ee2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ee2a:	f7f2 ff7b 	bl	8001d24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee34:	7bfa      	ldrb	r2, [r7, #15]
 800ee36:	4611      	mov	r1, r2
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fc f87d 	bl	800af38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fc f829 	bl	800ae9c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ee4a:	bf00      	nop
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
	...

0800ee54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fc f878 	bl	800af58 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	7a5b      	ldrb	r3, [r3, #9]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d005      	beq.n	800ee7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee70:	4b04      	ldr	r3, [pc, #16]	@ (800ee84 <HAL_PCD_SuspendCallback+0x30>)
 800ee72:	691b      	ldr	r3, [r3, #16]
 800ee74:	4a03      	ldr	r2, [pc, #12]	@ (800ee84 <HAL_PCD_SuspendCallback+0x30>)
 800ee76:	f043 0306 	orr.w	r3, r3, #6
 800ee7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ee7c:	bf00      	nop
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	e000ed00 	.word	0xe000ed00

0800ee88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	7a5b      	ldrb	r3, [r3, #9]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d007      	beq.n	800eea8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee98:	4b08      	ldr	r3, [pc, #32]	@ (800eebc <HAL_PCD_ResumeCallback+0x34>)
 800ee9a:	691b      	ldr	r3, [r3, #16]
 800ee9c:	4a07      	ldr	r2, [pc, #28]	@ (800eebc <HAL_PCD_ResumeCallback+0x34>)
 800ee9e:	f023 0306 	bic.w	r3, r3, #6
 800eea2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800eea4:	f000 f9f8 	bl	800f298 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fc f868 	bl	800af84 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800eeb4:	bf00      	nop
 800eeb6:	3708      	adds	r7, #8
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	e000ed00 	.word	0xe000ed00

0800eec0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800eec8:	4a2b      	ldr	r2, [pc, #172]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a29      	ldr	r2, [pc, #164]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800eed4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800eed8:	4b27      	ldr	r3, [pc, #156]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800eeda:	4a28      	ldr	r2, [pc, #160]	@ (800ef7c <USBD_LL_Init+0xbc>)
 800eedc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800eede:	4b26      	ldr	r3, [pc, #152]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800eee0:	2208      	movs	r2, #8
 800eee2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800eee4:	4b24      	ldr	r3, [pc, #144]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800eee6:	2202      	movs	r2, #2
 800eee8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eeea:	4b23      	ldr	r3, [pc, #140]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800eeec:	2202      	movs	r2, #2
 800eeee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800eef0:	4b21      	ldr	r3, [pc, #132]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800eef2:	2200      	movs	r2, #0
 800eef4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800eef6:	4b20      	ldr	r3, [pc, #128]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800eefc:	4b1e      	ldr	r3, [pc, #120]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ef02:	4b1d      	ldr	r3, [pc, #116]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800ef04:	2200      	movs	r2, #0
 800ef06:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ef08:	481b      	ldr	r0, [pc, #108]	@ (800ef78 <USBD_LL_Init+0xb8>)
 800ef0a:	f7f5 fd22 	bl	8004952 <HAL_PCD_Init>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ef14:	f7f2 ff06 	bl	8001d24 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef1e:	2318      	movs	r3, #24
 800ef20:	2200      	movs	r2, #0
 800ef22:	2100      	movs	r1, #0
 800ef24:	f7f7 f9a9 	bl	800627a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef2e:	2358      	movs	r3, #88	@ 0x58
 800ef30:	2200      	movs	r2, #0
 800ef32:	2180      	movs	r1, #128	@ 0x80
 800ef34:	f7f7 f9a1 	bl	800627a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef3e:	23c0      	movs	r3, #192	@ 0xc0
 800ef40:	2200      	movs	r2, #0
 800ef42:	2181      	movs	r1, #129	@ 0x81
 800ef44:	f7f7 f999 	bl	800627a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef4e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ef52:	2200      	movs	r2, #0
 800ef54:	2101      	movs	r1, #1
 800ef56:	f7f7 f990 	bl	800627a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef64:	2200      	movs	r2, #0
 800ef66:	2182      	movs	r1, #130	@ 0x82
 800ef68:	f7f7 f987 	bl	800627a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ef6c:	2300      	movs	r3, #0
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3708      	adds	r7, #8
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	2000a014 	.word	0x2000a014
 800ef7c:	40005c00 	.word	0x40005c00

0800ef80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7f5 fda9 	bl	8004aee <HAL_PCD_Start>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
 800efa2:	4618      	mov	r0, r3
 800efa4:	f000 f97e 	bl	800f2a4 <USBD_Get_USB_Status>
 800efa8:	4603      	mov	r3, r0
 800efaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efac:	7bbb      	ldrb	r3, [r7, #14]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b084      	sub	sp, #16
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
 800efbe:	4608      	mov	r0, r1
 800efc0:	4611      	mov	r1, r2
 800efc2:	461a      	mov	r2, r3
 800efc4:	4603      	mov	r3, r0
 800efc6:	70fb      	strb	r3, [r7, #3]
 800efc8:	460b      	mov	r3, r1
 800efca:	70bb      	strb	r3, [r7, #2]
 800efcc:	4613      	mov	r3, r2
 800efce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efd0:	2300      	movs	r3, #0
 800efd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efd4:	2300      	movs	r3, #0
 800efd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800efde:	78bb      	ldrb	r3, [r7, #2]
 800efe0:	883a      	ldrh	r2, [r7, #0]
 800efe2:	78f9      	ldrb	r1, [r7, #3]
 800efe4:	f7f5 fef0 	bl	8004dc8 <HAL_PCD_EP_Open>
 800efe8:	4603      	mov	r3, r0
 800efea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efec:	7bfb      	ldrb	r3, [r7, #15]
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 f958 	bl	800f2a4 <USBD_Get_USB_Status>
 800eff4:	4603      	mov	r3, r0
 800eff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eff8:	7bbb      	ldrb	r3, [r7, #14]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b084      	sub	sp, #16
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
 800f00a:	460b      	mov	r3, r1
 800f00c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f00e:	2300      	movs	r3, #0
 800f010:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f01c:	78fa      	ldrb	r2, [r7, #3]
 800f01e:	4611      	mov	r1, r2
 800f020:	4618      	mov	r0, r3
 800f022:	f7f5 ff30 	bl	8004e86 <HAL_PCD_EP_Close>
 800f026:	4603      	mov	r3, r0
 800f028:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f02a:	7bfb      	ldrb	r3, [r7, #15]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f000 f939 	bl	800f2a4 <USBD_Get_USB_Status>
 800f032:	4603      	mov	r3, r0
 800f034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f036:	7bbb      	ldrb	r3, [r7, #14]
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	460b      	mov	r3, r1
 800f04a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f04c:	2300      	movs	r3, #0
 800f04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f05a:	78fa      	ldrb	r2, [r7, #3]
 800f05c:	4611      	mov	r1, r2
 800f05e:	4618      	mov	r0, r3
 800f060:	f7f5 ffd9 	bl	8005016 <HAL_PCD_EP_SetStall>
 800f064:	4603      	mov	r3, r0
 800f066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f000 f91a 	bl	800f2a4 <USBD_Get_USB_Status>
 800f070:	4603      	mov	r3, r0
 800f072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f074:	7bbb      	ldrb	r3, [r7, #14]
}
 800f076:	4618      	mov	r0, r3
 800f078:	3710      	adds	r7, #16
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}

0800f07e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b084      	sub	sp, #16
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
 800f086:	460b      	mov	r3, r1
 800f088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f08a:	2300      	movs	r3, #0
 800f08c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f08e:	2300      	movs	r3, #0
 800f090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f098:	78fa      	ldrb	r2, [r7, #3]
 800f09a:	4611      	mov	r1, r2
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7f6 f80c 	bl	80050ba <HAL_PCD_EP_ClrStall>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0a6:	7bfb      	ldrb	r3, [r7, #15]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f000 f8fb 	bl	800f2a4 <USBD_Get_USB_Status>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3710      	adds	r7, #16
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f0ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f0d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	da0b      	bge.n	800f0f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f0d8:	78fb      	ldrb	r3, [r7, #3]
 800f0da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0de:	68f9      	ldr	r1, [r7, #12]
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	4413      	add	r3, r2
 800f0e6:	00db      	lsls	r3, r3, #3
 800f0e8:	440b      	add	r3, r1
 800f0ea:	3312      	adds	r3, #18
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	e00b      	b.n	800f108 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0f6:	68f9      	ldr	r1, [r7, #12]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	4413      	add	r3, r2
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	440b      	add	r3, r1
 800f102:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800f106:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3714      	adds	r7, #20
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f124:	2300      	movs	r3, #0
 800f126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f12e:	78fa      	ldrb	r2, [r7, #3]
 800f130:	4611      	mov	r1, r2
 800f132:	4618      	mov	r0, r3
 800f134:	f7f5 fe24 	bl	8004d80 <HAL_PCD_SetAddress>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f13c:	7bfb      	ldrb	r3, [r7, #15]
 800f13e:	4618      	mov	r0, r3
 800f140:	f000 f8b0 	bl	800f2a4 <USBD_Get_USB_Status>
 800f144:	4603      	mov	r3, r0
 800f146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f148:	7bbb      	ldrb	r3, [r7, #14]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b086      	sub	sp, #24
 800f156:	af00      	add	r7, sp, #0
 800f158:	60f8      	str	r0, [r7, #12]
 800f15a:	607a      	str	r2, [r7, #4]
 800f15c:	603b      	str	r3, [r7, #0]
 800f15e:	460b      	mov	r3, r1
 800f160:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f166:	2300      	movs	r3, #0
 800f168:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f170:	7af9      	ldrb	r1, [r7, #11]
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	f7f5 ff17 	bl	8004fa8 <HAL_PCD_EP_Transmit>
 800f17a:	4603      	mov	r3, r0
 800f17c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f17e:	7dfb      	ldrb	r3, [r7, #23]
 800f180:	4618      	mov	r0, r3
 800f182:	f000 f88f 	bl	800f2a4 <USBD_Get_USB_Status>
 800f186:	4603      	mov	r3, r0
 800f188:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f18a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b086      	sub	sp, #24
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	607a      	str	r2, [r7, #4]
 800f19e:	603b      	str	r3, [r7, #0]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f1b2:	7af9      	ldrb	r1, [r7, #11]
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	f7f5 fead 	bl	8004f16 <HAL_PCD_EP_Receive>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1c0:	7dfb      	ldrb	r3, [r7, #23]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 f86e 	bl	800f2a4 <USBD_Get_USB_Status>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b082      	sub	sp, #8
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
 800f1de:	460b      	mov	r3, r1
 800f1e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f1e8:	78fa      	ldrb	r2, [r7, #3]
 800f1ea:	4611      	mov	r1, r2
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7f5 fec3 	bl	8004f78 <HAL_PCD_EP_GetRxCount>
 800f1f2:	4603      	mov	r3, r0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	460b      	mov	r3, r1
 800f206:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f208:	78fb      	ldrb	r3, [r7, #3]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d002      	beq.n	800f214 <HAL_PCDEx_LPM_Callback+0x18>
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d013      	beq.n	800f23a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f212:	e023      	b.n	800f25c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	7a5b      	ldrb	r3, [r3, #9]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d007      	beq.n	800f22c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f21c:	f000 f83c 	bl	800f298 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f220:	4b10      	ldr	r3, [pc, #64]	@ (800f264 <HAL_PCDEx_LPM_Callback+0x68>)
 800f222:	691b      	ldr	r3, [r3, #16]
 800f224:	4a0f      	ldr	r2, [pc, #60]	@ (800f264 <HAL_PCDEx_LPM_Callback+0x68>)
 800f226:	f023 0306 	bic.w	r3, r3, #6
 800f22a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f232:	4618      	mov	r0, r3
 800f234:	f7fb fea6 	bl	800af84 <USBD_LL_Resume>
    break;
 800f238:	e010      	b.n	800f25c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f240:	4618      	mov	r0, r3
 800f242:	f7fb fe89 	bl	800af58 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	7a5b      	ldrb	r3, [r3, #9]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d005      	beq.n	800f25a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f24e:	4b05      	ldr	r3, [pc, #20]	@ (800f264 <HAL_PCDEx_LPM_Callback+0x68>)
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	4a04      	ldr	r2, [pc, #16]	@ (800f264 <HAL_PCDEx_LPM_Callback+0x68>)
 800f254:	f043 0306 	orr.w	r3, r3, #6
 800f258:	6113      	str	r3, [r2, #16]
    break;
 800f25a:	bf00      	nop
}
 800f25c:	bf00      	nop
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	e000ed00 	.word	0xe000ed00

0800f268 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f270:	4b03      	ldr	r3, [pc, #12]	@ (800f280 <USBD_static_malloc+0x18>)
}
 800f272:	4618      	mov	r0, r3
 800f274:	370c      	adds	r7, #12
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	2000a2f0 	.word	0x2000a2f0

0800f284 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f284:	b480      	push	{r7}
 800f286:	b083      	sub	sp, #12
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]

}
 800f28c:	bf00      	nop
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f29c:	f7f2 fa98 	bl	80017d0 <SystemClock_Config>
}
 800f2a0:	bf00      	nop
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2b2:	79fb      	ldrb	r3, [r7, #7]
 800f2b4:	2b03      	cmp	r3, #3
 800f2b6:	d817      	bhi.n	800f2e8 <USBD_Get_USB_Status+0x44>
 800f2b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f2c0 <USBD_Get_USB_Status+0x1c>)
 800f2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2be:	bf00      	nop
 800f2c0:	0800f2d1 	.word	0x0800f2d1
 800f2c4:	0800f2d7 	.word	0x0800f2d7
 800f2c8:	0800f2dd 	.word	0x0800f2dd
 800f2cc:	0800f2e3 	.word	0x0800f2e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d4:	e00b      	b.n	800f2ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2d6:	2303      	movs	r3, #3
 800f2d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f2da:	e008      	b.n	800f2ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e0:	e005      	b.n	800f2ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2e2:	2303      	movs	r3, #3
 800f2e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e6:	e002      	b.n	800f2ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2e8:	2303      	movs	r3, #3
 800f2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ec:	bf00      	nop
  }
  return usb_status;
 800f2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3714      	adds	r7, #20
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <__cvt>:
 800f2fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f300:	ec57 6b10 	vmov	r6, r7, d0
 800f304:	2f00      	cmp	r7, #0
 800f306:	460c      	mov	r4, r1
 800f308:	4619      	mov	r1, r3
 800f30a:	463b      	mov	r3, r7
 800f30c:	bfbb      	ittet	lt
 800f30e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f312:	461f      	movlt	r7, r3
 800f314:	2300      	movge	r3, #0
 800f316:	232d      	movlt	r3, #45	@ 0x2d
 800f318:	700b      	strb	r3, [r1, #0]
 800f31a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f31c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f320:	4691      	mov	r9, r2
 800f322:	f023 0820 	bic.w	r8, r3, #32
 800f326:	bfbc      	itt	lt
 800f328:	4632      	movlt	r2, r6
 800f32a:	4616      	movlt	r6, r2
 800f32c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f330:	d005      	beq.n	800f33e <__cvt+0x42>
 800f332:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f336:	d100      	bne.n	800f33a <__cvt+0x3e>
 800f338:	3401      	adds	r4, #1
 800f33a:	2102      	movs	r1, #2
 800f33c:	e000      	b.n	800f340 <__cvt+0x44>
 800f33e:	2103      	movs	r1, #3
 800f340:	ab03      	add	r3, sp, #12
 800f342:	9301      	str	r3, [sp, #4]
 800f344:	ab02      	add	r3, sp, #8
 800f346:	9300      	str	r3, [sp, #0]
 800f348:	ec47 6b10 	vmov	d0, r6, r7
 800f34c:	4653      	mov	r3, sl
 800f34e:	4622      	mov	r2, r4
 800f350:	f000 fec6 	bl	80100e0 <_dtoa_r>
 800f354:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f358:	4605      	mov	r5, r0
 800f35a:	d119      	bne.n	800f390 <__cvt+0x94>
 800f35c:	f019 0f01 	tst.w	r9, #1
 800f360:	d00e      	beq.n	800f380 <__cvt+0x84>
 800f362:	eb00 0904 	add.w	r9, r0, r4
 800f366:	2200      	movs	r2, #0
 800f368:	2300      	movs	r3, #0
 800f36a:	4630      	mov	r0, r6
 800f36c:	4639      	mov	r1, r7
 800f36e:	f7f1 fbd3 	bl	8000b18 <__aeabi_dcmpeq>
 800f372:	b108      	cbz	r0, 800f378 <__cvt+0x7c>
 800f374:	f8cd 900c 	str.w	r9, [sp, #12]
 800f378:	2230      	movs	r2, #48	@ 0x30
 800f37a:	9b03      	ldr	r3, [sp, #12]
 800f37c:	454b      	cmp	r3, r9
 800f37e:	d31e      	bcc.n	800f3be <__cvt+0xc2>
 800f380:	9b03      	ldr	r3, [sp, #12]
 800f382:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f384:	1b5b      	subs	r3, r3, r5
 800f386:	4628      	mov	r0, r5
 800f388:	6013      	str	r3, [r2, #0]
 800f38a:	b004      	add	sp, #16
 800f38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f390:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f394:	eb00 0904 	add.w	r9, r0, r4
 800f398:	d1e5      	bne.n	800f366 <__cvt+0x6a>
 800f39a:	7803      	ldrb	r3, [r0, #0]
 800f39c:	2b30      	cmp	r3, #48	@ 0x30
 800f39e:	d10a      	bne.n	800f3b6 <__cvt+0xba>
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	4630      	mov	r0, r6
 800f3a6:	4639      	mov	r1, r7
 800f3a8:	f7f1 fbb6 	bl	8000b18 <__aeabi_dcmpeq>
 800f3ac:	b918      	cbnz	r0, 800f3b6 <__cvt+0xba>
 800f3ae:	f1c4 0401 	rsb	r4, r4, #1
 800f3b2:	f8ca 4000 	str.w	r4, [sl]
 800f3b6:	f8da 3000 	ldr.w	r3, [sl]
 800f3ba:	4499      	add	r9, r3
 800f3bc:	e7d3      	b.n	800f366 <__cvt+0x6a>
 800f3be:	1c59      	adds	r1, r3, #1
 800f3c0:	9103      	str	r1, [sp, #12]
 800f3c2:	701a      	strb	r2, [r3, #0]
 800f3c4:	e7d9      	b.n	800f37a <__cvt+0x7e>

0800f3c6 <__exponent>:
 800f3c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3c8:	2900      	cmp	r1, #0
 800f3ca:	bfba      	itte	lt
 800f3cc:	4249      	neglt	r1, r1
 800f3ce:	232d      	movlt	r3, #45	@ 0x2d
 800f3d0:	232b      	movge	r3, #43	@ 0x2b
 800f3d2:	2909      	cmp	r1, #9
 800f3d4:	7002      	strb	r2, [r0, #0]
 800f3d6:	7043      	strb	r3, [r0, #1]
 800f3d8:	dd29      	ble.n	800f42e <__exponent+0x68>
 800f3da:	f10d 0307 	add.w	r3, sp, #7
 800f3de:	461d      	mov	r5, r3
 800f3e0:	270a      	movs	r7, #10
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	fbb1 f6f7 	udiv	r6, r1, r7
 800f3e8:	fb07 1416 	mls	r4, r7, r6, r1
 800f3ec:	3430      	adds	r4, #48	@ 0x30
 800f3ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	2c63      	cmp	r4, #99	@ 0x63
 800f3f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f3fa:	4631      	mov	r1, r6
 800f3fc:	dcf1      	bgt.n	800f3e2 <__exponent+0x1c>
 800f3fe:	3130      	adds	r1, #48	@ 0x30
 800f400:	1e94      	subs	r4, r2, #2
 800f402:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f406:	1c41      	adds	r1, r0, #1
 800f408:	4623      	mov	r3, r4
 800f40a:	42ab      	cmp	r3, r5
 800f40c:	d30a      	bcc.n	800f424 <__exponent+0x5e>
 800f40e:	f10d 0309 	add.w	r3, sp, #9
 800f412:	1a9b      	subs	r3, r3, r2
 800f414:	42ac      	cmp	r4, r5
 800f416:	bf88      	it	hi
 800f418:	2300      	movhi	r3, #0
 800f41a:	3302      	adds	r3, #2
 800f41c:	4403      	add	r3, r0
 800f41e:	1a18      	subs	r0, r3, r0
 800f420:	b003      	add	sp, #12
 800f422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f424:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f428:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f42c:	e7ed      	b.n	800f40a <__exponent+0x44>
 800f42e:	2330      	movs	r3, #48	@ 0x30
 800f430:	3130      	adds	r1, #48	@ 0x30
 800f432:	7083      	strb	r3, [r0, #2]
 800f434:	70c1      	strb	r1, [r0, #3]
 800f436:	1d03      	adds	r3, r0, #4
 800f438:	e7f1      	b.n	800f41e <__exponent+0x58>
	...

0800f43c <_printf_float>:
 800f43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f440:	b08d      	sub	sp, #52	@ 0x34
 800f442:	460c      	mov	r4, r1
 800f444:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f448:	4616      	mov	r6, r2
 800f44a:	461f      	mov	r7, r3
 800f44c:	4605      	mov	r5, r0
 800f44e:	f000 fcd9 	bl	800fe04 <_localeconv_r>
 800f452:	6803      	ldr	r3, [r0, #0]
 800f454:	9304      	str	r3, [sp, #16]
 800f456:	4618      	mov	r0, r3
 800f458:	f7f0 ff32 	bl	80002c0 <strlen>
 800f45c:	2300      	movs	r3, #0
 800f45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f460:	f8d8 3000 	ldr.w	r3, [r8]
 800f464:	9005      	str	r0, [sp, #20]
 800f466:	3307      	adds	r3, #7
 800f468:	f023 0307 	bic.w	r3, r3, #7
 800f46c:	f103 0208 	add.w	r2, r3, #8
 800f470:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f474:	f8d4 b000 	ldr.w	fp, [r4]
 800f478:	f8c8 2000 	str.w	r2, [r8]
 800f47c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f480:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f484:	9307      	str	r3, [sp, #28]
 800f486:	f8cd 8018 	str.w	r8, [sp, #24]
 800f48a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f48e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f492:	4b9c      	ldr	r3, [pc, #624]	@ (800f704 <_printf_float+0x2c8>)
 800f494:	f04f 32ff 	mov.w	r2, #4294967295
 800f498:	f7f1 fb70 	bl	8000b7c <__aeabi_dcmpun>
 800f49c:	bb70      	cbnz	r0, 800f4fc <_printf_float+0xc0>
 800f49e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4a2:	4b98      	ldr	r3, [pc, #608]	@ (800f704 <_printf_float+0x2c8>)
 800f4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f4a8:	f7f1 fb4a 	bl	8000b40 <__aeabi_dcmple>
 800f4ac:	bb30      	cbnz	r0, 800f4fc <_printf_float+0xc0>
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	4640      	mov	r0, r8
 800f4b4:	4649      	mov	r1, r9
 800f4b6:	f7f1 fb39 	bl	8000b2c <__aeabi_dcmplt>
 800f4ba:	b110      	cbz	r0, 800f4c2 <_printf_float+0x86>
 800f4bc:	232d      	movs	r3, #45	@ 0x2d
 800f4be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4c2:	4a91      	ldr	r2, [pc, #580]	@ (800f708 <_printf_float+0x2cc>)
 800f4c4:	4b91      	ldr	r3, [pc, #580]	@ (800f70c <_printf_float+0x2d0>)
 800f4c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f4ca:	bf8c      	ite	hi
 800f4cc:	4690      	movhi	r8, r2
 800f4ce:	4698      	movls	r8, r3
 800f4d0:	2303      	movs	r3, #3
 800f4d2:	6123      	str	r3, [r4, #16]
 800f4d4:	f02b 0304 	bic.w	r3, fp, #4
 800f4d8:	6023      	str	r3, [r4, #0]
 800f4da:	f04f 0900 	mov.w	r9, #0
 800f4de:	9700      	str	r7, [sp, #0]
 800f4e0:	4633      	mov	r3, r6
 800f4e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	f000 f9d2 	bl	800f890 <_printf_common>
 800f4ec:	3001      	adds	r0, #1
 800f4ee:	f040 808d 	bne.w	800f60c <_printf_float+0x1d0>
 800f4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f6:	b00d      	add	sp, #52	@ 0x34
 800f4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4fc:	4642      	mov	r2, r8
 800f4fe:	464b      	mov	r3, r9
 800f500:	4640      	mov	r0, r8
 800f502:	4649      	mov	r1, r9
 800f504:	f7f1 fb3a 	bl	8000b7c <__aeabi_dcmpun>
 800f508:	b140      	cbz	r0, 800f51c <_printf_float+0xe0>
 800f50a:	464b      	mov	r3, r9
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	bfbc      	itt	lt
 800f510:	232d      	movlt	r3, #45	@ 0x2d
 800f512:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f516:	4a7e      	ldr	r2, [pc, #504]	@ (800f710 <_printf_float+0x2d4>)
 800f518:	4b7e      	ldr	r3, [pc, #504]	@ (800f714 <_printf_float+0x2d8>)
 800f51a:	e7d4      	b.n	800f4c6 <_printf_float+0x8a>
 800f51c:	6863      	ldr	r3, [r4, #4]
 800f51e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f522:	9206      	str	r2, [sp, #24]
 800f524:	1c5a      	adds	r2, r3, #1
 800f526:	d13b      	bne.n	800f5a0 <_printf_float+0x164>
 800f528:	2306      	movs	r3, #6
 800f52a:	6063      	str	r3, [r4, #4]
 800f52c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f530:	2300      	movs	r3, #0
 800f532:	6022      	str	r2, [r4, #0]
 800f534:	9303      	str	r3, [sp, #12]
 800f536:	ab0a      	add	r3, sp, #40	@ 0x28
 800f538:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f53c:	ab09      	add	r3, sp, #36	@ 0x24
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	6861      	ldr	r1, [r4, #4]
 800f542:	ec49 8b10 	vmov	d0, r8, r9
 800f546:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f54a:	4628      	mov	r0, r5
 800f54c:	f7ff fed6 	bl	800f2fc <__cvt>
 800f550:	9b06      	ldr	r3, [sp, #24]
 800f552:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f554:	2b47      	cmp	r3, #71	@ 0x47
 800f556:	4680      	mov	r8, r0
 800f558:	d129      	bne.n	800f5ae <_printf_float+0x172>
 800f55a:	1cc8      	adds	r0, r1, #3
 800f55c:	db02      	blt.n	800f564 <_printf_float+0x128>
 800f55e:	6863      	ldr	r3, [r4, #4]
 800f560:	4299      	cmp	r1, r3
 800f562:	dd41      	ble.n	800f5e8 <_printf_float+0x1ac>
 800f564:	f1aa 0a02 	sub.w	sl, sl, #2
 800f568:	fa5f fa8a 	uxtb.w	sl, sl
 800f56c:	3901      	subs	r1, #1
 800f56e:	4652      	mov	r2, sl
 800f570:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f574:	9109      	str	r1, [sp, #36]	@ 0x24
 800f576:	f7ff ff26 	bl	800f3c6 <__exponent>
 800f57a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f57c:	1813      	adds	r3, r2, r0
 800f57e:	2a01      	cmp	r2, #1
 800f580:	4681      	mov	r9, r0
 800f582:	6123      	str	r3, [r4, #16]
 800f584:	dc02      	bgt.n	800f58c <_printf_float+0x150>
 800f586:	6822      	ldr	r2, [r4, #0]
 800f588:	07d2      	lsls	r2, r2, #31
 800f58a:	d501      	bpl.n	800f590 <_printf_float+0x154>
 800f58c:	3301      	adds	r3, #1
 800f58e:	6123      	str	r3, [r4, #16]
 800f590:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f594:	2b00      	cmp	r3, #0
 800f596:	d0a2      	beq.n	800f4de <_printf_float+0xa2>
 800f598:	232d      	movs	r3, #45	@ 0x2d
 800f59a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f59e:	e79e      	b.n	800f4de <_printf_float+0xa2>
 800f5a0:	9a06      	ldr	r2, [sp, #24]
 800f5a2:	2a47      	cmp	r2, #71	@ 0x47
 800f5a4:	d1c2      	bne.n	800f52c <_printf_float+0xf0>
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1c0      	bne.n	800f52c <_printf_float+0xf0>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e7bd      	b.n	800f52a <_printf_float+0xee>
 800f5ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f5b2:	d9db      	bls.n	800f56c <_printf_float+0x130>
 800f5b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f5b8:	d118      	bne.n	800f5ec <_printf_float+0x1b0>
 800f5ba:	2900      	cmp	r1, #0
 800f5bc:	6863      	ldr	r3, [r4, #4]
 800f5be:	dd0b      	ble.n	800f5d8 <_printf_float+0x19c>
 800f5c0:	6121      	str	r1, [r4, #16]
 800f5c2:	b913      	cbnz	r3, 800f5ca <_printf_float+0x18e>
 800f5c4:	6822      	ldr	r2, [r4, #0]
 800f5c6:	07d0      	lsls	r0, r2, #31
 800f5c8:	d502      	bpl.n	800f5d0 <_printf_float+0x194>
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	440b      	add	r3, r1
 800f5ce:	6123      	str	r3, [r4, #16]
 800f5d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f5d2:	f04f 0900 	mov.w	r9, #0
 800f5d6:	e7db      	b.n	800f590 <_printf_float+0x154>
 800f5d8:	b913      	cbnz	r3, 800f5e0 <_printf_float+0x1a4>
 800f5da:	6822      	ldr	r2, [r4, #0]
 800f5dc:	07d2      	lsls	r2, r2, #31
 800f5de:	d501      	bpl.n	800f5e4 <_printf_float+0x1a8>
 800f5e0:	3302      	adds	r3, #2
 800f5e2:	e7f4      	b.n	800f5ce <_printf_float+0x192>
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	e7f2      	b.n	800f5ce <_printf_float+0x192>
 800f5e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f5ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5ee:	4299      	cmp	r1, r3
 800f5f0:	db05      	blt.n	800f5fe <_printf_float+0x1c2>
 800f5f2:	6823      	ldr	r3, [r4, #0]
 800f5f4:	6121      	str	r1, [r4, #16]
 800f5f6:	07d8      	lsls	r0, r3, #31
 800f5f8:	d5ea      	bpl.n	800f5d0 <_printf_float+0x194>
 800f5fa:	1c4b      	adds	r3, r1, #1
 800f5fc:	e7e7      	b.n	800f5ce <_printf_float+0x192>
 800f5fe:	2900      	cmp	r1, #0
 800f600:	bfd4      	ite	le
 800f602:	f1c1 0202 	rsble	r2, r1, #2
 800f606:	2201      	movgt	r2, #1
 800f608:	4413      	add	r3, r2
 800f60a:	e7e0      	b.n	800f5ce <_printf_float+0x192>
 800f60c:	6823      	ldr	r3, [r4, #0]
 800f60e:	055a      	lsls	r2, r3, #21
 800f610:	d407      	bmi.n	800f622 <_printf_float+0x1e6>
 800f612:	6923      	ldr	r3, [r4, #16]
 800f614:	4642      	mov	r2, r8
 800f616:	4631      	mov	r1, r6
 800f618:	4628      	mov	r0, r5
 800f61a:	47b8      	blx	r7
 800f61c:	3001      	adds	r0, #1
 800f61e:	d12b      	bne.n	800f678 <_printf_float+0x23c>
 800f620:	e767      	b.n	800f4f2 <_printf_float+0xb6>
 800f622:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f626:	f240 80dd 	bls.w	800f7e4 <_printf_float+0x3a8>
 800f62a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f62e:	2200      	movs	r2, #0
 800f630:	2300      	movs	r3, #0
 800f632:	f7f1 fa71 	bl	8000b18 <__aeabi_dcmpeq>
 800f636:	2800      	cmp	r0, #0
 800f638:	d033      	beq.n	800f6a2 <_printf_float+0x266>
 800f63a:	4a37      	ldr	r2, [pc, #220]	@ (800f718 <_printf_float+0x2dc>)
 800f63c:	2301      	movs	r3, #1
 800f63e:	4631      	mov	r1, r6
 800f640:	4628      	mov	r0, r5
 800f642:	47b8      	blx	r7
 800f644:	3001      	adds	r0, #1
 800f646:	f43f af54 	beq.w	800f4f2 <_printf_float+0xb6>
 800f64a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f64e:	4543      	cmp	r3, r8
 800f650:	db02      	blt.n	800f658 <_printf_float+0x21c>
 800f652:	6823      	ldr	r3, [r4, #0]
 800f654:	07d8      	lsls	r0, r3, #31
 800f656:	d50f      	bpl.n	800f678 <_printf_float+0x23c>
 800f658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f65c:	4631      	mov	r1, r6
 800f65e:	4628      	mov	r0, r5
 800f660:	47b8      	blx	r7
 800f662:	3001      	adds	r0, #1
 800f664:	f43f af45 	beq.w	800f4f2 <_printf_float+0xb6>
 800f668:	f04f 0900 	mov.w	r9, #0
 800f66c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f670:	f104 0a1a 	add.w	sl, r4, #26
 800f674:	45c8      	cmp	r8, r9
 800f676:	dc09      	bgt.n	800f68c <_printf_float+0x250>
 800f678:	6823      	ldr	r3, [r4, #0]
 800f67a:	079b      	lsls	r3, r3, #30
 800f67c:	f100 8103 	bmi.w	800f886 <_printf_float+0x44a>
 800f680:	68e0      	ldr	r0, [r4, #12]
 800f682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f684:	4298      	cmp	r0, r3
 800f686:	bfb8      	it	lt
 800f688:	4618      	movlt	r0, r3
 800f68a:	e734      	b.n	800f4f6 <_printf_float+0xba>
 800f68c:	2301      	movs	r3, #1
 800f68e:	4652      	mov	r2, sl
 800f690:	4631      	mov	r1, r6
 800f692:	4628      	mov	r0, r5
 800f694:	47b8      	blx	r7
 800f696:	3001      	adds	r0, #1
 800f698:	f43f af2b 	beq.w	800f4f2 <_printf_float+0xb6>
 800f69c:	f109 0901 	add.w	r9, r9, #1
 800f6a0:	e7e8      	b.n	800f674 <_printf_float+0x238>
 800f6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	dc39      	bgt.n	800f71c <_printf_float+0x2e0>
 800f6a8:	4a1b      	ldr	r2, [pc, #108]	@ (800f718 <_printf_float+0x2dc>)
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	4631      	mov	r1, r6
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	47b8      	blx	r7
 800f6b2:	3001      	adds	r0, #1
 800f6b4:	f43f af1d 	beq.w	800f4f2 <_printf_float+0xb6>
 800f6b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f6bc:	ea59 0303 	orrs.w	r3, r9, r3
 800f6c0:	d102      	bne.n	800f6c8 <_printf_float+0x28c>
 800f6c2:	6823      	ldr	r3, [r4, #0]
 800f6c4:	07d9      	lsls	r1, r3, #31
 800f6c6:	d5d7      	bpl.n	800f678 <_printf_float+0x23c>
 800f6c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6cc:	4631      	mov	r1, r6
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	47b8      	blx	r7
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	f43f af0d 	beq.w	800f4f2 <_printf_float+0xb6>
 800f6d8:	f04f 0a00 	mov.w	sl, #0
 800f6dc:	f104 0b1a 	add.w	fp, r4, #26
 800f6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6e2:	425b      	negs	r3, r3
 800f6e4:	4553      	cmp	r3, sl
 800f6e6:	dc01      	bgt.n	800f6ec <_printf_float+0x2b0>
 800f6e8:	464b      	mov	r3, r9
 800f6ea:	e793      	b.n	800f614 <_printf_float+0x1d8>
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	465a      	mov	r2, fp
 800f6f0:	4631      	mov	r1, r6
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	47b8      	blx	r7
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	f43f aefb 	beq.w	800f4f2 <_printf_float+0xb6>
 800f6fc:	f10a 0a01 	add.w	sl, sl, #1
 800f700:	e7ee      	b.n	800f6e0 <_printf_float+0x2a4>
 800f702:	bf00      	nop
 800f704:	7fefffff 	.word	0x7fefffff
 800f708:	080123cc 	.word	0x080123cc
 800f70c:	080123c8 	.word	0x080123c8
 800f710:	080123d4 	.word	0x080123d4
 800f714:	080123d0 	.word	0x080123d0
 800f718:	080123d8 	.word	0x080123d8
 800f71c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f71e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f722:	4553      	cmp	r3, sl
 800f724:	bfa8      	it	ge
 800f726:	4653      	movge	r3, sl
 800f728:	2b00      	cmp	r3, #0
 800f72a:	4699      	mov	r9, r3
 800f72c:	dc36      	bgt.n	800f79c <_printf_float+0x360>
 800f72e:	f04f 0b00 	mov.w	fp, #0
 800f732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f736:	f104 021a 	add.w	r2, r4, #26
 800f73a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f73c:	9306      	str	r3, [sp, #24]
 800f73e:	eba3 0309 	sub.w	r3, r3, r9
 800f742:	455b      	cmp	r3, fp
 800f744:	dc31      	bgt.n	800f7aa <_printf_float+0x36e>
 800f746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f748:	459a      	cmp	sl, r3
 800f74a:	dc3a      	bgt.n	800f7c2 <_printf_float+0x386>
 800f74c:	6823      	ldr	r3, [r4, #0]
 800f74e:	07da      	lsls	r2, r3, #31
 800f750:	d437      	bmi.n	800f7c2 <_printf_float+0x386>
 800f752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f754:	ebaa 0903 	sub.w	r9, sl, r3
 800f758:	9b06      	ldr	r3, [sp, #24]
 800f75a:	ebaa 0303 	sub.w	r3, sl, r3
 800f75e:	4599      	cmp	r9, r3
 800f760:	bfa8      	it	ge
 800f762:	4699      	movge	r9, r3
 800f764:	f1b9 0f00 	cmp.w	r9, #0
 800f768:	dc33      	bgt.n	800f7d2 <_printf_float+0x396>
 800f76a:	f04f 0800 	mov.w	r8, #0
 800f76e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f772:	f104 0b1a 	add.w	fp, r4, #26
 800f776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f778:	ebaa 0303 	sub.w	r3, sl, r3
 800f77c:	eba3 0309 	sub.w	r3, r3, r9
 800f780:	4543      	cmp	r3, r8
 800f782:	f77f af79 	ble.w	800f678 <_printf_float+0x23c>
 800f786:	2301      	movs	r3, #1
 800f788:	465a      	mov	r2, fp
 800f78a:	4631      	mov	r1, r6
 800f78c:	4628      	mov	r0, r5
 800f78e:	47b8      	blx	r7
 800f790:	3001      	adds	r0, #1
 800f792:	f43f aeae 	beq.w	800f4f2 <_printf_float+0xb6>
 800f796:	f108 0801 	add.w	r8, r8, #1
 800f79a:	e7ec      	b.n	800f776 <_printf_float+0x33a>
 800f79c:	4642      	mov	r2, r8
 800f79e:	4631      	mov	r1, r6
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	47b8      	blx	r7
 800f7a4:	3001      	adds	r0, #1
 800f7a6:	d1c2      	bne.n	800f72e <_printf_float+0x2f2>
 800f7a8:	e6a3      	b.n	800f4f2 <_printf_float+0xb6>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	4631      	mov	r1, r6
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	9206      	str	r2, [sp, #24]
 800f7b2:	47b8      	blx	r7
 800f7b4:	3001      	adds	r0, #1
 800f7b6:	f43f ae9c 	beq.w	800f4f2 <_printf_float+0xb6>
 800f7ba:	9a06      	ldr	r2, [sp, #24]
 800f7bc:	f10b 0b01 	add.w	fp, fp, #1
 800f7c0:	e7bb      	b.n	800f73a <_printf_float+0x2fe>
 800f7c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7c6:	4631      	mov	r1, r6
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	47b8      	blx	r7
 800f7cc:	3001      	adds	r0, #1
 800f7ce:	d1c0      	bne.n	800f752 <_printf_float+0x316>
 800f7d0:	e68f      	b.n	800f4f2 <_printf_float+0xb6>
 800f7d2:	9a06      	ldr	r2, [sp, #24]
 800f7d4:	464b      	mov	r3, r9
 800f7d6:	4442      	add	r2, r8
 800f7d8:	4631      	mov	r1, r6
 800f7da:	4628      	mov	r0, r5
 800f7dc:	47b8      	blx	r7
 800f7de:	3001      	adds	r0, #1
 800f7e0:	d1c3      	bne.n	800f76a <_printf_float+0x32e>
 800f7e2:	e686      	b.n	800f4f2 <_printf_float+0xb6>
 800f7e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f7e8:	f1ba 0f01 	cmp.w	sl, #1
 800f7ec:	dc01      	bgt.n	800f7f2 <_printf_float+0x3b6>
 800f7ee:	07db      	lsls	r3, r3, #31
 800f7f0:	d536      	bpl.n	800f860 <_printf_float+0x424>
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	4642      	mov	r2, r8
 800f7f6:	4631      	mov	r1, r6
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	47b8      	blx	r7
 800f7fc:	3001      	adds	r0, #1
 800f7fe:	f43f ae78 	beq.w	800f4f2 <_printf_float+0xb6>
 800f802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f806:	4631      	mov	r1, r6
 800f808:	4628      	mov	r0, r5
 800f80a:	47b8      	blx	r7
 800f80c:	3001      	adds	r0, #1
 800f80e:	f43f ae70 	beq.w	800f4f2 <_printf_float+0xb6>
 800f812:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f816:	2200      	movs	r2, #0
 800f818:	2300      	movs	r3, #0
 800f81a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f81e:	f7f1 f97b 	bl	8000b18 <__aeabi_dcmpeq>
 800f822:	b9c0      	cbnz	r0, 800f856 <_printf_float+0x41a>
 800f824:	4653      	mov	r3, sl
 800f826:	f108 0201 	add.w	r2, r8, #1
 800f82a:	4631      	mov	r1, r6
 800f82c:	4628      	mov	r0, r5
 800f82e:	47b8      	blx	r7
 800f830:	3001      	adds	r0, #1
 800f832:	d10c      	bne.n	800f84e <_printf_float+0x412>
 800f834:	e65d      	b.n	800f4f2 <_printf_float+0xb6>
 800f836:	2301      	movs	r3, #1
 800f838:	465a      	mov	r2, fp
 800f83a:	4631      	mov	r1, r6
 800f83c:	4628      	mov	r0, r5
 800f83e:	47b8      	blx	r7
 800f840:	3001      	adds	r0, #1
 800f842:	f43f ae56 	beq.w	800f4f2 <_printf_float+0xb6>
 800f846:	f108 0801 	add.w	r8, r8, #1
 800f84a:	45d0      	cmp	r8, sl
 800f84c:	dbf3      	blt.n	800f836 <_printf_float+0x3fa>
 800f84e:	464b      	mov	r3, r9
 800f850:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f854:	e6df      	b.n	800f616 <_printf_float+0x1da>
 800f856:	f04f 0800 	mov.w	r8, #0
 800f85a:	f104 0b1a 	add.w	fp, r4, #26
 800f85e:	e7f4      	b.n	800f84a <_printf_float+0x40e>
 800f860:	2301      	movs	r3, #1
 800f862:	4642      	mov	r2, r8
 800f864:	e7e1      	b.n	800f82a <_printf_float+0x3ee>
 800f866:	2301      	movs	r3, #1
 800f868:	464a      	mov	r2, r9
 800f86a:	4631      	mov	r1, r6
 800f86c:	4628      	mov	r0, r5
 800f86e:	47b8      	blx	r7
 800f870:	3001      	adds	r0, #1
 800f872:	f43f ae3e 	beq.w	800f4f2 <_printf_float+0xb6>
 800f876:	f108 0801 	add.w	r8, r8, #1
 800f87a:	68e3      	ldr	r3, [r4, #12]
 800f87c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f87e:	1a5b      	subs	r3, r3, r1
 800f880:	4543      	cmp	r3, r8
 800f882:	dcf0      	bgt.n	800f866 <_printf_float+0x42a>
 800f884:	e6fc      	b.n	800f680 <_printf_float+0x244>
 800f886:	f04f 0800 	mov.w	r8, #0
 800f88a:	f104 0919 	add.w	r9, r4, #25
 800f88e:	e7f4      	b.n	800f87a <_printf_float+0x43e>

0800f890 <_printf_common>:
 800f890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f894:	4616      	mov	r6, r2
 800f896:	4698      	mov	r8, r3
 800f898:	688a      	ldr	r2, [r1, #8]
 800f89a:	690b      	ldr	r3, [r1, #16]
 800f89c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	bfb8      	it	lt
 800f8a4:	4613      	movlt	r3, r2
 800f8a6:	6033      	str	r3, [r6, #0]
 800f8a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f8ac:	4607      	mov	r7, r0
 800f8ae:	460c      	mov	r4, r1
 800f8b0:	b10a      	cbz	r2, 800f8b6 <_printf_common+0x26>
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	6033      	str	r3, [r6, #0]
 800f8b6:	6823      	ldr	r3, [r4, #0]
 800f8b8:	0699      	lsls	r1, r3, #26
 800f8ba:	bf42      	ittt	mi
 800f8bc:	6833      	ldrmi	r3, [r6, #0]
 800f8be:	3302      	addmi	r3, #2
 800f8c0:	6033      	strmi	r3, [r6, #0]
 800f8c2:	6825      	ldr	r5, [r4, #0]
 800f8c4:	f015 0506 	ands.w	r5, r5, #6
 800f8c8:	d106      	bne.n	800f8d8 <_printf_common+0x48>
 800f8ca:	f104 0a19 	add.w	sl, r4, #25
 800f8ce:	68e3      	ldr	r3, [r4, #12]
 800f8d0:	6832      	ldr	r2, [r6, #0]
 800f8d2:	1a9b      	subs	r3, r3, r2
 800f8d4:	42ab      	cmp	r3, r5
 800f8d6:	dc26      	bgt.n	800f926 <_printf_common+0x96>
 800f8d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f8dc:	6822      	ldr	r2, [r4, #0]
 800f8de:	3b00      	subs	r3, #0
 800f8e0:	bf18      	it	ne
 800f8e2:	2301      	movne	r3, #1
 800f8e4:	0692      	lsls	r2, r2, #26
 800f8e6:	d42b      	bmi.n	800f940 <_printf_common+0xb0>
 800f8e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f8ec:	4641      	mov	r1, r8
 800f8ee:	4638      	mov	r0, r7
 800f8f0:	47c8      	blx	r9
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	d01e      	beq.n	800f934 <_printf_common+0xa4>
 800f8f6:	6823      	ldr	r3, [r4, #0]
 800f8f8:	6922      	ldr	r2, [r4, #16]
 800f8fa:	f003 0306 	and.w	r3, r3, #6
 800f8fe:	2b04      	cmp	r3, #4
 800f900:	bf02      	ittt	eq
 800f902:	68e5      	ldreq	r5, [r4, #12]
 800f904:	6833      	ldreq	r3, [r6, #0]
 800f906:	1aed      	subeq	r5, r5, r3
 800f908:	68a3      	ldr	r3, [r4, #8]
 800f90a:	bf0c      	ite	eq
 800f90c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f910:	2500      	movne	r5, #0
 800f912:	4293      	cmp	r3, r2
 800f914:	bfc4      	itt	gt
 800f916:	1a9b      	subgt	r3, r3, r2
 800f918:	18ed      	addgt	r5, r5, r3
 800f91a:	2600      	movs	r6, #0
 800f91c:	341a      	adds	r4, #26
 800f91e:	42b5      	cmp	r5, r6
 800f920:	d11a      	bne.n	800f958 <_printf_common+0xc8>
 800f922:	2000      	movs	r0, #0
 800f924:	e008      	b.n	800f938 <_printf_common+0xa8>
 800f926:	2301      	movs	r3, #1
 800f928:	4652      	mov	r2, sl
 800f92a:	4641      	mov	r1, r8
 800f92c:	4638      	mov	r0, r7
 800f92e:	47c8      	blx	r9
 800f930:	3001      	adds	r0, #1
 800f932:	d103      	bne.n	800f93c <_printf_common+0xac>
 800f934:	f04f 30ff 	mov.w	r0, #4294967295
 800f938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f93c:	3501      	adds	r5, #1
 800f93e:	e7c6      	b.n	800f8ce <_printf_common+0x3e>
 800f940:	18e1      	adds	r1, r4, r3
 800f942:	1c5a      	adds	r2, r3, #1
 800f944:	2030      	movs	r0, #48	@ 0x30
 800f946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f94a:	4422      	add	r2, r4
 800f94c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f954:	3302      	adds	r3, #2
 800f956:	e7c7      	b.n	800f8e8 <_printf_common+0x58>
 800f958:	2301      	movs	r3, #1
 800f95a:	4622      	mov	r2, r4
 800f95c:	4641      	mov	r1, r8
 800f95e:	4638      	mov	r0, r7
 800f960:	47c8      	blx	r9
 800f962:	3001      	adds	r0, #1
 800f964:	d0e6      	beq.n	800f934 <_printf_common+0xa4>
 800f966:	3601      	adds	r6, #1
 800f968:	e7d9      	b.n	800f91e <_printf_common+0x8e>
	...

0800f96c <_printf_i>:
 800f96c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f970:	7e0f      	ldrb	r7, [r1, #24]
 800f972:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f974:	2f78      	cmp	r7, #120	@ 0x78
 800f976:	4691      	mov	r9, r2
 800f978:	4680      	mov	r8, r0
 800f97a:	460c      	mov	r4, r1
 800f97c:	469a      	mov	sl, r3
 800f97e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f982:	d807      	bhi.n	800f994 <_printf_i+0x28>
 800f984:	2f62      	cmp	r7, #98	@ 0x62
 800f986:	d80a      	bhi.n	800f99e <_printf_i+0x32>
 800f988:	2f00      	cmp	r7, #0
 800f98a:	f000 80d1 	beq.w	800fb30 <_printf_i+0x1c4>
 800f98e:	2f58      	cmp	r7, #88	@ 0x58
 800f990:	f000 80b8 	beq.w	800fb04 <_printf_i+0x198>
 800f994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f99c:	e03a      	b.n	800fa14 <_printf_i+0xa8>
 800f99e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f9a2:	2b15      	cmp	r3, #21
 800f9a4:	d8f6      	bhi.n	800f994 <_printf_i+0x28>
 800f9a6:	a101      	add	r1, pc, #4	@ (adr r1, 800f9ac <_printf_i+0x40>)
 800f9a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9ac:	0800fa05 	.word	0x0800fa05
 800f9b0:	0800fa19 	.word	0x0800fa19
 800f9b4:	0800f995 	.word	0x0800f995
 800f9b8:	0800f995 	.word	0x0800f995
 800f9bc:	0800f995 	.word	0x0800f995
 800f9c0:	0800f995 	.word	0x0800f995
 800f9c4:	0800fa19 	.word	0x0800fa19
 800f9c8:	0800f995 	.word	0x0800f995
 800f9cc:	0800f995 	.word	0x0800f995
 800f9d0:	0800f995 	.word	0x0800f995
 800f9d4:	0800f995 	.word	0x0800f995
 800f9d8:	0800fb17 	.word	0x0800fb17
 800f9dc:	0800fa43 	.word	0x0800fa43
 800f9e0:	0800fad1 	.word	0x0800fad1
 800f9e4:	0800f995 	.word	0x0800f995
 800f9e8:	0800f995 	.word	0x0800f995
 800f9ec:	0800fb39 	.word	0x0800fb39
 800f9f0:	0800f995 	.word	0x0800f995
 800f9f4:	0800fa43 	.word	0x0800fa43
 800f9f8:	0800f995 	.word	0x0800f995
 800f9fc:	0800f995 	.word	0x0800f995
 800fa00:	0800fad9 	.word	0x0800fad9
 800fa04:	6833      	ldr	r3, [r6, #0]
 800fa06:	1d1a      	adds	r2, r3, #4
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	6032      	str	r2, [r6, #0]
 800fa0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fa10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fa14:	2301      	movs	r3, #1
 800fa16:	e09c      	b.n	800fb52 <_printf_i+0x1e6>
 800fa18:	6833      	ldr	r3, [r6, #0]
 800fa1a:	6820      	ldr	r0, [r4, #0]
 800fa1c:	1d19      	adds	r1, r3, #4
 800fa1e:	6031      	str	r1, [r6, #0]
 800fa20:	0606      	lsls	r6, r0, #24
 800fa22:	d501      	bpl.n	800fa28 <_printf_i+0xbc>
 800fa24:	681d      	ldr	r5, [r3, #0]
 800fa26:	e003      	b.n	800fa30 <_printf_i+0xc4>
 800fa28:	0645      	lsls	r5, r0, #25
 800fa2a:	d5fb      	bpl.n	800fa24 <_printf_i+0xb8>
 800fa2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fa30:	2d00      	cmp	r5, #0
 800fa32:	da03      	bge.n	800fa3c <_printf_i+0xd0>
 800fa34:	232d      	movs	r3, #45	@ 0x2d
 800fa36:	426d      	negs	r5, r5
 800fa38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa3c:	4858      	ldr	r0, [pc, #352]	@ (800fba0 <_printf_i+0x234>)
 800fa3e:	230a      	movs	r3, #10
 800fa40:	e011      	b.n	800fa66 <_printf_i+0xfa>
 800fa42:	6821      	ldr	r1, [r4, #0]
 800fa44:	6833      	ldr	r3, [r6, #0]
 800fa46:	0608      	lsls	r0, r1, #24
 800fa48:	f853 5b04 	ldr.w	r5, [r3], #4
 800fa4c:	d402      	bmi.n	800fa54 <_printf_i+0xe8>
 800fa4e:	0649      	lsls	r1, r1, #25
 800fa50:	bf48      	it	mi
 800fa52:	b2ad      	uxthmi	r5, r5
 800fa54:	2f6f      	cmp	r7, #111	@ 0x6f
 800fa56:	4852      	ldr	r0, [pc, #328]	@ (800fba0 <_printf_i+0x234>)
 800fa58:	6033      	str	r3, [r6, #0]
 800fa5a:	bf14      	ite	ne
 800fa5c:	230a      	movne	r3, #10
 800fa5e:	2308      	moveq	r3, #8
 800fa60:	2100      	movs	r1, #0
 800fa62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fa66:	6866      	ldr	r6, [r4, #4]
 800fa68:	60a6      	str	r6, [r4, #8]
 800fa6a:	2e00      	cmp	r6, #0
 800fa6c:	db05      	blt.n	800fa7a <_printf_i+0x10e>
 800fa6e:	6821      	ldr	r1, [r4, #0]
 800fa70:	432e      	orrs	r6, r5
 800fa72:	f021 0104 	bic.w	r1, r1, #4
 800fa76:	6021      	str	r1, [r4, #0]
 800fa78:	d04b      	beq.n	800fb12 <_printf_i+0x1a6>
 800fa7a:	4616      	mov	r6, r2
 800fa7c:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa80:	fb03 5711 	mls	r7, r3, r1, r5
 800fa84:	5dc7      	ldrb	r7, [r0, r7]
 800fa86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa8a:	462f      	mov	r7, r5
 800fa8c:	42bb      	cmp	r3, r7
 800fa8e:	460d      	mov	r5, r1
 800fa90:	d9f4      	bls.n	800fa7c <_printf_i+0x110>
 800fa92:	2b08      	cmp	r3, #8
 800fa94:	d10b      	bne.n	800faae <_printf_i+0x142>
 800fa96:	6823      	ldr	r3, [r4, #0]
 800fa98:	07df      	lsls	r7, r3, #31
 800fa9a:	d508      	bpl.n	800faae <_printf_i+0x142>
 800fa9c:	6923      	ldr	r3, [r4, #16]
 800fa9e:	6861      	ldr	r1, [r4, #4]
 800faa0:	4299      	cmp	r1, r3
 800faa2:	bfde      	ittt	le
 800faa4:	2330      	movle	r3, #48	@ 0x30
 800faa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800faaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800faae:	1b92      	subs	r2, r2, r6
 800fab0:	6122      	str	r2, [r4, #16]
 800fab2:	f8cd a000 	str.w	sl, [sp]
 800fab6:	464b      	mov	r3, r9
 800fab8:	aa03      	add	r2, sp, #12
 800faba:	4621      	mov	r1, r4
 800fabc:	4640      	mov	r0, r8
 800fabe:	f7ff fee7 	bl	800f890 <_printf_common>
 800fac2:	3001      	adds	r0, #1
 800fac4:	d14a      	bne.n	800fb5c <_printf_i+0x1f0>
 800fac6:	f04f 30ff 	mov.w	r0, #4294967295
 800faca:	b004      	add	sp, #16
 800facc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad0:	6823      	ldr	r3, [r4, #0]
 800fad2:	f043 0320 	orr.w	r3, r3, #32
 800fad6:	6023      	str	r3, [r4, #0]
 800fad8:	4832      	ldr	r0, [pc, #200]	@ (800fba4 <_printf_i+0x238>)
 800fada:	2778      	movs	r7, #120	@ 0x78
 800fadc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fae0:	6823      	ldr	r3, [r4, #0]
 800fae2:	6831      	ldr	r1, [r6, #0]
 800fae4:	061f      	lsls	r7, r3, #24
 800fae6:	f851 5b04 	ldr.w	r5, [r1], #4
 800faea:	d402      	bmi.n	800faf2 <_printf_i+0x186>
 800faec:	065f      	lsls	r7, r3, #25
 800faee:	bf48      	it	mi
 800faf0:	b2ad      	uxthmi	r5, r5
 800faf2:	6031      	str	r1, [r6, #0]
 800faf4:	07d9      	lsls	r1, r3, #31
 800faf6:	bf44      	itt	mi
 800faf8:	f043 0320 	orrmi.w	r3, r3, #32
 800fafc:	6023      	strmi	r3, [r4, #0]
 800fafe:	b11d      	cbz	r5, 800fb08 <_printf_i+0x19c>
 800fb00:	2310      	movs	r3, #16
 800fb02:	e7ad      	b.n	800fa60 <_printf_i+0xf4>
 800fb04:	4826      	ldr	r0, [pc, #152]	@ (800fba0 <_printf_i+0x234>)
 800fb06:	e7e9      	b.n	800fadc <_printf_i+0x170>
 800fb08:	6823      	ldr	r3, [r4, #0]
 800fb0a:	f023 0320 	bic.w	r3, r3, #32
 800fb0e:	6023      	str	r3, [r4, #0]
 800fb10:	e7f6      	b.n	800fb00 <_printf_i+0x194>
 800fb12:	4616      	mov	r6, r2
 800fb14:	e7bd      	b.n	800fa92 <_printf_i+0x126>
 800fb16:	6833      	ldr	r3, [r6, #0]
 800fb18:	6825      	ldr	r5, [r4, #0]
 800fb1a:	6961      	ldr	r1, [r4, #20]
 800fb1c:	1d18      	adds	r0, r3, #4
 800fb1e:	6030      	str	r0, [r6, #0]
 800fb20:	062e      	lsls	r6, r5, #24
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	d501      	bpl.n	800fb2a <_printf_i+0x1be>
 800fb26:	6019      	str	r1, [r3, #0]
 800fb28:	e002      	b.n	800fb30 <_printf_i+0x1c4>
 800fb2a:	0668      	lsls	r0, r5, #25
 800fb2c:	d5fb      	bpl.n	800fb26 <_printf_i+0x1ba>
 800fb2e:	8019      	strh	r1, [r3, #0]
 800fb30:	2300      	movs	r3, #0
 800fb32:	6123      	str	r3, [r4, #16]
 800fb34:	4616      	mov	r6, r2
 800fb36:	e7bc      	b.n	800fab2 <_printf_i+0x146>
 800fb38:	6833      	ldr	r3, [r6, #0]
 800fb3a:	1d1a      	adds	r2, r3, #4
 800fb3c:	6032      	str	r2, [r6, #0]
 800fb3e:	681e      	ldr	r6, [r3, #0]
 800fb40:	6862      	ldr	r2, [r4, #4]
 800fb42:	2100      	movs	r1, #0
 800fb44:	4630      	mov	r0, r6
 800fb46:	f7f0 fb6b 	bl	8000220 <memchr>
 800fb4a:	b108      	cbz	r0, 800fb50 <_printf_i+0x1e4>
 800fb4c:	1b80      	subs	r0, r0, r6
 800fb4e:	6060      	str	r0, [r4, #4]
 800fb50:	6863      	ldr	r3, [r4, #4]
 800fb52:	6123      	str	r3, [r4, #16]
 800fb54:	2300      	movs	r3, #0
 800fb56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb5a:	e7aa      	b.n	800fab2 <_printf_i+0x146>
 800fb5c:	6923      	ldr	r3, [r4, #16]
 800fb5e:	4632      	mov	r2, r6
 800fb60:	4649      	mov	r1, r9
 800fb62:	4640      	mov	r0, r8
 800fb64:	47d0      	blx	sl
 800fb66:	3001      	adds	r0, #1
 800fb68:	d0ad      	beq.n	800fac6 <_printf_i+0x15a>
 800fb6a:	6823      	ldr	r3, [r4, #0]
 800fb6c:	079b      	lsls	r3, r3, #30
 800fb6e:	d413      	bmi.n	800fb98 <_printf_i+0x22c>
 800fb70:	68e0      	ldr	r0, [r4, #12]
 800fb72:	9b03      	ldr	r3, [sp, #12]
 800fb74:	4298      	cmp	r0, r3
 800fb76:	bfb8      	it	lt
 800fb78:	4618      	movlt	r0, r3
 800fb7a:	e7a6      	b.n	800faca <_printf_i+0x15e>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	4632      	mov	r2, r6
 800fb80:	4649      	mov	r1, r9
 800fb82:	4640      	mov	r0, r8
 800fb84:	47d0      	blx	sl
 800fb86:	3001      	adds	r0, #1
 800fb88:	d09d      	beq.n	800fac6 <_printf_i+0x15a>
 800fb8a:	3501      	adds	r5, #1
 800fb8c:	68e3      	ldr	r3, [r4, #12]
 800fb8e:	9903      	ldr	r1, [sp, #12]
 800fb90:	1a5b      	subs	r3, r3, r1
 800fb92:	42ab      	cmp	r3, r5
 800fb94:	dcf2      	bgt.n	800fb7c <_printf_i+0x210>
 800fb96:	e7eb      	b.n	800fb70 <_printf_i+0x204>
 800fb98:	2500      	movs	r5, #0
 800fb9a:	f104 0619 	add.w	r6, r4, #25
 800fb9e:	e7f5      	b.n	800fb8c <_printf_i+0x220>
 800fba0:	080123da 	.word	0x080123da
 800fba4:	080123eb 	.word	0x080123eb

0800fba8 <std>:
 800fba8:	2300      	movs	r3, #0
 800fbaa:	b510      	push	{r4, lr}
 800fbac:	4604      	mov	r4, r0
 800fbae:	e9c0 3300 	strd	r3, r3, [r0]
 800fbb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fbb6:	6083      	str	r3, [r0, #8]
 800fbb8:	8181      	strh	r1, [r0, #12]
 800fbba:	6643      	str	r3, [r0, #100]	@ 0x64
 800fbbc:	81c2      	strh	r2, [r0, #14]
 800fbbe:	6183      	str	r3, [r0, #24]
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	2208      	movs	r2, #8
 800fbc4:	305c      	adds	r0, #92	@ 0x5c
 800fbc6:	f000 f915 	bl	800fdf4 <memset>
 800fbca:	4b0d      	ldr	r3, [pc, #52]	@ (800fc00 <std+0x58>)
 800fbcc:	6263      	str	r3, [r4, #36]	@ 0x24
 800fbce:	4b0d      	ldr	r3, [pc, #52]	@ (800fc04 <std+0x5c>)
 800fbd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fbd2:	4b0d      	ldr	r3, [pc, #52]	@ (800fc08 <std+0x60>)
 800fbd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800fc0c <std+0x64>)
 800fbd8:	6323      	str	r3, [r4, #48]	@ 0x30
 800fbda:	4b0d      	ldr	r3, [pc, #52]	@ (800fc10 <std+0x68>)
 800fbdc:	6224      	str	r4, [r4, #32]
 800fbde:	429c      	cmp	r4, r3
 800fbe0:	d006      	beq.n	800fbf0 <std+0x48>
 800fbe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fbe6:	4294      	cmp	r4, r2
 800fbe8:	d002      	beq.n	800fbf0 <std+0x48>
 800fbea:	33d0      	adds	r3, #208	@ 0xd0
 800fbec:	429c      	cmp	r4, r3
 800fbee:	d105      	bne.n	800fbfc <std+0x54>
 800fbf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbf8:	f000 b9d6 	b.w	800ffa8 <__retarget_lock_init_recursive>
 800fbfc:	bd10      	pop	{r4, pc}
 800fbfe:	bf00      	nop
 800fc00:	0800fd2d 	.word	0x0800fd2d
 800fc04:	0800fd4f 	.word	0x0800fd4f
 800fc08:	0800fd87 	.word	0x0800fd87
 800fc0c:	0800fdab 	.word	0x0800fdab
 800fc10:	2000a510 	.word	0x2000a510

0800fc14 <stdio_exit_handler>:
 800fc14:	4a02      	ldr	r2, [pc, #8]	@ (800fc20 <stdio_exit_handler+0xc>)
 800fc16:	4903      	ldr	r1, [pc, #12]	@ (800fc24 <stdio_exit_handler+0x10>)
 800fc18:	4803      	ldr	r0, [pc, #12]	@ (800fc28 <stdio_exit_handler+0x14>)
 800fc1a:	f000 b869 	b.w	800fcf0 <_fwalk_sglue>
 800fc1e:	bf00      	nop
 800fc20:	20000188 	.word	0x20000188
 800fc24:	0801192d 	.word	0x0801192d
 800fc28:	20000198 	.word	0x20000198

0800fc2c <cleanup_stdio>:
 800fc2c:	6841      	ldr	r1, [r0, #4]
 800fc2e:	4b0c      	ldr	r3, [pc, #48]	@ (800fc60 <cleanup_stdio+0x34>)
 800fc30:	4299      	cmp	r1, r3
 800fc32:	b510      	push	{r4, lr}
 800fc34:	4604      	mov	r4, r0
 800fc36:	d001      	beq.n	800fc3c <cleanup_stdio+0x10>
 800fc38:	f001 fe78 	bl	801192c <_fflush_r>
 800fc3c:	68a1      	ldr	r1, [r4, #8]
 800fc3e:	4b09      	ldr	r3, [pc, #36]	@ (800fc64 <cleanup_stdio+0x38>)
 800fc40:	4299      	cmp	r1, r3
 800fc42:	d002      	beq.n	800fc4a <cleanup_stdio+0x1e>
 800fc44:	4620      	mov	r0, r4
 800fc46:	f001 fe71 	bl	801192c <_fflush_r>
 800fc4a:	68e1      	ldr	r1, [r4, #12]
 800fc4c:	4b06      	ldr	r3, [pc, #24]	@ (800fc68 <cleanup_stdio+0x3c>)
 800fc4e:	4299      	cmp	r1, r3
 800fc50:	d004      	beq.n	800fc5c <cleanup_stdio+0x30>
 800fc52:	4620      	mov	r0, r4
 800fc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc58:	f001 be68 	b.w	801192c <_fflush_r>
 800fc5c:	bd10      	pop	{r4, pc}
 800fc5e:	bf00      	nop
 800fc60:	2000a510 	.word	0x2000a510
 800fc64:	2000a578 	.word	0x2000a578
 800fc68:	2000a5e0 	.word	0x2000a5e0

0800fc6c <global_stdio_init.part.0>:
 800fc6c:	b510      	push	{r4, lr}
 800fc6e:	4b0b      	ldr	r3, [pc, #44]	@ (800fc9c <global_stdio_init.part.0+0x30>)
 800fc70:	4c0b      	ldr	r4, [pc, #44]	@ (800fca0 <global_stdio_init.part.0+0x34>)
 800fc72:	4a0c      	ldr	r2, [pc, #48]	@ (800fca4 <global_stdio_init.part.0+0x38>)
 800fc74:	601a      	str	r2, [r3, #0]
 800fc76:	4620      	mov	r0, r4
 800fc78:	2200      	movs	r2, #0
 800fc7a:	2104      	movs	r1, #4
 800fc7c:	f7ff ff94 	bl	800fba8 <std>
 800fc80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fc84:	2201      	movs	r2, #1
 800fc86:	2109      	movs	r1, #9
 800fc88:	f7ff ff8e 	bl	800fba8 <std>
 800fc8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fc90:	2202      	movs	r2, #2
 800fc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc96:	2112      	movs	r1, #18
 800fc98:	f7ff bf86 	b.w	800fba8 <std>
 800fc9c:	2000a648 	.word	0x2000a648
 800fca0:	2000a510 	.word	0x2000a510
 800fca4:	0800fc15 	.word	0x0800fc15

0800fca8 <__sfp_lock_acquire>:
 800fca8:	4801      	ldr	r0, [pc, #4]	@ (800fcb0 <__sfp_lock_acquire+0x8>)
 800fcaa:	f000 b97e 	b.w	800ffaa <__retarget_lock_acquire_recursive>
 800fcae:	bf00      	nop
 800fcb0:	2000a651 	.word	0x2000a651

0800fcb4 <__sfp_lock_release>:
 800fcb4:	4801      	ldr	r0, [pc, #4]	@ (800fcbc <__sfp_lock_release+0x8>)
 800fcb6:	f000 b979 	b.w	800ffac <__retarget_lock_release_recursive>
 800fcba:	bf00      	nop
 800fcbc:	2000a651 	.word	0x2000a651

0800fcc0 <__sinit>:
 800fcc0:	b510      	push	{r4, lr}
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	f7ff fff0 	bl	800fca8 <__sfp_lock_acquire>
 800fcc8:	6a23      	ldr	r3, [r4, #32]
 800fcca:	b11b      	cbz	r3, 800fcd4 <__sinit+0x14>
 800fccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcd0:	f7ff bff0 	b.w	800fcb4 <__sfp_lock_release>
 800fcd4:	4b04      	ldr	r3, [pc, #16]	@ (800fce8 <__sinit+0x28>)
 800fcd6:	6223      	str	r3, [r4, #32]
 800fcd8:	4b04      	ldr	r3, [pc, #16]	@ (800fcec <__sinit+0x2c>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1f5      	bne.n	800fccc <__sinit+0xc>
 800fce0:	f7ff ffc4 	bl	800fc6c <global_stdio_init.part.0>
 800fce4:	e7f2      	b.n	800fccc <__sinit+0xc>
 800fce6:	bf00      	nop
 800fce8:	0800fc2d 	.word	0x0800fc2d
 800fcec:	2000a648 	.word	0x2000a648

0800fcf0 <_fwalk_sglue>:
 800fcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcf4:	4607      	mov	r7, r0
 800fcf6:	4688      	mov	r8, r1
 800fcf8:	4614      	mov	r4, r2
 800fcfa:	2600      	movs	r6, #0
 800fcfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fd00:	f1b9 0901 	subs.w	r9, r9, #1
 800fd04:	d505      	bpl.n	800fd12 <_fwalk_sglue+0x22>
 800fd06:	6824      	ldr	r4, [r4, #0]
 800fd08:	2c00      	cmp	r4, #0
 800fd0a:	d1f7      	bne.n	800fcfc <_fwalk_sglue+0xc>
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd12:	89ab      	ldrh	r3, [r5, #12]
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d907      	bls.n	800fd28 <_fwalk_sglue+0x38>
 800fd18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	d003      	beq.n	800fd28 <_fwalk_sglue+0x38>
 800fd20:	4629      	mov	r1, r5
 800fd22:	4638      	mov	r0, r7
 800fd24:	47c0      	blx	r8
 800fd26:	4306      	orrs	r6, r0
 800fd28:	3568      	adds	r5, #104	@ 0x68
 800fd2a:	e7e9      	b.n	800fd00 <_fwalk_sglue+0x10>

0800fd2c <__sread>:
 800fd2c:	b510      	push	{r4, lr}
 800fd2e:	460c      	mov	r4, r1
 800fd30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd34:	f000 f8ea 	bl	800ff0c <_read_r>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	bfab      	itete	ge
 800fd3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fd3e:	89a3      	ldrhlt	r3, [r4, #12]
 800fd40:	181b      	addge	r3, r3, r0
 800fd42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fd46:	bfac      	ite	ge
 800fd48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fd4a:	81a3      	strhlt	r3, [r4, #12]
 800fd4c:	bd10      	pop	{r4, pc}

0800fd4e <__swrite>:
 800fd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd52:	461f      	mov	r7, r3
 800fd54:	898b      	ldrh	r3, [r1, #12]
 800fd56:	05db      	lsls	r3, r3, #23
 800fd58:	4605      	mov	r5, r0
 800fd5a:	460c      	mov	r4, r1
 800fd5c:	4616      	mov	r6, r2
 800fd5e:	d505      	bpl.n	800fd6c <__swrite+0x1e>
 800fd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd64:	2302      	movs	r3, #2
 800fd66:	2200      	movs	r2, #0
 800fd68:	f000 f8be 	bl	800fee8 <_lseek_r>
 800fd6c:	89a3      	ldrh	r3, [r4, #12]
 800fd6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fd76:	81a3      	strh	r3, [r4, #12]
 800fd78:	4632      	mov	r2, r6
 800fd7a:	463b      	mov	r3, r7
 800fd7c:	4628      	mov	r0, r5
 800fd7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd82:	f000 b8d5 	b.w	800ff30 <_write_r>

0800fd86 <__sseek>:
 800fd86:	b510      	push	{r4, lr}
 800fd88:	460c      	mov	r4, r1
 800fd8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd8e:	f000 f8ab 	bl	800fee8 <_lseek_r>
 800fd92:	1c43      	adds	r3, r0, #1
 800fd94:	89a3      	ldrh	r3, [r4, #12]
 800fd96:	bf15      	itete	ne
 800fd98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fd9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fd9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fda2:	81a3      	strheq	r3, [r4, #12]
 800fda4:	bf18      	it	ne
 800fda6:	81a3      	strhne	r3, [r4, #12]
 800fda8:	bd10      	pop	{r4, pc}

0800fdaa <__sclose>:
 800fdaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdae:	f000 b82d 	b.w	800fe0c <_close_r>
	...

0800fdb4 <_vsiprintf_r>:
 800fdb4:	b510      	push	{r4, lr}
 800fdb6:	b09a      	sub	sp, #104	@ 0x68
 800fdb8:	2400      	movs	r4, #0
 800fdba:	9100      	str	r1, [sp, #0]
 800fdbc:	9104      	str	r1, [sp, #16]
 800fdbe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fdc2:	9105      	str	r1, [sp, #20]
 800fdc4:	9102      	str	r1, [sp, #8]
 800fdc6:	4905      	ldr	r1, [pc, #20]	@ (800fddc <_vsiprintf_r+0x28>)
 800fdc8:	9103      	str	r1, [sp, #12]
 800fdca:	4669      	mov	r1, sp
 800fdcc:	9419      	str	r4, [sp, #100]	@ 0x64
 800fdce:	f001 fc2d 	bl	801162c <_svfiprintf_r>
 800fdd2:	9b00      	ldr	r3, [sp, #0]
 800fdd4:	701c      	strb	r4, [r3, #0]
 800fdd6:	b01a      	add	sp, #104	@ 0x68
 800fdd8:	bd10      	pop	{r4, pc}
 800fdda:	bf00      	nop
 800fddc:	ffff0208 	.word	0xffff0208

0800fde0 <vsiprintf>:
 800fde0:	4613      	mov	r3, r2
 800fde2:	460a      	mov	r2, r1
 800fde4:	4601      	mov	r1, r0
 800fde6:	4802      	ldr	r0, [pc, #8]	@ (800fdf0 <vsiprintf+0x10>)
 800fde8:	6800      	ldr	r0, [r0, #0]
 800fdea:	f7ff bfe3 	b.w	800fdb4 <_vsiprintf_r>
 800fdee:	bf00      	nop
 800fdf0:	20000194 	.word	0x20000194

0800fdf4 <memset>:
 800fdf4:	4402      	add	r2, r0
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d100      	bne.n	800fdfe <memset+0xa>
 800fdfc:	4770      	bx	lr
 800fdfe:	f803 1b01 	strb.w	r1, [r3], #1
 800fe02:	e7f9      	b.n	800fdf8 <memset+0x4>

0800fe04 <_localeconv_r>:
 800fe04:	4800      	ldr	r0, [pc, #0]	@ (800fe08 <_localeconv_r+0x4>)
 800fe06:	4770      	bx	lr
 800fe08:	200002d4 	.word	0x200002d4

0800fe0c <_close_r>:
 800fe0c:	b538      	push	{r3, r4, r5, lr}
 800fe0e:	4d06      	ldr	r5, [pc, #24]	@ (800fe28 <_close_r+0x1c>)
 800fe10:	2300      	movs	r3, #0
 800fe12:	4604      	mov	r4, r0
 800fe14:	4608      	mov	r0, r1
 800fe16:	602b      	str	r3, [r5, #0]
 800fe18:	f7f2 fa22 	bl	8002260 <_close>
 800fe1c:	1c43      	adds	r3, r0, #1
 800fe1e:	d102      	bne.n	800fe26 <_close_r+0x1a>
 800fe20:	682b      	ldr	r3, [r5, #0]
 800fe22:	b103      	cbz	r3, 800fe26 <_close_r+0x1a>
 800fe24:	6023      	str	r3, [r4, #0]
 800fe26:	bd38      	pop	{r3, r4, r5, pc}
 800fe28:	2000a64c 	.word	0x2000a64c

0800fe2c <_reclaim_reent>:
 800fe2c:	4b2d      	ldr	r3, [pc, #180]	@ (800fee4 <_reclaim_reent+0xb8>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4283      	cmp	r3, r0
 800fe32:	b570      	push	{r4, r5, r6, lr}
 800fe34:	4604      	mov	r4, r0
 800fe36:	d053      	beq.n	800fee0 <_reclaim_reent+0xb4>
 800fe38:	69c3      	ldr	r3, [r0, #28]
 800fe3a:	b31b      	cbz	r3, 800fe84 <_reclaim_reent+0x58>
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	b163      	cbz	r3, 800fe5a <_reclaim_reent+0x2e>
 800fe40:	2500      	movs	r5, #0
 800fe42:	69e3      	ldr	r3, [r4, #28]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	5959      	ldr	r1, [r3, r5]
 800fe48:	b9b1      	cbnz	r1, 800fe78 <_reclaim_reent+0x4c>
 800fe4a:	3504      	adds	r5, #4
 800fe4c:	2d80      	cmp	r5, #128	@ 0x80
 800fe4e:	d1f8      	bne.n	800fe42 <_reclaim_reent+0x16>
 800fe50:	69e3      	ldr	r3, [r4, #28]
 800fe52:	4620      	mov	r0, r4
 800fe54:	68d9      	ldr	r1, [r3, #12]
 800fe56:	f000 ff13 	bl	8010c80 <_free_r>
 800fe5a:	69e3      	ldr	r3, [r4, #28]
 800fe5c:	6819      	ldr	r1, [r3, #0]
 800fe5e:	b111      	cbz	r1, 800fe66 <_reclaim_reent+0x3a>
 800fe60:	4620      	mov	r0, r4
 800fe62:	f000 ff0d 	bl	8010c80 <_free_r>
 800fe66:	69e3      	ldr	r3, [r4, #28]
 800fe68:	689d      	ldr	r5, [r3, #8]
 800fe6a:	b15d      	cbz	r5, 800fe84 <_reclaim_reent+0x58>
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	4620      	mov	r0, r4
 800fe70:	682d      	ldr	r5, [r5, #0]
 800fe72:	f000 ff05 	bl	8010c80 <_free_r>
 800fe76:	e7f8      	b.n	800fe6a <_reclaim_reent+0x3e>
 800fe78:	680e      	ldr	r6, [r1, #0]
 800fe7a:	4620      	mov	r0, r4
 800fe7c:	f000 ff00 	bl	8010c80 <_free_r>
 800fe80:	4631      	mov	r1, r6
 800fe82:	e7e1      	b.n	800fe48 <_reclaim_reent+0x1c>
 800fe84:	6961      	ldr	r1, [r4, #20]
 800fe86:	b111      	cbz	r1, 800fe8e <_reclaim_reent+0x62>
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f000 fef9 	bl	8010c80 <_free_r>
 800fe8e:	69e1      	ldr	r1, [r4, #28]
 800fe90:	b111      	cbz	r1, 800fe98 <_reclaim_reent+0x6c>
 800fe92:	4620      	mov	r0, r4
 800fe94:	f000 fef4 	bl	8010c80 <_free_r>
 800fe98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fe9a:	b111      	cbz	r1, 800fea2 <_reclaim_reent+0x76>
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	f000 feef 	bl	8010c80 <_free_r>
 800fea2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fea4:	b111      	cbz	r1, 800feac <_reclaim_reent+0x80>
 800fea6:	4620      	mov	r0, r4
 800fea8:	f000 feea 	bl	8010c80 <_free_r>
 800feac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800feae:	b111      	cbz	r1, 800feb6 <_reclaim_reent+0x8a>
 800feb0:	4620      	mov	r0, r4
 800feb2:	f000 fee5 	bl	8010c80 <_free_r>
 800feb6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800feb8:	b111      	cbz	r1, 800fec0 <_reclaim_reent+0x94>
 800feba:	4620      	mov	r0, r4
 800febc:	f000 fee0 	bl	8010c80 <_free_r>
 800fec0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fec2:	b111      	cbz	r1, 800feca <_reclaim_reent+0x9e>
 800fec4:	4620      	mov	r0, r4
 800fec6:	f000 fedb 	bl	8010c80 <_free_r>
 800feca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fecc:	b111      	cbz	r1, 800fed4 <_reclaim_reent+0xa8>
 800fece:	4620      	mov	r0, r4
 800fed0:	f000 fed6 	bl	8010c80 <_free_r>
 800fed4:	6a23      	ldr	r3, [r4, #32]
 800fed6:	b11b      	cbz	r3, 800fee0 <_reclaim_reent+0xb4>
 800fed8:	4620      	mov	r0, r4
 800feda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fede:	4718      	bx	r3
 800fee0:	bd70      	pop	{r4, r5, r6, pc}
 800fee2:	bf00      	nop
 800fee4:	20000194 	.word	0x20000194

0800fee8 <_lseek_r>:
 800fee8:	b538      	push	{r3, r4, r5, lr}
 800feea:	4d07      	ldr	r5, [pc, #28]	@ (800ff08 <_lseek_r+0x20>)
 800feec:	4604      	mov	r4, r0
 800feee:	4608      	mov	r0, r1
 800fef0:	4611      	mov	r1, r2
 800fef2:	2200      	movs	r2, #0
 800fef4:	602a      	str	r2, [r5, #0]
 800fef6:	461a      	mov	r2, r3
 800fef8:	f7f2 f9d9 	bl	80022ae <_lseek>
 800fefc:	1c43      	adds	r3, r0, #1
 800fefe:	d102      	bne.n	800ff06 <_lseek_r+0x1e>
 800ff00:	682b      	ldr	r3, [r5, #0]
 800ff02:	b103      	cbz	r3, 800ff06 <_lseek_r+0x1e>
 800ff04:	6023      	str	r3, [r4, #0]
 800ff06:	bd38      	pop	{r3, r4, r5, pc}
 800ff08:	2000a64c 	.word	0x2000a64c

0800ff0c <_read_r>:
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	4d07      	ldr	r5, [pc, #28]	@ (800ff2c <_read_r+0x20>)
 800ff10:	4604      	mov	r4, r0
 800ff12:	4608      	mov	r0, r1
 800ff14:	4611      	mov	r1, r2
 800ff16:	2200      	movs	r2, #0
 800ff18:	602a      	str	r2, [r5, #0]
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	f7f2 f967 	bl	80021ee <_read>
 800ff20:	1c43      	adds	r3, r0, #1
 800ff22:	d102      	bne.n	800ff2a <_read_r+0x1e>
 800ff24:	682b      	ldr	r3, [r5, #0]
 800ff26:	b103      	cbz	r3, 800ff2a <_read_r+0x1e>
 800ff28:	6023      	str	r3, [r4, #0]
 800ff2a:	bd38      	pop	{r3, r4, r5, pc}
 800ff2c:	2000a64c 	.word	0x2000a64c

0800ff30 <_write_r>:
 800ff30:	b538      	push	{r3, r4, r5, lr}
 800ff32:	4d07      	ldr	r5, [pc, #28]	@ (800ff50 <_write_r+0x20>)
 800ff34:	4604      	mov	r4, r0
 800ff36:	4608      	mov	r0, r1
 800ff38:	4611      	mov	r1, r2
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	602a      	str	r2, [r5, #0]
 800ff3e:	461a      	mov	r2, r3
 800ff40:	f7f2 f972 	bl	8002228 <_write>
 800ff44:	1c43      	adds	r3, r0, #1
 800ff46:	d102      	bne.n	800ff4e <_write_r+0x1e>
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	b103      	cbz	r3, 800ff4e <_write_r+0x1e>
 800ff4c:	6023      	str	r3, [r4, #0]
 800ff4e:	bd38      	pop	{r3, r4, r5, pc}
 800ff50:	2000a64c 	.word	0x2000a64c

0800ff54 <__errno>:
 800ff54:	4b01      	ldr	r3, [pc, #4]	@ (800ff5c <__errno+0x8>)
 800ff56:	6818      	ldr	r0, [r3, #0]
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop
 800ff5c:	20000194 	.word	0x20000194

0800ff60 <__libc_init_array>:
 800ff60:	b570      	push	{r4, r5, r6, lr}
 800ff62:	4d0d      	ldr	r5, [pc, #52]	@ (800ff98 <__libc_init_array+0x38>)
 800ff64:	4c0d      	ldr	r4, [pc, #52]	@ (800ff9c <__libc_init_array+0x3c>)
 800ff66:	1b64      	subs	r4, r4, r5
 800ff68:	10a4      	asrs	r4, r4, #2
 800ff6a:	2600      	movs	r6, #0
 800ff6c:	42a6      	cmp	r6, r4
 800ff6e:	d109      	bne.n	800ff84 <__libc_init_array+0x24>
 800ff70:	4d0b      	ldr	r5, [pc, #44]	@ (800ffa0 <__libc_init_array+0x40>)
 800ff72:	4c0c      	ldr	r4, [pc, #48]	@ (800ffa4 <__libc_init_array+0x44>)
 800ff74:	f002 f86a 	bl	801204c <_init>
 800ff78:	1b64      	subs	r4, r4, r5
 800ff7a:	10a4      	asrs	r4, r4, #2
 800ff7c:	2600      	movs	r6, #0
 800ff7e:	42a6      	cmp	r6, r4
 800ff80:	d105      	bne.n	800ff8e <__libc_init_array+0x2e>
 800ff82:	bd70      	pop	{r4, r5, r6, pc}
 800ff84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff88:	4798      	blx	r3
 800ff8a:	3601      	adds	r6, #1
 800ff8c:	e7ee      	b.n	800ff6c <__libc_init_array+0xc>
 800ff8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff92:	4798      	blx	r3
 800ff94:	3601      	adds	r6, #1
 800ff96:	e7f2      	b.n	800ff7e <__libc_init_array+0x1e>
 800ff98:	08012744 	.word	0x08012744
 800ff9c:	08012744 	.word	0x08012744
 800ffa0:	08012744 	.word	0x08012744
 800ffa4:	08012748 	.word	0x08012748

0800ffa8 <__retarget_lock_init_recursive>:
 800ffa8:	4770      	bx	lr

0800ffaa <__retarget_lock_acquire_recursive>:
 800ffaa:	4770      	bx	lr

0800ffac <__retarget_lock_release_recursive>:
 800ffac:	4770      	bx	lr

0800ffae <memcpy>:
 800ffae:	440a      	add	r2, r1
 800ffb0:	4291      	cmp	r1, r2
 800ffb2:	f100 33ff 	add.w	r3, r0, #4294967295
 800ffb6:	d100      	bne.n	800ffba <memcpy+0xc>
 800ffb8:	4770      	bx	lr
 800ffba:	b510      	push	{r4, lr}
 800ffbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffc4:	4291      	cmp	r1, r2
 800ffc6:	d1f9      	bne.n	800ffbc <memcpy+0xe>
 800ffc8:	bd10      	pop	{r4, pc}

0800ffca <quorem>:
 800ffca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffce:	6903      	ldr	r3, [r0, #16]
 800ffd0:	690c      	ldr	r4, [r1, #16]
 800ffd2:	42a3      	cmp	r3, r4
 800ffd4:	4607      	mov	r7, r0
 800ffd6:	db7e      	blt.n	80100d6 <quorem+0x10c>
 800ffd8:	3c01      	subs	r4, #1
 800ffda:	f101 0814 	add.w	r8, r1, #20
 800ffde:	00a3      	lsls	r3, r4, #2
 800ffe0:	f100 0514 	add.w	r5, r0, #20
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ffea:	9301      	str	r3, [sp, #4]
 800ffec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fff0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fff4:	3301      	adds	r3, #1
 800fff6:	429a      	cmp	r2, r3
 800fff8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fffc:	fbb2 f6f3 	udiv	r6, r2, r3
 8010000:	d32e      	bcc.n	8010060 <quorem+0x96>
 8010002:	f04f 0a00 	mov.w	sl, #0
 8010006:	46c4      	mov	ip, r8
 8010008:	46ae      	mov	lr, r5
 801000a:	46d3      	mov	fp, sl
 801000c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010010:	b298      	uxth	r0, r3
 8010012:	fb06 a000 	mla	r0, r6, r0, sl
 8010016:	0c02      	lsrs	r2, r0, #16
 8010018:	0c1b      	lsrs	r3, r3, #16
 801001a:	fb06 2303 	mla	r3, r6, r3, r2
 801001e:	f8de 2000 	ldr.w	r2, [lr]
 8010022:	b280      	uxth	r0, r0
 8010024:	b292      	uxth	r2, r2
 8010026:	1a12      	subs	r2, r2, r0
 8010028:	445a      	add	r2, fp
 801002a:	f8de 0000 	ldr.w	r0, [lr]
 801002e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010032:	b29b      	uxth	r3, r3
 8010034:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010038:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801003c:	b292      	uxth	r2, r2
 801003e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010042:	45e1      	cmp	r9, ip
 8010044:	f84e 2b04 	str.w	r2, [lr], #4
 8010048:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801004c:	d2de      	bcs.n	801000c <quorem+0x42>
 801004e:	9b00      	ldr	r3, [sp, #0]
 8010050:	58eb      	ldr	r3, [r5, r3]
 8010052:	b92b      	cbnz	r3, 8010060 <quorem+0x96>
 8010054:	9b01      	ldr	r3, [sp, #4]
 8010056:	3b04      	subs	r3, #4
 8010058:	429d      	cmp	r5, r3
 801005a:	461a      	mov	r2, r3
 801005c:	d32f      	bcc.n	80100be <quorem+0xf4>
 801005e:	613c      	str	r4, [r7, #16]
 8010060:	4638      	mov	r0, r7
 8010062:	f001 f97f 	bl	8011364 <__mcmp>
 8010066:	2800      	cmp	r0, #0
 8010068:	db25      	blt.n	80100b6 <quorem+0xec>
 801006a:	4629      	mov	r1, r5
 801006c:	2000      	movs	r0, #0
 801006e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010072:	f8d1 c000 	ldr.w	ip, [r1]
 8010076:	fa1f fe82 	uxth.w	lr, r2
 801007a:	fa1f f38c 	uxth.w	r3, ip
 801007e:	eba3 030e 	sub.w	r3, r3, lr
 8010082:	4403      	add	r3, r0
 8010084:	0c12      	lsrs	r2, r2, #16
 8010086:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801008a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801008e:	b29b      	uxth	r3, r3
 8010090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010094:	45c1      	cmp	r9, r8
 8010096:	f841 3b04 	str.w	r3, [r1], #4
 801009a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801009e:	d2e6      	bcs.n	801006e <quorem+0xa4>
 80100a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100a8:	b922      	cbnz	r2, 80100b4 <quorem+0xea>
 80100aa:	3b04      	subs	r3, #4
 80100ac:	429d      	cmp	r5, r3
 80100ae:	461a      	mov	r2, r3
 80100b0:	d30b      	bcc.n	80100ca <quorem+0x100>
 80100b2:	613c      	str	r4, [r7, #16]
 80100b4:	3601      	adds	r6, #1
 80100b6:	4630      	mov	r0, r6
 80100b8:	b003      	add	sp, #12
 80100ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100be:	6812      	ldr	r2, [r2, #0]
 80100c0:	3b04      	subs	r3, #4
 80100c2:	2a00      	cmp	r2, #0
 80100c4:	d1cb      	bne.n	801005e <quorem+0x94>
 80100c6:	3c01      	subs	r4, #1
 80100c8:	e7c6      	b.n	8010058 <quorem+0x8e>
 80100ca:	6812      	ldr	r2, [r2, #0]
 80100cc:	3b04      	subs	r3, #4
 80100ce:	2a00      	cmp	r2, #0
 80100d0:	d1ef      	bne.n	80100b2 <quorem+0xe8>
 80100d2:	3c01      	subs	r4, #1
 80100d4:	e7ea      	b.n	80100ac <quorem+0xe2>
 80100d6:	2000      	movs	r0, #0
 80100d8:	e7ee      	b.n	80100b8 <quorem+0xee>
 80100da:	0000      	movs	r0, r0
 80100dc:	0000      	movs	r0, r0
	...

080100e0 <_dtoa_r>:
 80100e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e4:	69c7      	ldr	r7, [r0, #28]
 80100e6:	b097      	sub	sp, #92	@ 0x5c
 80100e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80100ec:	ec55 4b10 	vmov	r4, r5, d0
 80100f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80100f2:	9107      	str	r1, [sp, #28]
 80100f4:	4681      	mov	r9, r0
 80100f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80100f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80100fa:	b97f      	cbnz	r7, 801011c <_dtoa_r+0x3c>
 80100fc:	2010      	movs	r0, #16
 80100fe:	f000 fe09 	bl	8010d14 <malloc>
 8010102:	4602      	mov	r2, r0
 8010104:	f8c9 001c 	str.w	r0, [r9, #28]
 8010108:	b920      	cbnz	r0, 8010114 <_dtoa_r+0x34>
 801010a:	4ba9      	ldr	r3, [pc, #676]	@ (80103b0 <_dtoa_r+0x2d0>)
 801010c:	21ef      	movs	r1, #239	@ 0xef
 801010e:	48a9      	ldr	r0, [pc, #676]	@ (80103b4 <_dtoa_r+0x2d4>)
 8010110:	f001 fc5e 	bl	80119d0 <__assert_func>
 8010114:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010118:	6007      	str	r7, [r0, #0]
 801011a:	60c7      	str	r7, [r0, #12]
 801011c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010120:	6819      	ldr	r1, [r3, #0]
 8010122:	b159      	cbz	r1, 801013c <_dtoa_r+0x5c>
 8010124:	685a      	ldr	r2, [r3, #4]
 8010126:	604a      	str	r2, [r1, #4]
 8010128:	2301      	movs	r3, #1
 801012a:	4093      	lsls	r3, r2
 801012c:	608b      	str	r3, [r1, #8]
 801012e:	4648      	mov	r0, r9
 8010130:	f000 fee6 	bl	8010f00 <_Bfree>
 8010134:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010138:	2200      	movs	r2, #0
 801013a:	601a      	str	r2, [r3, #0]
 801013c:	1e2b      	subs	r3, r5, #0
 801013e:	bfb9      	ittee	lt
 8010140:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010144:	9305      	strlt	r3, [sp, #20]
 8010146:	2300      	movge	r3, #0
 8010148:	6033      	strge	r3, [r6, #0]
 801014a:	9f05      	ldr	r7, [sp, #20]
 801014c:	4b9a      	ldr	r3, [pc, #616]	@ (80103b8 <_dtoa_r+0x2d8>)
 801014e:	bfbc      	itt	lt
 8010150:	2201      	movlt	r2, #1
 8010152:	6032      	strlt	r2, [r6, #0]
 8010154:	43bb      	bics	r3, r7
 8010156:	d112      	bne.n	801017e <_dtoa_r+0x9e>
 8010158:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801015a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801015e:	6013      	str	r3, [r2, #0]
 8010160:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010164:	4323      	orrs	r3, r4
 8010166:	f000 855a 	beq.w	8010c1e <_dtoa_r+0xb3e>
 801016a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801016c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80103cc <_dtoa_r+0x2ec>
 8010170:	2b00      	cmp	r3, #0
 8010172:	f000 855c 	beq.w	8010c2e <_dtoa_r+0xb4e>
 8010176:	f10a 0303 	add.w	r3, sl, #3
 801017a:	f000 bd56 	b.w	8010c2a <_dtoa_r+0xb4a>
 801017e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010182:	2200      	movs	r2, #0
 8010184:	ec51 0b17 	vmov	r0, r1, d7
 8010188:	2300      	movs	r3, #0
 801018a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801018e:	f7f0 fcc3 	bl	8000b18 <__aeabi_dcmpeq>
 8010192:	4680      	mov	r8, r0
 8010194:	b158      	cbz	r0, 80101ae <_dtoa_r+0xce>
 8010196:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010198:	2301      	movs	r3, #1
 801019a:	6013      	str	r3, [r2, #0]
 801019c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801019e:	b113      	cbz	r3, 80101a6 <_dtoa_r+0xc6>
 80101a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80101a2:	4b86      	ldr	r3, [pc, #536]	@ (80103bc <_dtoa_r+0x2dc>)
 80101a4:	6013      	str	r3, [r2, #0]
 80101a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80103d0 <_dtoa_r+0x2f0>
 80101aa:	f000 bd40 	b.w	8010c2e <_dtoa_r+0xb4e>
 80101ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80101b2:	aa14      	add	r2, sp, #80	@ 0x50
 80101b4:	a915      	add	r1, sp, #84	@ 0x54
 80101b6:	4648      	mov	r0, r9
 80101b8:	f001 f984 	bl	80114c4 <__d2b>
 80101bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80101c0:	9002      	str	r0, [sp, #8]
 80101c2:	2e00      	cmp	r6, #0
 80101c4:	d078      	beq.n	80102b8 <_dtoa_r+0x1d8>
 80101c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80101cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80101d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80101d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80101dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80101e0:	4619      	mov	r1, r3
 80101e2:	2200      	movs	r2, #0
 80101e4:	4b76      	ldr	r3, [pc, #472]	@ (80103c0 <_dtoa_r+0x2e0>)
 80101e6:	f7f0 f877 	bl	80002d8 <__aeabi_dsub>
 80101ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8010398 <_dtoa_r+0x2b8>)
 80101ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f0:	f7f0 fa2a 	bl	8000648 <__aeabi_dmul>
 80101f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80103a0 <_dtoa_r+0x2c0>)
 80101f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fa:	f7f0 f86f 	bl	80002dc <__adddf3>
 80101fe:	4604      	mov	r4, r0
 8010200:	4630      	mov	r0, r6
 8010202:	460d      	mov	r5, r1
 8010204:	f7f0 f9b6 	bl	8000574 <__aeabi_i2d>
 8010208:	a367      	add	r3, pc, #412	@ (adr r3, 80103a8 <_dtoa_r+0x2c8>)
 801020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020e:	f7f0 fa1b 	bl	8000648 <__aeabi_dmul>
 8010212:	4602      	mov	r2, r0
 8010214:	460b      	mov	r3, r1
 8010216:	4620      	mov	r0, r4
 8010218:	4629      	mov	r1, r5
 801021a:	f7f0 f85f 	bl	80002dc <__adddf3>
 801021e:	4604      	mov	r4, r0
 8010220:	460d      	mov	r5, r1
 8010222:	f7f0 fcc1 	bl	8000ba8 <__aeabi_d2iz>
 8010226:	2200      	movs	r2, #0
 8010228:	4607      	mov	r7, r0
 801022a:	2300      	movs	r3, #0
 801022c:	4620      	mov	r0, r4
 801022e:	4629      	mov	r1, r5
 8010230:	f7f0 fc7c 	bl	8000b2c <__aeabi_dcmplt>
 8010234:	b140      	cbz	r0, 8010248 <_dtoa_r+0x168>
 8010236:	4638      	mov	r0, r7
 8010238:	f7f0 f99c 	bl	8000574 <__aeabi_i2d>
 801023c:	4622      	mov	r2, r4
 801023e:	462b      	mov	r3, r5
 8010240:	f7f0 fc6a 	bl	8000b18 <__aeabi_dcmpeq>
 8010244:	b900      	cbnz	r0, 8010248 <_dtoa_r+0x168>
 8010246:	3f01      	subs	r7, #1
 8010248:	2f16      	cmp	r7, #22
 801024a:	d852      	bhi.n	80102f2 <_dtoa_r+0x212>
 801024c:	4b5d      	ldr	r3, [pc, #372]	@ (80103c4 <_dtoa_r+0x2e4>)
 801024e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010256:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801025a:	f7f0 fc67 	bl	8000b2c <__aeabi_dcmplt>
 801025e:	2800      	cmp	r0, #0
 8010260:	d049      	beq.n	80102f6 <_dtoa_r+0x216>
 8010262:	3f01      	subs	r7, #1
 8010264:	2300      	movs	r3, #0
 8010266:	9310      	str	r3, [sp, #64]	@ 0x40
 8010268:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801026a:	1b9b      	subs	r3, r3, r6
 801026c:	1e5a      	subs	r2, r3, #1
 801026e:	bf45      	ittet	mi
 8010270:	f1c3 0301 	rsbmi	r3, r3, #1
 8010274:	9300      	strmi	r3, [sp, #0]
 8010276:	2300      	movpl	r3, #0
 8010278:	2300      	movmi	r3, #0
 801027a:	9206      	str	r2, [sp, #24]
 801027c:	bf54      	ite	pl
 801027e:	9300      	strpl	r3, [sp, #0]
 8010280:	9306      	strmi	r3, [sp, #24]
 8010282:	2f00      	cmp	r7, #0
 8010284:	db39      	blt.n	80102fa <_dtoa_r+0x21a>
 8010286:	9b06      	ldr	r3, [sp, #24]
 8010288:	970d      	str	r7, [sp, #52]	@ 0x34
 801028a:	443b      	add	r3, r7
 801028c:	9306      	str	r3, [sp, #24]
 801028e:	2300      	movs	r3, #0
 8010290:	9308      	str	r3, [sp, #32]
 8010292:	9b07      	ldr	r3, [sp, #28]
 8010294:	2b09      	cmp	r3, #9
 8010296:	d863      	bhi.n	8010360 <_dtoa_r+0x280>
 8010298:	2b05      	cmp	r3, #5
 801029a:	bfc4      	itt	gt
 801029c:	3b04      	subgt	r3, #4
 801029e:	9307      	strgt	r3, [sp, #28]
 80102a0:	9b07      	ldr	r3, [sp, #28]
 80102a2:	f1a3 0302 	sub.w	r3, r3, #2
 80102a6:	bfcc      	ite	gt
 80102a8:	2400      	movgt	r4, #0
 80102aa:	2401      	movle	r4, #1
 80102ac:	2b03      	cmp	r3, #3
 80102ae:	d863      	bhi.n	8010378 <_dtoa_r+0x298>
 80102b0:	e8df f003 	tbb	[pc, r3]
 80102b4:	2b375452 	.word	0x2b375452
 80102b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80102bc:	441e      	add	r6, r3
 80102be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80102c2:	2b20      	cmp	r3, #32
 80102c4:	bfc1      	itttt	gt
 80102c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80102ca:	409f      	lslgt	r7, r3
 80102cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80102d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80102d4:	bfd6      	itet	le
 80102d6:	f1c3 0320 	rsble	r3, r3, #32
 80102da:	ea47 0003 	orrgt.w	r0, r7, r3
 80102de:	fa04 f003 	lslle.w	r0, r4, r3
 80102e2:	f7f0 f937 	bl	8000554 <__aeabi_ui2d>
 80102e6:	2201      	movs	r2, #1
 80102e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80102ec:	3e01      	subs	r6, #1
 80102ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80102f0:	e776      	b.n	80101e0 <_dtoa_r+0x100>
 80102f2:	2301      	movs	r3, #1
 80102f4:	e7b7      	b.n	8010266 <_dtoa_r+0x186>
 80102f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80102f8:	e7b6      	b.n	8010268 <_dtoa_r+0x188>
 80102fa:	9b00      	ldr	r3, [sp, #0]
 80102fc:	1bdb      	subs	r3, r3, r7
 80102fe:	9300      	str	r3, [sp, #0]
 8010300:	427b      	negs	r3, r7
 8010302:	9308      	str	r3, [sp, #32]
 8010304:	2300      	movs	r3, #0
 8010306:	930d      	str	r3, [sp, #52]	@ 0x34
 8010308:	e7c3      	b.n	8010292 <_dtoa_r+0x1b2>
 801030a:	2301      	movs	r3, #1
 801030c:	9309      	str	r3, [sp, #36]	@ 0x24
 801030e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010310:	eb07 0b03 	add.w	fp, r7, r3
 8010314:	f10b 0301 	add.w	r3, fp, #1
 8010318:	2b01      	cmp	r3, #1
 801031a:	9303      	str	r3, [sp, #12]
 801031c:	bfb8      	it	lt
 801031e:	2301      	movlt	r3, #1
 8010320:	e006      	b.n	8010330 <_dtoa_r+0x250>
 8010322:	2301      	movs	r3, #1
 8010324:	9309      	str	r3, [sp, #36]	@ 0x24
 8010326:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010328:	2b00      	cmp	r3, #0
 801032a:	dd28      	ble.n	801037e <_dtoa_r+0x29e>
 801032c:	469b      	mov	fp, r3
 801032e:	9303      	str	r3, [sp, #12]
 8010330:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010334:	2100      	movs	r1, #0
 8010336:	2204      	movs	r2, #4
 8010338:	f102 0514 	add.w	r5, r2, #20
 801033c:	429d      	cmp	r5, r3
 801033e:	d926      	bls.n	801038e <_dtoa_r+0x2ae>
 8010340:	6041      	str	r1, [r0, #4]
 8010342:	4648      	mov	r0, r9
 8010344:	f000 fd9c 	bl	8010e80 <_Balloc>
 8010348:	4682      	mov	sl, r0
 801034a:	2800      	cmp	r0, #0
 801034c:	d142      	bne.n	80103d4 <_dtoa_r+0x2f4>
 801034e:	4b1e      	ldr	r3, [pc, #120]	@ (80103c8 <_dtoa_r+0x2e8>)
 8010350:	4602      	mov	r2, r0
 8010352:	f240 11af 	movw	r1, #431	@ 0x1af
 8010356:	e6da      	b.n	801010e <_dtoa_r+0x2e>
 8010358:	2300      	movs	r3, #0
 801035a:	e7e3      	b.n	8010324 <_dtoa_r+0x244>
 801035c:	2300      	movs	r3, #0
 801035e:	e7d5      	b.n	801030c <_dtoa_r+0x22c>
 8010360:	2401      	movs	r4, #1
 8010362:	2300      	movs	r3, #0
 8010364:	9307      	str	r3, [sp, #28]
 8010366:	9409      	str	r4, [sp, #36]	@ 0x24
 8010368:	f04f 3bff 	mov.w	fp, #4294967295
 801036c:	2200      	movs	r2, #0
 801036e:	f8cd b00c 	str.w	fp, [sp, #12]
 8010372:	2312      	movs	r3, #18
 8010374:	920c      	str	r2, [sp, #48]	@ 0x30
 8010376:	e7db      	b.n	8010330 <_dtoa_r+0x250>
 8010378:	2301      	movs	r3, #1
 801037a:	9309      	str	r3, [sp, #36]	@ 0x24
 801037c:	e7f4      	b.n	8010368 <_dtoa_r+0x288>
 801037e:	f04f 0b01 	mov.w	fp, #1
 8010382:	f8cd b00c 	str.w	fp, [sp, #12]
 8010386:	465b      	mov	r3, fp
 8010388:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801038c:	e7d0      	b.n	8010330 <_dtoa_r+0x250>
 801038e:	3101      	adds	r1, #1
 8010390:	0052      	lsls	r2, r2, #1
 8010392:	e7d1      	b.n	8010338 <_dtoa_r+0x258>
 8010394:	f3af 8000 	nop.w
 8010398:	636f4361 	.word	0x636f4361
 801039c:	3fd287a7 	.word	0x3fd287a7
 80103a0:	8b60c8b3 	.word	0x8b60c8b3
 80103a4:	3fc68a28 	.word	0x3fc68a28
 80103a8:	509f79fb 	.word	0x509f79fb
 80103ac:	3fd34413 	.word	0x3fd34413
 80103b0:	08012409 	.word	0x08012409
 80103b4:	08012420 	.word	0x08012420
 80103b8:	7ff00000 	.word	0x7ff00000
 80103bc:	080123d9 	.word	0x080123d9
 80103c0:	3ff80000 	.word	0x3ff80000
 80103c4:	08012570 	.word	0x08012570
 80103c8:	08012478 	.word	0x08012478
 80103cc:	08012405 	.word	0x08012405
 80103d0:	080123d8 	.word	0x080123d8
 80103d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80103d8:	6018      	str	r0, [r3, #0]
 80103da:	9b03      	ldr	r3, [sp, #12]
 80103dc:	2b0e      	cmp	r3, #14
 80103de:	f200 80a1 	bhi.w	8010524 <_dtoa_r+0x444>
 80103e2:	2c00      	cmp	r4, #0
 80103e4:	f000 809e 	beq.w	8010524 <_dtoa_r+0x444>
 80103e8:	2f00      	cmp	r7, #0
 80103ea:	dd33      	ble.n	8010454 <_dtoa_r+0x374>
 80103ec:	4b9c      	ldr	r3, [pc, #624]	@ (8010660 <_dtoa_r+0x580>)
 80103ee:	f007 020f 	and.w	r2, r7, #15
 80103f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103f6:	ed93 7b00 	vldr	d7, [r3]
 80103fa:	05f8      	lsls	r0, r7, #23
 80103fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010400:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010404:	d516      	bpl.n	8010434 <_dtoa_r+0x354>
 8010406:	4b97      	ldr	r3, [pc, #604]	@ (8010664 <_dtoa_r+0x584>)
 8010408:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801040c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010410:	f7f0 fa44 	bl	800089c <__aeabi_ddiv>
 8010414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010418:	f004 040f 	and.w	r4, r4, #15
 801041c:	2603      	movs	r6, #3
 801041e:	4d91      	ldr	r5, [pc, #580]	@ (8010664 <_dtoa_r+0x584>)
 8010420:	b954      	cbnz	r4, 8010438 <_dtoa_r+0x358>
 8010422:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801042a:	f7f0 fa37 	bl	800089c <__aeabi_ddiv>
 801042e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010432:	e028      	b.n	8010486 <_dtoa_r+0x3a6>
 8010434:	2602      	movs	r6, #2
 8010436:	e7f2      	b.n	801041e <_dtoa_r+0x33e>
 8010438:	07e1      	lsls	r1, r4, #31
 801043a:	d508      	bpl.n	801044e <_dtoa_r+0x36e>
 801043c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010440:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010444:	f7f0 f900 	bl	8000648 <__aeabi_dmul>
 8010448:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801044c:	3601      	adds	r6, #1
 801044e:	1064      	asrs	r4, r4, #1
 8010450:	3508      	adds	r5, #8
 8010452:	e7e5      	b.n	8010420 <_dtoa_r+0x340>
 8010454:	f000 80af 	beq.w	80105b6 <_dtoa_r+0x4d6>
 8010458:	427c      	negs	r4, r7
 801045a:	4b81      	ldr	r3, [pc, #516]	@ (8010660 <_dtoa_r+0x580>)
 801045c:	4d81      	ldr	r5, [pc, #516]	@ (8010664 <_dtoa_r+0x584>)
 801045e:	f004 020f 	and.w	r2, r4, #15
 8010462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801046e:	f7f0 f8eb 	bl	8000648 <__aeabi_dmul>
 8010472:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010476:	1124      	asrs	r4, r4, #4
 8010478:	2300      	movs	r3, #0
 801047a:	2602      	movs	r6, #2
 801047c:	2c00      	cmp	r4, #0
 801047e:	f040 808f 	bne.w	80105a0 <_dtoa_r+0x4c0>
 8010482:	2b00      	cmp	r3, #0
 8010484:	d1d3      	bne.n	801042e <_dtoa_r+0x34e>
 8010486:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010488:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801048c:	2b00      	cmp	r3, #0
 801048e:	f000 8094 	beq.w	80105ba <_dtoa_r+0x4da>
 8010492:	4b75      	ldr	r3, [pc, #468]	@ (8010668 <_dtoa_r+0x588>)
 8010494:	2200      	movs	r2, #0
 8010496:	4620      	mov	r0, r4
 8010498:	4629      	mov	r1, r5
 801049a:	f7f0 fb47 	bl	8000b2c <__aeabi_dcmplt>
 801049e:	2800      	cmp	r0, #0
 80104a0:	f000 808b 	beq.w	80105ba <_dtoa_r+0x4da>
 80104a4:	9b03      	ldr	r3, [sp, #12]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	f000 8087 	beq.w	80105ba <_dtoa_r+0x4da>
 80104ac:	f1bb 0f00 	cmp.w	fp, #0
 80104b0:	dd34      	ble.n	801051c <_dtoa_r+0x43c>
 80104b2:	4620      	mov	r0, r4
 80104b4:	4b6d      	ldr	r3, [pc, #436]	@ (801066c <_dtoa_r+0x58c>)
 80104b6:	2200      	movs	r2, #0
 80104b8:	4629      	mov	r1, r5
 80104ba:	f7f0 f8c5 	bl	8000648 <__aeabi_dmul>
 80104be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104c2:	f107 38ff 	add.w	r8, r7, #4294967295
 80104c6:	3601      	adds	r6, #1
 80104c8:	465c      	mov	r4, fp
 80104ca:	4630      	mov	r0, r6
 80104cc:	f7f0 f852 	bl	8000574 <__aeabi_i2d>
 80104d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104d4:	f7f0 f8b8 	bl	8000648 <__aeabi_dmul>
 80104d8:	4b65      	ldr	r3, [pc, #404]	@ (8010670 <_dtoa_r+0x590>)
 80104da:	2200      	movs	r2, #0
 80104dc:	f7ef fefe 	bl	80002dc <__adddf3>
 80104e0:	4605      	mov	r5, r0
 80104e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80104e6:	2c00      	cmp	r4, #0
 80104e8:	d16a      	bne.n	80105c0 <_dtoa_r+0x4e0>
 80104ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104ee:	4b61      	ldr	r3, [pc, #388]	@ (8010674 <_dtoa_r+0x594>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	f7ef fef1 	bl	80002d8 <__aeabi_dsub>
 80104f6:	4602      	mov	r2, r0
 80104f8:	460b      	mov	r3, r1
 80104fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104fe:	462a      	mov	r2, r5
 8010500:	4633      	mov	r3, r6
 8010502:	f7f0 fb31 	bl	8000b68 <__aeabi_dcmpgt>
 8010506:	2800      	cmp	r0, #0
 8010508:	f040 8298 	bne.w	8010a3c <_dtoa_r+0x95c>
 801050c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010510:	462a      	mov	r2, r5
 8010512:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010516:	f7f0 fb09 	bl	8000b2c <__aeabi_dcmplt>
 801051a:	bb38      	cbnz	r0, 801056c <_dtoa_r+0x48c>
 801051c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010520:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010524:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010526:	2b00      	cmp	r3, #0
 8010528:	f2c0 8157 	blt.w	80107da <_dtoa_r+0x6fa>
 801052c:	2f0e      	cmp	r7, #14
 801052e:	f300 8154 	bgt.w	80107da <_dtoa_r+0x6fa>
 8010532:	4b4b      	ldr	r3, [pc, #300]	@ (8010660 <_dtoa_r+0x580>)
 8010534:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010538:	ed93 7b00 	vldr	d7, [r3]
 801053c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801053e:	2b00      	cmp	r3, #0
 8010540:	ed8d 7b00 	vstr	d7, [sp]
 8010544:	f280 80e5 	bge.w	8010712 <_dtoa_r+0x632>
 8010548:	9b03      	ldr	r3, [sp, #12]
 801054a:	2b00      	cmp	r3, #0
 801054c:	f300 80e1 	bgt.w	8010712 <_dtoa_r+0x632>
 8010550:	d10c      	bne.n	801056c <_dtoa_r+0x48c>
 8010552:	4b48      	ldr	r3, [pc, #288]	@ (8010674 <_dtoa_r+0x594>)
 8010554:	2200      	movs	r2, #0
 8010556:	ec51 0b17 	vmov	r0, r1, d7
 801055a:	f7f0 f875 	bl	8000648 <__aeabi_dmul>
 801055e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010562:	f7f0 faf7 	bl	8000b54 <__aeabi_dcmpge>
 8010566:	2800      	cmp	r0, #0
 8010568:	f000 8266 	beq.w	8010a38 <_dtoa_r+0x958>
 801056c:	2400      	movs	r4, #0
 801056e:	4625      	mov	r5, r4
 8010570:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010572:	4656      	mov	r6, sl
 8010574:	ea6f 0803 	mvn.w	r8, r3
 8010578:	2700      	movs	r7, #0
 801057a:	4621      	mov	r1, r4
 801057c:	4648      	mov	r0, r9
 801057e:	f000 fcbf 	bl	8010f00 <_Bfree>
 8010582:	2d00      	cmp	r5, #0
 8010584:	f000 80bd 	beq.w	8010702 <_dtoa_r+0x622>
 8010588:	b12f      	cbz	r7, 8010596 <_dtoa_r+0x4b6>
 801058a:	42af      	cmp	r7, r5
 801058c:	d003      	beq.n	8010596 <_dtoa_r+0x4b6>
 801058e:	4639      	mov	r1, r7
 8010590:	4648      	mov	r0, r9
 8010592:	f000 fcb5 	bl	8010f00 <_Bfree>
 8010596:	4629      	mov	r1, r5
 8010598:	4648      	mov	r0, r9
 801059a:	f000 fcb1 	bl	8010f00 <_Bfree>
 801059e:	e0b0      	b.n	8010702 <_dtoa_r+0x622>
 80105a0:	07e2      	lsls	r2, r4, #31
 80105a2:	d505      	bpl.n	80105b0 <_dtoa_r+0x4d0>
 80105a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105a8:	f7f0 f84e 	bl	8000648 <__aeabi_dmul>
 80105ac:	3601      	adds	r6, #1
 80105ae:	2301      	movs	r3, #1
 80105b0:	1064      	asrs	r4, r4, #1
 80105b2:	3508      	adds	r5, #8
 80105b4:	e762      	b.n	801047c <_dtoa_r+0x39c>
 80105b6:	2602      	movs	r6, #2
 80105b8:	e765      	b.n	8010486 <_dtoa_r+0x3a6>
 80105ba:	9c03      	ldr	r4, [sp, #12]
 80105bc:	46b8      	mov	r8, r7
 80105be:	e784      	b.n	80104ca <_dtoa_r+0x3ea>
 80105c0:	4b27      	ldr	r3, [pc, #156]	@ (8010660 <_dtoa_r+0x580>)
 80105c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80105c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80105cc:	4454      	add	r4, sl
 80105ce:	2900      	cmp	r1, #0
 80105d0:	d054      	beq.n	801067c <_dtoa_r+0x59c>
 80105d2:	4929      	ldr	r1, [pc, #164]	@ (8010678 <_dtoa_r+0x598>)
 80105d4:	2000      	movs	r0, #0
 80105d6:	f7f0 f961 	bl	800089c <__aeabi_ddiv>
 80105da:	4633      	mov	r3, r6
 80105dc:	462a      	mov	r2, r5
 80105de:	f7ef fe7b 	bl	80002d8 <__aeabi_dsub>
 80105e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80105e6:	4656      	mov	r6, sl
 80105e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105ec:	f7f0 fadc 	bl	8000ba8 <__aeabi_d2iz>
 80105f0:	4605      	mov	r5, r0
 80105f2:	f7ef ffbf 	bl	8000574 <__aeabi_i2d>
 80105f6:	4602      	mov	r2, r0
 80105f8:	460b      	mov	r3, r1
 80105fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105fe:	f7ef fe6b 	bl	80002d8 <__aeabi_dsub>
 8010602:	3530      	adds	r5, #48	@ 0x30
 8010604:	4602      	mov	r2, r0
 8010606:	460b      	mov	r3, r1
 8010608:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801060c:	f806 5b01 	strb.w	r5, [r6], #1
 8010610:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010614:	f7f0 fa8a 	bl	8000b2c <__aeabi_dcmplt>
 8010618:	2800      	cmp	r0, #0
 801061a:	d172      	bne.n	8010702 <_dtoa_r+0x622>
 801061c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010620:	4911      	ldr	r1, [pc, #68]	@ (8010668 <_dtoa_r+0x588>)
 8010622:	2000      	movs	r0, #0
 8010624:	f7ef fe58 	bl	80002d8 <__aeabi_dsub>
 8010628:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801062c:	f7f0 fa7e 	bl	8000b2c <__aeabi_dcmplt>
 8010630:	2800      	cmp	r0, #0
 8010632:	f040 80b4 	bne.w	801079e <_dtoa_r+0x6be>
 8010636:	42a6      	cmp	r6, r4
 8010638:	f43f af70 	beq.w	801051c <_dtoa_r+0x43c>
 801063c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010640:	4b0a      	ldr	r3, [pc, #40]	@ (801066c <_dtoa_r+0x58c>)
 8010642:	2200      	movs	r2, #0
 8010644:	f7f0 f800 	bl	8000648 <__aeabi_dmul>
 8010648:	4b08      	ldr	r3, [pc, #32]	@ (801066c <_dtoa_r+0x58c>)
 801064a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801064e:	2200      	movs	r2, #0
 8010650:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010654:	f7ef fff8 	bl	8000648 <__aeabi_dmul>
 8010658:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801065c:	e7c4      	b.n	80105e8 <_dtoa_r+0x508>
 801065e:	bf00      	nop
 8010660:	08012570 	.word	0x08012570
 8010664:	08012548 	.word	0x08012548
 8010668:	3ff00000 	.word	0x3ff00000
 801066c:	40240000 	.word	0x40240000
 8010670:	401c0000 	.word	0x401c0000
 8010674:	40140000 	.word	0x40140000
 8010678:	3fe00000 	.word	0x3fe00000
 801067c:	4631      	mov	r1, r6
 801067e:	4628      	mov	r0, r5
 8010680:	f7ef ffe2 	bl	8000648 <__aeabi_dmul>
 8010684:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010688:	9413      	str	r4, [sp, #76]	@ 0x4c
 801068a:	4656      	mov	r6, sl
 801068c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010690:	f7f0 fa8a 	bl	8000ba8 <__aeabi_d2iz>
 8010694:	4605      	mov	r5, r0
 8010696:	f7ef ff6d 	bl	8000574 <__aeabi_i2d>
 801069a:	4602      	mov	r2, r0
 801069c:	460b      	mov	r3, r1
 801069e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106a2:	f7ef fe19 	bl	80002d8 <__aeabi_dsub>
 80106a6:	3530      	adds	r5, #48	@ 0x30
 80106a8:	f806 5b01 	strb.w	r5, [r6], #1
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	42a6      	cmp	r6, r4
 80106b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80106b6:	f04f 0200 	mov.w	r2, #0
 80106ba:	d124      	bne.n	8010706 <_dtoa_r+0x626>
 80106bc:	4baf      	ldr	r3, [pc, #700]	@ (801097c <_dtoa_r+0x89c>)
 80106be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80106c2:	f7ef fe0b 	bl	80002dc <__adddf3>
 80106c6:	4602      	mov	r2, r0
 80106c8:	460b      	mov	r3, r1
 80106ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106ce:	f7f0 fa4b 	bl	8000b68 <__aeabi_dcmpgt>
 80106d2:	2800      	cmp	r0, #0
 80106d4:	d163      	bne.n	801079e <_dtoa_r+0x6be>
 80106d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80106da:	49a8      	ldr	r1, [pc, #672]	@ (801097c <_dtoa_r+0x89c>)
 80106dc:	2000      	movs	r0, #0
 80106de:	f7ef fdfb 	bl	80002d8 <__aeabi_dsub>
 80106e2:	4602      	mov	r2, r0
 80106e4:	460b      	mov	r3, r1
 80106e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106ea:	f7f0 fa1f 	bl	8000b2c <__aeabi_dcmplt>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	f43f af14 	beq.w	801051c <_dtoa_r+0x43c>
 80106f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80106f6:	1e73      	subs	r3, r6, #1
 80106f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80106fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80106fe:	2b30      	cmp	r3, #48	@ 0x30
 8010700:	d0f8      	beq.n	80106f4 <_dtoa_r+0x614>
 8010702:	4647      	mov	r7, r8
 8010704:	e03b      	b.n	801077e <_dtoa_r+0x69e>
 8010706:	4b9e      	ldr	r3, [pc, #632]	@ (8010980 <_dtoa_r+0x8a0>)
 8010708:	f7ef ff9e 	bl	8000648 <__aeabi_dmul>
 801070c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010710:	e7bc      	b.n	801068c <_dtoa_r+0x5ac>
 8010712:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010716:	4656      	mov	r6, sl
 8010718:	e9dd 2300 	ldrd	r2, r3, [sp]
 801071c:	4620      	mov	r0, r4
 801071e:	4629      	mov	r1, r5
 8010720:	f7f0 f8bc 	bl	800089c <__aeabi_ddiv>
 8010724:	f7f0 fa40 	bl	8000ba8 <__aeabi_d2iz>
 8010728:	4680      	mov	r8, r0
 801072a:	f7ef ff23 	bl	8000574 <__aeabi_i2d>
 801072e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010732:	f7ef ff89 	bl	8000648 <__aeabi_dmul>
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	4620      	mov	r0, r4
 801073c:	4629      	mov	r1, r5
 801073e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010742:	f7ef fdc9 	bl	80002d8 <__aeabi_dsub>
 8010746:	f806 4b01 	strb.w	r4, [r6], #1
 801074a:	9d03      	ldr	r5, [sp, #12]
 801074c:	eba6 040a 	sub.w	r4, r6, sl
 8010750:	42a5      	cmp	r5, r4
 8010752:	4602      	mov	r2, r0
 8010754:	460b      	mov	r3, r1
 8010756:	d133      	bne.n	80107c0 <_dtoa_r+0x6e0>
 8010758:	f7ef fdc0 	bl	80002dc <__adddf3>
 801075c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010760:	4604      	mov	r4, r0
 8010762:	460d      	mov	r5, r1
 8010764:	f7f0 fa00 	bl	8000b68 <__aeabi_dcmpgt>
 8010768:	b9c0      	cbnz	r0, 801079c <_dtoa_r+0x6bc>
 801076a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801076e:	4620      	mov	r0, r4
 8010770:	4629      	mov	r1, r5
 8010772:	f7f0 f9d1 	bl	8000b18 <__aeabi_dcmpeq>
 8010776:	b110      	cbz	r0, 801077e <_dtoa_r+0x69e>
 8010778:	f018 0f01 	tst.w	r8, #1
 801077c:	d10e      	bne.n	801079c <_dtoa_r+0x6bc>
 801077e:	9902      	ldr	r1, [sp, #8]
 8010780:	4648      	mov	r0, r9
 8010782:	f000 fbbd 	bl	8010f00 <_Bfree>
 8010786:	2300      	movs	r3, #0
 8010788:	7033      	strb	r3, [r6, #0]
 801078a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801078c:	3701      	adds	r7, #1
 801078e:	601f      	str	r7, [r3, #0]
 8010790:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010792:	2b00      	cmp	r3, #0
 8010794:	f000 824b 	beq.w	8010c2e <_dtoa_r+0xb4e>
 8010798:	601e      	str	r6, [r3, #0]
 801079a:	e248      	b.n	8010c2e <_dtoa_r+0xb4e>
 801079c:	46b8      	mov	r8, r7
 801079e:	4633      	mov	r3, r6
 80107a0:	461e      	mov	r6, r3
 80107a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107a6:	2a39      	cmp	r2, #57	@ 0x39
 80107a8:	d106      	bne.n	80107b8 <_dtoa_r+0x6d8>
 80107aa:	459a      	cmp	sl, r3
 80107ac:	d1f8      	bne.n	80107a0 <_dtoa_r+0x6c0>
 80107ae:	2230      	movs	r2, #48	@ 0x30
 80107b0:	f108 0801 	add.w	r8, r8, #1
 80107b4:	f88a 2000 	strb.w	r2, [sl]
 80107b8:	781a      	ldrb	r2, [r3, #0]
 80107ba:	3201      	adds	r2, #1
 80107bc:	701a      	strb	r2, [r3, #0]
 80107be:	e7a0      	b.n	8010702 <_dtoa_r+0x622>
 80107c0:	4b6f      	ldr	r3, [pc, #444]	@ (8010980 <_dtoa_r+0x8a0>)
 80107c2:	2200      	movs	r2, #0
 80107c4:	f7ef ff40 	bl	8000648 <__aeabi_dmul>
 80107c8:	2200      	movs	r2, #0
 80107ca:	2300      	movs	r3, #0
 80107cc:	4604      	mov	r4, r0
 80107ce:	460d      	mov	r5, r1
 80107d0:	f7f0 f9a2 	bl	8000b18 <__aeabi_dcmpeq>
 80107d4:	2800      	cmp	r0, #0
 80107d6:	d09f      	beq.n	8010718 <_dtoa_r+0x638>
 80107d8:	e7d1      	b.n	801077e <_dtoa_r+0x69e>
 80107da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107dc:	2a00      	cmp	r2, #0
 80107de:	f000 80ea 	beq.w	80109b6 <_dtoa_r+0x8d6>
 80107e2:	9a07      	ldr	r2, [sp, #28]
 80107e4:	2a01      	cmp	r2, #1
 80107e6:	f300 80cd 	bgt.w	8010984 <_dtoa_r+0x8a4>
 80107ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80107ec:	2a00      	cmp	r2, #0
 80107ee:	f000 80c1 	beq.w	8010974 <_dtoa_r+0x894>
 80107f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80107f6:	9c08      	ldr	r4, [sp, #32]
 80107f8:	9e00      	ldr	r6, [sp, #0]
 80107fa:	9a00      	ldr	r2, [sp, #0]
 80107fc:	441a      	add	r2, r3
 80107fe:	9200      	str	r2, [sp, #0]
 8010800:	9a06      	ldr	r2, [sp, #24]
 8010802:	2101      	movs	r1, #1
 8010804:	441a      	add	r2, r3
 8010806:	4648      	mov	r0, r9
 8010808:	9206      	str	r2, [sp, #24]
 801080a:	f000 fc2d 	bl	8011068 <__i2b>
 801080e:	4605      	mov	r5, r0
 8010810:	b166      	cbz	r6, 801082c <_dtoa_r+0x74c>
 8010812:	9b06      	ldr	r3, [sp, #24]
 8010814:	2b00      	cmp	r3, #0
 8010816:	dd09      	ble.n	801082c <_dtoa_r+0x74c>
 8010818:	42b3      	cmp	r3, r6
 801081a:	9a00      	ldr	r2, [sp, #0]
 801081c:	bfa8      	it	ge
 801081e:	4633      	movge	r3, r6
 8010820:	1ad2      	subs	r2, r2, r3
 8010822:	9200      	str	r2, [sp, #0]
 8010824:	9a06      	ldr	r2, [sp, #24]
 8010826:	1af6      	subs	r6, r6, r3
 8010828:	1ad3      	subs	r3, r2, r3
 801082a:	9306      	str	r3, [sp, #24]
 801082c:	9b08      	ldr	r3, [sp, #32]
 801082e:	b30b      	cbz	r3, 8010874 <_dtoa_r+0x794>
 8010830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010832:	2b00      	cmp	r3, #0
 8010834:	f000 80c6 	beq.w	80109c4 <_dtoa_r+0x8e4>
 8010838:	2c00      	cmp	r4, #0
 801083a:	f000 80c0 	beq.w	80109be <_dtoa_r+0x8de>
 801083e:	4629      	mov	r1, r5
 8010840:	4622      	mov	r2, r4
 8010842:	4648      	mov	r0, r9
 8010844:	f000 fcc8 	bl	80111d8 <__pow5mult>
 8010848:	9a02      	ldr	r2, [sp, #8]
 801084a:	4601      	mov	r1, r0
 801084c:	4605      	mov	r5, r0
 801084e:	4648      	mov	r0, r9
 8010850:	f000 fc20 	bl	8011094 <__multiply>
 8010854:	9902      	ldr	r1, [sp, #8]
 8010856:	4680      	mov	r8, r0
 8010858:	4648      	mov	r0, r9
 801085a:	f000 fb51 	bl	8010f00 <_Bfree>
 801085e:	9b08      	ldr	r3, [sp, #32]
 8010860:	1b1b      	subs	r3, r3, r4
 8010862:	9308      	str	r3, [sp, #32]
 8010864:	f000 80b1 	beq.w	80109ca <_dtoa_r+0x8ea>
 8010868:	9a08      	ldr	r2, [sp, #32]
 801086a:	4641      	mov	r1, r8
 801086c:	4648      	mov	r0, r9
 801086e:	f000 fcb3 	bl	80111d8 <__pow5mult>
 8010872:	9002      	str	r0, [sp, #8]
 8010874:	2101      	movs	r1, #1
 8010876:	4648      	mov	r0, r9
 8010878:	f000 fbf6 	bl	8011068 <__i2b>
 801087c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801087e:	4604      	mov	r4, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	f000 81d8 	beq.w	8010c36 <_dtoa_r+0xb56>
 8010886:	461a      	mov	r2, r3
 8010888:	4601      	mov	r1, r0
 801088a:	4648      	mov	r0, r9
 801088c:	f000 fca4 	bl	80111d8 <__pow5mult>
 8010890:	9b07      	ldr	r3, [sp, #28]
 8010892:	2b01      	cmp	r3, #1
 8010894:	4604      	mov	r4, r0
 8010896:	f300 809f 	bgt.w	80109d8 <_dtoa_r+0x8f8>
 801089a:	9b04      	ldr	r3, [sp, #16]
 801089c:	2b00      	cmp	r3, #0
 801089e:	f040 8097 	bne.w	80109d0 <_dtoa_r+0x8f0>
 80108a2:	9b05      	ldr	r3, [sp, #20]
 80108a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f040 8093 	bne.w	80109d4 <_dtoa_r+0x8f4>
 80108ae:	9b05      	ldr	r3, [sp, #20]
 80108b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80108b4:	0d1b      	lsrs	r3, r3, #20
 80108b6:	051b      	lsls	r3, r3, #20
 80108b8:	b133      	cbz	r3, 80108c8 <_dtoa_r+0x7e8>
 80108ba:	9b00      	ldr	r3, [sp, #0]
 80108bc:	3301      	adds	r3, #1
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	9b06      	ldr	r3, [sp, #24]
 80108c2:	3301      	adds	r3, #1
 80108c4:	9306      	str	r3, [sp, #24]
 80108c6:	2301      	movs	r3, #1
 80108c8:	9308      	str	r3, [sp, #32]
 80108ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f000 81b8 	beq.w	8010c42 <_dtoa_r+0xb62>
 80108d2:	6923      	ldr	r3, [r4, #16]
 80108d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80108d8:	6918      	ldr	r0, [r3, #16]
 80108da:	f000 fb79 	bl	8010fd0 <__hi0bits>
 80108de:	f1c0 0020 	rsb	r0, r0, #32
 80108e2:	9b06      	ldr	r3, [sp, #24]
 80108e4:	4418      	add	r0, r3
 80108e6:	f010 001f 	ands.w	r0, r0, #31
 80108ea:	f000 8082 	beq.w	80109f2 <_dtoa_r+0x912>
 80108ee:	f1c0 0320 	rsb	r3, r0, #32
 80108f2:	2b04      	cmp	r3, #4
 80108f4:	dd73      	ble.n	80109de <_dtoa_r+0x8fe>
 80108f6:	9b00      	ldr	r3, [sp, #0]
 80108f8:	f1c0 001c 	rsb	r0, r0, #28
 80108fc:	4403      	add	r3, r0
 80108fe:	9300      	str	r3, [sp, #0]
 8010900:	9b06      	ldr	r3, [sp, #24]
 8010902:	4403      	add	r3, r0
 8010904:	4406      	add	r6, r0
 8010906:	9306      	str	r3, [sp, #24]
 8010908:	9b00      	ldr	r3, [sp, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	dd05      	ble.n	801091a <_dtoa_r+0x83a>
 801090e:	9902      	ldr	r1, [sp, #8]
 8010910:	461a      	mov	r2, r3
 8010912:	4648      	mov	r0, r9
 8010914:	f000 fcba 	bl	801128c <__lshift>
 8010918:	9002      	str	r0, [sp, #8]
 801091a:	9b06      	ldr	r3, [sp, #24]
 801091c:	2b00      	cmp	r3, #0
 801091e:	dd05      	ble.n	801092c <_dtoa_r+0x84c>
 8010920:	4621      	mov	r1, r4
 8010922:	461a      	mov	r2, r3
 8010924:	4648      	mov	r0, r9
 8010926:	f000 fcb1 	bl	801128c <__lshift>
 801092a:	4604      	mov	r4, r0
 801092c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801092e:	2b00      	cmp	r3, #0
 8010930:	d061      	beq.n	80109f6 <_dtoa_r+0x916>
 8010932:	9802      	ldr	r0, [sp, #8]
 8010934:	4621      	mov	r1, r4
 8010936:	f000 fd15 	bl	8011364 <__mcmp>
 801093a:	2800      	cmp	r0, #0
 801093c:	da5b      	bge.n	80109f6 <_dtoa_r+0x916>
 801093e:	2300      	movs	r3, #0
 8010940:	9902      	ldr	r1, [sp, #8]
 8010942:	220a      	movs	r2, #10
 8010944:	4648      	mov	r0, r9
 8010946:	f000 fafd 	bl	8010f44 <__multadd>
 801094a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801094c:	9002      	str	r0, [sp, #8]
 801094e:	f107 38ff 	add.w	r8, r7, #4294967295
 8010952:	2b00      	cmp	r3, #0
 8010954:	f000 8177 	beq.w	8010c46 <_dtoa_r+0xb66>
 8010958:	4629      	mov	r1, r5
 801095a:	2300      	movs	r3, #0
 801095c:	220a      	movs	r2, #10
 801095e:	4648      	mov	r0, r9
 8010960:	f000 faf0 	bl	8010f44 <__multadd>
 8010964:	f1bb 0f00 	cmp.w	fp, #0
 8010968:	4605      	mov	r5, r0
 801096a:	dc6f      	bgt.n	8010a4c <_dtoa_r+0x96c>
 801096c:	9b07      	ldr	r3, [sp, #28]
 801096e:	2b02      	cmp	r3, #2
 8010970:	dc49      	bgt.n	8010a06 <_dtoa_r+0x926>
 8010972:	e06b      	b.n	8010a4c <_dtoa_r+0x96c>
 8010974:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010976:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801097a:	e73c      	b.n	80107f6 <_dtoa_r+0x716>
 801097c:	3fe00000 	.word	0x3fe00000
 8010980:	40240000 	.word	0x40240000
 8010984:	9b03      	ldr	r3, [sp, #12]
 8010986:	1e5c      	subs	r4, r3, #1
 8010988:	9b08      	ldr	r3, [sp, #32]
 801098a:	42a3      	cmp	r3, r4
 801098c:	db09      	blt.n	80109a2 <_dtoa_r+0x8c2>
 801098e:	1b1c      	subs	r4, r3, r4
 8010990:	9b03      	ldr	r3, [sp, #12]
 8010992:	2b00      	cmp	r3, #0
 8010994:	f6bf af30 	bge.w	80107f8 <_dtoa_r+0x718>
 8010998:	9b00      	ldr	r3, [sp, #0]
 801099a:	9a03      	ldr	r2, [sp, #12]
 801099c:	1a9e      	subs	r6, r3, r2
 801099e:	2300      	movs	r3, #0
 80109a0:	e72b      	b.n	80107fa <_dtoa_r+0x71a>
 80109a2:	9b08      	ldr	r3, [sp, #32]
 80109a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80109a6:	9408      	str	r4, [sp, #32]
 80109a8:	1ae3      	subs	r3, r4, r3
 80109aa:	441a      	add	r2, r3
 80109ac:	9e00      	ldr	r6, [sp, #0]
 80109ae:	9b03      	ldr	r3, [sp, #12]
 80109b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80109b2:	2400      	movs	r4, #0
 80109b4:	e721      	b.n	80107fa <_dtoa_r+0x71a>
 80109b6:	9c08      	ldr	r4, [sp, #32]
 80109b8:	9e00      	ldr	r6, [sp, #0]
 80109ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80109bc:	e728      	b.n	8010810 <_dtoa_r+0x730>
 80109be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80109c2:	e751      	b.n	8010868 <_dtoa_r+0x788>
 80109c4:	9a08      	ldr	r2, [sp, #32]
 80109c6:	9902      	ldr	r1, [sp, #8]
 80109c8:	e750      	b.n	801086c <_dtoa_r+0x78c>
 80109ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80109ce:	e751      	b.n	8010874 <_dtoa_r+0x794>
 80109d0:	2300      	movs	r3, #0
 80109d2:	e779      	b.n	80108c8 <_dtoa_r+0x7e8>
 80109d4:	9b04      	ldr	r3, [sp, #16]
 80109d6:	e777      	b.n	80108c8 <_dtoa_r+0x7e8>
 80109d8:	2300      	movs	r3, #0
 80109da:	9308      	str	r3, [sp, #32]
 80109dc:	e779      	b.n	80108d2 <_dtoa_r+0x7f2>
 80109de:	d093      	beq.n	8010908 <_dtoa_r+0x828>
 80109e0:	9a00      	ldr	r2, [sp, #0]
 80109e2:	331c      	adds	r3, #28
 80109e4:	441a      	add	r2, r3
 80109e6:	9200      	str	r2, [sp, #0]
 80109e8:	9a06      	ldr	r2, [sp, #24]
 80109ea:	441a      	add	r2, r3
 80109ec:	441e      	add	r6, r3
 80109ee:	9206      	str	r2, [sp, #24]
 80109f0:	e78a      	b.n	8010908 <_dtoa_r+0x828>
 80109f2:	4603      	mov	r3, r0
 80109f4:	e7f4      	b.n	80109e0 <_dtoa_r+0x900>
 80109f6:	9b03      	ldr	r3, [sp, #12]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	46b8      	mov	r8, r7
 80109fc:	dc20      	bgt.n	8010a40 <_dtoa_r+0x960>
 80109fe:	469b      	mov	fp, r3
 8010a00:	9b07      	ldr	r3, [sp, #28]
 8010a02:	2b02      	cmp	r3, #2
 8010a04:	dd1e      	ble.n	8010a44 <_dtoa_r+0x964>
 8010a06:	f1bb 0f00 	cmp.w	fp, #0
 8010a0a:	f47f adb1 	bne.w	8010570 <_dtoa_r+0x490>
 8010a0e:	4621      	mov	r1, r4
 8010a10:	465b      	mov	r3, fp
 8010a12:	2205      	movs	r2, #5
 8010a14:	4648      	mov	r0, r9
 8010a16:	f000 fa95 	bl	8010f44 <__multadd>
 8010a1a:	4601      	mov	r1, r0
 8010a1c:	4604      	mov	r4, r0
 8010a1e:	9802      	ldr	r0, [sp, #8]
 8010a20:	f000 fca0 	bl	8011364 <__mcmp>
 8010a24:	2800      	cmp	r0, #0
 8010a26:	f77f ada3 	ble.w	8010570 <_dtoa_r+0x490>
 8010a2a:	4656      	mov	r6, sl
 8010a2c:	2331      	movs	r3, #49	@ 0x31
 8010a2e:	f806 3b01 	strb.w	r3, [r6], #1
 8010a32:	f108 0801 	add.w	r8, r8, #1
 8010a36:	e59f      	b.n	8010578 <_dtoa_r+0x498>
 8010a38:	9c03      	ldr	r4, [sp, #12]
 8010a3a:	46b8      	mov	r8, r7
 8010a3c:	4625      	mov	r5, r4
 8010a3e:	e7f4      	b.n	8010a2a <_dtoa_r+0x94a>
 8010a40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	f000 8101 	beq.w	8010c4e <_dtoa_r+0xb6e>
 8010a4c:	2e00      	cmp	r6, #0
 8010a4e:	dd05      	ble.n	8010a5c <_dtoa_r+0x97c>
 8010a50:	4629      	mov	r1, r5
 8010a52:	4632      	mov	r2, r6
 8010a54:	4648      	mov	r0, r9
 8010a56:	f000 fc19 	bl	801128c <__lshift>
 8010a5a:	4605      	mov	r5, r0
 8010a5c:	9b08      	ldr	r3, [sp, #32]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d05c      	beq.n	8010b1c <_dtoa_r+0xa3c>
 8010a62:	6869      	ldr	r1, [r5, #4]
 8010a64:	4648      	mov	r0, r9
 8010a66:	f000 fa0b 	bl	8010e80 <_Balloc>
 8010a6a:	4606      	mov	r6, r0
 8010a6c:	b928      	cbnz	r0, 8010a7a <_dtoa_r+0x99a>
 8010a6e:	4b82      	ldr	r3, [pc, #520]	@ (8010c78 <_dtoa_r+0xb98>)
 8010a70:	4602      	mov	r2, r0
 8010a72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010a76:	f7ff bb4a 	b.w	801010e <_dtoa_r+0x2e>
 8010a7a:	692a      	ldr	r2, [r5, #16]
 8010a7c:	3202      	adds	r2, #2
 8010a7e:	0092      	lsls	r2, r2, #2
 8010a80:	f105 010c 	add.w	r1, r5, #12
 8010a84:	300c      	adds	r0, #12
 8010a86:	f7ff fa92 	bl	800ffae <memcpy>
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	4631      	mov	r1, r6
 8010a8e:	4648      	mov	r0, r9
 8010a90:	f000 fbfc 	bl	801128c <__lshift>
 8010a94:	f10a 0301 	add.w	r3, sl, #1
 8010a98:	9300      	str	r3, [sp, #0]
 8010a9a:	eb0a 030b 	add.w	r3, sl, fp
 8010a9e:	9308      	str	r3, [sp, #32]
 8010aa0:	9b04      	ldr	r3, [sp, #16]
 8010aa2:	f003 0301 	and.w	r3, r3, #1
 8010aa6:	462f      	mov	r7, r5
 8010aa8:	9306      	str	r3, [sp, #24]
 8010aaa:	4605      	mov	r5, r0
 8010aac:	9b00      	ldr	r3, [sp, #0]
 8010aae:	9802      	ldr	r0, [sp, #8]
 8010ab0:	4621      	mov	r1, r4
 8010ab2:	f103 3bff 	add.w	fp, r3, #4294967295
 8010ab6:	f7ff fa88 	bl	800ffca <quorem>
 8010aba:	4603      	mov	r3, r0
 8010abc:	3330      	adds	r3, #48	@ 0x30
 8010abe:	9003      	str	r0, [sp, #12]
 8010ac0:	4639      	mov	r1, r7
 8010ac2:	9802      	ldr	r0, [sp, #8]
 8010ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ac6:	f000 fc4d 	bl	8011364 <__mcmp>
 8010aca:	462a      	mov	r2, r5
 8010acc:	9004      	str	r0, [sp, #16]
 8010ace:	4621      	mov	r1, r4
 8010ad0:	4648      	mov	r0, r9
 8010ad2:	f000 fc63 	bl	801139c <__mdiff>
 8010ad6:	68c2      	ldr	r2, [r0, #12]
 8010ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ada:	4606      	mov	r6, r0
 8010adc:	bb02      	cbnz	r2, 8010b20 <_dtoa_r+0xa40>
 8010ade:	4601      	mov	r1, r0
 8010ae0:	9802      	ldr	r0, [sp, #8]
 8010ae2:	f000 fc3f 	bl	8011364 <__mcmp>
 8010ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ae8:	4602      	mov	r2, r0
 8010aea:	4631      	mov	r1, r6
 8010aec:	4648      	mov	r0, r9
 8010aee:	920c      	str	r2, [sp, #48]	@ 0x30
 8010af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010af2:	f000 fa05 	bl	8010f00 <_Bfree>
 8010af6:	9b07      	ldr	r3, [sp, #28]
 8010af8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010afa:	9e00      	ldr	r6, [sp, #0]
 8010afc:	ea42 0103 	orr.w	r1, r2, r3
 8010b00:	9b06      	ldr	r3, [sp, #24]
 8010b02:	4319      	orrs	r1, r3
 8010b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b06:	d10d      	bne.n	8010b24 <_dtoa_r+0xa44>
 8010b08:	2b39      	cmp	r3, #57	@ 0x39
 8010b0a:	d027      	beq.n	8010b5c <_dtoa_r+0xa7c>
 8010b0c:	9a04      	ldr	r2, [sp, #16]
 8010b0e:	2a00      	cmp	r2, #0
 8010b10:	dd01      	ble.n	8010b16 <_dtoa_r+0xa36>
 8010b12:	9b03      	ldr	r3, [sp, #12]
 8010b14:	3331      	adds	r3, #49	@ 0x31
 8010b16:	f88b 3000 	strb.w	r3, [fp]
 8010b1a:	e52e      	b.n	801057a <_dtoa_r+0x49a>
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	e7b9      	b.n	8010a94 <_dtoa_r+0x9b4>
 8010b20:	2201      	movs	r2, #1
 8010b22:	e7e2      	b.n	8010aea <_dtoa_r+0xa0a>
 8010b24:	9904      	ldr	r1, [sp, #16]
 8010b26:	2900      	cmp	r1, #0
 8010b28:	db04      	blt.n	8010b34 <_dtoa_r+0xa54>
 8010b2a:	9807      	ldr	r0, [sp, #28]
 8010b2c:	4301      	orrs	r1, r0
 8010b2e:	9806      	ldr	r0, [sp, #24]
 8010b30:	4301      	orrs	r1, r0
 8010b32:	d120      	bne.n	8010b76 <_dtoa_r+0xa96>
 8010b34:	2a00      	cmp	r2, #0
 8010b36:	ddee      	ble.n	8010b16 <_dtoa_r+0xa36>
 8010b38:	9902      	ldr	r1, [sp, #8]
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	4648      	mov	r0, r9
 8010b40:	f000 fba4 	bl	801128c <__lshift>
 8010b44:	4621      	mov	r1, r4
 8010b46:	9002      	str	r0, [sp, #8]
 8010b48:	f000 fc0c 	bl	8011364 <__mcmp>
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	9b00      	ldr	r3, [sp, #0]
 8010b50:	dc02      	bgt.n	8010b58 <_dtoa_r+0xa78>
 8010b52:	d1e0      	bne.n	8010b16 <_dtoa_r+0xa36>
 8010b54:	07da      	lsls	r2, r3, #31
 8010b56:	d5de      	bpl.n	8010b16 <_dtoa_r+0xa36>
 8010b58:	2b39      	cmp	r3, #57	@ 0x39
 8010b5a:	d1da      	bne.n	8010b12 <_dtoa_r+0xa32>
 8010b5c:	2339      	movs	r3, #57	@ 0x39
 8010b5e:	f88b 3000 	strb.w	r3, [fp]
 8010b62:	4633      	mov	r3, r6
 8010b64:	461e      	mov	r6, r3
 8010b66:	3b01      	subs	r3, #1
 8010b68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010b6c:	2a39      	cmp	r2, #57	@ 0x39
 8010b6e:	d04e      	beq.n	8010c0e <_dtoa_r+0xb2e>
 8010b70:	3201      	adds	r2, #1
 8010b72:	701a      	strb	r2, [r3, #0]
 8010b74:	e501      	b.n	801057a <_dtoa_r+0x49a>
 8010b76:	2a00      	cmp	r2, #0
 8010b78:	dd03      	ble.n	8010b82 <_dtoa_r+0xaa2>
 8010b7a:	2b39      	cmp	r3, #57	@ 0x39
 8010b7c:	d0ee      	beq.n	8010b5c <_dtoa_r+0xa7c>
 8010b7e:	3301      	adds	r3, #1
 8010b80:	e7c9      	b.n	8010b16 <_dtoa_r+0xa36>
 8010b82:	9a00      	ldr	r2, [sp, #0]
 8010b84:	9908      	ldr	r1, [sp, #32]
 8010b86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010b8a:	428a      	cmp	r2, r1
 8010b8c:	d028      	beq.n	8010be0 <_dtoa_r+0xb00>
 8010b8e:	9902      	ldr	r1, [sp, #8]
 8010b90:	2300      	movs	r3, #0
 8010b92:	220a      	movs	r2, #10
 8010b94:	4648      	mov	r0, r9
 8010b96:	f000 f9d5 	bl	8010f44 <__multadd>
 8010b9a:	42af      	cmp	r7, r5
 8010b9c:	9002      	str	r0, [sp, #8]
 8010b9e:	f04f 0300 	mov.w	r3, #0
 8010ba2:	f04f 020a 	mov.w	r2, #10
 8010ba6:	4639      	mov	r1, r7
 8010ba8:	4648      	mov	r0, r9
 8010baa:	d107      	bne.n	8010bbc <_dtoa_r+0xadc>
 8010bac:	f000 f9ca 	bl	8010f44 <__multadd>
 8010bb0:	4607      	mov	r7, r0
 8010bb2:	4605      	mov	r5, r0
 8010bb4:	9b00      	ldr	r3, [sp, #0]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	9300      	str	r3, [sp, #0]
 8010bba:	e777      	b.n	8010aac <_dtoa_r+0x9cc>
 8010bbc:	f000 f9c2 	bl	8010f44 <__multadd>
 8010bc0:	4629      	mov	r1, r5
 8010bc2:	4607      	mov	r7, r0
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	220a      	movs	r2, #10
 8010bc8:	4648      	mov	r0, r9
 8010bca:	f000 f9bb 	bl	8010f44 <__multadd>
 8010bce:	4605      	mov	r5, r0
 8010bd0:	e7f0      	b.n	8010bb4 <_dtoa_r+0xad4>
 8010bd2:	f1bb 0f00 	cmp.w	fp, #0
 8010bd6:	bfcc      	ite	gt
 8010bd8:	465e      	movgt	r6, fp
 8010bda:	2601      	movle	r6, #1
 8010bdc:	4456      	add	r6, sl
 8010bde:	2700      	movs	r7, #0
 8010be0:	9902      	ldr	r1, [sp, #8]
 8010be2:	9300      	str	r3, [sp, #0]
 8010be4:	2201      	movs	r2, #1
 8010be6:	4648      	mov	r0, r9
 8010be8:	f000 fb50 	bl	801128c <__lshift>
 8010bec:	4621      	mov	r1, r4
 8010bee:	9002      	str	r0, [sp, #8]
 8010bf0:	f000 fbb8 	bl	8011364 <__mcmp>
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	dcb4      	bgt.n	8010b62 <_dtoa_r+0xa82>
 8010bf8:	d102      	bne.n	8010c00 <_dtoa_r+0xb20>
 8010bfa:	9b00      	ldr	r3, [sp, #0]
 8010bfc:	07db      	lsls	r3, r3, #31
 8010bfe:	d4b0      	bmi.n	8010b62 <_dtoa_r+0xa82>
 8010c00:	4633      	mov	r3, r6
 8010c02:	461e      	mov	r6, r3
 8010c04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c08:	2a30      	cmp	r2, #48	@ 0x30
 8010c0a:	d0fa      	beq.n	8010c02 <_dtoa_r+0xb22>
 8010c0c:	e4b5      	b.n	801057a <_dtoa_r+0x49a>
 8010c0e:	459a      	cmp	sl, r3
 8010c10:	d1a8      	bne.n	8010b64 <_dtoa_r+0xa84>
 8010c12:	2331      	movs	r3, #49	@ 0x31
 8010c14:	f108 0801 	add.w	r8, r8, #1
 8010c18:	f88a 3000 	strb.w	r3, [sl]
 8010c1c:	e4ad      	b.n	801057a <_dtoa_r+0x49a>
 8010c1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010c20:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010c7c <_dtoa_r+0xb9c>
 8010c24:	b11b      	cbz	r3, 8010c2e <_dtoa_r+0xb4e>
 8010c26:	f10a 0308 	add.w	r3, sl, #8
 8010c2a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010c2c:	6013      	str	r3, [r2, #0]
 8010c2e:	4650      	mov	r0, sl
 8010c30:	b017      	add	sp, #92	@ 0x5c
 8010c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c36:	9b07      	ldr	r3, [sp, #28]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	f77f ae2e 	ble.w	801089a <_dtoa_r+0x7ba>
 8010c3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c40:	9308      	str	r3, [sp, #32]
 8010c42:	2001      	movs	r0, #1
 8010c44:	e64d      	b.n	80108e2 <_dtoa_r+0x802>
 8010c46:	f1bb 0f00 	cmp.w	fp, #0
 8010c4a:	f77f aed9 	ble.w	8010a00 <_dtoa_r+0x920>
 8010c4e:	4656      	mov	r6, sl
 8010c50:	9802      	ldr	r0, [sp, #8]
 8010c52:	4621      	mov	r1, r4
 8010c54:	f7ff f9b9 	bl	800ffca <quorem>
 8010c58:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010c5c:	f806 3b01 	strb.w	r3, [r6], #1
 8010c60:	eba6 020a 	sub.w	r2, r6, sl
 8010c64:	4593      	cmp	fp, r2
 8010c66:	ddb4      	ble.n	8010bd2 <_dtoa_r+0xaf2>
 8010c68:	9902      	ldr	r1, [sp, #8]
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	220a      	movs	r2, #10
 8010c6e:	4648      	mov	r0, r9
 8010c70:	f000 f968 	bl	8010f44 <__multadd>
 8010c74:	9002      	str	r0, [sp, #8]
 8010c76:	e7eb      	b.n	8010c50 <_dtoa_r+0xb70>
 8010c78:	08012478 	.word	0x08012478
 8010c7c:	080123fc 	.word	0x080123fc

08010c80 <_free_r>:
 8010c80:	b538      	push	{r3, r4, r5, lr}
 8010c82:	4605      	mov	r5, r0
 8010c84:	2900      	cmp	r1, #0
 8010c86:	d041      	beq.n	8010d0c <_free_r+0x8c>
 8010c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c8c:	1f0c      	subs	r4, r1, #4
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	bfb8      	it	lt
 8010c92:	18e4      	addlt	r4, r4, r3
 8010c94:	f000 f8e8 	bl	8010e68 <__malloc_lock>
 8010c98:	4a1d      	ldr	r2, [pc, #116]	@ (8010d10 <_free_r+0x90>)
 8010c9a:	6813      	ldr	r3, [r2, #0]
 8010c9c:	b933      	cbnz	r3, 8010cac <_free_r+0x2c>
 8010c9e:	6063      	str	r3, [r4, #4]
 8010ca0:	6014      	str	r4, [r2, #0]
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ca8:	f000 b8e4 	b.w	8010e74 <__malloc_unlock>
 8010cac:	42a3      	cmp	r3, r4
 8010cae:	d908      	bls.n	8010cc2 <_free_r+0x42>
 8010cb0:	6820      	ldr	r0, [r4, #0]
 8010cb2:	1821      	adds	r1, r4, r0
 8010cb4:	428b      	cmp	r3, r1
 8010cb6:	bf01      	itttt	eq
 8010cb8:	6819      	ldreq	r1, [r3, #0]
 8010cba:	685b      	ldreq	r3, [r3, #4]
 8010cbc:	1809      	addeq	r1, r1, r0
 8010cbe:	6021      	streq	r1, [r4, #0]
 8010cc0:	e7ed      	b.n	8010c9e <_free_r+0x1e>
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	b10b      	cbz	r3, 8010ccc <_free_r+0x4c>
 8010cc8:	42a3      	cmp	r3, r4
 8010cca:	d9fa      	bls.n	8010cc2 <_free_r+0x42>
 8010ccc:	6811      	ldr	r1, [r2, #0]
 8010cce:	1850      	adds	r0, r2, r1
 8010cd0:	42a0      	cmp	r0, r4
 8010cd2:	d10b      	bne.n	8010cec <_free_r+0x6c>
 8010cd4:	6820      	ldr	r0, [r4, #0]
 8010cd6:	4401      	add	r1, r0
 8010cd8:	1850      	adds	r0, r2, r1
 8010cda:	4283      	cmp	r3, r0
 8010cdc:	6011      	str	r1, [r2, #0]
 8010cde:	d1e0      	bne.n	8010ca2 <_free_r+0x22>
 8010ce0:	6818      	ldr	r0, [r3, #0]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	6053      	str	r3, [r2, #4]
 8010ce6:	4408      	add	r0, r1
 8010ce8:	6010      	str	r0, [r2, #0]
 8010cea:	e7da      	b.n	8010ca2 <_free_r+0x22>
 8010cec:	d902      	bls.n	8010cf4 <_free_r+0x74>
 8010cee:	230c      	movs	r3, #12
 8010cf0:	602b      	str	r3, [r5, #0]
 8010cf2:	e7d6      	b.n	8010ca2 <_free_r+0x22>
 8010cf4:	6820      	ldr	r0, [r4, #0]
 8010cf6:	1821      	adds	r1, r4, r0
 8010cf8:	428b      	cmp	r3, r1
 8010cfa:	bf04      	itt	eq
 8010cfc:	6819      	ldreq	r1, [r3, #0]
 8010cfe:	685b      	ldreq	r3, [r3, #4]
 8010d00:	6063      	str	r3, [r4, #4]
 8010d02:	bf04      	itt	eq
 8010d04:	1809      	addeq	r1, r1, r0
 8010d06:	6021      	streq	r1, [r4, #0]
 8010d08:	6054      	str	r4, [r2, #4]
 8010d0a:	e7ca      	b.n	8010ca2 <_free_r+0x22>
 8010d0c:	bd38      	pop	{r3, r4, r5, pc}
 8010d0e:	bf00      	nop
 8010d10:	2000a658 	.word	0x2000a658

08010d14 <malloc>:
 8010d14:	4b02      	ldr	r3, [pc, #8]	@ (8010d20 <malloc+0xc>)
 8010d16:	4601      	mov	r1, r0
 8010d18:	6818      	ldr	r0, [r3, #0]
 8010d1a:	f000 b825 	b.w	8010d68 <_malloc_r>
 8010d1e:	bf00      	nop
 8010d20:	20000194 	.word	0x20000194

08010d24 <sbrk_aligned>:
 8010d24:	b570      	push	{r4, r5, r6, lr}
 8010d26:	4e0f      	ldr	r6, [pc, #60]	@ (8010d64 <sbrk_aligned+0x40>)
 8010d28:	460c      	mov	r4, r1
 8010d2a:	6831      	ldr	r1, [r6, #0]
 8010d2c:	4605      	mov	r5, r0
 8010d2e:	b911      	cbnz	r1, 8010d36 <sbrk_aligned+0x12>
 8010d30:	f000 fe3e 	bl	80119b0 <_sbrk_r>
 8010d34:	6030      	str	r0, [r6, #0]
 8010d36:	4621      	mov	r1, r4
 8010d38:	4628      	mov	r0, r5
 8010d3a:	f000 fe39 	bl	80119b0 <_sbrk_r>
 8010d3e:	1c43      	adds	r3, r0, #1
 8010d40:	d103      	bne.n	8010d4a <sbrk_aligned+0x26>
 8010d42:	f04f 34ff 	mov.w	r4, #4294967295
 8010d46:	4620      	mov	r0, r4
 8010d48:	bd70      	pop	{r4, r5, r6, pc}
 8010d4a:	1cc4      	adds	r4, r0, #3
 8010d4c:	f024 0403 	bic.w	r4, r4, #3
 8010d50:	42a0      	cmp	r0, r4
 8010d52:	d0f8      	beq.n	8010d46 <sbrk_aligned+0x22>
 8010d54:	1a21      	subs	r1, r4, r0
 8010d56:	4628      	mov	r0, r5
 8010d58:	f000 fe2a 	bl	80119b0 <_sbrk_r>
 8010d5c:	3001      	adds	r0, #1
 8010d5e:	d1f2      	bne.n	8010d46 <sbrk_aligned+0x22>
 8010d60:	e7ef      	b.n	8010d42 <sbrk_aligned+0x1e>
 8010d62:	bf00      	nop
 8010d64:	2000a654 	.word	0x2000a654

08010d68 <_malloc_r>:
 8010d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d6c:	1ccd      	adds	r5, r1, #3
 8010d6e:	f025 0503 	bic.w	r5, r5, #3
 8010d72:	3508      	adds	r5, #8
 8010d74:	2d0c      	cmp	r5, #12
 8010d76:	bf38      	it	cc
 8010d78:	250c      	movcc	r5, #12
 8010d7a:	2d00      	cmp	r5, #0
 8010d7c:	4606      	mov	r6, r0
 8010d7e:	db01      	blt.n	8010d84 <_malloc_r+0x1c>
 8010d80:	42a9      	cmp	r1, r5
 8010d82:	d904      	bls.n	8010d8e <_malloc_r+0x26>
 8010d84:	230c      	movs	r3, #12
 8010d86:	6033      	str	r3, [r6, #0]
 8010d88:	2000      	movs	r0, #0
 8010d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010e64 <_malloc_r+0xfc>
 8010d92:	f000 f869 	bl	8010e68 <__malloc_lock>
 8010d96:	f8d8 3000 	ldr.w	r3, [r8]
 8010d9a:	461c      	mov	r4, r3
 8010d9c:	bb44      	cbnz	r4, 8010df0 <_malloc_r+0x88>
 8010d9e:	4629      	mov	r1, r5
 8010da0:	4630      	mov	r0, r6
 8010da2:	f7ff ffbf 	bl	8010d24 <sbrk_aligned>
 8010da6:	1c43      	adds	r3, r0, #1
 8010da8:	4604      	mov	r4, r0
 8010daa:	d158      	bne.n	8010e5e <_malloc_r+0xf6>
 8010dac:	f8d8 4000 	ldr.w	r4, [r8]
 8010db0:	4627      	mov	r7, r4
 8010db2:	2f00      	cmp	r7, #0
 8010db4:	d143      	bne.n	8010e3e <_malloc_r+0xd6>
 8010db6:	2c00      	cmp	r4, #0
 8010db8:	d04b      	beq.n	8010e52 <_malloc_r+0xea>
 8010dba:	6823      	ldr	r3, [r4, #0]
 8010dbc:	4639      	mov	r1, r7
 8010dbe:	4630      	mov	r0, r6
 8010dc0:	eb04 0903 	add.w	r9, r4, r3
 8010dc4:	f000 fdf4 	bl	80119b0 <_sbrk_r>
 8010dc8:	4581      	cmp	r9, r0
 8010dca:	d142      	bne.n	8010e52 <_malloc_r+0xea>
 8010dcc:	6821      	ldr	r1, [r4, #0]
 8010dce:	1a6d      	subs	r5, r5, r1
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	f7ff ffa6 	bl	8010d24 <sbrk_aligned>
 8010dd8:	3001      	adds	r0, #1
 8010dda:	d03a      	beq.n	8010e52 <_malloc_r+0xea>
 8010ddc:	6823      	ldr	r3, [r4, #0]
 8010dde:	442b      	add	r3, r5
 8010de0:	6023      	str	r3, [r4, #0]
 8010de2:	f8d8 3000 	ldr.w	r3, [r8]
 8010de6:	685a      	ldr	r2, [r3, #4]
 8010de8:	bb62      	cbnz	r2, 8010e44 <_malloc_r+0xdc>
 8010dea:	f8c8 7000 	str.w	r7, [r8]
 8010dee:	e00f      	b.n	8010e10 <_malloc_r+0xa8>
 8010df0:	6822      	ldr	r2, [r4, #0]
 8010df2:	1b52      	subs	r2, r2, r5
 8010df4:	d420      	bmi.n	8010e38 <_malloc_r+0xd0>
 8010df6:	2a0b      	cmp	r2, #11
 8010df8:	d917      	bls.n	8010e2a <_malloc_r+0xc2>
 8010dfa:	1961      	adds	r1, r4, r5
 8010dfc:	42a3      	cmp	r3, r4
 8010dfe:	6025      	str	r5, [r4, #0]
 8010e00:	bf18      	it	ne
 8010e02:	6059      	strne	r1, [r3, #4]
 8010e04:	6863      	ldr	r3, [r4, #4]
 8010e06:	bf08      	it	eq
 8010e08:	f8c8 1000 	streq.w	r1, [r8]
 8010e0c:	5162      	str	r2, [r4, r5]
 8010e0e:	604b      	str	r3, [r1, #4]
 8010e10:	4630      	mov	r0, r6
 8010e12:	f000 f82f 	bl	8010e74 <__malloc_unlock>
 8010e16:	f104 000b 	add.w	r0, r4, #11
 8010e1a:	1d23      	adds	r3, r4, #4
 8010e1c:	f020 0007 	bic.w	r0, r0, #7
 8010e20:	1ac2      	subs	r2, r0, r3
 8010e22:	bf1c      	itt	ne
 8010e24:	1a1b      	subne	r3, r3, r0
 8010e26:	50a3      	strne	r3, [r4, r2]
 8010e28:	e7af      	b.n	8010d8a <_malloc_r+0x22>
 8010e2a:	6862      	ldr	r2, [r4, #4]
 8010e2c:	42a3      	cmp	r3, r4
 8010e2e:	bf0c      	ite	eq
 8010e30:	f8c8 2000 	streq.w	r2, [r8]
 8010e34:	605a      	strne	r2, [r3, #4]
 8010e36:	e7eb      	b.n	8010e10 <_malloc_r+0xa8>
 8010e38:	4623      	mov	r3, r4
 8010e3a:	6864      	ldr	r4, [r4, #4]
 8010e3c:	e7ae      	b.n	8010d9c <_malloc_r+0x34>
 8010e3e:	463c      	mov	r4, r7
 8010e40:	687f      	ldr	r7, [r7, #4]
 8010e42:	e7b6      	b.n	8010db2 <_malloc_r+0x4a>
 8010e44:	461a      	mov	r2, r3
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	42a3      	cmp	r3, r4
 8010e4a:	d1fb      	bne.n	8010e44 <_malloc_r+0xdc>
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	6053      	str	r3, [r2, #4]
 8010e50:	e7de      	b.n	8010e10 <_malloc_r+0xa8>
 8010e52:	230c      	movs	r3, #12
 8010e54:	6033      	str	r3, [r6, #0]
 8010e56:	4630      	mov	r0, r6
 8010e58:	f000 f80c 	bl	8010e74 <__malloc_unlock>
 8010e5c:	e794      	b.n	8010d88 <_malloc_r+0x20>
 8010e5e:	6005      	str	r5, [r0, #0]
 8010e60:	e7d6      	b.n	8010e10 <_malloc_r+0xa8>
 8010e62:	bf00      	nop
 8010e64:	2000a658 	.word	0x2000a658

08010e68 <__malloc_lock>:
 8010e68:	4801      	ldr	r0, [pc, #4]	@ (8010e70 <__malloc_lock+0x8>)
 8010e6a:	f7ff b89e 	b.w	800ffaa <__retarget_lock_acquire_recursive>
 8010e6e:	bf00      	nop
 8010e70:	2000a650 	.word	0x2000a650

08010e74 <__malloc_unlock>:
 8010e74:	4801      	ldr	r0, [pc, #4]	@ (8010e7c <__malloc_unlock+0x8>)
 8010e76:	f7ff b899 	b.w	800ffac <__retarget_lock_release_recursive>
 8010e7a:	bf00      	nop
 8010e7c:	2000a650 	.word	0x2000a650

08010e80 <_Balloc>:
 8010e80:	b570      	push	{r4, r5, r6, lr}
 8010e82:	69c6      	ldr	r6, [r0, #28]
 8010e84:	4604      	mov	r4, r0
 8010e86:	460d      	mov	r5, r1
 8010e88:	b976      	cbnz	r6, 8010ea8 <_Balloc+0x28>
 8010e8a:	2010      	movs	r0, #16
 8010e8c:	f7ff ff42 	bl	8010d14 <malloc>
 8010e90:	4602      	mov	r2, r0
 8010e92:	61e0      	str	r0, [r4, #28]
 8010e94:	b920      	cbnz	r0, 8010ea0 <_Balloc+0x20>
 8010e96:	4b18      	ldr	r3, [pc, #96]	@ (8010ef8 <_Balloc+0x78>)
 8010e98:	4818      	ldr	r0, [pc, #96]	@ (8010efc <_Balloc+0x7c>)
 8010e9a:	216b      	movs	r1, #107	@ 0x6b
 8010e9c:	f000 fd98 	bl	80119d0 <__assert_func>
 8010ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ea4:	6006      	str	r6, [r0, #0]
 8010ea6:	60c6      	str	r6, [r0, #12]
 8010ea8:	69e6      	ldr	r6, [r4, #28]
 8010eaa:	68f3      	ldr	r3, [r6, #12]
 8010eac:	b183      	cbz	r3, 8010ed0 <_Balloc+0x50>
 8010eae:	69e3      	ldr	r3, [r4, #28]
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010eb6:	b9b8      	cbnz	r0, 8010ee8 <_Balloc+0x68>
 8010eb8:	2101      	movs	r1, #1
 8010eba:	fa01 f605 	lsl.w	r6, r1, r5
 8010ebe:	1d72      	adds	r2, r6, #5
 8010ec0:	0092      	lsls	r2, r2, #2
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f000 fda2 	bl	8011a0c <_calloc_r>
 8010ec8:	b160      	cbz	r0, 8010ee4 <_Balloc+0x64>
 8010eca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010ece:	e00e      	b.n	8010eee <_Balloc+0x6e>
 8010ed0:	2221      	movs	r2, #33	@ 0x21
 8010ed2:	2104      	movs	r1, #4
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	f000 fd99 	bl	8011a0c <_calloc_r>
 8010eda:	69e3      	ldr	r3, [r4, #28]
 8010edc:	60f0      	str	r0, [r6, #12]
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d1e4      	bne.n	8010eae <_Balloc+0x2e>
 8010ee4:	2000      	movs	r0, #0
 8010ee6:	bd70      	pop	{r4, r5, r6, pc}
 8010ee8:	6802      	ldr	r2, [r0, #0]
 8010eea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ef4:	e7f7      	b.n	8010ee6 <_Balloc+0x66>
 8010ef6:	bf00      	nop
 8010ef8:	08012409 	.word	0x08012409
 8010efc:	08012489 	.word	0x08012489

08010f00 <_Bfree>:
 8010f00:	b570      	push	{r4, r5, r6, lr}
 8010f02:	69c6      	ldr	r6, [r0, #28]
 8010f04:	4605      	mov	r5, r0
 8010f06:	460c      	mov	r4, r1
 8010f08:	b976      	cbnz	r6, 8010f28 <_Bfree+0x28>
 8010f0a:	2010      	movs	r0, #16
 8010f0c:	f7ff ff02 	bl	8010d14 <malloc>
 8010f10:	4602      	mov	r2, r0
 8010f12:	61e8      	str	r0, [r5, #28]
 8010f14:	b920      	cbnz	r0, 8010f20 <_Bfree+0x20>
 8010f16:	4b09      	ldr	r3, [pc, #36]	@ (8010f3c <_Bfree+0x3c>)
 8010f18:	4809      	ldr	r0, [pc, #36]	@ (8010f40 <_Bfree+0x40>)
 8010f1a:	218f      	movs	r1, #143	@ 0x8f
 8010f1c:	f000 fd58 	bl	80119d0 <__assert_func>
 8010f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f24:	6006      	str	r6, [r0, #0]
 8010f26:	60c6      	str	r6, [r0, #12]
 8010f28:	b13c      	cbz	r4, 8010f3a <_Bfree+0x3a>
 8010f2a:	69eb      	ldr	r3, [r5, #28]
 8010f2c:	6862      	ldr	r2, [r4, #4]
 8010f2e:	68db      	ldr	r3, [r3, #12]
 8010f30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f34:	6021      	str	r1, [r4, #0]
 8010f36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f3a:	bd70      	pop	{r4, r5, r6, pc}
 8010f3c:	08012409 	.word	0x08012409
 8010f40:	08012489 	.word	0x08012489

08010f44 <__multadd>:
 8010f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f48:	690d      	ldr	r5, [r1, #16]
 8010f4a:	4607      	mov	r7, r0
 8010f4c:	460c      	mov	r4, r1
 8010f4e:	461e      	mov	r6, r3
 8010f50:	f101 0c14 	add.w	ip, r1, #20
 8010f54:	2000      	movs	r0, #0
 8010f56:	f8dc 3000 	ldr.w	r3, [ip]
 8010f5a:	b299      	uxth	r1, r3
 8010f5c:	fb02 6101 	mla	r1, r2, r1, r6
 8010f60:	0c1e      	lsrs	r6, r3, #16
 8010f62:	0c0b      	lsrs	r3, r1, #16
 8010f64:	fb02 3306 	mla	r3, r2, r6, r3
 8010f68:	b289      	uxth	r1, r1
 8010f6a:	3001      	adds	r0, #1
 8010f6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f70:	4285      	cmp	r5, r0
 8010f72:	f84c 1b04 	str.w	r1, [ip], #4
 8010f76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f7a:	dcec      	bgt.n	8010f56 <__multadd+0x12>
 8010f7c:	b30e      	cbz	r6, 8010fc2 <__multadd+0x7e>
 8010f7e:	68a3      	ldr	r3, [r4, #8]
 8010f80:	42ab      	cmp	r3, r5
 8010f82:	dc19      	bgt.n	8010fb8 <__multadd+0x74>
 8010f84:	6861      	ldr	r1, [r4, #4]
 8010f86:	4638      	mov	r0, r7
 8010f88:	3101      	adds	r1, #1
 8010f8a:	f7ff ff79 	bl	8010e80 <_Balloc>
 8010f8e:	4680      	mov	r8, r0
 8010f90:	b928      	cbnz	r0, 8010f9e <__multadd+0x5a>
 8010f92:	4602      	mov	r2, r0
 8010f94:	4b0c      	ldr	r3, [pc, #48]	@ (8010fc8 <__multadd+0x84>)
 8010f96:	480d      	ldr	r0, [pc, #52]	@ (8010fcc <__multadd+0x88>)
 8010f98:	21ba      	movs	r1, #186	@ 0xba
 8010f9a:	f000 fd19 	bl	80119d0 <__assert_func>
 8010f9e:	6922      	ldr	r2, [r4, #16]
 8010fa0:	3202      	adds	r2, #2
 8010fa2:	f104 010c 	add.w	r1, r4, #12
 8010fa6:	0092      	lsls	r2, r2, #2
 8010fa8:	300c      	adds	r0, #12
 8010faa:	f7ff f800 	bl	800ffae <memcpy>
 8010fae:	4621      	mov	r1, r4
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	f7ff ffa5 	bl	8010f00 <_Bfree>
 8010fb6:	4644      	mov	r4, r8
 8010fb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010fbc:	3501      	adds	r5, #1
 8010fbe:	615e      	str	r6, [r3, #20]
 8010fc0:	6125      	str	r5, [r4, #16]
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc8:	08012478 	.word	0x08012478
 8010fcc:	08012489 	.word	0x08012489

08010fd0 <__hi0bits>:
 8010fd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	bf36      	itet	cc
 8010fd8:	0403      	lslcc	r3, r0, #16
 8010fda:	2000      	movcs	r0, #0
 8010fdc:	2010      	movcc	r0, #16
 8010fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010fe2:	bf3c      	itt	cc
 8010fe4:	021b      	lslcc	r3, r3, #8
 8010fe6:	3008      	addcc	r0, #8
 8010fe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010fec:	bf3c      	itt	cc
 8010fee:	011b      	lslcc	r3, r3, #4
 8010ff0:	3004      	addcc	r0, #4
 8010ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ff6:	bf3c      	itt	cc
 8010ff8:	009b      	lslcc	r3, r3, #2
 8010ffa:	3002      	addcc	r0, #2
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	db05      	blt.n	801100c <__hi0bits+0x3c>
 8011000:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011004:	f100 0001 	add.w	r0, r0, #1
 8011008:	bf08      	it	eq
 801100a:	2020      	moveq	r0, #32
 801100c:	4770      	bx	lr

0801100e <__lo0bits>:
 801100e:	6803      	ldr	r3, [r0, #0]
 8011010:	4602      	mov	r2, r0
 8011012:	f013 0007 	ands.w	r0, r3, #7
 8011016:	d00b      	beq.n	8011030 <__lo0bits+0x22>
 8011018:	07d9      	lsls	r1, r3, #31
 801101a:	d421      	bmi.n	8011060 <__lo0bits+0x52>
 801101c:	0798      	lsls	r0, r3, #30
 801101e:	bf49      	itett	mi
 8011020:	085b      	lsrmi	r3, r3, #1
 8011022:	089b      	lsrpl	r3, r3, #2
 8011024:	2001      	movmi	r0, #1
 8011026:	6013      	strmi	r3, [r2, #0]
 8011028:	bf5c      	itt	pl
 801102a:	6013      	strpl	r3, [r2, #0]
 801102c:	2002      	movpl	r0, #2
 801102e:	4770      	bx	lr
 8011030:	b299      	uxth	r1, r3
 8011032:	b909      	cbnz	r1, 8011038 <__lo0bits+0x2a>
 8011034:	0c1b      	lsrs	r3, r3, #16
 8011036:	2010      	movs	r0, #16
 8011038:	b2d9      	uxtb	r1, r3
 801103a:	b909      	cbnz	r1, 8011040 <__lo0bits+0x32>
 801103c:	3008      	adds	r0, #8
 801103e:	0a1b      	lsrs	r3, r3, #8
 8011040:	0719      	lsls	r1, r3, #28
 8011042:	bf04      	itt	eq
 8011044:	091b      	lsreq	r3, r3, #4
 8011046:	3004      	addeq	r0, #4
 8011048:	0799      	lsls	r1, r3, #30
 801104a:	bf04      	itt	eq
 801104c:	089b      	lsreq	r3, r3, #2
 801104e:	3002      	addeq	r0, #2
 8011050:	07d9      	lsls	r1, r3, #31
 8011052:	d403      	bmi.n	801105c <__lo0bits+0x4e>
 8011054:	085b      	lsrs	r3, r3, #1
 8011056:	f100 0001 	add.w	r0, r0, #1
 801105a:	d003      	beq.n	8011064 <__lo0bits+0x56>
 801105c:	6013      	str	r3, [r2, #0]
 801105e:	4770      	bx	lr
 8011060:	2000      	movs	r0, #0
 8011062:	4770      	bx	lr
 8011064:	2020      	movs	r0, #32
 8011066:	4770      	bx	lr

08011068 <__i2b>:
 8011068:	b510      	push	{r4, lr}
 801106a:	460c      	mov	r4, r1
 801106c:	2101      	movs	r1, #1
 801106e:	f7ff ff07 	bl	8010e80 <_Balloc>
 8011072:	4602      	mov	r2, r0
 8011074:	b928      	cbnz	r0, 8011082 <__i2b+0x1a>
 8011076:	4b05      	ldr	r3, [pc, #20]	@ (801108c <__i2b+0x24>)
 8011078:	4805      	ldr	r0, [pc, #20]	@ (8011090 <__i2b+0x28>)
 801107a:	f240 1145 	movw	r1, #325	@ 0x145
 801107e:	f000 fca7 	bl	80119d0 <__assert_func>
 8011082:	2301      	movs	r3, #1
 8011084:	6144      	str	r4, [r0, #20]
 8011086:	6103      	str	r3, [r0, #16]
 8011088:	bd10      	pop	{r4, pc}
 801108a:	bf00      	nop
 801108c:	08012478 	.word	0x08012478
 8011090:	08012489 	.word	0x08012489

08011094 <__multiply>:
 8011094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011098:	4617      	mov	r7, r2
 801109a:	690a      	ldr	r2, [r1, #16]
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	429a      	cmp	r2, r3
 80110a0:	bfa8      	it	ge
 80110a2:	463b      	movge	r3, r7
 80110a4:	4689      	mov	r9, r1
 80110a6:	bfa4      	itt	ge
 80110a8:	460f      	movge	r7, r1
 80110aa:	4699      	movge	r9, r3
 80110ac:	693d      	ldr	r5, [r7, #16]
 80110ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	6879      	ldr	r1, [r7, #4]
 80110b6:	eb05 060a 	add.w	r6, r5, sl
 80110ba:	42b3      	cmp	r3, r6
 80110bc:	b085      	sub	sp, #20
 80110be:	bfb8      	it	lt
 80110c0:	3101      	addlt	r1, #1
 80110c2:	f7ff fedd 	bl	8010e80 <_Balloc>
 80110c6:	b930      	cbnz	r0, 80110d6 <__multiply+0x42>
 80110c8:	4602      	mov	r2, r0
 80110ca:	4b41      	ldr	r3, [pc, #260]	@ (80111d0 <__multiply+0x13c>)
 80110cc:	4841      	ldr	r0, [pc, #260]	@ (80111d4 <__multiply+0x140>)
 80110ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80110d2:	f000 fc7d 	bl	80119d0 <__assert_func>
 80110d6:	f100 0414 	add.w	r4, r0, #20
 80110da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80110de:	4623      	mov	r3, r4
 80110e0:	2200      	movs	r2, #0
 80110e2:	4573      	cmp	r3, lr
 80110e4:	d320      	bcc.n	8011128 <__multiply+0x94>
 80110e6:	f107 0814 	add.w	r8, r7, #20
 80110ea:	f109 0114 	add.w	r1, r9, #20
 80110ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80110f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80110f6:	9302      	str	r3, [sp, #8]
 80110f8:	1beb      	subs	r3, r5, r7
 80110fa:	3b15      	subs	r3, #21
 80110fc:	f023 0303 	bic.w	r3, r3, #3
 8011100:	3304      	adds	r3, #4
 8011102:	3715      	adds	r7, #21
 8011104:	42bd      	cmp	r5, r7
 8011106:	bf38      	it	cc
 8011108:	2304      	movcc	r3, #4
 801110a:	9301      	str	r3, [sp, #4]
 801110c:	9b02      	ldr	r3, [sp, #8]
 801110e:	9103      	str	r1, [sp, #12]
 8011110:	428b      	cmp	r3, r1
 8011112:	d80c      	bhi.n	801112e <__multiply+0x9a>
 8011114:	2e00      	cmp	r6, #0
 8011116:	dd03      	ble.n	8011120 <__multiply+0x8c>
 8011118:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801111c:	2b00      	cmp	r3, #0
 801111e:	d055      	beq.n	80111cc <__multiply+0x138>
 8011120:	6106      	str	r6, [r0, #16]
 8011122:	b005      	add	sp, #20
 8011124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011128:	f843 2b04 	str.w	r2, [r3], #4
 801112c:	e7d9      	b.n	80110e2 <__multiply+0x4e>
 801112e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011132:	f1ba 0f00 	cmp.w	sl, #0
 8011136:	d01f      	beq.n	8011178 <__multiply+0xe4>
 8011138:	46c4      	mov	ip, r8
 801113a:	46a1      	mov	r9, r4
 801113c:	2700      	movs	r7, #0
 801113e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011142:	f8d9 3000 	ldr.w	r3, [r9]
 8011146:	fa1f fb82 	uxth.w	fp, r2
 801114a:	b29b      	uxth	r3, r3
 801114c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011150:	443b      	add	r3, r7
 8011152:	f8d9 7000 	ldr.w	r7, [r9]
 8011156:	0c12      	lsrs	r2, r2, #16
 8011158:	0c3f      	lsrs	r7, r7, #16
 801115a:	fb0a 7202 	mla	r2, sl, r2, r7
 801115e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011162:	b29b      	uxth	r3, r3
 8011164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011168:	4565      	cmp	r5, ip
 801116a:	f849 3b04 	str.w	r3, [r9], #4
 801116e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011172:	d8e4      	bhi.n	801113e <__multiply+0xaa>
 8011174:	9b01      	ldr	r3, [sp, #4]
 8011176:	50e7      	str	r7, [r4, r3]
 8011178:	9b03      	ldr	r3, [sp, #12]
 801117a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801117e:	3104      	adds	r1, #4
 8011180:	f1b9 0f00 	cmp.w	r9, #0
 8011184:	d020      	beq.n	80111c8 <__multiply+0x134>
 8011186:	6823      	ldr	r3, [r4, #0]
 8011188:	4647      	mov	r7, r8
 801118a:	46a4      	mov	ip, r4
 801118c:	f04f 0a00 	mov.w	sl, #0
 8011190:	f8b7 b000 	ldrh.w	fp, [r7]
 8011194:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011198:	fb09 220b 	mla	r2, r9, fp, r2
 801119c:	4452      	add	r2, sl
 801119e:	b29b      	uxth	r3, r3
 80111a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111a4:	f84c 3b04 	str.w	r3, [ip], #4
 80111a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80111ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80111b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80111b4:	fb09 330a 	mla	r3, r9, sl, r3
 80111b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80111bc:	42bd      	cmp	r5, r7
 80111be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80111c2:	d8e5      	bhi.n	8011190 <__multiply+0xfc>
 80111c4:	9a01      	ldr	r2, [sp, #4]
 80111c6:	50a3      	str	r3, [r4, r2]
 80111c8:	3404      	adds	r4, #4
 80111ca:	e79f      	b.n	801110c <__multiply+0x78>
 80111cc:	3e01      	subs	r6, #1
 80111ce:	e7a1      	b.n	8011114 <__multiply+0x80>
 80111d0:	08012478 	.word	0x08012478
 80111d4:	08012489 	.word	0x08012489

080111d8 <__pow5mult>:
 80111d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111dc:	4615      	mov	r5, r2
 80111de:	f012 0203 	ands.w	r2, r2, #3
 80111e2:	4607      	mov	r7, r0
 80111e4:	460e      	mov	r6, r1
 80111e6:	d007      	beq.n	80111f8 <__pow5mult+0x20>
 80111e8:	4c25      	ldr	r4, [pc, #148]	@ (8011280 <__pow5mult+0xa8>)
 80111ea:	3a01      	subs	r2, #1
 80111ec:	2300      	movs	r3, #0
 80111ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111f2:	f7ff fea7 	bl	8010f44 <__multadd>
 80111f6:	4606      	mov	r6, r0
 80111f8:	10ad      	asrs	r5, r5, #2
 80111fa:	d03d      	beq.n	8011278 <__pow5mult+0xa0>
 80111fc:	69fc      	ldr	r4, [r7, #28]
 80111fe:	b97c      	cbnz	r4, 8011220 <__pow5mult+0x48>
 8011200:	2010      	movs	r0, #16
 8011202:	f7ff fd87 	bl	8010d14 <malloc>
 8011206:	4602      	mov	r2, r0
 8011208:	61f8      	str	r0, [r7, #28]
 801120a:	b928      	cbnz	r0, 8011218 <__pow5mult+0x40>
 801120c:	4b1d      	ldr	r3, [pc, #116]	@ (8011284 <__pow5mult+0xac>)
 801120e:	481e      	ldr	r0, [pc, #120]	@ (8011288 <__pow5mult+0xb0>)
 8011210:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011214:	f000 fbdc 	bl	80119d0 <__assert_func>
 8011218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801121c:	6004      	str	r4, [r0, #0]
 801121e:	60c4      	str	r4, [r0, #12]
 8011220:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011228:	b94c      	cbnz	r4, 801123e <__pow5mult+0x66>
 801122a:	f240 2171 	movw	r1, #625	@ 0x271
 801122e:	4638      	mov	r0, r7
 8011230:	f7ff ff1a 	bl	8011068 <__i2b>
 8011234:	2300      	movs	r3, #0
 8011236:	f8c8 0008 	str.w	r0, [r8, #8]
 801123a:	4604      	mov	r4, r0
 801123c:	6003      	str	r3, [r0, #0]
 801123e:	f04f 0900 	mov.w	r9, #0
 8011242:	07eb      	lsls	r3, r5, #31
 8011244:	d50a      	bpl.n	801125c <__pow5mult+0x84>
 8011246:	4631      	mov	r1, r6
 8011248:	4622      	mov	r2, r4
 801124a:	4638      	mov	r0, r7
 801124c:	f7ff ff22 	bl	8011094 <__multiply>
 8011250:	4631      	mov	r1, r6
 8011252:	4680      	mov	r8, r0
 8011254:	4638      	mov	r0, r7
 8011256:	f7ff fe53 	bl	8010f00 <_Bfree>
 801125a:	4646      	mov	r6, r8
 801125c:	106d      	asrs	r5, r5, #1
 801125e:	d00b      	beq.n	8011278 <__pow5mult+0xa0>
 8011260:	6820      	ldr	r0, [r4, #0]
 8011262:	b938      	cbnz	r0, 8011274 <__pow5mult+0x9c>
 8011264:	4622      	mov	r2, r4
 8011266:	4621      	mov	r1, r4
 8011268:	4638      	mov	r0, r7
 801126a:	f7ff ff13 	bl	8011094 <__multiply>
 801126e:	6020      	str	r0, [r4, #0]
 8011270:	f8c0 9000 	str.w	r9, [r0]
 8011274:	4604      	mov	r4, r0
 8011276:	e7e4      	b.n	8011242 <__pow5mult+0x6a>
 8011278:	4630      	mov	r0, r6
 801127a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801127e:	bf00      	nop
 8011280:	0801253c 	.word	0x0801253c
 8011284:	08012409 	.word	0x08012409
 8011288:	08012489 	.word	0x08012489

0801128c <__lshift>:
 801128c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011290:	460c      	mov	r4, r1
 8011292:	6849      	ldr	r1, [r1, #4]
 8011294:	6923      	ldr	r3, [r4, #16]
 8011296:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801129a:	68a3      	ldr	r3, [r4, #8]
 801129c:	4607      	mov	r7, r0
 801129e:	4691      	mov	r9, r2
 80112a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80112a4:	f108 0601 	add.w	r6, r8, #1
 80112a8:	42b3      	cmp	r3, r6
 80112aa:	db0b      	blt.n	80112c4 <__lshift+0x38>
 80112ac:	4638      	mov	r0, r7
 80112ae:	f7ff fde7 	bl	8010e80 <_Balloc>
 80112b2:	4605      	mov	r5, r0
 80112b4:	b948      	cbnz	r0, 80112ca <__lshift+0x3e>
 80112b6:	4602      	mov	r2, r0
 80112b8:	4b28      	ldr	r3, [pc, #160]	@ (801135c <__lshift+0xd0>)
 80112ba:	4829      	ldr	r0, [pc, #164]	@ (8011360 <__lshift+0xd4>)
 80112bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80112c0:	f000 fb86 	bl	80119d0 <__assert_func>
 80112c4:	3101      	adds	r1, #1
 80112c6:	005b      	lsls	r3, r3, #1
 80112c8:	e7ee      	b.n	80112a8 <__lshift+0x1c>
 80112ca:	2300      	movs	r3, #0
 80112cc:	f100 0114 	add.w	r1, r0, #20
 80112d0:	f100 0210 	add.w	r2, r0, #16
 80112d4:	4618      	mov	r0, r3
 80112d6:	4553      	cmp	r3, sl
 80112d8:	db33      	blt.n	8011342 <__lshift+0xb6>
 80112da:	6920      	ldr	r0, [r4, #16]
 80112dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112e0:	f104 0314 	add.w	r3, r4, #20
 80112e4:	f019 091f 	ands.w	r9, r9, #31
 80112e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112f0:	d02b      	beq.n	801134a <__lshift+0xbe>
 80112f2:	f1c9 0e20 	rsb	lr, r9, #32
 80112f6:	468a      	mov	sl, r1
 80112f8:	2200      	movs	r2, #0
 80112fa:	6818      	ldr	r0, [r3, #0]
 80112fc:	fa00 f009 	lsl.w	r0, r0, r9
 8011300:	4310      	orrs	r0, r2
 8011302:	f84a 0b04 	str.w	r0, [sl], #4
 8011306:	f853 2b04 	ldr.w	r2, [r3], #4
 801130a:	459c      	cmp	ip, r3
 801130c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011310:	d8f3      	bhi.n	80112fa <__lshift+0x6e>
 8011312:	ebac 0304 	sub.w	r3, ip, r4
 8011316:	3b15      	subs	r3, #21
 8011318:	f023 0303 	bic.w	r3, r3, #3
 801131c:	3304      	adds	r3, #4
 801131e:	f104 0015 	add.w	r0, r4, #21
 8011322:	4560      	cmp	r0, ip
 8011324:	bf88      	it	hi
 8011326:	2304      	movhi	r3, #4
 8011328:	50ca      	str	r2, [r1, r3]
 801132a:	b10a      	cbz	r2, 8011330 <__lshift+0xa4>
 801132c:	f108 0602 	add.w	r6, r8, #2
 8011330:	3e01      	subs	r6, #1
 8011332:	4638      	mov	r0, r7
 8011334:	612e      	str	r6, [r5, #16]
 8011336:	4621      	mov	r1, r4
 8011338:	f7ff fde2 	bl	8010f00 <_Bfree>
 801133c:	4628      	mov	r0, r5
 801133e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011342:	f842 0f04 	str.w	r0, [r2, #4]!
 8011346:	3301      	adds	r3, #1
 8011348:	e7c5      	b.n	80112d6 <__lshift+0x4a>
 801134a:	3904      	subs	r1, #4
 801134c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011350:	f841 2f04 	str.w	r2, [r1, #4]!
 8011354:	459c      	cmp	ip, r3
 8011356:	d8f9      	bhi.n	801134c <__lshift+0xc0>
 8011358:	e7ea      	b.n	8011330 <__lshift+0xa4>
 801135a:	bf00      	nop
 801135c:	08012478 	.word	0x08012478
 8011360:	08012489 	.word	0x08012489

08011364 <__mcmp>:
 8011364:	690a      	ldr	r2, [r1, #16]
 8011366:	4603      	mov	r3, r0
 8011368:	6900      	ldr	r0, [r0, #16]
 801136a:	1a80      	subs	r0, r0, r2
 801136c:	b530      	push	{r4, r5, lr}
 801136e:	d10e      	bne.n	801138e <__mcmp+0x2a>
 8011370:	3314      	adds	r3, #20
 8011372:	3114      	adds	r1, #20
 8011374:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011378:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801137c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011380:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011384:	4295      	cmp	r5, r2
 8011386:	d003      	beq.n	8011390 <__mcmp+0x2c>
 8011388:	d205      	bcs.n	8011396 <__mcmp+0x32>
 801138a:	f04f 30ff 	mov.w	r0, #4294967295
 801138e:	bd30      	pop	{r4, r5, pc}
 8011390:	42a3      	cmp	r3, r4
 8011392:	d3f3      	bcc.n	801137c <__mcmp+0x18>
 8011394:	e7fb      	b.n	801138e <__mcmp+0x2a>
 8011396:	2001      	movs	r0, #1
 8011398:	e7f9      	b.n	801138e <__mcmp+0x2a>
	...

0801139c <__mdiff>:
 801139c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a0:	4689      	mov	r9, r1
 80113a2:	4606      	mov	r6, r0
 80113a4:	4611      	mov	r1, r2
 80113a6:	4648      	mov	r0, r9
 80113a8:	4614      	mov	r4, r2
 80113aa:	f7ff ffdb 	bl	8011364 <__mcmp>
 80113ae:	1e05      	subs	r5, r0, #0
 80113b0:	d112      	bne.n	80113d8 <__mdiff+0x3c>
 80113b2:	4629      	mov	r1, r5
 80113b4:	4630      	mov	r0, r6
 80113b6:	f7ff fd63 	bl	8010e80 <_Balloc>
 80113ba:	4602      	mov	r2, r0
 80113bc:	b928      	cbnz	r0, 80113ca <__mdiff+0x2e>
 80113be:	4b3f      	ldr	r3, [pc, #252]	@ (80114bc <__mdiff+0x120>)
 80113c0:	f240 2137 	movw	r1, #567	@ 0x237
 80113c4:	483e      	ldr	r0, [pc, #248]	@ (80114c0 <__mdiff+0x124>)
 80113c6:	f000 fb03 	bl	80119d0 <__assert_func>
 80113ca:	2301      	movs	r3, #1
 80113cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80113d0:	4610      	mov	r0, r2
 80113d2:	b003      	add	sp, #12
 80113d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d8:	bfbc      	itt	lt
 80113da:	464b      	movlt	r3, r9
 80113dc:	46a1      	movlt	r9, r4
 80113de:	4630      	mov	r0, r6
 80113e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80113e4:	bfba      	itte	lt
 80113e6:	461c      	movlt	r4, r3
 80113e8:	2501      	movlt	r5, #1
 80113ea:	2500      	movge	r5, #0
 80113ec:	f7ff fd48 	bl	8010e80 <_Balloc>
 80113f0:	4602      	mov	r2, r0
 80113f2:	b918      	cbnz	r0, 80113fc <__mdiff+0x60>
 80113f4:	4b31      	ldr	r3, [pc, #196]	@ (80114bc <__mdiff+0x120>)
 80113f6:	f240 2145 	movw	r1, #581	@ 0x245
 80113fa:	e7e3      	b.n	80113c4 <__mdiff+0x28>
 80113fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011400:	6926      	ldr	r6, [r4, #16]
 8011402:	60c5      	str	r5, [r0, #12]
 8011404:	f109 0310 	add.w	r3, r9, #16
 8011408:	f109 0514 	add.w	r5, r9, #20
 801140c:	f104 0e14 	add.w	lr, r4, #20
 8011410:	f100 0b14 	add.w	fp, r0, #20
 8011414:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011418:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801141c:	9301      	str	r3, [sp, #4]
 801141e:	46d9      	mov	r9, fp
 8011420:	f04f 0c00 	mov.w	ip, #0
 8011424:	9b01      	ldr	r3, [sp, #4]
 8011426:	f85e 0b04 	ldr.w	r0, [lr], #4
 801142a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801142e:	9301      	str	r3, [sp, #4]
 8011430:	fa1f f38a 	uxth.w	r3, sl
 8011434:	4619      	mov	r1, r3
 8011436:	b283      	uxth	r3, r0
 8011438:	1acb      	subs	r3, r1, r3
 801143a:	0c00      	lsrs	r0, r0, #16
 801143c:	4463      	add	r3, ip
 801143e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011442:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011446:	b29b      	uxth	r3, r3
 8011448:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801144c:	4576      	cmp	r6, lr
 801144e:	f849 3b04 	str.w	r3, [r9], #4
 8011452:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011456:	d8e5      	bhi.n	8011424 <__mdiff+0x88>
 8011458:	1b33      	subs	r3, r6, r4
 801145a:	3b15      	subs	r3, #21
 801145c:	f023 0303 	bic.w	r3, r3, #3
 8011460:	3415      	adds	r4, #21
 8011462:	3304      	adds	r3, #4
 8011464:	42a6      	cmp	r6, r4
 8011466:	bf38      	it	cc
 8011468:	2304      	movcc	r3, #4
 801146a:	441d      	add	r5, r3
 801146c:	445b      	add	r3, fp
 801146e:	461e      	mov	r6, r3
 8011470:	462c      	mov	r4, r5
 8011472:	4544      	cmp	r4, r8
 8011474:	d30e      	bcc.n	8011494 <__mdiff+0xf8>
 8011476:	f108 0103 	add.w	r1, r8, #3
 801147a:	1b49      	subs	r1, r1, r5
 801147c:	f021 0103 	bic.w	r1, r1, #3
 8011480:	3d03      	subs	r5, #3
 8011482:	45a8      	cmp	r8, r5
 8011484:	bf38      	it	cc
 8011486:	2100      	movcc	r1, #0
 8011488:	440b      	add	r3, r1
 801148a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801148e:	b191      	cbz	r1, 80114b6 <__mdiff+0x11a>
 8011490:	6117      	str	r7, [r2, #16]
 8011492:	e79d      	b.n	80113d0 <__mdiff+0x34>
 8011494:	f854 1b04 	ldr.w	r1, [r4], #4
 8011498:	46e6      	mov	lr, ip
 801149a:	0c08      	lsrs	r0, r1, #16
 801149c:	fa1c fc81 	uxtah	ip, ip, r1
 80114a0:	4471      	add	r1, lr
 80114a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80114a6:	b289      	uxth	r1, r1
 80114a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80114ac:	f846 1b04 	str.w	r1, [r6], #4
 80114b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80114b4:	e7dd      	b.n	8011472 <__mdiff+0xd6>
 80114b6:	3f01      	subs	r7, #1
 80114b8:	e7e7      	b.n	801148a <__mdiff+0xee>
 80114ba:	bf00      	nop
 80114bc:	08012478 	.word	0x08012478
 80114c0:	08012489 	.word	0x08012489

080114c4 <__d2b>:
 80114c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114c8:	460f      	mov	r7, r1
 80114ca:	2101      	movs	r1, #1
 80114cc:	ec59 8b10 	vmov	r8, r9, d0
 80114d0:	4616      	mov	r6, r2
 80114d2:	f7ff fcd5 	bl	8010e80 <_Balloc>
 80114d6:	4604      	mov	r4, r0
 80114d8:	b930      	cbnz	r0, 80114e8 <__d2b+0x24>
 80114da:	4602      	mov	r2, r0
 80114dc:	4b23      	ldr	r3, [pc, #140]	@ (801156c <__d2b+0xa8>)
 80114de:	4824      	ldr	r0, [pc, #144]	@ (8011570 <__d2b+0xac>)
 80114e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80114e4:	f000 fa74 	bl	80119d0 <__assert_func>
 80114e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80114ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114f0:	b10d      	cbz	r5, 80114f6 <__d2b+0x32>
 80114f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80114f6:	9301      	str	r3, [sp, #4]
 80114f8:	f1b8 0300 	subs.w	r3, r8, #0
 80114fc:	d023      	beq.n	8011546 <__d2b+0x82>
 80114fe:	4668      	mov	r0, sp
 8011500:	9300      	str	r3, [sp, #0]
 8011502:	f7ff fd84 	bl	801100e <__lo0bits>
 8011506:	e9dd 1200 	ldrd	r1, r2, [sp]
 801150a:	b1d0      	cbz	r0, 8011542 <__d2b+0x7e>
 801150c:	f1c0 0320 	rsb	r3, r0, #32
 8011510:	fa02 f303 	lsl.w	r3, r2, r3
 8011514:	430b      	orrs	r3, r1
 8011516:	40c2      	lsrs	r2, r0
 8011518:	6163      	str	r3, [r4, #20]
 801151a:	9201      	str	r2, [sp, #4]
 801151c:	9b01      	ldr	r3, [sp, #4]
 801151e:	61a3      	str	r3, [r4, #24]
 8011520:	2b00      	cmp	r3, #0
 8011522:	bf0c      	ite	eq
 8011524:	2201      	moveq	r2, #1
 8011526:	2202      	movne	r2, #2
 8011528:	6122      	str	r2, [r4, #16]
 801152a:	b1a5      	cbz	r5, 8011556 <__d2b+0x92>
 801152c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011530:	4405      	add	r5, r0
 8011532:	603d      	str	r5, [r7, #0]
 8011534:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011538:	6030      	str	r0, [r6, #0]
 801153a:	4620      	mov	r0, r4
 801153c:	b003      	add	sp, #12
 801153e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011542:	6161      	str	r1, [r4, #20]
 8011544:	e7ea      	b.n	801151c <__d2b+0x58>
 8011546:	a801      	add	r0, sp, #4
 8011548:	f7ff fd61 	bl	801100e <__lo0bits>
 801154c:	9b01      	ldr	r3, [sp, #4]
 801154e:	6163      	str	r3, [r4, #20]
 8011550:	3020      	adds	r0, #32
 8011552:	2201      	movs	r2, #1
 8011554:	e7e8      	b.n	8011528 <__d2b+0x64>
 8011556:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801155a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801155e:	6038      	str	r0, [r7, #0]
 8011560:	6918      	ldr	r0, [r3, #16]
 8011562:	f7ff fd35 	bl	8010fd0 <__hi0bits>
 8011566:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801156a:	e7e5      	b.n	8011538 <__d2b+0x74>
 801156c:	08012478 	.word	0x08012478
 8011570:	08012489 	.word	0x08012489

08011574 <__ssputs_r>:
 8011574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011578:	688e      	ldr	r6, [r1, #8]
 801157a:	461f      	mov	r7, r3
 801157c:	42be      	cmp	r6, r7
 801157e:	680b      	ldr	r3, [r1, #0]
 8011580:	4682      	mov	sl, r0
 8011582:	460c      	mov	r4, r1
 8011584:	4690      	mov	r8, r2
 8011586:	d82d      	bhi.n	80115e4 <__ssputs_r+0x70>
 8011588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801158c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011590:	d026      	beq.n	80115e0 <__ssputs_r+0x6c>
 8011592:	6965      	ldr	r5, [r4, #20]
 8011594:	6909      	ldr	r1, [r1, #16]
 8011596:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801159a:	eba3 0901 	sub.w	r9, r3, r1
 801159e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80115a2:	1c7b      	adds	r3, r7, #1
 80115a4:	444b      	add	r3, r9
 80115a6:	106d      	asrs	r5, r5, #1
 80115a8:	429d      	cmp	r5, r3
 80115aa:	bf38      	it	cc
 80115ac:	461d      	movcc	r5, r3
 80115ae:	0553      	lsls	r3, r2, #21
 80115b0:	d527      	bpl.n	8011602 <__ssputs_r+0x8e>
 80115b2:	4629      	mov	r1, r5
 80115b4:	f7ff fbd8 	bl	8010d68 <_malloc_r>
 80115b8:	4606      	mov	r6, r0
 80115ba:	b360      	cbz	r0, 8011616 <__ssputs_r+0xa2>
 80115bc:	6921      	ldr	r1, [r4, #16]
 80115be:	464a      	mov	r2, r9
 80115c0:	f7fe fcf5 	bl	800ffae <memcpy>
 80115c4:	89a3      	ldrh	r3, [r4, #12]
 80115c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80115ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115ce:	81a3      	strh	r3, [r4, #12]
 80115d0:	6126      	str	r6, [r4, #16]
 80115d2:	6165      	str	r5, [r4, #20]
 80115d4:	444e      	add	r6, r9
 80115d6:	eba5 0509 	sub.w	r5, r5, r9
 80115da:	6026      	str	r6, [r4, #0]
 80115dc:	60a5      	str	r5, [r4, #8]
 80115de:	463e      	mov	r6, r7
 80115e0:	42be      	cmp	r6, r7
 80115e2:	d900      	bls.n	80115e6 <__ssputs_r+0x72>
 80115e4:	463e      	mov	r6, r7
 80115e6:	6820      	ldr	r0, [r4, #0]
 80115e8:	4632      	mov	r2, r6
 80115ea:	4641      	mov	r1, r8
 80115ec:	f000 f9c6 	bl	801197c <memmove>
 80115f0:	68a3      	ldr	r3, [r4, #8]
 80115f2:	1b9b      	subs	r3, r3, r6
 80115f4:	60a3      	str	r3, [r4, #8]
 80115f6:	6823      	ldr	r3, [r4, #0]
 80115f8:	4433      	add	r3, r6
 80115fa:	6023      	str	r3, [r4, #0]
 80115fc:	2000      	movs	r0, #0
 80115fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011602:	462a      	mov	r2, r5
 8011604:	f000 fa28 	bl	8011a58 <_realloc_r>
 8011608:	4606      	mov	r6, r0
 801160a:	2800      	cmp	r0, #0
 801160c:	d1e0      	bne.n	80115d0 <__ssputs_r+0x5c>
 801160e:	6921      	ldr	r1, [r4, #16]
 8011610:	4650      	mov	r0, sl
 8011612:	f7ff fb35 	bl	8010c80 <_free_r>
 8011616:	230c      	movs	r3, #12
 8011618:	f8ca 3000 	str.w	r3, [sl]
 801161c:	89a3      	ldrh	r3, [r4, #12]
 801161e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011622:	81a3      	strh	r3, [r4, #12]
 8011624:	f04f 30ff 	mov.w	r0, #4294967295
 8011628:	e7e9      	b.n	80115fe <__ssputs_r+0x8a>
	...

0801162c <_svfiprintf_r>:
 801162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011630:	4698      	mov	r8, r3
 8011632:	898b      	ldrh	r3, [r1, #12]
 8011634:	061b      	lsls	r3, r3, #24
 8011636:	b09d      	sub	sp, #116	@ 0x74
 8011638:	4607      	mov	r7, r0
 801163a:	460d      	mov	r5, r1
 801163c:	4614      	mov	r4, r2
 801163e:	d510      	bpl.n	8011662 <_svfiprintf_r+0x36>
 8011640:	690b      	ldr	r3, [r1, #16]
 8011642:	b973      	cbnz	r3, 8011662 <_svfiprintf_r+0x36>
 8011644:	2140      	movs	r1, #64	@ 0x40
 8011646:	f7ff fb8f 	bl	8010d68 <_malloc_r>
 801164a:	6028      	str	r0, [r5, #0]
 801164c:	6128      	str	r0, [r5, #16]
 801164e:	b930      	cbnz	r0, 801165e <_svfiprintf_r+0x32>
 8011650:	230c      	movs	r3, #12
 8011652:	603b      	str	r3, [r7, #0]
 8011654:	f04f 30ff 	mov.w	r0, #4294967295
 8011658:	b01d      	add	sp, #116	@ 0x74
 801165a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165e:	2340      	movs	r3, #64	@ 0x40
 8011660:	616b      	str	r3, [r5, #20]
 8011662:	2300      	movs	r3, #0
 8011664:	9309      	str	r3, [sp, #36]	@ 0x24
 8011666:	2320      	movs	r3, #32
 8011668:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801166c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011670:	2330      	movs	r3, #48	@ 0x30
 8011672:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011810 <_svfiprintf_r+0x1e4>
 8011676:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801167a:	f04f 0901 	mov.w	r9, #1
 801167e:	4623      	mov	r3, r4
 8011680:	469a      	mov	sl, r3
 8011682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011686:	b10a      	cbz	r2, 801168c <_svfiprintf_r+0x60>
 8011688:	2a25      	cmp	r2, #37	@ 0x25
 801168a:	d1f9      	bne.n	8011680 <_svfiprintf_r+0x54>
 801168c:	ebba 0b04 	subs.w	fp, sl, r4
 8011690:	d00b      	beq.n	80116aa <_svfiprintf_r+0x7e>
 8011692:	465b      	mov	r3, fp
 8011694:	4622      	mov	r2, r4
 8011696:	4629      	mov	r1, r5
 8011698:	4638      	mov	r0, r7
 801169a:	f7ff ff6b 	bl	8011574 <__ssputs_r>
 801169e:	3001      	adds	r0, #1
 80116a0:	f000 80a7 	beq.w	80117f2 <_svfiprintf_r+0x1c6>
 80116a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116a6:	445a      	add	r2, fp
 80116a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80116aa:	f89a 3000 	ldrb.w	r3, [sl]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	f000 809f 	beq.w	80117f2 <_svfiprintf_r+0x1c6>
 80116b4:	2300      	movs	r3, #0
 80116b6:	f04f 32ff 	mov.w	r2, #4294967295
 80116ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116be:	f10a 0a01 	add.w	sl, sl, #1
 80116c2:	9304      	str	r3, [sp, #16]
 80116c4:	9307      	str	r3, [sp, #28]
 80116c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80116ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80116cc:	4654      	mov	r4, sl
 80116ce:	2205      	movs	r2, #5
 80116d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116d4:	484e      	ldr	r0, [pc, #312]	@ (8011810 <_svfiprintf_r+0x1e4>)
 80116d6:	f7ee fda3 	bl	8000220 <memchr>
 80116da:	9a04      	ldr	r2, [sp, #16]
 80116dc:	b9d8      	cbnz	r0, 8011716 <_svfiprintf_r+0xea>
 80116de:	06d0      	lsls	r0, r2, #27
 80116e0:	bf44      	itt	mi
 80116e2:	2320      	movmi	r3, #32
 80116e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116e8:	0711      	lsls	r1, r2, #28
 80116ea:	bf44      	itt	mi
 80116ec:	232b      	movmi	r3, #43	@ 0x2b
 80116ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116f2:	f89a 3000 	ldrb.w	r3, [sl]
 80116f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80116f8:	d015      	beq.n	8011726 <_svfiprintf_r+0xfa>
 80116fa:	9a07      	ldr	r2, [sp, #28]
 80116fc:	4654      	mov	r4, sl
 80116fe:	2000      	movs	r0, #0
 8011700:	f04f 0c0a 	mov.w	ip, #10
 8011704:	4621      	mov	r1, r4
 8011706:	f811 3b01 	ldrb.w	r3, [r1], #1
 801170a:	3b30      	subs	r3, #48	@ 0x30
 801170c:	2b09      	cmp	r3, #9
 801170e:	d94b      	bls.n	80117a8 <_svfiprintf_r+0x17c>
 8011710:	b1b0      	cbz	r0, 8011740 <_svfiprintf_r+0x114>
 8011712:	9207      	str	r2, [sp, #28]
 8011714:	e014      	b.n	8011740 <_svfiprintf_r+0x114>
 8011716:	eba0 0308 	sub.w	r3, r0, r8
 801171a:	fa09 f303 	lsl.w	r3, r9, r3
 801171e:	4313      	orrs	r3, r2
 8011720:	9304      	str	r3, [sp, #16]
 8011722:	46a2      	mov	sl, r4
 8011724:	e7d2      	b.n	80116cc <_svfiprintf_r+0xa0>
 8011726:	9b03      	ldr	r3, [sp, #12]
 8011728:	1d19      	adds	r1, r3, #4
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	9103      	str	r1, [sp, #12]
 801172e:	2b00      	cmp	r3, #0
 8011730:	bfbb      	ittet	lt
 8011732:	425b      	neglt	r3, r3
 8011734:	f042 0202 	orrlt.w	r2, r2, #2
 8011738:	9307      	strge	r3, [sp, #28]
 801173a:	9307      	strlt	r3, [sp, #28]
 801173c:	bfb8      	it	lt
 801173e:	9204      	strlt	r2, [sp, #16]
 8011740:	7823      	ldrb	r3, [r4, #0]
 8011742:	2b2e      	cmp	r3, #46	@ 0x2e
 8011744:	d10a      	bne.n	801175c <_svfiprintf_r+0x130>
 8011746:	7863      	ldrb	r3, [r4, #1]
 8011748:	2b2a      	cmp	r3, #42	@ 0x2a
 801174a:	d132      	bne.n	80117b2 <_svfiprintf_r+0x186>
 801174c:	9b03      	ldr	r3, [sp, #12]
 801174e:	1d1a      	adds	r2, r3, #4
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	9203      	str	r2, [sp, #12]
 8011754:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011758:	3402      	adds	r4, #2
 801175a:	9305      	str	r3, [sp, #20]
 801175c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011820 <_svfiprintf_r+0x1f4>
 8011760:	7821      	ldrb	r1, [r4, #0]
 8011762:	2203      	movs	r2, #3
 8011764:	4650      	mov	r0, sl
 8011766:	f7ee fd5b 	bl	8000220 <memchr>
 801176a:	b138      	cbz	r0, 801177c <_svfiprintf_r+0x150>
 801176c:	9b04      	ldr	r3, [sp, #16]
 801176e:	eba0 000a 	sub.w	r0, r0, sl
 8011772:	2240      	movs	r2, #64	@ 0x40
 8011774:	4082      	lsls	r2, r0
 8011776:	4313      	orrs	r3, r2
 8011778:	3401      	adds	r4, #1
 801177a:	9304      	str	r3, [sp, #16]
 801177c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011780:	4824      	ldr	r0, [pc, #144]	@ (8011814 <_svfiprintf_r+0x1e8>)
 8011782:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011786:	2206      	movs	r2, #6
 8011788:	f7ee fd4a 	bl	8000220 <memchr>
 801178c:	2800      	cmp	r0, #0
 801178e:	d036      	beq.n	80117fe <_svfiprintf_r+0x1d2>
 8011790:	4b21      	ldr	r3, [pc, #132]	@ (8011818 <_svfiprintf_r+0x1ec>)
 8011792:	bb1b      	cbnz	r3, 80117dc <_svfiprintf_r+0x1b0>
 8011794:	9b03      	ldr	r3, [sp, #12]
 8011796:	3307      	adds	r3, #7
 8011798:	f023 0307 	bic.w	r3, r3, #7
 801179c:	3308      	adds	r3, #8
 801179e:	9303      	str	r3, [sp, #12]
 80117a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117a2:	4433      	add	r3, r6
 80117a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80117a6:	e76a      	b.n	801167e <_svfiprintf_r+0x52>
 80117a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80117ac:	460c      	mov	r4, r1
 80117ae:	2001      	movs	r0, #1
 80117b0:	e7a8      	b.n	8011704 <_svfiprintf_r+0xd8>
 80117b2:	2300      	movs	r3, #0
 80117b4:	3401      	adds	r4, #1
 80117b6:	9305      	str	r3, [sp, #20]
 80117b8:	4619      	mov	r1, r3
 80117ba:	f04f 0c0a 	mov.w	ip, #10
 80117be:	4620      	mov	r0, r4
 80117c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117c4:	3a30      	subs	r2, #48	@ 0x30
 80117c6:	2a09      	cmp	r2, #9
 80117c8:	d903      	bls.n	80117d2 <_svfiprintf_r+0x1a6>
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d0c6      	beq.n	801175c <_svfiprintf_r+0x130>
 80117ce:	9105      	str	r1, [sp, #20]
 80117d0:	e7c4      	b.n	801175c <_svfiprintf_r+0x130>
 80117d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80117d6:	4604      	mov	r4, r0
 80117d8:	2301      	movs	r3, #1
 80117da:	e7f0      	b.n	80117be <_svfiprintf_r+0x192>
 80117dc:	ab03      	add	r3, sp, #12
 80117de:	9300      	str	r3, [sp, #0]
 80117e0:	462a      	mov	r2, r5
 80117e2:	4b0e      	ldr	r3, [pc, #56]	@ (801181c <_svfiprintf_r+0x1f0>)
 80117e4:	a904      	add	r1, sp, #16
 80117e6:	4638      	mov	r0, r7
 80117e8:	f7fd fe28 	bl	800f43c <_printf_float>
 80117ec:	1c42      	adds	r2, r0, #1
 80117ee:	4606      	mov	r6, r0
 80117f0:	d1d6      	bne.n	80117a0 <_svfiprintf_r+0x174>
 80117f2:	89ab      	ldrh	r3, [r5, #12]
 80117f4:	065b      	lsls	r3, r3, #25
 80117f6:	f53f af2d 	bmi.w	8011654 <_svfiprintf_r+0x28>
 80117fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80117fc:	e72c      	b.n	8011658 <_svfiprintf_r+0x2c>
 80117fe:	ab03      	add	r3, sp, #12
 8011800:	9300      	str	r3, [sp, #0]
 8011802:	462a      	mov	r2, r5
 8011804:	4b05      	ldr	r3, [pc, #20]	@ (801181c <_svfiprintf_r+0x1f0>)
 8011806:	a904      	add	r1, sp, #16
 8011808:	4638      	mov	r0, r7
 801180a:	f7fe f8af 	bl	800f96c <_printf_i>
 801180e:	e7ed      	b.n	80117ec <_svfiprintf_r+0x1c0>
 8011810:	080124e2 	.word	0x080124e2
 8011814:	080124ec 	.word	0x080124ec
 8011818:	0800f43d 	.word	0x0800f43d
 801181c:	08011575 	.word	0x08011575
 8011820:	080124e8 	.word	0x080124e8

08011824 <__sflush_r>:
 8011824:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801182c:	0716      	lsls	r6, r2, #28
 801182e:	4605      	mov	r5, r0
 8011830:	460c      	mov	r4, r1
 8011832:	d454      	bmi.n	80118de <__sflush_r+0xba>
 8011834:	684b      	ldr	r3, [r1, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	dc02      	bgt.n	8011840 <__sflush_r+0x1c>
 801183a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801183c:	2b00      	cmp	r3, #0
 801183e:	dd48      	ble.n	80118d2 <__sflush_r+0xae>
 8011840:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011842:	2e00      	cmp	r6, #0
 8011844:	d045      	beq.n	80118d2 <__sflush_r+0xae>
 8011846:	2300      	movs	r3, #0
 8011848:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801184c:	682f      	ldr	r7, [r5, #0]
 801184e:	6a21      	ldr	r1, [r4, #32]
 8011850:	602b      	str	r3, [r5, #0]
 8011852:	d030      	beq.n	80118b6 <__sflush_r+0x92>
 8011854:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011856:	89a3      	ldrh	r3, [r4, #12]
 8011858:	0759      	lsls	r1, r3, #29
 801185a:	d505      	bpl.n	8011868 <__sflush_r+0x44>
 801185c:	6863      	ldr	r3, [r4, #4]
 801185e:	1ad2      	subs	r2, r2, r3
 8011860:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011862:	b10b      	cbz	r3, 8011868 <__sflush_r+0x44>
 8011864:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011866:	1ad2      	subs	r2, r2, r3
 8011868:	2300      	movs	r3, #0
 801186a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801186c:	6a21      	ldr	r1, [r4, #32]
 801186e:	4628      	mov	r0, r5
 8011870:	47b0      	blx	r6
 8011872:	1c43      	adds	r3, r0, #1
 8011874:	89a3      	ldrh	r3, [r4, #12]
 8011876:	d106      	bne.n	8011886 <__sflush_r+0x62>
 8011878:	6829      	ldr	r1, [r5, #0]
 801187a:	291d      	cmp	r1, #29
 801187c:	d82b      	bhi.n	80118d6 <__sflush_r+0xb2>
 801187e:	4a2a      	ldr	r2, [pc, #168]	@ (8011928 <__sflush_r+0x104>)
 8011880:	40ca      	lsrs	r2, r1
 8011882:	07d6      	lsls	r6, r2, #31
 8011884:	d527      	bpl.n	80118d6 <__sflush_r+0xb2>
 8011886:	2200      	movs	r2, #0
 8011888:	6062      	str	r2, [r4, #4]
 801188a:	04d9      	lsls	r1, r3, #19
 801188c:	6922      	ldr	r2, [r4, #16]
 801188e:	6022      	str	r2, [r4, #0]
 8011890:	d504      	bpl.n	801189c <__sflush_r+0x78>
 8011892:	1c42      	adds	r2, r0, #1
 8011894:	d101      	bne.n	801189a <__sflush_r+0x76>
 8011896:	682b      	ldr	r3, [r5, #0]
 8011898:	b903      	cbnz	r3, 801189c <__sflush_r+0x78>
 801189a:	6560      	str	r0, [r4, #84]	@ 0x54
 801189c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801189e:	602f      	str	r7, [r5, #0]
 80118a0:	b1b9      	cbz	r1, 80118d2 <__sflush_r+0xae>
 80118a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118a6:	4299      	cmp	r1, r3
 80118a8:	d002      	beq.n	80118b0 <__sflush_r+0x8c>
 80118aa:	4628      	mov	r0, r5
 80118ac:	f7ff f9e8 	bl	8010c80 <_free_r>
 80118b0:	2300      	movs	r3, #0
 80118b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80118b4:	e00d      	b.n	80118d2 <__sflush_r+0xae>
 80118b6:	2301      	movs	r3, #1
 80118b8:	4628      	mov	r0, r5
 80118ba:	47b0      	blx	r6
 80118bc:	4602      	mov	r2, r0
 80118be:	1c50      	adds	r0, r2, #1
 80118c0:	d1c9      	bne.n	8011856 <__sflush_r+0x32>
 80118c2:	682b      	ldr	r3, [r5, #0]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d0c6      	beq.n	8011856 <__sflush_r+0x32>
 80118c8:	2b1d      	cmp	r3, #29
 80118ca:	d001      	beq.n	80118d0 <__sflush_r+0xac>
 80118cc:	2b16      	cmp	r3, #22
 80118ce:	d11e      	bne.n	801190e <__sflush_r+0xea>
 80118d0:	602f      	str	r7, [r5, #0]
 80118d2:	2000      	movs	r0, #0
 80118d4:	e022      	b.n	801191c <__sflush_r+0xf8>
 80118d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118da:	b21b      	sxth	r3, r3
 80118dc:	e01b      	b.n	8011916 <__sflush_r+0xf2>
 80118de:	690f      	ldr	r7, [r1, #16]
 80118e0:	2f00      	cmp	r7, #0
 80118e2:	d0f6      	beq.n	80118d2 <__sflush_r+0xae>
 80118e4:	0793      	lsls	r3, r2, #30
 80118e6:	680e      	ldr	r6, [r1, #0]
 80118e8:	bf08      	it	eq
 80118ea:	694b      	ldreq	r3, [r1, #20]
 80118ec:	600f      	str	r7, [r1, #0]
 80118ee:	bf18      	it	ne
 80118f0:	2300      	movne	r3, #0
 80118f2:	eba6 0807 	sub.w	r8, r6, r7
 80118f6:	608b      	str	r3, [r1, #8]
 80118f8:	f1b8 0f00 	cmp.w	r8, #0
 80118fc:	dde9      	ble.n	80118d2 <__sflush_r+0xae>
 80118fe:	6a21      	ldr	r1, [r4, #32]
 8011900:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011902:	4643      	mov	r3, r8
 8011904:	463a      	mov	r2, r7
 8011906:	4628      	mov	r0, r5
 8011908:	47b0      	blx	r6
 801190a:	2800      	cmp	r0, #0
 801190c:	dc08      	bgt.n	8011920 <__sflush_r+0xfc>
 801190e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011916:	81a3      	strh	r3, [r4, #12]
 8011918:	f04f 30ff 	mov.w	r0, #4294967295
 801191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011920:	4407      	add	r7, r0
 8011922:	eba8 0800 	sub.w	r8, r8, r0
 8011926:	e7e7      	b.n	80118f8 <__sflush_r+0xd4>
 8011928:	20400001 	.word	0x20400001

0801192c <_fflush_r>:
 801192c:	b538      	push	{r3, r4, r5, lr}
 801192e:	690b      	ldr	r3, [r1, #16]
 8011930:	4605      	mov	r5, r0
 8011932:	460c      	mov	r4, r1
 8011934:	b913      	cbnz	r3, 801193c <_fflush_r+0x10>
 8011936:	2500      	movs	r5, #0
 8011938:	4628      	mov	r0, r5
 801193a:	bd38      	pop	{r3, r4, r5, pc}
 801193c:	b118      	cbz	r0, 8011946 <_fflush_r+0x1a>
 801193e:	6a03      	ldr	r3, [r0, #32]
 8011940:	b90b      	cbnz	r3, 8011946 <_fflush_r+0x1a>
 8011942:	f7fe f9bd 	bl	800fcc0 <__sinit>
 8011946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d0f3      	beq.n	8011936 <_fflush_r+0xa>
 801194e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011950:	07d0      	lsls	r0, r2, #31
 8011952:	d404      	bmi.n	801195e <_fflush_r+0x32>
 8011954:	0599      	lsls	r1, r3, #22
 8011956:	d402      	bmi.n	801195e <_fflush_r+0x32>
 8011958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801195a:	f7fe fb26 	bl	800ffaa <__retarget_lock_acquire_recursive>
 801195e:	4628      	mov	r0, r5
 8011960:	4621      	mov	r1, r4
 8011962:	f7ff ff5f 	bl	8011824 <__sflush_r>
 8011966:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011968:	07da      	lsls	r2, r3, #31
 801196a:	4605      	mov	r5, r0
 801196c:	d4e4      	bmi.n	8011938 <_fflush_r+0xc>
 801196e:	89a3      	ldrh	r3, [r4, #12]
 8011970:	059b      	lsls	r3, r3, #22
 8011972:	d4e1      	bmi.n	8011938 <_fflush_r+0xc>
 8011974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011976:	f7fe fb19 	bl	800ffac <__retarget_lock_release_recursive>
 801197a:	e7dd      	b.n	8011938 <_fflush_r+0xc>

0801197c <memmove>:
 801197c:	4288      	cmp	r0, r1
 801197e:	b510      	push	{r4, lr}
 8011980:	eb01 0402 	add.w	r4, r1, r2
 8011984:	d902      	bls.n	801198c <memmove+0x10>
 8011986:	4284      	cmp	r4, r0
 8011988:	4623      	mov	r3, r4
 801198a:	d807      	bhi.n	801199c <memmove+0x20>
 801198c:	1e43      	subs	r3, r0, #1
 801198e:	42a1      	cmp	r1, r4
 8011990:	d008      	beq.n	80119a4 <memmove+0x28>
 8011992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011996:	f803 2f01 	strb.w	r2, [r3, #1]!
 801199a:	e7f8      	b.n	801198e <memmove+0x12>
 801199c:	4402      	add	r2, r0
 801199e:	4601      	mov	r1, r0
 80119a0:	428a      	cmp	r2, r1
 80119a2:	d100      	bne.n	80119a6 <memmove+0x2a>
 80119a4:	bd10      	pop	{r4, pc}
 80119a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119ae:	e7f7      	b.n	80119a0 <memmove+0x24>

080119b0 <_sbrk_r>:
 80119b0:	b538      	push	{r3, r4, r5, lr}
 80119b2:	4d06      	ldr	r5, [pc, #24]	@ (80119cc <_sbrk_r+0x1c>)
 80119b4:	2300      	movs	r3, #0
 80119b6:	4604      	mov	r4, r0
 80119b8:	4608      	mov	r0, r1
 80119ba:	602b      	str	r3, [r5, #0]
 80119bc:	f7f0 fc84 	bl	80022c8 <_sbrk>
 80119c0:	1c43      	adds	r3, r0, #1
 80119c2:	d102      	bne.n	80119ca <_sbrk_r+0x1a>
 80119c4:	682b      	ldr	r3, [r5, #0]
 80119c6:	b103      	cbz	r3, 80119ca <_sbrk_r+0x1a>
 80119c8:	6023      	str	r3, [r4, #0]
 80119ca:	bd38      	pop	{r3, r4, r5, pc}
 80119cc:	2000a64c 	.word	0x2000a64c

080119d0 <__assert_func>:
 80119d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119d2:	4614      	mov	r4, r2
 80119d4:	461a      	mov	r2, r3
 80119d6:	4b09      	ldr	r3, [pc, #36]	@ (80119fc <__assert_func+0x2c>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	4605      	mov	r5, r0
 80119dc:	68d8      	ldr	r0, [r3, #12]
 80119de:	b14c      	cbz	r4, 80119f4 <__assert_func+0x24>
 80119e0:	4b07      	ldr	r3, [pc, #28]	@ (8011a00 <__assert_func+0x30>)
 80119e2:	9100      	str	r1, [sp, #0]
 80119e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80119e8:	4906      	ldr	r1, [pc, #24]	@ (8011a04 <__assert_func+0x34>)
 80119ea:	462b      	mov	r3, r5
 80119ec:	f000 f870 	bl	8011ad0 <fiprintf>
 80119f0:	f000 f880 	bl	8011af4 <abort>
 80119f4:	4b04      	ldr	r3, [pc, #16]	@ (8011a08 <__assert_func+0x38>)
 80119f6:	461c      	mov	r4, r3
 80119f8:	e7f3      	b.n	80119e2 <__assert_func+0x12>
 80119fa:	bf00      	nop
 80119fc:	20000194 	.word	0x20000194
 8011a00:	080124fd 	.word	0x080124fd
 8011a04:	0801250a 	.word	0x0801250a
 8011a08:	08012538 	.word	0x08012538

08011a0c <_calloc_r>:
 8011a0c:	b570      	push	{r4, r5, r6, lr}
 8011a0e:	fba1 5402 	umull	r5, r4, r1, r2
 8011a12:	b934      	cbnz	r4, 8011a22 <_calloc_r+0x16>
 8011a14:	4629      	mov	r1, r5
 8011a16:	f7ff f9a7 	bl	8010d68 <_malloc_r>
 8011a1a:	4606      	mov	r6, r0
 8011a1c:	b928      	cbnz	r0, 8011a2a <_calloc_r+0x1e>
 8011a1e:	4630      	mov	r0, r6
 8011a20:	bd70      	pop	{r4, r5, r6, pc}
 8011a22:	220c      	movs	r2, #12
 8011a24:	6002      	str	r2, [r0, #0]
 8011a26:	2600      	movs	r6, #0
 8011a28:	e7f9      	b.n	8011a1e <_calloc_r+0x12>
 8011a2a:	462a      	mov	r2, r5
 8011a2c:	4621      	mov	r1, r4
 8011a2e:	f7fe f9e1 	bl	800fdf4 <memset>
 8011a32:	e7f4      	b.n	8011a1e <_calloc_r+0x12>

08011a34 <__ascii_mbtowc>:
 8011a34:	b082      	sub	sp, #8
 8011a36:	b901      	cbnz	r1, 8011a3a <__ascii_mbtowc+0x6>
 8011a38:	a901      	add	r1, sp, #4
 8011a3a:	b142      	cbz	r2, 8011a4e <__ascii_mbtowc+0x1a>
 8011a3c:	b14b      	cbz	r3, 8011a52 <__ascii_mbtowc+0x1e>
 8011a3e:	7813      	ldrb	r3, [r2, #0]
 8011a40:	600b      	str	r3, [r1, #0]
 8011a42:	7812      	ldrb	r2, [r2, #0]
 8011a44:	1e10      	subs	r0, r2, #0
 8011a46:	bf18      	it	ne
 8011a48:	2001      	movne	r0, #1
 8011a4a:	b002      	add	sp, #8
 8011a4c:	4770      	bx	lr
 8011a4e:	4610      	mov	r0, r2
 8011a50:	e7fb      	b.n	8011a4a <__ascii_mbtowc+0x16>
 8011a52:	f06f 0001 	mvn.w	r0, #1
 8011a56:	e7f8      	b.n	8011a4a <__ascii_mbtowc+0x16>

08011a58 <_realloc_r>:
 8011a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a5c:	4607      	mov	r7, r0
 8011a5e:	4614      	mov	r4, r2
 8011a60:	460d      	mov	r5, r1
 8011a62:	b921      	cbnz	r1, 8011a6e <_realloc_r+0x16>
 8011a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a68:	4611      	mov	r1, r2
 8011a6a:	f7ff b97d 	b.w	8010d68 <_malloc_r>
 8011a6e:	b92a      	cbnz	r2, 8011a7c <_realloc_r+0x24>
 8011a70:	f7ff f906 	bl	8010c80 <_free_r>
 8011a74:	4625      	mov	r5, r4
 8011a76:	4628      	mov	r0, r5
 8011a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a7c:	f000 f841 	bl	8011b02 <_malloc_usable_size_r>
 8011a80:	4284      	cmp	r4, r0
 8011a82:	4606      	mov	r6, r0
 8011a84:	d802      	bhi.n	8011a8c <_realloc_r+0x34>
 8011a86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a8a:	d8f4      	bhi.n	8011a76 <_realloc_r+0x1e>
 8011a8c:	4621      	mov	r1, r4
 8011a8e:	4638      	mov	r0, r7
 8011a90:	f7ff f96a 	bl	8010d68 <_malloc_r>
 8011a94:	4680      	mov	r8, r0
 8011a96:	b908      	cbnz	r0, 8011a9c <_realloc_r+0x44>
 8011a98:	4645      	mov	r5, r8
 8011a9a:	e7ec      	b.n	8011a76 <_realloc_r+0x1e>
 8011a9c:	42b4      	cmp	r4, r6
 8011a9e:	4622      	mov	r2, r4
 8011aa0:	4629      	mov	r1, r5
 8011aa2:	bf28      	it	cs
 8011aa4:	4632      	movcs	r2, r6
 8011aa6:	f7fe fa82 	bl	800ffae <memcpy>
 8011aaa:	4629      	mov	r1, r5
 8011aac:	4638      	mov	r0, r7
 8011aae:	f7ff f8e7 	bl	8010c80 <_free_r>
 8011ab2:	e7f1      	b.n	8011a98 <_realloc_r+0x40>

08011ab4 <__ascii_wctomb>:
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	4608      	mov	r0, r1
 8011ab8:	b141      	cbz	r1, 8011acc <__ascii_wctomb+0x18>
 8011aba:	2aff      	cmp	r2, #255	@ 0xff
 8011abc:	d904      	bls.n	8011ac8 <__ascii_wctomb+0x14>
 8011abe:	228a      	movs	r2, #138	@ 0x8a
 8011ac0:	601a      	str	r2, [r3, #0]
 8011ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac6:	4770      	bx	lr
 8011ac8:	700a      	strb	r2, [r1, #0]
 8011aca:	2001      	movs	r0, #1
 8011acc:	4770      	bx	lr
	...

08011ad0 <fiprintf>:
 8011ad0:	b40e      	push	{r1, r2, r3}
 8011ad2:	b503      	push	{r0, r1, lr}
 8011ad4:	4601      	mov	r1, r0
 8011ad6:	ab03      	add	r3, sp, #12
 8011ad8:	4805      	ldr	r0, [pc, #20]	@ (8011af0 <fiprintf+0x20>)
 8011ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ade:	6800      	ldr	r0, [r0, #0]
 8011ae0:	9301      	str	r3, [sp, #4]
 8011ae2:	f000 f83f 	bl	8011b64 <_vfiprintf_r>
 8011ae6:	b002      	add	sp, #8
 8011ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011aec:	b003      	add	sp, #12
 8011aee:	4770      	bx	lr
 8011af0:	20000194 	.word	0x20000194

08011af4 <abort>:
 8011af4:	b508      	push	{r3, lr}
 8011af6:	2006      	movs	r0, #6
 8011af8:	f000 fa08 	bl	8011f0c <raise>
 8011afc:	2001      	movs	r0, #1
 8011afe:	f7f0 fb6b 	bl	80021d8 <_exit>

08011b02 <_malloc_usable_size_r>:
 8011b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b06:	1f18      	subs	r0, r3, #4
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	bfbc      	itt	lt
 8011b0c:	580b      	ldrlt	r3, [r1, r0]
 8011b0e:	18c0      	addlt	r0, r0, r3
 8011b10:	4770      	bx	lr

08011b12 <__sfputc_r>:
 8011b12:	6893      	ldr	r3, [r2, #8]
 8011b14:	3b01      	subs	r3, #1
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	b410      	push	{r4}
 8011b1a:	6093      	str	r3, [r2, #8]
 8011b1c:	da08      	bge.n	8011b30 <__sfputc_r+0x1e>
 8011b1e:	6994      	ldr	r4, [r2, #24]
 8011b20:	42a3      	cmp	r3, r4
 8011b22:	db01      	blt.n	8011b28 <__sfputc_r+0x16>
 8011b24:	290a      	cmp	r1, #10
 8011b26:	d103      	bne.n	8011b30 <__sfputc_r+0x1e>
 8011b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b2c:	f000 b932 	b.w	8011d94 <__swbuf_r>
 8011b30:	6813      	ldr	r3, [r2, #0]
 8011b32:	1c58      	adds	r0, r3, #1
 8011b34:	6010      	str	r0, [r2, #0]
 8011b36:	7019      	strb	r1, [r3, #0]
 8011b38:	4608      	mov	r0, r1
 8011b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b3e:	4770      	bx	lr

08011b40 <__sfputs_r>:
 8011b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b42:	4606      	mov	r6, r0
 8011b44:	460f      	mov	r7, r1
 8011b46:	4614      	mov	r4, r2
 8011b48:	18d5      	adds	r5, r2, r3
 8011b4a:	42ac      	cmp	r4, r5
 8011b4c:	d101      	bne.n	8011b52 <__sfputs_r+0x12>
 8011b4e:	2000      	movs	r0, #0
 8011b50:	e007      	b.n	8011b62 <__sfputs_r+0x22>
 8011b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b56:	463a      	mov	r2, r7
 8011b58:	4630      	mov	r0, r6
 8011b5a:	f7ff ffda 	bl	8011b12 <__sfputc_r>
 8011b5e:	1c43      	adds	r3, r0, #1
 8011b60:	d1f3      	bne.n	8011b4a <__sfputs_r+0xa>
 8011b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011b64 <_vfiprintf_r>:
 8011b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b68:	460d      	mov	r5, r1
 8011b6a:	b09d      	sub	sp, #116	@ 0x74
 8011b6c:	4614      	mov	r4, r2
 8011b6e:	4698      	mov	r8, r3
 8011b70:	4606      	mov	r6, r0
 8011b72:	b118      	cbz	r0, 8011b7c <_vfiprintf_r+0x18>
 8011b74:	6a03      	ldr	r3, [r0, #32]
 8011b76:	b90b      	cbnz	r3, 8011b7c <_vfiprintf_r+0x18>
 8011b78:	f7fe f8a2 	bl	800fcc0 <__sinit>
 8011b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b7e:	07d9      	lsls	r1, r3, #31
 8011b80:	d405      	bmi.n	8011b8e <_vfiprintf_r+0x2a>
 8011b82:	89ab      	ldrh	r3, [r5, #12]
 8011b84:	059a      	lsls	r2, r3, #22
 8011b86:	d402      	bmi.n	8011b8e <_vfiprintf_r+0x2a>
 8011b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b8a:	f7fe fa0e 	bl	800ffaa <__retarget_lock_acquire_recursive>
 8011b8e:	89ab      	ldrh	r3, [r5, #12]
 8011b90:	071b      	lsls	r3, r3, #28
 8011b92:	d501      	bpl.n	8011b98 <_vfiprintf_r+0x34>
 8011b94:	692b      	ldr	r3, [r5, #16]
 8011b96:	b99b      	cbnz	r3, 8011bc0 <_vfiprintf_r+0x5c>
 8011b98:	4629      	mov	r1, r5
 8011b9a:	4630      	mov	r0, r6
 8011b9c:	f000 f938 	bl	8011e10 <__swsetup_r>
 8011ba0:	b170      	cbz	r0, 8011bc0 <_vfiprintf_r+0x5c>
 8011ba2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ba4:	07dc      	lsls	r4, r3, #31
 8011ba6:	d504      	bpl.n	8011bb2 <_vfiprintf_r+0x4e>
 8011ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8011bac:	b01d      	add	sp, #116	@ 0x74
 8011bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bb2:	89ab      	ldrh	r3, [r5, #12]
 8011bb4:	0598      	lsls	r0, r3, #22
 8011bb6:	d4f7      	bmi.n	8011ba8 <_vfiprintf_r+0x44>
 8011bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bba:	f7fe f9f7 	bl	800ffac <__retarget_lock_release_recursive>
 8011bbe:	e7f3      	b.n	8011ba8 <_vfiprintf_r+0x44>
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bc4:	2320      	movs	r3, #32
 8011bc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011bca:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bce:	2330      	movs	r3, #48	@ 0x30
 8011bd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011d80 <_vfiprintf_r+0x21c>
 8011bd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011bd8:	f04f 0901 	mov.w	r9, #1
 8011bdc:	4623      	mov	r3, r4
 8011bde:	469a      	mov	sl, r3
 8011be0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011be4:	b10a      	cbz	r2, 8011bea <_vfiprintf_r+0x86>
 8011be6:	2a25      	cmp	r2, #37	@ 0x25
 8011be8:	d1f9      	bne.n	8011bde <_vfiprintf_r+0x7a>
 8011bea:	ebba 0b04 	subs.w	fp, sl, r4
 8011bee:	d00b      	beq.n	8011c08 <_vfiprintf_r+0xa4>
 8011bf0:	465b      	mov	r3, fp
 8011bf2:	4622      	mov	r2, r4
 8011bf4:	4629      	mov	r1, r5
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	f7ff ffa2 	bl	8011b40 <__sfputs_r>
 8011bfc:	3001      	adds	r0, #1
 8011bfe:	f000 80a7 	beq.w	8011d50 <_vfiprintf_r+0x1ec>
 8011c02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c04:	445a      	add	r2, fp
 8011c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c08:	f89a 3000 	ldrb.w	r3, [sl]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	f000 809f 	beq.w	8011d50 <_vfiprintf_r+0x1ec>
 8011c12:	2300      	movs	r3, #0
 8011c14:	f04f 32ff 	mov.w	r2, #4294967295
 8011c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c1c:	f10a 0a01 	add.w	sl, sl, #1
 8011c20:	9304      	str	r3, [sp, #16]
 8011c22:	9307      	str	r3, [sp, #28]
 8011c24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011c28:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c2a:	4654      	mov	r4, sl
 8011c2c:	2205      	movs	r2, #5
 8011c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c32:	4853      	ldr	r0, [pc, #332]	@ (8011d80 <_vfiprintf_r+0x21c>)
 8011c34:	f7ee faf4 	bl	8000220 <memchr>
 8011c38:	9a04      	ldr	r2, [sp, #16]
 8011c3a:	b9d8      	cbnz	r0, 8011c74 <_vfiprintf_r+0x110>
 8011c3c:	06d1      	lsls	r1, r2, #27
 8011c3e:	bf44      	itt	mi
 8011c40:	2320      	movmi	r3, #32
 8011c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c46:	0713      	lsls	r3, r2, #28
 8011c48:	bf44      	itt	mi
 8011c4a:	232b      	movmi	r3, #43	@ 0x2b
 8011c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c50:	f89a 3000 	ldrb.w	r3, [sl]
 8011c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c56:	d015      	beq.n	8011c84 <_vfiprintf_r+0x120>
 8011c58:	9a07      	ldr	r2, [sp, #28]
 8011c5a:	4654      	mov	r4, sl
 8011c5c:	2000      	movs	r0, #0
 8011c5e:	f04f 0c0a 	mov.w	ip, #10
 8011c62:	4621      	mov	r1, r4
 8011c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c68:	3b30      	subs	r3, #48	@ 0x30
 8011c6a:	2b09      	cmp	r3, #9
 8011c6c:	d94b      	bls.n	8011d06 <_vfiprintf_r+0x1a2>
 8011c6e:	b1b0      	cbz	r0, 8011c9e <_vfiprintf_r+0x13a>
 8011c70:	9207      	str	r2, [sp, #28]
 8011c72:	e014      	b.n	8011c9e <_vfiprintf_r+0x13a>
 8011c74:	eba0 0308 	sub.w	r3, r0, r8
 8011c78:	fa09 f303 	lsl.w	r3, r9, r3
 8011c7c:	4313      	orrs	r3, r2
 8011c7e:	9304      	str	r3, [sp, #16]
 8011c80:	46a2      	mov	sl, r4
 8011c82:	e7d2      	b.n	8011c2a <_vfiprintf_r+0xc6>
 8011c84:	9b03      	ldr	r3, [sp, #12]
 8011c86:	1d19      	adds	r1, r3, #4
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	9103      	str	r1, [sp, #12]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	bfbb      	ittet	lt
 8011c90:	425b      	neglt	r3, r3
 8011c92:	f042 0202 	orrlt.w	r2, r2, #2
 8011c96:	9307      	strge	r3, [sp, #28]
 8011c98:	9307      	strlt	r3, [sp, #28]
 8011c9a:	bfb8      	it	lt
 8011c9c:	9204      	strlt	r2, [sp, #16]
 8011c9e:	7823      	ldrb	r3, [r4, #0]
 8011ca0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ca2:	d10a      	bne.n	8011cba <_vfiprintf_r+0x156>
 8011ca4:	7863      	ldrb	r3, [r4, #1]
 8011ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ca8:	d132      	bne.n	8011d10 <_vfiprintf_r+0x1ac>
 8011caa:	9b03      	ldr	r3, [sp, #12]
 8011cac:	1d1a      	adds	r2, r3, #4
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	9203      	str	r2, [sp, #12]
 8011cb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011cb6:	3402      	adds	r4, #2
 8011cb8:	9305      	str	r3, [sp, #20]
 8011cba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011d90 <_vfiprintf_r+0x22c>
 8011cbe:	7821      	ldrb	r1, [r4, #0]
 8011cc0:	2203      	movs	r2, #3
 8011cc2:	4650      	mov	r0, sl
 8011cc4:	f7ee faac 	bl	8000220 <memchr>
 8011cc8:	b138      	cbz	r0, 8011cda <_vfiprintf_r+0x176>
 8011cca:	9b04      	ldr	r3, [sp, #16]
 8011ccc:	eba0 000a 	sub.w	r0, r0, sl
 8011cd0:	2240      	movs	r2, #64	@ 0x40
 8011cd2:	4082      	lsls	r2, r0
 8011cd4:	4313      	orrs	r3, r2
 8011cd6:	3401      	adds	r4, #1
 8011cd8:	9304      	str	r3, [sp, #16]
 8011cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cde:	4829      	ldr	r0, [pc, #164]	@ (8011d84 <_vfiprintf_r+0x220>)
 8011ce0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ce4:	2206      	movs	r2, #6
 8011ce6:	f7ee fa9b 	bl	8000220 <memchr>
 8011cea:	2800      	cmp	r0, #0
 8011cec:	d03f      	beq.n	8011d6e <_vfiprintf_r+0x20a>
 8011cee:	4b26      	ldr	r3, [pc, #152]	@ (8011d88 <_vfiprintf_r+0x224>)
 8011cf0:	bb1b      	cbnz	r3, 8011d3a <_vfiprintf_r+0x1d6>
 8011cf2:	9b03      	ldr	r3, [sp, #12]
 8011cf4:	3307      	adds	r3, #7
 8011cf6:	f023 0307 	bic.w	r3, r3, #7
 8011cfa:	3308      	adds	r3, #8
 8011cfc:	9303      	str	r3, [sp, #12]
 8011cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d00:	443b      	add	r3, r7
 8011d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d04:	e76a      	b.n	8011bdc <_vfiprintf_r+0x78>
 8011d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d0a:	460c      	mov	r4, r1
 8011d0c:	2001      	movs	r0, #1
 8011d0e:	e7a8      	b.n	8011c62 <_vfiprintf_r+0xfe>
 8011d10:	2300      	movs	r3, #0
 8011d12:	3401      	adds	r4, #1
 8011d14:	9305      	str	r3, [sp, #20]
 8011d16:	4619      	mov	r1, r3
 8011d18:	f04f 0c0a 	mov.w	ip, #10
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d22:	3a30      	subs	r2, #48	@ 0x30
 8011d24:	2a09      	cmp	r2, #9
 8011d26:	d903      	bls.n	8011d30 <_vfiprintf_r+0x1cc>
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d0c6      	beq.n	8011cba <_vfiprintf_r+0x156>
 8011d2c:	9105      	str	r1, [sp, #20]
 8011d2e:	e7c4      	b.n	8011cba <_vfiprintf_r+0x156>
 8011d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d34:	4604      	mov	r4, r0
 8011d36:	2301      	movs	r3, #1
 8011d38:	e7f0      	b.n	8011d1c <_vfiprintf_r+0x1b8>
 8011d3a:	ab03      	add	r3, sp, #12
 8011d3c:	9300      	str	r3, [sp, #0]
 8011d3e:	462a      	mov	r2, r5
 8011d40:	4b12      	ldr	r3, [pc, #72]	@ (8011d8c <_vfiprintf_r+0x228>)
 8011d42:	a904      	add	r1, sp, #16
 8011d44:	4630      	mov	r0, r6
 8011d46:	f7fd fb79 	bl	800f43c <_printf_float>
 8011d4a:	4607      	mov	r7, r0
 8011d4c:	1c78      	adds	r0, r7, #1
 8011d4e:	d1d6      	bne.n	8011cfe <_vfiprintf_r+0x19a>
 8011d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d52:	07d9      	lsls	r1, r3, #31
 8011d54:	d405      	bmi.n	8011d62 <_vfiprintf_r+0x1fe>
 8011d56:	89ab      	ldrh	r3, [r5, #12]
 8011d58:	059a      	lsls	r2, r3, #22
 8011d5a:	d402      	bmi.n	8011d62 <_vfiprintf_r+0x1fe>
 8011d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d5e:	f7fe f925 	bl	800ffac <__retarget_lock_release_recursive>
 8011d62:	89ab      	ldrh	r3, [r5, #12]
 8011d64:	065b      	lsls	r3, r3, #25
 8011d66:	f53f af1f 	bmi.w	8011ba8 <_vfiprintf_r+0x44>
 8011d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d6c:	e71e      	b.n	8011bac <_vfiprintf_r+0x48>
 8011d6e:	ab03      	add	r3, sp, #12
 8011d70:	9300      	str	r3, [sp, #0]
 8011d72:	462a      	mov	r2, r5
 8011d74:	4b05      	ldr	r3, [pc, #20]	@ (8011d8c <_vfiprintf_r+0x228>)
 8011d76:	a904      	add	r1, sp, #16
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f7fd fdf7 	bl	800f96c <_printf_i>
 8011d7e:	e7e4      	b.n	8011d4a <_vfiprintf_r+0x1e6>
 8011d80:	080124e2 	.word	0x080124e2
 8011d84:	080124ec 	.word	0x080124ec
 8011d88:	0800f43d 	.word	0x0800f43d
 8011d8c:	08011b41 	.word	0x08011b41
 8011d90:	080124e8 	.word	0x080124e8

08011d94 <__swbuf_r>:
 8011d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d96:	460e      	mov	r6, r1
 8011d98:	4614      	mov	r4, r2
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	b118      	cbz	r0, 8011da6 <__swbuf_r+0x12>
 8011d9e:	6a03      	ldr	r3, [r0, #32]
 8011da0:	b90b      	cbnz	r3, 8011da6 <__swbuf_r+0x12>
 8011da2:	f7fd ff8d 	bl	800fcc0 <__sinit>
 8011da6:	69a3      	ldr	r3, [r4, #24]
 8011da8:	60a3      	str	r3, [r4, #8]
 8011daa:	89a3      	ldrh	r3, [r4, #12]
 8011dac:	071a      	lsls	r2, r3, #28
 8011dae:	d501      	bpl.n	8011db4 <__swbuf_r+0x20>
 8011db0:	6923      	ldr	r3, [r4, #16]
 8011db2:	b943      	cbnz	r3, 8011dc6 <__swbuf_r+0x32>
 8011db4:	4621      	mov	r1, r4
 8011db6:	4628      	mov	r0, r5
 8011db8:	f000 f82a 	bl	8011e10 <__swsetup_r>
 8011dbc:	b118      	cbz	r0, 8011dc6 <__swbuf_r+0x32>
 8011dbe:	f04f 37ff 	mov.w	r7, #4294967295
 8011dc2:	4638      	mov	r0, r7
 8011dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dc6:	6823      	ldr	r3, [r4, #0]
 8011dc8:	6922      	ldr	r2, [r4, #16]
 8011dca:	1a98      	subs	r0, r3, r2
 8011dcc:	6963      	ldr	r3, [r4, #20]
 8011dce:	b2f6      	uxtb	r6, r6
 8011dd0:	4283      	cmp	r3, r0
 8011dd2:	4637      	mov	r7, r6
 8011dd4:	dc05      	bgt.n	8011de2 <__swbuf_r+0x4e>
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	4628      	mov	r0, r5
 8011dda:	f7ff fda7 	bl	801192c <_fflush_r>
 8011dde:	2800      	cmp	r0, #0
 8011de0:	d1ed      	bne.n	8011dbe <__swbuf_r+0x2a>
 8011de2:	68a3      	ldr	r3, [r4, #8]
 8011de4:	3b01      	subs	r3, #1
 8011de6:	60a3      	str	r3, [r4, #8]
 8011de8:	6823      	ldr	r3, [r4, #0]
 8011dea:	1c5a      	adds	r2, r3, #1
 8011dec:	6022      	str	r2, [r4, #0]
 8011dee:	701e      	strb	r6, [r3, #0]
 8011df0:	6962      	ldr	r2, [r4, #20]
 8011df2:	1c43      	adds	r3, r0, #1
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d004      	beq.n	8011e02 <__swbuf_r+0x6e>
 8011df8:	89a3      	ldrh	r3, [r4, #12]
 8011dfa:	07db      	lsls	r3, r3, #31
 8011dfc:	d5e1      	bpl.n	8011dc2 <__swbuf_r+0x2e>
 8011dfe:	2e0a      	cmp	r6, #10
 8011e00:	d1df      	bne.n	8011dc2 <__swbuf_r+0x2e>
 8011e02:	4621      	mov	r1, r4
 8011e04:	4628      	mov	r0, r5
 8011e06:	f7ff fd91 	bl	801192c <_fflush_r>
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	d0d9      	beq.n	8011dc2 <__swbuf_r+0x2e>
 8011e0e:	e7d6      	b.n	8011dbe <__swbuf_r+0x2a>

08011e10 <__swsetup_r>:
 8011e10:	b538      	push	{r3, r4, r5, lr}
 8011e12:	4b29      	ldr	r3, [pc, #164]	@ (8011eb8 <__swsetup_r+0xa8>)
 8011e14:	4605      	mov	r5, r0
 8011e16:	6818      	ldr	r0, [r3, #0]
 8011e18:	460c      	mov	r4, r1
 8011e1a:	b118      	cbz	r0, 8011e24 <__swsetup_r+0x14>
 8011e1c:	6a03      	ldr	r3, [r0, #32]
 8011e1e:	b90b      	cbnz	r3, 8011e24 <__swsetup_r+0x14>
 8011e20:	f7fd ff4e 	bl	800fcc0 <__sinit>
 8011e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e28:	0719      	lsls	r1, r3, #28
 8011e2a:	d422      	bmi.n	8011e72 <__swsetup_r+0x62>
 8011e2c:	06da      	lsls	r2, r3, #27
 8011e2e:	d407      	bmi.n	8011e40 <__swsetup_r+0x30>
 8011e30:	2209      	movs	r2, #9
 8011e32:	602a      	str	r2, [r5, #0]
 8011e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e38:	81a3      	strh	r3, [r4, #12]
 8011e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e3e:	e033      	b.n	8011ea8 <__swsetup_r+0x98>
 8011e40:	0758      	lsls	r0, r3, #29
 8011e42:	d512      	bpl.n	8011e6a <__swsetup_r+0x5a>
 8011e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e46:	b141      	cbz	r1, 8011e5a <__swsetup_r+0x4a>
 8011e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e4c:	4299      	cmp	r1, r3
 8011e4e:	d002      	beq.n	8011e56 <__swsetup_r+0x46>
 8011e50:	4628      	mov	r0, r5
 8011e52:	f7fe ff15 	bl	8010c80 <_free_r>
 8011e56:	2300      	movs	r3, #0
 8011e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e5a:	89a3      	ldrh	r3, [r4, #12]
 8011e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011e60:	81a3      	strh	r3, [r4, #12]
 8011e62:	2300      	movs	r3, #0
 8011e64:	6063      	str	r3, [r4, #4]
 8011e66:	6923      	ldr	r3, [r4, #16]
 8011e68:	6023      	str	r3, [r4, #0]
 8011e6a:	89a3      	ldrh	r3, [r4, #12]
 8011e6c:	f043 0308 	orr.w	r3, r3, #8
 8011e70:	81a3      	strh	r3, [r4, #12]
 8011e72:	6923      	ldr	r3, [r4, #16]
 8011e74:	b94b      	cbnz	r3, 8011e8a <__swsetup_r+0x7a>
 8011e76:	89a3      	ldrh	r3, [r4, #12]
 8011e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e80:	d003      	beq.n	8011e8a <__swsetup_r+0x7a>
 8011e82:	4621      	mov	r1, r4
 8011e84:	4628      	mov	r0, r5
 8011e86:	f000 f883 	bl	8011f90 <__smakebuf_r>
 8011e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e8e:	f013 0201 	ands.w	r2, r3, #1
 8011e92:	d00a      	beq.n	8011eaa <__swsetup_r+0x9a>
 8011e94:	2200      	movs	r2, #0
 8011e96:	60a2      	str	r2, [r4, #8]
 8011e98:	6962      	ldr	r2, [r4, #20]
 8011e9a:	4252      	negs	r2, r2
 8011e9c:	61a2      	str	r2, [r4, #24]
 8011e9e:	6922      	ldr	r2, [r4, #16]
 8011ea0:	b942      	cbnz	r2, 8011eb4 <__swsetup_r+0xa4>
 8011ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011ea6:	d1c5      	bne.n	8011e34 <__swsetup_r+0x24>
 8011ea8:	bd38      	pop	{r3, r4, r5, pc}
 8011eaa:	0799      	lsls	r1, r3, #30
 8011eac:	bf58      	it	pl
 8011eae:	6962      	ldrpl	r2, [r4, #20]
 8011eb0:	60a2      	str	r2, [r4, #8]
 8011eb2:	e7f4      	b.n	8011e9e <__swsetup_r+0x8e>
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	e7f7      	b.n	8011ea8 <__swsetup_r+0x98>
 8011eb8:	20000194 	.word	0x20000194

08011ebc <_raise_r>:
 8011ebc:	291f      	cmp	r1, #31
 8011ebe:	b538      	push	{r3, r4, r5, lr}
 8011ec0:	4605      	mov	r5, r0
 8011ec2:	460c      	mov	r4, r1
 8011ec4:	d904      	bls.n	8011ed0 <_raise_r+0x14>
 8011ec6:	2316      	movs	r3, #22
 8011ec8:	6003      	str	r3, [r0, #0]
 8011eca:	f04f 30ff 	mov.w	r0, #4294967295
 8011ece:	bd38      	pop	{r3, r4, r5, pc}
 8011ed0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011ed2:	b112      	cbz	r2, 8011eda <_raise_r+0x1e>
 8011ed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ed8:	b94b      	cbnz	r3, 8011eee <_raise_r+0x32>
 8011eda:	4628      	mov	r0, r5
 8011edc:	f000 f830 	bl	8011f40 <_getpid_r>
 8011ee0:	4622      	mov	r2, r4
 8011ee2:	4601      	mov	r1, r0
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011eea:	f000 b817 	b.w	8011f1c <_kill_r>
 8011eee:	2b01      	cmp	r3, #1
 8011ef0:	d00a      	beq.n	8011f08 <_raise_r+0x4c>
 8011ef2:	1c59      	adds	r1, r3, #1
 8011ef4:	d103      	bne.n	8011efe <_raise_r+0x42>
 8011ef6:	2316      	movs	r3, #22
 8011ef8:	6003      	str	r3, [r0, #0]
 8011efa:	2001      	movs	r0, #1
 8011efc:	e7e7      	b.n	8011ece <_raise_r+0x12>
 8011efe:	2100      	movs	r1, #0
 8011f00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011f04:	4620      	mov	r0, r4
 8011f06:	4798      	blx	r3
 8011f08:	2000      	movs	r0, #0
 8011f0a:	e7e0      	b.n	8011ece <_raise_r+0x12>

08011f0c <raise>:
 8011f0c:	4b02      	ldr	r3, [pc, #8]	@ (8011f18 <raise+0xc>)
 8011f0e:	4601      	mov	r1, r0
 8011f10:	6818      	ldr	r0, [r3, #0]
 8011f12:	f7ff bfd3 	b.w	8011ebc <_raise_r>
 8011f16:	bf00      	nop
 8011f18:	20000194 	.word	0x20000194

08011f1c <_kill_r>:
 8011f1c:	b538      	push	{r3, r4, r5, lr}
 8011f1e:	4d07      	ldr	r5, [pc, #28]	@ (8011f3c <_kill_r+0x20>)
 8011f20:	2300      	movs	r3, #0
 8011f22:	4604      	mov	r4, r0
 8011f24:	4608      	mov	r0, r1
 8011f26:	4611      	mov	r1, r2
 8011f28:	602b      	str	r3, [r5, #0]
 8011f2a:	f7f0 f945 	bl	80021b8 <_kill>
 8011f2e:	1c43      	adds	r3, r0, #1
 8011f30:	d102      	bne.n	8011f38 <_kill_r+0x1c>
 8011f32:	682b      	ldr	r3, [r5, #0]
 8011f34:	b103      	cbz	r3, 8011f38 <_kill_r+0x1c>
 8011f36:	6023      	str	r3, [r4, #0]
 8011f38:	bd38      	pop	{r3, r4, r5, pc}
 8011f3a:	bf00      	nop
 8011f3c:	2000a64c 	.word	0x2000a64c

08011f40 <_getpid_r>:
 8011f40:	f7f0 b932 	b.w	80021a8 <_getpid>

08011f44 <__swhatbuf_r>:
 8011f44:	b570      	push	{r4, r5, r6, lr}
 8011f46:	460c      	mov	r4, r1
 8011f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f4c:	2900      	cmp	r1, #0
 8011f4e:	b096      	sub	sp, #88	@ 0x58
 8011f50:	4615      	mov	r5, r2
 8011f52:	461e      	mov	r6, r3
 8011f54:	da0d      	bge.n	8011f72 <__swhatbuf_r+0x2e>
 8011f56:	89a3      	ldrh	r3, [r4, #12]
 8011f58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011f5c:	f04f 0100 	mov.w	r1, #0
 8011f60:	bf14      	ite	ne
 8011f62:	2340      	movne	r3, #64	@ 0x40
 8011f64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011f68:	2000      	movs	r0, #0
 8011f6a:	6031      	str	r1, [r6, #0]
 8011f6c:	602b      	str	r3, [r5, #0]
 8011f6e:	b016      	add	sp, #88	@ 0x58
 8011f70:	bd70      	pop	{r4, r5, r6, pc}
 8011f72:	466a      	mov	r2, sp
 8011f74:	f000 f848 	bl	8012008 <_fstat_r>
 8011f78:	2800      	cmp	r0, #0
 8011f7a:	dbec      	blt.n	8011f56 <__swhatbuf_r+0x12>
 8011f7c:	9901      	ldr	r1, [sp, #4]
 8011f7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011f82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011f86:	4259      	negs	r1, r3
 8011f88:	4159      	adcs	r1, r3
 8011f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f8e:	e7eb      	b.n	8011f68 <__swhatbuf_r+0x24>

08011f90 <__smakebuf_r>:
 8011f90:	898b      	ldrh	r3, [r1, #12]
 8011f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f94:	079d      	lsls	r5, r3, #30
 8011f96:	4606      	mov	r6, r0
 8011f98:	460c      	mov	r4, r1
 8011f9a:	d507      	bpl.n	8011fac <__smakebuf_r+0x1c>
 8011f9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011fa0:	6023      	str	r3, [r4, #0]
 8011fa2:	6123      	str	r3, [r4, #16]
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	6163      	str	r3, [r4, #20]
 8011fa8:	b003      	add	sp, #12
 8011faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fac:	ab01      	add	r3, sp, #4
 8011fae:	466a      	mov	r2, sp
 8011fb0:	f7ff ffc8 	bl	8011f44 <__swhatbuf_r>
 8011fb4:	9f00      	ldr	r7, [sp, #0]
 8011fb6:	4605      	mov	r5, r0
 8011fb8:	4639      	mov	r1, r7
 8011fba:	4630      	mov	r0, r6
 8011fbc:	f7fe fed4 	bl	8010d68 <_malloc_r>
 8011fc0:	b948      	cbnz	r0, 8011fd6 <__smakebuf_r+0x46>
 8011fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fc6:	059a      	lsls	r2, r3, #22
 8011fc8:	d4ee      	bmi.n	8011fa8 <__smakebuf_r+0x18>
 8011fca:	f023 0303 	bic.w	r3, r3, #3
 8011fce:	f043 0302 	orr.w	r3, r3, #2
 8011fd2:	81a3      	strh	r3, [r4, #12]
 8011fd4:	e7e2      	b.n	8011f9c <__smakebuf_r+0xc>
 8011fd6:	89a3      	ldrh	r3, [r4, #12]
 8011fd8:	6020      	str	r0, [r4, #0]
 8011fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fde:	81a3      	strh	r3, [r4, #12]
 8011fe0:	9b01      	ldr	r3, [sp, #4]
 8011fe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011fe6:	b15b      	cbz	r3, 8012000 <__smakebuf_r+0x70>
 8011fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fec:	4630      	mov	r0, r6
 8011fee:	f000 f81d 	bl	801202c <_isatty_r>
 8011ff2:	b128      	cbz	r0, 8012000 <__smakebuf_r+0x70>
 8011ff4:	89a3      	ldrh	r3, [r4, #12]
 8011ff6:	f023 0303 	bic.w	r3, r3, #3
 8011ffa:	f043 0301 	orr.w	r3, r3, #1
 8011ffe:	81a3      	strh	r3, [r4, #12]
 8012000:	89a3      	ldrh	r3, [r4, #12]
 8012002:	431d      	orrs	r5, r3
 8012004:	81a5      	strh	r5, [r4, #12]
 8012006:	e7cf      	b.n	8011fa8 <__smakebuf_r+0x18>

08012008 <_fstat_r>:
 8012008:	b538      	push	{r3, r4, r5, lr}
 801200a:	4d07      	ldr	r5, [pc, #28]	@ (8012028 <_fstat_r+0x20>)
 801200c:	2300      	movs	r3, #0
 801200e:	4604      	mov	r4, r0
 8012010:	4608      	mov	r0, r1
 8012012:	4611      	mov	r1, r2
 8012014:	602b      	str	r3, [r5, #0]
 8012016:	f7f0 f92f 	bl	8002278 <_fstat>
 801201a:	1c43      	adds	r3, r0, #1
 801201c:	d102      	bne.n	8012024 <_fstat_r+0x1c>
 801201e:	682b      	ldr	r3, [r5, #0]
 8012020:	b103      	cbz	r3, 8012024 <_fstat_r+0x1c>
 8012022:	6023      	str	r3, [r4, #0]
 8012024:	bd38      	pop	{r3, r4, r5, pc}
 8012026:	bf00      	nop
 8012028:	2000a64c 	.word	0x2000a64c

0801202c <_isatty_r>:
 801202c:	b538      	push	{r3, r4, r5, lr}
 801202e:	4d06      	ldr	r5, [pc, #24]	@ (8012048 <_isatty_r+0x1c>)
 8012030:	2300      	movs	r3, #0
 8012032:	4604      	mov	r4, r0
 8012034:	4608      	mov	r0, r1
 8012036:	602b      	str	r3, [r5, #0]
 8012038:	f7f0 f92e 	bl	8002298 <_isatty>
 801203c:	1c43      	adds	r3, r0, #1
 801203e:	d102      	bne.n	8012046 <_isatty_r+0x1a>
 8012040:	682b      	ldr	r3, [r5, #0]
 8012042:	b103      	cbz	r3, 8012046 <_isatty_r+0x1a>
 8012044:	6023      	str	r3, [r4, #0]
 8012046:	bd38      	pop	{r3, r4, r5, pc}
 8012048:	2000a64c 	.word	0x2000a64c

0801204c <_init>:
 801204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801204e:	bf00      	nop
 8012050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012052:	bc08      	pop	{r3}
 8012054:	469e      	mov	lr, r3
 8012056:	4770      	bx	lr

08012058 <_fini>:
 8012058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801205a:	bf00      	nop
 801205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801205e:	bc08      	pop	{r3}
 8012060:	469e      	mov	lr, r3
 8012062:	4770      	bx	lr
