
ValveBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a988  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800ab68  0800ab68  0000bb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac48  0800ac48  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac48  0800ac48  0000bc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac50  0800ac50  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac50  0800ac50  0000bc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac54  0800ac54  0000bc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ac58  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000213c  200001d4  0800ae2c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002310  0800ae2c  0000c310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000253f6  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f37  00000000  00000000  000315fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002058  00000000  00000000  00036538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018cb  00000000  00000000  00038590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006f1d  00000000  00000000  00039e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025e14  00000000  00000000  00040d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f38b3  00000000  00000000  00066b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a43f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008eb8  00000000  00000000  0015a484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0016333c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ab50 	.word	0x0800ab50

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800ab50 	.word	0x0800ab50

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <CDC_Transmit_Print>:
};
/* USER CODE BEGIN PV */

#define PRINT_BUFFER_SIZE     256

extern void CDC_Transmit_Print(const char *format, ...) {
 80002c0:	b40f      	push	{r0, r1, r2, r3}
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b0c2      	sub	sp, #264	@ 0x108
 80002c6:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 80002c8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80002cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80002d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80002d4:	601a      	str	r2, [r3, #0]
	int n = vsprintf(buf, format, args);
 80002d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80002da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80002de:	1d38      	adds	r0, r7, #4
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80002e6:	f009 ffa9 	bl	800a23c <vsiprintf>
 80002ea:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	CDC_Transmit_FS(buf, n);
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 80002f4:	4618      	mov	r0, r3
 80002f6:	f009 fb3f 	bl	8009978 <CDC_Transmit_FS>
}
 80002fa:	bf00      	nop
 80002fc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000300:	46bd      	mov	sp, r7
 8000302:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000306:	b004      	add	sp, #16
 8000308:	4770      	bx	lr
	...

0800030c <HAL_GPIO_EXTI_Callback>:

uint32_t adc_data;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == EMER_VALVE_IN_Pin) {
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d10d      	bne.n	8000338 <HAL_GPIO_EXTI_Callback+0x2c>
		GPIO_PinState in = HAL_GPIO_ReadPin(EMER_VALVE_IN_GPIO_Port, EMER_VALVE_IN_Pin);
 800031c:	2101      	movs	r1, #1
 800031e:	4812      	ldr	r0, [pc, #72]	@ (8000368 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000320:	f002 fb76 	bl	8002a10 <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(Emergency_Valve_OUT_GPIO_Port, Emergency_Valve_OUT_Pin, in);
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	461a      	mov	r2, r3
 800032c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000332:	f002 fb85 	bl	8002a40 <HAL_GPIO_WritePin>
 8000336:	e014      	b.n	8000362 <HAL_GPIO_EXTI_Callback+0x56>
	} else if (GPIO_Pin == FC_FAULT_Pin) {
 8000338:	88fb      	ldrh	r3, [r7, #6]
 800033a:	2b04      	cmp	r3, #4
 800033c:	d106      	bne.n	800034c <HAL_GPIO_EXTI_Callback+0x40>
		HAL_GPIO_WritePin(Emergency_Valve_OUT_GPIO_Port, Emergency_Valve_OUT_Pin, GPIO_PIN_SET);
 800033e:	2201      	movs	r2, #1
 8000340:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000344:	4808      	ldr	r0, [pc, #32]	@ (8000368 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000346:	f002 fb7b 	bl	8002a40 <HAL_GPIO_WritePin>
 800034a:	e00a      	b.n	8000362 <HAL_GPIO_EXTI_Callback+0x56>
	} else if (GPIO_Pin == SOLENOID_IN_Pin) {
 800034c:	88fb      	ldrh	r3, [r7, #6]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d106      	bne.n	8000360 <HAL_GPIO_EXTI_Callback+0x54>
		HAL_GPIO_WritePin(Solenoid_OUT_GPIO_Port, Solenoid_OUT_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000358:	4803      	ldr	r0, [pc, #12]	@ (8000368 <HAL_GPIO_EXTI_Callback+0x5c>)
 800035a:	f002 fb71 	bl	8002a40 <HAL_GPIO_WritePin>
 800035e:	e000      	b.n	8000362 <HAL_GPIO_EXTI_Callback+0x56>
	} else {
		return;
 8000360:	bf00      	nop
	}
}
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	48000400 	.word	0x48000400

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 fc6f 	bl	8000c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f82e 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f000 f966 	bl	8000648 <MX_GPIO_Init>
  MX_ADC3_Init();
 800037c:	f000 f86c 	bl	8000458 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8000380:	f000 f8dc 	bl	800053c <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000384:	f000 f920 	bl	80005c8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  MX_USB_Device_Init();
 8000388:	f009 fa38 	bl	80097fc <MX_USB_Device_Init>
CDC_Transmit_Print("Beggining Program");
 800038c:	480d      	ldr	r0, [pc, #52]	@ (80003c4 <main+0x58>)
 800038e:	f7ff ff97 	bl	80002c0 <CDC_Transmit_Print>

  while(1){
	  HAL_ADC_Start(&hadc3);
 8000392:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <main+0x5c>)
 8000394:	f001 f890 	bl	80014b8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3,20);
 8000398:	2114      	movs	r1, #20
 800039a:	480b      	ldr	r0, [pc, #44]	@ (80003c8 <main+0x5c>)
 800039c:	f001 f956 	bl	800164c <HAL_ADC_PollForConversion>
	  adc_data = HAL_ADC_GetValue(&hadc3);
 80003a0:	4809      	ldr	r0, [pc, #36]	@ (80003c8 <main+0x5c>)
 80003a2:	f001 fa47 	bl	8001834 <HAL_ADC_GetValue>
 80003a6:	4603      	mov	r3, r0
 80003a8:	4a08      	ldr	r2, [pc, #32]	@ (80003cc <main+0x60>)
 80003aa:	6013      	str	r3, [r2, #0]
	  CDC_Transmit_Print("ADC Value: %lu \r\n", adc_data);
 80003ac:	4b07      	ldr	r3, [pc, #28]	@ (80003cc <main+0x60>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4619      	mov	r1, r3
 80003b2:	4807      	ldr	r0, [pc, #28]	@ (80003d0 <main+0x64>)
 80003b4:	f7ff ff84 	bl	80002c0 <CDC_Transmit_Print>

	  HAL_Delay(50);
 80003b8:	2032      	movs	r0, #50	@ 0x32
 80003ba:	f000 fc81 	bl	8000cc0 <HAL_Delay>
	  HAL_ADC_Start(&hadc3);
 80003be:	bf00      	nop
 80003c0:	e7e7      	b.n	8000392 <main+0x26>
 80003c2:	bf00      	nop
 80003c4:	0800ab8c 	.word	0x0800ab8c
 80003c8:	200001f0 	.word	0x200001f0
 80003cc:	20000314 	.word	0x20000314
 80003d0:	0800aba0 	.word	0x0800aba0

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b094      	sub	sp, #80	@ 0x50
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0318 	add.w	r3, r7, #24
 80003de:	2238      	movs	r2, #56	@ 0x38
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f009 ff34 	bl	800a250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003fa:	f004 f985 	bl	8004708 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80003fe:	2322      	movs	r3, #34	@ 0x22
 8000400:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000402:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000406:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000408:	2340      	movs	r3, #64	@ 0x40
 800040a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800040c:	2301      	movs	r3, #1
 800040e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000410:	2300      	movs	r3, #0
 8000412:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f004 fa29 	bl	8004870 <HAL_RCC_OscConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000424:	f000 f9ba 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000428:	230f      	movs	r3, #15
 800042a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800042c:	2301      	movs	r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f004 fd27 	bl	8004e94 <HAL_RCC_ClockConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800044c:	f000 f9a6 	bl	800079c <Error_Handler>
  }
}
 8000450:	bf00      	nop
 8000452:	3750      	adds	r7, #80	@ 0x50
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800045e:	463b      	mov	r3, r7
 8000460:	2220      	movs	r2, #32
 8000462:	2100      	movs	r1, #0
 8000464:	4618      	mov	r0, r3
 8000466:	f009 fef3 	bl	800a250 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800046a:	4b31      	ldr	r3, [pc, #196]	@ (8000530 <MX_ADC3_Init+0xd8>)
 800046c:	4a31      	ldr	r2, [pc, #196]	@ (8000534 <MX_ADC3_Init+0xdc>)
 800046e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000470:	4b2f      	ldr	r3, [pc, #188]	@ (8000530 <MX_ADC3_Init+0xd8>)
 8000472:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000476:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000478:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <MX_ADC3_Init+0xd8>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800047e:	4b2c      	ldr	r3, [pc, #176]	@ (8000530 <MX_ADC3_Init+0xd8>)
 8000480:	2200      	movs	r2, #0
 8000482:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000484:	4b2a      	ldr	r3, [pc, #168]	@ (8000530 <MX_ADC3_Init+0xd8>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800048a:	4b29      	ldr	r3, [pc, #164]	@ (8000530 <MX_ADC3_Init+0xd8>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000490:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <MX_ADC3_Init+0xd8>)
 8000492:	2204      	movs	r2, #4
 8000494:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000496:	4b26      	ldr	r3, [pc, #152]	@ (8000530 <MX_ADC3_Init+0xd8>)
 8000498:	2200      	movs	r2, #0
 800049a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800049c:	4b24      	ldr	r3, [pc, #144]	@ (8000530 <MX_ADC3_Init+0xd8>)
 800049e:	2200      	movs	r2, #0
 80004a0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80004a2:	4b23      	ldr	r3, [pc, #140]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004a8:	4b21      	ldr	r3, [pc, #132]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80004bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004be:	2200      	movs	r2, #0
 80004c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 80004ca:	4b19      	ldr	r3, [pc, #100]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80004d2:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004d4:	220c      	movs	r2, #12
 80004d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80004d8:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80004de:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80004e4:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80004ea:	4811      	ldr	r0, [pc, #68]	@ (8000530 <MX_ADC3_Init+0xd8>)
 80004ec:	f000 fe36 	bl	800115c <HAL_ADC_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_ADC3_Init+0xa2>
  {
    Error_Handler();
 80004f6:	f000 f951 	bl	800079c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <MX_ADC3_Init+0xe0>)
 80004fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004fe:	2306      	movs	r3, #6
 8000500:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000506:	237f      	movs	r3, #127	@ 0x7f
 8000508:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800050a:	2304      	movs	r3, #4
 800050c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000512:	463b      	mov	r3, r7
 8000514:	4619      	mov	r1, r3
 8000516:	4806      	ldr	r0, [pc, #24]	@ (8000530 <MX_ADC3_Init+0xd8>)
 8000518:	f001 f99a 	bl	8001850 <HAL_ADC_ConfigChannel>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000522:	f000 f93b 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	3720      	adds	r7, #32
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200001f0 	.word	0x200001f0
 8000534:	50000400 	.word	0x50000400
 8000538:	14f00020 	.word	0x14f00020

0800053c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000540:	4b1f      	ldr	r3, [pc, #124]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 8000542:	4a20      	ldr	r2, [pc, #128]	@ (80005c4 <MX_FDCAN2_Init+0x88>)
 8000544:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000546:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 8000548:	2200      	movs	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800054c:	4b1c      	ldr	r3, [pc, #112]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000552:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000558:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 800055a:	2200      	movs	r2, #0
 800055c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800055e:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 8000560:	2200      	movs	r2, #0
 8000562:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000564:	4b16      	ldr	r3, [pc, #88]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 8000566:	2200      	movs	r2, #0
 8000568:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 800056c:	2210      	movs	r2, #16
 800056e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000570:	4b13      	ldr	r3, [pc, #76]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 8000572:	2201      	movs	r2, #1
 8000574:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 8000578:	2201      	movs	r2, #1
 800057a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 800057c:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 800057e:	2201      	movs	r2, #1
 8000580:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 8000584:	2201      	movs	r2, #1
 8000586:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000588:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 800058a:	2201      	movs	r2, #1
 800058c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 8000590:	2201      	movs	r2, #1
 8000592:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000594:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 8000596:	2201      	movs	r2, #1
 8000598:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 800059c:	2200      	movs	r2, #0
 800059e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <MX_FDCAN2_Init+0x84>)
 80005ae:	f001 fef1 	bl	8002394 <HAL_FDCAN_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80005b8:	f000 f8f0 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000025c 	.word	0x2000025c
 80005c4:	40006800 	.word	0x40006800

080005c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_I2C2_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000640 <MX_I2C2_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_I2C2_Init+0x74>)
 80005d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <MX_I2C2_Init+0x7c>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_I2C2_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_I2C2_Init+0x74>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_I2C2_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_I2C2_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_I2C2_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_I2C2_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_I2C2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000602:	480e      	ldr	r0, [pc, #56]	@ (800063c <MX_I2C2_Init+0x74>)
 8000604:	f002 fa4c 	bl	8002aa0 <HAL_I2C_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800060e:	f000 f8c5 	bl	800079c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000612:	2100      	movs	r1, #0
 8000614:	4809      	ldr	r0, [pc, #36]	@ (800063c <MX_I2C2_Init+0x74>)
 8000616:	f002 fade 	bl	8002bd6 <HAL_I2CEx_ConfigAnalogFilter>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000620:	f000 f8bc 	bl	800079c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000624:	2100      	movs	r1, #0
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_I2C2_Init+0x74>)
 8000628:	f002 fb20 	bl	8002c6c <HAL_I2CEx_ConfigDigitalFilter>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000632:	f000 f8b3 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200002c0 	.word	0x200002c0
 8000640:	40005800 	.word	0x40005800
 8000644:	00503d58 	.word	0x00503d58

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	4b44      	ldr	r3, [pc, #272]	@ (8000770 <MX_GPIO_Init+0x128>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	4a43      	ldr	r2, [pc, #268]	@ (8000770 <MX_GPIO_Init+0x128>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066a:	4b41      	ldr	r3, [pc, #260]	@ (8000770 <MX_GPIO_Init+0x128>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	4b3e      	ldr	r3, [pc, #248]	@ (8000770 <MX_GPIO_Init+0x128>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a3d      	ldr	r2, [pc, #244]	@ (8000770 <MX_GPIO_Init+0x128>)
 800067c:	f043 0320 	orr.w	r3, r3, #32
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b3b      	ldr	r3, [pc, #236]	@ (8000770 <MX_GPIO_Init+0x128>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f003 0320 	and.w	r3, r3, #32
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b38      	ldr	r3, [pc, #224]	@ (8000770 <MX_GPIO_Init+0x128>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a37      	ldr	r2, [pc, #220]	@ (8000770 <MX_GPIO_Init+0x128>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b35      	ldr	r3, [pc, #212]	@ (8000770 <MX_GPIO_Init+0x128>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b32      	ldr	r3, [pc, #200]	@ (8000770 <MX_GPIO_Init+0x128>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a31      	ldr	r2, [pc, #196]	@ (8000770 <MX_GPIO_Init+0x128>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000770 <MX_GPIO_Init+0x128>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Solenoid_OUT_Pin|Emergency_Valve_OUT_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80006c4:	482b      	ldr	r0, [pc, #172]	@ (8000774 <MX_GPIO_Init+0x12c>)
 80006c6:	f002 f9bb 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EMER_VALVE_IN_Pin */
  GPIO_InitStruct.Pin = EMER_VALVE_IN_Pin;
 80006ca:	2301      	movs	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006ce:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_VALVE_IN_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	4825      	ldr	r0, [pc, #148]	@ (8000774 <MX_GPIO_Init+0x12c>)
 80006e0:	f002 f814 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : SOLENOID_IN_Pin */
  GPIO_InitStruct.Pin = SOLENOID_IN_Pin;
 80006e4:	2302      	movs	r3, #2
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SOLENOID_IN_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	481e      	ldr	r0, [pc, #120]	@ (8000774 <MX_GPIO_Init+0x12c>)
 80006fa:	f002 f807 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : FC_FAULT_Pin */
  GPIO_InitStruct.Pin = FC_FAULT_Pin;
 80006fe:	2304      	movs	r3, #4
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000702:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FC_FAULT_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	4818      	ldr	r0, [pc, #96]	@ (8000774 <MX_GPIO_Init+0x12c>)
 8000714:	f001 fffa 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pins : Solenoid_OUT_Pin Emergency_Valve_OUT_Pin */
  GPIO_InitStruct.Pin = Solenoid_OUT_Pin|Emergency_Valve_OUT_Pin;
 8000718:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	4810      	ldr	r0, [pc, #64]	@ (8000774 <MX_GPIO_Init+0x12c>)
 8000732:	f001 ffeb 	bl	800270c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2105      	movs	r1, #5
 800073a:	2006      	movs	r0, #6
 800073c:	f001 fe02 	bl	8002344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000740:	2006      	movs	r0, #6
 8000742:	f001 fe19 	bl	8002378 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2105      	movs	r1, #5
 800074a:	2007      	movs	r0, #7
 800074c:	f001 fdfa 	bl	8002344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000750:	2007      	movs	r0, #7
 8000752:	f001 fe11 	bl	8002378 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2105      	movs	r1, #5
 800075a:	2008      	movs	r0, #8
 800075c:	f001 fdf2 	bl	8002344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000760:	2008      	movs	r0, #8
 8000762:	f001 fe09 	bl	8002378 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	@ 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	48000400 	.word	0x48000400

08000778 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d101      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800078a:	f000 fa7b 	bl	8000c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40012c00 	.word	0x40012c00

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <Error_Handler+0x8>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_MspInit+0x50>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b2:	4a11      	ldr	r2, [pc, #68]	@ (80007f8 <HAL_MspInit+0x50>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_MspInit+0x50>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <HAL_MspInit+0x50>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ca:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <HAL_MspInit+0x50>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_MspInit+0x50>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	210f      	movs	r1, #15
 80007e2:	f06f 0001 	mvn.w	r0, #1
 80007e6:	f001 fdad 	bl	8002344 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007ea:	f004 f831 	bl	8004850 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b09e      	sub	sp, #120	@ 0x78
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2250      	movs	r2, #80	@ 0x50
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f009 fd17 	bl	800a250 <memset>
  if(hadc->Instance==ADC3)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a1e      	ldr	r2, [pc, #120]	@ (80008a0 <HAL_ADC_MspInit+0xa4>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d134      	bne.n	8000896 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800082c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000830:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000832:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000836:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fd61 	bl	8005304 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000848:	f7ff ffa8 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <HAL_ADC_MspInit+0xa8>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000850:	4a14      	ldr	r2, [pc, #80]	@ (80008a4 <HAL_ADC_MspInit+0xa8>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_ADC_MspInit+0xa8>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_ADC_MspInit+0xa8>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000868:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <HAL_ADC_MspInit+0xa8>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <HAL_ADC_MspInit+0xa8>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = Pressure_IN_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000882:	2303      	movs	r3, #3
 8000884:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Pressure_IN_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <HAL_ADC_MspInit+0xac>)
 8000892:	f001 ff3b 	bl	800270c <HAL_GPIO_Init>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000896:	bf00      	nop
 8000898:	3778      	adds	r7, #120	@ 0x78
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	50000400 	.word	0x50000400
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000400 	.word	0x48000400

080008ac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09e      	sub	sp, #120	@ 0x78
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2250      	movs	r2, #80	@ 0x50
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f009 fcbf 	bl	800a250 <memset>
  if(hfdcan->Instance==FDCAN2)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000954 <HAL_FDCAN_MspInit+0xa8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d137      	bne.n	800094c <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80008e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 fd09 	bl	8005304 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008f8:	f7ff ff50 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <HAL_FDCAN_MspInit+0xac>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000900:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <HAL_FDCAN_MspInit+0xac>)
 8000902:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000906:	6593      	str	r3, [r2, #88]	@ 0x58
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <HAL_FDCAN_MspInit+0xac>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <HAL_FDCAN_MspInit+0xac>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000918:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <HAL_FDCAN_MspInit+0xac>)
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000920:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <HAL_FDCAN_MspInit+0xac>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800092c:	2360      	movs	r3, #96	@ 0x60
 800092e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800093c:	2309      	movs	r3, #9
 800093e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000944:	4619      	mov	r1, r3
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <HAL_FDCAN_MspInit+0xb0>)
 8000948:	f001 fee0 	bl	800270c <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 800094c:	bf00      	nop
 800094e:	3778      	adds	r7, #120	@ 0x78
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40006800 	.word	0x40006800
 8000958:	40021000 	.word	0x40021000
 800095c:	48000400 	.word	0x48000400

08000960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09e      	sub	sp, #120	@ 0x78
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2250      	movs	r2, #80	@ 0x50
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f009 fc65 	bl	800a250 <memset>
  if(hi2c->Instance==I2C2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a08 <HAL_I2C_MspInit+0xa8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d137      	bne.n	8000a00 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000990:	2380      	movs	r3, #128	@ 0x80
 8000992:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000994:	2300      	movs	r3, #0
 8000996:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4618      	mov	r0, r3
 800099e:	f004 fcb1 	bl	8005304 <HAL_RCCEx_PeriphCLKConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009a8:	f7ff fef8 	bl	800079c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_I2C_MspInit+0xac>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b0:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <HAL_I2C_MspInit+0xac>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <HAL_I2C_MspInit+0xac>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ca:	2312      	movs	r3, #18
 80009cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009d6:	2304      	movs	r3, #4
 80009d8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e4:	f001 fe92 	bl	800270c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_I2C_MspInit+0xac>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ec:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_I2C_MspInit+0xac>)
 80009ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <HAL_I2C_MspInit+0xac>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000a00:	bf00      	nop
 8000a02:	3778      	adds	r7, #120	@ 0x78
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40005800 	.word	0x40005800
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	@ 0x30
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a20:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad4 <HAL_InitTick+0xc4>)
 8000a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a24:	4a2b      	ldr	r2, [pc, #172]	@ (8000ad4 <HAL_InitTick+0xc4>)
 8000a26:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a2c:	4b29      	ldr	r3, [pc, #164]	@ (8000ad4 <HAL_InitTick+0xc4>)
 8000a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a38:	f107 020c 	add.w	r2, r7, #12
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 fbe6 	bl	8005214 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a48:	f004 fbce 	bl	80051e8 <HAL_RCC_GetPCLK2Freq>
 8000a4c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a50:	4a21      	ldr	r2, [pc, #132]	@ (8000ad8 <HAL_InitTick+0xc8>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9b      	lsrs	r3, r3, #18
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <HAL_InitTick+0xcc>)
 8000a5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ae0 <HAL_InitTick+0xd0>)
 8000a60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a62:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <HAL_InitTick+0xcc>)
 8000a64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <HAL_InitTick+0xcc>)
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <HAL_InitTick+0xcc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <HAL_InitTick+0xcc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000a7c:	4817      	ldr	r0, [pc, #92]	@ (8000adc <HAL_InitTick+0xcc>)
 8000a7e:	f004 fe7d 	bl	800577c <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11b      	bne.n	8000ac8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <HAL_InitTick+0xcc>)
 8000a92:	f004 fed5 	bl	8005840 <HAL_TIM_Base_Start_IT>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d111      	bne.n	8000ac8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000aa4:	2019      	movs	r0, #25
 8000aa6:	f001 fc67 	bl	8002378 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d808      	bhi.n	8000ac2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2019      	movs	r0, #25
 8000ab6:	f001 fc45 	bl	8002344 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0xd4>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e002      	b.n	8000ac8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3730      	adds	r7, #48	@ 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	20000318 	.word	0x20000318
 8000ae0:	40012c00 	.word	0x40012c00
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_VALVE_IN_Pin);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f001 ffa4 	bl	8002a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SOLENOID_IN_Pin);
 8000b30:	2002      	movs	r0, #2
 8000b32:	f001 ff9d 	bl	8002a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FC_FAULT_Pin);
 8000b3e:	2004      	movs	r0, #4
 8000b40:	f001 ff96 	bl	8002a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <USB_LP_IRQHandler+0x10>)
 8000b4e:	f002 f9c9 	bl	8002ee4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20001ccc 	.word	0x20001ccc

08000b5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b62:	f004 fedd 	bl	8005920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000318 	.word	0x20000318

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f009 fb5e 	bl	800a260 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2001c000 	.word	0x2001c000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	20000364 	.word	0x20000364
 8000bd8:	20002310 	.word	0x20002310

08000bdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c00:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	@ (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f009 fb1d 	bl	800a26c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c32:	f7ff fb9b 	bl	800036c <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   r0, =_estack
 8000c38:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000c44:	0800ac58 	.word	0x0800ac58
  ldr r2, =_sbss
 8000c48:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000c4c:	20002310 	.word	0x20002310

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>

08000c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f001 fb66 	bl	800232e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c62:	200f      	movs	r0, #15
 8000c64:	f7ff fed4 	bl	8000a10 <HAL_InitTick>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	71fb      	strb	r3, [r7, #7]
 8000c72:	e001      	b.n	8000c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c74:	f7ff fd98 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c78:	79fb      	ldrb	r3, [r7, #7]

}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a03      	ldr	r2, [pc, #12]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c94:	6013      	str	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000368 	.word	0x20000368
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000368 	.word	0x20000368

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d004      	beq.n	8000ce4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <HAL_Delay+0x40>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce4:	bf00      	nop
 8000ce6:	f7ff ffdf 	bl	8000ca8 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d8f7      	bhi.n	8000ce6 <HAL_Delay+0x26>
  {
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000008 	.word	0x20000008

08000d04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3360      	adds	r3, #96	@ 0x60
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <LL_ADC_SetOffset+0x44>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000da4:	bf00      	nop
 8000da6:	371c      	adds	r7, #28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	03fff000 	.word	0x03fff000

08000db4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3360      	adds	r3, #96	@ 0x60
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3360      	adds	r3, #96	@ 0x60
 8000df0:	461a      	mov	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b087      	sub	sp, #28
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3360      	adds	r3, #96	@ 0x60
 8000e26:	461a      	mov	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3360      	adds	r3, #96	@ 0x60
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000e76:	bf00      	nop
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	615a      	str	r2, [r3, #20]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b087      	sub	sp, #28
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3330      	adds	r3, #48	@ 0x30
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	4413      	add	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	211f      	movs	r1, #31
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	401a      	ands	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	0e9b      	lsrs	r3, r3, #26
 8000f06:	f003 011f 	and.w	r1, r3, #31
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	431a      	orrs	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f1a:	bf00      	nop
 8000f1c:	371c      	adds	r7, #28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b087      	sub	sp, #28
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3314      	adds	r3, #20
 8000f36:	461a      	mov	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	0e5b      	lsrs	r3, r3, #25
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	4413      	add	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	0d1b      	lsrs	r3, r3, #20
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2107      	movs	r1, #7
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	0d1b      	lsrs	r3, r3, #20
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f70:	bf00      	nop
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f94:	43db      	mvns	r3, r3
 8000f96:	401a      	ands	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0318 	and.w	r3, r3, #24
 8000f9e:	4908      	ldr	r1, [pc, #32]	@ (8000fc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fa0:	40d9      	lsrs	r1, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	400b      	ands	r3, r1
 8000fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000faa:	431a      	orrs	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	0007ffff 	.word	0x0007ffff

08000fc4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 031f 	and.w	r3, r3, #31
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800100c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6093      	str	r3, [r2, #8]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001034:	d101      	bne.n	800103a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001058:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800105c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001084:	d101      	bne.n	800108a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010ac:	f043 0201 	orr.w	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <LL_ADC_IsEnabled+0x18>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <LL_ADC_IsEnabled+0x1a>
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010fa:	f043 0204 	orr.w	r2, r3, #4
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	2b04      	cmp	r3, #4
 8001120:	d101      	bne.n	8001126 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	2b08      	cmp	r3, #8
 8001146:	d101      	bne.n	800114c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e19b      	b.n	80014ae <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001180:	2b00      	cmp	r3, #0
 8001182:	d109      	bne.n	8001198 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fb39 	bl	80007fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff3f 	bl	8001020 <LL_ADC_IsDeepPowerDownEnabled>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff25 	bl	8000ffc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff5a 	bl	8001070 <LL_ADC_IsInternalRegulatorEnabled>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d115      	bne.n	80011ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff3e 	bl	8001048 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011cc:	4b97      	ldr	r3, [pc, #604]	@ (800142c <HAL_ADC_Init+0x2d0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	4a97      	ldr	r2, [pc, #604]	@ (8001430 <HAL_ADC_Init+0x2d4>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	3301      	adds	r3, #1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011e0:	e002      	b.n	80011e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f9      	bne.n	80011e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff3c 	bl	8001070 <LL_ADC_IsInternalRegulatorEnabled>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10d      	bne.n	800121a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001202:	f043 0210 	orr.w	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff75 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 8001224:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 8134 	bne.w	800149c <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 8130 	bne.w	800149c <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001240:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001244:	f043 0202 	orr.w	r2, r3, #2
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff35 	bl	80010c0 <LL_ADC_IsEnabled>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d137      	bne.n	80012cc <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001264:	d004      	beq.n	8001270 <HAL_ADC_Init+0x114>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a72      	ldr	r2, [pc, #456]	@ (8001434 <HAL_ADC_Init+0x2d8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d10f      	bne.n	8001290 <HAL_ADC_Init+0x134>
 8001270:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001274:	f7ff ff24 	bl	80010c0 <LL_ADC_IsEnabled>
 8001278:	4604      	mov	r4, r0
 800127a:	486e      	ldr	r0, [pc, #440]	@ (8001434 <HAL_ADC_Init+0x2d8>)
 800127c:	f7ff ff20 	bl	80010c0 <LL_ADC_IsEnabled>
 8001280:	4603      	mov	r3, r0
 8001282:	4323      	orrs	r3, r4
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	e008      	b.n	80012a2 <HAL_ADC_Init+0x146>
 8001290:	4869      	ldr	r0, [pc, #420]	@ (8001438 <HAL_ADC_Init+0x2dc>)
 8001292:	f7ff ff15 	bl	80010c0 <LL_ADC_IsEnabled>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d012      	beq.n	80012cc <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ae:	d004      	beq.n	80012ba <HAL_ADC_Init+0x15e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001434 <HAL_ADC_Init+0x2d8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_ADC_Init+0x162>
 80012ba:	4a60      	ldr	r2, [pc, #384]	@ (800143c <HAL_ADC_Init+0x2e0>)
 80012bc:	e000      	b.n	80012c0 <HAL_ADC_Init+0x164>
 80012be:	4a60      	ldr	r2, [pc, #384]	@ (8001440 <HAL_ADC_Init+0x2e4>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4610      	mov	r0, r2
 80012c8:	f7ff fd1c 	bl	8000d04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7f5b      	ldrb	r3, [r3, #29]
 80012d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80012dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80012e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d106      	bne.n	8001308 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fe:	3b01      	subs	r3, #1
 8001300:	045b      	lsls	r3, r3, #17
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130c:	2b00      	cmp	r3, #0
 800130e:	d009      	beq.n	8001324 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001314:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	4b46      	ldr	r3, [pc, #280]	@ (8001444 <HAL_ADC_Init+0x2e8>)
 800132c:	4013      	ands	r3, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	430b      	orrs	r3, r1
 8001336:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff feee 	bl	8001134 <LL_ADC_INJ_IsConversionOngoing>
 8001358:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d17b      	bne.n	8001458 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d178      	bne.n	8001458 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800136a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001372:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001382:	f023 0302 	bic.w	r3, r3, #2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	430b      	orrs	r3, r1
 800138e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d017      	beq.n	80013c8 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80013a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80013b0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6911      	ldr	r1, [r2, #16]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	430b      	orrs	r3, r1
 80013c2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80013c6:	e013      	b.n	80013f0 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80013d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013ec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d126      	bne.n	8001448 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001410:	4311      	orrs	r1, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001416:	4311      	orrs	r1, r2
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800141c:	430a      	orrs	r2, r1
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0201 	orr.w	r2, r2, #1
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	e015      	b.n	8001458 <HAL_ADC_Init+0x2fc>
 800142c:	20000000 	.word	0x20000000
 8001430:	053e2d63 	.word	0x053e2d63
 8001434:	50000100 	.word	0x50000100
 8001438:	50000400 	.word	0x50000400
 800143c:	50000300 	.word	0x50000300
 8001440:	50000700 	.word	0x50000700
 8001444:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d10c      	bne.n	800147a <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f023 010f 	bic.w	r1, r3, #15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	1e5a      	subs	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
 8001478:	e007      	b.n	800148a <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 020f 	bic.w	r2, r2, #15
 8001488:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148e:	f023 0303 	bic.w	r3, r3, #3
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	65da      	str	r2, [r3, #92]	@ 0x5c
 800149a:	e007      	b.n	80014ac <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a0:	f043 0210 	orr.w	r2, r3, #16
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	@ 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop

080014b8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014c8:	d004      	beq.n	80014d4 <HAL_ADC_Start+0x1c>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001640 <HAL_ADC_Start+0x188>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d101      	bne.n	80014d8 <HAL_ADC_Start+0x20>
 80014d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001644 <HAL_ADC_Start+0x18c>)
 80014d6:	e000      	b.n	80014da <HAL_ADC_Start+0x22>
 80014d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001648 <HAL_ADC_Start+0x190>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fd72 	bl	8000fc4 <LL_ADC_GetMultimode>
 80014e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fe11 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f040 809f 	bne.w	8001632 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_Start+0x4a>
 80014fe:	2302      	movs	r3, #2
 8001500:	e09a      	b.n	8001638 <HAL_ADC_Start+0x180>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fdcc 	bl	80020a8 <ADC_Enable>
 8001510:	4603      	mov	r3, r0
 8001512:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f040 8086 	bne.w	8001628 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001520:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a42      	ldr	r2, [pc, #264]	@ (8001640 <HAL_ADC_Start+0x188>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d002      	beq.n	8001540 <HAL_ADC_Start+0x88>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	e001      	b.n	8001544 <HAL_ADC_Start+0x8c>
 8001540:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	4293      	cmp	r3, r2
 800154a:	d002      	beq.n	8001552 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001556:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001562:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800156a:	d106      	bne.n	800157a <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001570:	f023 0206 	bic.w	r2, r3, #6
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	661a      	str	r2, [r3, #96]	@ 0x60
 8001578:	e002      	b.n	8001580 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	221c      	movs	r2, #28
 8001586:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2a      	ldr	r2, [pc, #168]	@ (8001640 <HAL_ADC_Start+0x188>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d002      	beq.n	80015a0 <HAL_ADC_Start+0xe8>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	e001      	b.n	80015a4 <HAL_ADC_Start+0xec>
 80015a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d008      	beq.n	80015be <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d002      	beq.n	80015be <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	d114      	bne.n	80015e8 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fd80 	bl	80010e6 <LL_ADC_REG_StartConversion>
 80015e6:	e026      	b.n	8001636 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <HAL_ADC_Start+0x188>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d002      	beq.n	8001604 <HAL_ADC_Start+0x14c>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	e001      	b.n	8001608 <HAL_ADC_Start+0x150>
 8001604:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001608:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00f      	beq.n	8001636 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800161e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001626:	e006      	b.n	8001636 <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001630:	e001      	b.n	8001636 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001632:	2302      	movs	r3, #2
 8001634:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001636:	7dfb      	ldrb	r3, [r7, #23]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	50000100 	.word	0x50000100
 8001644:	50000300 	.word	0x50000300
 8001648:	50000700 	.word	0x50000700

0800164c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800165e:	d004      	beq.n	800166a <HAL_ADC_PollForConversion+0x1e>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a70      	ldr	r2, [pc, #448]	@ (8001828 <HAL_ADC_PollForConversion+0x1dc>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_ADC_PollForConversion+0x22>
 800166a:	4b70      	ldr	r3, [pc, #448]	@ (800182c <HAL_ADC_PollForConversion+0x1e0>)
 800166c:	e000      	b.n	8001670 <HAL_ADC_PollForConversion+0x24>
 800166e:	4b70      	ldr	r3, [pc, #448]	@ (8001830 <HAL_ADC_PollForConversion+0x1e4>)
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fca7 	bl	8000fc4 <LL_ADC_GetMultimode>
 8001676:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d102      	bne.n	8001686 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001680:	2308      	movs	r3, #8
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	e037      	b.n	80016f6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d002      	beq.n	8001698 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b09      	cmp	r3, #9
 8001696:	d111      	bne.n	80016bc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016aa:	f043 0220 	orr.w	r2, r3, #32
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0b3      	b.n	800181e <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016b6:	2304      	movs	r3, #4
 80016b8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80016ba:	e01c      	b.n	80016f6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016c4:	d004      	beq.n	80016d0 <HAL_ADC_PollForConversion+0x84>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a57      	ldr	r2, [pc, #348]	@ (8001828 <HAL_ADC_PollForConversion+0x1dc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d101      	bne.n	80016d4 <HAL_ADC_PollForConversion+0x88>
 80016d0:	4b56      	ldr	r3, [pc, #344]	@ (800182c <HAL_ADC_PollForConversion+0x1e0>)
 80016d2:	e000      	b.n	80016d6 <HAL_ADC_PollForConversion+0x8a>
 80016d4:	4b56      	ldr	r3, [pc, #344]	@ (8001830 <HAL_ADC_PollForConversion+0x1e4>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fc82 	bl	8000fe0 <LL_ADC_GetMultiDMATransfer>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e6:	f043 0220 	orr.w	r2, r3, #32
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e095      	b.n	800181e <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016f2:	2304      	movs	r3, #4
 80016f4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016f6:	f7ff fad7 	bl	8000ca8 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016fc:	e021      	b.n	8001742 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d01d      	beq.n	8001742 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001706:	f7ff facf 	bl	8000ca8 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d302      	bcc.n	800171c <HAL_ADC_PollForConversion+0xd0>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d112      	bne.n	8001742 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10b      	bne.n	8001742 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172e:	f043 0204 	orr.w	r2, r3, #4
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e06d      	b.n	800181e <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0d6      	beq.n	80016fe <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001754:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fba1 	bl	8000ea8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01c      	beq.n	80017a6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7f5b      	ldrb	r3, [r3, #29]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d118      	bne.n	80017a6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b08      	cmp	r3, #8
 8001780:	d111      	bne.n	80017a6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001786:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001828 <HAL_ADC_PollForConversion+0x1dc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d002      	beq.n	80017b6 <HAL_ADC_PollForConversion+0x16a>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	e001      	b.n	80017ba <HAL_ADC_PollForConversion+0x16e>
 80017b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	4293      	cmp	r3, r2
 80017c0:	d008      	beq.n	80017d4 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b05      	cmp	r3, #5
 80017cc:	d002      	beq.n	80017d4 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b09      	cmp	r3, #9
 80017d2:	d104      	bne.n	80017de <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	61bb      	str	r3, [r7, #24]
 80017dc:	e00d      	b.n	80017fa <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a11      	ldr	r2, [pc, #68]	@ (8001828 <HAL_ADC_PollForConversion+0x1dc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d002      	beq.n	80017ee <HAL_ADC_PollForConversion+0x1a2>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	e001      	b.n	80017f2 <HAL_ADC_PollForConversion+0x1a6>
 80017ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017f2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d104      	bne.n	800180a <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2208      	movs	r2, #8
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	e008      	b.n	800181c <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d103      	bne.n	800181c <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	220c      	movs	r2, #12
 800181a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	50000100 	.word	0x50000100
 800182c:	50000300 	.word	0x50000300
 8001830:	50000700 	.word	0x50000700

08001834 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0b6      	sub	sp, #216	@ 0xd8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800186a:	2b01      	cmp	r3, #1
 800186c:	d102      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x24>
 800186e:	2302      	movs	r3, #2
 8001870:	f000 bc04 	b.w	800207c <HAL_ADC_ConfigChannel+0x82c>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fc44 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	f040 83e8 	bne.w	800205e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	f7ff fb17 	bl	8000ece <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fc32 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 80018aa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fc3e 	bl	8001134 <LL_ADC_INJ_IsConversionOngoing>
 80018b8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 81d9 	bne.w	8001c78 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 81d4 	bne.w	8001c78 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018d8:	d10f      	bne.n	80018fa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff fb1e 	bl	8000f26 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fac5 	bl	8000e82 <LL_ADC_SetSamplingTimeCommonConfig>
 80018f8:	e00e      	b.n	8001918 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	461a      	mov	r2, r3
 8001908:	f7ff fb0d 	bl	8000f26 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fab5 	bl	8000e82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	08db      	lsrs	r3, r3, #3
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d022      	beq.n	8001980 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6919      	ldr	r1, [r3, #16]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800194a:	f7ff fa0f 	bl	8000d6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	6919      	ldr	r1, [r3, #16]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	461a      	mov	r2, r3
 800195c:	f7ff fa5b 	bl	8000e16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800196c:	2b01      	cmp	r3, #1
 800196e:	d102      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x126>
 8001970:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001974:	e000      	b.n	8001978 <HAL_ADC_ConfigChannel+0x128>
 8001976:	2300      	movs	r3, #0
 8001978:	461a      	mov	r2, r3
 800197a:	f7ff fa67 	bl	8000e4c <LL_ADC_SetOffsetSaturation>
 800197e:	e17b      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fa14 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10a      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x15c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fa09 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	0e9b      	lsrs	r3, r3, #26
 80019a6:	f003 021f 	and.w	r2, r3, #31
 80019aa:	e01e      	b.n	80019ea <HAL_ADC_ConfigChannel+0x19a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f9fe 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80019da:	2320      	movs	r3, #32
 80019dc:	e004      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80019de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x1b2>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	0e9b      	lsrs	r3, r3, #26
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	e018      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x1e4>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001a1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001a26:	2320      	movs	r3, #32
 8001a28:	e004      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d106      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f9cd 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9b1 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10a      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x222>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f9a6 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	0e9b      	lsrs	r3, r3, #26
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	e01e      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x260>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2101      	movs	r1, #1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f99b 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001a90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001a98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	e004      	b.n	8001aae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001aa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x278>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	e018      	b.n	8001afa <HAL_ADC_ConfigChannel+0x2aa>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001adc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001aec:	2320      	movs	r3, #32
 8001aee:	e004      	b.n	8001afa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d106      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	2101      	movs	r1, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f96a 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2102      	movs	r1, #2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f94e 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10a      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x2e8>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2102      	movs	r1, #2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff f943 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	0e9b      	lsrs	r3, r3, #26
 8001b32:	f003 021f 	and.w	r2, r3, #31
 8001b36:	e01e      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x326>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f938 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001b5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001b66:	2320      	movs	r3, #32
 8001b68:	e004      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001b6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d105      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x33e>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0e9b      	lsrs	r3, r3, #26
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	e016      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x36c>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001ba0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ba2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e004      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d106      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f909 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f8ed 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10a      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x3aa>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2103      	movs	r1, #3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f8e2 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	e017      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x3da>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2103      	movs	r1, #3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff f8d7 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c14:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001c16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	e003      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d105      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x3f2>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	e011      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x416>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001c50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	e003      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d106      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2103      	movs	r1, #3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f8b4 	bl	8000de0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fa1f 	bl	80010c0 <LL_ADC_IsEnabled>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 813d 	bne.w	8001f04 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f7ff f970 	bl	8000f7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4aa2      	ldr	r2, [pc, #648]	@ (8001f2c <HAL_ADC_ConfigChannel+0x6dc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	f040 812e 	bne.w	8001f04 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x480>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	2b09      	cmp	r3, #9
 8001cc6:	bf94      	ite	ls
 8001cc8:	2301      	movls	r3, #1
 8001cca:	2300      	movhi	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e019      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x4b4>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001cde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ce0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001ce2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	e003      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001cec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2b09      	cmp	r3, #9
 8001cfc:	bf94      	ite	ls
 8001cfe:	2301      	movls	r3, #1
 8001d00:	2300      	movhi	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d079      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x4d4>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	069b      	lsls	r3, r3, #26
 8001d1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d22:	e015      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x500>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d34:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	e003      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	069b      	lsls	r3, r3, #26
 8001d4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d109      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x520>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	3301      	adds	r3, #1
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	e017      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x550>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d80:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	e003      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	ea42 0103 	orr.w	r1, r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x576>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0e9b      	lsrs	r3, r3, #26
 8001db6:	3301      	adds	r3, #1
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	051b      	lsls	r3, r3, #20
 8001dc4:	e018      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x5a8>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e003      	b.n	8001dea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f003 021f 	and.w	r2, r3, #31
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	e07e      	b.n	8001efa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x5c8>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	3301      	adds	r3, #1
 8001e10:	069b      	lsls	r3, r3, #26
 8001e12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e16:	e015      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x5f4>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e28:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e003      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	069b      	lsls	r3, r3, #26
 8001e40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x614>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0e9b      	lsrs	r3, r3, #26
 8001e56:	3301      	adds	r3, #1
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	e017      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x644>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	61fb      	str	r3, [r7, #28]
  return result;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	e003      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2101      	movs	r1, #1
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	ea42 0103 	orr.w	r1, r2, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x670>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0e9b      	lsrs	r3, r3, #26
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b1e      	subs	r3, #30
 8001eb8:	051b      	lsls	r3, r3, #20
 8001eba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ebe:	e01b      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x6a8>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	613b      	str	r3, [r7, #16]
  return result;
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e003      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f003 021f 	and.w	r2, r3, #31
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b1e      	subs	r3, #30
 8001ef2:	051b      	lsls	r3, r3, #20
 8001ef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001efe:	4619      	mov	r1, r3
 8001f00:	f7ff f811 	bl	8000f26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_ADC_ConfigChannel+0x6e0>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80af 	beq.w	8002070 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f1a:	d004      	beq.n	8001f26 <HAL_ADC_ConfigChannel+0x6d6>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <HAL_ADC_ConfigChannel+0x6e4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d10a      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x6ec>
 8001f26:	4b04      	ldr	r3, [pc, #16]	@ (8001f38 <HAL_ADC_ConfigChannel+0x6e8>)
 8001f28:	e009      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x6ee>
 8001f2a:	bf00      	nop
 8001f2c:	407f0000 	.word	0x407f0000
 8001f30:	80080000 	.word	0x80080000
 8001f34:	50000100 	.word	0x50000100
 8001f38:	50000300 	.word	0x50000300
 8001f3c:	4b51      	ldr	r3, [pc, #324]	@ (8002084 <HAL_ADC_ConfigChannel+0x834>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe ff06 	bl	8000d50 <LL_ADC_GetCommonPathInternalCh>
 8001f44:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8002088 <HAL_ADC_ConfigChannel+0x838>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_ADC_ConfigChannel+0x70c>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a4d      	ldr	r2, [pc, #308]	@ (800208c <HAL_ADC_ConfigChannel+0x83c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d134      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d12e      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f70:	d17e      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f7a:	d004      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x736>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a43      	ldr	r2, [pc, #268]	@ (8002090 <HAL_ADC_ConfigChannel+0x840>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x73a>
 8001f86:	4a43      	ldr	r2, [pc, #268]	@ (8002094 <HAL_ADC_ConfigChannel+0x844>)
 8001f88:	e000      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x73c>
 8001f8a:	4a3e      	ldr	r2, [pc, #248]	@ (8002084 <HAL_ADC_ConfigChannel+0x834>)
 8001f8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f7fe fec7 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002098 <HAL_ADC_ConfigChannel+0x848>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	4a3e      	ldr	r2, [pc, #248]	@ (800209c <HAL_ADC_ConfigChannel+0x84c>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fb6:	e002      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc4:	e054      	b.n	8002070 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a35      	ldr	r2, [pc, #212]	@ (80020a0 <HAL_ADC_ConfigChannel+0x850>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d120      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d11a      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fe4:	d144      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fee:	d004      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x7aa>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a26      	ldr	r2, [pc, #152]	@ (8002090 <HAL_ADC_ConfigChannel+0x840>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x7ae>
 8001ffa:	4a26      	ldr	r2, [pc, #152]	@ (8002094 <HAL_ADC_ConfigChannel+0x844>)
 8001ffc:	e000      	b.n	8002000 <HAL_ADC_ConfigChannel+0x7b0>
 8001ffe:	4a21      	ldr	r2, [pc, #132]	@ (8002084 <HAL_ADC_ConfigChannel+0x834>)
 8002000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002004:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002008:	4619      	mov	r1, r3
 800200a:	4610      	mov	r0, r2
 800200c:	f7fe fe8d 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002010:	e02e      	b.n	8002070 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a23      	ldr	r2, [pc, #140]	@ (80020a4 <HAL_ADC_ConfigChannel+0x854>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d129      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800201c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d123      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a18      	ldr	r2, [pc, #96]	@ (8002090 <HAL_ADC_ConfigChannel+0x840>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01e      	beq.n	8002070 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800203a:	d004      	beq.n	8002046 <HAL_ADC_ConfigChannel+0x7f6>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a13      	ldr	r2, [pc, #76]	@ (8002090 <HAL_ADC_ConfigChannel+0x840>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x7fa>
 8002046:	4a13      	ldr	r2, [pc, #76]	@ (8002094 <HAL_ADC_ConfigChannel+0x844>)
 8002048:	e000      	b.n	800204c <HAL_ADC_ConfigChannel+0x7fc>
 800204a:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <HAL_ADC_ConfigChannel+0x834>)
 800204c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f7fe fe67 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
 800205c:	e008      	b.n	8002070 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002062:	f043 0220 	orr.w	r2, r3, #32
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002078:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800207c:	4618      	mov	r0, r3
 800207e:	37d8      	adds	r7, #216	@ 0xd8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	50000700 	.word	0x50000700
 8002088:	c3210000 	.word	0xc3210000
 800208c:	90c00010 	.word	0x90c00010
 8002090:	50000100 	.word	0x50000100
 8002094:	50000300 	.word	0x50000300
 8002098:	20000000 	.word	0x20000000
 800209c:	053e2d63 	.word	0x053e2d63
 80020a0:	c7520000 	.word	0xc7520000
 80020a4:	cb840000 	.word	0xcb840000

080020a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f801 	bl	80010c0 <LL_ADC_IsEnabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d176      	bne.n	80021b2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	4b3c      	ldr	r3, [pc, #240]	@ (80021bc <ADC_Enable+0x114>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00d      	beq.n	80020ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d6:	f043 0210 	orr.w	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e2:	f043 0201 	orr.w	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e062      	b.n	80021b4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe ffd0 	bl	8001098 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002100:	d004      	beq.n	800210c <ADC_Enable+0x64>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2e      	ldr	r2, [pc, #184]	@ (80021c0 <ADC_Enable+0x118>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <ADC_Enable+0x68>
 800210c:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <ADC_Enable+0x11c>)
 800210e:	e000      	b.n	8002112 <ADC_Enable+0x6a>
 8002110:	4b2d      	ldr	r3, [pc, #180]	@ (80021c8 <ADC_Enable+0x120>)
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fe1c 	bl	8000d50 <LL_ADC_GetCommonPathInternalCh>
 8002118:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800211a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800211e:	2b00      	cmp	r3, #0
 8002120:	d013      	beq.n	800214a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002122:	4b2a      	ldr	r3, [pc, #168]	@ (80021cc <ADC_Enable+0x124>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	4a29      	ldr	r2, [pc, #164]	@ (80021d0 <ADC_Enable+0x128>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	099b      	lsrs	r3, r3, #6
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800213c:	e002      	b.n	8002144 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3b01      	subs	r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f9      	bne.n	800213e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800214a:	f7fe fdad 	bl	8000ca8 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002150:	e028      	b.n	80021a4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe ffb2 	bl	80010c0 <LL_ADC_IsEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d104      	bne.n	800216c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe ff96 	bl	8001098 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800216c:	f7fe fd9c 	bl	8000ca8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d914      	bls.n	80021a4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d00d      	beq.n	80021a4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	f043 0210 	orr.w	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e007      	b.n	80021b4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d1cf      	bne.n	8002152 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	8000003f 	.word	0x8000003f
 80021c0:	50000100 	.word	0x50000100
 80021c4:	50000300 	.word	0x50000300
 80021c8:	50000700 	.word	0x50000700
 80021cc:	20000000 	.word	0x20000000
 80021d0:	053e2d63 	.word	0x053e2d63

080021d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f0:	4013      	ands	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002206:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	60d3      	str	r3, [r2, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002220:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <__NVIC_GetPriorityGrouping+0x18>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 0307 	and.w	r3, r3, #7
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4907      	ldr	r1, [pc, #28]	@ (8002270 <__NVIC_EnableIRQ+0x38>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2001      	movs	r0, #1
 800225a:	fa00 f202 	lsl.w	r2, r0, r2
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e100 	.word	0xe000e100

08002274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0a      	blt.n	800229e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	490c      	ldr	r1, [pc, #48]	@ (80022c0 <__NVIC_SetPriority+0x4c>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	440b      	add	r3, r1
 8002298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800229c:	e00a      	b.n	80022b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4908      	ldr	r1, [pc, #32]	@ (80022c4 <__NVIC_SetPriority+0x50>)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	3b04      	subs	r3, #4
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	761a      	strb	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	@ 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f1c3 0307 	rsb	r3, r3, #7
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	bf28      	it	cs
 80022e6:	2304      	movcs	r3, #4
 80022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d902      	bls.n	80022f8 <NVIC_EncodePriority+0x30>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b03      	subs	r3, #3
 80022f6:	e000      	b.n	80022fa <NVIC_EncodePriority+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002310:	f04f 31ff 	mov.w	r1, #4294967295
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43d9      	mvns	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	4313      	orrs	r3, r2
         );
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	@ 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ff4c 	bl	80021d4 <__NVIC_SetPriorityGrouping>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002352:	f7ff ff63 	bl	800221c <__NVIC_GetPriorityGrouping>
 8002356:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	6978      	ldr	r0, [r7, #20]
 800235e:	f7ff ffb3 	bl	80022c8 <NVIC_EncodePriority>
 8002362:	4602      	mov	r2, r0
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff82 	bl	8002274 <__NVIC_SetPriority>
}
 8002370:	bf00      	nop
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff56 	bl	8002238 <__NVIC_EnableIRQ>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e147      	b.n	8002636 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fa76 	bl	80008ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0210 	bic.w	r2, r2, #16
 80023ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d0:	f7fe fc6a 	bl	8000ca8 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023d6:	e012      	b.n	80023fe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80023d8:	f7fe fc66 	bl	8000ca8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b0a      	cmp	r3, #10
 80023e4:	d90b      	bls.n	80023fe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2203      	movs	r2, #3
 80023f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e11b      	b.n	8002636 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b08      	cmp	r3, #8
 800240a:	d0e5      	beq.n	80023d8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800241c:	f7fe fc44 	bl	8000ca8 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002422:	e012      	b.n	800244a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002424:	f7fe fc40 	bl	8000ca8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b0a      	cmp	r3, #10
 8002430:	d90b      	bls.n	800244a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2203      	movs	r2, #3
 8002442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0f5      	b.n	8002636 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0e5      	beq.n	8002424 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0202 	orr.w	r2, r2, #2
 8002466:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a74      	ldr	r2, [pc, #464]	@ (8002640 <HAL_FDCAN_Init+0x2ac>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d103      	bne.n	800247a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002472:	4a74      	ldr	r2, [pc, #464]	@ (8002644 <HAL_FDCAN_Init+0x2b0>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7c1b      	ldrb	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d108      	bne.n	8002494 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002490:	619a      	str	r2, [r3, #24]
 8002492:	e007      	b.n	80024a4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7c5b      	ldrb	r3, [r3, #17]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d108      	bne.n	80024be <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024ba:	619a      	str	r2, [r3, #24]
 80024bc:	e007      	b.n	80024ce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7c9b      	ldrb	r3, [r3, #18]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d108      	bne.n	80024e8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024e4:	619a      	str	r2, [r3, #24]
 80024e6:	e007      	b.n	80024f8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024f6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800251c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0210 	bic.w	r2, r2, #16
 800252c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d108      	bne.n	8002548 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699a      	ldr	r2, [r3, #24]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0204 	orr.w	r2, r2, #4
 8002544:	619a      	str	r2, [r3, #24]
 8002546:	e02c      	b.n	80025a2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d028      	beq.n	80025a2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d01c      	beq.n	8002592 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002566:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0210 	orr.w	r2, r2, #16
 8002576:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d110      	bne.n	80025a2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0220 	orr.w	r2, r2, #32
 800258e:	619a      	str	r2, [r3, #24]
 8002590:	e007      	b.n	80025a2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699a      	ldr	r2, [r3, #24]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0220 	orr.w	r2, r2, #32
 80025a0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025b2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80025ba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80025ca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025cc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025d6:	d115      	bne.n	8002604 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025dc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e2:	3b01      	subs	r3, #1
 80025e4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025e6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ec:	3b01      	subs	r3, #1
 80025ee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80025f0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	3b01      	subs	r3, #1
 80025fa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002600:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002602:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f814 	bl	8002648 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40006400 	.word	0x40006400
 8002644:	40006500 	.word	0x40006500

08002648 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002650:	4b2c      	ldr	r3, [pc, #176]	@ (8002704 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002652:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2b      	ldr	r2, [pc, #172]	@ (8002708 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d103      	bne.n	8002666 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002664:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002674:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267c:	041a      	lsls	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800269a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a2:	061a      	lsls	r2, r3, #24
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e005      	b.n	80026e8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3304      	adds	r3, #4
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d3f3      	bcc.n	80026dc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	4000a400 	.word	0x4000a400
 8002708:	40006800 	.word	0x40006800

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800271a:	e15a      	b.n	80029d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 814c 	beq.w	80029cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d005      	beq.n	800274c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002748:	2b02      	cmp	r3, #2
 800274a:	d130      	bne.n	80027ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002782:	2201      	movs	r2, #1
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 0201 	and.w	r2, r3, #1
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d017      	beq.n	80027ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d123      	bne.n	800283e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	6939      	ldr	r1, [r7, #16]
 800283a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0203 	and.w	r2, r3, #3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80a6 	beq.w	80029cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002880:	4b5b      	ldr	r3, [pc, #364]	@ (80029f0 <HAL_GPIO_Init+0x2e4>)
 8002882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002884:	4a5a      	ldr	r2, [pc, #360]	@ (80029f0 <HAL_GPIO_Init+0x2e4>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6613      	str	r3, [r2, #96]	@ 0x60
 800288c:	4b58      	ldr	r3, [pc, #352]	@ (80029f0 <HAL_GPIO_Init+0x2e4>)
 800288e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002898:	4a56      	ldr	r2, [pc, #344]	@ (80029f4 <HAL_GPIO_Init+0x2e8>)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	220f      	movs	r2, #15
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028c2:	d01f      	beq.n	8002904 <HAL_GPIO_Init+0x1f8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a4c      	ldr	r2, [pc, #304]	@ (80029f8 <HAL_GPIO_Init+0x2ec>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d019      	beq.n	8002900 <HAL_GPIO_Init+0x1f4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a4b      	ldr	r2, [pc, #300]	@ (80029fc <HAL_GPIO_Init+0x2f0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d013      	beq.n	80028fc <HAL_GPIO_Init+0x1f0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002a00 <HAL_GPIO_Init+0x2f4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00d      	beq.n	80028f8 <HAL_GPIO_Init+0x1ec>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a49      	ldr	r2, [pc, #292]	@ (8002a04 <HAL_GPIO_Init+0x2f8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d007      	beq.n	80028f4 <HAL_GPIO_Init+0x1e8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a48      	ldr	r2, [pc, #288]	@ (8002a08 <HAL_GPIO_Init+0x2fc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d101      	bne.n	80028f0 <HAL_GPIO_Init+0x1e4>
 80028ec:	2305      	movs	r3, #5
 80028ee:	e00a      	b.n	8002906 <HAL_GPIO_Init+0x1fa>
 80028f0:	2306      	movs	r3, #6
 80028f2:	e008      	b.n	8002906 <HAL_GPIO_Init+0x1fa>
 80028f4:	2304      	movs	r3, #4
 80028f6:	e006      	b.n	8002906 <HAL_GPIO_Init+0x1fa>
 80028f8:	2303      	movs	r3, #3
 80028fa:	e004      	b.n	8002906 <HAL_GPIO_Init+0x1fa>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e002      	b.n	8002906 <HAL_GPIO_Init+0x1fa>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_GPIO_Init+0x1fa>
 8002904:	2300      	movs	r3, #0
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	f002 0203 	and.w	r2, r2, #3
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	4093      	lsls	r3, r2
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002916:	4937      	ldr	r1, [pc, #220]	@ (80029f4 <HAL_GPIO_Init+0x2e8>)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3302      	adds	r3, #2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002924:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <HAL_GPIO_Init+0x300>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	43db      	mvns	r3, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002948:	4a30      	ldr	r2, [pc, #192]	@ (8002a0c <HAL_GPIO_Init+0x300>)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800294e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a0c <HAL_GPIO_Init+0x300>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	43db      	mvns	r3, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002972:	4a26      	ldr	r2, [pc, #152]	@ (8002a0c <HAL_GPIO_Init+0x300>)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002978:	4b24      	ldr	r3, [pc, #144]	@ (8002a0c <HAL_GPIO_Init+0x300>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800299c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <HAL_GPIO_Init+0x300>)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029a2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <HAL_GPIO_Init+0x300>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029c6:	4a11      	ldr	r2, [pc, #68]	@ (8002a0c <HAL_GPIO_Init+0x300>)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3301      	adds	r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f47f ae9d 	bne.w	800271c <HAL_GPIO_Init+0x10>
  }
}
 80029e2:	bf00      	nop
 80029e4:	bf00      	nop
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010000 	.word	0x40010000
 80029f8:	48000400 	.word	0x48000400
 80029fc:	48000800 	.word	0x48000800
 8002a00:	48000c00 	.word	0x48000c00
 8002a04:	48001000 	.word	0x48001000
 8002a08:	48001400 	.word	0x48001400
 8002a0c:	40010400 	.word	0x40010400

08002a10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
 8002a2c:	e001      	b.n	8002a32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a86:	4a05      	ldr	r2, [pc, #20]	@ (8002a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fc3c 	bl	800030c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40010400 	.word	0x40010400

08002aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e08d      	b.n	8002bce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fd ff4a 	bl	8000960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2224      	movs	r2, #36	@ 0x24
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002af0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	e006      	b.n	8002b28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d108      	bne.n	8002b42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	e007      	b.n	8002b52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69d9      	ldr	r1, [r3, #28]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d138      	bne.n	8002c5e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e032      	b.n	8002c60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2224      	movs	r2, #36	@ 0x24
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c28:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d139      	bne.n	8002cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e033      	b.n	8002cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	@ 0x24
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002cbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e000      	b.n	8002cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
  }
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0c0      	b.n	8002e98 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f006 ff6c 	bl	8009c08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2203      	movs	r2, #3
 8002d34:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 f86e 	bl	8005e1e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	e03e      	b.n	8002dc6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	3311      	adds	r3, #17
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	3310      	adds	r3, #16
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3313      	adds	r3, #19
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	3320      	adds	r3, #32
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	3324      	adds	r3, #36	@ 0x24
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	791b      	ldrb	r3, [r3, #4]
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3bb      	bcc.n	8002d48 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e044      	b.n	8002e60 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	791b      	ldrb	r3, [r3, #4]
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d3b5      	bcc.n	8002dd6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3304      	adds	r3, #4
 8002e72:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e76:	f002 ffed 	bl	8005e54 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7a9b      	ldrb	r3, [r3, #10]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d102      	bne.n	8002e96 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f001 fc0e 	bl	80046b2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_PCD_Start+0x16>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e012      	b.n	8002edc <HAL_PCD_Start+0x3c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f002 ff94 	bl	8005df0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f004 fd71 	bl	80079b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f004 fd76 	bl	80079e2 <USB_ReadInterrupts>
 8002ef6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fb06 	bl	8003514 <PCD_EP_ISR_Handler>

    return;
 8002f08:	e110      	b.n	800312c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f26:	b292      	uxth	r2, r2
 8002f28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f006 fefc 	bl	8009d2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f32:	2100      	movs	r1, #0
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f8fc 	bl	8003132 <HAL_PCD_SetAddress>

    return;
 8002f3a:	e0f7      	b.n	800312c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00c      	beq.n	8002f60 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f58:	b292      	uxth	r2, r2
 8002f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f5e:	e0e5      	b.n	800312c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f7c:	b292      	uxth	r2, r2
 8002f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f82:	e0d3      	b.n	800312c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d034      	beq.n	8002ff8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0204 	bic.w	r2, r2, #4
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0208 	bic.w	r2, r2, #8
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f007 f89c 	bl	800a110 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f006 fedf 	bl	8009d9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ff6:	e099      	b.n	800312c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d027      	beq.n	8003052 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0208 	orr.w	r2, r2, #8
 8003014:	b292      	uxth	r2, r2
 8003016:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003022:	b29a      	uxth	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800302c:	b292      	uxth	r2, r2
 800302e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800303a:	b29a      	uxth	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0204 	orr.w	r2, r2, #4
 8003044:	b292      	uxth	r2, r2
 8003046:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f006 fe8c 	bl	8009d68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003050:	e06c      	b.n	800312c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003058:	2b00      	cmp	r3, #0
 800305a:	d040      	beq.n	80030de <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003064:	b29a      	uxth	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800306e:	b292      	uxth	r2, r2
 8003070:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d12b      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0204 	orr.w	r2, r2, #4
 8003090:	b292      	uxth	r2, r2
 8003092:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0208 	orr.w	r2, r2, #8
 80030a8:	b292      	uxth	r2, r2
 80030aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80030be:	b29b      	uxth	r3, r3
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80030cc:	2101      	movs	r1, #1
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f007 f81e 	bl	800a110 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80030d4:	e02a      	b.n	800312c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f006 fe46 	bl	8009d68 <HAL_PCD_SuspendCallback>
    return;
 80030dc:	e026      	b.n	800312c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00f      	beq.n	8003108 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030fa:	b292      	uxth	r2, r2
 80030fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f006 fe04 	bl	8009d0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003106:	e011      	b.n	800312c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800311a:	b29a      	uxth	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003124:	b292      	uxth	r2, r2
 8003126:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800312a:	bf00      	nop
  }
}
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_PCD_SetAddress+0x1a>
 8003148:	2302      	movs	r3, #2
 800314a:	e012      	b.n	8003172 <HAL_PCD_SetAddress+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f004 fc12 	bl	800798c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	4608      	mov	r0, r1
 8003184:	4611      	mov	r1, r2
 8003186:	461a      	mov	r2, r3
 8003188:	4603      	mov	r3, r0
 800318a:	70fb      	strb	r3, [r7, #3]
 800318c:	460b      	mov	r3, r1
 800318e:	803b      	strh	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800319c:	2b00      	cmp	r3, #0
 800319e:	da0e      	bge.n	80031be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 0207 	and.w	r2, r3, #7
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	3310      	adds	r3, #16
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	705a      	strb	r2, [r3, #1]
 80031bc:	e00e      	b.n	80031dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 0207 	and.w	r2, r3, #7
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80031e8:	883b      	ldrh	r3, [r7, #0]
 80031ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	78ba      	ldrb	r2, [r7, #2]
 80031f6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031f8:	78bb      	ldrb	r3, [r7, #2]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d102      	bne.n	8003204 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_PCD_EP_Open+0x98>
 800320e:	2302      	movs	r3, #2
 8003210:	e00e      	b.n	8003230 <HAL_PCD_EP_Open+0xb6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	4618      	mov	r0, r3
 8003222:	f002 fe35 	bl	8005e90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800322e:	7afb      	ldrb	r3, [r7, #11]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003248:	2b00      	cmp	r3, #0
 800324a:	da0e      	bge.n	800326a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 0207 	and.w	r2, r3, #7
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	3310      	adds	r3, #16
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	705a      	strb	r2, [r3, #1]
 8003268:	e00e      	b.n	8003288 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 0207 	and.w	r2, r3, #7
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_PCD_EP_Close+0x6a>
 800329e:	2302      	movs	r3, #2
 80032a0:	e00e      	b.n	80032c0 <HAL_PCD_EP_Close+0x88>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 fad5 	bl	8006860 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	460b      	mov	r3, r1
 80032d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d8:	7afb      	ldrb	r3, [r7, #11]
 80032da:	f003 0207 	and.w	r2, r3, #7
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4413      	add	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2200      	movs	r2, #0
 8003306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	b2da      	uxtb	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6979      	ldr	r1, [r7, #20]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 fc8d 	bl	8006c3a <USB_EPStartXfer>

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	f003 0207 	and.w	r2, r3, #7
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800334c:	681b      	ldr	r3, [r3, #0]
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	460b      	mov	r3, r1
 8003368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	f003 0207 	and.w	r2, r3, #7
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	3310      	adds	r3, #16
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2200      	movs	r2, #0
 800339e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2201      	movs	r2, #1
 80033a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a6:	7afb      	ldrb	r3, [r7, #11]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6979      	ldr	r1, [r7, #20]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f003 fc3e 	bl	8006c3a <USB_EPStartXfer>

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	7912      	ldrb	r2, [r2, #4]
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e03e      	b.n	8003464 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	da0e      	bge.n	800340c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	f003 0207 	and.w	r2, r3, #7
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	3310      	adds	r3, #16
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	705a      	strb	r2, [r3, #1]
 800340a:	e00c      	b.n	8003426 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_PCD_EP_SetStall+0x7e>
 8003442:	2302      	movs	r3, #2
 8003444:	e00e      	b.n	8003464 <HAL_PCD_EP_SetStall+0x9c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	4618      	mov	r0, r3
 8003456:	f004 f99f 	bl	8007798 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	7912      	ldrb	r2, [r2, #4]
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e040      	b.n	800350c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800348a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348e:	2b00      	cmp	r3, #0
 8003490:	da0e      	bge.n	80034b0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	f003 0207 	and.w	r2, r3, #7
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	3310      	adds	r3, #16
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	705a      	strb	r2, [r3, #1]
 80034ae:	e00e      	b.n	80034ce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	f003 0207 	and.w	r2, r3, #7
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_PCD_EP_ClrStall+0x82>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e00e      	b.n	800350c <HAL_PCD_EP_ClrStall+0xa0>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f004 f99c 	bl	800783a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b092      	sub	sp, #72	@ 0x48
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800351c:	e333      	b.n	8003b86 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003526:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003528:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003534:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003538:	2b00      	cmp	r3, #0
 800353a:	f040 8108 	bne.w	800374e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800353e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d14c      	bne.n	80035e2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003558:	813b      	strh	r3, [r7, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	893b      	ldrh	r3, [r7, #8]
 8003560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003568:	b29b      	uxth	r3, r3
 800356a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3310      	adds	r3, #16
 8003570:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800357a:	b29b      	uxth	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	4413      	add	r3, r2
 800358c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003598:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800359a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	441a      	add	r2, r3
 80035a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80035a8:	2100      	movs	r1, #0
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f006 fb95 	bl	8009cda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7b1b      	ldrb	r3, [r3, #12]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 82e5 	beq.w	8003b86 <PCD_EP_ISR_Handler+0x672>
 80035bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 82e0 	bne.w	8003b86 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7b1b      	ldrb	r3, [r3, #12]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	731a      	strb	r2, [r3, #12]
 80035e0:	e2d1      	b.n	8003b86 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035e8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80035f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80035f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d032      	beq.n	8003662 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003604:	b29b      	uxth	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	4413      	add	r3, r2
 8003616:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003622:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800362e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003630:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003634:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003636:	b29b      	uxth	r3, r3
 8003638:	f004 fa25 	bl	8007a86 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29a      	uxth	r2, r3
 8003644:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003648:	4013      	ands	r3, r2
 800364a:	817b      	strh	r3, [r7, #10]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	897a      	ldrh	r2, [r7, #10]
 8003652:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003656:	b292      	uxth	r2, r2
 8003658:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f006 fb10 	bl	8009c80 <HAL_PCD_SetupStageCallback>
 8003660:	e291      	b.n	8003b86 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003662:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003666:	2b00      	cmp	r3, #0
 8003668:	f280 828d 	bge.w	8003b86 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29a      	uxth	r2, r3
 8003674:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003678:	4013      	ands	r3, r2
 800367a:	81fb      	strh	r3, [r7, #14]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	89fa      	ldrh	r2, [r7, #14]
 8003682:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003686:	b292      	uxth	r2, r2
 8003688:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003692:	b29b      	uxth	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	4413      	add	r3, r2
 80036a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80036b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d019      	beq.n	80036ee <PCD_EP_ISR_Handler+0x1da>
 80036ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d015      	beq.n	80036ee <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c8:	6959      	ldr	r1, [r3, #20]
 80036ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036cc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80036ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	f004 f9d7 	bl	8007a86 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80036d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	441a      	add	r2, r3
 80036e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80036e6:	2100      	movs	r1, #0
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f006 fadb 	bl	8009ca4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80036f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f040 8242 	bne.w	8003b86 <PCD_EP_ISR_Handler+0x672>
 8003702:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003704:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003708:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800370c:	f000 823b 	beq.w	8003b86 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800371c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003720:	81bb      	strh	r3, [r7, #12]
 8003722:	89bb      	ldrh	r3, [r7, #12]
 8003724:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003728:	81bb      	strh	r3, [r7, #12]
 800372a:	89bb      	ldrh	r3, [r7, #12]
 800372c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003730:	81bb      	strh	r3, [r7, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	89bb      	ldrh	r3, [r7, #12]
 8003738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800373c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003748:	b29b      	uxth	r3, r3
 800374a:	8013      	strh	r3, [r2, #0]
 800374c:	e21b      	b.n	8003b86 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003760:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003764:	2b00      	cmp	r3, #0
 8003766:	f280 80f1 	bge.w	800394c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29a      	uxth	r2, r3
 800377c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003780:	4013      	ands	r3, r2
 8003782:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003794:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003798:	b292      	uxth	r2, r2
 800379a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800379c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b4:	7b1b      	ldrb	r3, [r3, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d123      	bne.n	8003802 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	4413      	add	r3, r2
 80037d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80037e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 808b 	beq.w	8003902 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f2:	6959      	ldr	r1, [r3, #20]
 80037f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f6:	88da      	ldrh	r2, [r3, #6]
 80037f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037fc:	f004 f943 	bl	8007a86 <USB_ReadPMA>
 8003800:	e07f      	b.n	8003902 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003804:	78db      	ldrb	r3, [r3, #3]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d109      	bne.n	800381e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800380a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800380c:	461a      	mov	r2, r3
 800380e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f9c6 	bl	8003ba2 <HAL_PCD_EP_DB_Receive>
 8003816:	4603      	mov	r3, r0
 8003818:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800381c:	e071      	b.n	8003902 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003838:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	441a      	add	r2, r3
 8003848:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800384a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800384e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003856:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800385a:	b29b      	uxth	r3, r3
 800385c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d022      	beq.n	80038be <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003880:	b29b      	uxth	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	4413      	add	r3, r2
 8003892:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800389c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80038a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d02c      	beq.n	8003902 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ae:	6959      	ldr	r1, [r3, #20]
 80038b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b2:	891a      	ldrh	r2, [r3, #8]
 80038b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80038b8:	f004 f8e5 	bl	8007a86 <USB_ReadPMA>
 80038bc:	e021      	b.n	8003902 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	4413      	add	r3, r2
 80038d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80038e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f4:	6959      	ldr	r1, [r3, #20]
 80038f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f8:	895a      	ldrh	r2, [r3, #10]
 80038fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80038fe:	f004 f8c2 	bl	8007a86 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003904:	69da      	ldr	r2, [r3, #28]
 8003906:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800390a:	441a      	add	r2, r3
 800390c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003918:	441a      	add	r2, r3
 800391a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800391c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800391e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <PCD_EP_ISR_Handler+0x41e>
 8003926:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800392a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	429a      	cmp	r2, r3
 8003930:	d206      	bcs.n	8003940 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f006 f9b3 	bl	8009ca4 <HAL_PCD_DataOutStageCallback>
 800393e:	e005      	b.n	800394c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003946:	4618      	mov	r0, r3
 8003948:	f003 f977 	bl	8006c3a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800394c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800394e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8117 	beq.w	8003b86 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003958:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	3310      	adds	r3, #16
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003986:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	441a      	add	r2, r3
 8003996:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800399c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80039a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a6:	78db      	ldrb	r3, [r3, #3]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	f040 80a1 	bne.w	8003af0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80039ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80039b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b6:	7b1b      	ldrb	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8092 	beq.w	8003ae2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d046      	beq.n	8003a56 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ca:	785b      	ldrb	r3, [r3, #1]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d126      	bne.n	8003a1e <PCD_EP_ISR_Handler+0x50a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039de:	b29b      	uxth	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	4413      	add	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	00da      	lsls	r2, r3, #3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4413      	add	r3, r2
 80039f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	e061      	b.n	8003ae2 <PCD_EP_ISR_Handler+0x5ce>
 8003a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a20:	785b      	ldrb	r3, [r3, #1]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d15d      	bne.n	8003ae2 <PCD_EP_ISR_Handler+0x5ce>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	00da      	lsls	r2, r3, #3
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4413      	add	r3, r2
 8003a48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2200      	movs	r2, #0
 8003a52:	801a      	strh	r2, [r3, #0]
 8003a54:	e045      	b.n	8003ae2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d126      	bne.n	8003ab2 <PCD_EP_ISR_Handler+0x59e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	4413      	add	r3, r2
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	00da      	lsls	r2, r3, #3
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	4413      	add	r3, r2
 8003a86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	e017      	b.n	8003ae2 <PCD_EP_ISR_Handler+0x5ce>
 8003ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab4:	785b      	ldrb	r3, [r3, #1]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d113      	bne.n	8003ae2 <PCD_EP_ISR_Handler+0x5ce>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac8:	4413      	add	r3, r2
 8003aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	00da      	lsls	r2, r3, #3
 8003ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	2200      	movs	r2, #0
 8003ae0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f006 f8f6 	bl	8009cda <HAL_PCD_DataInStageCallback>
 8003aee:	e04a      	b.n	8003b86 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003af0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d13f      	bne.n	8003b7a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d906      	bls.n	8003b38 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003b30:	1ad2      	subs	r2, r2, r3
 8003b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b34:	619a      	str	r2, [r3, #24]
 8003b36:	e002      	b.n	8003b3e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f006 f8c4 	bl	8009cda <HAL_PCD_DataInStageCallback>
 8003b52:	e018      	b.n	8003b86 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003b5a:	441a      	add	r2, r3
 8003b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b5e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003b66:	441a      	add	r2, r3
 8003b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b72:	4618      	mov	r0, r3
 8003b74:	f003 f861 	bl	8006c3a <USB_EPStartXfer>
 8003b78:	e005      	b.n	8003b86 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f917 	bl	8003db4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	b21b      	sxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f6ff acc3 	blt.w	800351e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3748      	adds	r7, #72	@ 0x48
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b088      	sub	sp, #32
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	4613      	mov	r3, r2
 8003bae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d07c      	beq.n	8003cb4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	8b7b      	ldrh	r3, [r7, #26]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d306      	bcc.n	8003bf8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	8b7b      	ldrh	r3, [r7, #26]
 8003bf0:	1ad2      	subs	r2, r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	619a      	str	r2, [r3, #24]
 8003bf6:	e002      	b.n	8003bfe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d123      	bne.n	8003c4e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c20:	833b      	strh	r3, [r7, #24]
 8003c22:	8b3b      	ldrh	r3, [r7, #24]
 8003c24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c28:	833b      	strh	r3, [r7, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	8b3b      	ldrh	r3, [r7, #24]
 8003c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01f      	beq.n	8003c98 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c72:	82fb      	strh	r3, [r7, #22]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	441a      	add	r2, r3
 8003c82:	8afb      	ldrh	r3, [r7, #22]
 8003c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8085 	beq.w	8003daa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6959      	ldr	r1, [r3, #20]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	891a      	ldrh	r2, [r3, #8]
 8003cac:	8b7b      	ldrh	r3, [r7, #26]
 8003cae:	f003 feea 	bl	8007a86 <USB_ReadPMA>
 8003cb2:	e07a      	b.n	8003daa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	8b7b      	ldrh	r3, [r7, #26]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d306      	bcc.n	8003cf2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	8b7b      	ldrh	r3, [r7, #26]
 8003cea:	1ad2      	subs	r2, r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	619a      	str	r2, [r3, #24]
 8003cf0:	e002      	b.n	8003cf8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d123      	bne.n	8003d48 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	83fb      	strh	r3, [r7, #30]
 8003d1c:	8bfb      	ldrh	r3, [r7, #30]
 8003d1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d22:	83fb      	strh	r3, [r7, #30]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	441a      	add	r2, r3
 8003d32:	8bfb      	ldrh	r3, [r7, #30]
 8003d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d11f      	bne.n	8003d92 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6c:	83bb      	strh	r3, [r7, #28]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	441a      	add	r2, r3
 8003d7c:	8bbb      	ldrh	r3, [r7, #28]
 8003d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d92:	8b7b      	ldrh	r3, [r7, #26]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6959      	ldr	r1, [r3, #20]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	895a      	ldrh	r2, [r3, #10]
 8003da4:	8b7b      	ldrh	r3, [r7, #26]
 8003da6:	f003 fe6e 	bl	8007a86 <USB_ReadPMA>
    }
  }

  return count;
 8003daa:	8b7b      	ldrh	r3, [r7, #26]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3720      	adds	r7, #32
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b0a6      	sub	sp, #152	@ 0x98
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 81f7 	beq.w	80041bc <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	4413      	add	r3, r2
 8003de8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d907      	bls.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	619a      	str	r2, [r3, #24]
 8003e10:	e002      	b.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 80e1 	bne.w	8003fe4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	785b      	ldrb	r3, [r3, #1]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d126      	bne.n	8003e78 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3e:	4413      	add	r3, r2
 8003e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	00da      	lsls	r2, r3, #3
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	e01a      	b.n	8003eae <HAL_PCD_EP_DB_Transmit+0xfa>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d116      	bne.n	8003eae <HAL_PCD_EP_DB_Transmit+0xfa>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e94:	4413      	add	r3, r2
 8003e96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	00da      	lsls	r2, r3, #3
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eaa:	2200      	movs	r2, #0
 8003eac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d126      	bne.n	8003f0a <HAL_PCD_EP_DB_Transmit+0x156>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	623b      	str	r3, [r7, #32]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	623b      	str	r3, [r7, #32]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	00da      	lsls	r2, r3, #3
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	4413      	add	r3, r2
 8003ede:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	e017      	b.n	8003f3a <HAL_PCD_EP_DB_Transmit+0x186>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	785b      	ldrb	r3, [r3, #1]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d113      	bne.n	8003f3a <HAL_PCD_EP_DB_Transmit+0x186>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f20:	4413      	add	r3, r2
 8003f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	00da      	lsls	r2, r3, #3
 8003f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	2200      	movs	r2, #0
 8003f38:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	78db      	ldrb	r3, [r3, #3]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d123      	bne.n	8003f8a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f5c:	837b      	strh	r3, [r7, #26]
 8003f5e:	8b7b      	ldrh	r3, [r7, #26]
 8003f60:	f083 0320 	eor.w	r3, r3, #32
 8003f64:	837b      	strh	r3, [r7, #26]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	8b7b      	ldrh	r3, [r7, #26]
 8003f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f005 fea2 	bl	8009cda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01f      	beq.n	8003fe0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	833b      	strh	r3, [r7, #24]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	8b3b      	ldrh	r3, [r7, #24]
 8003fcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e31f      	b.n	8004624 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d021      	beq.n	8004032 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004008:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800401e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004026:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800402a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800402e:	b29b      	uxth	r3, r3
 8004030:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004038:	2b01      	cmp	r3, #1
 800403a:	f040 82ca 	bne.w	80045d2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004046:	441a      	add	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004054:	441a      	add	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6a1a      	ldr	r2, [r3, #32]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d309      	bcc.n	800407a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004072:	1ad2      	subs	r2, r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	621a      	str	r2, [r3, #32]
 8004078:	e015      	b.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d107      	bne.n	8004092 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004082:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004086:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004090:	e009      	b.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	785b      	ldrb	r3, [r3, #1]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d15f      	bne.n	800416e <HAL_PCD_EP_DB_Transmit+0x3ba>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040bc:	b29b      	uxth	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c2:	4413      	add	r3, r2
 80040c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	00da      	lsls	r2, r3, #3
 80040cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ce:	4413      	add	r3, r2
 80040d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e4:	801a      	strh	r2, [r3, #0]
 80040e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_PCD_EP_DB_Transmit+0x34e>
 80040ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	e051      	b.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004104:	2b3e      	cmp	r3, #62	@ 0x3e
 8004106:	d816      	bhi.n	8004136 <HAL_PCD_EP_DB_Transmit+0x382>
 8004108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	653b      	str	r3, [r7, #80]	@ 0x50
 800410e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_PCD_EP_DB_Transmit+0x36a>
 8004118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800411a:	3301      	adds	r3, #1
 800411c:	653b      	str	r3, [r7, #80]	@ 0x50
 800411e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29a      	uxth	r2, r3
 8004124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	029b      	lsls	r3, r3, #10
 800412a:	b29b      	uxth	r3, r3
 800412c:	4313      	orrs	r3, r2
 800412e:	b29a      	uxth	r2, r3
 8004130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004132:	801a      	strh	r2, [r3, #0]
 8004134:	e037      	b.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	653b      	str	r3, [r7, #80]	@ 0x50
 800413c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	2b00      	cmp	r3, #0
 8004144:	d102      	bne.n	800414c <HAL_PCD_EP_DB_Transmit+0x398>
 8004146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004148:	3b01      	subs	r3, #1
 800414a:	653b      	str	r3, [r7, #80]	@ 0x50
 800414c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b29a      	uxth	r2, r3
 8004152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004154:	b29b      	uxth	r3, r3
 8004156:	029b      	lsls	r3, r3, #10
 8004158:	b29b      	uxth	r3, r3
 800415a:	4313      	orrs	r3, r2
 800415c:	b29b      	uxth	r3, r3
 800415e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004166:	b29a      	uxth	r2, r3
 8004168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800416a:	801a      	strh	r2, [r3, #0]
 800416c:	e01b      	b.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d117      	bne.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004184:	b29b      	uxth	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800418a:	4413      	add	r3, r2
 800418c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	00da      	lsls	r2, r3, #3
 8004194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004196:	4413      	add	r3, r2
 8004198:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800419c:	647b      	str	r3, [r7, #68]	@ 0x44
 800419e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	6959      	ldr	r1, [r3, #20]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	891a      	ldrh	r2, [r3, #8]
 80041b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f003 fc24 	bl	8007a02 <USB_WritePMA>
 80041ba:	e20a      	b.n	80045d2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	4413      	add	r3, r2
 80041d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041e0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d307      	bcc.n	8004200 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80041f8:	1ad2      	subs	r2, r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	619a      	str	r2, [r3, #24]
 80041fe:	e002      	b.n	8004206 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2200      	movs	r2, #0
 8004204:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 80f6 	bne.w	80043fc <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	785b      	ldrb	r3, [r3, #1]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d126      	bne.n	8004266 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	677b      	str	r3, [r7, #116]	@ 0x74
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004226:	b29b      	uxth	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800422c:	4413      	add	r3, r2
 800422e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	00da      	lsls	r2, r3, #3
 8004236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004238:	4413      	add	r3, r2
 800423a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800423e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004240:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800424a:	b29a      	uxth	r2, r3
 800424c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800425a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425e:	b29a      	uxth	r2, r3
 8004260:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004262:	801a      	strh	r2, [r3, #0]
 8004264:	e01a      	b.n	800429c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	785b      	ldrb	r3, [r3, #1]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d116      	bne.n	800429c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800427c:	b29b      	uxth	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004282:	4413      	add	r3, r2
 8004284:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	00da      	lsls	r2, r3, #3
 800428c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800428e:	4413      	add	r3, r2
 8004290:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004294:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004296:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004298:	2200      	movs	r2, #0
 800429a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	785b      	ldrb	r3, [r3, #1]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d12f      	bne.n	800430c <HAL_PCD_EP_DB_Transmit+0x558>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042bc:	b29b      	uxth	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042c4:	4413      	add	r3, r2
 80042c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	00da      	lsls	r2, r3, #3
 80042d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d4:	4413      	add	r3, r2
 80042d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042f0:	801a      	strh	r2, [r3, #0]
 80042f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004302:	b29a      	uxth	r2, r3
 8004304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004308:	801a      	strh	r2, [r3, #0]
 800430a:	e01c      	b.n	8004346 <HAL_PCD_EP_DB_Transmit+0x592>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	785b      	ldrb	r3, [r3, #1]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d118      	bne.n	8004346 <HAL_PCD_EP_DB_Transmit+0x592>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800431c:	b29b      	uxth	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004324:	4413      	add	r3, r2
 8004326:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	00da      	lsls	r2, r3, #3
 8004330:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004334:	4413      	add	r3, r2
 8004336:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800433a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800433e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004342:	2200      	movs	r2, #0
 8004344:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	78db      	ldrb	r3, [r3, #3]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d127      	bne.n	800439e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004368:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800436c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004370:	f083 0320 	eor.w	r3, r3, #32
 8004374:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800438a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800438e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800439a:	b29b      	uxth	r3, r3
 800439c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	4619      	mov	r1, r3
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f005 fc98 	bl	8009cda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d121      	bne.n	80043f8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ce:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80043e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e113      	b.n	8004624 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d121      	bne.n	800444a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800441c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004420:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800443a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800443e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004446:	b29b      	uxth	r3, r3
 8004448:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 80be 	bne.w	80045d2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800445e:	441a      	add	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800446c:	441a      	add	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	429a      	cmp	r2, r3
 800447c:	d309      	bcc.n	8004492 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	6a1a      	ldr	r2, [r3, #32]
 8004488:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	621a      	str	r2, [r3, #32]
 8004490:	e015      	b.n	80044be <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800449a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800449e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80044a8:	e009      	b.n	80044be <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2200      	movs	r2, #0
 80044b4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	785b      	ldrb	r3, [r3, #1]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d15f      	bne.n	800458c <HAL_PCD_EP_DB_Transmit+0x7d8>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044da:	b29b      	uxth	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044e0:	4413      	add	r3, r2
 80044e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	00da      	lsls	r2, r3, #3
 80044ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044ec:	4413      	add	r3, r2
 80044ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80044f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044fe:	b29a      	uxth	r2, r3
 8004500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004502:	801a      	strh	r2, [r3, #0]
 8004504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <HAL_PCD_EP_DB_Transmit+0x76c>
 800450a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004518:	b29a      	uxth	r2, r3
 800451a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800451c:	801a      	strh	r2, [r3, #0]
 800451e:	e04e      	b.n	80045be <HAL_PCD_EP_DB_Transmit+0x80a>
 8004520:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004522:	2b3e      	cmp	r3, #62	@ 0x3e
 8004524:	d816      	bhi.n	8004554 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	663b      	str	r3, [r7, #96]	@ 0x60
 800452c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_PCD_EP_DB_Transmit+0x788>
 8004536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004538:	3301      	adds	r3, #1
 800453a:	663b      	str	r3, [r7, #96]	@ 0x60
 800453c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29a      	uxth	r2, r3
 8004542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004544:	b29b      	uxth	r3, r3
 8004546:	029b      	lsls	r3, r3, #10
 8004548:	b29b      	uxth	r3, r3
 800454a:	4313      	orrs	r3, r2
 800454c:	b29a      	uxth	r2, r3
 800454e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004550:	801a      	strh	r2, [r3, #0]
 8004552:	e034      	b.n	80045be <HAL_PCD_EP_DB_Transmit+0x80a>
 8004554:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	663b      	str	r3, [r7, #96]	@ 0x60
 800455a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004566:	3b01      	subs	r3, #1
 8004568:	663b      	str	r3, [r7, #96]	@ 0x60
 800456a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29a      	uxth	r2, r3
 8004570:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004572:	b29b      	uxth	r3, r3
 8004574:	029b      	lsls	r3, r3, #10
 8004576:	b29b      	uxth	r3, r3
 8004578:	4313      	orrs	r3, r2
 800457a:	b29b      	uxth	r3, r3
 800457c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004584:	b29a      	uxth	r2, r3
 8004586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	e018      	b.n	80045be <HAL_PCD_EP_DB_Transmit+0x80a>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d114      	bne.n	80045be <HAL_PCD_EP_DB_Transmit+0x80a>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800459c:	b29b      	uxth	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045a2:	4413      	add	r3, r2
 80045a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	00da      	lsls	r2, r3, #3
 80045ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045ae:	4413      	add	r3, r2
 80045b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	6959      	ldr	r1, [r3, #20]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	895a      	ldrh	r2, [r3, #10]
 80045ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f003 fa18 	bl	8007a02 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ec:	82fb      	strh	r3, [r7, #22]
 80045ee:	8afb      	ldrh	r3, [r7, #22]
 80045f0:	f083 0310 	eor.w	r3, r3, #16
 80045f4:	82fb      	strh	r3, [r7, #22]
 80045f6:	8afb      	ldrh	r3, [r7, #22]
 80045f8:	f083 0320 	eor.w	r3, r3, #32
 80045fc:	82fb      	strh	r3, [r7, #22]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	8afb      	ldrh	r3, [r7, #22]
 800460e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800461a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800461e:	b29b      	uxth	r3, r3
 8004620:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3798      	adds	r7, #152	@ 0x98
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	817b      	strh	r3, [r7, #10]
 800463a:	4613      	mov	r3, r2
 800463c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800463e:	897b      	ldrh	r3, [r7, #10]
 8004640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800464a:	897b      	ldrh	r3, [r7, #10]
 800464c:	f003 0207 	and.w	r2, r3, #7
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	3310      	adds	r3, #16
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	e009      	b.n	8004676 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004662:	897a      	ldrh	r2, [r7, #10]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004676:	893b      	ldrh	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d107      	bne.n	800468c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2200      	movs	r2, #0
 8004680:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	b29a      	uxth	r2, r3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	80da      	strh	r2, [r3, #6]
 800468a:	e00b      	b.n	80046a4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2201      	movs	r2, #1
 8004690:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	b29a      	uxth	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	b29a      	uxth	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d141      	bne.n	800479a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004716:	4b4b      	ldr	r3, [pc, #300]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800471e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004722:	d131      	bne.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004724:	4b47      	ldr	r3, [pc, #284]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800472a:	4a46      	ldr	r2, [pc, #280]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004730:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004734:	4b43      	ldr	r3, [pc, #268]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800473c:	4a41      	ldr	r2, [pc, #260]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004742:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004744:	4b40      	ldr	r3, [pc, #256]	@ (8004848 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2232      	movs	r2, #50	@ 0x32
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	4a3f      	ldr	r2, [pc, #252]	@ (800484c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	0c9b      	lsrs	r3, r3, #18
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800475a:	e002      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3b01      	subs	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004762:	4b38      	ldr	r3, [pc, #224]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476e:	d102      	bne.n	8004776 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f2      	bne.n	800475c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004776:	4b33      	ldr	r3, [pc, #204]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800477e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004782:	d158      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e057      	b.n	8004838 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004788:	4b2e      	ldr	r3, [pc, #184]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800478e:	4a2d      	ldr	r2, [pc, #180]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004798:	e04d      	b.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a0:	d141      	bne.n	8004826 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047a2:	4b28      	ldr	r3, [pc, #160]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ae:	d131      	bne.n	8004814 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047b0:	4b24      	ldr	r3, [pc, #144]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047b6:	4a23      	ldr	r2, [pc, #140]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047c0:	4b20      	ldr	r3, [pc, #128]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004848 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2232      	movs	r2, #50	@ 0x32
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	4a1c      	ldr	r2, [pc, #112]	@ (800484c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	0c9b      	lsrs	r3, r3, #18
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047e6:	e002      	b.n	80047ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047ee:	4b15      	ldr	r3, [pc, #84]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fa:	d102      	bne.n	8004802 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f2      	bne.n	80047e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004802:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800480e:	d112      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e011      	b.n	8004838 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004814:	4b0b      	ldr	r3, [pc, #44]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800481a:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004820:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004824:	e007      	b.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004826:	4b07      	ldr	r3, [pc, #28]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800482e:	4a05      	ldr	r2, [pc, #20]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004830:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004834:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40007000 	.word	0x40007000
 8004848:	20000000 	.word	0x20000000
 800484c:	431bde83 	.word	0x431bde83

08004850 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4a04      	ldr	r2, [pc, #16]	@ (800486c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800485a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800485e:	6093      	str	r3, [r2, #8]
}
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40007000 	.word	0x40007000

08004870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e2fe      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d075      	beq.n	800497a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800488e:	4b97      	ldr	r3, [pc, #604]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004898:	4b94      	ldr	r3, [pc, #592]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d102      	bne.n	80048ae <HAL_RCC_OscConfig+0x3e>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d002      	beq.n	80048b4 <HAL_RCC_OscConfig+0x44>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d10b      	bne.n	80048cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	4b8d      	ldr	r3, [pc, #564]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d05b      	beq.n	8004978 <HAL_RCC_OscConfig+0x108>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d157      	bne.n	8004978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e2d9      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d4:	d106      	bne.n	80048e4 <HAL_RCC_OscConfig+0x74>
 80048d6:	4b85      	ldr	r3, [pc, #532]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a84      	ldr	r2, [pc, #528]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e01d      	b.n	8004920 <HAL_RCC_OscConfig+0xb0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0x98>
 80048ee:	4b7f      	ldr	r3, [pc, #508]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a7e      	ldr	r2, [pc, #504]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4b7c      	ldr	r3, [pc, #496]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a7b      	ldr	r2, [pc, #492]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0xb0>
 8004908:	4b78      	ldr	r3, [pc, #480]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a77      	ldr	r2, [pc, #476]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 800490e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b75      	ldr	r3, [pc, #468]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a74      	ldr	r2, [pc, #464]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 800491a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800491e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d013      	beq.n	8004950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fc f9be 	bl	8000ca8 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004930:	f7fc f9ba 	bl	8000ca8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	@ 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e29e      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004942:	4b6a      	ldr	r3, [pc, #424]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0xc0>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fc f9aa 	bl	8000ca8 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004958:	f7fc f9a6 	bl	8000ca8 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	@ 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e28a      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800496a:	4b60      	ldr	r3, [pc, #384]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0xe8>
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d075      	beq.n	8004a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004986:	4b59      	ldr	r3, [pc, #356]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004990:	4b56      	ldr	r3, [pc, #344]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d102      	bne.n	80049a6 <HAL_RCC_OscConfig+0x136>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_OscConfig+0x13c>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d11f      	bne.n	80049ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ac:	4b4f      	ldr	r3, [pc, #316]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_OscConfig+0x154>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e25d      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c4:	4b49      	ldr	r3, [pc, #292]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	061b      	lsls	r3, r3, #24
 80049d2:	4946      	ldr	r1, [pc, #280]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049d8:	4b45      	ldr	r3, [pc, #276]	@ (8004af0 <HAL_RCC_OscConfig+0x280>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fc f817 	bl	8000a10 <HAL_InitTick>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d043      	beq.n	8004a70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e249      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d023      	beq.n	8004a3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f4:	4b3d      	ldr	r3, [pc, #244]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a3c      	ldr	r2, [pc, #240]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fc f952 	bl	8000ca8 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a08:	f7fc f94e 	bl	8000ca8 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e232      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a1a:	4b34      	ldr	r3, [pc, #208]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a26:	4b31      	ldr	r3, [pc, #196]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	492d      	ldr	r1, [pc, #180]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]
 8004a3a:	e01a      	b.n	8004a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2a      	ldr	r2, [pc, #168]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fc f92e 	bl	8000ca8 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a50:	f7fc f92a 	bl	8000ca8 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e20e      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a62:	4b22      	ldr	r3, [pc, #136]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x1e0>
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d041      	beq.n	8004b02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01c      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a86:	4b19      	ldr	r3, [pc, #100]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a8c:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a96:	f7fc f907 	bl	8000ca8 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9e:	f7fc f903 	bl	8000ca8 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e1e7      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ef      	beq.n	8004a9e <HAL_RCC_OscConfig+0x22e>
 8004abe:	e020      	b.n	8004b02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ac6:	4a09      	ldr	r2, [pc, #36]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad0:	f7fc f8ea 	bl	8000ca8 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ad6:	e00d      	b.n	8004af4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad8:	f7fc f8e6 	bl	8000ca8 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d906      	bls.n	8004af4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e1ca      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
 8004af0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004af4:	4b8c      	ldr	r3, [pc, #560]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ea      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80a6 	beq.w	8004c5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b10:	2300      	movs	r3, #0
 8004b12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b14:	4b84      	ldr	r3, [pc, #528]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_OscConfig+0x2b4>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x2b6>
 8004b24:	2300      	movs	r3, #0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b36:	4b7c      	ldr	r3, [pc, #496]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b42:	2301      	movs	r3, #1
 8004b44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b46:	4b79      	ldr	r3, [pc, #484]	@ (8004d2c <HAL_RCC_OscConfig+0x4bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d118      	bne.n	8004b84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b52:	4b76      	ldr	r3, [pc, #472]	@ (8004d2c <HAL_RCC_OscConfig+0x4bc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a75      	ldr	r2, [pc, #468]	@ (8004d2c <HAL_RCC_OscConfig+0x4bc>)
 8004b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5e:	f7fc f8a3 	bl	8000ca8 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b66:	f7fc f89f 	bl	8000ca8 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e183      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b78:	4b6c      	ldr	r3, [pc, #432]	@ (8004d2c <HAL_RCC_OscConfig+0x4bc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d108      	bne.n	8004b9e <HAL_RCC_OscConfig+0x32e>
 8004b8c:	4b66      	ldr	r3, [pc, #408]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b92:	4a65      	ldr	r2, [pc, #404]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b9c:	e024      	b.n	8004be8 <HAL_RCC_OscConfig+0x378>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d110      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x358>
 8004ba6:	4b60      	ldr	r3, [pc, #384]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bac:	4a5e      	ldr	r2, [pc, #376]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbc:	4a5a      	ldr	r2, [pc, #360]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bc6:	e00f      	b.n	8004be8 <HAL_RCC_OscConfig+0x378>
 8004bc8:	4b57      	ldr	r3, [pc, #348]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	4a56      	ldr	r2, [pc, #344]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bd0:	f023 0301 	bic.w	r3, r3, #1
 8004bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bd8:	4b53      	ldr	r3, [pc, #332]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bde:	4a52      	ldr	r2, [pc, #328]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004be0:	f023 0304 	bic.w	r3, r3, #4
 8004be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d016      	beq.n	8004c1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fc f85a 	bl	8000ca8 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7fc f856 	bl	8000ca8 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e138      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0e:	4b46      	ldr	r3, [pc, #280]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ed      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x388>
 8004c1c:	e015      	b.n	8004c4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1e:	f7fc f843 	bl	8000ca8 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7fc f83f 	bl	8000ca8 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e121      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ed      	bne.n	8004c26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c4a:	7ffb      	ldrb	r3, [r7, #31]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c50:	4b35      	ldr	r3, [pc, #212]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c54:	4a34      	ldr	r2, [pc, #208]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d03c      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01c      	beq.n	8004caa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c70:	4b2d      	ldr	r3, [pc, #180]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c76:	4a2c      	ldr	r2, [pc, #176]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c80:	f7fc f812 	bl	8000ca8 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c88:	f7fc f80e 	bl	8000ca8 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e0f2      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c9a:	4b23      	ldr	r3, [pc, #140]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0ef      	beq.n	8004c88 <HAL_RCC_OscConfig+0x418>
 8004ca8:	e01b      	b.n	8004ce2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004caa:	4b1f      	ldr	r3, [pc, #124]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fb fff5 	bl	8000ca8 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cc2:	f7fb fff1 	bl	8000ca8 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e0d5      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cd4:	4b14      	ldr	r3, [pc, #80]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1ef      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80c9 	beq.w	8004e7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cec:	4b0e      	ldr	r3, [pc, #56]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 030c 	and.w	r3, r3, #12
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	f000 8083 	beq.w	8004e00 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d15e      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004d08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0e:	f7fb ffcb 	bl	8000ca8 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d14:	e00c      	b.n	8004d30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d16:	f7fb ffc7 	bl	8000ca8 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d905      	bls.n	8004d30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e0ab      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d30:	4b55      	ldr	r3, [pc, #340]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ec      	bne.n	8004d16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d3c:	4b52      	ldr	r3, [pc, #328]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	4b52      	ldr	r3, [pc, #328]	@ (8004e8c <HAL_RCC_OscConfig+0x61c>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6a11      	ldr	r1, [r2, #32]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	0112      	lsls	r2, r2, #4
 8004d50:	4311      	orrs	r1, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004d56:	0212      	lsls	r2, r2, #8
 8004d58:	4311      	orrs	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d5e:	0852      	lsrs	r2, r2, #1
 8004d60:	3a01      	subs	r2, #1
 8004d62:	0552      	lsls	r2, r2, #21
 8004d64:	4311      	orrs	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d6a:	0852      	lsrs	r2, r2, #1
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	0652      	lsls	r2, r2, #25
 8004d70:	4311      	orrs	r1, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d76:	06d2      	lsls	r2, r2, #27
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	4943      	ldr	r1, [pc, #268]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d80:	4b41      	ldr	r3, [pc, #260]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a40      	ldr	r2, [pc, #256]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4a3d      	ldr	r2, [pc, #244]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004d92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fb ff86 	bl	8000ca8 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da0:	f7fb ff82 	bl	8000ca8 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e066      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db2:	4b35      	ldr	r3, [pc, #212]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x530>
 8004dbe:	e05e      	b.n	8004e7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc0:	4b31      	ldr	r3, [pc, #196]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a30      	ldr	r2, [pc, #192]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fb ff6c 	bl	8000ca8 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fb ff68 	bl	8000ca8 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e04c      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de6:	4b28      	ldr	r3, [pc, #160]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004df2:	4b25      	ldr	r3, [pc, #148]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	4924      	ldr	r1, [pc, #144]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004df8:	4b25      	ldr	r3, [pc, #148]	@ (8004e90 <HAL_RCC_OscConfig+0x620>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	60cb      	str	r3, [r1, #12]
 8004dfe:	e03e      	b.n	8004e7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e039      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004e88 <HAL_RCC_OscConfig+0x618>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f003 0203 	and.w	r2, r3, #3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d12c      	bne.n	8004e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d123      	bne.n	8004e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d11b      	bne.n	8004e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d113      	bne.n	8004e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d109      	bne.n	8004e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	3b01      	subs	r3, #1
 8004e74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3720      	adds	r7, #32
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	019f800c 	.word	0x019f800c
 8004e90:	feeefffc 	.word	0xfeeefffc

08004e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e11e      	b.n	80050ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eac:	4b91      	ldr	r3, [pc, #580]	@ (80050f4 <HAL_RCC_ClockConfig+0x260>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d910      	bls.n	8004edc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b8e      	ldr	r3, [pc, #568]	@ (80050f4 <HAL_RCC_ClockConfig+0x260>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 020f 	bic.w	r2, r3, #15
 8004ec2:	498c      	ldr	r1, [pc, #560]	@ (80050f4 <HAL_RCC_ClockConfig+0x260>)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b8a      	ldr	r3, [pc, #552]	@ (80050f4 <HAL_RCC_ClockConfig+0x260>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e106      	b.n	80050ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d073      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d129      	bne.n	8004f44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef0:	4b81      	ldr	r3, [pc, #516]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0f4      	b.n	80050ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f00:	f000 f9ba 	bl	8005278 <RCC_GetSysClockFreqFromPLLSource>
 8004f04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4a7c      	ldr	r2, [pc, #496]	@ (80050fc <HAL_RCC_ClockConfig+0x268>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d93f      	bls.n	8004f8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d033      	beq.n	8004f8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d12f      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f2e:	4b72      	ldr	r3, [pc, #456]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f36:	4a70      	ldr	r2, [pc, #448]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f3e:	2380      	movs	r3, #128	@ 0x80
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	e024      	b.n	8004f8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d107      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d109      	bne.n	8004f6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0c6      	b.n	80050ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f5c:	4b66      	ldr	r3, [pc, #408]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0be      	b.n	80050ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f6c:	f000 f8ce 	bl	800510c <HAL_RCC_GetSysClockFreq>
 8004f70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4a61      	ldr	r2, [pc, #388]	@ (80050fc <HAL_RCC_ClockConfig+0x268>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d909      	bls.n	8004f8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f82:	4a5d      	ldr	r2, [pc, #372]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f8a:	2380      	movs	r3, #128	@ 0x80
 8004f8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f8e:	4b5a      	ldr	r3, [pc, #360]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4957      	ldr	r1, [pc, #348]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa0:	f7fb fe82 	bl	8000ca8 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fb fe7e 	bl	8000ca8 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e095      	b.n	80050ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	4b4e      	ldr	r3, [pc, #312]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 020c 	and.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d1eb      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d023      	beq.n	8005024 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe8:	4b43      	ldr	r3, [pc, #268]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	4a42      	ldr	r2, [pc, #264]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8004fee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ff2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005000:	4b3d      	ldr	r3, [pc, #244]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005008:	4a3b      	ldr	r2, [pc, #236]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 800500a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800500e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005010:	4b39      	ldr	r3, [pc, #228]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4936      	ldr	r1, [pc, #216]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 800501e:	4313      	orrs	r3, r2
 8005020:	608b      	str	r3, [r1, #8]
 8005022:	e008      	b.n	8005036 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b80      	cmp	r3, #128	@ 0x80
 8005028:	d105      	bne.n	8005036 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800502a:	4b33      	ldr	r3, [pc, #204]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	4a32      	ldr	r2, [pc, #200]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 8005030:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005034:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005036:	4b2f      	ldr	r3, [pc, #188]	@ (80050f4 <HAL_RCC_ClockConfig+0x260>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d21d      	bcs.n	8005080 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005044:	4b2b      	ldr	r3, [pc, #172]	@ (80050f4 <HAL_RCC_ClockConfig+0x260>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 020f 	bic.w	r2, r3, #15
 800504c:	4929      	ldr	r1, [pc, #164]	@ (80050f4 <HAL_RCC_ClockConfig+0x260>)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	4313      	orrs	r3, r2
 8005052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005054:	f7fb fe28 	bl	8000ca8 <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505a:	e00a      	b.n	8005072 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505c:	f7fb fe24 	bl	8000ca8 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e03b      	b.n	80050ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	4b20      	ldr	r3, [pc, #128]	@ (80050f4 <HAL_RCC_ClockConfig+0x260>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d1ed      	bne.n	800505c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508c:	4b1a      	ldr	r3, [pc, #104]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4917      	ldr	r1, [pc, #92]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050aa:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	490f      	ldr	r1, [pc, #60]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050be:	f000 f825 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80050c2:	4602      	mov	r2, r0
 80050c4:	4b0c      	ldr	r3, [pc, #48]	@ (80050f8 <HAL_RCC_ClockConfig+0x264>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	490c      	ldr	r1, [pc, #48]	@ (8005100 <HAL_RCC_ClockConfig+0x26c>)
 80050d0:	5ccb      	ldrb	r3, [r1, r3]
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	fa22 f303 	lsr.w	r3, r2, r3
 80050da:	4a0a      	ldr	r2, [pc, #40]	@ (8005104 <HAL_RCC_ClockConfig+0x270>)
 80050dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050de:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <HAL_RCC_ClockConfig+0x274>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fb fc94 	bl	8000a10 <HAL_InitTick>
 80050e8:	4603      	mov	r3, r0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40022000 	.word	0x40022000
 80050f8:	40021000 	.word	0x40021000
 80050fc:	04c4b400 	.word	0x04c4b400
 8005100:	0800abfc 	.word	0x0800abfc
 8005104:	20000000 	.word	0x20000000
 8005108:	20000004 	.word	0x20000004

0800510c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005112:	4b2c      	ldr	r3, [pc, #176]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b04      	cmp	r3, #4
 800511c:	d102      	bne.n	8005124 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800511e:	4b2a      	ldr	r3, [pc, #168]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e047      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005124:	4b27      	ldr	r3, [pc, #156]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 030c 	and.w	r3, r3, #12
 800512c:	2b08      	cmp	r3, #8
 800512e:	d102      	bne.n	8005136 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005130:	4b26      	ldr	r3, [pc, #152]	@ (80051cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	e03e      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005136:	4b23      	ldr	r3, [pc, #140]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b0c      	cmp	r3, #12
 8005140:	d136      	bne.n	80051b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005142:	4b20      	ldr	r3, [pc, #128]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800514c:	4b1d      	ldr	r3, [pc, #116]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	3301      	adds	r3, #1
 8005158:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d10c      	bne.n	800517a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005160:	4a1a      	ldr	r2, [pc, #104]	@ (80051cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	4a16      	ldr	r2, [pc, #88]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800516a:	68d2      	ldr	r2, [r2, #12]
 800516c:	0a12      	lsrs	r2, r2, #8
 800516e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	617b      	str	r3, [r7, #20]
      break;
 8005178:	e00c      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800517a:	4a13      	ldr	r2, [pc, #76]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005182:	4a10      	ldr	r2, [pc, #64]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005184:	68d2      	ldr	r2, [r2, #12]
 8005186:	0a12      	lsrs	r2, r2, #8
 8005188:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800518c:	fb02 f303 	mul.w	r3, r2, r3
 8005190:	617b      	str	r3, [r7, #20]
      break;
 8005192:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005194:	4b0b      	ldr	r3, [pc, #44]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	0e5b      	lsrs	r3, r3, #25
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	3301      	adds	r3, #1
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e001      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051b4:	693b      	ldr	r3, [r7, #16]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	00f42400 	.word	0x00f42400
 80051cc:	007a1200 	.word	0x007a1200

080051d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d4:	4b03      	ldr	r3, [pc, #12]	@ (80051e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051d6:	681b      	ldr	r3, [r3, #0]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000000 	.word	0x20000000

080051e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051ec:	f7ff fff0 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b06      	ldr	r3, [pc, #24]	@ (800520c <HAL_RCC_GetPCLK2Freq+0x24>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	0adb      	lsrs	r3, r3, #11
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4904      	ldr	r1, [pc, #16]	@ (8005210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005208:	4618      	mov	r0, r3
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40021000 	.word	0x40021000
 8005210:	0800ac0c 	.word	0x0800ac0c

08005214 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	220f      	movs	r2, #15
 8005222:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005224:	4b12      	ldr	r3, [pc, #72]	@ (8005270 <HAL_RCC_GetClockConfig+0x5c>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0203 	and.w	r2, r3, #3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005230:	4b0f      	ldr	r3, [pc, #60]	@ (8005270 <HAL_RCC_GetClockConfig+0x5c>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800523c:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <HAL_RCC_GetClockConfig+0x5c>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005248:	4b09      	ldr	r3, [pc, #36]	@ (8005270 <HAL_RCC_GetClockConfig+0x5c>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	08db      	lsrs	r3, r3, #3
 800524e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005256:	4b07      	ldr	r3, [pc, #28]	@ (8005274 <HAL_RCC_GetClockConfig+0x60>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 020f 	and.w	r2, r3, #15
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	601a      	str	r2, [r3, #0]
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	40022000 	.word	0x40022000

08005278 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800527e:	4b1e      	ldr	r3, [pc, #120]	@ (80052f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005288:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	091b      	lsrs	r3, r3, #4
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d10c      	bne.n	80052b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800529c:	4a17      	ldr	r2, [pc, #92]	@ (80052fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	4a14      	ldr	r2, [pc, #80]	@ (80052f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052a6:	68d2      	ldr	r2, [r2, #12]
 80052a8:	0a12      	lsrs	r2, r2, #8
 80052aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052ae:	fb02 f303 	mul.w	r3, r2, r3
 80052b2:	617b      	str	r3, [r7, #20]
    break;
 80052b4:	e00c      	b.n	80052d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052b6:	4a12      	ldr	r2, [pc, #72]	@ (8005300 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	4a0e      	ldr	r2, [pc, #56]	@ (80052f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052c0:	68d2      	ldr	r2, [r2, #12]
 80052c2:	0a12      	lsrs	r2, r2, #8
 80052c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052c8:	fb02 f303 	mul.w	r3, r2, r3
 80052cc:	617b      	str	r3, [r7, #20]
    break;
 80052ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052d0:	4b09      	ldr	r3, [pc, #36]	@ (80052f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	0e5b      	lsrs	r3, r3, #25
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	3301      	adds	r3, #1
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052ea:	687b      	ldr	r3, [r7, #4]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	40021000 	.word	0x40021000
 80052fc:	007a1200 	.word	0x007a1200
 8005300:	00f42400 	.word	0x00f42400

08005304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800530c:	2300      	movs	r3, #0
 800530e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005310:	2300      	movs	r3, #0
 8005312:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8098 	beq.w	8005452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005322:	2300      	movs	r3, #0
 8005324:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005326:	4b43      	ldr	r3, [pc, #268]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10d      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005332:	4b40      	ldr	r3, [pc, #256]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005336:	4a3f      	ldr	r2, [pc, #252]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800533c:	6593      	str	r3, [r2, #88]	@ 0x58
 800533e:	4b3d      	ldr	r3, [pc, #244]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534a:	2301      	movs	r3, #1
 800534c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800534e:	4b3a      	ldr	r3, [pc, #232]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a39      	ldr	r2, [pc, #228]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800535a:	f7fb fca5 	bl	8000ca8 <HAL_GetTick>
 800535e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005360:	e009      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005362:	f7fb fca1 	bl	8000ca8 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d902      	bls.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	74fb      	strb	r3, [r7, #19]
        break;
 8005374:	e005      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005376:	4b30      	ldr	r3, [pc, #192]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0ef      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d159      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005388:	4b2a      	ldr	r3, [pc, #168]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005392:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01e      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d019      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053a4:	4b23      	ldr	r3, [pc, #140]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053b0:	4b20      	ldr	r3, [pc, #128]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053d0:	4a18      	ldr	r2, [pc, #96]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e2:	f7fb fc61 	bl	8000ca8 <HAL_GetTick>
 80053e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e8:	e00b      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ea:	f7fb fc5d 	bl	8000ca8 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d902      	bls.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005400:	e006      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005402:	4b0c      	ldr	r3, [pc, #48]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0ec      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005410:	7cfb      	ldrb	r3, [r7, #19]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005416:	4b07      	ldr	r3, [pc, #28]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005424:	4903      	ldr	r1, [pc, #12]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800542c:	e008      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	74bb      	strb	r3, [r7, #18]
 8005432:	e005      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005434:	40021000 	.word	0x40021000
 8005438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005440:	7c7b      	ldrb	r3, [r7, #17]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d105      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005446:	4ba7      	ldr	r3, [pc, #668]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544a:	4aa6      	ldr	r2, [pc, #664]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005450:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800545e:	4ba1      	ldr	r3, [pc, #644]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	f023 0203 	bic.w	r2, r3, #3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	499d      	ldr	r1, [pc, #628]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005480:	4b98      	ldr	r3, [pc, #608]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005486:	f023 020c 	bic.w	r2, r3, #12
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	4995      	ldr	r1, [pc, #596]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054a2:	4b90      	ldr	r3, [pc, #576]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	498c      	ldr	r1, [pc, #560]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054c4:	4b87      	ldr	r3, [pc, #540]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	4984      	ldr	r1, [pc, #528]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054e6:	4b7f      	ldr	r3, [pc, #508]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	497b      	ldr	r1, [pc, #492]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005508:	4b76      	ldr	r3, [pc, #472]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	4973      	ldr	r1, [pc, #460]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800552a:	4b6e      	ldr	r3, [pc, #440]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	496a      	ldr	r1, [pc, #424]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800554c:	4b65      	ldr	r3, [pc, #404]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005552:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	4962      	ldr	r1, [pc, #392]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800556e:	4b5d      	ldr	r3, [pc, #372]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005574:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	4959      	ldr	r1, [pc, #356]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005590:	4b54      	ldr	r3, [pc, #336]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	4951      	ldr	r1, [pc, #324]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d015      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055b2:	4b4c      	ldr	r3, [pc, #304]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	4948      	ldr	r1, [pc, #288]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055d0:	d105      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d2:	4b44      	ldr	r3, [pc, #272]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	4a43      	ldr	r2, [pc, #268]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055dc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d015      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055ea:	4b3e      	ldr	r3, [pc, #248]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f8:	493a      	ldr	r1, [pc, #232]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005608:	d105      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560a:	4b36      	ldr	r3, [pc, #216]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	4a35      	ldr	r2, [pc, #212]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005610:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005614:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d015      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005622:	4b30      	ldr	r3, [pc, #192]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005628:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005630:	492c      	ldr	r1, [pc, #176]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005640:	d105      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005642:	4b28      	ldr	r3, [pc, #160]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	4a27      	ldr	r2, [pc, #156]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800564c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d015      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800565a:	4b22      	ldr	r3, [pc, #136]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005660:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	491e      	ldr	r1, [pc, #120]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005678:	d105      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800567a:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	4a19      	ldr	r2, [pc, #100]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005680:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005684:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d015      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005692:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a0:	4910      	ldr	r1, [pc, #64]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056b0:	d105      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b2:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4a0b      	ldr	r2, [pc, #44]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056ca:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d8:	4902      	ldr	r1, [pc, #8]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	e001      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80056e4:	40021000 	.word	0x40021000
 80056e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056ee:	d105      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056f0:	4b21      	ldr	r3, [pc, #132]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a20      	ldr	r2, [pc, #128]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80056f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d015      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005708:	4b1b      	ldr	r3, [pc, #108]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	4918      	ldr	r1, [pc, #96]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005726:	d105      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005728:	4b13      	ldr	r3, [pc, #76]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	4a12      	ldr	r2, [pc, #72]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800572e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005732:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d015      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005740:	4b0d      	ldr	r3, [pc, #52]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005746:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800574e:	490a      	ldr	r1, [pc, #40]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800575a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800575e:	d105      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005760:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4a04      	ldr	r2, [pc, #16]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800576a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800576c:	7cbb      	ldrb	r3, [r7, #18]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40021000 	.word	0x40021000

0800577c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e049      	b.n	8005822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f841 	bl	800582a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f000 fa28 	bl	8005c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	d001      	beq.n	8005858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e04f      	b.n	80058f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a23      	ldr	r2, [pc, #140]	@ (8005904 <HAL_TIM_Base_Start_IT+0xc4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01d      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0x76>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005882:	d018      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0x76>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1f      	ldr	r2, [pc, #124]	@ (8005908 <HAL_TIM_Base_Start_IT+0xc8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d013      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0x76>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1e      	ldr	r2, [pc, #120]	@ (800590c <HAL_TIM_Base_Start_IT+0xcc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00e      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0x76>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1c      	ldr	r2, [pc, #112]	@ (8005910 <HAL_TIM_Base_Start_IT+0xd0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d009      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0x76>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005914 <HAL_TIM_Base_Start_IT+0xd4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d004      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0x76>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a19      	ldr	r2, [pc, #100]	@ (8005918 <HAL_TIM_Base_Start_IT+0xd8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d115      	bne.n	80058e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	4b17      	ldr	r3, [pc, #92]	@ (800591c <HAL_TIM_Base_Start_IT+0xdc>)
 80058be:	4013      	ands	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b06      	cmp	r3, #6
 80058c6:	d015      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0xb4>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ce:	d011      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e0:	e008      	b.n	80058f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0201 	orr.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e000      	b.n	80058f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	40013400 	.word	0x40013400
 8005914:	40014000 	.word	0x40014000
 8005918:	40015000 	.word	0x40015000
 800591c:	00010007 	.word	0x00010007

08005920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d020      	beq.n	8005984 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01b      	beq.n	8005984 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0202 	mvn.w	r2, #2
 8005954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f931 	bl	8005bd2 <HAL_TIM_IC_CaptureCallback>
 8005970:	e005      	b.n	800597e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f923 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f934 	bl	8005be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d020      	beq.n	80059d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01b      	beq.n	80059d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0204 	mvn.w	r2, #4
 80059a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f90b 	bl	8005bd2 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8fd 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f90e 	bl	8005be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d020      	beq.n	8005a1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01b      	beq.n	8005a1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0208 	mvn.w	r2, #8
 80059ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2204      	movs	r2, #4
 80059f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8e5 	bl	8005bd2 <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8d7 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8e8 	bl	8005be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d020      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01b      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0210 	mvn.w	r2, #16
 8005a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f8bf 	bl	8005bd2 <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8b1 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8c2 	bl	8005be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0201 	mvn.w	r2, #1
 8005a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fa fe76 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00c      	beq.n	8005aba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f95f 	bl	8005d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00c      	beq.n	8005ade <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f957 	bl	8005d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00c      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f87c 	bl	8005bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00c      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d007      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f06f 0220 	mvn.w	r2, #32
 8005b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f91f 	bl	8005d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00c      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f92b 	bl	8005da0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00c      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f923 	bl	8005db4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f91b 	bl	8005dc8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f913 	bl	8005ddc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a48      	ldr	r2, [pc, #288]	@ (8005d44 <TIM_Base_SetConfig+0x134>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d013      	beq.n	8005c50 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2e:	d00f      	beq.n	8005c50 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a45      	ldr	r2, [pc, #276]	@ (8005d48 <TIM_Base_SetConfig+0x138>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a44      	ldr	r2, [pc, #272]	@ (8005d4c <TIM_Base_SetConfig+0x13c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d007      	beq.n	8005c50 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a43      	ldr	r2, [pc, #268]	@ (8005d50 <TIM_Base_SetConfig+0x140>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_Base_SetConfig+0x40>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a42      	ldr	r2, [pc, #264]	@ (8005d54 <TIM_Base_SetConfig+0x144>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d108      	bne.n	8005c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a37      	ldr	r2, [pc, #220]	@ (8005d44 <TIM_Base_SetConfig+0x134>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01f      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c70:	d01b      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a34      	ldr	r2, [pc, #208]	@ (8005d48 <TIM_Base_SetConfig+0x138>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d017      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a33      	ldr	r2, [pc, #204]	@ (8005d4c <TIM_Base_SetConfig+0x13c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a32      	ldr	r2, [pc, #200]	@ (8005d50 <TIM_Base_SetConfig+0x140>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00f      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a32      	ldr	r2, [pc, #200]	@ (8005d58 <TIM_Base_SetConfig+0x148>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00b      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a31      	ldr	r2, [pc, #196]	@ (8005d5c <TIM_Base_SetConfig+0x14c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a30      	ldr	r2, [pc, #192]	@ (8005d60 <TIM_Base_SetConfig+0x150>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8005d54 <TIM_Base_SetConfig+0x144>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d108      	bne.n	8005cbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a18      	ldr	r2, [pc, #96]	@ (8005d44 <TIM_Base_SetConfig+0x134>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <TIM_Base_SetConfig+0x100>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a19      	ldr	r2, [pc, #100]	@ (8005d50 <TIM_Base_SetConfig+0x140>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00f      	beq.n	8005d10 <TIM_Base_SetConfig+0x100>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a19      	ldr	r2, [pc, #100]	@ (8005d58 <TIM_Base_SetConfig+0x148>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00b      	beq.n	8005d10 <TIM_Base_SetConfig+0x100>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a18      	ldr	r2, [pc, #96]	@ (8005d5c <TIM_Base_SetConfig+0x14c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d007      	beq.n	8005d10 <TIM_Base_SetConfig+0x100>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a17      	ldr	r2, [pc, #92]	@ (8005d60 <TIM_Base_SetConfig+0x150>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_Base_SetConfig+0x100>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a12      	ldr	r2, [pc, #72]	@ (8005d54 <TIM_Base_SetConfig+0x144>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d103      	bne.n	8005d18 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d105      	bne.n	8005d36 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f023 0201 	bic.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	611a      	str	r2, [r3, #16]
  }
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40012c00 	.word	0x40012c00
 8005d48:	40000400 	.word	0x40000400
 8005d4c:	40000800 	.word	0x40000800
 8005d50:	40013400 	.word	0x40013400
 8005d54:	40015000 	.word	0x40015000
 8005d58:	40014000 	.word	0x40014000
 8005d5c:	40014400 	.word	0x40014400
 8005d60:	40014800 	.word	0x40014800

08005d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e00:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005e04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e26:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005e2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b0a7      	sub	sp, #156	@ 0x9c
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	78db      	ldrb	r3, [r3, #3]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d81f      	bhi.n	8005f02 <USB_ActivateEndpoint+0x72>
 8005ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec8 <USB_ActivateEndpoint+0x38>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005ed9 	.word	0x08005ed9
 8005ecc:	08005ef5 	.word	0x08005ef5
 8005ed0:	08005f0b 	.word	0x08005f0b
 8005ed4:	08005ee7 	.word	0x08005ee7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ed8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005edc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ee0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005ee4:	e012      	b.n	8005f0c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ee6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005eea:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005eee:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005ef2:	e00b      	b.n	8005f0c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ef4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005ef8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005efc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005f00:	e004      	b.n	8005f0c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005f08:	e000      	b.n	8005f0c <USB_ActivateEndpoint+0x7c>
      break;
 8005f0a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	b21b      	sxth	r3, r3
 8005f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f46:	b21a      	sxth	r2, r3
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	b21b      	sxth	r3, r3
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b21b      	sxth	r3, r3
 8005f52:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	7b1b      	ldrb	r3, [r3, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f040 8180 	bne.w	8006282 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	785b      	ldrb	r3, [r3, #1]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8084 	beq.w	8006094 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	00da      	lsls	r2, r3, #3
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	88db      	ldrh	r3, [r3, #6]
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	827b      	strh	r3, [r7, #18]
 8005fce:	8a7b      	ldrh	r3, [r7, #18]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <USB_ActivateEndpoint+0x180>
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fee:	823b      	strh	r3, [r7, #16]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	8a3b      	ldrh	r3, [r7, #16]
 8005ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006008:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800600c:	b29b      	uxth	r3, r3
 800600e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	78db      	ldrb	r3, [r3, #3]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d020      	beq.n	800605a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800602a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800602e:	81bb      	strh	r3, [r7, #12]
 8006030:	89bb      	ldrh	r3, [r7, #12]
 8006032:	f083 0320 	eor.w	r3, r3, #32
 8006036:	81bb      	strh	r3, [r7, #12]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	441a      	add	r2, r3
 8006042:	89bb      	ldrh	r3, [r7, #12]
 8006044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800604c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006054:	b29b      	uxth	r3, r3
 8006056:	8013      	strh	r3, [r2, #0]
 8006058:	e3f9      	b.n	800684e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006070:	81fb      	strh	r3, [r7, #14]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	89fb      	ldrh	r3, [r7, #14]
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]
 8006092:	e3dc      	b.n	800684e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	633b      	str	r3, [r7, #48]	@ 0x30
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800609e:	b29b      	uxth	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	4413      	add	r3, r2
 80060a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	00da      	lsls	r2, r3, #3
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	4413      	add	r3, r2
 80060b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	88db      	ldrh	r3, [r3, #6]
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	b29b      	uxth	r3, r3
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	4413      	add	r3, r2
 80060da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	00da      	lsls	r2, r3, #3
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	4413      	add	r3, r2
 80060e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <USB_ActivateEndpoint+0x28a>
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006112:	b29a      	uxth	r2, r3
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	e041      	b.n	800619e <USB_ActivateEndpoint+0x30e>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006120:	d81c      	bhi.n	800615c <USB_ActivateEndpoint+0x2cc>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <USB_ActivateEndpoint+0x2b2>
 8006138:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800613c:	3301      	adds	r3, #1
 800613e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29a      	uxth	r2, r3
 8006148:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800614c:	b29b      	uxth	r3, r3
 800614e:	029b      	lsls	r3, r3, #10
 8006150:	b29b      	uxth	r3, r3
 8006152:	4313      	orrs	r3, r2
 8006154:	b29a      	uxth	r2, r3
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	e020      	b.n	800619e <USB_ActivateEndpoint+0x30e>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <USB_ActivateEndpoint+0x2ec>
 8006172:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006176:	3b01      	subs	r3, #1
 8006178:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29a      	uxth	r2, r3
 8006182:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006186:	b29b      	uxth	r3, r3
 8006188:	029b      	lsls	r3, r3, #10
 800618a:	b29b      	uxth	r3, r3
 800618c:	4313      	orrs	r3, r2
 800618e:	b29b      	uxth	r3, r3
 8006190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006198:	b29a      	uxth	r2, r3
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80061ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01b      	beq.n	80061ee <USB_ActivateEndpoint+0x35e>
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061cc:	843b      	strh	r3, [r7, #32]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	8c3b      	ldrh	r3, [r7, #32]
 80061da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d124      	bne.n	8006240 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620c:	83bb      	strh	r3, [r7, #28]
 800620e:	8bbb      	ldrh	r3, [r7, #28]
 8006210:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006214:	83bb      	strh	r3, [r7, #28]
 8006216:	8bbb      	ldrh	r3, [r7, #28]
 8006218:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800621c:	83bb      	strh	r3, [r7, #28]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	441a      	add	r2, r3
 8006228:	8bbb      	ldrh	r3, [r7, #28]
 800622a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800622e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800623a:	b29b      	uxth	r3, r3
 800623c:	8013      	strh	r3, [r2, #0]
 800623e:	e306      	b.n	800684e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006256:	83fb      	strh	r3, [r7, #30]
 8006258:	8bfb      	ldrh	r3, [r7, #30]
 800625a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800625e:	83fb      	strh	r3, [r7, #30]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	8bfb      	ldrh	r3, [r7, #30]
 800626c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006270:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800627c:	b29b      	uxth	r3, r3
 800627e:	8013      	strh	r3, [r2, #0]
 8006280:	e2e5      	b.n	800684e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	78db      	ldrb	r3, [r3, #3]
 8006286:	2b02      	cmp	r3, #2
 8006288:	d11e      	bne.n	80062c8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800629c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	441a      	add	r2, r3
 80062ae:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80062b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80062be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
 80062c6:	e01d      	b.n	8006304 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80062da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062de:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	441a      	add	r2, r3
 80062ec:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80062f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006300:	b29b      	uxth	r3, r3
 8006302:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800630e:	b29b      	uxth	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006314:	4413      	add	r3, r2
 8006316:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	00da      	lsls	r2, r3, #3
 800631e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006320:	4413      	add	r3, r2
 8006322:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006326:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	891b      	ldrh	r3, [r3, #8]
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	b29b      	uxth	r3, r3
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	677b      	str	r3, [r7, #116]	@ 0x74
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006342:	b29b      	uxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006348:	4413      	add	r3, r2
 800634a:	677b      	str	r3, [r7, #116]	@ 0x74
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	00da      	lsls	r2, r3, #3
 8006352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006354:	4413      	add	r3, r2
 8006356:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800635a:	673b      	str	r3, [r7, #112]	@ 0x70
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	895b      	ldrh	r3, [r3, #10]
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	b29b      	uxth	r3, r3
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800636a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 81af 	bne.w	80066d4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006386:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800638a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d01d      	beq.n	80063ce <USB_ActivateEndpoint+0x53e>
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	441a      	add	r2, r3
 80063b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80063ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80063de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80063e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01d      	beq.n	8006426 <USB_ActivateEndpoint+0x596>
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006400:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	441a      	add	r2, r3
 800640e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006416:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800641a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800641e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006422:	b29b      	uxth	r3, r3
 8006424:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d16b      	bne.n	8006506 <USB_ActivateEndpoint+0x676>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006438:	b29b      	uxth	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800643e:	4413      	add	r3, r2
 8006440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	00da      	lsls	r2, r3, #3
 8006448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800644a:	4413      	add	r3, r2
 800644c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800645c:	b29a      	uxth	r2, r3
 800645e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <USB_ActivateEndpoint+0x5f0>
 800646a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006478:	b29a      	uxth	r2, r3
 800647a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e05d      	b.n	800653c <USB_ActivateEndpoint+0x6ac>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b3e      	cmp	r3, #62	@ 0x3e
 8006486:	d81c      	bhi.n	80064c2 <USB_ActivateEndpoint+0x632>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <USB_ActivateEndpoint+0x618>
 800649e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064a2:	3301      	adds	r3, #1
 80064a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e03c      	b.n	800653c <USB_ActivateEndpoint+0x6ac>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <USB_ActivateEndpoint+0x652>
 80064d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064dc:	3b01      	subs	r3, #1
 80064de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	e01a      	b.n	800653c <USB_ActivateEndpoint+0x6ac>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d116      	bne.n	800653c <USB_ActivateEndpoint+0x6ac>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	657b      	str	r3, [r7, #84]	@ 0x54
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006518:	b29b      	uxth	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800651e:	4413      	add	r3, r2
 8006520:	657b      	str	r3, [r7, #84]	@ 0x54
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	00da      	lsls	r2, r3, #3
 8006528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800652a:	4413      	add	r3, r2
 800652c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006530:	653b      	str	r3, [r7, #80]	@ 0x50
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	b29a      	uxth	r2, r3
 8006538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d16b      	bne.n	8006620 <USB_ActivateEndpoint+0x790>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006558:	4413      	add	r3, r2
 800655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	00da      	lsls	r2, r3, #3
 8006562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006564:	4413      	add	r3, r2
 8006566:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800656a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800656c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006576:	b29a      	uxth	r2, r3
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <USB_ActivateEndpoint+0x70a>
 8006584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006592:	b29a      	uxth	r2, r3
 8006594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	e05b      	b.n	8006652 <USB_ActivateEndpoint+0x7c2>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b3e      	cmp	r3, #62	@ 0x3e
 80065a0:	d81c      	bhi.n	80065dc <USB_ActivateEndpoint+0x74c>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <USB_ActivateEndpoint+0x732>
 80065b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065bc:	3301      	adds	r3, #1
 80065be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	029b      	lsls	r3, r3, #10
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	4313      	orrs	r3, r2
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	e03a      	b.n	8006652 <USB_ActivateEndpoint+0x7c2>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	095b      	lsrs	r3, r3, #5
 80065e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <USB_ActivateEndpoint+0x76c>
 80065f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065f6:	3b01      	subs	r3, #1
 80065f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29a      	uxth	r2, r3
 8006602:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006606:	b29b      	uxth	r3, r3
 8006608:	029b      	lsls	r3, r3, #10
 800660a:	b29b      	uxth	r3, r3
 800660c:	4313      	orrs	r3, r2
 800660e:	b29b      	uxth	r3, r3
 8006610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006618:	b29a      	uxth	r2, r3
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	e018      	b.n	8006652 <USB_ActivateEndpoint+0x7c2>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d114      	bne.n	8006652 <USB_ActivateEndpoint+0x7c2>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800662e:	b29b      	uxth	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006634:	4413      	add	r3, r2
 8006636:	647b      	str	r3, [r7, #68]	@ 0x44
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	00da      	lsls	r2, r3, #3
 800663e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006640:	4413      	add	r3, r2
 8006642:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006646:	643b      	str	r3, [r7, #64]	@ 0x40
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	b29a      	uxth	r2, r3
 800664e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006650:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006668:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800666a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800666c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006670:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006672:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006674:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006678:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	441a      	add	r2, r3
 8006684:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800668a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800668e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006696:	b29b      	uxth	r3, r3
 8006698:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066b0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
 80066d2:	e0bc      	b.n	800684e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80066e4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80066e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01d      	beq.n	800672c <USB_ActivateEndpoint+0x89c>
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006706:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800671c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006720:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006728:	b29b      	uxth	r3, r3
 800672a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800673c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01d      	beq.n	8006784 <USB_ActivateEndpoint+0x8f4>
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800675a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	441a      	add	r2, r3
 800676c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800677c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006780:	b29b      	uxth	r3, r3
 8006782:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	78db      	ldrb	r3, [r3, #3]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d024      	beq.n	80067d6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800679e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80067a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80067aa:	f083 0320 	eor.w	r3, r3, #32
 80067ae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	441a      	add	r2, r3
 80067bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80067c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	8013      	strh	r3, [r2, #0]
 80067d4:	e01d      	b.n	8006812 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	441a      	add	r2, r3
 80067fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80067fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800680a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800680e:	b29b      	uxth	r3, r3
 8006810:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006828:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	441a      	add	r2, r3
 8006836:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800683a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800683e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684a:	b29b      	uxth	r3, r3
 800684c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800684e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006852:	4618      	mov	r0, r3
 8006854:	379c      	adds	r7, #156	@ 0x9c
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop

08006860 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006860:	b480      	push	{r7}
 8006862:	b08d      	sub	sp, #52	@ 0x34
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	7b1b      	ldrb	r3, [r3, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f040 808e 	bne.w	8006990 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	785b      	ldrb	r3, [r3, #1]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d044      	beq.n	8006906 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	81bb      	strh	r3, [r7, #12]
 800688a:	89bb      	ldrh	r3, [r7, #12]
 800688c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01b      	beq.n	80068cc <USB_DeactivateEndpoint+0x6c>
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068aa:	817b      	strh	r3, [r7, #10]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	441a      	add	r2, r3
 80068b6:	897b      	ldrh	r3, [r7, #10]
 80068b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068e2:	813b      	strh	r3, [r7, #8]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	893b      	ldrh	r3, [r7, #8]
 80068f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006900:	b29b      	uxth	r3, r3
 8006902:	8013      	strh	r3, [r2, #0]
 8006904:	e192      	b.n	8006c2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	827b      	strh	r3, [r7, #18]
 8006914:	8a7b      	ldrh	r3, [r7, #18]
 8006916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01b      	beq.n	8006956 <USB_DeactivateEndpoint+0xf6>
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006934:	823b      	strh	r3, [r7, #16]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	441a      	add	r2, r3
 8006940:	8a3b      	ldrh	r3, [r7, #16]
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800694a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800694e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800696c:	81fb      	strh	r3, [r7, #14]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	441a      	add	r2, r3
 8006978:	89fb      	ldrh	r3, [r7, #14]
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]
 800698e:	e14d      	b.n	8006c2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 80a5 	bne.w	8006ae4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	843b      	strh	r3, [r7, #32]
 80069a8:	8c3b      	ldrh	r3, [r7, #32]
 80069aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01b      	beq.n	80069ea <USB_DeactivateEndpoint+0x18a>
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c8:	83fb      	strh	r3, [r7, #30]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	441a      	add	r2, r3
 80069d4:	8bfb      	ldrh	r3, [r7, #30]
 80069d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	83bb      	strh	r3, [r7, #28]
 80069f8:	8bbb      	ldrh	r3, [r7, #28]
 80069fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d01b      	beq.n	8006a3a <USB_DeactivateEndpoint+0x1da>
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a18:	837b      	strh	r3, [r7, #26]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	441a      	add	r2, r3
 8006a24:	8b7b      	ldrh	r3, [r7, #26]
 8006a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a50:	833b      	strh	r3, [r7, #24]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	8b3b      	ldrh	r3, [r7, #24]
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a88:	82fb      	strh	r3, [r7, #22]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	8afb      	ldrh	r3, [r7, #22]
 8006a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac0:	82bb      	strh	r3, [r7, #20]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	441a      	add	r2, r3
 8006acc:	8abb      	ldrh	r3, [r7, #20]
 8006ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	8013      	strh	r3, [r2, #0]
 8006ae2:	e0a3      	b.n	8006c2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006af2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006af4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01b      	beq.n	8006b34 <USB_DeactivateEndpoint+0x2d4>
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b12:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	441a      	add	r2, r3
 8006b1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006b42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01b      	beq.n	8006b84 <USB_DeactivateEndpoint+0x324>
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	441a      	add	r2, r3
 8006bde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	441a      	add	r2, r3
 8006c16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3734      	adds	r7, #52	@ 0x34
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b0ac      	sub	sp, #176	@ 0xb0
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	785b      	ldrb	r3, [r3, #1]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	f040 84ca 	bne.w	80075e2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d904      	bls.n	8006c64 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c62:	e003      	b.n	8006c6c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	7b1b      	ldrb	r3, [r3, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d122      	bne.n	8006cba <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	6959      	ldr	r1, [r3, #20]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	88da      	ldrh	r2, [r3, #6]
 8006c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 febd 	bl	8007a02 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	4413      	add	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	00da      	lsls	r2, r3, #3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	801a      	strh	r2, [r3, #0]
 8006cb6:	f000 bc6f 	b.w	8007598 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	78db      	ldrb	r3, [r3, #3]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	f040 831e 	bne.w	8007300 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	f240 82cf 	bls.w	8007270 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d02:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6a1a      	ldr	r2, [r3, #32]
 8006d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 814f 	beq.w	8006fd2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d16b      	bne.n	8006e18 <USB_EPStartXfer+0x1de>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d50:	4413      	add	r3, r2
 8006d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	00da      	lsls	r2, r3, #3
 8006d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	801a      	strh	r2, [r3, #0]
 8006d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <USB_EPStartXfer+0x158>
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	e05b      	b.n	8006e4a <USB_EPStartXfer+0x210>
 8006d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d96:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d98:	d81c      	bhi.n	8006dd4 <USB_EPStartXfer+0x19a>
 8006d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d9e:	085b      	lsrs	r3, r3, #1
 8006da0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d004      	beq.n	8006dba <USB_EPStartXfer+0x180>
 8006db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006db4:	3301      	adds	r3, #1
 8006db6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	029b      	lsls	r3, r3, #10
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	e03a      	b.n	8006e4a <USB_EPStartXfer+0x210>
 8006dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <USB_EPStartXfer+0x1ba>
 8006dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dee:	3b01      	subs	r3, #1
 8006df0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	029b      	lsls	r3, r3, #10
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	4313      	orrs	r3, r2
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	801a      	strh	r2, [r3, #0]
 8006e16:	e018      	b.n	8006e4a <USB_EPStartXfer+0x210>
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d114      	bne.n	8006e4a <USB_EPStartXfer+0x210>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	4413      	add	r3, r2
 8006e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	00da      	lsls	r2, r3, #3
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	4413      	add	r3, r2
 8006e3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	895b      	ldrh	r3, [r3, #10]
 8006e4e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6959      	ldr	r1, [r3, #20]
 8006e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fdce 	bl	8007a02 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	695a      	ldr	r2, [r3, #20]
 8006e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e6e:	441a      	add	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	6a1a      	ldr	r2, [r3, #32]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d907      	bls.n	8006e90 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6a1a      	ldr	r2, [r3, #32]
 8006e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e88:	1ad2      	subs	r2, r2, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	621a      	str	r2, [r3, #32]
 8006e8e:	e006      	b.n	8006e9e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d16b      	bne.n	8006f7e <USB_EPStartXfer+0x344>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	00da      	lsls	r2, r3, #3
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <USB_EPStartXfer+0x2be>
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	e05d      	b.n	8006fb4 <USB_EPStartXfer+0x37a>
 8006ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006efc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006efe:	d81c      	bhi.n	8006f3a <USB_EPStartXfer+0x300>
 8006f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f04:	085b      	lsrs	r3, r3, #1
 8006f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <USB_EPStartXfer+0x2e6>
 8006f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	029b      	lsls	r3, r3, #10
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4313      	orrs	r3, r2
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	e03c      	b.n	8006fb4 <USB_EPStartXfer+0x37a>
 8006f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <USB_EPStartXfer+0x320>
 8006f50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f54:	3b01      	subs	r3, #1
 8006f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	029b      	lsls	r3, r3, #10
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	801a      	strh	r2, [r3, #0]
 8006f7c:	e01a      	b.n	8006fb4 <USB_EPStartXfer+0x37a>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d116      	bne.n	8006fb4 <USB_EPStartXfer+0x37a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	623b      	str	r3, [r7, #32]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	4413      	add	r3, r2
 8006f98:	623b      	str	r3, [r7, #32]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	00da      	lsls	r2, r3, #3
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	891b      	ldrh	r3, [r3, #8]
 8006fb8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6959      	ldr	r1, [r3, #20]
 8006fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fd19 	bl	8007a02 <USB_WritePMA>
 8006fd0:	e2e2      	b.n	8007598 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d16b      	bne.n	80070b2 <USB_EPStartXfer+0x478>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fea:	4413      	add	r3, r2
 8006fec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	00da      	lsls	r2, r3, #3
 8006ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007008:	b29a      	uxth	r2, r3
 800700a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800700c:	801a      	strh	r2, [r3, #0]
 800700e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10a      	bne.n	800702c <USB_EPStartXfer+0x3f2>
 8007016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007024:	b29a      	uxth	r2, r3
 8007026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007028:	801a      	strh	r2, [r3, #0]
 800702a:	e05d      	b.n	80070e8 <USB_EPStartXfer+0x4ae>
 800702c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007030:	2b3e      	cmp	r3, #62	@ 0x3e
 8007032:	d81c      	bhi.n	800706e <USB_EPStartXfer+0x434>
 8007034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007038:	085b      	lsrs	r3, r3, #1
 800703a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800703e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <USB_EPStartXfer+0x41a>
 800704a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800704e:	3301      	adds	r3, #1
 8007050:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800705e:	b29b      	uxth	r3, r3
 8007060:	029b      	lsls	r3, r3, #10
 8007062:	b29b      	uxth	r3, r3
 8007064:	4313      	orrs	r3, r2
 8007066:	b29a      	uxth	r2, r3
 8007068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800706a:	801a      	strh	r2, [r3, #0]
 800706c:	e03c      	b.n	80070e8 <USB_EPStartXfer+0x4ae>
 800706e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <USB_EPStartXfer+0x454>
 8007084:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007088:	3b01      	subs	r3, #1
 800708a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800708e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29a      	uxth	r2, r3
 8007094:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007098:	b29b      	uxth	r3, r3
 800709a:	029b      	lsls	r3, r3, #10
 800709c:	b29b      	uxth	r3, r3
 800709e:	4313      	orrs	r3, r2
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	e01a      	b.n	80070e8 <USB_EPStartXfer+0x4ae>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d116      	bne.n	80070e8 <USB_EPStartXfer+0x4ae>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070ca:	4413      	add	r3, r2
 80070cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	00da      	lsls	r2, r3, #3
 80070d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d6:	4413      	add	r3, r2
 80070d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	891b      	ldrh	r3, [r3, #8]
 80070ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	6959      	ldr	r1, [r3, #20]
 80070f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fc7f 	bl	8007a02 <USB_WritePMA>
            ep->xfer_buff += len;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	695a      	ldr	r2, [r3, #20]
 8007108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800710c:	441a      	add	r2, r3
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	429a      	cmp	r2, r3
 800711c:	d907      	bls.n	800712e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007126:	1ad2      	subs	r2, r2, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	621a      	str	r2, [r3, #32]
 800712c:	e006      	b.n	800713c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2200      	movs	r2, #0
 800713a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d16b      	bne.n	8007220 <USB_EPStartXfer+0x5e6>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007152:	b29b      	uxth	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007158:	4413      	add	r3, r2
 800715a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	00da      	lsls	r2, r3, #3
 8007162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007164:	4413      	add	r3, r2
 8007166:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800716a:	637b      	str	r3, [r7, #52]	@ 0x34
 800716c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007176:	b29a      	uxth	r2, r3
 8007178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <USB_EPStartXfer+0x560>
 8007184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800718e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007192:	b29a      	uxth	r2, r3
 8007194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007196:	801a      	strh	r2, [r3, #0]
 8007198:	e05b      	b.n	8007252 <USB_EPStartXfer+0x618>
 800719a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800719e:	2b3e      	cmp	r3, #62	@ 0x3e
 80071a0:	d81c      	bhi.n	80071dc <USB_EPStartXfer+0x5a2>
 80071a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071a6:	085b      	lsrs	r3, r3, #1
 80071a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d004      	beq.n	80071c2 <USB_EPStartXfer+0x588>
 80071b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071bc:	3301      	adds	r3, #1
 80071be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	029b      	lsls	r3, r3, #10
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d8:	801a      	strh	r2, [r3, #0]
 80071da:	e03a      	b.n	8007252 <USB_EPStartXfer+0x618>
 80071dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ea:	f003 031f 	and.w	r3, r3, #31
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d104      	bne.n	80071fc <USB_EPStartXfer+0x5c2>
 80071f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071f6:	3b01      	subs	r3, #1
 80071f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29a      	uxth	r2, r3
 8007202:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007206:	b29b      	uxth	r3, r3
 8007208:	029b      	lsls	r3, r3, #10
 800720a:	b29b      	uxth	r3, r3
 800720c:	4313      	orrs	r3, r2
 800720e:	b29b      	uxth	r3, r3
 8007210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007218:	b29a      	uxth	r2, r3
 800721a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800721c:	801a      	strh	r2, [r3, #0]
 800721e:	e018      	b.n	8007252 <USB_EPStartXfer+0x618>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d114      	bne.n	8007252 <USB_EPStartXfer+0x618>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800722e:	b29b      	uxth	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007234:	4413      	add	r3, r2
 8007236:	643b      	str	r3, [r7, #64]	@ 0x40
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	00da      	lsls	r2, r3, #3
 800723e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007240:	4413      	add	r3, r2
 8007242:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800724c:	b29a      	uxth	r2, r3
 800724e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007250:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	895b      	ldrh	r3, [r3, #10]
 8007256:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	6959      	ldr	r1, [r3, #20]
 800725e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007262:	b29b      	uxth	r3, r3
 8007264:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fbca 	bl	8007a02 <USB_WritePMA>
 800726e:	e193      	b.n	8007598 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800728a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	441a      	add	r2, r3
 800729c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80072a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072be:	b29b      	uxth	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072c4:	4413      	add	r3, r2
 80072c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	00da      	lsls	r2, r3, #3
 80072ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072d0:	4413      	add	r3, r2
 80072d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072dc:	b29a      	uxth	r2, r3
 80072de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	891b      	ldrh	r3, [r3, #8]
 80072e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	6959      	ldr	r1, [r3, #20]
 80072ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fb82 	bl	8007a02 <USB_WritePMA>
 80072fe:	e14b      	b.n	8007598 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007308:	1ad2      	subs	r2, r2, r3
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	b29b      	uxth	r3, r3
 800731c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 809a 	beq.w	800745a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	673b      	str	r3, [r7, #112]	@ 0x70
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d16b      	bne.n	800740a <USB_EPStartXfer+0x7d0>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800733c:	b29b      	uxth	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007342:	4413      	add	r3, r2
 8007344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	00da      	lsls	r2, r3, #3
 800734c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800734e:	4413      	add	r3, r2
 8007350:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007354:	667b      	str	r3, [r7, #100]	@ 0x64
 8007356:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007360:	b29a      	uxth	r2, r3
 8007362:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007364:	801a      	strh	r2, [r3, #0]
 8007366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <USB_EPStartXfer+0x74a>
 800736e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	b29b      	uxth	r3, r3
 8007374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800737c:	b29a      	uxth	r2, r3
 800737e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007380:	801a      	strh	r2, [r3, #0]
 8007382:	e05b      	b.n	800743c <USB_EPStartXfer+0x802>
 8007384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007388:	2b3e      	cmp	r3, #62	@ 0x3e
 800738a:	d81c      	bhi.n	80073c6 <USB_EPStartXfer+0x78c>
 800738c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007390:	085b      	lsrs	r3, r3, #1
 8007392:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d004      	beq.n	80073ac <USB_EPStartXfer+0x772>
 80073a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073a6:	3301      	adds	r3, #1
 80073a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	029b      	lsls	r3, r3, #10
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	4313      	orrs	r3, r2
 80073be:	b29a      	uxth	r2, r3
 80073c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	e03a      	b.n	800743c <USB_EPStartXfer+0x802>
 80073c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <USB_EPStartXfer+0x7ac>
 80073dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073e0:	3b01      	subs	r3, #1
 80073e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	029b      	lsls	r3, r3, #10
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	4313      	orrs	r3, r2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007402:	b29a      	uxth	r2, r3
 8007404:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007406:	801a      	strh	r2, [r3, #0]
 8007408:	e018      	b.n	800743c <USB_EPStartXfer+0x802>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d114      	bne.n	800743c <USB_EPStartXfer+0x802>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007418:	b29b      	uxth	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800741e:	4413      	add	r3, r2
 8007420:	673b      	str	r3, [r7, #112]	@ 0x70
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	00da      	lsls	r2, r3, #3
 8007428:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800742a:	4413      	add	r3, r2
 800742c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007430:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007436:	b29a      	uxth	r2, r3
 8007438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800743a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	895b      	ldrh	r3, [r3, #10]
 8007440:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	6959      	ldr	r1, [r3, #20]
 8007448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800744c:	b29b      	uxth	r3, r3
 800744e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fad5 	bl	8007a02 <USB_WritePMA>
 8007458:	e09e      	b.n	8007598 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d16b      	bne.n	800753a <USB_EPStartXfer+0x900>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800746c:	b29b      	uxth	r3, r3
 800746e:	461a      	mov	r2, r3
 8007470:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007472:	4413      	add	r3, r2
 8007474:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	00da      	lsls	r2, r3, #3
 800747c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800747e:	4413      	add	r3, r2
 8007480:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007486:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007490:	b29a      	uxth	r2, r3
 8007492:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <USB_EPStartXfer+0x87a>
 800749e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074b0:	801a      	strh	r2, [r3, #0]
 80074b2:	e063      	b.n	800757c <USB_EPStartXfer+0x942>
 80074b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80074ba:	d81c      	bhi.n	80074f6 <USB_EPStartXfer+0x8bc>
 80074bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <USB_EPStartXfer+0x8a2>
 80074d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80074d6:	3301      	adds	r3, #1
 80074d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	029b      	lsls	r3, r3, #10
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	4313      	orrs	r3, r2
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	e042      	b.n	800757c <USB_EPStartXfer+0x942>
 80074f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <USB_EPStartXfer+0x8dc>
 800750c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007510:	3b01      	subs	r3, #1
 8007512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29a      	uxth	r2, r3
 800751c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007520:	b29b      	uxth	r3, r3
 8007522:	029b      	lsls	r3, r3, #10
 8007524:	b29b      	uxth	r3, r3
 8007526:	4313      	orrs	r3, r2
 8007528:	b29b      	uxth	r3, r3
 800752a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800752e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007532:	b29a      	uxth	r2, r3
 8007534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007536:	801a      	strh	r2, [r3, #0]
 8007538:	e020      	b.n	800757c <USB_EPStartXfer+0x942>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	785b      	ldrb	r3, [r3, #1]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d11c      	bne.n	800757c <USB_EPStartXfer+0x942>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800754e:	b29b      	uxth	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007556:	4413      	add	r3, r2
 8007558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	00da      	lsls	r2, r3, #3
 8007562:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007566:	4413      	add	r3, r2
 8007568:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800756c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007574:	b29a      	uxth	r2, r3
 8007576:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800757a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	891b      	ldrh	r3, [r3, #8]
 8007580:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	6959      	ldr	r1, [r3, #20]
 8007588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800758c:	b29b      	uxth	r3, r3
 800758e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fa35 	bl	8007a02 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075ae:	817b      	strh	r3, [r7, #10]
 80075b0:	897b      	ldrh	r3, [r7, #10]
 80075b2:	f083 0310 	eor.w	r3, r3, #16
 80075b6:	817b      	strh	r3, [r7, #10]
 80075b8:	897b      	ldrh	r3, [r7, #10]
 80075ba:	f083 0320 	eor.w	r3, r3, #32
 80075be:	817b      	strh	r3, [r7, #10]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	897b      	ldrh	r3, [r7, #10]
 80075cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075dc:	b29b      	uxth	r3, r3
 80075de:	8013      	strh	r3, [r2, #0]
 80075e0:	e0d5      	b.n	800778e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	7b1b      	ldrb	r3, [r3, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d156      	bne.n	8007698 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d122      	bne.n	8007638 <USB_EPStartXfer+0x9fe>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	78db      	ldrb	r3, [r3, #3]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d11e      	bne.n	8007638 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800760c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007610:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	441a      	add	r2, r3
 800761e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800762a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800762e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007632:	b29b      	uxth	r3, r3
 8007634:	8013      	strh	r3, [r2, #0]
 8007636:	e01d      	b.n	8007674 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800764a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	441a      	add	r2, r3
 800765c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007664:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800766c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007670:	b29b      	uxth	r3, r3
 8007672:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	699a      	ldr	r2, [r3, #24]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	429a      	cmp	r2, r3
 800767e:	d907      	bls.n	8007690 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	699a      	ldr	r2, [r3, #24]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	1ad2      	subs	r2, r2, r3
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	619a      	str	r2, [r3, #24]
 800768e:	e054      	b.n	800773a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	619a      	str	r2, [r3, #24]
 8007696:	e050      	b.n	800773a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	78db      	ldrb	r3, [r3, #3]
 800769c:	2b02      	cmp	r3, #2
 800769e:	d142      	bne.n	8007726 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d048      	beq.n	800773a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80076bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <USB_EPStartXfer+0xa96>
 80076c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80076c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80076d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d12e      	bne.n	800773a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80076e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d128      	bne.n	800773a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076fe:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	441a      	add	r2, r3
 800770c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007710:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007714:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800771c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007720:	b29b      	uxth	r3, r3
 8007722:	8013      	strh	r3, [r2, #0]
 8007724:	e009      	b.n	800773a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	78db      	ldrb	r3, [r3, #3]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d103      	bne.n	8007736 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2200      	movs	r2, #0
 8007732:	619a      	str	r2, [r3, #24]
 8007734:	e001      	b.n	800773a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e02a      	b.n	8007790 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800774c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007750:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007754:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007758:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800775c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007760:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007764:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007768:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	441a      	add	r2, r3
 8007776:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800777a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800777e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778a:	b29b      	uxth	r3, r3
 800778c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	37b0      	adds	r7, #176	@ 0xb0
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d020      	beq.n	80077ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077c0:	81bb      	strh	r3, [r7, #12]
 80077c2:	89bb      	ldrh	r3, [r7, #12]
 80077c4:	f083 0310 	eor.w	r3, r3, #16
 80077c8:	81bb      	strh	r3, [r7, #12]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	441a      	add	r2, r3
 80077d4:	89bb      	ldrh	r3, [r7, #12]
 80077d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	8013      	strh	r3, [r2, #0]
 80077ea:	e01f      	b.n	800782c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007802:	81fb      	strh	r3, [r7, #14]
 8007804:	89fb      	ldrh	r3, [r7, #14]
 8007806:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800780a:	81fb      	strh	r3, [r7, #14]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	441a      	add	r2, r3
 8007816:	89fb      	ldrh	r3, [r7, #14]
 8007818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800781c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007828:	b29b      	uxth	r3, r3
 800782a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800783a:	b480      	push	{r7}
 800783c:	b087      	sub	sp, #28
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d04c      	beq.n	80078e6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	823b      	strh	r3, [r7, #16]
 800785a:	8a3b      	ldrh	r3, [r7, #16]
 800785c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007860:	2b00      	cmp	r3, #0
 8007862:	d01b      	beq.n	800789c <USB_EPClearStall+0x62>
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29b      	uxth	r3, r3
 8007872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800787a:	81fb      	strh	r3, [r7, #14]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	441a      	add	r2, r3
 8007886:	89fb      	ldrh	r3, [r7, #14]
 8007888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800788c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007894:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007898:	b29b      	uxth	r3, r3
 800789a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	78db      	ldrb	r3, [r3, #3]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d06c      	beq.n	800797e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078ba:	81bb      	strh	r3, [r7, #12]
 80078bc:	89bb      	ldrh	r3, [r7, #12]
 80078be:	f083 0320 	eor.w	r3, r3, #32
 80078c2:	81bb      	strh	r3, [r7, #12]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	441a      	add	r2, r3
 80078ce:	89bb      	ldrh	r3, [r7, #12]
 80078d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	8013      	strh	r3, [r2, #0]
 80078e4:	e04b      	b.n	800797e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	82fb      	strh	r3, [r7, #22]
 80078f4:	8afb      	ldrh	r3, [r7, #22]
 80078f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01b      	beq.n	8007936 <USB_EPClearStall+0xfc>
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007914:	82bb      	strh	r3, [r7, #20]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	441a      	add	r2, r3
 8007920:	8abb      	ldrh	r3, [r7, #20]
 8007922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800792a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800792e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007932:	b29b      	uxth	r3, r3
 8007934:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800794c:	827b      	strh	r3, [r7, #18]
 800794e:	8a7b      	ldrh	r3, [r7, #18]
 8007950:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007954:	827b      	strh	r3, [r7, #18]
 8007956:	8a7b      	ldrh	r3, [r7, #18]
 8007958:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800795c:	827b      	strh	r3, [r7, #18]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	441a      	add	r2, r3
 8007968:	8a7b      	ldrh	r3, [r7, #18]
 800796a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800796e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800797a:	b29b      	uxth	r3, r3
 800797c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d103      	bne.n	80079a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2280      	movs	r2, #128	@ 0x80
 80079a2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80079f4:	68fb      	ldr	r3, [r7, #12]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b08b      	sub	sp, #44	@ 0x2c
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	461a      	mov	r2, r3
 8007a10:	460b      	mov	r3, r1
 8007a12:	80fb      	strh	r3, [r7, #6]
 8007a14:	4613      	mov	r3, r2
 8007a16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a18:	88bb      	ldrh	r3, [r7, #4]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	085b      	lsrs	r3, r3, #1
 8007a1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a28:	88fa      	ldrh	r2, [r7, #6]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a32:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a38:	e01b      	b.n	8007a72 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	3301      	adds	r3, #1
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	b21a      	sxth	r2, r3
 8007a4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	b21b      	sxth	r3, r3
 8007a52:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	8a7a      	ldrh	r2, [r7, #18]
 8007a58:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	3302      	adds	r3, #2
 8007a5e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	3301      	adds	r3, #1
 8007a64:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e0      	bne.n	8007a3a <USB_WritePMA+0x38>
  }
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	372c      	adds	r7, #44	@ 0x2c
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b08b      	sub	sp, #44	@ 0x2c
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	4611      	mov	r1, r2
 8007a92:	461a      	mov	r2, r3
 8007a94:	460b      	mov	r3, r1
 8007a96:	80fb      	strh	r3, [r7, #6]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a9c:	88bb      	ldrh	r3, [r7, #4]
 8007a9e:	085b      	lsrs	r3, r3, #1
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007aac:	88fa      	ldrh	r2, [r7, #6]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ab6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007abc:	e018      	b.n	8007af0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	3302      	adds	r3, #2
 8007aca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	3b01      	subs	r3, #1
 8007aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8007af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1e3      	bne.n	8007abe <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007af6:	88bb      	ldrh	r3, [r7, #4]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d007      	beq.n	8007b12 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	701a      	strb	r2, [r3, #0]
  }
}
 8007b12:	bf00      	nop
 8007b14:	372c      	adds	r7, #44	@ 0x2c
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b2a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b2e:	f002 fb25 	bl	800a17c <USBD_static_malloc>
 8007b32:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d105      	bne.n	8007b46 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b42:	2302      	movs	r3, #2
 8007b44:	e066      	b.n	8007c14 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7c1b      	ldrb	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d119      	bne.n	8007b8a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	2181      	movs	r1, #129	@ 0x81
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f002 f9b3 	bl	8009eca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b6e:	2202      	movs	r2, #2
 8007b70:	2101      	movs	r1, #1
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f002 f9a9 	bl	8009eca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2210      	movs	r2, #16
 8007b84:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8007b88:	e016      	b.n	8007bb8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b8a:	2340      	movs	r3, #64	@ 0x40
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	2181      	movs	r1, #129	@ 0x81
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f002 f99a 	bl	8009eca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b9c:	2340      	movs	r3, #64	@ 0x40
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f002 f991 	bl	8009eca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2210      	movs	r2, #16
 8007bb4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bb8:	2308      	movs	r3, #8
 8007bba:	2203      	movs	r2, #3
 8007bbc:	2182      	movs	r1, #130	@ 0x82
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f002 f983 	bl	8009eca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7c1b      	ldrb	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f002 fa54 	bl	800a0a8 <USBD_LL_PrepareReceive>
 8007c00:	e007      	b.n	8007c12 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c08:	2340      	movs	r3, #64	@ 0x40
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f002 fa4b 	bl	800a0a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c28:	2181      	movs	r1, #129	@ 0x81
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f002 f973 	bl	8009f16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c36:	2101      	movs	r1, #1
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f002 f96c 	bl	8009f16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c46:	2182      	movs	r1, #130	@ 0x82
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f002 f964 	bl	8009f16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00e      	beq.n	8007c86 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f002 fa8d 	bl	800a198 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ca0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e0af      	b.n	8007e18 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d03f      	beq.n	8007d44 <USBD_CDC_Setup+0xb4>
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	f040 809f 	bne.w	8007e08 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	88db      	ldrh	r3, [r3, #6]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d02e      	beq.n	8007d30 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	b25b      	sxtb	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	da16      	bge.n	8007d0a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007ce8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	88d2      	ldrh	r2, [r2, #6]
 8007cee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	88db      	ldrh	r3, [r3, #6]
 8007cf4:	2b07      	cmp	r3, #7
 8007cf6:	bf28      	it	cs
 8007cf8:	2307      	movcs	r3, #7
 8007cfa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	89fa      	ldrh	r2, [r7, #14]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 facd 	bl	80092a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007d08:	e085      	b.n	8007e16 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	785a      	ldrb	r2, [r3, #1]
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	88db      	ldrh	r3, [r3, #6]
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d20:	6939      	ldr	r1, [r7, #16]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	88db      	ldrh	r3, [r3, #6]
 8007d26:	461a      	mov	r2, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 fae6 	bl	80092fa <USBD_CtlPrepareRx>
      break;
 8007d2e:	e072      	b.n	8007e16 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	7850      	ldrb	r0, [r2, #1]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	4798      	blx	r3
      break;
 8007d42:	e068      	b.n	8007e16 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	785b      	ldrb	r3, [r3, #1]
 8007d48:	2b0b      	cmp	r3, #11
 8007d4a:	d852      	bhi.n	8007df2 <USBD_CDC_Setup+0x162>
 8007d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d54 <USBD_CDC_Setup+0xc4>)
 8007d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d52:	bf00      	nop
 8007d54:	08007d85 	.word	0x08007d85
 8007d58:	08007e01 	.word	0x08007e01
 8007d5c:	08007df3 	.word	0x08007df3
 8007d60:	08007df3 	.word	0x08007df3
 8007d64:	08007df3 	.word	0x08007df3
 8007d68:	08007df3 	.word	0x08007df3
 8007d6c:	08007df3 	.word	0x08007df3
 8007d70:	08007df3 	.word	0x08007df3
 8007d74:	08007df3 	.word	0x08007df3
 8007d78:	08007df3 	.word	0x08007df3
 8007d7c:	08007daf 	.word	0x08007daf
 8007d80:	08007dd9 	.word	0x08007dd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d107      	bne.n	8007da0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d90:	f107 030a 	add.w	r3, r7, #10
 8007d94:	2202      	movs	r2, #2
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 fa82 	bl	80092a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d9e:	e032      	b.n	8007e06 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fa0c 	bl	80091c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007da8:	2303      	movs	r3, #3
 8007daa:	75fb      	strb	r3, [r7, #23]
          break;
 8007dac:	e02b      	b.n	8007e06 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d107      	bne.n	8007dca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007dba:	f107 030d 	add.w	r3, r7, #13
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fa6d 	bl	80092a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dc8:	e01d      	b.n	8007e06 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 f9f7 	bl	80091c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	75fb      	strb	r3, [r7, #23]
          break;
 8007dd6:	e016      	b.n	8007e06 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d00f      	beq.n	8007e04 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 f9ea 	bl	80091c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dec:	2303      	movs	r3, #3
 8007dee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007df0:	e008      	b.n	8007e04 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 f9e3 	bl	80091c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dfe:	e002      	b.n	8007e06 <USBD_CDC_Setup+0x176>
          break;
 8007e00:	bf00      	nop
 8007e02:	e008      	b.n	8007e16 <USBD_CDC_Setup+0x186>
          break;
 8007e04:	bf00      	nop
      }
      break;
 8007e06:	e006      	b.n	8007e16 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 f9d8 	bl	80091c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e10:	2303      	movs	r3, #3
 8007e12:	75fb      	strb	r3, [r7, #23]
      break;
 8007e14:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007e32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e04f      	b.n	8007ee2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e4a:	78fa      	ldrb	r2, [r7, #3]
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	440b      	add	r3, r1
 8007e58:	3318      	adds	r3, #24
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d029      	beq.n	8007eb4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e60:	78fa      	ldrb	r2, [r7, #3]
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	3318      	adds	r3, #24
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	78f9      	ldrb	r1, [r7, #3]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	460b      	mov	r3, r1
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	4403      	add	r3, r0
 8007e80:	3320      	adds	r3, #32
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e88:	fb01 f303 	mul.w	r3, r1, r3
 8007e8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d110      	bne.n	8007eb4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	3318      	adds	r3, #24
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ea6:	78f9      	ldrb	r1, [r7, #3]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	2200      	movs	r2, #0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f002 f8da 	bl	800a066 <USBD_LL_Transmit>
 8007eb2:	e015      	b.n	8007ee0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007efc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e015      	b.n	8007f38 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f002 f8ea 	bl	800a0ea <USBD_LL_GetRxDataSize>
 8007f16:	4602      	mov	r2, r0
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007f32:	4611      	mov	r1, r2
 8007f34:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e01a      	b.n	8007f90 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d014      	beq.n	8007f8e <USBD_CDC_EP0_RxReady+0x4e>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007f6a:	2bff      	cmp	r3, #255	@ 0xff
 8007f6c:	d00f      	beq.n	8007f8e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8007f7c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f84:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	22ff      	movs	r2, #255	@ 0xff
 8007f8a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2243      	movs	r2, #67	@ 0x43
 8007fa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007fa6:	4b03      	ldr	r3, [pc, #12]	@ (8007fb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	20000094 	.word	0x20000094

08007fb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2243      	movs	r2, #67	@ 0x43
 8007fc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007fc6:	4b03      	ldr	r3, [pc, #12]	@ (8007fd4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	20000050 	.word	0x20000050

08007fd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2243      	movs	r2, #67	@ 0x43
 8007fe4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007fe6:	4b03      	ldr	r3, [pc, #12]	@ (8007ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	200000d8 	.word	0x200000d8

08007ff8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	220a      	movs	r2, #10
 8008004:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008006:	4b03      	ldr	r3, [pc, #12]	@ (8008014 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	2000000c 	.word	0x2000000c

08008018 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008028:	2303      	movs	r3, #3
 800802a:	e004      	b.n	8008036 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008042:	b480      	push	{r7}
 8008044:	b087      	sub	sp, #28
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008054:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800805c:	2303      	movs	r3, #3
 800805e:	e008      	b.n	8008072 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800808e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008096:	2303      	movs	r3, #3
 8008098:	e004      	b.n	80080a4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080be:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e01a      	b.n	8008108 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d114      	bne.n	8008106 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2201      	movs	r2, #1
 80080e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80080fa:	2181      	movs	r1, #129	@ 0x81
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 ffb2 	bl	800a066 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800811e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	e016      	b.n	800815c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	7c1b      	ldrb	r3, [r3, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d109      	bne.n	800814a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800813c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008140:	2101      	movs	r1, #1
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 ffb0 	bl	800a0a8 <USBD_LL_PrepareReceive>
 8008148:	e007      	b.n	800815a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008150:	2340      	movs	r3, #64	@ 0x40
 8008152:	2101      	movs	r1, #1
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 ffa7 	bl	800a0a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	4613      	mov	r3, r2
 8008170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	e01f      	b.n	80081bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	79fa      	ldrb	r2, [r7, #7]
 80081ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f001 fe0f 	bl	8009dd4 <USBD_LL_Init>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	e016      	b.n	800820a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f8:	f107 020e 	add.w	r2, r7, #14
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	4602      	mov	r2, r0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fe3a 	bl	8009e94 <USBD_LL_Start>
 8008220:	4603      	mov	r3, r0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008256:	2b00      	cmp	r3, #0
 8008258:	d009      	beq.n	800826e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	4611      	mov	r1, r2
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	4798      	blx	r3
 800826a:	4603      	mov	r3, r0
 800826c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	4611      	mov	r1, r2
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
  }

  return USBD_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 ff46 	bl	800914c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80082ce:	461a      	mov	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082dc:	f003 031f 	and.w	r3, r3, #31
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d01a      	beq.n	800831a <USBD_LL_SetupStage+0x72>
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d822      	bhi.n	800832e <USBD_LL_SetupStage+0x86>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <USBD_LL_SetupStage+0x4a>
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d00a      	beq.n	8008306 <USBD_LL_SetupStage+0x5e>
 80082f0:	e01d      	b.n	800832e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f9ee 	bl	80086dc <USBD_StdDevReq>
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]
      break;
 8008304:	e020      	b.n	8008348 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa52 	bl	80087b8 <USBD_StdItfReq>
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]
      break;
 8008318:	e016      	b.n	8008348 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fa91 	bl	800884a <USBD_StdEPReq>
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]
      break;
 800832c:	e00c      	b.n	8008348 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008334:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008338:	b2db      	uxtb	r3, r3
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 fe09 	bl	8009f54 <USBD_LL_StallEP>
 8008342:	4603      	mov	r3, r0
 8008344:	73fb      	strb	r3, [r7, #15]
      break;
 8008346:	bf00      	nop
  }

  return ret;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b086      	sub	sp, #24
 8008356:	af00      	add	r7, sp, #0
 8008358:	60f8      	str	r0, [r7, #12]
 800835a:	460b      	mov	r3, r1
 800835c:	607a      	str	r2, [r7, #4]
 800835e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008360:	7afb      	ldrb	r3, [r7, #11]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d138      	bne.n	80083d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800836c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008374:	2b03      	cmp	r3, #3
 8008376:	d14a      	bne.n	800840e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	429a      	cmp	r2, r3
 8008382:	d913      	bls.n	80083ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	1ad2      	subs	r2, r2, r3
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	4293      	cmp	r3, r2
 800839c:	bf28      	it	cs
 800839e:	4613      	movcs	r3, r2
 80083a0:	461a      	mov	r2, r3
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 ffc5 	bl	8009334 <USBD_CtlContinueRx>
 80083aa:	e030      	b.n	800840e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d10b      	bne.n	80083d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 ffc0 	bl	8009356 <USBD_CtlSendStatus>
 80083d6:	e01a      	b.n	800840e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d114      	bne.n	800840e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00e      	beq.n	800840e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	7afa      	ldrb	r2, [r7, #11]
 80083fa:	4611      	mov	r1, r2
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	4798      	blx	r3
 8008400:	4603      	mov	r3, r0
 8008402:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	e000      	b.n	8008410 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	460b      	mov	r3, r1
 8008422:	607a      	str	r2, [r7, #4]
 8008424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008426:	7afb      	ldrb	r3, [r7, #11]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d16b      	bne.n	8008504 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3314      	adds	r3, #20
 8008430:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008438:	2b02      	cmp	r3, #2
 800843a:	d156      	bne.n	80084ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	429a      	cmp	r2, r3
 8008446:	d914      	bls.n	8008472 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	1ad2      	subs	r2, r2, r3
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	461a      	mov	r2, r3
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 ff3a 	bl	80092d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008464:	2300      	movs	r3, #0
 8008466:	2200      	movs	r2, #0
 8008468:	2100      	movs	r1, #0
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f001 fe1c 	bl	800a0a8 <USBD_LL_PrepareReceive>
 8008470:	e03b      	b.n	80084ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	429a      	cmp	r2, r3
 800847c:	d11c      	bne.n	80084b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008486:	429a      	cmp	r2, r3
 8008488:	d316      	bcc.n	80084b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008494:	429a      	cmp	r2, r3
 8008496:	d20f      	bcs.n	80084b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008498:	2200      	movs	r2, #0
 800849a:	2100      	movs	r1, #0
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 ff1b 	bl	80092d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084aa:	2300      	movs	r3, #0
 80084ac:	2200      	movs	r2, #0
 80084ae:	2100      	movs	r1, #0
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f001 fdf9 	bl	800a0a8 <USBD_LL_PrepareReceive>
 80084b6:	e018      	b.n	80084ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d10b      	bne.n	80084dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084dc:	2180      	movs	r1, #128	@ 0x80
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f001 fd38 	bl	8009f54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 ff49 	bl	800937c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d122      	bne.n	800853a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7ff fe98 	bl	800822a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008502:	e01a      	b.n	800853a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b03      	cmp	r3, #3
 800850e:	d114      	bne.n	800853a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00e      	beq.n	800853a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	7afa      	ldrb	r2, [r7, #11]
 8008526:	4611      	mov	r1, r2
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	4798      	blx	r3
 800852c:	4603      	mov	r3, r0
 800852e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008530:	7dfb      	ldrb	r3, [r7, #23]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	e000      	b.n	800853c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008574:	2303      	movs	r3, #3
 8008576:	e02f      	b.n	80085d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00f      	beq.n	80085a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6852      	ldr	r2, [r2, #4]
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	4611      	mov	r1, r2
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085a2:	2340      	movs	r3, #64	@ 0x40
 80085a4:	2200      	movs	r2, #0
 80085a6:	2100      	movs	r1, #0
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 fc8e 	bl	8009eca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2240      	movs	r2, #64	@ 0x40
 80085ba:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085be:	2340      	movs	r3, #64	@ 0x40
 80085c0:	2200      	movs	r2, #0
 80085c2:	2180      	movs	r1, #128	@ 0x80
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 fc80 	bl	8009eca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2240      	movs	r2, #64	@ 0x40
 80085d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	78fa      	ldrb	r2, [r7, #3]
 80085f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800860e:	b2da      	uxtb	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2204      	movs	r2, #4
 800861a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b04      	cmp	r3, #4
 800863e:	d106      	bne.n	800864e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008646:	b2da      	uxtb	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800866e:	2303      	movs	r3, #3
 8008670:	e012      	b.n	8008698 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b03      	cmp	r3, #3
 800867c:	d10b      	bne.n	8008696 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d005      	beq.n	8008696 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	3301      	adds	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086be:	8a3b      	ldrh	r3, [r7, #16]
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	b21a      	sxth	r2, r3
 80086c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b21b      	sxth	r3, r3
 80086cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086ce:	89fb      	ldrh	r3, [r7, #14]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	371c      	adds	r7, #28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086f2:	2b40      	cmp	r3, #64	@ 0x40
 80086f4:	d005      	beq.n	8008702 <USBD_StdDevReq+0x26>
 80086f6:	2b40      	cmp	r3, #64	@ 0x40
 80086f8:	d853      	bhi.n	80087a2 <USBD_StdDevReq+0xc6>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00b      	beq.n	8008716 <USBD_StdDevReq+0x3a>
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d14f      	bne.n	80087a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
      break;
 8008714:	e04a      	b.n	80087ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	2b09      	cmp	r3, #9
 800871c:	d83b      	bhi.n	8008796 <USBD_StdDevReq+0xba>
 800871e:	a201      	add	r2, pc, #4	@ (adr r2, 8008724 <USBD_StdDevReq+0x48>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008779 	.word	0x08008779
 8008728:	0800878d 	.word	0x0800878d
 800872c:	08008797 	.word	0x08008797
 8008730:	08008783 	.word	0x08008783
 8008734:	08008797 	.word	0x08008797
 8008738:	08008757 	.word	0x08008757
 800873c:	0800874d 	.word	0x0800874d
 8008740:	08008797 	.word	0x08008797
 8008744:	0800876f 	.word	0x0800876f
 8008748:	08008761 	.word	0x08008761
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f9de 	bl	8008b10 <USBD_GetDescriptor>
          break;
 8008754:	e024      	b.n	80087a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fb6d 	bl	8008e38 <USBD_SetAddress>
          break;
 800875e:	e01f      	b.n	80087a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fbac 	bl	8008ec0 <USBD_SetConfig>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
          break;
 800876c:	e018      	b.n	80087a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fc4b 	bl	800900c <USBD_GetConfig>
          break;
 8008776:	e013      	b.n	80087a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fc7c 	bl	8009078 <USBD_GetStatus>
          break;
 8008780:	e00e      	b.n	80087a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fcab 	bl	80090e0 <USBD_SetFeature>
          break;
 800878a:	e009      	b.n	80087a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fcba 	bl	8009108 <USBD_ClrFeature>
          break;
 8008794:	e004      	b.n	80087a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fd11 	bl	80091c0 <USBD_CtlError>
          break;
 800879e:	bf00      	nop
      }
      break;
 80087a0:	e004      	b.n	80087ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fd0b 	bl	80091c0 <USBD_CtlError>
      break;
 80087aa:	bf00      	nop
  }

  return ret;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop

080087b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087ce:	2b40      	cmp	r3, #64	@ 0x40
 80087d0:	d005      	beq.n	80087de <USBD_StdItfReq+0x26>
 80087d2:	2b40      	cmp	r3, #64	@ 0x40
 80087d4:	d82f      	bhi.n	8008836 <USBD_StdItfReq+0x7e>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <USBD_StdItfReq+0x26>
 80087da:	2b20      	cmp	r3, #32
 80087dc:	d12b      	bne.n	8008836 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d81d      	bhi.n	8008828 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	889b      	ldrh	r3, [r3, #4]
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d813      	bhi.n	800881e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	4798      	blx	r3
 8008804:	4603      	mov	r3, r0
 8008806:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	88db      	ldrh	r3, [r3, #6]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d110      	bne.n	8008832 <USBD_StdItfReq+0x7a>
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10d      	bne.n	8008832 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fd9d 	bl	8009356 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800881c:	e009      	b.n	8008832 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fccd 	bl	80091c0 <USBD_CtlError>
          break;
 8008826:	e004      	b.n	8008832 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fcc8 	bl	80091c0 <USBD_CtlError>
          break;
 8008830:	e000      	b.n	8008834 <USBD_StdItfReq+0x7c>
          break;
 8008832:	bf00      	nop
      }
      break;
 8008834:	e004      	b.n	8008840 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fcc1 	bl	80091c0 <USBD_CtlError>
      break;
 800883e:	bf00      	nop
  }

  return ret;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	889b      	ldrh	r3, [r3, #4]
 800885c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008866:	2b40      	cmp	r3, #64	@ 0x40
 8008868:	d007      	beq.n	800887a <USBD_StdEPReq+0x30>
 800886a:	2b40      	cmp	r3, #64	@ 0x40
 800886c:	f200 8145 	bhi.w	8008afa <USBD_StdEPReq+0x2b0>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00c      	beq.n	800888e <USBD_StdEPReq+0x44>
 8008874:	2b20      	cmp	r3, #32
 8008876:	f040 8140 	bne.w	8008afa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	4798      	blx	r3
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]
      break;
 800888c:	e13a      	b.n	8008b04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	785b      	ldrb	r3, [r3, #1]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d007      	beq.n	80088a6 <USBD_StdEPReq+0x5c>
 8008896:	2b03      	cmp	r3, #3
 8008898:	f300 8129 	bgt.w	8008aee <USBD_StdEPReq+0x2a4>
 800889c:	2b00      	cmp	r3, #0
 800889e:	d07f      	beq.n	80089a0 <USBD_StdEPReq+0x156>
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d03c      	beq.n	800891e <USBD_StdEPReq+0xd4>
 80088a4:	e123      	b.n	8008aee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d002      	beq.n	80088b8 <USBD_StdEPReq+0x6e>
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d016      	beq.n	80088e4 <USBD_StdEPReq+0x9a>
 80088b6:	e02c      	b.n	8008912 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00d      	beq.n	80088da <USBD_StdEPReq+0x90>
 80088be:	7bbb      	ldrb	r3, [r7, #14]
 80088c0:	2b80      	cmp	r3, #128	@ 0x80
 80088c2:	d00a      	beq.n	80088da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 fb43 	bl	8009f54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ce:	2180      	movs	r1, #128	@ 0x80
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 fb3f 	bl	8009f54 <USBD_LL_StallEP>
 80088d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088d8:	e020      	b.n	800891c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fc6f 	bl	80091c0 <USBD_CtlError>
              break;
 80088e2:	e01b      	b.n	800891c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	885b      	ldrh	r3, [r3, #2]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10e      	bne.n	800890a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00b      	beq.n	800890a <USBD_StdEPReq+0xc0>
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b80      	cmp	r3, #128	@ 0x80
 80088f6:	d008      	beq.n	800890a <USBD_StdEPReq+0xc0>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	88db      	ldrh	r3, [r3, #6]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d104      	bne.n	800890a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 fb25 	bl	8009f54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fd23 	bl	8009356 <USBD_CtlSendStatus>

              break;
 8008910:	e004      	b.n	800891c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fc53 	bl	80091c0 <USBD_CtlError>
              break;
 800891a:	bf00      	nop
          }
          break;
 800891c:	e0ec      	b.n	8008af8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b02      	cmp	r3, #2
 8008928:	d002      	beq.n	8008930 <USBD_StdEPReq+0xe6>
 800892a:	2b03      	cmp	r3, #3
 800892c:	d016      	beq.n	800895c <USBD_StdEPReq+0x112>
 800892e:	e030      	b.n	8008992 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00d      	beq.n	8008952 <USBD_StdEPReq+0x108>
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	2b80      	cmp	r3, #128	@ 0x80
 800893a:	d00a      	beq.n	8008952 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 fb07 	bl	8009f54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008946:	2180      	movs	r1, #128	@ 0x80
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 fb03 	bl	8009f54 <USBD_LL_StallEP>
 800894e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008950:	e025      	b.n	800899e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fc33 	bl	80091c0 <USBD_CtlError>
              break;
 800895a:	e020      	b.n	800899e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	885b      	ldrh	r3, [r3, #2]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d11b      	bne.n	800899c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008964:	7bbb      	ldrb	r3, [r7, #14]
 8008966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800896a:	2b00      	cmp	r3, #0
 800896c:	d004      	beq.n	8008978 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800896e:	7bbb      	ldrb	r3, [r7, #14]
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 fb0d 	bl	8009f92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fcec 	bl	8009356 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	4798      	blx	r3
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008990:	e004      	b.n	800899c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fc13 	bl	80091c0 <USBD_CtlError>
              break;
 800899a:	e000      	b.n	800899e <USBD_StdEPReq+0x154>
              break;
 800899c:	bf00      	nop
          }
          break;
 800899e:	e0ab      	b.n	8008af8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d002      	beq.n	80089b2 <USBD_StdEPReq+0x168>
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d032      	beq.n	8008a16 <USBD_StdEPReq+0x1cc>
 80089b0:	e097      	b.n	8008ae2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d007      	beq.n	80089c8 <USBD_StdEPReq+0x17e>
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b80      	cmp	r3, #128	@ 0x80
 80089bc:	d004      	beq.n	80089c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fbfd 	bl	80091c0 <USBD_CtlError>
                break;
 80089c6:	e091      	b.n	8008aec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	da0b      	bge.n	80089e8 <USBD_StdEPReq+0x19e>
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
 80089d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089d6:	4613      	mov	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	3310      	adds	r3, #16
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	4413      	add	r3, r2
 80089e4:	3304      	adds	r3, #4
 80089e6:	e00b      	b.n	8008a00 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ee:	4613      	mov	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fc47 	bl	80092a2 <USBD_CtlSendData>
              break;
 8008a14:	e06a      	b.n	8008aec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	da11      	bge.n	8008a42 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	f003 020f 	and.w	r2, r3, #15
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	440b      	add	r3, r1
 8008a30:	3324      	adds	r3, #36	@ 0x24
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d117      	bne.n	8008a68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fbc0 	bl	80091c0 <USBD_CtlError>
                  break;
 8008a40:	e054      	b.n	8008aec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	f003 020f 	and.w	r2, r3, #15
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	440b      	add	r3, r1
 8008a54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d104      	bne.n	8008a68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fbad 	bl	80091c0 <USBD_CtlError>
                  break;
 8008a66:	e041      	b.n	8008aec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	da0b      	bge.n	8008a88 <USBD_StdEPReq+0x23e>
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a76:	4613      	mov	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	3310      	adds	r3, #16
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	4413      	add	r3, r2
 8008a84:	3304      	adds	r3, #4
 8008a86:	e00b      	b.n	8008aa0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <USBD_StdEPReq+0x264>
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	2b80      	cmp	r3, #128	@ 0x80
 8008aac:	d103      	bne.n	8008ab6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	e00e      	b.n	8008ad4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 fa88 	bl	8009fd0 <USBD_LL_IsStallEP>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	e002      	b.n	8008ad4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fbe1 	bl	80092a2 <USBD_CtlSendData>
              break;
 8008ae0:	e004      	b.n	8008aec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fb6b 	bl	80091c0 <USBD_CtlError>
              break;
 8008aea:	bf00      	nop
          }
          break;
 8008aec:	e004      	b.n	8008af8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fb65 	bl	80091c0 <USBD_CtlError>
          break;
 8008af6:	bf00      	nop
      }
      break;
 8008af8:	e004      	b.n	8008b04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fb5f 	bl	80091c0 <USBD_CtlError>
      break;
 8008b02:	bf00      	nop
  }

  return ret;
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	885b      	ldrh	r3, [r3, #2]
 8008b2a:	0a1b      	lsrs	r3, r3, #8
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	2b0e      	cmp	r3, #14
 8008b32:	f200 8152 	bhi.w	8008dda <USBD_GetDescriptor+0x2ca>
 8008b36:	a201      	add	r2, pc, #4	@ (adr r2, 8008b3c <USBD_GetDescriptor+0x2c>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008bad 	.word	0x08008bad
 8008b40:	08008bc5 	.word	0x08008bc5
 8008b44:	08008c05 	.word	0x08008c05
 8008b48:	08008ddb 	.word	0x08008ddb
 8008b4c:	08008ddb 	.word	0x08008ddb
 8008b50:	08008d7b 	.word	0x08008d7b
 8008b54:	08008da7 	.word	0x08008da7
 8008b58:	08008ddb 	.word	0x08008ddb
 8008b5c:	08008ddb 	.word	0x08008ddb
 8008b60:	08008ddb 	.word	0x08008ddb
 8008b64:	08008ddb 	.word	0x08008ddb
 8008b68:	08008ddb 	.word	0x08008ddb
 8008b6c:	08008ddb 	.word	0x08008ddb
 8008b70:	08008ddb 	.word	0x08008ddb
 8008b74:	08008b79 	.word	0x08008b79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	7c12      	ldrb	r2, [r2, #16]
 8008b90:	f107 0108 	add.w	r1, r7, #8
 8008b94:	4610      	mov	r0, r2
 8008b96:	4798      	blx	r3
 8008b98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b9a:	e126      	b.n	8008dea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fb0e 	bl	80091c0 <USBD_CtlError>
        err++;
 8008ba4:	7afb      	ldrb	r3, [r7, #11]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	72fb      	strb	r3, [r7, #11]
      break;
 8008baa:	e11e      	b.n	8008dea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	7c12      	ldrb	r2, [r2, #16]
 8008bb8:	f107 0108 	add.w	r1, r7, #8
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	60f8      	str	r0, [r7, #12]
      break;
 8008bc2:	e112      	b.n	8008dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7c1b      	ldrb	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10d      	bne.n	8008be8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd4:	f107 0208 	add.w	r2, r7, #8
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
 8008bdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	2202      	movs	r2, #2
 8008be4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008be6:	e100      	b.n	8008dea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	f107 0208 	add.w	r2, r7, #8
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
 8008bf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	2202      	movs	r2, #2
 8008c00:	701a      	strb	r2, [r3, #0]
      break;
 8008c02:	e0f2      	b.n	8008dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	885b      	ldrh	r3, [r3, #2]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	f200 80ac 	bhi.w	8008d68 <USBD_GetDescriptor+0x258>
 8008c10:	a201      	add	r2, pc, #4	@ (adr r2, 8008c18 <USBD_GetDescriptor+0x108>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c31 	.word	0x08008c31
 8008c1c:	08008c65 	.word	0x08008c65
 8008c20:	08008c99 	.word	0x08008c99
 8008c24:	08008ccd 	.word	0x08008ccd
 8008c28:	08008d01 	.word	0x08008d01
 8008c2c:	08008d35 	.word	0x08008d35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00b      	beq.n	8008c54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	7c12      	ldrb	r2, [r2, #16]
 8008c48:	f107 0108 	add.w	r1, r7, #8
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4798      	blx	r3
 8008c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c52:	e091      	b.n	8008d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fab2 	bl	80091c0 <USBD_CtlError>
            err++;
 8008c5c:	7afb      	ldrb	r3, [r7, #11]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	72fb      	strb	r3, [r7, #11]
          break;
 8008c62:	e089      	b.n	8008d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00b      	beq.n	8008c88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	7c12      	ldrb	r2, [r2, #16]
 8008c7c:	f107 0108 	add.w	r1, r7, #8
 8008c80:	4610      	mov	r0, r2
 8008c82:	4798      	blx	r3
 8008c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c86:	e077      	b.n	8008d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa98 	bl	80091c0 <USBD_CtlError>
            err++;
 8008c90:	7afb      	ldrb	r3, [r7, #11]
 8008c92:	3301      	adds	r3, #1
 8008c94:	72fb      	strb	r3, [r7, #11]
          break;
 8008c96:	e06f      	b.n	8008d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	7c12      	ldrb	r2, [r2, #16]
 8008cb0:	f107 0108 	add.w	r1, r7, #8
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	4798      	blx	r3
 8008cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cba:	e05d      	b.n	8008d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fa7e 	bl	80091c0 <USBD_CtlError>
            err++;
 8008cc4:	7afb      	ldrb	r3, [r7, #11]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cca:	e055      	b.n	8008d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00b      	beq.n	8008cf0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	7c12      	ldrb	r2, [r2, #16]
 8008ce4:	f107 0108 	add.w	r1, r7, #8
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4798      	blx	r3
 8008cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cee:	e043      	b.n	8008d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fa64 	bl	80091c0 <USBD_CtlError>
            err++;
 8008cf8:	7afb      	ldrb	r3, [r7, #11]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cfe:	e03b      	b.n	8008d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7c12      	ldrb	r2, [r2, #16]
 8008d18:	f107 0108 	add.w	r1, r7, #8
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d22:	e029      	b.n	8008d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fa4a 	bl	80091c0 <USBD_CtlError>
            err++;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	72fb      	strb	r3, [r7, #11]
          break;
 8008d32:	e021      	b.n	8008d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7c12      	ldrb	r2, [r2, #16]
 8008d4c:	f107 0108 	add.w	r1, r7, #8
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d56:	e00f      	b.n	8008d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fa30 	bl	80091c0 <USBD_CtlError>
            err++;
 8008d60:	7afb      	ldrb	r3, [r7, #11]
 8008d62:	3301      	adds	r3, #1
 8008d64:	72fb      	strb	r3, [r7, #11]
          break;
 8008d66:	e007      	b.n	8008d78 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa28 	bl	80091c0 <USBD_CtlError>
          err++;
 8008d70:	7afb      	ldrb	r3, [r7, #11]
 8008d72:	3301      	adds	r3, #1
 8008d74:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008d76:	bf00      	nop
      }
      break;
 8008d78:	e037      	b.n	8008dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	7c1b      	ldrb	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d109      	bne.n	8008d96 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d8a:	f107 0208 	add.w	r2, r7, #8
 8008d8e:	4610      	mov	r0, r2
 8008d90:	4798      	blx	r3
 8008d92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d94:	e029      	b.n	8008dea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fa11 	bl	80091c0 <USBD_CtlError>
        err++;
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	3301      	adds	r3, #1
 8008da2:	72fb      	strb	r3, [r7, #11]
      break;
 8008da4:	e021      	b.n	8008dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	7c1b      	ldrb	r3, [r3, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10d      	bne.n	8008dca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db6:	f107 0208 	add.w	r2, r7, #8
 8008dba:	4610      	mov	r0, r2
 8008dbc:	4798      	blx	r3
 8008dbe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	2207      	movs	r2, #7
 8008dc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dc8:	e00f      	b.n	8008dea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f9f7 	bl	80091c0 <USBD_CtlError>
        err++;
 8008dd2:	7afb      	ldrb	r3, [r7, #11]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8008dd8:	e007      	b.n	8008dea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f9ef 	bl	80091c0 <USBD_CtlError>
      err++;
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	3301      	adds	r3, #1
 8008de6:	72fb      	strb	r3, [r7, #11]
      break;
 8008de8:	bf00      	nop
  }

  if (err != 0U)
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d11e      	bne.n	8008e2e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	88db      	ldrh	r3, [r3, #6]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d016      	beq.n	8008e26 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008df8:	893b      	ldrh	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00e      	beq.n	8008e1c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	88da      	ldrh	r2, [r3, #6]
 8008e02:	893b      	ldrh	r3, [r7, #8]
 8008e04:	4293      	cmp	r3, r2
 8008e06:	bf28      	it	cs
 8008e08:	4613      	movcs	r3, r2
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e0e:	893b      	ldrh	r3, [r7, #8]
 8008e10:	461a      	mov	r2, r3
 8008e12:	68f9      	ldr	r1, [r7, #12]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fa44 	bl	80092a2 <USBD_CtlSendData>
 8008e1a:	e009      	b.n	8008e30 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f9ce 	bl	80091c0 <USBD_CtlError>
 8008e24:	e004      	b.n	8008e30 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fa95 	bl	8009356 <USBD_CtlSendStatus>
 8008e2c:	e000      	b.n	8008e30 <USBD_GetDescriptor+0x320>
    return;
 8008e2e:	bf00      	nop
  }
}
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop

08008e38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	889b      	ldrh	r3, [r3, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d131      	bne.n	8008eae <USBD_SetAddress+0x76>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	88db      	ldrh	r3, [r3, #6]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d12d      	bne.n	8008eae <USBD_SetAddress+0x76>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	885b      	ldrh	r3, [r3, #2]
 8008e56:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e58:	d829      	bhi.n	8008eae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	885b      	ldrh	r3, [r3, #2]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d104      	bne.n	8008e7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f9a3 	bl	80091c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7a:	e01d      	b.n	8008eb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	7bfa      	ldrb	r2, [r7, #15]
 8008e80:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 f8cd 	bl	800a028 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa61 	bl	8009356 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d004      	beq.n	8008ea4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea2:	e009      	b.n	8008eb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eac:	e004      	b.n	8008eb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f985 	bl	80091c0 <USBD_CtlError>
  }
}
 8008eb6:	bf00      	nop
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	885b      	ldrh	r3, [r3, #2]
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	4b4c      	ldr	r3, [pc, #304]	@ (8009008 <USBD_SetConfig+0x148>)
 8008ed6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8009008 <USBD_SetConfig+0x148>)
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d905      	bls.n	8008eec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f96c 	bl	80091c0 <USBD_CtlError>
    return USBD_FAIL;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e088      	b.n	8008ffe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d002      	beq.n	8008efe <USBD_SetConfig+0x3e>
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d025      	beq.n	8008f48 <USBD_SetConfig+0x88>
 8008efc:	e071      	b.n	8008fe2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008efe:	4b42      	ldr	r3, [pc, #264]	@ (8009008 <USBD_SetConfig+0x148>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d01c      	beq.n	8008f40 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008f06:	4b40      	ldr	r3, [pc, #256]	@ (8009008 <USBD_SetConfig+0x148>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f10:	4b3d      	ldr	r3, [pc, #244]	@ (8009008 <USBD_SetConfig+0x148>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff f992 	bl	8008240 <USBD_SetClassConfig>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d004      	beq.n	8008f30 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f949 	bl	80091c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f2e:	e065      	b.n	8008ffc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fa10 	bl	8009356 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2203      	movs	r2, #3
 8008f3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f3e:	e05d      	b.n	8008ffc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fa08 	bl	8009356 <USBD_CtlSendStatus>
      break;
 8008f46:	e059      	b.n	8008ffc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f48:	4b2f      	ldr	r3, [pc, #188]	@ (8009008 <USBD_SetConfig+0x148>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d112      	bne.n	8008f76 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008f58:	4b2b      	ldr	r3, [pc, #172]	@ (8009008 <USBD_SetConfig+0x148>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f62:	4b29      	ldr	r3, [pc, #164]	@ (8009008 <USBD_SetConfig+0x148>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff f985 	bl	8008278 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f9f1 	bl	8009356 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f74:	e042      	b.n	8008ffc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008f76:	4b24      	ldr	r3, [pc, #144]	@ (8009008 <USBD_SetConfig+0x148>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d02a      	beq.n	8008fda <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff f973 	bl	8008278 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f92:	4b1d      	ldr	r3, [pc, #116]	@ (8009008 <USBD_SetConfig+0x148>)
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8009008 <USBD_SetConfig+0x148>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff f94c 	bl	8008240 <USBD_SetClassConfig>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00f      	beq.n	8008fd2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f903 	bl	80091c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff f958 	bl	8008278 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008fd0:	e014      	b.n	8008ffc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f9bf 	bl	8009356 <USBD_CtlSendStatus>
      break;
 8008fd8:	e010      	b.n	8008ffc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f9bb 	bl	8009356 <USBD_CtlSendStatus>
      break;
 8008fe0:	e00c      	b.n	8008ffc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f8eb 	bl	80091c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fea:	4b07      	ldr	r3, [pc, #28]	@ (8009008 <USBD_SetConfig+0x148>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff f941 	bl	8008278 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffa:	bf00      	nop
  }

  return ret;
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	2000036c 	.word	0x2000036c

0800900c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	88db      	ldrh	r3, [r3, #6]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d004      	beq.n	8009028 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f8cd 	bl	80091c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009026:	e023      	b.n	8009070 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b02      	cmp	r3, #2
 8009032:	dc02      	bgt.n	800903a <USBD_GetConfig+0x2e>
 8009034:	2b00      	cmp	r3, #0
 8009036:	dc03      	bgt.n	8009040 <USBD_GetConfig+0x34>
 8009038:	e015      	b.n	8009066 <USBD_GetConfig+0x5a>
 800903a:	2b03      	cmp	r3, #3
 800903c:	d00b      	beq.n	8009056 <USBD_GetConfig+0x4a>
 800903e:	e012      	b.n	8009066 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3308      	adds	r3, #8
 800904a:	2201      	movs	r2, #1
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f927 	bl	80092a2 <USBD_CtlSendData>
        break;
 8009054:	e00c      	b.n	8009070 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	3304      	adds	r3, #4
 800905a:	2201      	movs	r2, #1
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f91f 	bl	80092a2 <USBD_CtlSendData>
        break;
 8009064:	e004      	b.n	8009070 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f8a9 	bl	80091c0 <USBD_CtlError>
        break;
 800906e:	bf00      	nop
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009088:	b2db      	uxtb	r3, r3
 800908a:	3b01      	subs	r3, #1
 800908c:	2b02      	cmp	r3, #2
 800908e:	d81e      	bhi.n	80090ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	88db      	ldrh	r3, [r3, #6]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d004      	beq.n	80090a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f890 	bl	80091c0 <USBD_CtlError>
        break;
 80090a0:	e01a      	b.n	80090d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	f043 0202 	orr.w	r2, r3, #2
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	330c      	adds	r3, #12
 80090c2:	2202      	movs	r2, #2
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f8eb 	bl	80092a2 <USBD_CtlSendData>
      break;
 80090cc:	e004      	b.n	80090d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f875 	bl	80091c0 <USBD_CtlError>
      break;
 80090d6:	bf00      	nop
  }
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	885b      	ldrh	r3, [r3, #2]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d106      	bne.n	8009100 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f92b 	bl	8009356 <USBD_CtlSendStatus>
  }
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009118:	b2db      	uxtb	r3, r3
 800911a:	3b01      	subs	r3, #1
 800911c:	2b02      	cmp	r3, #2
 800911e:	d80b      	bhi.n	8009138 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	885b      	ldrh	r3, [r3, #2]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d10c      	bne.n	8009142 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f910 	bl	8009356 <USBD_CtlSendStatus>
      }
      break;
 8009136:	e004      	b.n	8009142 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f840 	bl	80091c0 <USBD_CtlError>
      break;
 8009140:	e000      	b.n	8009144 <USBD_ClrFeature+0x3c>
      break;
 8009142:	bf00      	nop
  }
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	781a      	ldrb	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	781a      	ldrb	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3301      	adds	r3, #1
 8009174:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f7ff fa92 	bl	80086a0 <SWAPBYTE>
 800917c:	4603      	mov	r3, r0
 800917e:	461a      	mov	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3301      	adds	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3301      	adds	r3, #1
 800918e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f7ff fa85 	bl	80086a0 <SWAPBYTE>
 8009196:	4603      	mov	r3, r0
 8009198:	461a      	mov	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f7ff fa78 	bl	80086a0 <SWAPBYTE>
 80091b0:	4603      	mov	r3, r0
 80091b2:	461a      	mov	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	80da      	strh	r2, [r3, #6]
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091ca:	2180      	movs	r1, #128	@ 0x80
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fec1 	bl	8009f54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091d2:	2100      	movs	r1, #0
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 febd 	bl	8009f54 <USBD_LL_StallEP>
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b086      	sub	sp, #24
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d036      	beq.n	8009266 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091fc:	6938      	ldr	r0, [r7, #16]
 80091fe:	f000 f836 	bl	800926e <USBD_GetLen>
 8009202:	4603      	mov	r3, r0
 8009204:	3301      	adds	r3, #1
 8009206:	b29b      	uxth	r3, r3
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	7812      	ldrb	r2, [r2, #0]
 800921a:	701a      	strb	r2, [r3, #0]
  idx++;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	3301      	adds	r3, #1
 8009220:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	4413      	add	r3, r2
 8009228:	2203      	movs	r2, #3
 800922a:	701a      	strb	r2, [r3, #0]
  idx++;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
 800922e:	3301      	adds	r3, #1
 8009230:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009232:	e013      	b.n	800925c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	4413      	add	r3, r2
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	7812      	ldrb	r2, [r2, #0]
 800923e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	3301      	adds	r3, #1
 8009244:	613b      	str	r3, [r7, #16]
    idx++;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	3301      	adds	r3, #1
 800924a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	4413      	add	r3, r2
 8009252:	2200      	movs	r2, #0
 8009254:	701a      	strb	r2, [r3, #0]
    idx++;
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	3301      	adds	r3, #1
 800925a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e7      	bne.n	8009234 <USBD_GetString+0x52>
 8009264:	e000      	b.n	8009268 <USBD_GetString+0x86>
    return;
 8009266:	bf00      	nop
  }
}
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800926e:	b480      	push	{r7}
 8009270:	b085      	sub	sp, #20
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800927e:	e005      	b.n	800928c <USBD_GetLen+0x1e>
  {
    len++;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	3301      	adds	r3, #1
 8009284:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	3301      	adds	r3, #1
 800928a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1f5      	bne.n	8009280 <USBD_GetLen+0x12>
  }

  return len;
 8009294:	7bfb      	ldrb	r3, [r7, #15]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2202      	movs	r2, #2
 80092b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	2100      	movs	r1, #0
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 fecc 	bl	800a066 <USBD_LL_Transmit>

  return USBD_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	2100      	movs	r1, #0
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 febb 	bl	800a066 <USBD_LL_Transmit>

  return USBD_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2203      	movs	r2, #3
 800930a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	2100      	movs	r1, #0
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 febf 	bl	800a0a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	2100      	movs	r1, #0
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 feae 	bl	800a0a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2204      	movs	r2, #4
 8009362:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009366:	2300      	movs	r3, #0
 8009368:	2200      	movs	r2, #0
 800936a:	2100      	movs	r1, #0
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fe7a 	bl	800a066 <USBD_LL_Transmit>

  return USBD_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2205      	movs	r2, #5
 8009388:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800938c:	2300      	movs	r3, #0
 800938e:	2200      	movs	r2, #0
 8009390:	2100      	movs	r1, #0
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fe88 	bl	800a0a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80093a8:	4b05      	ldr	r3, [pc, #20]	@ (80093c0 <SysTick_Handler+0x1c>)
 80093aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80093ac:	f000 f998 	bl	80096e0 <xTaskGetSchedulerState>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d001      	beq.n	80093ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80093b6:	f000 f9ff 	bl	80097b8 <xPortSysTickHandler>
  }
}
 80093ba:	bf00      	nop
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	e000e010 	.word	0xe000e010

080093c4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	1c5a      	adds	r2, r3, #1
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	601a      	str	r2, [r3, #0]
}
 8009400:	bf00      	nop
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	6892      	ldr	r2, [r2, #8]
 8009422:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	6852      	ldr	r2, [r2, #4]
 800942c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	d103      	bne.n	8009440 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689a      	ldr	r2, [r3, #8]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	1e5a      	subs	r2, r3, #1
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009466:	2300      	movs	r3, #0
 8009468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800946a:	4b4f      	ldr	r3, [pc, #316]	@ (80095a8 <xTaskIncrementTick+0x148>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	f040 8090 	bne.w	8009594 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009474:	4b4d      	ldr	r3, [pc, #308]	@ (80095ac <xTaskIncrementTick+0x14c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3301      	adds	r3, #1
 800947a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800947c:	4a4b      	ldr	r2, [pc, #300]	@ (80095ac <xTaskIncrementTick+0x14c>)
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d121      	bne.n	80094cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009488:	4b49      	ldr	r3, [pc, #292]	@ (80095b0 <xTaskIncrementTick+0x150>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00b      	beq.n	80094aa <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop
 80094a8:	e7fd      	b.n	80094a6 <xTaskIncrementTick+0x46>
 80094aa:	4b41      	ldr	r3, [pc, #260]	@ (80095b0 <xTaskIncrementTick+0x150>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	4b40      	ldr	r3, [pc, #256]	@ (80095b4 <xTaskIncrementTick+0x154>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a3e      	ldr	r2, [pc, #248]	@ (80095b0 <xTaskIncrementTick+0x150>)
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	4a3e      	ldr	r2, [pc, #248]	@ (80095b4 <xTaskIncrementTick+0x154>)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	4b3e      	ldr	r3, [pc, #248]	@ (80095b8 <xTaskIncrementTick+0x158>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3301      	adds	r3, #1
 80094c4:	4a3c      	ldr	r2, [pc, #240]	@ (80095b8 <xTaskIncrementTick+0x158>)
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	f000 f8ea 	bl	80096a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094cc:	4b3b      	ldr	r3, [pc, #236]	@ (80095bc <xTaskIncrementTick+0x15c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d349      	bcc.n	800956a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094d6:	4b36      	ldr	r3, [pc, #216]	@ (80095b0 <xTaskIncrementTick+0x150>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d104      	bne.n	80094ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094e0:	4b36      	ldr	r3, [pc, #216]	@ (80095bc <xTaskIncrementTick+0x15c>)
 80094e2:	f04f 32ff 	mov.w	r2, #4294967295
 80094e6:	601a      	str	r2, [r3, #0]
					break;
 80094e8:	e03f      	b.n	800956a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ea:	4b31      	ldr	r3, [pc, #196]	@ (80095b0 <xTaskIncrementTick+0x150>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d203      	bcs.n	800950a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009502:	4a2e      	ldr	r2, [pc, #184]	@ (80095bc <xTaskIncrementTick+0x15c>)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009508:	e02f      	b.n	800956a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	3304      	adds	r3, #4
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff ff7c 	bl	800940c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009518:	2b00      	cmp	r3, #0
 800951a:	d004      	beq.n	8009526 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	3318      	adds	r3, #24
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff ff73 	bl	800940c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800952a:	4b25      	ldr	r3, [pc, #148]	@ (80095c0 <xTaskIncrementTick+0x160>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d903      	bls.n	800953a <xTaskIncrementTick+0xda>
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009536:	4a22      	ldr	r2, [pc, #136]	@ (80095c0 <xTaskIncrementTick+0x160>)
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4a1f      	ldr	r2, [pc, #124]	@ (80095c4 <xTaskIncrementTick+0x164>)
 8009548:	441a      	add	r2, r3
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	3304      	adds	r3, #4
 800954e:	4619      	mov	r1, r3
 8009550:	4610      	mov	r0, r2
 8009552:	f7ff ff37 	bl	80093c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955a:	4b1b      	ldr	r3, [pc, #108]	@ (80095c8 <xTaskIncrementTick+0x168>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	429a      	cmp	r2, r3
 8009562:	d3b8      	bcc.n	80094d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009564:	2301      	movs	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009568:	e7b5      	b.n	80094d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800956a:	4b17      	ldr	r3, [pc, #92]	@ (80095c8 <xTaskIncrementTick+0x168>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009570:	4914      	ldr	r1, [pc, #80]	@ (80095c4 <xTaskIncrementTick+0x164>)
 8009572:	4613      	mov	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	440b      	add	r3, r1
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d901      	bls.n	8009586 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009582:	2301      	movs	r3, #1
 8009584:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009586:	4b11      	ldr	r3, [pc, #68]	@ (80095cc <xTaskIncrementTick+0x16c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d007      	beq.n	800959e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800958e:	2301      	movs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	e004      	b.n	800959e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009594:	4b0e      	ldr	r3, [pc, #56]	@ (80095d0 <xTaskIncrementTick+0x170>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3301      	adds	r3, #1
 800959a:	4a0d      	ldr	r2, [pc, #52]	@ (80095d0 <xTaskIncrementTick+0x170>)
 800959c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800959e:	697b      	ldr	r3, [r7, #20]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	200007f8 	.word	0x200007f8
 80095ac:	200007dc 	.word	0x200007dc
 80095b0:	200007d4 	.word	0x200007d4
 80095b4:	200007d8 	.word	0x200007d8
 80095b8:	200007f0 	.word	0x200007f0
 80095bc:	200007f4 	.word	0x200007f4
 80095c0:	200007e0 	.word	0x200007e0
 80095c4:	20000374 	.word	0x20000374
 80095c8:	20000370 	.word	0x20000370
 80095cc:	200007ec 	.word	0x200007ec
 80095d0:	200007e8 	.word	0x200007e8

080095d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095da:	4b2b      	ldr	r3, [pc, #172]	@ (8009688 <vTaskSwitchContext+0xb4>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095e2:	4b2a      	ldr	r3, [pc, #168]	@ (800968c <vTaskSwitchContext+0xb8>)
 80095e4:	2201      	movs	r2, #1
 80095e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095e8:	e047      	b.n	800967a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80095ea:	4b28      	ldr	r3, [pc, #160]	@ (800968c <vTaskSwitchContext+0xb8>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095f0:	4b27      	ldr	r3, [pc, #156]	@ (8009690 <vTaskSwitchContext+0xbc>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	e011      	b.n	800961c <vTaskSwitchContext+0x48>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10b      	bne.n	8009616 <vTaskSwitchContext+0x42>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	607b      	str	r3, [r7, #4]
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	e7fd      	b.n	8009612 <vTaskSwitchContext+0x3e>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3b01      	subs	r3, #1
 800961a:	60fb      	str	r3, [r7, #12]
 800961c:	491d      	ldr	r1, [pc, #116]	@ (8009694 <vTaskSwitchContext+0xc0>)
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	440b      	add	r3, r1
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d0e3      	beq.n	80095f8 <vTaskSwitchContext+0x24>
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4613      	mov	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4a16      	ldr	r2, [pc, #88]	@ (8009694 <vTaskSwitchContext+0xc0>)
 800963c:	4413      	add	r3, r2
 800963e:	60bb      	str	r3, [r7, #8]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	605a      	str	r2, [r3, #4]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	3308      	adds	r3, #8
 8009652:	429a      	cmp	r2, r3
 8009654:	d104      	bne.n	8009660 <vTaskSwitchContext+0x8c>
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	605a      	str	r2, [r3, #4]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	4a0c      	ldr	r2, [pc, #48]	@ (8009698 <vTaskSwitchContext+0xc4>)
 8009668:	6013      	str	r3, [r2, #0]
 800966a:	4a09      	ldr	r2, [pc, #36]	@ (8009690 <vTaskSwitchContext+0xbc>)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009670:	4b09      	ldr	r3, [pc, #36]	@ (8009698 <vTaskSwitchContext+0xc4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3354      	adds	r3, #84	@ 0x54
 8009676:	4a09      	ldr	r2, [pc, #36]	@ (800969c <vTaskSwitchContext+0xc8>)
 8009678:	6013      	str	r3, [r2, #0]
}
 800967a:	bf00      	nop
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	200007f8 	.word	0x200007f8
 800968c:	200007ec 	.word	0x200007ec
 8009690:	200007e0 	.word	0x200007e0
 8009694:	20000374 	.word	0x20000374
 8009698:	20000370 	.word	0x20000370
 800969c:	20000184 	.word	0x20000184

080096a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096a6:	4b0c      	ldr	r3, [pc, #48]	@ (80096d8 <prvResetNextTaskUnblockTime+0x38>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d104      	bne.n	80096ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096b0:	4b0a      	ldr	r3, [pc, #40]	@ (80096dc <prvResetNextTaskUnblockTime+0x3c>)
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096b8:	e008      	b.n	80096cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ba:	4b07      	ldr	r3, [pc, #28]	@ (80096d8 <prvResetNextTaskUnblockTime+0x38>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	4a04      	ldr	r2, [pc, #16]	@ (80096dc <prvResetNextTaskUnblockTime+0x3c>)
 80096ca:	6013      	str	r3, [r2, #0]
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	200007d4 	.word	0x200007d4
 80096dc:	200007f4 	.word	0x200007f4

080096e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009714 <xTaskGetSchedulerState+0x34>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d102      	bne.n	80096f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096ee:	2301      	movs	r3, #1
 80096f0:	607b      	str	r3, [r7, #4]
 80096f2:	e008      	b.n	8009706 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096f4:	4b08      	ldr	r3, [pc, #32]	@ (8009718 <xTaskGetSchedulerState+0x38>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d102      	bne.n	8009702 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096fc:	2302      	movs	r3, #2
 80096fe:	607b      	str	r3, [r7, #4]
 8009700:	e001      	b.n	8009706 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009702:	2300      	movs	r3, #0
 8009704:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009706:	687b      	ldr	r3, [r7, #4]
	}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	200007e4 	.word	0x200007e4
 8009718:	200007f8 	.word	0x200007f8
 800971c:	00000000 	.word	0x00000000

08009720 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009720:	4b07      	ldr	r3, [pc, #28]	@ (8009740 <pxCurrentTCBConst2>)
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	6808      	ldr	r0, [r1, #0]
 8009726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	f380 8809 	msr	PSP, r0
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8811 	msr	BASEPRI, r0
 800973a:	4770      	bx	lr
 800973c:	f3af 8000 	nop.w

08009740 <pxCurrentTCBConst2>:
 8009740:	20000370 	.word	0x20000370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop
	...

08009750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009750:	f3ef 8009 	mrs	r0, PSP
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	4b15      	ldr	r3, [pc, #84]	@ (80097b0 <pxCurrentTCBConst>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	f01e 0f10 	tst.w	lr, #16
 8009760:	bf08      	it	eq
 8009762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976a:	6010      	str	r0, [r2, #0]
 800976c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009770:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009774:	f380 8811 	msr	BASEPRI, r0
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f7ff ff28 	bl	80095d4 <vTaskSwitchContext>
 8009784:	f04f 0000 	mov.w	r0, #0
 8009788:	f380 8811 	msr	BASEPRI, r0
 800978c:	bc09      	pop	{r0, r3}
 800978e:	6819      	ldr	r1, [r3, #0]
 8009790:	6808      	ldr	r0, [r1, #0]
 8009792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009796:	f01e 0f10 	tst.w	lr, #16
 800979a:	bf08      	it	eq
 800979c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097a0:	f380 8809 	msr	PSP, r0
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	f3af 8000 	nop.w

080097b0 <pxCurrentTCBConst>:
 80097b0:	20000370 	.word	0x20000370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop

080097b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	607b      	str	r3, [r7, #4]
}
 80097d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097d2:	f7ff fe45 	bl	8009460 <xTaskIncrementTick>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097dc:	4b06      	ldr	r3, [pc, #24]	@ (80097f8 <xPortSysTickHandler+0x40>)
 80097de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	2300      	movs	r3, #0
 80097e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009800:	2200      	movs	r2, #0
 8009802:	4912      	ldr	r1, [pc, #72]	@ (800984c <MX_USB_Device_Init+0x50>)
 8009804:	4812      	ldr	r0, [pc, #72]	@ (8009850 <MX_USB_Device_Init+0x54>)
 8009806:	f7fe fcad 	bl	8008164 <USBD_Init>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009810:	f7f6 ffc4 	bl	800079c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009814:	490f      	ldr	r1, [pc, #60]	@ (8009854 <MX_USB_Device_Init+0x58>)
 8009816:	480e      	ldr	r0, [pc, #56]	@ (8009850 <MX_USB_Device_Init+0x54>)
 8009818:	f7fe fcd4 	bl	80081c4 <USBD_RegisterClass>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009822:	f7f6 ffbb 	bl	800079c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009826:	490c      	ldr	r1, [pc, #48]	@ (8009858 <MX_USB_Device_Init+0x5c>)
 8009828:	4809      	ldr	r0, [pc, #36]	@ (8009850 <MX_USB_Device_Init+0x54>)
 800982a:	f7fe fbf5 	bl	8008018 <USBD_CDC_RegisterInterface>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009834:	f7f6 ffb2 	bl	800079c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009838:	4805      	ldr	r0, [pc, #20]	@ (8009850 <MX_USB_Device_Init+0x54>)
 800983a:	f7fe fcea 	bl	8008212 <USBD_Start>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009844:	f7f6 ffaa 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009848:	bf00      	nop
 800984a:	bd80      	pop	{r7, pc}
 800984c:	20000130 	.word	0x20000130
 8009850:	200007fc 	.word	0x200007fc
 8009854:	20000018 	.word	0x20000018
 8009858:	2000011c 	.word	0x2000011c

0800985c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009860:	2200      	movs	r2, #0
 8009862:	4905      	ldr	r1, [pc, #20]	@ (8009878 <CDC_Init_FS+0x1c>)
 8009864:	4805      	ldr	r0, [pc, #20]	@ (800987c <CDC_Init_FS+0x20>)
 8009866:	f7fe fbec 	bl	8008042 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800986a:	4905      	ldr	r1, [pc, #20]	@ (8009880 <CDC_Init_FS+0x24>)
 800986c:	4803      	ldr	r0, [pc, #12]	@ (800987c <CDC_Init_FS+0x20>)
 800986e:	f7fe fc06 	bl	800807e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009872:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009874:	4618      	mov	r0, r3
 8009876:	bd80      	pop	{r7, pc}
 8009878:	200012cc 	.word	0x200012cc
 800987c:	200007fc 	.word	0x200007fc
 8009880:	20000acc 	.word	0x20000acc

08009884 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009884:	b480      	push	{r7}
 8009886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009888:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800988a:	4618      	mov	r0, r3
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	6039      	str	r1, [r7, #0]
 800989e:	71fb      	strb	r3, [r7, #7]
 80098a0:	4613      	mov	r3, r2
 80098a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80098a4:	79fb      	ldrb	r3, [r7, #7]
 80098a6:	2b23      	cmp	r3, #35	@ 0x23
 80098a8:	d84a      	bhi.n	8009940 <CDC_Control_FS+0xac>
 80098aa:	a201      	add	r2, pc, #4	@ (adr r2, 80098b0 <CDC_Control_FS+0x1c>)
 80098ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b0:	08009941 	.word	0x08009941
 80098b4:	08009941 	.word	0x08009941
 80098b8:	08009941 	.word	0x08009941
 80098bc:	08009941 	.word	0x08009941
 80098c0:	08009941 	.word	0x08009941
 80098c4:	08009941 	.word	0x08009941
 80098c8:	08009941 	.word	0x08009941
 80098cc:	08009941 	.word	0x08009941
 80098d0:	08009941 	.word	0x08009941
 80098d4:	08009941 	.word	0x08009941
 80098d8:	08009941 	.word	0x08009941
 80098dc:	08009941 	.word	0x08009941
 80098e0:	08009941 	.word	0x08009941
 80098e4:	08009941 	.word	0x08009941
 80098e8:	08009941 	.word	0x08009941
 80098ec:	08009941 	.word	0x08009941
 80098f0:	08009941 	.word	0x08009941
 80098f4:	08009941 	.word	0x08009941
 80098f8:	08009941 	.word	0x08009941
 80098fc:	08009941 	.word	0x08009941
 8009900:	08009941 	.word	0x08009941
 8009904:	08009941 	.word	0x08009941
 8009908:	08009941 	.word	0x08009941
 800990c:	08009941 	.word	0x08009941
 8009910:	08009941 	.word	0x08009941
 8009914:	08009941 	.word	0x08009941
 8009918:	08009941 	.word	0x08009941
 800991c:	08009941 	.word	0x08009941
 8009920:	08009941 	.word	0x08009941
 8009924:	08009941 	.word	0x08009941
 8009928:	08009941 	.word	0x08009941
 800992c:	08009941 	.word	0x08009941
 8009930:	08009941 	.word	0x08009941
 8009934:	08009941 	.word	0x08009941
 8009938:	08009941 	.word	0x08009941
 800993c:	08009941 	.word	0x08009941
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009940:	bf00      	nop
  }

  return (USBD_OK);
 8009942:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009944:	4618      	mov	r0, r3
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	4805      	ldr	r0, [pc, #20]	@ (8009974 <CDC_Receive_FS+0x24>)
 800995e:	f7fe fb8e 	bl	800807e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009962:	4804      	ldr	r0, [pc, #16]	@ (8009974 <CDC_Receive_FS+0x24>)
 8009964:	f7fe fbd4 	bl	8008110 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009968:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800996a:	4618      	mov	r0, r3
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	200007fc 	.word	0x200007fc

08009978 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009988:	4b0d      	ldr	r3, [pc, #52]	@ (80099c0 <CDC_Transmit_FS+0x48>)
 800998a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800998e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800999a:	2301      	movs	r3, #1
 800999c:	e00b      	b.n	80099b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800999e:	887b      	ldrh	r3, [r7, #2]
 80099a0:	461a      	mov	r2, r3
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	4806      	ldr	r0, [pc, #24]	@ (80099c0 <CDC_Transmit_FS+0x48>)
 80099a6:	f7fe fb4c 	bl	8008042 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80099aa:	4805      	ldr	r0, [pc, #20]	@ (80099c0 <CDC_Transmit_FS+0x48>)
 80099ac:	f7fe fb80 	bl	80080b0 <USBD_CDC_TransmitPacket>
 80099b0:	4603      	mov	r3, r0
 80099b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	200007fc 	.word	0x200007fc

080099c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80099d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	371c      	adds	r7, #28
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	6039      	str	r1, [r7, #0]
 80099f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2212      	movs	r2, #18
 80099f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80099fa:	4b03      	ldr	r3, [pc, #12]	@ (8009a08 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	20000150 	.word	0x20000150

08009a0c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	6039      	str	r1, [r7, #0]
 8009a16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2204      	movs	r2, #4
 8009a1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a1e:	4b03      	ldr	r3, [pc, #12]	@ (8009a2c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	20000164 	.word	0x20000164

08009a30 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	6039      	str	r1, [r7, #0]
 8009a3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d105      	bne.n	8009a4e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	4907      	ldr	r1, [pc, #28]	@ (8009a64 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009a46:	4808      	ldr	r0, [pc, #32]	@ (8009a68 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009a48:	f7ff fbcb 	bl	80091e2 <USBD_GetString>
 8009a4c:	e004      	b.n	8009a58 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	4904      	ldr	r1, [pc, #16]	@ (8009a64 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009a52:	4805      	ldr	r0, [pc, #20]	@ (8009a68 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009a54:	f7ff fbc5 	bl	80091e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a58:	4b02      	ldr	r3, [pc, #8]	@ (8009a64 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20001acc 	.word	0x20001acc
 8009a68:	0800abb4 	.word	0x0800abb4

08009a6c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	4904      	ldr	r1, [pc, #16]	@ (8009a8c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009a7c:	4804      	ldr	r0, [pc, #16]	@ (8009a90 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009a7e:	f7ff fbb0 	bl	80091e2 <USBD_GetString>
  return USBD_StrDesc;
 8009a82:	4b02      	ldr	r3, [pc, #8]	@ (8009a8c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20001acc 	.word	0x20001acc
 8009a90:	0800abcc 	.word	0x0800abcc

08009a94 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	6039      	str	r1, [r7, #0]
 8009a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	221a      	movs	r2, #26
 8009aa4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009aa6:	f000 f843 	bl	8009b30 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009aaa:	4b02      	ldr	r3, [pc, #8]	@ (8009ab4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	20000168 	.word	0x20000168

08009ab8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	6039      	str	r1, [r7, #0]
 8009ac2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d105      	bne.n	8009ad6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	4907      	ldr	r1, [pc, #28]	@ (8009aec <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009ace:	4808      	ldr	r0, [pc, #32]	@ (8009af0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009ad0:	f7ff fb87 	bl	80091e2 <USBD_GetString>
 8009ad4:	e004      	b.n	8009ae0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	4904      	ldr	r1, [pc, #16]	@ (8009aec <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009ada:	4805      	ldr	r0, [pc, #20]	@ (8009af0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009adc:	f7ff fb81 	bl	80091e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ae0:	4b02      	ldr	r3, [pc, #8]	@ (8009aec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20001acc 	.word	0x20001acc
 8009af0:	0800abe0 	.word	0x0800abe0

08009af4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	6039      	str	r1, [r7, #0]
 8009afe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d105      	bne.n	8009b12 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	4907      	ldr	r1, [pc, #28]	@ (8009b28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009b0a:	4808      	ldr	r0, [pc, #32]	@ (8009b2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009b0c:	f7ff fb69 	bl	80091e2 <USBD_GetString>
 8009b10:	e004      	b.n	8009b1c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	4904      	ldr	r1, [pc, #16]	@ (8009b28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009b16:	4805      	ldr	r0, [pc, #20]	@ (8009b2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009b18:	f7ff fb63 	bl	80091e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b1c:	4b02      	ldr	r3, [pc, #8]	@ (8009b28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20001acc 	.word	0x20001acc
 8009b2c:	0800abec 	.word	0x0800abec

08009b30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b36:	4b0f      	ldr	r3, [pc, #60]	@ (8009b74 <Get_SerialNum+0x44>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b78 <Get_SerialNum+0x48>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b42:	4b0e      	ldr	r3, [pc, #56]	@ (8009b7c <Get_SerialNum+0x4c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d009      	beq.n	8009b6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b56:	2208      	movs	r2, #8
 8009b58:	4909      	ldr	r1, [pc, #36]	@ (8009b80 <Get_SerialNum+0x50>)
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 f814 	bl	8009b88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b60:	2204      	movs	r2, #4
 8009b62:	4908      	ldr	r1, [pc, #32]	@ (8009b84 <Get_SerialNum+0x54>)
 8009b64:	68b8      	ldr	r0, [r7, #8]
 8009b66:	f000 f80f 	bl	8009b88 <IntToUnicode>
  }
}
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	1fff7590 	.word	0x1fff7590
 8009b78:	1fff7594 	.word	0x1fff7594
 8009b7c:	1fff7598 	.word	0x1fff7598
 8009b80:	2000016a 	.word	0x2000016a
 8009b84:	2000017a 	.word	0x2000017a

08009b88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4613      	mov	r3, r2
 8009b94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	75fb      	strb	r3, [r7, #23]
 8009b9e:	e027      	b.n	8009bf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	0f1b      	lsrs	r3, r3, #28
 8009ba4:	2b09      	cmp	r3, #9
 8009ba6:	d80b      	bhi.n	8009bc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	0f1b      	lsrs	r3, r3, #28
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	440b      	add	r3, r1
 8009bb8:	3230      	adds	r2, #48	@ 0x30
 8009bba:	b2d2      	uxtb	r2, r2
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	e00a      	b.n	8009bd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	0f1b      	lsrs	r3, r3, #28
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	4619      	mov	r1, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	440b      	add	r3, r1
 8009bd0:	3237      	adds	r2, #55	@ 0x37
 8009bd2:	b2d2      	uxtb	r2, r2
 8009bd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	3301      	adds	r3, #1
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	4413      	add	r3, r2
 8009be6:	2200      	movs	r2, #0
 8009be8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	3301      	adds	r3, #1
 8009bee:	75fb      	strb	r3, [r7, #23]
 8009bf0:	7dfa      	ldrb	r2, [r7, #23]
 8009bf2:	79fb      	ldrb	r3, [r7, #7]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d3d3      	bcc.n	8009ba0 <IntToUnicode+0x18>
  }
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
	...

08009c08 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b098      	sub	sp, #96	@ 0x60
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009c10:	f107 0310 	add.w	r3, r7, #16
 8009c14:	2250      	movs	r2, #80	@ 0x50
 8009c16:	2100      	movs	r1, #0
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 fb19 	bl	800a250 <memset>
  if(pcdHandle->Instance==USB)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a15      	ldr	r2, [pc, #84]	@ (8009c78 <HAL_PCD_MspInit+0x70>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d122      	bne.n	8009c6e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009c32:	f107 0310 	add.w	r3, r7, #16
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fb fb64 	bl	8005304 <HAL_RCCEx_PeriphCLKConfig>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009c42:	f7f6 fdab 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009c46:	4b0d      	ldr	r3, [pc, #52]	@ (8009c7c <HAL_PCD_MspInit+0x74>)
 8009c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8009c7c <HAL_PCD_MspInit+0x74>)
 8009c4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c52:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <HAL_PCD_MspInit+0x74>)
 8009c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2105      	movs	r1, #5
 8009c62:	2014      	movs	r0, #20
 8009c64:	f7f8 fb6e 	bl	8002344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009c68:	2014      	movs	r0, #20
 8009c6a:	f7f8 fb85 	bl	8002378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009c6e:	bf00      	nop
 8009c70:	3760      	adds	r7, #96	@ 0x60
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	40005c00 	.word	0x40005c00
 8009c7c:	40021000 	.word	0x40021000

08009c80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009c94:	4619      	mov	r1, r3
 8009c96:	4610      	mov	r0, r2
 8009c98:	f7fe fb06 	bl	80082a8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009c9c:	bf00      	nop
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009cb6:	78fa      	ldrb	r2, [r7, #3]
 8009cb8:	6879      	ldr	r1, [r7, #4]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	440b      	add	r3, r1
 8009cc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	78fb      	ldrb	r3, [r7, #3]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	f7fe fb40 	bl	8008352 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009cd2:	bf00      	nop
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009cec:	78fa      	ldrb	r2, [r7, #3]
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	440b      	add	r3, r1
 8009cfa:	3324      	adds	r3, #36	@ 0x24
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	78fb      	ldrb	r3, [r7, #3]
 8009d00:	4619      	mov	r1, r3
 8009d02:	f7fe fb89 	bl	8008418 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009d06:	bf00      	nop
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe fc9d 	bl	800865c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009d22:	bf00      	nop
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d32:	2301      	movs	r3, #1
 8009d34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	795b      	ldrb	r3, [r3, #5]
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d001      	beq.n	8009d42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d3e:	f7f6 fd2d 	bl	800079c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009d48:	7bfa      	ldrb	r2, [r7, #15]
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fe fc47 	bl	80085e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fe fbf3 	bl	8008544 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009d5e:	bf00      	nop
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe fc42 	bl	8008600 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7a5b      	ldrb	r3, [r3, #9]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d005      	beq.n	8009d90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d84:	4b04      	ldr	r3, [pc, #16]	@ (8009d98 <HAL_PCD_SuspendCallback+0x30>)
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	4a03      	ldr	r2, [pc, #12]	@ (8009d98 <HAL_PCD_SuspendCallback+0x30>)
 8009d8a:	f043 0306 	orr.w	r3, r3, #6
 8009d8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	e000ed00 	.word	0xe000ed00

08009d9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	7a5b      	ldrb	r3, [r3, #9]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d007      	beq.n	8009dbc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dac:	4b08      	ldr	r3, [pc, #32]	@ (8009dd0 <HAL_PCD_ResumeCallback+0x34>)
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	4a07      	ldr	r2, [pc, #28]	@ (8009dd0 <HAL_PCD_ResumeCallback+0x34>)
 8009db2:	f023 0306 	bic.w	r3, r3, #6
 8009db6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009db8:	f000 f9f8 	bl	800a1ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fc32 	bl	800862c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009dc8:	bf00      	nop
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	e000ed00 	.word	0xe000ed00

08009dd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a29      	ldr	r2, [pc, #164]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009de8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009dec:	4b27      	ldr	r3, [pc, #156]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009dee:	4a28      	ldr	r2, [pc, #160]	@ (8009e90 <USBD_LL_Init+0xbc>)
 8009df0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009df2:	4b26      	ldr	r3, [pc, #152]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009df4:	2208      	movs	r2, #8
 8009df6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009df8:	4b24      	ldr	r3, [pc, #144]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009dfe:	4b23      	ldr	r3, [pc, #140]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009e00:	2202      	movs	r2, #2
 8009e02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009e04:	4b21      	ldr	r3, [pc, #132]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009e0a:	4b20      	ldr	r3, [pc, #128]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009e10:	4b1e      	ldr	r3, [pc, #120]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009e16:	4b1d      	ldr	r3, [pc, #116]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009e1c:	481b      	ldr	r0, [pc, #108]	@ (8009e8c <USBD_LL_Init+0xb8>)
 8009e1e:	f7f8 ff71 	bl	8002d04 <HAL_PCD_Init>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d001      	beq.n	8009e2c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009e28:	f7f6 fcb8 	bl	800079c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009e32:	2318      	movs	r3, #24
 8009e34:	2200      	movs	r2, #0
 8009e36:	2100      	movs	r1, #0
 8009e38:	f7fa fbf8 	bl	800462c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009e42:	2358      	movs	r3, #88	@ 0x58
 8009e44:	2200      	movs	r2, #0
 8009e46:	2180      	movs	r1, #128	@ 0x80
 8009e48:	f7fa fbf0 	bl	800462c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009e52:	23c0      	movs	r3, #192	@ 0xc0
 8009e54:	2200      	movs	r2, #0
 8009e56:	2181      	movs	r1, #129	@ 0x81
 8009e58:	f7fa fbe8 	bl	800462c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009e62:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009e66:	2200      	movs	r2, #0
 8009e68:	2101      	movs	r1, #1
 8009e6a:	f7fa fbdf 	bl	800462c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2182      	movs	r1, #130	@ 0x82
 8009e7c:	f7fa fbd6 	bl	800462c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20001ccc 	.word	0x20001ccc
 8009e90:	40005c00 	.word	0x40005c00

08009e94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7f8 fff8 	bl	8002ea0 <HAL_PCD_Start>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 f97e 	bl	800a1b8 <USBD_Get_USB_Status>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	4608      	mov	r0, r1
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	4603      	mov	r3, r0
 8009eda:	70fb      	strb	r3, [r7, #3]
 8009edc:	460b      	mov	r3, r1
 8009ede:	70bb      	strb	r3, [r7, #2]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009ef2:	78bb      	ldrb	r3, [r7, #2]
 8009ef4:	883a      	ldrh	r2, [r7, #0]
 8009ef6:	78f9      	ldrb	r1, [r7, #3]
 8009ef8:	f7f9 f93f 	bl	800317a <HAL_PCD_EP_Open>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 f958 	bl	800a1b8 <USBD_Get_USB_Status>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009f30:	78fa      	ldrb	r2, [r7, #3]
 8009f32:	4611      	mov	r1, r2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7f9 f97f 	bl	8003238 <HAL_PCD_EP_Close>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 f939 	bl	800a1b8 <USBD_Get_USB_Status>
 8009f46:	4603      	mov	r3, r0
 8009f48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009f6e:	78fa      	ldrb	r2, [r7, #3]
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7f9 fa28 	bl	80033c8 <HAL_PCD_EP_SetStall>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 f91a 	bl	800a1b8 <USBD_Get_USB_Status>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009fac:	78fa      	ldrb	r2, [r7, #3]
 8009fae:	4611      	mov	r1, r2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7f9 fa5b 	bl	800346c <HAL_PCD_EP_ClrStall>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 f8fb 	bl	800a1b8 <USBD_Get_USB_Status>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009fe2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	da0b      	bge.n	800a004 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009fec:	78fb      	ldrb	r3, [r7, #3]
 8009fee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ff2:	68f9      	ldr	r1, [r7, #12]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	4413      	add	r3, r2
 8009ffa:	00db      	lsls	r3, r3, #3
 8009ffc:	440b      	add	r3, r1
 8009ffe:	3312      	adds	r3, #18
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	e00b      	b.n	800a01c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a00a:	68f9      	ldr	r1, [r7, #12]
 800a00c:	4613      	mov	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	440b      	add	r3, r1
 800a016:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a01a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	460b      	mov	r3, r1
 800a032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a042:	78fa      	ldrb	r2, [r7, #3]
 800a044:	4611      	mov	r1, r2
 800a046:	4618      	mov	r0, r3
 800a048:	f7f9 f873 	bl	8003132 <HAL_PCD_SetAddress>
 800a04c:	4603      	mov	r3, r0
 800a04e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a050:	7bfb      	ldrb	r3, [r7, #15]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 f8b0 	bl	800a1b8 <USBD_Get_USB_Status>
 800a058:	4603      	mov	r3, r0
 800a05a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b086      	sub	sp, #24
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	603b      	str	r3, [r7, #0]
 800a072:	460b      	mov	r3, r1
 800a074:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a084:	7af9      	ldrb	r1, [r7, #11]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	f7f9 f966 	bl	800335a <HAL_PCD_EP_Transmit>
 800a08e:	4603      	mov	r3, r0
 800a090:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	4618      	mov	r0, r3
 800a096:	f000 f88f 	bl	800a1b8 <USBD_Get_USB_Status>
 800a09a:	4603      	mov	r3, r0
 800a09c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a09e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3718      	adds	r7, #24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a0c6:	7af9      	ldrb	r1, [r7, #11]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	f7f9 f8fc 	bl	80032c8 <HAL_PCD_EP_Receive>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 f86e 	bl	800a1b8 <USBD_Get_USB_Status>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a0fc:	78fa      	ldrb	r2, [r7, #3]
 800a0fe:	4611      	mov	r1, r2
 800a100:	4618      	mov	r0, r3
 800a102:	f7f9 f912 	bl	800332a <HAL_PCD_EP_GetRxCount>
 800a106:	4603      	mov	r3, r0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <HAL_PCDEx_LPM_Callback+0x18>
 800a122:	2b01      	cmp	r3, #1
 800a124:	d013      	beq.n	800a14e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a126:	e023      	b.n	800a170 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	7a5b      	ldrb	r3, [r3, #9]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d007      	beq.n	800a140 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a130:	f000 f83c 	bl	800a1ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a134:	4b10      	ldr	r3, [pc, #64]	@ (800a178 <HAL_PCDEx_LPM_Callback+0x68>)
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	4a0f      	ldr	r2, [pc, #60]	@ (800a178 <HAL_PCDEx_LPM_Callback+0x68>)
 800a13a:	f023 0306 	bic.w	r3, r3, #6
 800a13e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe fa70 	bl	800862c <USBD_LL_Resume>
    break;
 800a14c:	e010      	b.n	800a170 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a154:	4618      	mov	r0, r3
 800a156:	f7fe fa53 	bl	8008600 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	7a5b      	ldrb	r3, [r3, #9]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d005      	beq.n	800a16e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a162:	4b05      	ldr	r3, [pc, #20]	@ (800a178 <HAL_PCDEx_LPM_Callback+0x68>)
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	4a04      	ldr	r2, [pc, #16]	@ (800a178 <HAL_PCDEx_LPM_Callback+0x68>)
 800a168:	f043 0306 	orr.w	r3, r3, #6
 800a16c:	6113      	str	r3, [r2, #16]
    break;
 800a16e:	bf00      	nop
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed00 	.word	0xe000ed00

0800a17c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a184:	4b03      	ldr	r3, [pc, #12]	@ (800a194 <USBD_static_malloc+0x18>)
}
 800a186:	4618      	mov	r0, r3
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	20001fa8 	.word	0x20001fa8

0800a198 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]

}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a1b0:	f7f6 f910 	bl	80003d4 <SystemClock_Config>
}
 800a1b4:	bf00      	nop
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1c6:	79fb      	ldrb	r3, [r7, #7]
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d817      	bhi.n	800a1fc <USBD_Get_USB_Status+0x44>
 800a1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d4 <USBD_Get_USB_Status+0x1c>)
 800a1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d2:	bf00      	nop
 800a1d4:	0800a1e5 	.word	0x0800a1e5
 800a1d8:	0800a1eb 	.word	0x0800a1eb
 800a1dc:	0800a1f1 	.word	0x0800a1f1
 800a1e0:	0800a1f7 	.word	0x0800a1f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e8:	e00b      	b.n	800a202 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ee:	e008      	b.n	800a202 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f4:	e005      	b.n	800a202 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1fa:	e002      	b.n	800a202 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a200:	bf00      	nop
  }
  return usb_status;
 800a202:	7bfb      	ldrb	r3, [r7, #15]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <_vsiprintf_r>:
 800a210:	b500      	push	{lr}
 800a212:	b09b      	sub	sp, #108	@ 0x6c
 800a214:	9100      	str	r1, [sp, #0]
 800a216:	9104      	str	r1, [sp, #16]
 800a218:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a21c:	9105      	str	r1, [sp, #20]
 800a21e:	9102      	str	r1, [sp, #8]
 800a220:	4905      	ldr	r1, [pc, #20]	@ (800a238 <_vsiprintf_r+0x28>)
 800a222:	9103      	str	r1, [sp, #12]
 800a224:	4669      	mov	r1, sp
 800a226:	f000 f9a9 	bl	800a57c <_svfiprintf_r>
 800a22a:	9b00      	ldr	r3, [sp, #0]
 800a22c:	2200      	movs	r2, #0
 800a22e:	701a      	strb	r2, [r3, #0]
 800a230:	b01b      	add	sp, #108	@ 0x6c
 800a232:	f85d fb04 	ldr.w	pc, [sp], #4
 800a236:	bf00      	nop
 800a238:	ffff0208 	.word	0xffff0208

0800a23c <vsiprintf>:
 800a23c:	4613      	mov	r3, r2
 800a23e:	460a      	mov	r2, r1
 800a240:	4601      	mov	r1, r0
 800a242:	4802      	ldr	r0, [pc, #8]	@ (800a24c <vsiprintf+0x10>)
 800a244:	6800      	ldr	r0, [r0, #0]
 800a246:	f7ff bfe3 	b.w	800a210 <_vsiprintf_r>
 800a24a:	bf00      	nop
 800a24c:	20000184 	.word	0x20000184

0800a250 <memset>:
 800a250:	4402      	add	r2, r0
 800a252:	4603      	mov	r3, r0
 800a254:	4293      	cmp	r3, r2
 800a256:	d100      	bne.n	800a25a <memset+0xa>
 800a258:	4770      	bx	lr
 800a25a:	f803 1b01 	strb.w	r1, [r3], #1
 800a25e:	e7f9      	b.n	800a254 <memset+0x4>

0800a260 <__errno>:
 800a260:	4b01      	ldr	r3, [pc, #4]	@ (800a268 <__errno+0x8>)
 800a262:	6818      	ldr	r0, [r3, #0]
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	20000184 	.word	0x20000184

0800a26c <__libc_init_array>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	4d0d      	ldr	r5, [pc, #52]	@ (800a2a4 <__libc_init_array+0x38>)
 800a270:	4c0d      	ldr	r4, [pc, #52]	@ (800a2a8 <__libc_init_array+0x3c>)
 800a272:	1b64      	subs	r4, r4, r5
 800a274:	10a4      	asrs	r4, r4, #2
 800a276:	2600      	movs	r6, #0
 800a278:	42a6      	cmp	r6, r4
 800a27a:	d109      	bne.n	800a290 <__libc_init_array+0x24>
 800a27c:	4d0b      	ldr	r5, [pc, #44]	@ (800a2ac <__libc_init_array+0x40>)
 800a27e:	4c0c      	ldr	r4, [pc, #48]	@ (800a2b0 <__libc_init_array+0x44>)
 800a280:	f000 fc66 	bl	800ab50 <_init>
 800a284:	1b64      	subs	r4, r4, r5
 800a286:	10a4      	asrs	r4, r4, #2
 800a288:	2600      	movs	r6, #0
 800a28a:	42a6      	cmp	r6, r4
 800a28c:	d105      	bne.n	800a29a <__libc_init_array+0x2e>
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	f855 3b04 	ldr.w	r3, [r5], #4
 800a294:	4798      	blx	r3
 800a296:	3601      	adds	r6, #1
 800a298:	e7ee      	b.n	800a278 <__libc_init_array+0xc>
 800a29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29e:	4798      	blx	r3
 800a2a0:	3601      	adds	r6, #1
 800a2a2:	e7f2      	b.n	800a28a <__libc_init_array+0x1e>
 800a2a4:	0800ac50 	.word	0x0800ac50
 800a2a8:	0800ac50 	.word	0x0800ac50
 800a2ac:	0800ac50 	.word	0x0800ac50
 800a2b0:	0800ac54 	.word	0x0800ac54

0800a2b4 <__retarget_lock_acquire_recursive>:
 800a2b4:	4770      	bx	lr

0800a2b6 <__retarget_lock_release_recursive>:
 800a2b6:	4770      	bx	lr

0800a2b8 <memcpy>:
 800a2b8:	440a      	add	r2, r1
 800a2ba:	4291      	cmp	r1, r2
 800a2bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2c0:	d100      	bne.n	800a2c4 <memcpy+0xc>
 800a2c2:	4770      	bx	lr
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ce:	4291      	cmp	r1, r2
 800a2d0:	d1f9      	bne.n	800a2c6 <memcpy+0xe>
 800a2d2:	bd10      	pop	{r4, pc}

0800a2d4 <_free_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	2900      	cmp	r1, #0
 800a2da:	d041      	beq.n	800a360 <_free_r+0x8c>
 800a2dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e0:	1f0c      	subs	r4, r1, #4
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	bfb8      	it	lt
 800a2e6:	18e4      	addlt	r4, r4, r3
 800a2e8:	f000 f8e0 	bl	800a4ac <__malloc_lock>
 800a2ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a364 <_free_r+0x90>)
 800a2ee:	6813      	ldr	r3, [r2, #0]
 800a2f0:	b933      	cbnz	r3, 800a300 <_free_r+0x2c>
 800a2f2:	6063      	str	r3, [r4, #4]
 800a2f4:	6014      	str	r4, [r2, #0]
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2fc:	f000 b8dc 	b.w	800a4b8 <__malloc_unlock>
 800a300:	42a3      	cmp	r3, r4
 800a302:	d908      	bls.n	800a316 <_free_r+0x42>
 800a304:	6820      	ldr	r0, [r4, #0]
 800a306:	1821      	adds	r1, r4, r0
 800a308:	428b      	cmp	r3, r1
 800a30a:	bf01      	itttt	eq
 800a30c:	6819      	ldreq	r1, [r3, #0]
 800a30e:	685b      	ldreq	r3, [r3, #4]
 800a310:	1809      	addeq	r1, r1, r0
 800a312:	6021      	streq	r1, [r4, #0]
 800a314:	e7ed      	b.n	800a2f2 <_free_r+0x1e>
 800a316:	461a      	mov	r2, r3
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	b10b      	cbz	r3, 800a320 <_free_r+0x4c>
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	d9fa      	bls.n	800a316 <_free_r+0x42>
 800a320:	6811      	ldr	r1, [r2, #0]
 800a322:	1850      	adds	r0, r2, r1
 800a324:	42a0      	cmp	r0, r4
 800a326:	d10b      	bne.n	800a340 <_free_r+0x6c>
 800a328:	6820      	ldr	r0, [r4, #0]
 800a32a:	4401      	add	r1, r0
 800a32c:	1850      	adds	r0, r2, r1
 800a32e:	4283      	cmp	r3, r0
 800a330:	6011      	str	r1, [r2, #0]
 800a332:	d1e0      	bne.n	800a2f6 <_free_r+0x22>
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	6053      	str	r3, [r2, #4]
 800a33a:	4408      	add	r0, r1
 800a33c:	6010      	str	r0, [r2, #0]
 800a33e:	e7da      	b.n	800a2f6 <_free_r+0x22>
 800a340:	d902      	bls.n	800a348 <_free_r+0x74>
 800a342:	230c      	movs	r3, #12
 800a344:	602b      	str	r3, [r5, #0]
 800a346:	e7d6      	b.n	800a2f6 <_free_r+0x22>
 800a348:	6820      	ldr	r0, [r4, #0]
 800a34a:	1821      	adds	r1, r4, r0
 800a34c:	428b      	cmp	r3, r1
 800a34e:	bf04      	itt	eq
 800a350:	6819      	ldreq	r1, [r3, #0]
 800a352:	685b      	ldreq	r3, [r3, #4]
 800a354:	6063      	str	r3, [r4, #4]
 800a356:	bf04      	itt	eq
 800a358:	1809      	addeq	r1, r1, r0
 800a35a:	6021      	streq	r1, [r4, #0]
 800a35c:	6054      	str	r4, [r2, #4]
 800a35e:	e7ca      	b.n	800a2f6 <_free_r+0x22>
 800a360:	bd38      	pop	{r3, r4, r5, pc}
 800a362:	bf00      	nop
 800a364:	2000230c 	.word	0x2000230c

0800a368 <sbrk_aligned>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	4e0f      	ldr	r6, [pc, #60]	@ (800a3a8 <sbrk_aligned+0x40>)
 800a36c:	460c      	mov	r4, r1
 800a36e:	6831      	ldr	r1, [r6, #0]
 800a370:	4605      	mov	r5, r0
 800a372:	b911      	cbnz	r1, 800a37a <sbrk_aligned+0x12>
 800a374:	f000 fba6 	bl	800aac4 <_sbrk_r>
 800a378:	6030      	str	r0, [r6, #0]
 800a37a:	4621      	mov	r1, r4
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 fba1 	bl	800aac4 <_sbrk_r>
 800a382:	1c43      	adds	r3, r0, #1
 800a384:	d103      	bne.n	800a38e <sbrk_aligned+0x26>
 800a386:	f04f 34ff 	mov.w	r4, #4294967295
 800a38a:	4620      	mov	r0, r4
 800a38c:	bd70      	pop	{r4, r5, r6, pc}
 800a38e:	1cc4      	adds	r4, r0, #3
 800a390:	f024 0403 	bic.w	r4, r4, #3
 800a394:	42a0      	cmp	r0, r4
 800a396:	d0f8      	beq.n	800a38a <sbrk_aligned+0x22>
 800a398:	1a21      	subs	r1, r4, r0
 800a39a:	4628      	mov	r0, r5
 800a39c:	f000 fb92 	bl	800aac4 <_sbrk_r>
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d1f2      	bne.n	800a38a <sbrk_aligned+0x22>
 800a3a4:	e7ef      	b.n	800a386 <sbrk_aligned+0x1e>
 800a3a6:	bf00      	nop
 800a3a8:	20002308 	.word	0x20002308

0800a3ac <_malloc_r>:
 800a3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b0:	1ccd      	adds	r5, r1, #3
 800a3b2:	f025 0503 	bic.w	r5, r5, #3
 800a3b6:	3508      	adds	r5, #8
 800a3b8:	2d0c      	cmp	r5, #12
 800a3ba:	bf38      	it	cc
 800a3bc:	250c      	movcc	r5, #12
 800a3be:	2d00      	cmp	r5, #0
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	db01      	blt.n	800a3c8 <_malloc_r+0x1c>
 800a3c4:	42a9      	cmp	r1, r5
 800a3c6:	d904      	bls.n	800a3d2 <_malloc_r+0x26>
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	6033      	str	r3, [r6, #0]
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4a8 <_malloc_r+0xfc>
 800a3d6:	f000 f869 	bl	800a4ac <__malloc_lock>
 800a3da:	f8d8 3000 	ldr.w	r3, [r8]
 800a3de:	461c      	mov	r4, r3
 800a3e0:	bb44      	cbnz	r4, 800a434 <_malloc_r+0x88>
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7ff ffbf 	bl	800a368 <sbrk_aligned>
 800a3ea:	1c43      	adds	r3, r0, #1
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	d158      	bne.n	800a4a2 <_malloc_r+0xf6>
 800a3f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a3f4:	4627      	mov	r7, r4
 800a3f6:	2f00      	cmp	r7, #0
 800a3f8:	d143      	bne.n	800a482 <_malloc_r+0xd6>
 800a3fa:	2c00      	cmp	r4, #0
 800a3fc:	d04b      	beq.n	800a496 <_malloc_r+0xea>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	4639      	mov	r1, r7
 800a402:	4630      	mov	r0, r6
 800a404:	eb04 0903 	add.w	r9, r4, r3
 800a408:	f000 fb5c 	bl	800aac4 <_sbrk_r>
 800a40c:	4581      	cmp	r9, r0
 800a40e:	d142      	bne.n	800a496 <_malloc_r+0xea>
 800a410:	6821      	ldr	r1, [r4, #0]
 800a412:	1a6d      	subs	r5, r5, r1
 800a414:	4629      	mov	r1, r5
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff ffa6 	bl	800a368 <sbrk_aligned>
 800a41c:	3001      	adds	r0, #1
 800a41e:	d03a      	beq.n	800a496 <_malloc_r+0xea>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	442b      	add	r3, r5
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	f8d8 3000 	ldr.w	r3, [r8]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	bb62      	cbnz	r2, 800a488 <_malloc_r+0xdc>
 800a42e:	f8c8 7000 	str.w	r7, [r8]
 800a432:	e00f      	b.n	800a454 <_malloc_r+0xa8>
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	1b52      	subs	r2, r2, r5
 800a438:	d420      	bmi.n	800a47c <_malloc_r+0xd0>
 800a43a:	2a0b      	cmp	r2, #11
 800a43c:	d917      	bls.n	800a46e <_malloc_r+0xc2>
 800a43e:	1961      	adds	r1, r4, r5
 800a440:	42a3      	cmp	r3, r4
 800a442:	6025      	str	r5, [r4, #0]
 800a444:	bf18      	it	ne
 800a446:	6059      	strne	r1, [r3, #4]
 800a448:	6863      	ldr	r3, [r4, #4]
 800a44a:	bf08      	it	eq
 800a44c:	f8c8 1000 	streq.w	r1, [r8]
 800a450:	5162      	str	r2, [r4, r5]
 800a452:	604b      	str	r3, [r1, #4]
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f82f 	bl	800a4b8 <__malloc_unlock>
 800a45a:	f104 000b 	add.w	r0, r4, #11
 800a45e:	1d23      	adds	r3, r4, #4
 800a460:	f020 0007 	bic.w	r0, r0, #7
 800a464:	1ac2      	subs	r2, r0, r3
 800a466:	bf1c      	itt	ne
 800a468:	1a1b      	subne	r3, r3, r0
 800a46a:	50a3      	strne	r3, [r4, r2]
 800a46c:	e7af      	b.n	800a3ce <_malloc_r+0x22>
 800a46e:	6862      	ldr	r2, [r4, #4]
 800a470:	42a3      	cmp	r3, r4
 800a472:	bf0c      	ite	eq
 800a474:	f8c8 2000 	streq.w	r2, [r8]
 800a478:	605a      	strne	r2, [r3, #4]
 800a47a:	e7eb      	b.n	800a454 <_malloc_r+0xa8>
 800a47c:	4623      	mov	r3, r4
 800a47e:	6864      	ldr	r4, [r4, #4]
 800a480:	e7ae      	b.n	800a3e0 <_malloc_r+0x34>
 800a482:	463c      	mov	r4, r7
 800a484:	687f      	ldr	r7, [r7, #4]
 800a486:	e7b6      	b.n	800a3f6 <_malloc_r+0x4a>
 800a488:	461a      	mov	r2, r3
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	d1fb      	bne.n	800a488 <_malloc_r+0xdc>
 800a490:	2300      	movs	r3, #0
 800a492:	6053      	str	r3, [r2, #4]
 800a494:	e7de      	b.n	800a454 <_malloc_r+0xa8>
 800a496:	230c      	movs	r3, #12
 800a498:	6033      	str	r3, [r6, #0]
 800a49a:	4630      	mov	r0, r6
 800a49c:	f000 f80c 	bl	800a4b8 <__malloc_unlock>
 800a4a0:	e794      	b.n	800a3cc <_malloc_r+0x20>
 800a4a2:	6005      	str	r5, [r0, #0]
 800a4a4:	e7d6      	b.n	800a454 <_malloc_r+0xa8>
 800a4a6:	bf00      	nop
 800a4a8:	2000230c 	.word	0x2000230c

0800a4ac <__malloc_lock>:
 800a4ac:	4801      	ldr	r0, [pc, #4]	@ (800a4b4 <__malloc_lock+0x8>)
 800a4ae:	f7ff bf01 	b.w	800a2b4 <__retarget_lock_acquire_recursive>
 800a4b2:	bf00      	nop
 800a4b4:	20002304 	.word	0x20002304

0800a4b8 <__malloc_unlock>:
 800a4b8:	4801      	ldr	r0, [pc, #4]	@ (800a4c0 <__malloc_unlock+0x8>)
 800a4ba:	f7ff befc 	b.w	800a2b6 <__retarget_lock_release_recursive>
 800a4be:	bf00      	nop
 800a4c0:	20002304 	.word	0x20002304

0800a4c4 <__ssputs_r>:
 800a4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	688e      	ldr	r6, [r1, #8]
 800a4ca:	461f      	mov	r7, r3
 800a4cc:	42be      	cmp	r6, r7
 800a4ce:	680b      	ldr	r3, [r1, #0]
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	4690      	mov	r8, r2
 800a4d6:	d82d      	bhi.n	800a534 <__ssputs_r+0x70>
 800a4d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a4e0:	d026      	beq.n	800a530 <__ssputs_r+0x6c>
 800a4e2:	6965      	ldr	r5, [r4, #20]
 800a4e4:	6909      	ldr	r1, [r1, #16]
 800a4e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4ea:	eba3 0901 	sub.w	r9, r3, r1
 800a4ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4f2:	1c7b      	adds	r3, r7, #1
 800a4f4:	444b      	add	r3, r9
 800a4f6:	106d      	asrs	r5, r5, #1
 800a4f8:	429d      	cmp	r5, r3
 800a4fa:	bf38      	it	cc
 800a4fc:	461d      	movcc	r5, r3
 800a4fe:	0553      	lsls	r3, r2, #21
 800a500:	d527      	bpl.n	800a552 <__ssputs_r+0x8e>
 800a502:	4629      	mov	r1, r5
 800a504:	f7ff ff52 	bl	800a3ac <_malloc_r>
 800a508:	4606      	mov	r6, r0
 800a50a:	b360      	cbz	r0, 800a566 <__ssputs_r+0xa2>
 800a50c:	6921      	ldr	r1, [r4, #16]
 800a50e:	464a      	mov	r2, r9
 800a510:	f7ff fed2 	bl	800a2b8 <memcpy>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	6126      	str	r6, [r4, #16]
 800a522:	6165      	str	r5, [r4, #20]
 800a524:	444e      	add	r6, r9
 800a526:	eba5 0509 	sub.w	r5, r5, r9
 800a52a:	6026      	str	r6, [r4, #0]
 800a52c:	60a5      	str	r5, [r4, #8]
 800a52e:	463e      	mov	r6, r7
 800a530:	42be      	cmp	r6, r7
 800a532:	d900      	bls.n	800a536 <__ssputs_r+0x72>
 800a534:	463e      	mov	r6, r7
 800a536:	6820      	ldr	r0, [r4, #0]
 800a538:	4632      	mov	r2, r6
 800a53a:	4641      	mov	r1, r8
 800a53c:	f000 faa8 	bl	800aa90 <memmove>
 800a540:	68a3      	ldr	r3, [r4, #8]
 800a542:	1b9b      	subs	r3, r3, r6
 800a544:	60a3      	str	r3, [r4, #8]
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	4433      	add	r3, r6
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	2000      	movs	r0, #0
 800a54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a552:	462a      	mov	r2, r5
 800a554:	f000 fac6 	bl	800aae4 <_realloc_r>
 800a558:	4606      	mov	r6, r0
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d1e0      	bne.n	800a520 <__ssputs_r+0x5c>
 800a55e:	6921      	ldr	r1, [r4, #16]
 800a560:	4650      	mov	r0, sl
 800a562:	f7ff feb7 	bl	800a2d4 <_free_r>
 800a566:	230c      	movs	r3, #12
 800a568:	f8ca 3000 	str.w	r3, [sl]
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a572:	81a3      	strh	r3, [r4, #12]
 800a574:	f04f 30ff 	mov.w	r0, #4294967295
 800a578:	e7e9      	b.n	800a54e <__ssputs_r+0x8a>
	...

0800a57c <_svfiprintf_r>:
 800a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	4698      	mov	r8, r3
 800a582:	898b      	ldrh	r3, [r1, #12]
 800a584:	061b      	lsls	r3, r3, #24
 800a586:	b09d      	sub	sp, #116	@ 0x74
 800a588:	4607      	mov	r7, r0
 800a58a:	460d      	mov	r5, r1
 800a58c:	4614      	mov	r4, r2
 800a58e:	d510      	bpl.n	800a5b2 <_svfiprintf_r+0x36>
 800a590:	690b      	ldr	r3, [r1, #16]
 800a592:	b973      	cbnz	r3, 800a5b2 <_svfiprintf_r+0x36>
 800a594:	2140      	movs	r1, #64	@ 0x40
 800a596:	f7ff ff09 	bl	800a3ac <_malloc_r>
 800a59a:	6028      	str	r0, [r5, #0]
 800a59c:	6128      	str	r0, [r5, #16]
 800a59e:	b930      	cbnz	r0, 800a5ae <_svfiprintf_r+0x32>
 800a5a0:	230c      	movs	r3, #12
 800a5a2:	603b      	str	r3, [r7, #0]
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a8:	b01d      	add	sp, #116	@ 0x74
 800a5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ae:	2340      	movs	r3, #64	@ 0x40
 800a5b0:	616b      	str	r3, [r5, #20]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5b6:	2320      	movs	r3, #32
 800a5b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5c0:	2330      	movs	r3, #48	@ 0x30
 800a5c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a760 <_svfiprintf_r+0x1e4>
 800a5c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5ca:	f04f 0901 	mov.w	r9, #1
 800a5ce:	4623      	mov	r3, r4
 800a5d0:	469a      	mov	sl, r3
 800a5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5d6:	b10a      	cbz	r2, 800a5dc <_svfiprintf_r+0x60>
 800a5d8:	2a25      	cmp	r2, #37	@ 0x25
 800a5da:	d1f9      	bne.n	800a5d0 <_svfiprintf_r+0x54>
 800a5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a5e0:	d00b      	beq.n	800a5fa <_svfiprintf_r+0x7e>
 800a5e2:	465b      	mov	r3, fp
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f7ff ff6b 	bl	800a4c4 <__ssputs_r>
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	f000 80a7 	beq.w	800a742 <_svfiprintf_r+0x1c6>
 800a5f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5f6:	445a      	add	r2, fp
 800a5f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 809f 	beq.w	800a742 <_svfiprintf_r+0x1c6>
 800a604:	2300      	movs	r3, #0
 800a606:	f04f 32ff 	mov.w	r2, #4294967295
 800a60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a60e:	f10a 0a01 	add.w	sl, sl, #1
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	9307      	str	r3, [sp, #28]
 800a616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a61a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a61c:	4654      	mov	r4, sl
 800a61e:	2205      	movs	r2, #5
 800a620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a624:	484e      	ldr	r0, [pc, #312]	@ (800a760 <_svfiprintf_r+0x1e4>)
 800a626:	f7f5 fdfb 	bl	8000220 <memchr>
 800a62a:	9a04      	ldr	r2, [sp, #16]
 800a62c:	b9d8      	cbnz	r0, 800a666 <_svfiprintf_r+0xea>
 800a62e:	06d0      	lsls	r0, r2, #27
 800a630:	bf44      	itt	mi
 800a632:	2320      	movmi	r3, #32
 800a634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a638:	0711      	lsls	r1, r2, #28
 800a63a:	bf44      	itt	mi
 800a63c:	232b      	movmi	r3, #43	@ 0x2b
 800a63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a642:	f89a 3000 	ldrb.w	r3, [sl]
 800a646:	2b2a      	cmp	r3, #42	@ 0x2a
 800a648:	d015      	beq.n	800a676 <_svfiprintf_r+0xfa>
 800a64a:	9a07      	ldr	r2, [sp, #28]
 800a64c:	4654      	mov	r4, sl
 800a64e:	2000      	movs	r0, #0
 800a650:	f04f 0c0a 	mov.w	ip, #10
 800a654:	4621      	mov	r1, r4
 800a656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a65a:	3b30      	subs	r3, #48	@ 0x30
 800a65c:	2b09      	cmp	r3, #9
 800a65e:	d94b      	bls.n	800a6f8 <_svfiprintf_r+0x17c>
 800a660:	b1b0      	cbz	r0, 800a690 <_svfiprintf_r+0x114>
 800a662:	9207      	str	r2, [sp, #28]
 800a664:	e014      	b.n	800a690 <_svfiprintf_r+0x114>
 800a666:	eba0 0308 	sub.w	r3, r0, r8
 800a66a:	fa09 f303 	lsl.w	r3, r9, r3
 800a66e:	4313      	orrs	r3, r2
 800a670:	9304      	str	r3, [sp, #16]
 800a672:	46a2      	mov	sl, r4
 800a674:	e7d2      	b.n	800a61c <_svfiprintf_r+0xa0>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	1d19      	adds	r1, r3, #4
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	9103      	str	r1, [sp, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfbb      	ittet	lt
 800a682:	425b      	neglt	r3, r3
 800a684:	f042 0202 	orrlt.w	r2, r2, #2
 800a688:	9307      	strge	r3, [sp, #28]
 800a68a:	9307      	strlt	r3, [sp, #28]
 800a68c:	bfb8      	it	lt
 800a68e:	9204      	strlt	r2, [sp, #16]
 800a690:	7823      	ldrb	r3, [r4, #0]
 800a692:	2b2e      	cmp	r3, #46	@ 0x2e
 800a694:	d10a      	bne.n	800a6ac <_svfiprintf_r+0x130>
 800a696:	7863      	ldrb	r3, [r4, #1]
 800a698:	2b2a      	cmp	r3, #42	@ 0x2a
 800a69a:	d132      	bne.n	800a702 <_svfiprintf_r+0x186>
 800a69c:	9b03      	ldr	r3, [sp, #12]
 800a69e:	1d1a      	adds	r2, r3, #4
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	9203      	str	r2, [sp, #12]
 800a6a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6a8:	3402      	adds	r4, #2
 800a6aa:	9305      	str	r3, [sp, #20]
 800a6ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a770 <_svfiprintf_r+0x1f4>
 800a6b0:	7821      	ldrb	r1, [r4, #0]
 800a6b2:	2203      	movs	r2, #3
 800a6b4:	4650      	mov	r0, sl
 800a6b6:	f7f5 fdb3 	bl	8000220 <memchr>
 800a6ba:	b138      	cbz	r0, 800a6cc <_svfiprintf_r+0x150>
 800a6bc:	9b04      	ldr	r3, [sp, #16]
 800a6be:	eba0 000a 	sub.w	r0, r0, sl
 800a6c2:	2240      	movs	r2, #64	@ 0x40
 800a6c4:	4082      	lsls	r2, r0
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	3401      	adds	r4, #1
 800a6ca:	9304      	str	r3, [sp, #16]
 800a6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d0:	4824      	ldr	r0, [pc, #144]	@ (800a764 <_svfiprintf_r+0x1e8>)
 800a6d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6d6:	2206      	movs	r2, #6
 800a6d8:	f7f5 fda2 	bl	8000220 <memchr>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d036      	beq.n	800a74e <_svfiprintf_r+0x1d2>
 800a6e0:	4b21      	ldr	r3, [pc, #132]	@ (800a768 <_svfiprintf_r+0x1ec>)
 800a6e2:	bb1b      	cbnz	r3, 800a72c <_svfiprintf_r+0x1b0>
 800a6e4:	9b03      	ldr	r3, [sp, #12]
 800a6e6:	3307      	adds	r3, #7
 800a6e8:	f023 0307 	bic.w	r3, r3, #7
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	9303      	str	r3, [sp, #12]
 800a6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f2:	4433      	add	r3, r6
 800a6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6f6:	e76a      	b.n	800a5ce <_svfiprintf_r+0x52>
 800a6f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	2001      	movs	r0, #1
 800a700:	e7a8      	b.n	800a654 <_svfiprintf_r+0xd8>
 800a702:	2300      	movs	r3, #0
 800a704:	3401      	adds	r4, #1
 800a706:	9305      	str	r3, [sp, #20]
 800a708:	4619      	mov	r1, r3
 800a70a:	f04f 0c0a 	mov.w	ip, #10
 800a70e:	4620      	mov	r0, r4
 800a710:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a714:	3a30      	subs	r2, #48	@ 0x30
 800a716:	2a09      	cmp	r2, #9
 800a718:	d903      	bls.n	800a722 <_svfiprintf_r+0x1a6>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0c6      	beq.n	800a6ac <_svfiprintf_r+0x130>
 800a71e:	9105      	str	r1, [sp, #20]
 800a720:	e7c4      	b.n	800a6ac <_svfiprintf_r+0x130>
 800a722:	fb0c 2101 	mla	r1, ip, r1, r2
 800a726:	4604      	mov	r4, r0
 800a728:	2301      	movs	r3, #1
 800a72a:	e7f0      	b.n	800a70e <_svfiprintf_r+0x192>
 800a72c:	ab03      	add	r3, sp, #12
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	462a      	mov	r2, r5
 800a732:	4b0e      	ldr	r3, [pc, #56]	@ (800a76c <_svfiprintf_r+0x1f0>)
 800a734:	a904      	add	r1, sp, #16
 800a736:	4638      	mov	r0, r7
 800a738:	f3af 8000 	nop.w
 800a73c:	1c42      	adds	r2, r0, #1
 800a73e:	4606      	mov	r6, r0
 800a740:	d1d6      	bne.n	800a6f0 <_svfiprintf_r+0x174>
 800a742:	89ab      	ldrh	r3, [r5, #12]
 800a744:	065b      	lsls	r3, r3, #25
 800a746:	f53f af2d 	bmi.w	800a5a4 <_svfiprintf_r+0x28>
 800a74a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a74c:	e72c      	b.n	800a5a8 <_svfiprintf_r+0x2c>
 800a74e:	ab03      	add	r3, sp, #12
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	462a      	mov	r2, r5
 800a754:	4b05      	ldr	r3, [pc, #20]	@ (800a76c <_svfiprintf_r+0x1f0>)
 800a756:	a904      	add	r1, sp, #16
 800a758:	4638      	mov	r0, r7
 800a75a:	f000 f879 	bl	800a850 <_printf_i>
 800a75e:	e7ed      	b.n	800a73c <_svfiprintf_r+0x1c0>
 800a760:	0800ac14 	.word	0x0800ac14
 800a764:	0800ac1e 	.word	0x0800ac1e
 800a768:	00000000 	.word	0x00000000
 800a76c:	0800a4c5 	.word	0x0800a4c5
 800a770:	0800ac1a 	.word	0x0800ac1a

0800a774 <_printf_common>:
 800a774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a778:	4616      	mov	r6, r2
 800a77a:	4698      	mov	r8, r3
 800a77c:	688a      	ldr	r2, [r1, #8]
 800a77e:	690b      	ldr	r3, [r1, #16]
 800a780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a784:	4293      	cmp	r3, r2
 800a786:	bfb8      	it	lt
 800a788:	4613      	movlt	r3, r2
 800a78a:	6033      	str	r3, [r6, #0]
 800a78c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a790:	4607      	mov	r7, r0
 800a792:	460c      	mov	r4, r1
 800a794:	b10a      	cbz	r2, 800a79a <_printf_common+0x26>
 800a796:	3301      	adds	r3, #1
 800a798:	6033      	str	r3, [r6, #0]
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	0699      	lsls	r1, r3, #26
 800a79e:	bf42      	ittt	mi
 800a7a0:	6833      	ldrmi	r3, [r6, #0]
 800a7a2:	3302      	addmi	r3, #2
 800a7a4:	6033      	strmi	r3, [r6, #0]
 800a7a6:	6825      	ldr	r5, [r4, #0]
 800a7a8:	f015 0506 	ands.w	r5, r5, #6
 800a7ac:	d106      	bne.n	800a7bc <_printf_common+0x48>
 800a7ae:	f104 0a19 	add.w	sl, r4, #25
 800a7b2:	68e3      	ldr	r3, [r4, #12]
 800a7b4:	6832      	ldr	r2, [r6, #0]
 800a7b6:	1a9b      	subs	r3, r3, r2
 800a7b8:	42ab      	cmp	r3, r5
 800a7ba:	dc26      	bgt.n	800a80a <_printf_common+0x96>
 800a7bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a7c0:	6822      	ldr	r2, [r4, #0]
 800a7c2:	3b00      	subs	r3, #0
 800a7c4:	bf18      	it	ne
 800a7c6:	2301      	movne	r3, #1
 800a7c8:	0692      	lsls	r2, r2, #26
 800a7ca:	d42b      	bmi.n	800a824 <_printf_common+0xb0>
 800a7cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a7d0:	4641      	mov	r1, r8
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	47c8      	blx	r9
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	d01e      	beq.n	800a818 <_printf_common+0xa4>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	6922      	ldr	r2, [r4, #16]
 800a7de:	f003 0306 	and.w	r3, r3, #6
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	bf02      	ittt	eq
 800a7e6:	68e5      	ldreq	r5, [r4, #12]
 800a7e8:	6833      	ldreq	r3, [r6, #0]
 800a7ea:	1aed      	subeq	r5, r5, r3
 800a7ec:	68a3      	ldr	r3, [r4, #8]
 800a7ee:	bf0c      	ite	eq
 800a7f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7f4:	2500      	movne	r5, #0
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	bfc4      	itt	gt
 800a7fa:	1a9b      	subgt	r3, r3, r2
 800a7fc:	18ed      	addgt	r5, r5, r3
 800a7fe:	2600      	movs	r6, #0
 800a800:	341a      	adds	r4, #26
 800a802:	42b5      	cmp	r5, r6
 800a804:	d11a      	bne.n	800a83c <_printf_common+0xc8>
 800a806:	2000      	movs	r0, #0
 800a808:	e008      	b.n	800a81c <_printf_common+0xa8>
 800a80a:	2301      	movs	r3, #1
 800a80c:	4652      	mov	r2, sl
 800a80e:	4641      	mov	r1, r8
 800a810:	4638      	mov	r0, r7
 800a812:	47c8      	blx	r9
 800a814:	3001      	adds	r0, #1
 800a816:	d103      	bne.n	800a820 <_printf_common+0xac>
 800a818:	f04f 30ff 	mov.w	r0, #4294967295
 800a81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a820:	3501      	adds	r5, #1
 800a822:	e7c6      	b.n	800a7b2 <_printf_common+0x3e>
 800a824:	18e1      	adds	r1, r4, r3
 800a826:	1c5a      	adds	r2, r3, #1
 800a828:	2030      	movs	r0, #48	@ 0x30
 800a82a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a82e:	4422      	add	r2, r4
 800a830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a838:	3302      	adds	r3, #2
 800a83a:	e7c7      	b.n	800a7cc <_printf_common+0x58>
 800a83c:	2301      	movs	r3, #1
 800a83e:	4622      	mov	r2, r4
 800a840:	4641      	mov	r1, r8
 800a842:	4638      	mov	r0, r7
 800a844:	47c8      	blx	r9
 800a846:	3001      	adds	r0, #1
 800a848:	d0e6      	beq.n	800a818 <_printf_common+0xa4>
 800a84a:	3601      	adds	r6, #1
 800a84c:	e7d9      	b.n	800a802 <_printf_common+0x8e>
	...

0800a850 <_printf_i>:
 800a850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a854:	7e0f      	ldrb	r7, [r1, #24]
 800a856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a858:	2f78      	cmp	r7, #120	@ 0x78
 800a85a:	4691      	mov	r9, r2
 800a85c:	4680      	mov	r8, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	469a      	mov	sl, r3
 800a862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a866:	d807      	bhi.n	800a878 <_printf_i+0x28>
 800a868:	2f62      	cmp	r7, #98	@ 0x62
 800a86a:	d80a      	bhi.n	800a882 <_printf_i+0x32>
 800a86c:	2f00      	cmp	r7, #0
 800a86e:	f000 80d2 	beq.w	800aa16 <_printf_i+0x1c6>
 800a872:	2f58      	cmp	r7, #88	@ 0x58
 800a874:	f000 80b9 	beq.w	800a9ea <_printf_i+0x19a>
 800a878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a87c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a880:	e03a      	b.n	800a8f8 <_printf_i+0xa8>
 800a882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a886:	2b15      	cmp	r3, #21
 800a888:	d8f6      	bhi.n	800a878 <_printf_i+0x28>
 800a88a:	a101      	add	r1, pc, #4	@ (adr r1, 800a890 <_printf_i+0x40>)
 800a88c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a890:	0800a8e9 	.word	0x0800a8e9
 800a894:	0800a8fd 	.word	0x0800a8fd
 800a898:	0800a879 	.word	0x0800a879
 800a89c:	0800a879 	.word	0x0800a879
 800a8a0:	0800a879 	.word	0x0800a879
 800a8a4:	0800a879 	.word	0x0800a879
 800a8a8:	0800a8fd 	.word	0x0800a8fd
 800a8ac:	0800a879 	.word	0x0800a879
 800a8b0:	0800a879 	.word	0x0800a879
 800a8b4:	0800a879 	.word	0x0800a879
 800a8b8:	0800a879 	.word	0x0800a879
 800a8bc:	0800a9fd 	.word	0x0800a9fd
 800a8c0:	0800a927 	.word	0x0800a927
 800a8c4:	0800a9b7 	.word	0x0800a9b7
 800a8c8:	0800a879 	.word	0x0800a879
 800a8cc:	0800a879 	.word	0x0800a879
 800a8d0:	0800aa1f 	.word	0x0800aa1f
 800a8d4:	0800a879 	.word	0x0800a879
 800a8d8:	0800a927 	.word	0x0800a927
 800a8dc:	0800a879 	.word	0x0800a879
 800a8e0:	0800a879 	.word	0x0800a879
 800a8e4:	0800a9bf 	.word	0x0800a9bf
 800a8e8:	6833      	ldr	r3, [r6, #0]
 800a8ea:	1d1a      	adds	r2, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	6032      	str	r2, [r6, #0]
 800a8f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e09d      	b.n	800aa38 <_printf_i+0x1e8>
 800a8fc:	6833      	ldr	r3, [r6, #0]
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	1d19      	adds	r1, r3, #4
 800a902:	6031      	str	r1, [r6, #0]
 800a904:	0606      	lsls	r6, r0, #24
 800a906:	d501      	bpl.n	800a90c <_printf_i+0xbc>
 800a908:	681d      	ldr	r5, [r3, #0]
 800a90a:	e003      	b.n	800a914 <_printf_i+0xc4>
 800a90c:	0645      	lsls	r5, r0, #25
 800a90e:	d5fb      	bpl.n	800a908 <_printf_i+0xb8>
 800a910:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a914:	2d00      	cmp	r5, #0
 800a916:	da03      	bge.n	800a920 <_printf_i+0xd0>
 800a918:	232d      	movs	r3, #45	@ 0x2d
 800a91a:	426d      	negs	r5, r5
 800a91c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a920:	4859      	ldr	r0, [pc, #356]	@ (800aa88 <_printf_i+0x238>)
 800a922:	230a      	movs	r3, #10
 800a924:	e011      	b.n	800a94a <_printf_i+0xfa>
 800a926:	6821      	ldr	r1, [r4, #0]
 800a928:	6833      	ldr	r3, [r6, #0]
 800a92a:	0608      	lsls	r0, r1, #24
 800a92c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a930:	d402      	bmi.n	800a938 <_printf_i+0xe8>
 800a932:	0649      	lsls	r1, r1, #25
 800a934:	bf48      	it	mi
 800a936:	b2ad      	uxthmi	r5, r5
 800a938:	2f6f      	cmp	r7, #111	@ 0x6f
 800a93a:	4853      	ldr	r0, [pc, #332]	@ (800aa88 <_printf_i+0x238>)
 800a93c:	6033      	str	r3, [r6, #0]
 800a93e:	bf14      	ite	ne
 800a940:	230a      	movne	r3, #10
 800a942:	2308      	moveq	r3, #8
 800a944:	2100      	movs	r1, #0
 800a946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a94a:	6866      	ldr	r6, [r4, #4]
 800a94c:	60a6      	str	r6, [r4, #8]
 800a94e:	2e00      	cmp	r6, #0
 800a950:	bfa2      	ittt	ge
 800a952:	6821      	ldrge	r1, [r4, #0]
 800a954:	f021 0104 	bicge.w	r1, r1, #4
 800a958:	6021      	strge	r1, [r4, #0]
 800a95a:	b90d      	cbnz	r5, 800a960 <_printf_i+0x110>
 800a95c:	2e00      	cmp	r6, #0
 800a95e:	d04b      	beq.n	800a9f8 <_printf_i+0x1a8>
 800a960:	4616      	mov	r6, r2
 800a962:	fbb5 f1f3 	udiv	r1, r5, r3
 800a966:	fb03 5711 	mls	r7, r3, r1, r5
 800a96a:	5dc7      	ldrb	r7, [r0, r7]
 800a96c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a970:	462f      	mov	r7, r5
 800a972:	42bb      	cmp	r3, r7
 800a974:	460d      	mov	r5, r1
 800a976:	d9f4      	bls.n	800a962 <_printf_i+0x112>
 800a978:	2b08      	cmp	r3, #8
 800a97a:	d10b      	bne.n	800a994 <_printf_i+0x144>
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	07df      	lsls	r7, r3, #31
 800a980:	d508      	bpl.n	800a994 <_printf_i+0x144>
 800a982:	6923      	ldr	r3, [r4, #16]
 800a984:	6861      	ldr	r1, [r4, #4]
 800a986:	4299      	cmp	r1, r3
 800a988:	bfde      	ittt	le
 800a98a:	2330      	movle	r3, #48	@ 0x30
 800a98c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a990:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a994:	1b92      	subs	r2, r2, r6
 800a996:	6122      	str	r2, [r4, #16]
 800a998:	f8cd a000 	str.w	sl, [sp]
 800a99c:	464b      	mov	r3, r9
 800a99e:	aa03      	add	r2, sp, #12
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	f7ff fee6 	bl	800a774 <_printf_common>
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d14a      	bne.n	800aa42 <_printf_i+0x1f2>
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	b004      	add	sp, #16
 800a9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	f043 0320 	orr.w	r3, r3, #32
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	4833      	ldr	r0, [pc, #204]	@ (800aa8c <_printf_i+0x23c>)
 800a9c0:	2778      	movs	r7, #120	@ 0x78
 800a9c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a9c6:	6823      	ldr	r3, [r4, #0]
 800a9c8:	6831      	ldr	r1, [r6, #0]
 800a9ca:	061f      	lsls	r7, r3, #24
 800a9cc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a9d0:	d402      	bmi.n	800a9d8 <_printf_i+0x188>
 800a9d2:	065f      	lsls	r7, r3, #25
 800a9d4:	bf48      	it	mi
 800a9d6:	b2ad      	uxthmi	r5, r5
 800a9d8:	6031      	str	r1, [r6, #0]
 800a9da:	07d9      	lsls	r1, r3, #31
 800a9dc:	bf44      	itt	mi
 800a9de:	f043 0320 	orrmi.w	r3, r3, #32
 800a9e2:	6023      	strmi	r3, [r4, #0]
 800a9e4:	b11d      	cbz	r5, 800a9ee <_printf_i+0x19e>
 800a9e6:	2310      	movs	r3, #16
 800a9e8:	e7ac      	b.n	800a944 <_printf_i+0xf4>
 800a9ea:	4827      	ldr	r0, [pc, #156]	@ (800aa88 <_printf_i+0x238>)
 800a9ec:	e7e9      	b.n	800a9c2 <_printf_i+0x172>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	f023 0320 	bic.w	r3, r3, #32
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	e7f6      	b.n	800a9e6 <_printf_i+0x196>
 800a9f8:	4616      	mov	r6, r2
 800a9fa:	e7bd      	b.n	800a978 <_printf_i+0x128>
 800a9fc:	6833      	ldr	r3, [r6, #0]
 800a9fe:	6825      	ldr	r5, [r4, #0]
 800aa00:	6961      	ldr	r1, [r4, #20]
 800aa02:	1d18      	adds	r0, r3, #4
 800aa04:	6030      	str	r0, [r6, #0]
 800aa06:	062e      	lsls	r6, r5, #24
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	d501      	bpl.n	800aa10 <_printf_i+0x1c0>
 800aa0c:	6019      	str	r1, [r3, #0]
 800aa0e:	e002      	b.n	800aa16 <_printf_i+0x1c6>
 800aa10:	0668      	lsls	r0, r5, #25
 800aa12:	d5fb      	bpl.n	800aa0c <_printf_i+0x1bc>
 800aa14:	8019      	strh	r1, [r3, #0]
 800aa16:	2300      	movs	r3, #0
 800aa18:	6123      	str	r3, [r4, #16]
 800aa1a:	4616      	mov	r6, r2
 800aa1c:	e7bc      	b.n	800a998 <_printf_i+0x148>
 800aa1e:	6833      	ldr	r3, [r6, #0]
 800aa20:	1d1a      	adds	r2, r3, #4
 800aa22:	6032      	str	r2, [r6, #0]
 800aa24:	681e      	ldr	r6, [r3, #0]
 800aa26:	6862      	ldr	r2, [r4, #4]
 800aa28:	2100      	movs	r1, #0
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f7f5 fbf8 	bl	8000220 <memchr>
 800aa30:	b108      	cbz	r0, 800aa36 <_printf_i+0x1e6>
 800aa32:	1b80      	subs	r0, r0, r6
 800aa34:	6060      	str	r0, [r4, #4]
 800aa36:	6863      	ldr	r3, [r4, #4]
 800aa38:	6123      	str	r3, [r4, #16]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa40:	e7aa      	b.n	800a998 <_printf_i+0x148>
 800aa42:	6923      	ldr	r3, [r4, #16]
 800aa44:	4632      	mov	r2, r6
 800aa46:	4649      	mov	r1, r9
 800aa48:	4640      	mov	r0, r8
 800aa4a:	47d0      	blx	sl
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d0ad      	beq.n	800a9ac <_printf_i+0x15c>
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	079b      	lsls	r3, r3, #30
 800aa54:	d413      	bmi.n	800aa7e <_printf_i+0x22e>
 800aa56:	68e0      	ldr	r0, [r4, #12]
 800aa58:	9b03      	ldr	r3, [sp, #12]
 800aa5a:	4298      	cmp	r0, r3
 800aa5c:	bfb8      	it	lt
 800aa5e:	4618      	movlt	r0, r3
 800aa60:	e7a6      	b.n	800a9b0 <_printf_i+0x160>
 800aa62:	2301      	movs	r3, #1
 800aa64:	4632      	mov	r2, r6
 800aa66:	4649      	mov	r1, r9
 800aa68:	4640      	mov	r0, r8
 800aa6a:	47d0      	blx	sl
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d09d      	beq.n	800a9ac <_printf_i+0x15c>
 800aa70:	3501      	adds	r5, #1
 800aa72:	68e3      	ldr	r3, [r4, #12]
 800aa74:	9903      	ldr	r1, [sp, #12]
 800aa76:	1a5b      	subs	r3, r3, r1
 800aa78:	42ab      	cmp	r3, r5
 800aa7a:	dcf2      	bgt.n	800aa62 <_printf_i+0x212>
 800aa7c:	e7eb      	b.n	800aa56 <_printf_i+0x206>
 800aa7e:	2500      	movs	r5, #0
 800aa80:	f104 0619 	add.w	r6, r4, #25
 800aa84:	e7f5      	b.n	800aa72 <_printf_i+0x222>
 800aa86:	bf00      	nop
 800aa88:	0800ac25 	.word	0x0800ac25
 800aa8c:	0800ac36 	.word	0x0800ac36

0800aa90 <memmove>:
 800aa90:	4288      	cmp	r0, r1
 800aa92:	b510      	push	{r4, lr}
 800aa94:	eb01 0402 	add.w	r4, r1, r2
 800aa98:	d902      	bls.n	800aaa0 <memmove+0x10>
 800aa9a:	4284      	cmp	r4, r0
 800aa9c:	4623      	mov	r3, r4
 800aa9e:	d807      	bhi.n	800aab0 <memmove+0x20>
 800aaa0:	1e43      	subs	r3, r0, #1
 800aaa2:	42a1      	cmp	r1, r4
 800aaa4:	d008      	beq.n	800aab8 <memmove+0x28>
 800aaa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaae:	e7f8      	b.n	800aaa2 <memmove+0x12>
 800aab0:	4402      	add	r2, r0
 800aab2:	4601      	mov	r1, r0
 800aab4:	428a      	cmp	r2, r1
 800aab6:	d100      	bne.n	800aaba <memmove+0x2a>
 800aab8:	bd10      	pop	{r4, pc}
 800aaba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aabe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aac2:	e7f7      	b.n	800aab4 <memmove+0x24>

0800aac4 <_sbrk_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4d06      	ldr	r5, [pc, #24]	@ (800aae0 <_sbrk_r+0x1c>)
 800aac8:	2300      	movs	r3, #0
 800aaca:	4604      	mov	r4, r0
 800aacc:	4608      	mov	r0, r1
 800aace:	602b      	str	r3, [r5, #0]
 800aad0:	f7f6 f84e 	bl	8000b70 <_sbrk>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d102      	bne.n	800aade <_sbrk_r+0x1a>
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	b103      	cbz	r3, 800aade <_sbrk_r+0x1a>
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	20002300 	.word	0x20002300

0800aae4 <_realloc_r>:
 800aae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae8:	4680      	mov	r8, r0
 800aaea:	4615      	mov	r5, r2
 800aaec:	460c      	mov	r4, r1
 800aaee:	b921      	cbnz	r1, 800aafa <_realloc_r+0x16>
 800aaf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	f7ff bc59 	b.w	800a3ac <_malloc_r>
 800aafa:	b92a      	cbnz	r2, 800ab08 <_realloc_r+0x24>
 800aafc:	f7ff fbea 	bl	800a2d4 <_free_r>
 800ab00:	2400      	movs	r4, #0
 800ab02:	4620      	mov	r0, r4
 800ab04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab08:	f000 f81a 	bl	800ab40 <_malloc_usable_size_r>
 800ab0c:	4285      	cmp	r5, r0
 800ab0e:	4606      	mov	r6, r0
 800ab10:	d802      	bhi.n	800ab18 <_realloc_r+0x34>
 800ab12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab16:	d8f4      	bhi.n	800ab02 <_realloc_r+0x1e>
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	f7ff fc46 	bl	800a3ac <_malloc_r>
 800ab20:	4607      	mov	r7, r0
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d0ec      	beq.n	800ab00 <_realloc_r+0x1c>
 800ab26:	42b5      	cmp	r5, r6
 800ab28:	462a      	mov	r2, r5
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	bf28      	it	cs
 800ab2e:	4632      	movcs	r2, r6
 800ab30:	f7ff fbc2 	bl	800a2b8 <memcpy>
 800ab34:	4621      	mov	r1, r4
 800ab36:	4640      	mov	r0, r8
 800ab38:	f7ff fbcc 	bl	800a2d4 <_free_r>
 800ab3c:	463c      	mov	r4, r7
 800ab3e:	e7e0      	b.n	800ab02 <_realloc_r+0x1e>

0800ab40 <_malloc_usable_size_r>:
 800ab40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab44:	1f18      	subs	r0, r3, #4
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	bfbc      	itt	lt
 800ab4a:	580b      	ldrlt	r3, [r1, r0]
 800ab4c:	18c0      	addlt	r0, r0, r3
 800ab4e:	4770      	bx	lr

0800ab50 <_init>:
 800ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab52:	bf00      	nop
 800ab54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab56:	bc08      	pop	{r3}
 800ab58:	469e      	mov	lr, r3
 800ab5a:	4770      	bx	lr

0800ab5c <_fini>:
 800ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5e:	bf00      	nop
 800ab60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab62:	bc08      	pop	{r3}
 800ab64:	469e      	mov	lr, r3
 800ab66:	4770      	bx	lr
