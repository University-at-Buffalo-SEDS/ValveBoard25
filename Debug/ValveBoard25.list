
ValveBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a44  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08012c28  08012c28  00013c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133dc  080133dc  00015350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080133dc  080133dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133e4  080133e4  00015350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133e4  080133e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080133e8  080133e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  080133ec  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000100dc  20000350  0801373c  00015350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001042c  0801373c  0001542c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000306de  00000000  00000000  00015380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062aa  00000000  00000000  00045a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002748  00000000  00000000  0004bd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e50  00000000  00000000  0004e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028461  00000000  00000000  000502a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e8da  00000000  00000000  00078701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd4fd  00000000  00000000  000a6fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a44d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b960  00000000  00000000  001a451c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001afe7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012c0c 	.word	0x08012c0c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08012c0c 	.word	0x08012c0c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b988 	b.w	8000fc0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <LTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int LTC2990_Init(LTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c, uint8_t address) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	71fb      	strb	r3, [r7, #7]
	int8_t ack;

	handle->hi2c = hi2c;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	601a      	str	r2, [r3, #0]

	//Initialize current to NAN
	handle->current = NAN;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4a20      	ldr	r2, [pc, #128]	@ (800105c <LTC2990_Init+0x98>)
 8000fdc:	611a      	str	r2, [r3, #16]

	handle->i2c_address = address;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	711a      	strb	r2, [r3, #4]

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, CLEAR_ALL); // was V1DV2_V3DV4 //
 8000fe4:	22ff      	movs	r2, #255	@ 0xff
 8000fe6:	211f      	movs	r1, #31
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 f96f 	bl	80012cc <LTC2990_Set_Mode>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8000ff2:	2064      	movs	r0, #100	@ 0x64
 8000ff4:	f001 fa88 	bl	8002508 <HAL_Delay>

	if(ack != 0) {
 8000ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <LTC2990_Init+0x46>
		CDC_Transmit_Print("Failed to set in Differential Voltage Mode \n");
 8001000:	4817      	ldr	r0, [pc, #92]	@ (8001060 <LTC2990_Init+0x9c>)
 8001002:	f000 fb39 	bl	8001678 <CDC_Transmit_Print>
		while(1);
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <LTC2990_Init+0x42>
	}

	uint8_t reg_check;
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_check);
 800100a:	f107 0316 	add.w	r3, r7, #22
 800100e:	461a      	mov	r2, r3
 8001010:	2101      	movs	r1, #1
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 fad6 	bl	80015c4 <LTC2990_Read_Register>
 8001018:	4603      	mov	r3, r0
 800101a:	75fb      	strb	r3, [r7, #23]
	while(reg_check != 0x1F) {
 800101c:	e010      	b.n	8001040 <LTC2990_Init+0x7c>
		CDC_Transmit_Print("NOT SETTING CONTROL REGISTER CORRECTLY\n");
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <LTC2990_Init+0xa0>)
 8001020:	f000 fb2a 	bl	8001678 <CDC_Transmit_Print>
		CDC_Transmit_Print("GOT %X\n", reg_check);
 8001024:	7dbb      	ldrb	r3, [r7, #22]
 8001026:	4619      	mov	r1, r3
 8001028:	480f      	ldr	r0, [pc, #60]	@ (8001068 <LTC2990_Init+0xa4>)
 800102a:	f000 fb25 	bl	8001678 <CDC_Transmit_Print>
		ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_check);
 800102e:	f107 0316 	add.w	r3, r7, #22
 8001032:	461a      	mov	r2, r3
 8001034:	2101      	movs	r1, #1
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 fac4 	bl	80015c4 <LTC2990_Read_Register>
 800103c:	4603      	mov	r3, r0
 800103e:	75fb      	strb	r3, [r7, #23]
	while(reg_check != 0x1F) {
 8001040:	7dbb      	ldrb	r3, [r7, #22]
 8001042:	2b1f      	cmp	r3, #31
 8001044:	d1eb      	bne.n	800101e <LTC2990_Init+0x5a>
	}

	CDC_Transmit_Print("LTC2990 configured for Differential Voltage Monitoring. \n");
 8001046:	4809      	ldr	r0, [pc, #36]	@ (800106c <LTC2990_Init+0xa8>)
 8001048:	f000 fb16 	bl	8001678 <CDC_Transmit_Print>

	//Initial data reading
	LTC2990_Step(handle);
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f80f 	bl	8001070 <LTC2990_Step>

	return 0;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	7fc00000 	.word	0x7fc00000
 8001060:	08012c28 	.word	0x08012c28
 8001064:	08012c58 	.word	0x08012c58
 8001068:	08012c80 	.word	0x08012c80
 800106c:	08012c88 	.word	0x08012c88

08001070 <LTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void LTC2990_Step(LTC2990_Handle_t *handle) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	int8_t data_valid;


	// Read differential voltage V1-V2

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, 0x5F);
 8001078:	225f      	movs	r2, #95	@ 0x5f
 800107a:	211f      	movs	r1, #31
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f925 	bl	80012cc <LTC2990_Set_Mode>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]

	if(ack != 0) {
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <LTC2990_Step+0x28>
		CDC_Transmit_Print("Failed to switch mode \n");
 800108e:	487e      	ldr	r0, [pc, #504]	@ (8001288 <LTC2990_Step+0x218>)
 8001090:	f000 faf2 	bl	8001678 <CDC_Transmit_Print>
		while(1);
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <LTC2990_Step+0x24>
	}

	HAL_Delay(50);
 8001098:	2032      	movs	r0, #50	@ 0x32
 800109a:	f001 fa35 	bl	8002508 <HAL_Delay>

	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f958 	bl	8001354 <LTC2990_Trigger_Conversion>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
	if(ack != 0) {
 80010a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <LTC2990_Step+0x48>
		CDC_Transmit_Print("Failed to trigger conversion.");
 80010b0:	4876      	ldr	r0, [pc, #472]	@ (800128c <LTC2990_Step+0x21c>)
 80010b2:	f000 fae1 	bl	8001678 <CDC_Transmit_Print>
		return;
 80010b6:	e0e0      	b.n	800127a <LTC2990_Step+0x20a>
	}

	// Allow time for conversion
	HAL_Delay(100);
 80010b8:	2064      	movs	r0, #100	@ 0x64
 80010ba:	f001 fa25 	bl	8002508 <HAL_Delay>


	ack = LTC2990_ADC_Read_New_Data(handle, V1_MSB_REG, &adc_code, &data_valid);
 80010be:	f107 030b 	add.w	r3, r7, #11
 80010c2:	f107 020c 	add.w	r2, r7, #12
 80010c6:	2106      	movs	r1, #6
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f951 	bl	8001370 <LTC2990_ADC_Read_New_Data>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <LTC2990_Step+0x72>
 80010da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d019      	beq.n	8001116 <LTC2990_Step+0xa6>
		CDC_Transmit_Print("Error reading Register %x \n", V1_MSB_REG);
 80010e2:	2106      	movs	r1, #6
 80010e4:	486a      	ldr	r0, [pc, #424]	@ (8001290 <LTC2990_Step+0x220>)
 80010e6:	f000 fac7 	bl	8001678 <CDC_Transmit_Print>
		HAL_Delay(50);
 80010ea:	2032      	movs	r0, #50	@ 0x32
 80010ec:	f001 fa0c 	bl	8002508 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4867      	ldr	r0, [pc, #412]	@ (8001294 <LTC2990_Step+0x224>)
 80010f8:	f000 fabe 	bl	8001678 <CDC_Transmit_Print>
		HAL_Delay(50);
 80010fc:	2032      	movs	r0, #50	@ 0x32
 80010fe:	f001 fa03 	bl	8002508 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8001102:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001106:	4619      	mov	r1, r3
 8001108:	4863      	ldr	r0, [pc, #396]	@ (8001298 <LTC2990_Step+0x228>)
 800110a:	f000 fab5 	bl	8001678 <CDC_Transmit_Print>
		handle->voltages[0] = NAN;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a62      	ldr	r2, [pc, #392]	@ (800129c <LTC2990_Step+0x22c>)
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	e017      	b.n	8001146 <LTC2990_Step+0xd6>
	} else {
		handle->voltages[0] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code) * (28.0/10.0);
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fa12 	bl	8001544 <LTC2990_Code_To_Single_Ended_Voltage>
 8001120:	ee10 3a10 	vmov	r3, s0
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa37 	bl	8000598 <__aeabi_f2d>
 800112a:	a355      	add	r3, pc, #340	@ (adr r3, 8001280 <LTC2990_Step+0x210>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fa8a 	bl	8000648 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fd5c 	bl	8000bf8 <__aeabi_d2f>
 8001140:	4602      	mov	r2, r0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	609a      	str	r2, [r3, #8]
	}

	ack = LTC2990_ADC_Read_New_Data(handle, V2_MSB_REG, &adc_code, &data_valid);
 8001146:	f107 030b 	add.w	r3, r7, #11
 800114a:	f107 020c 	add.w	r2, r7, #12
 800114e:	2108      	movs	r1, #8
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f90d 	bl	8001370 <LTC2990_ADC_Read_New_Data>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d103      	bne.n	800116a <LTC2990_Step+0xfa>
 8001162:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d019      	beq.n	800119e <LTC2990_Step+0x12e>
		CDC_Transmit_Print("Error reading Register %x \n", V2_MSB_REG);
 800116a:	2108      	movs	r1, #8
 800116c:	4848      	ldr	r0, [pc, #288]	@ (8001290 <LTC2990_Step+0x220>)
 800116e:	f000 fa83 	bl	8001678 <CDC_Transmit_Print>
		HAL_Delay(50);
 8001172:	2032      	movs	r0, #50	@ 0x32
 8001174:	f001 f9c8 	bl	8002508 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	4619      	mov	r1, r3
 800117e:	4845      	ldr	r0, [pc, #276]	@ (8001294 <LTC2990_Step+0x224>)
 8001180:	f000 fa7a 	bl	8001678 <CDC_Transmit_Print>
		HAL_Delay(50);
 8001184:	2032      	movs	r0, #50	@ 0x32
 8001186:	f001 f9bf 	bl	8002508 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 800118a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800118e:	4619      	mov	r1, r3
 8001190:	4841      	ldr	r0, [pc, #260]	@ (8001298 <LTC2990_Step+0x228>)
 8001192:	f000 fa71 	bl	8001678 <CDC_Transmit_Print>
		handle->voltages[0] = NAN;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a40      	ldr	r2, [pc, #256]	@ (800129c <LTC2990_Step+0x22c>)
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	e017      	b.n	80011ce <LTC2990_Step+0x15e>
	} else {
		handle->voltages[1] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code) * (40.0/10.0);
 800119e:	89bb      	ldrh	r3, [r7, #12]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f9ce 	bl	8001544 <LTC2990_Code_To_Single_Ended_Voltage>
 80011a8:	ee10 3a10 	vmov	r3, s0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9f3 	bl	8000598 <__aeabi_f2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b3a      	ldr	r3, [pc, #232]	@ (80012a0 <LTC2990_Step+0x230>)
 80011b8:	f7ff fa46 	bl	8000648 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fd18 	bl	8000bf8 <__aeabi_d2f>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60da      	str	r2, [r3, #12]
	}

	ack = LTC2990_Set_Mode(handle, V1DV2_V3DV4, CLEAR_ALL); // was V1DV2_V3DV4 //
 80011ce:	22ff      	movs	r2, #255	@ 0xff
 80011d0:	215e      	movs	r1, #94	@ 0x5e
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f87a 	bl	80012cc <LTC2990_Set_Mode>
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]

	if(ack != 0) {
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <LTC2990_Step+0x17e>
		CDC_Transmit_Print("Failed to switch mode \n");
 80011e4:	4828      	ldr	r0, [pc, #160]	@ (8001288 <LTC2990_Step+0x218>)
 80011e6:	f000 fa47 	bl	8001678 <CDC_Transmit_Print>
		while(1);
 80011ea:	bf00      	nop
 80011ec:	e7fd      	b.n	80011ea <LTC2990_Step+0x17a>
	}

	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f8b0 	bl	8001354 <LTC2990_Trigger_Conversion>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
	if(ack != 0) {
 80011f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <LTC2990_Step+0x198>
		CDC_Transmit_Print("Failed to trigger conversion.");
 8001200:	4822      	ldr	r0, [pc, #136]	@ (800128c <LTC2990_Step+0x21c>)
 8001202:	f000 fa39 	bl	8001678 <CDC_Transmit_Print>
		return;
 8001206:	e038      	b.n	800127a <LTC2990_Step+0x20a>
	}

	// Allow time for conversion
	HAL_Delay(100);
 8001208:	2064      	movs	r0, #100	@ 0x64
 800120a:	f001 f97d 	bl	8002508 <HAL_Delay>

	ack = LTC2990_ADC_Read_New_Data(handle, V3DV4_MSB_REG, &adc_code, &data_valid);
 800120e:	f107 030b 	add.w	r3, r7, #11
 8001212:	f107 020c 	add.w	r2, r7, #12
 8001216:	210a      	movs	r1, #10
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f8a9 	bl	8001370 <LTC2990_ADC_Read_New_Data>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <LTC2990_Step+0x1c2>
 800122a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d019      	beq.n	8001266 <LTC2990_Step+0x1f6>
		CDC_Transmit_Print("Error reading Register %x \n", V3DV4_MSB_REG);
 8001232:	210a      	movs	r1, #10
 8001234:	4816      	ldr	r0, [pc, #88]	@ (8001290 <LTC2990_Step+0x220>)
 8001236:	f000 fa1f 	bl	8001678 <CDC_Transmit_Print>
		HAL_Delay(50);
 800123a:	2032      	movs	r0, #50	@ 0x32
 800123c:	f001 f964 	bl	8002508 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 8001240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001244:	4619      	mov	r1, r3
 8001246:	4813      	ldr	r0, [pc, #76]	@ (8001294 <LTC2990_Step+0x224>)
 8001248:	f000 fa16 	bl	8001678 <CDC_Transmit_Print>
		HAL_Delay(50);
 800124c:	2032      	movs	r0, #50	@ 0x32
 800124e:	f001 f95b 	bl	8002508 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8001252:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001256:	4619      	mov	r1, r3
 8001258:	480f      	ldr	r0, [pc, #60]	@ (8001298 <LTC2990_Step+0x228>)
 800125a:	f000 fa0d 	bl	8001678 <CDC_Transmit_Print>
		handle->current = NAN;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <LTC2990_Step+0x22c>)
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	e009      	b.n	800127a <LTC2990_Step+0x20a>
	} else {
		handle->current = LTC2990_Code_To_Current(handle, adc_code);
 8001266:	89bb      	ldrh	r3, [r7, #12]
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f904 	bl	8001478 <LTC2990_Code_To_Current>
 8001270:	eef0 7a40 	vmov.f32	s15, s0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edc3 7a04 	vstr	s15, [r3, #16]
	}

}
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	66666666 	.word	0x66666666
 8001284:	40066666 	.word	0x40066666
 8001288:	08012cc4 	.word	0x08012cc4
 800128c:	08012cdc 	.word	0x08012cdc
 8001290:	08012cfc 	.word	0x08012cfc
 8001294:	08012d18 	.word	0x08012d18
 8001298:	08012d30 	.word	0x08012d30
 800129c:	7fc00000 	.word	0x7fc00000
 80012a0:	40100000 	.word	0x40100000

080012a4 <LTC2990_Get_Single_Ended_Voltage>:
float LTC2990_Get_Current(LTC2990_Handle_t* handle) {
	return handle->current;
}


void LTC2990_Get_Single_Ended_Voltage(LTC2990_Handle_t* handle, float* volts) {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
	volts[0] = handle->voltages[0];
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	601a      	str	r2, [r3, #0]
	volts[1] = handle->voltages[1];
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	3304      	adds	r3, #4
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68d2      	ldr	r2, [r2, #12]
 80012be:	601a      	str	r2, [r3, #0]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LTC2990_Set_Mode>:

int8_t LTC2990_Set_Mode(LTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
 80012d8:	4613      	mov	r3, r2
 80012da:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 80012dc:	f107 030e 	add.w	r3, r7, #14
 80012e0:	461a      	mov	r2, r3
 80012e2:	2101      	movs	r1, #1
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f96d 	bl	80015c4 <LTC2990_Read_Register>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <LTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 80012f6:	4815      	ldr	r0, [pc, #84]	@ (800134c <LTC2990_Set_Mode+0x80>)
 80012f8:	f000 f9be 	bl	8001678 <CDC_Transmit_Print>
		return ack;
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	e01f      	b.n	8001342 <LTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 8001302:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001306:	43db      	mvns	r3, r3
 8001308:	b25a      	sxtb	r2, r3
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	4013      	ands	r3, r2
 8001310:	b25b      	sxtb	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 8001316:	7bba      	ldrb	r2, [r7, #14]
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	4313      	orrs	r3, r2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = LTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	461a      	mov	r2, r3
 8001324:	2101      	movs	r1, #1
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f978 	bl	800161c <LTC2990_Write_Register>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <LTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <LTC2990_Set_Mode+0x84>)
 800133a:	f000 f99d 	bl	8001678 <CDC_Transmit_Print>
	}
	return ack;
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	08012d50 	.word	0x08012d50
 8001350:	08012d78 	.word	0x08012d78

08001354 <LTC2990_Trigger_Conversion>:

int8_t LTC2990_Trigger_Conversion(LTC2990_Handle_t *handle) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	return LTC2990_Write_Register(handle, TRIGGER_REG, 0x01);
 800135c:	2201      	movs	r2, #1
 800135e:	2102      	movs	r1, #2
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f95b 	bl	800161c <LTC2990_Write_Register>
 8001366:	4603      	mov	r3, r0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <LTC2990_ADC_Read_New_Data>:


uint8_t LTC2990_ADC_Read_New_Data(LTC2990_Handle_t *handle, uint8_t msb_register_address, uint16_t* adc_code, int8_t* data_valid) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	460b      	mov	r3, r1
 800137e:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 8001380:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001384:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3b01      	subs	r3, #1
 800138e:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 8001390:	e01a      	b.n	80013c8 <LTC2990_ADC_Read_New_Data+0x58>
		ack = LTC2990_Read_Register(handle, STATUS_REG, &status);
 8001392:	f107 0319 	add.w	r3, r7, #25
 8001396:	461a      	mov	r2, r3
 8001398:	2100      	movs	r1, #0
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 f912 	bl	80015c4 <LTC2990_Read_Register>
 80013a0:	4603      	mov	r3, r0
 80013a2:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 80013a4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <LTC2990_ADC_Read_New_Data+0x40>
			return ack;
 80013ac:	7f3b      	ldrb	r3, [r7, #28]
 80013ae:	e05b      	b.n	8001468 <LTC2990_ADC_Read_New_Data+0xf8>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 80013b0:	7e7b      	ldrb	r3, [r7, #25]
 80013b2:	461a      	mov	r2, r3
 80013b4:	7f7b      	ldrb	r3, [r7, #29]
 80013b6:	fa42 f303 	asr.w	r3, r2, r3
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <LTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f001 f8a0 	bl	8002508 <HAL_Delay>
	while (--timeout) {
 80013c8:	8bfb      	ldrh	r3, [r7, #30]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	83fb      	strh	r3, [r7, #30]
 80013ce:	8bfb      	ldrh	r3, [r7, #30]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1de      	bne.n	8001392 <LTC2990_ADC_Read_New_Data+0x22>
 80013d4:	e000      	b.n	80013d8 <LTC2990_ADC_Read_New_Data+0x68>
			break;
 80013d6:	bf00      	nop
	}


	if (timeout == 0) {
 80013d8:	8bfb      	ldrh	r3, [r7, #30]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d104      	bne.n	80013e8 <LTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 80013de:	4824      	ldr	r0, [pc, #144]	@ (8001470 <LTC2990_ADC_Read_New_Data+0x100>)
 80013e0:	f000 f94a 	bl	8001678 <CDC_Transmit_Print>
		return 1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e03f      	b.n	8001468 <LTC2990_ADC_Read_New_Data+0xf8>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = LTC2990_Read_Register(handle, msb_register_address, &msb);
 80013e8:	f107 0218 	add.w	r2, r7, #24
 80013ec:	7afb      	ldrb	r3, [r7, #11]
 80013ee:	4619      	mov	r1, r3
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 f8e7 	bl	80015c4 <LTC2990_Read_Register>
 80013f6:	4603      	mov	r3, r0
 80013f8:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 80013fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <LTC2990_ADC_Read_New_Data+0x96>
		return ack;
 8001402:	7f3b      	ldrb	r3, [r7, #28]
 8001404:	e030      	b.n	8001468 <LTC2990_ADC_Read_New_Data+0xf8>
	}

	ack = LTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 8001406:	7afb      	ldrb	r3, [r7, #11]
 8001408:	3301      	adds	r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f107 0217 	add.w	r2, r7, #23
 8001410:	4619      	mov	r1, r3
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 f8d6 	bl	80015c4 <LTC2990_Read_Register>
 8001418:	4603      	mov	r3, r0
 800141a:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 800141c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <LTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 8001424:	7f3b      	ldrb	r3, [r7, #28]
 8001426:	e01f      	b.n	8001468 <LTC2990_ADC_Read_New_Data+0xf8>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 8001428:	7e3b      	ldrb	r3, [r7, #24]
 800142a:	b21b      	sxth	r3, r3
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b21a      	sxth	r2, r3
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21b      	sxth	r3, r3
 8001438:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 800143a:	8b7b      	ldrh	r3, [r7, #26]
 800143c:	0bdb      	lsrs	r3, r3, #15
 800143e:	b29b      	uxth	r3, r3
 8001440:	b25b      	sxtb	r3, r3
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	b25a      	sxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x7FFF;
 800144c:	8b7b      	ldrh	r3, [r7, #26]
 800144e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	801a      	strh	r2, [r3, #0]


	return (*data_valid == 1) ? 0 : 1;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f993 3000 	ldrsb.w	r3, [r3]
 800145e:	2b01      	cmp	r3, #1
 8001460:	bf14      	ite	ne
 8001462:	2301      	movne	r3, #1
 8001464:	2300      	moveq	r3, #0
 8001466:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
 8001468:	4618      	mov	r0, r3
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	08012da0 	.word	0x08012da0
 8001474:	00000000 	.word	0x00000000

08001478 <LTC2990_Code_To_Current>:

float LTC2990_Code_To_Current(LTC2990_Handle_t *handle, uint16_t adc_code) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 8001484:	2301      	movs	r3, #1
 8001486:	81fb      	strh	r3, [r7, #14]


	if(adc_code & 0x4000) { //If the code is negative //was 0x4000
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00d      	beq.n	80014ae <LTC2990_Code_To_Current+0x36>
		CDC_Transmit_Print("Negative??? \r\n");
 8001492:	482b      	ldr	r0, [pc, #172]	@ (8001540 <LTC2990_Code_To_Current+0xc8>)
 8001494:	f000 f8f0 	bl	8001678 <CDC_Transmit_Print>
		adc_code = (adc_code ^ 0x3FFF) + 1;// Two's compliment //was 0x7FFF
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	f483 537f 	eor.w	r3, r3, #16320	@ 0x3fc0
 800149e:	f083 033f 	eor.w	r3, r3, #63	@ 0x3f
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	807b      	strh	r3, [r7, #2]
		sign = -1;
 80014a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ac:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014b4:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * CSINGLE_ENDED_LSB;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c0:	ee17 0a90 	vmov	r0, s15
 80014c4:	f7ff f868 	bl	8000598 <__aeabi_f2d>
 80014c8:	a319      	add	r3, pc, #100	@ (adr r3, 8001530 <LTC2990_Code_To_Current+0xb8>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f8bb 	bl	8000648 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fb8d 	bl	8000bf8 <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	60bb      	str	r3, [r7, #8]
	voltage /= RSENSE;
 80014e2:	68b8      	ldr	r0, [r7, #8]
 80014e4:	f7ff f858 	bl	8000598 <__aeabi_f2d>
 80014e8:	a313      	add	r3, pc, #76	@ (adr r3, 8001538 <LTC2990_Code_To_Current+0xc0>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff f9d5 	bl	800089c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff fb7d 	bl	8000bf8 <__aeabi_d2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	60bb      	str	r3, [r7, #8]
	voltage *= sign;
 8001502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001516:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	ee07 3a90 	vmov	s15, r3
}
 8001520:	eeb0 0a67 	vmov.f32	s0, s15
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	ac083127 	.word	0xac083127
 8001534:	3ef45a1c 	.word	0x3ef45a1c
 8001538:	47ae147b 	.word	0x47ae147b
 800153c:	3f947ae1 	.word	0x3f947ae1
 8001540:	08012db4 	.word	0x08012db4

08001544 <LTC2990_Code_To_Single_Ended_Voltage>:
	voltage *= sign;

	return voltage;
}

float LTC2990_Code_To_Single_Ended_Voltage(LTC2990_Handle_t *handle, uint16_t adc_code) {
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 8001550:	2301      	movs	r3, #1
 8001552:	81fb      	strh	r3, [r7, #14]


	if(adc_code & 0x4000) { //If the code is negative //was 0x4000
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00a      	beq.n	8001574 <LTC2990_Code_To_Single_Ended_Voltage+0x30>
		adc_code = (adc_code ^ 0x3FFF) + 1;// Two's compliment //was 0x7FFF
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	f483 537f 	eor.w	r3, r3, #16320	@ 0x3fc0
 8001564:	f083 033f 	eor.w	r3, r3, #63	@ 0x3f
 8001568:	b29b      	uxth	r3, r3
 800156a:	3301      	adds	r3, #1
 800156c:	807b      	strh	r3, [r7, #2]
		sign = -1;
 800156e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001572:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800157a:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * VSINGLE_ENDED_LSB;
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001586:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80015c0 <LTC2990_Code_To_Single_Ended_Voltage+0x7c>
 800158a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158e:	edc7 7a02 	vstr	s15, [r7, #8]
	voltage *= sign;
 8001592:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159e:	ed97 7a02 	vldr	s14, [r7, #8]
 80015a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a6:	edc7 7a02 	vstr	s15, [r7, #8]


	return voltage;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	ee07 3a90 	vmov	s15, r3
}
 80015b0:	eeb0 0a67 	vmov.f32	s0, s15
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	39a00000 	.word	0x39a00000

080015c4 <LTC2990_Read_Register>:


int8_t LTC2990_Read_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	460b      	mov	r3, r1
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	b299      	uxth	r1, r3
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	2301      	movs	r3, #1
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2301      	movs	r3, #1
 80015f2:	f003 f92b 	bl	800484c <HAL_I2C_Mem_Read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK) {
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <LTC2990_Read_Register+0x40>
		return 0;
 8001600:	2300      	movs	r3, #0
 8001602:	e005      	b.n	8001610 <LTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	4619      	mov	r1, r3
 8001608:	4803      	ldr	r0, [pc, #12]	@ (8001618 <LTC2990_Read_Register+0x54>)
 800160a:	f000 f835 	bl	8001678 <CDC_Transmit_Print>
	return 1;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08012dc4 	.word	0x08012dc4

0800161c <LTC2990_Write_Register>:

int8_t LTC2990_Write_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af04      	add	r7, sp, #16
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
 8001628:	4613      	mov	r3, r2
 800162a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	b299      	uxth	r1, r3
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	b29a      	uxth	r2, r3
 800163c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	2301      	movs	r3, #1
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	1cbb      	adds	r3, r7, #2
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2301      	movs	r3, #1
 800164c:	f002 ffea 	bl	8004624 <HAL_I2C_Mem_Write>
 8001650:	4603      	mov	r3, r0
 8001652:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK) {
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <LTC2990_Write_Register+0x42>
		return 0;
 800165a:	2300      	movs	r3, #0
 800165c:	e005      	b.n	800166a <LTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	4619      	mov	r1, r3
 8001662:	4804      	ldr	r0, [pc, #16]	@ (8001674 <LTC2990_Write_Register+0x58>)
 8001664:	f000 f808 	bl	8001678 <CDC_Transmit_Print>

	return 1;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	08012dec 	.word	0x08012dec

08001678 <CDC_Transmit_Print>:
/* USER CODE BEGIN 0 */

#define PRINT_BUFFER_SIZE     256

void CDC_Transmit_Print(const char *format, ...)
{
 8001678:	b40f      	push	{r0, r1, r2, r3}
 800167a:	b580      	push	{r7, lr}
 800167c:	b0c2      	sub	sp, #264	@ 0x108
 800167e:	af00      	add	r7, sp, #0
  char buf[PRINT_BUFFER_SIZE];
  va_list args;
  va_start(args, format);
 8001680:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800168c:	601a      	str	r2, [r3, #0]
  int n = vsprintf(buf, format, args);
 800168e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001696:	1d38      	adds	r0, r7, #4
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800169e:	f00f f97f 	bl	80109a0 <vsiprintf>
 80016a2:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  va_end(args);
  CDC_Transmit_FS(buf, n);
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00d ffb9 	bl	800f624 <CDC_Transmit_FS>
}
 80016b2:	bf00      	nop
 80016b4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80016b8:	46bd      	mov	sp, r7
 80016ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016be:	b004      	add	sp, #16
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_GPIO_EXTI_Callback>:
//uint32_t adc_data;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == EMER_VALVE_IN_Pin) {
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d10d      	bne.n	80016f0 <HAL_GPIO_EXTI_Callback+0x2c>
		GPIO_PinState in = HAL_GPIO_ReadPin(EMER_VALVE_IN_GPIO_Port, EMER_VALVE_IN_Pin);
 80016d4:	2101      	movs	r1, #1
 80016d6:	4812      	ldr	r0, [pc, #72]	@ (8001720 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016d8:	f002 fea6 	bl	8004428 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(Emergency_Valve_OUT_GPIO_Port, Emergency_Valve_OUT_Pin, in);
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	461a      	mov	r2, r3
 80016e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e8:	480d      	ldr	r0, [pc, #52]	@ (8001720 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016ea:	f002 feb5 	bl	8004458 <HAL_GPIO_WritePin>
 80016ee:	e014      	b.n	800171a <HAL_GPIO_EXTI_Callback+0x56>
	} else if (GPIO_Pin == FC_FAULT_Pin) {
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d106      	bne.n	8001704 <HAL_GPIO_EXTI_Callback+0x40>
		HAL_GPIO_WritePin(Emergency_Valve_OUT_GPIO_Port, Emergency_Valve_OUT_Pin, GPIO_PIN_SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016fc:	4808      	ldr	r0, [pc, #32]	@ (8001720 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016fe:	f002 feab 	bl	8004458 <HAL_GPIO_WritePin>
 8001702:	e00a      	b.n	800171a <HAL_GPIO_EXTI_Callback+0x56>
	} else if (GPIO_Pin == SOLENOID_IN_Pin) {
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d106      	bne.n	8001718 <HAL_GPIO_EXTI_Callback+0x54>
		HAL_GPIO_WritePin(Solenoid_OUT_GPIO_Port, Solenoid_OUT_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001710:	4803      	ldr	r0, [pc, #12]	@ (8001720 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001712:	f002 fea1 	bl	8004458 <HAL_GPIO_WritePin>
 8001716:	e000      	b.n	800171a <HAL_GPIO_EXTI_Callback+0x56>
	} else {
		return;
 8001718:	bf00      	nop
	}
}
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	48000400 	.word	0x48000400

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001728:	f000 feb7 	bl	800249a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172c:	f000 f876 	bl	800181c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001730:	f000 f9fa 	bl	8001b28 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001734:	f000 f8b4 	bl	80018a0 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8001738:	f000 f924 	bl	8001984 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 800173c:	f000 f96a 	bl	8001a14 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001740:	f000 f9a8 	bl	8001a94 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_FDCAN_Start(&hfdcan2);
 8001744:	4820      	ldr	r0, [pc, #128]	@ (80017c8 <main+0xa4>)
 8001746:	f002 fba3 	bl	8003e90 <HAL_FDCAN_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800174a:	f00a ff0d 	bl	800c568 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorQueue */
  sensorQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &sensorQueue_attributes);
 800174e:	4a1f      	ldr	r2, [pc, #124]	@ (80017cc <main+0xa8>)
 8001750:	2102      	movs	r1, #2
 8001752:	2010      	movs	r0, #16
 8001754:	f00b f800 	bl	800c758 <osMessageQueueNew>
 8001758:	4603      	mov	r3, r0
 800175a:	4a1d      	ldr	r2, [pc, #116]	@ (80017d0 <main+0xac>)
 800175c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED */
  blinkLEDHandle = osThreadNew(startBlinkLED, NULL, &blinkLED_attributes);
 800175e:	4a1d      	ldr	r2, [pc, #116]	@ (80017d4 <main+0xb0>)
 8001760:	2100      	movs	r1, #0
 8001762:	481d      	ldr	r0, [pc, #116]	@ (80017d8 <main+0xb4>)
 8001764:	f00a ff4a 	bl	800c5fc <osThreadNew>
 8001768:	4603      	mov	r3, r0
 800176a:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <main+0xb8>)
 800176c:	6013      	str	r3, [r2, #0]

  /* creation of readInstrumenta */
  readInstrumentaHandle = osThreadNew(startReadInstrumentation, NULL, &readInstrumenta_attributes);
 800176e:	4a1c      	ldr	r2, [pc, #112]	@ (80017e0 <main+0xbc>)
 8001770:	2100      	movs	r1, #0
 8001772:	481c      	ldr	r0, [pc, #112]	@ (80017e4 <main+0xc0>)
 8001774:	f00a ff42 	bl	800c5fc <osThreadNew>
 8001778:	4603      	mov	r3, r0
 800177a:	4a1b      	ldr	r2, [pc, #108]	@ (80017e8 <main+0xc4>)
 800177c:	6013      	str	r3, [r2, #0]

  /* creation of printInstrument */
  printInstrumentHandle = osThreadNew(startPrintInstrumentation, NULL, &printInstrument_attributes);
 800177e:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <main+0xc8>)
 8001780:	2100      	movs	r1, #0
 8001782:	481b      	ldr	r0, [pc, #108]	@ (80017f0 <main+0xcc>)
 8001784:	f00a ff3a 	bl	800c5fc <osThreadNew>
 8001788:	4603      	mov	r3, r0
 800178a:	4a1a      	ldr	r2, [pc, #104]	@ (80017f4 <main+0xd0>)
 800178c:	6013      	str	r3, [r2, #0]

  /* creation of ADCReadTask */
  ADCReadTaskHandle = osThreadNew(startReadADC, NULL, &ADCReadTask_attributes);
 800178e:	4a1a      	ldr	r2, [pc, #104]	@ (80017f8 <main+0xd4>)
 8001790:	2100      	movs	r1, #0
 8001792:	481a      	ldr	r0, [pc, #104]	@ (80017fc <main+0xd8>)
 8001794:	f00a ff32 	bl	800c5fc <osThreadNew>
 8001798:	4603      	mov	r3, r0
 800179a:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <main+0xdc>)
 800179c:	6013      	str	r3, [r2, #0]

  /* creation of ADCPrintTask */
  ADCPrintTaskHandle = osThreadNew(startADCPrint, NULL, &ADCPrintTask_attributes);
 800179e:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <main+0xe0>)
 80017a0:	2100      	movs	r1, #0
 80017a2:	4819      	ldr	r0, [pc, #100]	@ (8001808 <main+0xe4>)
 80017a4:	f00a ff2a 	bl	800c5fc <osThreadNew>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a18      	ldr	r2, [pc, #96]	@ (800180c <main+0xe8>)
 80017ac:	6013      	str	r3, [r2, #0]

  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 80017ae:	4a18      	ldr	r2, [pc, #96]	@ (8001810 <main+0xec>)
 80017b0:	2100      	movs	r1, #0
 80017b2:	4818      	ldr	r0, [pc, #96]	@ (8001814 <main+0xf0>)
 80017b4:	f00a ff22 	bl	800c5fc <osThreadNew>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <main+0xf4>)
 80017bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017be:	f00a fef7 	bl	800c5b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017c2:	bf00      	nop
 80017c4:	e7fd      	b.n	80017c2 <main+0x9e>
 80017c6:	bf00      	nop
 80017c8:	200003d8 	.word	0x200003d8
 80017cc:	08013000 	.word	0x08013000
 80017d0:	2000053c 	.word	0x2000053c
 80017d4:	08012f28 	.word	0x08012f28
 80017d8:	08001c85 	.word	0x08001c85
 80017dc:	20000524 	.word	0x20000524
 80017e0:	08012f4c 	.word	0x08012f4c
 80017e4:	08001ca9 	.word	0x08001ca9
 80017e8:	20000528 	.word	0x20000528
 80017ec:	08012f70 	.word	0x08012f70
 80017f0:	08001d59 	.word	0x08001d59
 80017f4:	2000052c 	.word	0x2000052c
 80017f8:	08012f94 	.word	0x08012f94
 80017fc:	08001d6b 	.word	0x08001d6b
 8001800:	20000530 	.word	0x20000530
 8001804:	08012fb8 	.word	0x08012fb8
 8001808:	08001d7b 	.word	0x08001d7b
 800180c:	20000534 	.word	0x20000534
 8001810:	08012fdc 	.word	0x08012fdc
 8001814:	08001d8d 	.word	0x08001d8d
 8001818:	20000538 	.word	0x20000538

0800181c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	@ 0x50
 8001820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001822:	f107 0318 	add.w	r3, r7, #24
 8001826:	2238      	movs	r2, #56	@ 0x38
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f00f f8c2 	bl	80109b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800183e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001842:	f005 f977 	bl	8006b34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001846:	2322      	movs	r3, #34	@ 0x22
 8001848:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001850:	2340      	movs	r3, #64	@ 0x40
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001854:	2301      	movs	r3, #1
 8001856:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185c:	f107 0318 	add.w	r3, r7, #24
 8001860:	4618      	mov	r0, r3
 8001862:	f005 fa1b 	bl	8006c9c <HAL_RCC_OscConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800186c:	f000 fad2 	bl	8001e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001870:	230f      	movs	r3, #15
 8001872:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001874:	2301      	movs	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f005 fd19 	bl	80072c0 <HAL_RCC_ClockConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001894:	f000 fabe 	bl	8001e14 <Error_Handler>
  }
}
 8001898:	bf00      	nop
 800189a:	3750      	adds	r7, #80	@ 0x50
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a6:	463b      	mov	r3, r7
 80018a8:	2220      	movs	r2, #32
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00f f881 	bl	80109b4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80018b2:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018b4:	4a31      	ldr	r2, [pc, #196]	@ (800197c <MX_ADC3_Init+0xdc>)
 80018b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018d2:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d8:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018da:	2204      	movs	r2, #4
 80018dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018e4:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018f0:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <MX_ADC3_Init+0xd8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <MX_ADC3_Init+0xd8>)
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001904:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_ADC3_Init+0xd8>)
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800190c:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <MX_ADC3_Init+0xd8>)
 800190e:	2200      	movs	r2, #0
 8001910:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <MX_ADC3_Init+0xd8>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800191a:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <MX_ADC3_Init+0xd8>)
 800191c:	220c      	movs	r2, #12
 800191e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001920:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <MX_ADC3_Init+0xd8>)
 8001922:	2200      	movs	r2, #0
 8001924:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <MX_ADC3_Init+0xd8>)
 8001928:	2200      	movs	r2, #0
 800192a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <MX_ADC3_Init+0xd8>)
 800192e:	2201      	movs	r2, #1
 8001930:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001932:	4811      	ldr	r0, [pc, #68]	@ (8001978 <MX_ADC3_Init+0xd8>)
 8001934:	f001 f836 	bl	80029a4 <HAL_ADC_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_ADC3_Init+0xa2>
  {
    Error_Handler();
 800193e:	f000 fa69 	bl	8001e14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <MX_ADC3_Init+0xe0>)
 8001944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001946:	2306      	movs	r3, #6
 8001948:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800194e:	237f      	movs	r3, #127	@ 0x7f
 8001950:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001952:	2304      	movs	r3, #4
 8001954:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800195a:	463b      	mov	r3, r7
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	@ (8001978 <MX_ADC3_Init+0xd8>)
 8001960:	f001 fb9a 	bl	8003098 <HAL_ADC_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800196a:	f000 fa53 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000036c 	.word	0x2000036c
 800197c:	50000400 	.word	0x50000400
 8001980:	14f00020 	.word	0x14f00020

08001984 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001988:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 800198a:	4a21      	ldr	r2, [pc, #132]	@ (8001a10 <MX_FDCAN2_Init+0x8c>)
 800198c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001994:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 8001996:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800199a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80019ae:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80019b4:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 80019ba:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019bc:	2210      	movs	r2, #16
 80019be:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019c2:	223f      	movs	r2, #63	@ 0x3f
 80019c4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019c8:	2210      	movs	r2, #16
 80019ca:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019d4:	2204      	movs	r2, #4
 80019d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019da:	220d      	movs	r2, #13
 80019dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019e0:	2202      	movs	r2, #2
 80019e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <MX_FDCAN2_Init+0x88>)
 80019f8:	f002 f8f0 	bl	8003bdc <HAL_FDCAN_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8001a02:	f000 fa07 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200003d8 	.word	0x200003d8
 8001a10:	40006800 	.word	0x40006800

08001a14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a8c <MX_I2C2_Init+0x78>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a20:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <MX_I2C2_Init+0x7c>)
 8001a22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a24:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a36:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a42:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a4e:	480e      	ldr	r0, [pc, #56]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a50:	f002 fd4c 	bl	80044ec <HAL_I2C_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a5a:	f000 f9db 	bl	8001e14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4809      	ldr	r0, [pc, #36]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a62:	f003 facf 	bl	8005004 <HAL_I2CEx_ConfigAnalogFilter>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a6c:	f000 f9d2 	bl	8001e14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a70:	2100      	movs	r1, #0
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <MX_I2C2_Init+0x74>)
 8001a74:	f003 fb11 	bl	800509a <HAL_I2CEx_ConfigDigitalFilter>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a7e:	f000 f9c9 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000043c 	.word	0x2000043c
 8001a8c:	40005800 	.word	0x40005800
 8001a90:	00503d58 	.word	0x00503d58

08001a94 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001a9a:	4a21      	ldr	r2, [pc, #132]	@ (8001b20 <MX_LPUART1_UART_Init+0x8c>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001aa0:	4a20      	ldr	r2, [pc, #128]	@ (8001b24 <MX_LPUART1_UART_Init+0x90>)
 8001aa2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001ab8:	220c      	movs	r2, #12
 8001aba:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abc:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ad4:	4811      	ldr	r0, [pc, #68]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001ad6:	f006 fbb7 	bl	8008248 <HAL_UART_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001ae0:	f000 f998 	bl	8001e14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	480d      	ldr	r0, [pc, #52]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001ae8:	f007 f952 	bl	8008d90 <HAL_UARTEx_SetTxFifoThreshold>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001af2:	f000 f98f 	bl	8001e14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af6:	2100      	movs	r1, #0
 8001af8:	4808      	ldr	r0, [pc, #32]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001afa:	f007 f987 	bl	8008e0c <HAL_UARTEx_SetRxFifoThreshold>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001b04:	f000 f986 	bl	8001e14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	@ (8001b1c <MX_LPUART1_UART_Init+0x88>)
 8001b0a:	f007 f908 	bl	8008d1e <HAL_UARTEx_DisableFifoMode>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001b14:	f000 f97e 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000490 	.word	0x20000490
 8001b20:	40008000 	.word	0x40008000
 8001b24:	00033324 	.word	0x00033324

08001b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	4a4e      	ldr	r2, [pc, #312]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b56:	4b49      	ldr	r3, [pc, #292]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	4a48      	ldr	r2, [pc, #288]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b5c:	f043 0320 	orr.w	r3, r3, #32
 8001b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b62:	4b46      	ldr	r3, [pc, #280]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	4b43      	ldr	r3, [pc, #268]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b72:	4a42      	ldr	r2, [pc, #264]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7a:	4b40      	ldr	r3, [pc, #256]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	4b3d      	ldr	r3, [pc, #244]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b92:	4b3a      	ldr	r3, [pc, #232]	@ (8001c7c <MX_GPIO_Init+0x154>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Solenoid_OUT_Pin|Emergency_Valve_OUT_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001ba4:	4836      	ldr	r0, [pc, #216]	@ (8001c80 <MX_GPIO_Init+0x158>)
 8001ba6:	f002 fc57 	bl	8004458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin, GPIO_PIN_SET);
 8001baa:	2201      	movs	r2, #1
 8001bac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb4:	f002 fc50 	bl	8004458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EMER_VALVE_IN_Pin */
  GPIO_InitStruct.Pin = EMER_VALVE_IN_Pin;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bbc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_VALVE_IN_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	482c      	ldr	r0, [pc, #176]	@ (8001c80 <MX_GPIO_Init+0x158>)
 8001bce:	f002 faa9 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOLENOID_IN_Pin */
  GPIO_InitStruct.Pin = SOLENOID_IN_Pin;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SOLENOID_IN_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	4826      	ldr	r0, [pc, #152]	@ (8001c80 <MX_GPIO_Init+0x158>)
 8001be8:	f002 fa9c 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : FC_FAULT_Pin */
  GPIO_InitStruct.Pin = FC_FAULT_Pin;
 8001bec:	2304      	movs	r3, #4
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	481f      	ldr	r0, [pc, #124]	@ (8001c80 <MX_GPIO_Init+0x158>)
 8001c02:	f002 fa8f 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : Solenoid_OUT_Pin Emergency_Valve_OUT_Pin */
  GPIO_InitStruct.Pin = Solenoid_OUT_Pin|Emergency_Valve_OUT_Pin;
 8001c06:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4818      	ldr	r0, [pc, #96]	@ (8001c80 <MX_GPIO_Init+0x158>)
 8001c20:	f002 fa80 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_LED_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin;
 8001c24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRONT_LED_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c40:	f002 fa70 	bl	8004124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2105      	movs	r1, #5
 8001c48:	2006      	movs	r0, #6
 8001c4a:	f001 ff9f 	bl	8003b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c4e:	2006      	movs	r0, #6
 8001c50:	f001 ffb6 	bl	8003bc0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2105      	movs	r1, #5
 8001c58:	2007      	movs	r0, #7
 8001c5a:	f001 ff97 	bl	8003b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c5e:	2007      	movs	r0, #7
 8001c60:	f001 ffae 	bl	8003bc0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2105      	movs	r1, #5
 8001c68:	2008      	movs	r0, #8
 8001c6a:	f001 ff8f 	bl	8003b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c6e:	2008      	movs	r0, #8
 8001c70:	f001 ffa6 	bl	8003bc0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	@ 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000400 	.word	0x48000400

08001c84 <startBlinkLED>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startBlinkLED */
void startBlinkLED(void *argument)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8001c8c:	f00d fc0c 	bl	800f4a8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001c90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c98:	f002 fbf6 	bl	8004488 <HAL_GPIO_TogglePin>
    osDelay(100);
 8001c9c:	2064      	movs	r0, #100	@ 0x64
 8001c9e:	f00a fd40 	bl	800c722 <osDelay>
	HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001ca2:	bf00      	nop
 8001ca4:	e7f4      	b.n	8001c90 <startBlinkLED+0xc>
	...

08001ca8 <startReadInstrumentation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadInstrumentation */
void startReadInstrumentation(void *argument)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadInstrumentation */
	LTC2990_Init(&LTC2990_Handle, &hi2c2, LTC2990_I2C_ADDRESS);
 8001cb0:	224c      	movs	r2, #76	@ 0x4c
 8001cb2:	4922      	ldr	r1, [pc, #136]	@ (8001d3c <startReadInstrumentation+0x94>)
 8001cb4:	4822      	ldr	r0, [pc, #136]	@ (8001d40 <startReadInstrumentation+0x98>)
 8001cb6:	f7ff f985 	bl	8000fc4 <LTC2990_Init>
  for(;;)
  {
	float raw_voltages[2];
	instrumentationPayload_t payload;

	HAL_ADC_Start(&hadc3);
 8001cba:	4822      	ldr	r0, [pc, #136]	@ (8001d44 <startReadInstrumentation+0x9c>)
 8001cbc:	f001 f820 	bl	8002d00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3,20);
 8001cc0:	2114      	movs	r1, #20
 8001cc2:	4820      	ldr	r0, [pc, #128]	@ (8001d44 <startReadInstrumentation+0x9c>)
 8001cc4:	f001 f8e6 	bl	8002e94 <HAL_ADC_PollForConversion>
	payload.pressure = HAL_ADC_GetValue(&hadc3);
 8001cc8:	481e      	ldr	r0, [pc, #120]	@ (8001d44 <startReadInstrumentation+0x9c>)
 8001cca:	f001 f9d7 	bl	800307c <HAL_ADC_GetValue>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	617b      	str	r3, [r7, #20]

	LTC2990_Step(&LTC2990_Handle);
 8001cd2:	481b      	ldr	r0, [pc, #108]	@ (8001d40 <startReadInstrumentation+0x98>)
 8001cd4:	f7ff f9cc 	bl	8001070 <LTC2990_Step>

	LTC2990_Get_Single_Ended_Voltage(&LTC2990_Handle, raw_voltages);
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4818      	ldr	r0, [pc, #96]	@ (8001d40 <startReadInstrumentation+0x98>)
 8001ce0:	f7ff fae0 	bl	80012a4 <LTC2990_Get_Single_Ended_Voltage>


	payload.voltages[0] = raw_voltages[0];
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	60fb      	str	r3, [r7, #12]
	payload.voltages[1] = raw_voltages[1];
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	613b      	str	r3, [r7, #16]

	osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
 8001cec:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <startReadInstrumentation+0xa0>)
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	f107 010c 	add.w	r1, r7, #12
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f00a fda1 	bl	800c840 <osMessageQueuePut>

	CDC_Transmit_Print("Voltage 1: %f \n", payload.voltages[0]);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc49 	bl	8000598 <__aeabi_f2d>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4810      	ldr	r0, [pc, #64]	@ (8001d4c <startReadInstrumentation+0xa4>)
 8001d0c:	f7ff fcb4 	bl	8001678 <CDC_Transmit_Print>
	CDC_Transmit_Print("Voltage 2: %f \n", payload.voltages[1]);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc40 	bl	8000598 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <startReadInstrumentation+0xa8>)
 8001d1e:	f7ff fcab 	bl	8001678 <CDC_Transmit_Print>

	osDelay(10);
 8001d22:	200a      	movs	r0, #10
 8001d24:	f00a fcfd 	bl	800c722 <osDelay>

	CDC_Transmit_Print("ADC Data: %d \n", payload.pressure);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4809      	ldr	r0, [pc, #36]	@ (8001d54 <startReadInstrumentation+0xac>)
 8001d2e:	f7ff fca3 	bl	8001678 <CDC_Transmit_Print>

    osDelay(50);
 8001d32:	2032      	movs	r0, #50	@ 0x32
 8001d34:	f00a fcf5 	bl	800c722 <osDelay>
  {
 8001d38:	bf00      	nop
 8001d3a:	e7be      	b.n	8001cba <startReadInstrumentation+0x12>
 8001d3c:	2000043c 	.word	0x2000043c
 8001d40:	20000540 	.word	0x20000540
 8001d44:	2000036c 	.word	0x2000036c
 8001d48:	2000053c 	.word	0x2000053c
 8001d4c:	08012e74 	.word	0x08012e74
 8001d50:	08012e84 	.word	0x08012e84
 8001d54:	08012e94 	.word	0x08012e94

08001d58 <startPrintInstrumentation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintInstrumentation */
void startPrintInstrumentation(void *argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
//
//	CDC_Transmit_Print("Voltage 1: %f \r\n", raw_voltage[0]);
//	osDelay(10);
//	CDC_Transmit_Print("Voltage 2: %f \r\n", raw_voltage[1]);

	osDelay(750);
 8001d60:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001d64:	f00a fcdd 	bl	800c722 <osDelay>
 8001d68:	e7fa      	b.n	8001d60 <startPrintInstrumentation+0x8>

08001d6a <startReadADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadADC */
void startReadADC(void *argument)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadADC */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f00a fcd5 	bl	800c722 <osDelay>
 8001d78:	e7fb      	b.n	8001d72 <startReadADC+0x8>

08001d7a <startADCPrint>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCPrint */
void startADCPrint(void *argument)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCPrint */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f00a fccd 	bl	800c722 <osDelay>
 8001d88:	e7fb      	b.n	8001d82 <startADCPrint+0x8>
	...

08001d8c <StartSendMessage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b092      	sub	sp, #72	@ 0x48
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendMessage */
  /* Infinite loop */
	instrumentationPayload_t payload;
	  uint8_t txBuf[sizeof(instrumentationPayload_t)];
	  FDCAN_TxHeaderTypeDef txHeader = {
 8001d94:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <StartSendMessage+0x58>)
 8001d96:	f107 040c 	add.w	r4, r7, #12
 8001d9a:	461d      	mov	r5, r3
 8001d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da4:	682b      	ldr	r3, [r5, #0]
 8001da6:	6023      	str	r3, [r4, #0]
		  .TxEventFifoControl = FDCAN_STORE_TX_EVENTS,
		  .MessageMarker = 0
	  };
  for(;;)
  {
	  osMessageQueueGet(sensorQueueHandle, &payload, NULL, osWaitForever);
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <StartSendMessage+0x5c>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	2200      	movs	r2, #0
 8001db6:	f00a fda3 	bl	800c900 <osMessageQueueGet>
	  memcpy(txBuf, &payload, sizeof(payload));
 8001dba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dbe:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001dc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf);
 8001dc8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4806      	ldr	r0, [pc, #24]	@ (8001dec <StartSendMessage+0x60>)
 8001dd4:	f002 f884 	bl	8003ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
	  osDelay(100);
 8001dd8:	2064      	movs	r0, #100	@ 0x64
 8001dda:	f00a fca2 	bl	800c722 <osDelay>
	  osMessageQueueGet(sensorQueueHandle, &payload, NULL, osWaitForever);
 8001dde:	bf00      	nop
 8001de0:	e7e2      	b.n	8001da8 <StartSendMessage+0x1c>
 8001de2:	bf00      	nop
 8001de4:	08012ea4 	.word	0x08012ea4
 8001de8:	2000053c 	.word	0x2000053c
 8001dec:	200003d8 	.word	0x200003d8

08001df0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e02:	f000 fb63 	bl	80024cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40012c00 	.word	0x40012c00

08001e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e18:	b672      	cpsid	i
}
 8001e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <Error_Handler+0x8>

08001e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <HAL_MspInit+0x50>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2a:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <HAL_MspInit+0x50>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_MspInit+0x50>)
 8001e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <HAL_MspInit+0x50>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	4a0b      	ldr	r2, [pc, #44]	@ (8001e70 <HAL_MspInit+0x50>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_MspInit+0x50>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	210f      	movs	r1, #15
 8001e5a:	f06f 0001 	mvn.w	r0, #1
 8001e5e:	f001 fe95 	bl	8003b8c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e62:	f004 ff0b 	bl	8006c7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b09e      	sub	sp, #120	@ 0x78
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2250      	movs	r2, #80	@ 0x50
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00e fd8d 	bl	80109b4 <memset>
  if(hadc->Instance==ADC3)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f18 <HAL_ADC_MspInit+0xa4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d134      	bne.n	8001f0e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ea8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001eaa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001eae:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f005 fc51 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ec0:	f7ff ffa8 	bl	8001e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001ec4:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <HAL_ADC_MspInit+0xa8>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec8:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <HAL_ADC_MspInit+0xa8>)
 8001eca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_ADC_MspInit+0xa8>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <HAL_ADC_MspInit+0xa8>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8001f1c <HAL_ADC_MspInit+0xa8>)
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <HAL_ADC_MspInit+0xa8>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = Pressure_IN_Pin;
 8001ef4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ef8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efa:	2303      	movs	r3, #3
 8001efc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Pressure_IN_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f06:	4619      	mov	r1, r3
 8001f08:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <HAL_ADC_MspInit+0xac>)
 8001f0a:	f002 f90b 	bl	8004124 <HAL_GPIO_Init>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001f0e:	bf00      	nop
 8001f10:	3778      	adds	r7, #120	@ 0x78
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	50000400 	.word	0x50000400
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	48000400 	.word	0x48000400

08001f24 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b09e      	sub	sp, #120	@ 0x78
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2250      	movs	r2, #80	@ 0x50
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f00e fd35 	bl	80109b4 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fcc <HAL_FDCAN_MspInit+0xa8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d137      	bne.n	8001fc4 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f58:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001f5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4618      	mov	r0, r3
 8001f66:	f005 fbf9 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001f70:	f7ff ff50 	bl	8001e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <HAL_FDCAN_MspInit+0xac>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	4a15      	ldr	r2, [pc, #84]	@ (8001fd0 <HAL_FDCAN_MspInit+0xac>)
 8001f7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <HAL_FDCAN_MspInit+0xac>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8c:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <HAL_FDCAN_MspInit+0xac>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f90:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd0 <HAL_FDCAN_MspInit+0xac>)
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f98:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <HAL_FDCAN_MspInit+0xac>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fa4:	2360      	movs	r3, #96	@ 0x60
 8001fa6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001fb4:	2309      	movs	r3, #9
 8001fb6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4805      	ldr	r0, [pc, #20]	@ (8001fd4 <HAL_FDCAN_MspInit+0xb0>)
 8001fc0:	f002 f8b0 	bl	8004124 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001fc4:	bf00      	nop
 8001fc6:	3778      	adds	r7, #120	@ 0x78
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40006800 	.word	0x40006800
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	48000400 	.word	0x48000400

08001fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b09e      	sub	sp, #120	@ 0x78
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2250      	movs	r2, #80	@ 0x50
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f00e fcdb 	bl	80109b4 <memset>
  if(hi2c->Instance==I2C2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1f      	ldr	r2, [pc, #124]	@ (8002080 <HAL_I2C_MspInit+0xa8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d137      	bne.n	8002078 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800200c:	2300      	movs	r3, #0
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4618      	mov	r0, r3
 8002016:	f005 fba1 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002020:	f7ff fef8 	bl	8001e14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	4b17      	ldr	r3, [pc, #92]	@ (8002084 <HAL_I2C_MspInit+0xac>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002028:	4a16      	ldr	r2, [pc, #88]	@ (8002084 <HAL_I2C_MspInit+0xac>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002030:	4b14      	ldr	r3, [pc, #80]	@ (8002084 <HAL_I2C_MspInit+0xac>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800203c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002040:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002042:	2312      	movs	r3, #18
 8002044:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800204e:	2304      	movs	r3, #4
 8002050:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002056:	4619      	mov	r1, r3
 8002058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800205c:	f002 f862 	bl	8004124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002060:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <HAL_I2C_MspInit+0xac>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002064:	4a07      	ldr	r2, [pc, #28]	@ (8002084 <HAL_I2C_MspInit+0xac>)
 8002066:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800206a:	6593      	str	r3, [r2, #88]	@ 0x58
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <HAL_I2C_MspInit+0xac>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002078:	bf00      	nop
 800207a:	3778      	adds	r7, #120	@ 0x78
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40005800 	.word	0x40005800
 8002084:	40021000 	.word	0x40021000

08002088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b09e      	sub	sp, #120	@ 0x78
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2250      	movs	r2, #80	@ 0x50
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f00e fc83 	bl	80109b4 <memset>
  if(huart->Instance==LPUART1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002130 <HAL_UART_MspInit+0xa8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d136      	bne.n	8002126 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020b8:	2320      	movs	r3, #32
 80020ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4618      	mov	r0, r3
 80020c6:	f005 fb49 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020d0:	f7ff fea0 	bl	8001e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020d4:	4b17      	ldr	r3, [pc, #92]	@ (8002134 <HAL_UART_MspInit+0xac>)
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	4a16      	ldr	r2, [pc, #88]	@ (8002134 <HAL_UART_MspInit+0xac>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020e0:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <HAL_UART_MspInit+0xac>)
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_UART_MspInit+0xac>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f0:	4a10      	ldr	r2, [pc, #64]	@ (8002134 <HAL_UART_MspInit+0xac>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <HAL_UART_MspInit+0xac>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002104:	230c      	movs	r3, #12
 8002106:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002114:	230c      	movs	r3, #12
 8002116:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800211c:	4619      	mov	r1, r3
 800211e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002122:	f001 ffff 	bl	8004124 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002126:	bf00      	nop
 8002128:	3778      	adds	r7, #120	@ 0x78
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40008000 	.word	0x40008000
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	@ 0x30
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002148:	4b2c      	ldr	r3, [pc, #176]	@ (80021fc <HAL_InitTick+0xc4>)
 800214a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214c:	4a2b      	ldr	r2, [pc, #172]	@ (80021fc <HAL_InitTick+0xc4>)
 800214e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002152:	6613      	str	r3, [r2, #96]	@ 0x60
 8002154:	4b29      	ldr	r3, [pc, #164]	@ (80021fc <HAL_InitTick+0xc4>)
 8002156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002160:	f107 020c 	add.w	r2, r7, #12
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f005 fa7e 	bl	800766c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002170:	f005 fa66 	bl	8007640 <HAL_RCC_GetPCLK2Freq>
 8002174:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002178:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <HAL_InitTick+0xc8>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0c9b      	lsrs	r3, r3, #18
 8002180:	3b01      	subs	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002184:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <HAL_InitTick+0xcc>)
 8002186:	4a20      	ldr	r2, [pc, #128]	@ (8002208 <HAL_InitTick+0xd0>)
 8002188:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800218a:	4b1e      	ldr	r3, [pc, #120]	@ (8002204 <HAL_InitTick+0xcc>)
 800218c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002190:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002192:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <HAL_InitTick+0xcc>)
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002198:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <HAL_InitTick+0xcc>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219e:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_InitTick+0xcc>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80021a4:	4817      	ldr	r0, [pc, #92]	@ (8002204 <HAL_InitTick+0xcc>)
 80021a6:	f005 fd15 	bl	8007bd4 <HAL_TIM_Base_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80021b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d11b      	bne.n	80021f0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80021b8:	4812      	ldr	r0, [pc, #72]	@ (8002204 <HAL_InitTick+0xcc>)
 80021ba:	f005 fd6d 	bl	8007c98 <HAL_TIM_Base_Start_IT>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80021c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d111      	bne.n	80021f0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80021cc:	2019      	movs	r0, #25
 80021ce:	f001 fcf7 	bl	8003bc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d808      	bhi.n	80021ea <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	2019      	movs	r0, #25
 80021de:	f001 fcd5 	bl	8003b8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e2:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <HAL_InitTick+0xd4>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e002      	b.n	80021f0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3730      	adds	r7, #48	@ 0x30
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	431bde83 	.word	0x431bde83
 8002204:	20000554 	.word	0x20000554
 8002208:	40012c00 	.word	0x40012c00
 800220c:	20000004 	.word	0x20000004

08002210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <NMI_Handler+0x4>

08002218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <MemManage_Handler+0x4>

08002228 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <UsageFault_Handler+0x4>

08002238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_VALVE_IN_Pin);
 800224a:	2001      	movs	r0, #1
 800224c:	f002 f936 	bl	80044bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SOLENOID_IN_Pin);
 8002258:	2002      	movs	r0, #2
 800225a:	f002 f92f 	bl	80044bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}

08002262 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FC_FAULT_Pin);
 8002266:	2004      	movs	r0, #4
 8002268:	f002 f928 	bl	80044bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <USB_LP_IRQHandler+0x10>)
 8002276:	f003 f84c 	bl	8005312 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000fde4 	.word	0x2000fde4

08002284 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800228a:	f005 fd75 	bl	8007d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000554 	.word	0x20000554

08002298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return 1;
 800229c:	2301      	movs	r3, #1
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_kill>:

int _kill(int pid, int sig)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022b2:	f00e fc2f 	bl	8010b14 <__errno>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2216      	movs	r2, #22
 80022ba:	601a      	str	r2, [r3, #0]
  return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_exit>:

void _exit (int status)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffe7 	bl	80022a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022da:	bf00      	nop
 80022dc:	e7fd      	b.n	80022da <_exit+0x12>

080022de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e00a      	b.n	8002306 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022f0:	f3af 8000 	nop.w
 80022f4:	4601      	mov	r1, r0
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	60ba      	str	r2, [r7, #8]
 80022fc:	b2ca      	uxtb	r2, r1
 80022fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	3301      	adds	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	429a      	cmp	r2, r3
 800230c:	dbf0      	blt.n	80022f0 <_read+0x12>
  }

  return len;
 800230e:	687b      	ldr	r3, [r7, #4]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	e009      	b.n	800233e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	60ba      	str	r2, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	dbf1      	blt.n	800232a <_write+0x12>
  }
  return len;
 8002346:	687b      	ldr	r3, [r7, #4]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_close>:

int _close(int file)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002378:	605a      	str	r2, [r3, #4]
  return 0;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_isatty>:

int _isatty(int file)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c0:	4a14      	ldr	r2, [pc, #80]	@ (8002414 <_sbrk+0x5c>)
 80023c2:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <_sbrk+0x60>)
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023cc:	4b13      	ldr	r3, [pc, #76]	@ (800241c <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <_sbrk+0x64>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	@ (8002420 <_sbrk+0x68>)
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d207      	bcs.n	80023f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e8:	f00e fb94 	bl	8010b14 <__errno>
 80023ec:	4603      	mov	r3, r0
 80023ee:	220c      	movs	r2, #12
 80023f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	e009      	b.n	800240c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fe:	4b07      	ldr	r3, [pc, #28]	@ (800241c <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	4a05      	ldr	r2, [pc, #20]	@ (800241c <_sbrk+0x64>)
 8002408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2001c000 	.word	0x2001c000
 8002418:	00000400 	.word	0x00000400
 800241c:	200005a0 	.word	0x200005a0
 8002420:	20010430 	.word	0x20010430

08002424 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <SystemInit+0x20>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242e:	4a05      	ldr	r2, [pc, #20]	@ (8002444 <SystemInit+0x20>)
 8002430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002448:	480d      	ldr	r0, [pc, #52]	@ (8002480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800244a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800244c:	f7ff ffea 	bl	8002424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <LoopForever+0x6>)
  ldr r1, =_edata
 8002452:	490d      	ldr	r1, [pc, #52]	@ (8002488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002454:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <LoopForever+0xe>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002468:	4c0a      	ldr	r4, [pc, #40]	@ (8002494 <LoopForever+0x16>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002476:	f00e fb53 	bl	8010b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800247a:	f7ff f953 	bl	8001724 <main>

0800247e <LoopForever>:

LoopForever:
    b LoopForever
 800247e:	e7fe      	b.n	800247e <LoopForever>
  ldr   r0, =_estack
 8002480:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002488:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800248c:	080133ec 	.word	0x080133ec
  ldr r2, =_sbss
 8002490:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8002494:	2001042c 	.word	0x2001042c

08002498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC1_2_IRQHandler>

0800249a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a4:	2003      	movs	r0, #3
 80024a6:	f001 fb66 	bl	8003b76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024aa:	200f      	movs	r0, #15
 80024ac:	f7ff fe44 	bl	8002138 <HAL_InitTick>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	71fb      	strb	r3, [r7, #7]
 80024ba:	e001      	b.n	80024c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024bc:	f7ff fcb0 	bl	8001e20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024c0:	79fb      	ldrb	r3, [r7, #7]

}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_IncTick+0x1c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_IncTick+0x20>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	4a03      	ldr	r2, [pc, #12]	@ (80024e8 <HAL_IncTick+0x1c>)
 80024dc:	6013      	str	r3, [r2, #0]
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	200005a4 	.word	0x200005a4
 80024ec:	20000008 	.word	0x20000008

080024f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	200005a4 	.word	0x200005a4

08002508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff ffee 	bl	80024f0 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d004      	beq.n	800252c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_Delay+0x40>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4413      	add	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252c:	bf00      	nop
 800252e:	f7ff ffdf 	bl	80024f0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	429a      	cmp	r2, r3
 800253c:	d8f7      	bhi.n	800252e <HAL_Delay+0x26>
  {
  }
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000008 	.word	0x20000008

0800254c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	609a      	str	r2, [r3, #8]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3360      	adds	r3, #96	@ 0x60
 80025c6:	461a      	mov	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <LL_ADC_SetOffset+0x44>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	03fff000 	.word	0x03fff000

080025fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3360      	adds	r3, #96	@ 0x60
 800260a:	461a      	mov	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3360      	adds	r3, #96	@ 0x60
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	431a      	orrs	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800265e:	b480      	push	{r7}
 8002660:	b087      	sub	sp, #28
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3360      	adds	r3, #96	@ 0x60
 800266e:	461a      	mov	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	431a      	orrs	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3360      	adds	r3, #96	@ 0x60
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	615a      	str	r2, [r3, #20]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002716:	b480      	push	{r7}
 8002718:	b087      	sub	sp, #28
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3330      	adds	r3, #48	@ 0x30
 8002726:	461a      	mov	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	4413      	add	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	211f      	movs	r1, #31
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	401a      	ands	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	f003 011f 	and.w	r1, r3, #31
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	431a      	orrs	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800276e:	b480      	push	{r7}
 8002770:	b087      	sub	sp, #28
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3314      	adds	r3, #20
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	0e5b      	lsrs	r3, r3, #25
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	4413      	add	r3, r2
 800278c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	0d1b      	lsrs	r3, r3, #20
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2107      	movs	r1, #7
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	0d1b      	lsrs	r3, r3, #20
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	431a      	orrs	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	43db      	mvns	r3, r3
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0318 	and.w	r3, r3, #24
 80027e6:	4908      	ldr	r1, [pc, #32]	@ (8002808 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027e8:	40d9      	lsrs	r1, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	400b      	ands	r3, r1
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	431a      	orrs	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	0007ffff 	.word	0x0007ffff

0800280c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 031f 	and.w	r3, r3, #31
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002854:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6093      	str	r3, [r2, #8]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800287c:	d101      	bne.n	8002882 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028cc:	d101      	bne.n	80028d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <LL_ADC_IsEnabled+0x18>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <LL_ADC_IsEnabled+0x1a>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800293e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b04      	cmp	r3, #4
 8002968:	d101      	bne.n	800296e <LL_ADC_REG_IsConversionOngoing+0x18>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b08      	cmp	r3, #8
 800298e:	d101      	bne.n	8002994 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b089      	sub	sp, #36	@ 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e19b      	b.n	8002cf6 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff fa51 	bl	8001e74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff3f 	bl	8002868 <LL_ADC_IsDeepPowerDownEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff25 	bl	8002844 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff5a 	bl	80028b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d115      	bne.n	8002a36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff3e 	bl	8002890 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a14:	4b97      	ldr	r3, [pc, #604]	@ (8002c74 <HAL_ADC_Init+0x2d0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	099b      	lsrs	r3, r3, #6
 8002a1a:	4a97      	ldr	r2, [pc, #604]	@ (8002c78 <HAL_ADC_Init+0x2d4>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	3301      	adds	r3, #1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a28:	e002      	b.n	8002a30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f9      	bne.n	8002a2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff3c 	bl	80028b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	f043 0210 	orr.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff75 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 8002a6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 8134 	bne.w	8002ce4 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 8130 	bne.w	8002ce4 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a8c:	f043 0202 	orr.w	r2, r3, #2
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff35 	bl	8002908 <LL_ADC_IsEnabled>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d137      	bne.n	8002b14 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aac:	d004      	beq.n	8002ab8 <HAL_ADC_Init+0x114>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a72      	ldr	r2, [pc, #456]	@ (8002c7c <HAL_ADC_Init+0x2d8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_ADC_Init+0x134>
 8002ab8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002abc:	f7ff ff24 	bl	8002908 <LL_ADC_IsEnabled>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	486e      	ldr	r0, [pc, #440]	@ (8002c7c <HAL_ADC_Init+0x2d8>)
 8002ac4:	f7ff ff20 	bl	8002908 <LL_ADC_IsEnabled>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4323      	orrs	r3, r4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e008      	b.n	8002aea <HAL_ADC_Init+0x146>
 8002ad8:	4869      	ldr	r0, [pc, #420]	@ (8002c80 <HAL_ADC_Init+0x2dc>)
 8002ada:	f7ff ff15 	bl	8002908 <LL_ADC_IsEnabled>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002af6:	d004      	beq.n	8002b02 <HAL_ADC_Init+0x15e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a5f      	ldr	r2, [pc, #380]	@ (8002c7c <HAL_ADC_Init+0x2d8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Init+0x162>
 8002b02:	4a60      	ldr	r2, [pc, #384]	@ (8002c84 <HAL_ADC_Init+0x2e0>)
 8002b04:	e000      	b.n	8002b08 <HAL_ADC_Init+0x164>
 8002b06:	4a60      	ldr	r2, [pc, #384]	@ (8002c88 <HAL_ADC_Init+0x2e4>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f7ff fd1c 	bl	800254c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7f5b      	ldrb	r3, [r3, #29]
 8002b18:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b1e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b24:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b2a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b32:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d106      	bne.n	8002b50 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	3b01      	subs	r3, #1
 8002b48:	045b      	lsls	r3, r3, #17
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d009      	beq.n	8002b6c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	4b46      	ldr	r3, [pc, #280]	@ (8002c8c <HAL_ADC_Init+0x2e8>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	69b9      	ldr	r1, [r7, #24]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff feee 	bl	800297c <LL_ADC_INJ_IsConversionOngoing>
 8002ba0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d17b      	bne.n	8002ca0 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d178      	bne.n	8002ca0 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bb2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bca:	f023 0302 	bic.w	r3, r3, #2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	69b9      	ldr	r1, [r7, #24]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d017      	beq.n	8002c10 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002bee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002bf8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6911      	ldr	r1, [r2, #16]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002c0e:	e013      	b.n	8002c38 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c34:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d126      	bne.n	8002c90 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c4c:	f023 0304 	bic.w	r3, r3, #4
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c58:	4311      	orrs	r1, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c5e:	4311      	orrs	r1, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c64:	430a      	orrs	r2, r1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	611a      	str	r2, [r3, #16]
 8002c72:	e015      	b.n	8002ca0 <HAL_ADC_Init+0x2fc>
 8002c74:	20000000 	.word	0x20000000
 8002c78:	053e2d63 	.word	0x053e2d63
 8002c7c:	50000100 	.word	0x50000100
 8002c80:	50000400 	.word	0x50000400
 8002c84:	50000300 	.word	0x50000300
 8002c88:	50000700 	.word	0x50000700
 8002c8c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	f023 010f 	bic.w	r1, r3, #15
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	1e5a      	subs	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cc0:	e007      	b.n	8002cd2 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 020f 	bic.w	r2, r2, #15
 8002cd0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ce2:	e007      	b.n	8002cf4 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce8:	f043 0210 	orr.w	r2, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd90      	pop	{r4, r7, pc}
 8002cfe:	bf00      	nop

08002d00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d10:	d004      	beq.n	8002d1c <HAL_ADC_Start+0x1c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a5c      	ldr	r2, [pc, #368]	@ (8002e88 <HAL_ADC_Start+0x188>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_Start+0x20>
 8002d1c:	4b5b      	ldr	r3, [pc, #364]	@ (8002e8c <HAL_ADC_Start+0x18c>)
 8002d1e:	e000      	b.n	8002d22 <HAL_ADC_Start+0x22>
 8002d20:	4b5b      	ldr	r3, [pc, #364]	@ (8002e90 <HAL_ADC_Start+0x190>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fd72 	bl	800280c <LL_ADC_GetMultimode>
 8002d28:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fe11 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 809f 	bne.w	8002e7a <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_Start+0x4a>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e09a      	b.n	8002e80 <HAL_ADC_Start+0x180>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fdcc 	bl	80038f0 <ADC_Enable>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 8086 	bne.w	8002e70 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a42      	ldr	r2, [pc, #264]	@ (8002e88 <HAL_ADC_Start+0x188>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d002      	beq.n	8002d88 <HAL_ADC_Start+0x88>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	e001      	b.n	8002d8c <HAL_ADC_Start+0x8c>
 8002d88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d002      	beq.n	8002d9a <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db2:	d106      	bne.n	8002dc2 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db8:	f023 0206 	bic.w	r2, r3, #6
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	661a      	str	r2, [r3, #96]	@ 0x60
 8002dc0:	e002      	b.n	8002dc8 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	221c      	movs	r2, #28
 8002dce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8002e88 <HAL_ADC_Start+0x188>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d002      	beq.n	8002de8 <HAL_ADC_Start+0xe8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e001      	b.n	8002dec <HAL_ADC_Start+0xec>
 8002de8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d008      	beq.n	8002e06 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	d002      	beq.n	8002e06 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b09      	cmp	r3, #9
 8002e04:	d114      	bne.n	8002e30 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e1c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fd80 	bl	800292e <LL_ADC_REG_StartConversion>
 8002e2e:	e026      	b.n	8002e7e <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e34:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a11      	ldr	r2, [pc, #68]	@ (8002e88 <HAL_ADC_Start+0x188>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d002      	beq.n	8002e4c <HAL_ADC_Start+0x14c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	e001      	b.n	8002e50 <HAL_ADC_Start+0x150>
 8002e4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e50:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00f      	beq.n	8002e7e <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e6e:	e006      	b.n	8002e7e <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002e78:	e001      	b.n	8002e7e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	50000100 	.word	0x50000100
 8002e8c:	50000300 	.word	0x50000300
 8002e90:	50000700 	.word	0x50000700

08002e94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ea6:	d004      	beq.n	8002eb2 <HAL_ADC_PollForConversion+0x1e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a70      	ldr	r2, [pc, #448]	@ (8003070 <HAL_ADC_PollForConversion+0x1dc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_PollForConversion+0x22>
 8002eb2:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_ADC_PollForConversion+0x1e0>)
 8002eb4:	e000      	b.n	8002eb8 <HAL_ADC_PollForConversion+0x24>
 8002eb6:	4b70      	ldr	r3, [pc, #448]	@ (8003078 <HAL_ADC_PollForConversion+0x1e4>)
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fca7 	bl	800280c <LL_ADC_GetMultimode>
 8002ebe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d102      	bne.n	8002ece <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002ec8:	2308      	movs	r3, #8
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	e037      	b.n	8002f3e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d002      	beq.n	8002ee0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b09      	cmp	r3, #9
 8002ede:	d111      	bne.n	8002f04 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef2:	f043 0220 	orr.w	r2, r3, #32
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0b3      	b.n	8003066 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002efe:	2304      	movs	r3, #4
 8002f00:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f02:	e01c      	b.n	8002f3e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f0c:	d004      	beq.n	8002f18 <HAL_ADC_PollForConversion+0x84>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a57      	ldr	r2, [pc, #348]	@ (8003070 <HAL_ADC_PollForConversion+0x1dc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_PollForConversion+0x88>
 8002f18:	4b56      	ldr	r3, [pc, #344]	@ (8003074 <HAL_ADC_PollForConversion+0x1e0>)
 8002f1a:	e000      	b.n	8002f1e <HAL_ADC_PollForConversion+0x8a>
 8002f1c:	4b56      	ldr	r3, [pc, #344]	@ (8003078 <HAL_ADC_PollForConversion+0x1e4>)
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fc82 	bl	8002828 <LL_ADC_GetMultiDMATransfer>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e095      	b.n	8003066 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f3e:	f7ff fad7 	bl	80024f0 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f44:	e021      	b.n	8002f8a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d01d      	beq.n	8002f8a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002f4e:	f7ff facf 	bl	80024f0 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <HAL_ADC_PollForConversion+0xd0>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d112      	bne.n	8002f8a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10b      	bne.n	8002f8a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	f043 0204 	orr.w	r2, r3, #4
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e06d      	b.n	8003066 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0d6      	beq.n	8002f46 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fba1 	bl	80026f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01c      	beq.n	8002fee <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7f5b      	ldrb	r3, [r3, #29]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d118      	bne.n	8002fee <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d111      	bne.n	8002fee <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8003070 <HAL_ADC_PollForConversion+0x1dc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d002      	beq.n	8002ffe <HAL_ADC_PollForConversion+0x16a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	e001      	b.n	8003002 <HAL_ADC_PollForConversion+0x16e>
 8002ffe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	4293      	cmp	r3, r2
 8003008:	d008      	beq.n	800301c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b05      	cmp	r3, #5
 8003014:	d002      	beq.n	800301c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b09      	cmp	r3, #9
 800301a:	d104      	bne.n	8003026 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	e00d      	b.n	8003042 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a11      	ldr	r2, [pc, #68]	@ (8003070 <HAL_ADC_PollForConversion+0x1dc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d002      	beq.n	8003036 <HAL_ADC_PollForConversion+0x1a2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	e001      	b.n	800303a <HAL_ADC_PollForConversion+0x1a6>
 8003036:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800303a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	2b08      	cmp	r3, #8
 8003046:	d104      	bne.n	8003052 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2208      	movs	r2, #8
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e008      	b.n	8003064 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d103      	bne.n	8003064 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	220c      	movs	r2, #12
 8003062:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	50000100 	.word	0x50000100
 8003074:	50000300 	.word	0x50000300
 8003078:	50000700 	.word	0x50000700

0800307c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b0b6      	sub	sp, #216	@ 0xd8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d102      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x24>
 80030b6:	2302      	movs	r3, #2
 80030b8:	f000 bc04 	b.w	80038c4 <HAL_ADC_ConfigChannel+0x82c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fc44 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f040 83e8 	bne.w	80038a6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f7ff fb17 	bl	8002716 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fc32 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 80030f2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fc3e 	bl	800297c <LL_ADC_INJ_IsConversionOngoing>
 8003100:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003104:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003108:	2b00      	cmp	r3, #0
 800310a:	f040 81d9 	bne.w	80034c0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800310e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 81d4 	bne.w	80034c0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003120:	d10f      	bne.n	8003142 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	4619      	mov	r1, r3
 800312e:	f7ff fb1e 	bl	800276e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fac5 	bl	80026ca <LL_ADC_SetSamplingTimeCommonConfig>
 8003140:	e00e      	b.n	8003160 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	461a      	mov	r2, r3
 8003150:	f7ff fb0d 	bl	800276e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fab5 	bl	80026ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	08db      	lsrs	r3, r3, #3
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b04      	cmp	r3, #4
 8003180:	d022      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6919      	ldr	r1, [r3, #16]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003192:	f7ff fa0f 	bl	80025b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6919      	ldr	r1, [r3, #16]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f7ff fa5b 	bl	800265e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d102      	bne.n	80031be <HAL_ADC_ConfigChannel+0x126>
 80031b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031bc:	e000      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x128>
 80031be:	2300      	movs	r3, #0
 80031c0:	461a      	mov	r2, r3
 80031c2:	f7ff fa67 	bl	8002694 <LL_ADC_SetOffsetSaturation>
 80031c6:	e17b      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fa14 	bl	80025fc <LL_ADC_GetOffsetChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x15c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fa09 	bl	80025fc <LL_ADC_GetOffsetChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	f003 021f 	and.w	r2, r3, #31
 80031f2:	e01e      	b.n	8003232 <HAL_ADC_ConfigChannel+0x19a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff f9fe 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003216:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800321a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003222:	2320      	movs	r3, #32
 8003224:	e004      	b.n	8003230 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <HAL_ADC_ConfigChannel+0x1b2>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	e018      	b.n	800327c <HAL_ADC_ConfigChannel+0x1e4>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800325e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003262:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800326e:	2320      	movs	r3, #32
 8003270:	e004      	b.n	800327c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800327c:	429a      	cmp	r2, r3
 800327e:	d106      	bne.n	800328e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2200      	movs	r2, #0
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff f9cd 	bl	8002628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff f9b1 	bl	80025fc <LL_ADC_GetOffsetChannel>
 800329a:	4603      	mov	r3, r0
 800329c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x222>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2101      	movs	r1, #1
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f9a6 	bl	80025fc <LL_ADC_GetOffsetChannel>
 80032b0:	4603      	mov	r3, r0
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	f003 021f 	and.w	r2, r3, #31
 80032b8:	e01e      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x260>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f99b 	bl	80025fc <LL_ADC_GetOffsetChannel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80032d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80032e8:	2320      	movs	r3, #32
 80032ea:	e004      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80032ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x278>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	e018      	b.n	8003342 <HAL_ADC_ConfigChannel+0x2aa>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003324:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800332c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003334:	2320      	movs	r3, #32
 8003336:	e004      	b.n	8003342 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003338:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003342:	429a      	cmp	r2, r3
 8003344:	d106      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	2101      	movs	r1, #1
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff f96a 	bl	8002628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2102      	movs	r1, #2
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f94e 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8003360:	4603      	mov	r3, r0
 8003362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x2e8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2102      	movs	r1, #2
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff f943 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8003376:	4603      	mov	r3, r0
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	f003 021f 	and.w	r2, r3, #31
 800337e:	e01e      	b.n	80033be <HAL_ADC_ConfigChannel+0x326>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff f938 	bl	80025fc <LL_ADC_GetOffsetChannel>
 800338c:	4603      	mov	r3, r0
 800338e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800339e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80033a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e004      	b.n	80033bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80033b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x33e>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0e9b      	lsrs	r3, r3, #26
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	e016      	b.n	8003404 <HAL_ADC_ConfigChannel+0x36c>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80033f6:	2320      	movs	r3, #32
 80033f8:	e004      	b.n	8003404 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80033fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003404:	429a      	cmp	r2, r3
 8003406:	d106      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2200      	movs	r2, #0
 800340e:	2102      	movs	r1, #2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff f909 	bl	8002628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2103      	movs	r1, #3
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff f8ed 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x3aa>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2103      	movs	r1, #3
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f8e2 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	0e9b      	lsrs	r3, r3, #26
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	e017      	b.n	8003472 <HAL_ADC_ConfigChannel+0x3da>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2103      	movs	r1, #3
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff f8d7 	bl	80025fc <LL_ADC_GetOffsetChannel>
 800344e:	4603      	mov	r3, r0
 8003450:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800345a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800345c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800345e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003464:	2320      	movs	r3, #32
 8003466:	e003      	b.n	8003470 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347a:	2b00      	cmp	r3, #0
 800347c:	d105      	bne.n	800348a <HAL_ADC_ConfigChannel+0x3f2>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	0e9b      	lsrs	r3, r3, #26
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	e011      	b.n	80034ae <HAL_ADC_ConfigChannel+0x416>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800349a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800349c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80034a2:	2320      	movs	r3, #32
 80034a4:	e003      	b.n	80034ae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80034a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d106      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	2103      	movs	r1, #3
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff f8b4 	bl	8002628 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fa1f 	bl	8002908 <LL_ADC_IsEnabled>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 813d 	bne.w	800374c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	461a      	mov	r2, r3
 80034e0:	f7ff f970 	bl	80027c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4aa2      	ldr	r2, [pc, #648]	@ (8003774 <HAL_ADC_ConfigChannel+0x6dc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	f040 812e 	bne.w	800374c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x480>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0e9b      	lsrs	r3, r3, #26
 8003506:	3301      	adds	r3, #1
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	2b09      	cmp	r3, #9
 800350e:	bf94      	ite	ls
 8003510:	2301      	movls	r3, #1
 8003512:	2300      	movhi	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e019      	b.n	800354c <HAL_ADC_ConfigChannel+0x4b4>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003528:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800352a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003530:	2320      	movs	r3, #32
 8003532:	e003      	b.n	800353c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003534:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	3301      	adds	r3, #1
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2b09      	cmp	r3, #9
 8003544:	bf94      	ite	ls
 8003546:	2301      	movls	r3, #1
 8003548:	2300      	movhi	r3, #0
 800354a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800354c:	2b00      	cmp	r3, #0
 800354e:	d079      	beq.n	8003644 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <HAL_ADC_ConfigChannel+0x4d4>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	3301      	adds	r3, #1
 8003564:	069b      	lsls	r3, r3, #26
 8003566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800356a:	e015      	b.n	8003598 <HAL_ADC_ConfigChannel+0x500>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800357a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800357c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800357e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003584:	2320      	movs	r3, #32
 8003586:	e003      	b.n	8003590 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3301      	adds	r3, #1
 8003592:	069b      	lsls	r3, r3, #26
 8003594:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x520>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	0e9b      	lsrs	r3, r3, #26
 80035aa:	3301      	adds	r3, #1
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	e017      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x550>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80035c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80035ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80035d0:	2320      	movs	r3, #32
 80035d2:	e003      	b.n	80035dc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80035d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	ea42 0103 	orr.w	r1, r2, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <HAL_ADC_ConfigChannel+0x576>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	0e9b      	lsrs	r3, r3, #26
 80035fe:	3301      	adds	r3, #1
 8003600:	f003 021f 	and.w	r2, r3, #31
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	051b      	lsls	r3, r3, #20
 800360c:	e018      	b.n	8003640 <HAL_ADC_ConfigChannel+0x5a8>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800361c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e003      	b.n	8003632 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800362a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	3301      	adds	r3, #1
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003640:	430b      	orrs	r3, r1
 8003642:	e07e      	b.n	8003742 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d107      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x5c8>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0e9b      	lsrs	r3, r3, #26
 8003656:	3301      	adds	r3, #1
 8003658:	069b      	lsls	r3, r3, #26
 800365a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800365e:	e015      	b.n	800368c <HAL_ADC_ConfigChannel+0x5f4>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003670:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003678:	2320      	movs	r3, #32
 800367a:	e003      	b.n	8003684 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	3301      	adds	r3, #1
 8003686:	069b      	lsls	r3, r3, #26
 8003688:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x614>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	0e9b      	lsrs	r3, r3, #26
 800369e:	3301      	adds	r3, #1
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	e017      	b.n	80036dc <HAL_ADC_ConfigChannel+0x644>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	61fb      	str	r3, [r7, #28]
  return result;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	2101      	movs	r1, #1
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	ea42 0103 	orr.w	r1, r2, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x670>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0e9b      	lsrs	r3, r3, #26
 80036f2:	3301      	adds	r3, #1
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	3b1e      	subs	r3, #30
 8003700:	051b      	lsls	r3, r3, #20
 8003702:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003706:	e01b      	b.n	8003740 <HAL_ADC_ConfigChannel+0x6a8>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	613b      	str	r3, [r7, #16]
  return result;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003720:	2320      	movs	r3, #32
 8003722:	e003      	b.n	800372c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3301      	adds	r3, #1
 800372e:	f003 021f 	and.w	r2, r3, #31
 8003732:	4613      	mov	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	3b1e      	subs	r3, #30
 800373a:	051b      	lsls	r3, r3, #20
 800373c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003740:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003746:	4619      	mov	r1, r3
 8003748:	f7ff f811 	bl	800276e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b09      	ldr	r3, [pc, #36]	@ (8003778 <HAL_ADC_ConfigChannel+0x6e0>)
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80af 	beq.w	80038b8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003762:	d004      	beq.n	800376e <HAL_ADC_ConfigChannel+0x6d6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a04      	ldr	r2, [pc, #16]	@ (800377c <HAL_ADC_ConfigChannel+0x6e4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10a      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x6ec>
 800376e:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <HAL_ADC_ConfigChannel+0x6e8>)
 8003770:	e009      	b.n	8003786 <HAL_ADC_ConfigChannel+0x6ee>
 8003772:	bf00      	nop
 8003774:	407f0000 	.word	0x407f0000
 8003778:	80080000 	.word	0x80080000
 800377c:	50000100 	.word	0x50000100
 8003780:	50000300 	.word	0x50000300
 8003784:	4b51      	ldr	r3, [pc, #324]	@ (80038cc <HAL_ADC_ConfigChannel+0x834>)
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe ff06 	bl	8002598 <LL_ADC_GetCommonPathInternalCh>
 800378c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a4e      	ldr	r2, [pc, #312]	@ (80038d0 <HAL_ADC_ConfigChannel+0x838>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_ADC_ConfigChannel+0x70c>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4d      	ldr	r2, [pc, #308]	@ (80038d4 <HAL_ADC_ConfigChannel+0x83c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d134      	bne.n	800380e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d12e      	bne.n	800380e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b8:	d17e      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c2:	d004      	beq.n	80037ce <HAL_ADC_ConfigChannel+0x736>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a43      	ldr	r2, [pc, #268]	@ (80038d8 <HAL_ADC_ConfigChannel+0x840>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x73a>
 80037ce:	4a43      	ldr	r2, [pc, #268]	@ (80038dc <HAL_ADC_ConfigChannel+0x844>)
 80037d0:	e000      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x73c>
 80037d2:	4a3e      	ldr	r2, [pc, #248]	@ (80038cc <HAL_ADC_ConfigChannel+0x834>)
 80037d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f7fe fec7 	bl	8002572 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037e4:	4b3e      	ldr	r3, [pc, #248]	@ (80038e0 <HAL_ADC_ConfigChannel+0x848>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	4a3e      	ldr	r2, [pc, #248]	@ (80038e4 <HAL_ADC_ConfigChannel+0x84c>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037fe:	e002      	b.n	8003806 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3b01      	subs	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f9      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800380c:	e054      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a35      	ldr	r2, [pc, #212]	@ (80038e8 <HAL_ADC_ConfigChannel+0x850>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d120      	bne.n	800385a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800381c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11a      	bne.n	800385a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800382c:	d144      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003836:	d004      	beq.n	8003842 <HAL_ADC_ConfigChannel+0x7aa>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a26      	ldr	r2, [pc, #152]	@ (80038d8 <HAL_ADC_ConfigChannel+0x840>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x7ae>
 8003842:	4a26      	ldr	r2, [pc, #152]	@ (80038dc <HAL_ADC_ConfigChannel+0x844>)
 8003844:	e000      	b.n	8003848 <HAL_ADC_ConfigChannel+0x7b0>
 8003846:	4a21      	ldr	r2, [pc, #132]	@ (80038cc <HAL_ADC_ConfigChannel+0x834>)
 8003848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800384c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f7fe fe8d 	bl	8002572 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003858:	e02e      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a23      	ldr	r2, [pc, #140]	@ (80038ec <HAL_ADC_ConfigChannel+0x854>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d129      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d123      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a18      	ldr	r2, [pc, #96]	@ (80038d8 <HAL_ADC_ConfigChannel+0x840>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d01e      	beq.n	80038b8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003882:	d004      	beq.n	800388e <HAL_ADC_ConfigChannel+0x7f6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a13      	ldr	r2, [pc, #76]	@ (80038d8 <HAL_ADC_ConfigChannel+0x840>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x7fa>
 800388e:	4a13      	ldr	r2, [pc, #76]	@ (80038dc <HAL_ADC_ConfigChannel+0x844>)
 8003890:	e000      	b.n	8003894 <HAL_ADC_ConfigChannel+0x7fc>
 8003892:	4a0e      	ldr	r2, [pc, #56]	@ (80038cc <HAL_ADC_ConfigChannel+0x834>)
 8003894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003898:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f7fe fe67 	bl	8002572 <LL_ADC_SetCommonPathInternalCh>
 80038a4:	e008      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	37d8      	adds	r7, #216	@ 0xd8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	50000700 	.word	0x50000700
 80038d0:	c3210000 	.word	0xc3210000
 80038d4:	90c00010 	.word	0x90c00010
 80038d8:	50000100 	.word	0x50000100
 80038dc:	50000300 	.word	0x50000300
 80038e0:	20000000 	.word	0x20000000
 80038e4:	053e2d63 	.word	0x053e2d63
 80038e8:	c7520000 	.word	0xc7520000
 80038ec:	cb840000 	.word	0xcb840000

080038f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff f801 	bl	8002908 <LL_ADC_IsEnabled>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d176      	bne.n	80039fa <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	4b3c      	ldr	r3, [pc, #240]	@ (8003a04 <ADC_Enable+0x114>)
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391e:	f043 0210 	orr.w	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e062      	b.n	80039fc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe ffd0 	bl	80028e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003948:	d004      	beq.n	8003954 <ADC_Enable+0x64>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a08 <ADC_Enable+0x118>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d101      	bne.n	8003958 <ADC_Enable+0x68>
 8003954:	4b2d      	ldr	r3, [pc, #180]	@ (8003a0c <ADC_Enable+0x11c>)
 8003956:	e000      	b.n	800395a <ADC_Enable+0x6a>
 8003958:	4b2d      	ldr	r3, [pc, #180]	@ (8003a10 <ADC_Enable+0x120>)
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fe1c 	bl	8002598 <LL_ADC_GetCommonPathInternalCh>
 8003960:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003962:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003966:	2b00      	cmp	r3, #0
 8003968:	d013      	beq.n	8003992 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800396a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a14 <ADC_Enable+0x124>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	4a29      	ldr	r2, [pc, #164]	@ (8003a18 <ADC_Enable+0x128>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	099b      	lsrs	r3, r3, #6
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003984:	e002      	b.n	800398c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3b01      	subs	r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f9      	bne.n	8003986 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003992:	f7fe fdad 	bl	80024f0 <HAL_GetTick>
 8003996:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003998:	e028      	b.n	80039ec <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe ffb2 	bl	8002908 <LL_ADC_IsEnabled>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d104      	bne.n	80039b4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe ff96 	bl	80028e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039b4:	f7fe fd9c 	bl	80024f0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d914      	bls.n	80039ec <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d00d      	beq.n	80039ec <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d4:	f043 0210 	orr.w	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e0:	f043 0201 	orr.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e007      	b.n	80039fc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d1cf      	bne.n	800399a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	8000003f 	.word	0x8000003f
 8003a08:	50000100 	.word	0x50000100
 8003a0c:	50000300 	.word	0x50000300
 8003a10:	50000700 	.word	0x50000700
 8003a14:	20000000 	.word	0x20000000
 8003a18:	053e2d63 	.word	0x053e2d63

08003a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a60 <__NVIC_SetPriorityGrouping+0x44>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a38:	4013      	ands	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a4e:	4a04      	ldr	r2, [pc, #16]	@ (8003a60 <__NVIC_SetPriorityGrouping+0x44>)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	60d3      	str	r3, [r2, #12]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a68:	4b04      	ldr	r3, [pc, #16]	@ (8003a7c <__NVIC_GetPriorityGrouping+0x18>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	0a1b      	lsrs	r3, r3, #8
 8003a6e:	f003 0307 	and.w	r3, r3, #7
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	db0b      	blt.n	8003aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	f003 021f 	and.w	r2, r3, #31
 8003a98:	4907      	ldr	r1, [pc, #28]	@ (8003ab8 <__NVIC_EnableIRQ+0x38>)
 8003a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000e100 	.word	0xe000e100

08003abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	db0a      	blt.n	8003ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	490c      	ldr	r1, [pc, #48]	@ (8003b08 <__NVIC_SetPriority+0x4c>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae4:	e00a      	b.n	8003afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4908      	ldr	r1, [pc, #32]	@ (8003b0c <__NVIC_SetPriority+0x50>)
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	3b04      	subs	r3, #4
 8003af4:	0112      	lsls	r2, r2, #4
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	440b      	add	r3, r1
 8003afa:	761a      	strb	r2, [r3, #24]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000e100 	.word	0xe000e100
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	@ 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f1c3 0307 	rsb	r3, r3, #7
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf28      	it	cs
 8003b2e:	2304      	movcs	r3, #4
 8003b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d902      	bls.n	8003b40 <NVIC_EncodePriority+0x30>
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3b03      	subs	r3, #3
 8003b3e:	e000      	b.n	8003b42 <NVIC_EncodePriority+0x32>
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	401a      	ands	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b58:	f04f 31ff 	mov.w	r1, #4294967295
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43d9      	mvns	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	4313      	orrs	r3, r2
         );
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	@ 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ff4c 	bl	8003a1c <__NVIC_SetPriorityGrouping>
}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b9a:	f7ff ff63 	bl	8003a64 <__NVIC_GetPriorityGrouping>
 8003b9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	6978      	ldr	r0, [r7, #20]
 8003ba6:	f7ff ffb3 	bl	8003b10 <NVIC_EncodePriority>
 8003baa:	4602      	mov	r2, r0
 8003bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff ff82 	bl	8003abc <__NVIC_SetPriority>
}
 8003bb8:	bf00      	nop
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff ff56 	bl	8003a80 <__NVIC_EnableIRQ>
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e147      	b.n	8003e7e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe f98e 	bl	8001f24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0210 	bic.w	r2, r2, #16
 8003c16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c18:	f7fe fc6a 	bl	80024f0 <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c1e:	e012      	b.n	8003c46 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c20:	f7fe fc66 	bl	80024f0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b0a      	cmp	r3, #10
 8003c2c:	d90b      	bls.n	8003c46 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c32:	f043 0201 	orr.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e11b      	b.n	8003e7e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d0e5      	beq.n	8003c20 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c64:	f7fe fc44 	bl	80024f0 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c6a:	e012      	b.n	8003c92 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c6c:	f7fe fc40 	bl	80024f0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b0a      	cmp	r3, #10
 8003c78:	d90b      	bls.n	8003c92 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0f5      	b.n	8003e7e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0e5      	beq.n	8003c6c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0202 	orr.w	r2, r2, #2
 8003cae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a74      	ldr	r2, [pc, #464]	@ (8003e88 <HAL_FDCAN_Init+0x2ac>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d103      	bne.n	8003cc2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003cba:	4a74      	ldr	r2, [pc, #464]	@ (8003e8c <HAL_FDCAN_Init+0x2b0>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	7c1b      	ldrb	r3, [r3, #16]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d108      	bne.n	8003cdc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cd8:	619a      	str	r2, [r3, #24]
 8003cda:	e007      	b.n	8003cec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7c5b      	ldrb	r3, [r3, #17]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d108      	bne.n	8003d06 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d02:	619a      	str	r2, [r3, #24]
 8003d04:	e007      	b.n	8003d16 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d14:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7c9b      	ldrb	r3, [r3, #18]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d108      	bne.n	8003d30 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d2c:	619a      	str	r2, [r3, #24]
 8003d2e:	e007      	b.n	8003d40 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d3e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003d64:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0210 	bic.w	r2, r2, #16
 8003d74:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d108      	bne.n	8003d90 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0204 	orr.w	r2, r2, #4
 8003d8c:	619a      	str	r2, [r3, #24]
 8003d8e:	e02c      	b.n	8003dea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d028      	beq.n	8003dea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d01c      	beq.n	8003dda <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0210 	orr.w	r2, r2, #16
 8003dbe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d110      	bne.n	8003dea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0220 	orr.w	r2, r2, #32
 8003dd6:	619a      	str	r2, [r3, #24]
 8003dd8:	e007      	b.n	8003dea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699a      	ldr	r2, [r3, #24]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0220 	orr.w	r2, r2, #32
 8003de8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003dfa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e02:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e12:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e14:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e1e:	d115      	bne.n	8003e4c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e2e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e34:	3b01      	subs	r3, #1
 8003e36:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e38:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	3b01      	subs	r3, #1
 8003e42:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e48:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e4a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f880 	bl	8003f68 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40006400 	.word	0x40006400
 8003e8c:	40006500 	.word	0x40006500

08003e90 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d110      	bne.n	8003ec6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e006      	b.n	8003ed4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eca:	f043 0204 	orr.w	r2, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d12c      	bne.n	8003f52 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e023      	b.n	8003f60 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f87c 	bl	800402c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2101      	movs	r1, #1
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f40:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003f44:	2201      	movs	r2, #1
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e006      	b.n	8003f60 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f56:	f043 0208 	orr.w	r2, r3, #8
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
  }
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003f70:	4b2c      	ldr	r3, [pc, #176]	@ (8004024 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003f72:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2b      	ldr	r2, [pc, #172]	@ (8004028 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d103      	bne.n	8003f86 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003f84:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f94:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9c:	041a      	lsls	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fba:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc2:	061a      	lsls	r2, r3, #24
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e005      	b.n	8004008 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3304      	adds	r3, #4
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3f3      	bcc.n	8003ffc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	4000a400 	.word	0x4000a400
 8004028:	40006800 	.word	0x40006800

0800402c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	@ 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800404a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004052:	4313      	orrs	r3, r2
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	e00a      	b.n	800406e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004060:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004066:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800406c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004078:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800407e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004084:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	3304      	adds	r3, #4
 80040ac:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	3304      	adds	r3, #4
 80040b8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e020      	b.n	8004102 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	3303      	adds	r3, #3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	4413      	add	r3, r2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	3302      	adds	r3, #2
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	440b      	add	r3, r1
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80040d8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	3301      	adds	r3, #1
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	440b      	add	r3, r1
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80040e6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	440a      	add	r2, r1
 80040ee:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80040f0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	3304      	adds	r3, #4
 80040fa:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	3304      	adds	r3, #4
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	4a06      	ldr	r2, [pc, #24]	@ (8004120 <FDCAN_CopyMessageToRAM+0xf4>)
 8004108:	5cd3      	ldrb	r3, [r2, r3]
 800410a:	461a      	mov	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4293      	cmp	r3, r2
 8004110:	d3d6      	bcc.n	80040c0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	3724      	adds	r7, #36	@ 0x24
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	08013030 	.word	0x08013030

08004124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004132:	e15a      	b.n	80043ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	2101      	movs	r1, #1
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 814c 	beq.w	80043e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d005      	beq.n	8004164 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004160:	2b02      	cmp	r3, #2
 8004162:	d130      	bne.n	80041c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	2203      	movs	r2, #3
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800419a:	2201      	movs	r2, #1
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 0201 	and.w	r2, r3, #1
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d017      	beq.n	8004202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d123      	bne.n	8004256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	220f      	movs	r2, #15
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4013      	ands	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	08da      	lsrs	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3208      	adds	r2, #8
 8004250:	6939      	ldr	r1, [r7, #16]
 8004252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	2203      	movs	r2, #3
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4013      	ands	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0203 	and.w	r2, r3, #3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80a6 	beq.w	80043e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004298:	4b5b      	ldr	r3, [pc, #364]	@ (8004408 <HAL_GPIO_Init+0x2e4>)
 800429a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429c:	4a5a      	ldr	r2, [pc, #360]	@ (8004408 <HAL_GPIO_Init+0x2e4>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80042a4:	4b58      	ldr	r3, [pc, #352]	@ (8004408 <HAL_GPIO_Init+0x2e4>)
 80042a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042b0:	4a56      	ldr	r2, [pc, #344]	@ (800440c <HAL_GPIO_Init+0x2e8>)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	3302      	adds	r3, #2
 80042b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	220f      	movs	r2, #15
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042da:	d01f      	beq.n	800431c <HAL_GPIO_Init+0x1f8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a4c      	ldr	r2, [pc, #304]	@ (8004410 <HAL_GPIO_Init+0x2ec>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d019      	beq.n	8004318 <HAL_GPIO_Init+0x1f4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a4b      	ldr	r2, [pc, #300]	@ (8004414 <HAL_GPIO_Init+0x2f0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d013      	beq.n	8004314 <HAL_GPIO_Init+0x1f0>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004418 <HAL_GPIO_Init+0x2f4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00d      	beq.n	8004310 <HAL_GPIO_Init+0x1ec>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a49      	ldr	r2, [pc, #292]	@ (800441c <HAL_GPIO_Init+0x2f8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <HAL_GPIO_Init+0x1e8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a48      	ldr	r2, [pc, #288]	@ (8004420 <HAL_GPIO_Init+0x2fc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <HAL_GPIO_Init+0x1e4>
 8004304:	2305      	movs	r3, #5
 8004306:	e00a      	b.n	800431e <HAL_GPIO_Init+0x1fa>
 8004308:	2306      	movs	r3, #6
 800430a:	e008      	b.n	800431e <HAL_GPIO_Init+0x1fa>
 800430c:	2304      	movs	r3, #4
 800430e:	e006      	b.n	800431e <HAL_GPIO_Init+0x1fa>
 8004310:	2303      	movs	r3, #3
 8004312:	e004      	b.n	800431e <HAL_GPIO_Init+0x1fa>
 8004314:	2302      	movs	r3, #2
 8004316:	e002      	b.n	800431e <HAL_GPIO_Init+0x1fa>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_GPIO_Init+0x1fa>
 800431c:	2300      	movs	r3, #0
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	f002 0203 	and.w	r2, r2, #3
 8004324:	0092      	lsls	r2, r2, #2
 8004326:	4093      	lsls	r3, r2
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800432e:	4937      	ldr	r1, [pc, #220]	@ (800440c <HAL_GPIO_Init+0x2e8>)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	089b      	lsrs	r3, r3, #2
 8004334:	3302      	adds	r3, #2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800433c:	4b39      	ldr	r3, [pc, #228]	@ (8004424 <HAL_GPIO_Init+0x300>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	43db      	mvns	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004360:	4a30      	ldr	r2, [pc, #192]	@ (8004424 <HAL_GPIO_Init+0x300>)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004366:	4b2f      	ldr	r3, [pc, #188]	@ (8004424 <HAL_GPIO_Init+0x300>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	43db      	mvns	r3, r3
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800438a:	4a26      	ldr	r2, [pc, #152]	@ (8004424 <HAL_GPIO_Init+0x300>)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004390:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <HAL_GPIO_Init+0x300>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	43db      	mvns	r3, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4013      	ands	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004424 <HAL_GPIO_Init+0x300>)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004424 <HAL_GPIO_Init+0x300>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043de:	4a11      	ldr	r2, [pc, #68]	@ (8004424 <HAL_GPIO_Init+0x300>)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3301      	adds	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f47f ae9d 	bne.w	8004134 <HAL_GPIO_Init+0x10>
  }
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40021000 	.word	0x40021000
 800440c:	40010000 	.word	0x40010000
 8004410:	48000400 	.word	0x48000400
 8004414:	48000800 	.word	0x48000800
 8004418:	48000c00 	.word	0x48000c00
 800441c:	48001000 	.word	0x48001000
 8004420:	48001400 	.word	0x48001400
 8004424:	40010400 	.word	0x40010400

08004428 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	887b      	ldrh	r3, [r7, #2]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	e001      	b.n	800444a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
 8004464:	4613      	mov	r3, r2
 8004466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004468:	787b      	ldrb	r3, [r7, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004474:	e002      	b.n	800447c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004476:	887a      	ldrh	r2, [r7, #2]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4013      	ands	r3, r2
 80044a0:	041a      	lsls	r2, r3, #16
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	43d9      	mvns	r1, r3
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	400b      	ands	r3, r1
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	619a      	str	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044d2:	4a05      	ldr	r2, [pc, #20]	@ (80044e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd f8f2 	bl	80016c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40010400 	.word	0x40010400

080044ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e08d      	b.n	800461a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fd60 	bl	8001fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2224      	movs	r2, #36	@ 0x24
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800453c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800454c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	e006      	b.n	8004574 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004572:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d108      	bne.n	800458e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800458a:	605a      	str	r2, [r3, #4]
 800458c:	e007      	b.n	800459e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800459c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69d9      	ldr	r1, [r3, #28]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1a      	ldr	r2, [r3, #32]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	4608      	mov	r0, r1
 800462e:	4611      	mov	r1, r2
 8004630:	461a      	mov	r2, r3
 8004632:	4603      	mov	r3, r0
 8004634:	817b      	strh	r3, [r7, #10]
 8004636:	460b      	mov	r3, r1
 8004638:	813b      	strh	r3, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b20      	cmp	r3, #32
 8004648:	f040 80f9 	bne.w	800483e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_I2C_Mem_Write+0x34>
 8004652:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800465e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0ed      	b.n	8004840 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_I2C_Mem_Write+0x4e>
 800466e:	2302      	movs	r3, #2
 8004670:	e0e6      	b.n	8004840 <HAL_I2C_Mem_Write+0x21c>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800467a:	f7fd ff39 	bl	80024f0 <HAL_GetTick>
 800467e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	2319      	movs	r3, #25
 8004686:	2201      	movs	r2, #1
 8004688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fac3 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0d1      	b.n	8004840 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2221      	movs	r2, #33	@ 0x21
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2240      	movs	r2, #64	@ 0x40
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6a3a      	ldr	r2, [r7, #32]
 80046b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046c4:	88f8      	ldrh	r0, [r7, #6]
 80046c6:	893a      	ldrh	r2, [r7, #8]
 80046c8:	8979      	ldrh	r1, [r7, #10]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	4603      	mov	r3, r0
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f9d3 	bl	8004a80 <I2C_RequestMemoryWrite>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0a9      	b.n	8004840 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2bff      	cmp	r3, #255	@ 0xff
 80046f4:	d90e      	bls.n	8004714 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	22ff      	movs	r2, #255	@ 0xff
 80046fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004700:	b2da      	uxtb	r2, r3
 8004702:	8979      	ldrh	r1, [r7, #10]
 8004704:	2300      	movs	r3, #0
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fc47 	bl	8004fa0 <I2C_TransferConfig>
 8004712:	e00f      	b.n	8004734 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004722:	b2da      	uxtb	r2, r3
 8004724:	8979      	ldrh	r1, [r7, #10]
 8004726:	2300      	movs	r3, #0
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fc36 	bl	8004fa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fac6 	bl	8004cca <I2C_WaitOnTXISFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e07b      	b.n	8004840 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d034      	beq.n	80047ec <HAL_I2C_Mem_Write+0x1c8>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004786:	2b00      	cmp	r3, #0
 8004788:	d130      	bne.n	80047ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	2200      	movs	r2, #0
 8004792:	2180      	movs	r1, #128	@ 0x80
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fa3f 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e04d      	b.n	8004840 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2bff      	cmp	r3, #255	@ 0xff
 80047ac:	d90e      	bls.n	80047cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	22ff      	movs	r2, #255	@ 0xff
 80047b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	8979      	ldrh	r1, [r7, #10]
 80047bc:	2300      	movs	r3, #0
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fbeb 	bl	8004fa0 <I2C_TransferConfig>
 80047ca:	e00f      	b.n	80047ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	8979      	ldrh	r1, [r7, #10]
 80047de:	2300      	movs	r3, #0
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 fbda 	bl	8004fa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d19e      	bne.n	8004734 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 faac 	bl	8004d58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e01a      	b.n	8004840 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2220      	movs	r2, #32
 8004810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <HAL_I2C_Mem_Write+0x224>)
 800481e:	400b      	ands	r3, r1
 8004820:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	fe00e800 	.word	0xfe00e800

0800484c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	4608      	mov	r0, r1
 8004856:	4611      	mov	r1, r2
 8004858:	461a      	mov	r2, r3
 800485a:	4603      	mov	r3, r0
 800485c:	817b      	strh	r3, [r7, #10]
 800485e:	460b      	mov	r3, r1
 8004860:	813b      	strh	r3, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b20      	cmp	r3, #32
 8004870:	f040 80fd 	bne.w	8004a6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_I2C_Mem_Read+0x34>
 800487a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004886:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0f1      	b.n	8004a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_I2C_Mem_Read+0x4e>
 8004896:	2302      	movs	r3, #2
 8004898:	e0ea      	b.n	8004a70 <HAL_I2C_Mem_Read+0x224>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048a2:	f7fd fe25 	bl	80024f0 <HAL_GetTick>
 80048a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2319      	movs	r3, #25
 80048ae:	2201      	movs	r2, #1
 80048b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f9af 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0d5      	b.n	8004a70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2222      	movs	r2, #34	@ 0x22
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2240      	movs	r2, #64	@ 0x40
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80048e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ec:	88f8      	ldrh	r0, [r7, #6]
 80048ee:	893a      	ldrh	r2, [r7, #8]
 80048f0:	8979      	ldrh	r1, [r7, #10]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	4603      	mov	r3, r0
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f913 	bl	8004b28 <I2C_RequestMemoryRead>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0ad      	b.n	8004a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	2bff      	cmp	r3, #255	@ 0xff
 800491c:	d90e      	bls.n	800493c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	22ff      	movs	r2, #255	@ 0xff
 8004922:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004928:	b2da      	uxtb	r2, r3
 800492a:	8979      	ldrh	r1, [r7, #10]
 800492c:	4b52      	ldr	r3, [pc, #328]	@ (8004a78 <HAL_I2C_Mem_Read+0x22c>)
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fb33 	bl	8004fa0 <I2C_TransferConfig>
 800493a:	e00f      	b.n	800495c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494a:	b2da      	uxtb	r2, r3
 800494c:	8979      	ldrh	r1, [r7, #10]
 800494e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a78 <HAL_I2C_Mem_Read+0x22c>)
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 fb22 	bl	8004fa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004962:	2200      	movs	r2, #0
 8004964:	2104      	movs	r1, #4
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f956 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e07c      	b.n	8004a70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d034      	beq.n	8004a1c <HAL_I2C_Mem_Read+0x1d0>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d130      	bne.n	8004a1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	2200      	movs	r2, #0
 80049c2:	2180      	movs	r1, #128	@ 0x80
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f927 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e04d      	b.n	8004a70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2bff      	cmp	r3, #255	@ 0xff
 80049dc:	d90e      	bls.n	80049fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	22ff      	movs	r2, #255	@ 0xff
 80049e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	8979      	ldrh	r1, [r7, #10]
 80049ec:	2300      	movs	r3, #0
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fad3 	bl	8004fa0 <I2C_TransferConfig>
 80049fa:	e00f      	b.n	8004a1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	8979      	ldrh	r1, [r7, #10]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fac2 	bl	8004fa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d19a      	bne.n	800495c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f994 	bl	8004d58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e01a      	b.n	8004a70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6859      	ldr	r1, [r3, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a7c <HAL_I2C_Mem_Read+0x230>)
 8004a4e:	400b      	ands	r3, r1
 8004a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e000      	b.n	8004a70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
  }
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	80002400 	.word	0x80002400
 8004a7c:	fe00e800 	.word	0xfe00e800

08004a80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	4608      	mov	r0, r1
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	817b      	strh	r3, [r7, #10]
 8004a92:	460b      	mov	r3, r1
 8004a94:	813b      	strh	r3, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	8979      	ldrh	r1, [r7, #10]
 8004aa0:	4b20      	ldr	r3, [pc, #128]	@ (8004b24 <I2C_RequestMemoryWrite+0xa4>)
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 fa79 	bl	8004fa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	69b9      	ldr	r1, [r7, #24]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f909 	bl	8004cca <I2C_WaitOnTXISFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e02c      	b.n	8004b1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d105      	bne.n	8004ad4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ac8:	893b      	ldrh	r3, [r7, #8]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ad2:	e015      	b.n	8004b00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ad4:	893b      	ldrh	r3, [r7, #8]
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f8ef 	bl	8004cca <I2C_WaitOnTXISFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e012      	b.n	8004b1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004af6:	893b      	ldrh	r3, [r7, #8]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2200      	movs	r2, #0
 8004b08:	2180      	movs	r1, #128	@ 0x80
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f884 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	80002000 	.word	0x80002000

08004b28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	461a      	mov	r2, r3
 8004b36:	4603      	mov	r3, r0
 8004b38:	817b      	strh	r3, [r7, #10]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	813b      	strh	r3, [r7, #8]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	8979      	ldrh	r1, [r7, #10]
 8004b48:	4b20      	ldr	r3, [pc, #128]	@ (8004bcc <I2C_RequestMemoryRead+0xa4>)
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 fa26 	bl	8004fa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	69b9      	ldr	r1, [r7, #24]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f8b6 	bl	8004cca <I2C_WaitOnTXISFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e02c      	b.n	8004bc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d105      	bne.n	8004b7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b6e:	893b      	ldrh	r3, [r7, #8]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b78:	e015      	b.n	8004ba6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b7a:	893b      	ldrh	r3, [r7, #8]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	69b9      	ldr	r1, [r7, #24]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f89c 	bl	8004cca <I2C_WaitOnTXISFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e012      	b.n	8004bc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b9c:	893b      	ldrh	r3, [r7, #8]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2140      	movs	r1, #64	@ 0x40
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f831 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	80002000 	.word	0x80002000

08004bd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d103      	bne.n	8004bee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d007      	beq.n	8004c0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	619a      	str	r2, [r3, #24]
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c28:	e03b      	b.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f8d6 	bl	8004de0 <I2C_IsErrorOccurred>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e041      	b.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d02d      	beq.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fd fc53 	bl	80024f0 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d122      	bne.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d113      	bne.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7e:	f043 0220 	orr.w	r2, r3, #32
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e00f      	b.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4013      	ands	r3, r2
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d0b4      	beq.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cd6:	e033      	b.n	8004d40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f87f 	bl	8004de0 <I2C_IsErrorOccurred>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e031      	b.n	8004d50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d025      	beq.n	8004d40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf4:	f7fd fbfc 	bl	80024f0 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d302      	bcc.n	8004d0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d11a      	bne.n	8004d40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d013      	beq.n	8004d40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e007      	b.n	8004d50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d1c4      	bne.n	8004cd8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d64:	e02f      	b.n	8004dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f838 	bl	8004de0 <I2C_IsErrorOccurred>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e02d      	b.n	8004dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fd fbb9 	bl	80024f0 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d11a      	bne.n	8004dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d013      	beq.n	8004dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e007      	b.n	8004dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d1c8      	bne.n	8004d66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	@ 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d068      	beq.n	8004ede <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2210      	movs	r2, #16
 8004e12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e14:	e049      	b.n	8004eaa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d045      	beq.n	8004eaa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e1e:	f7fd fb67 	bl	80024f0 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d302      	bcc.n	8004e34 <I2C_IsErrorOccurred+0x54>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d13a      	bne.n	8004eaa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e56:	d121      	bne.n	8004e9c <I2C_IsErrorOccurred+0xbc>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e5e:	d01d      	beq.n	8004e9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d01a      	beq.n	8004e9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e76:	f7fd fb3b 	bl	80024f0 <HAL_GetTick>
 8004e7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e7c:	e00e      	b.n	8004e9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e7e:	f7fd fb37 	bl	80024f0 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b19      	cmp	r3, #25
 8004e8a:	d907      	bls.n	8004e9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	f043 0320 	orr.w	r3, r3, #32
 8004e92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e9a:	e006      	b.n	8004eaa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d1e9      	bne.n	8004e7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d003      	beq.n	8004ec0 <I2C_IsErrorOccurred+0xe0>
 8004eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0aa      	beq.n	8004e16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d103      	bne.n	8004ed0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	f043 0304 	orr.w	r3, r3, #4
 8004ed6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	f043 0308 	orr.w	r3, r3, #8
 8004f18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	f043 0302 	orr.w	r3, r3, #2
 8004f3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01c      	beq.n	8004f8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff fe3b 	bl	8004bd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <I2C_IsErrorOccurred+0x1bc>)
 8004f66:	400b      	ands	r3, r1
 8004f68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	431a      	orrs	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3728      	adds	r7, #40	@ 0x28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	fe00e800 	.word	0xfe00e800

08004fa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	817b      	strh	r3, [r7, #10]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fb2:	897b      	ldrh	r3, [r7, #10]
 8004fb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fb8:	7a7b      	ldrb	r3, [r7, #9]
 8004fba:	041b      	lsls	r3, r3, #16
 8004fbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	0d5b      	lsrs	r3, r3, #21
 8004fda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004fde:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <I2C_TransferConfig+0x60>)
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	ea02 0103 	and.w	r1, r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	03ff63ff 	.word	0x03ff63ff

08005004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b20      	cmp	r3, #32
 8005018:	d138      	bne.n	800508c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005024:	2302      	movs	r3, #2
 8005026:	e032      	b.n	800508e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2224      	movs	r2, #36	@ 0x24
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005056:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d139      	bne.n	8005124 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e033      	b.n	8005126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2224      	movs	r2, #36	@ 0x24
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0c0      	b.n	80052c6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f00a fbab 	bl	800f8b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2203      	movs	r2, #3
 8005162:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f003 fef1 	bl	8008f52 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005170:	2300      	movs	r3, #0
 8005172:	73fb      	strb	r3, [r7, #15]
 8005174:	e03e      	b.n	80051f4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	440b      	add	r3, r1
 8005184:	3311      	adds	r3, #17
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800518a:	7bfa      	ldrb	r2, [r7, #15]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	3310      	adds	r3, #16
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800519e:	7bfa      	ldrb	r2, [r7, #15]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	3313      	adds	r3, #19
 80051ae:	2200      	movs	r2, #0
 80051b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051b2:	7bfa      	ldrb	r2, [r7, #15]
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	440b      	add	r3, r1
 80051c0:	3320      	adds	r3, #32
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	440b      	add	r3, r1
 80051d4:	3324      	adds	r3, #36	@ 0x24
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	440b      	add	r3, r1
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	3301      	adds	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	791b      	ldrb	r3, [r3, #4]
 80051f8:	7bfa      	ldrb	r2, [r7, #15]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d3bb      	bcc.n	8005176 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]
 8005202:	e044      	b.n	800528e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005204:	7bfa      	ldrb	r2, [r7, #15]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	440b      	add	r3, r1
 8005212:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005216:	2200      	movs	r2, #0
 8005218:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800521a:	7bfa      	ldrb	r2, [r7, #15]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	440b      	add	r3, r1
 8005228:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800522c:	7bfa      	ldrb	r2, [r7, #15]
 800522e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005230:	7bfa      	ldrb	r2, [r7, #15]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	440b      	add	r3, r1
 800523e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005246:	7bfa      	ldrb	r2, [r7, #15]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	440b      	add	r3, r1
 8005254:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800525c:	7bfa      	ldrb	r2, [r7, #15]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	440b      	add	r3, r1
 800526a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005272:	7bfa      	ldrb	r2, [r7, #15]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	440b      	add	r3, r1
 8005280:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	3301      	adds	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	791b      	ldrb	r3, [r3, #4]
 8005292:	7bfa      	ldrb	r2, [r7, #15]
 8005294:	429a      	cmp	r2, r3
 8005296:	d3b5      	bcc.n	8005204 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80052a4:	f003 fe70 	bl	8008f88 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	7a9b      	ldrb	r3, [r3, #10]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d102      	bne.n	80052c4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 fc0e 	bl	8006ae0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_PCD_Start+0x16>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e012      	b.n	800530a <HAL_PCD_Start+0x3c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f003 fe17 	bl	8008f24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f005 fbf4 	bl	800aae8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f005 fbf9 	bl	800ab16 <USB_ReadInterrupts>
 8005324:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fb06 	bl	8005942 <PCD_EP_ISR_Handler>

    return;
 8005336:	e110      	b.n	800555a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800533e:	2b00      	cmp	r3, #0
 8005340:	d013      	beq.n	800536a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800534a:	b29a      	uxth	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005354:	b292      	uxth	r2, r2
 8005356:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f00a fb3b 	bl	800f9d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005360:	2100      	movs	r1, #0
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8fc 	bl	8005560 <HAL_PCD_SetAddress>

    return;
 8005368:	e0f7      	b.n	800555a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00c      	beq.n	800538e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005386:	b292      	uxth	r2, r2
 8005388:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800538c:	e0e5      	b.n	800555a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053aa:	b292      	uxth	r2, r2
 80053ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80053b0:	e0d3      	b.n	800555a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d034      	beq.n	8005426 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	b292      	uxth	r2, r2
 80053d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053dc:	b29a      	uxth	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0208 	bic.w	r2, r2, #8
 80053e6:	b292      	uxth	r2, r2
 80053e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d107      	bne.n	8005406 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80053fe:	2100      	movs	r1, #0
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f00a fcdb 	bl	800fdbc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f00a fb1e 	bl	800fa48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005414:	b29a      	uxth	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800541e:	b292      	uxth	r2, r2
 8005420:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005424:	e099      	b.n	800555a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800542c:	2b00      	cmp	r3, #0
 800542e:	d027      	beq.n	8005480 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0208 	orr.w	r2, r2, #8
 8005442:	b292      	uxth	r2, r2
 8005444:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005450:	b29a      	uxth	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800545a:	b292      	uxth	r2, r2
 800545c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005468:	b29a      	uxth	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0204 	orr.w	r2, r2, #4
 8005472:	b292      	uxth	r2, r2
 8005474:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f00a facb 	bl	800fa14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800547e:	e06c      	b.n	800555a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d040      	beq.n	800550c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005492:	b29a      	uxth	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800549c:	b292      	uxth	r2, r2
 800549e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d12b      	bne.n	8005504 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0204 	orr.w	r2, r2, #4
 80054be:	b292      	uxth	r2, r2
 80054c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0208 	orr.w	r2, r2, #8
 80054d6:	b292      	uxth	r2, r2
 80054d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80054fa:	2101      	movs	r1, #1
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f00a fc5d 	bl	800fdbc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005502:	e02a      	b.n	800555a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f00a fa85 	bl	800fa14 <HAL_PCD_SuspendCallback>
    return;
 800550a:	e026      	b.n	800555a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00f      	beq.n	8005536 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005528:	b292      	uxth	r2, r2
 800552a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f00a fa43 	bl	800f9ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005534:	e011      	b.n	800555a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00c      	beq.n	800555a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005548:	b29a      	uxth	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005552:	b292      	uxth	r2, r2
 8005554:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005558:	bf00      	nop
  }
}
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_PCD_SetAddress+0x1a>
 8005576:	2302      	movs	r3, #2
 8005578:	e012      	b.n	80055a0 <HAL_PCD_SetAddress+0x40>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	78fa      	ldrb	r2, [r7, #3]
 8005586:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	78fa      	ldrb	r2, [r7, #3]
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f005 fa95 	bl	800aac0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	4608      	mov	r0, r1
 80055b2:	4611      	mov	r1, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	70fb      	strb	r3, [r7, #3]
 80055ba:	460b      	mov	r3, r1
 80055bc:	803b      	strh	r3, [r7, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	da0e      	bge.n	80055ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	f003 0207 	and.w	r2, r3, #7
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	3310      	adds	r3, #16
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4413      	add	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	705a      	strb	r2, [r3, #1]
 80055ea:	e00e      	b.n	800560a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055ec:	78fb      	ldrb	r3, [r7, #3]
 80055ee:	f003 0207 	and.w	r2, r3, #7
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	b2da      	uxtb	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005616:	883b      	ldrh	r3, [r7, #0]
 8005618:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	78ba      	ldrb	r2, [r7, #2]
 8005624:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005626:	78bb      	ldrb	r3, [r7, #2]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d102      	bne.n	8005632 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_PCD_EP_Open+0x98>
 800563c:	2302      	movs	r3, #2
 800563e:	e00e      	b.n	800565e <HAL_PCD_EP_Open+0xb6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68f9      	ldr	r1, [r7, #12]
 800564e:	4618      	mov	r0, r3
 8005650:	f003 fcb8 	bl	8008fc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800565c:	7afb      	ldrb	r3, [r7, #11]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da0e      	bge.n	8005698 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	f003 0207 	and.w	r2, r3, #7
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	3310      	adds	r3, #16
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	705a      	strb	r2, [r3, #1]
 8005696:	e00e      	b.n	80056b6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	f003 0207 	and.w	r2, r3, #7
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_PCD_EP_Close+0x6a>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e00e      	b.n	80056ee <HAL_PCD_EP_Close+0x88>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68f9      	ldr	r1, [r7, #12]
 80056de:	4618      	mov	r0, r3
 80056e0:	f004 f958 	bl	8009994 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
 8005702:	460b      	mov	r3, r1
 8005704:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	f003 0207 	and.w	r2, r3, #7
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2200      	movs	r2, #0
 800572e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2200      	movs	r2, #0
 8005734:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005736:	7afb      	ldrb	r3, [r7, #11]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	b2da      	uxtb	r2, r3
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6979      	ldr	r1, [r7, #20]
 8005748:	4618      	mov	r0, r3
 800574a:	f004 fb10 	bl	8009d6e <USB_EPStartXfer>

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	f003 0207 	and.w	r2, r3, #7
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	440b      	add	r3, r1
 8005776:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	460b      	mov	r3, r1
 8005796:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	f003 0207 	and.w	r2, r3, #7
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	3310      	adds	r3, #16
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2200      	movs	r2, #0
 80057cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2201      	movs	r2, #1
 80057d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d4:	7afb      	ldrb	r3, [r7, #11]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6979      	ldr	r1, [r7, #20]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f004 fac1 	bl	8009d6e <USB_EPStartXfer>

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	7912      	ldrb	r2, [r2, #4]
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e03e      	b.n	8005892 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	da0e      	bge.n	800583a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	f003 0207 	and.w	r2, r3, #7
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	3310      	adds	r3, #16
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	705a      	strb	r2, [r3, #1]
 8005838:	e00c      	b.n	8005854 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	4413      	add	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_PCD_EP_SetStall+0x7e>
 8005870:	2302      	movs	r3, #2
 8005872:	e00e      	b.n	8005892 <HAL_PCD_EP_SetStall+0x9c>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68f9      	ldr	r1, [r7, #12]
 8005882:	4618      	mov	r0, r3
 8005884:	f005 f822 	bl	800a8cc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	7912      	ldrb	r2, [r2, #4]
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d901      	bls.n	80058b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e040      	b.n	800593a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da0e      	bge.n	80058de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	f003 0207 	and.w	r2, r3, #7
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	3310      	adds	r3, #16
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	4413      	add	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	705a      	strb	r2, [r3, #1]
 80058dc:	e00e      	b.n	80058fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	f003 0207 	and.w	r2, r3, #7
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	4413      	add	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	b2da      	uxtb	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_PCD_EP_ClrStall+0x82>
 8005918:	2302      	movs	r3, #2
 800591a:	e00e      	b.n	800593a <HAL_PCD_EP_ClrStall+0xa0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68f9      	ldr	r1, [r7, #12]
 800592a:	4618      	mov	r0, r3
 800592c:	f005 f81f 	bl	800a96e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b092      	sub	sp, #72	@ 0x48
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800594a:	e333      	b.n	8005fb4 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005954:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005956:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005962:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 8108 	bne.w	8005b7c <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800596c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b00      	cmp	r3, #0
 8005974:	d14c      	bne.n	8005a10 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005986:	813b      	strh	r3, [r7, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	893b      	ldrh	r3, [r7, #8]
 800598e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3310      	adds	r3, #16
 800599e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4413      	add	r3, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	4413      	add	r3, r2
 80059ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80059c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ca:	695a      	ldr	r2, [r3, #20]
 80059cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	441a      	add	r2, r3
 80059d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059d4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80059d6:	2100      	movs	r1, #0
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f009 ffd4 	bl	800f986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	7b1b      	ldrb	r3, [r3, #12]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 82e5 	beq.w	8005fb4 <PCD_EP_ISR_Handler+0x672>
 80059ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 82e0 	bne.w	8005fb4 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	7b1b      	ldrb	r3, [r3, #12]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	731a      	strb	r2, [r3, #12]
 8005a0e:	e2d1      	b.n	8005fb4 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a16:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d032      	beq.n	8005a90 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	4413      	add	r3, r2
 8005a44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a50:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a62:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f005 f8a9 	bl	800abbc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005a76:	4013      	ands	r3, r2
 8005a78:	817b      	strh	r3, [r7, #10]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	897a      	ldrh	r2, [r7, #10]
 8005a80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a84:	b292      	uxth	r2, r2
 8005a86:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f009 ff4f 	bl	800f92c <HAL_PCD_SetupStageCallback>
 8005a8e:	e291      	b.n	8005fb4 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a90:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f280 828d 	bge.w	8005fb4 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	81fb      	strh	r3, [r7, #14]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	89fa      	ldrh	r2, [r7, #14]
 8005ab0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ab4:	b292      	uxth	r2, r2
 8005ab6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4413      	add	r3, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ade:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d019      	beq.n	8005b1c <PCD_EP_ISR_Handler+0x1da>
 8005ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d015      	beq.n	8005b1c <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af6:	6959      	ldr	r1, [r3, #20]
 8005af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f005 f85b 	bl	800abbc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	441a      	add	r2, r3
 8005b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b12:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005b14:	2100      	movs	r1, #0
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f009 ff1a 	bl	800f950 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005b24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f040 8242 	bne.w	8005fb4 <PCD_EP_ISR_Handler+0x672>
 8005b30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b32:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b3a:	f000 823b 	beq.w	8005fb4 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4e:	81bb      	strh	r3, [r7, #12]
 8005b50:	89bb      	ldrh	r3, [r7, #12]
 8005b52:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b56:	81bb      	strh	r3, [r7, #12]
 8005b58:	89bb      	ldrh	r3, [r7, #12]
 8005b5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b5e:	81bb      	strh	r3, [r7, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	89bb      	ldrh	r3, [r7, #12]
 8005b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8013      	strh	r3, [r2, #0]
 8005b7a:	e21b      	b.n	8005fb4 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b8e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f280 80f1 	bge.w	8005d7a <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005bae:	4013      	ands	r3, r2
 8005bb0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005bc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bc6:	b292      	uxth	r2, r2
 8005bc8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005bca:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be2:	7b1b      	ldrb	r3, [r3, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d123      	bne.n	8005c30 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	4413      	add	r3, r2
 8005c02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8005c10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 808b 	beq.w	8005d30 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c20:	6959      	ldr	r1, [r3, #20]
 8005c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c24:	88da      	ldrh	r2, [r3, #6]
 8005c26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c2a:	f004 ffc7 	bl	800abbc <USB_ReadPMA>
 8005c2e:	e07f      	b.n	8005d30 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c32:	78db      	ldrb	r3, [r3, #3]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d109      	bne.n	8005c4c <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005c38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f9c6 	bl	8005fd0 <HAL_PCD_EP_DB_Receive>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005c4a:	e071      	b.n	8005d30 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c66:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	441a      	add	r2, r3
 8005c76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005c78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d022      	beq.n	8005cec <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4413      	add	r3, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005cce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d02c      	beq.n	8005d30 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cdc:	6959      	ldr	r1, [r3, #20]
 8005cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce0:	891a      	ldrh	r2, [r3, #8]
 8005ce2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ce6:	f004 ff69 	bl	800abbc <USB_ReadPMA>
 8005cea:	e021      	b.n	8005d30 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	4413      	add	r3, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	4413      	add	r3, r2
 8005d06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d10:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005d14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d009      	beq.n	8005d30 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d22:	6959      	ldr	r1, [r3, #20]
 8005d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d26:	895a      	ldrh	r2, [r3, #10]
 8005d28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d2c:	f004 ff46 	bl	800abbc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d38:	441a      	add	r2, r3
 8005d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d46:	441a      	add	r2, r3
 8005d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d4a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <PCD_EP_ISR_Handler+0x41e>
 8005d54:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d206      	bcs.n	8005d6e <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f009 fdf2 	bl	800f950 <HAL_PCD_DataOutStageCallback>
 8005d6c:	e005      	b.n	8005d7a <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d74:	4618      	mov	r0, r3
 8005d76:	f003 fffa 	bl	8009d6e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005d7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8117 	beq.w	8005fb4 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005d86:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	3310      	adds	r3, #16
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	4413      	add	r3, r2
 8005d98:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd4:	78db      	ldrb	r3, [r3, #3]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	f040 80a1 	bne.w	8005f1e <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8005ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dde:	2200      	movs	r2, #0
 8005de0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005de4:	7b1b      	ldrb	r3, [r3, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8092 	beq.w	8005f10 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005dec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d046      	beq.n	8005e84 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d126      	bne.n	8005e4c <PCD_EP_ISR_Handler+0x50a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	4413      	add	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	00da      	lsls	r2, r3, #3
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	e061      	b.n	8005f10 <PCD_EP_ISR_Handler+0x5ce>
 8005e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d15d      	bne.n	8005f10 <PCD_EP_ISR_Handler+0x5ce>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	00da      	lsls	r2, r3, #3
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	e045      	b.n	8005f10 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d126      	bne.n	8005ee0 <PCD_EP_ISR_Handler+0x59e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	4413      	add	r3, r2
 8005ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	00da      	lsls	r2, r3, #3
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	e017      	b.n	8005f10 <PCD_EP_ISR_Handler+0x5ce>
 8005ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d113      	bne.n	8005f10 <PCD_EP_ISR_Handler+0x5ce>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef6:	4413      	add	r3, r2
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	00da      	lsls	r2, r3, #3
 8005f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f02:	4413      	add	r3, r2
 8005f04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f009 fd35 	bl	800f986 <HAL_PCD_DataInStageCallback>
 8005f1c:	e04a      	b.n	8005fb4 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005f1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d13f      	bne.n	8005fa8 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	4413      	add	r3, r2
 8005f42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f4c:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d906      	bls.n	8005f66 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8005f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f62:	619a      	str	r2, [r3, #24]
 8005f64:	e002      	b.n	8005f6c <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f68:	2200      	movs	r2, #0
 8005f6a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f009 fd03 	bl	800f986 <HAL_PCD_DataInStageCallback>
 8005f80:	e018      	b.n	8005fb4 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005f88:	441a      	add	r2, r3
 8005f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f8c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f90:	69da      	ldr	r2, [r3, #28]
 8005f92:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005f94:	441a      	add	r2, r3
 8005f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f98:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f003 fee4 	bl	8009d6e <USB_EPStartXfer>
 8005fa6:	e005      	b.n	8005fb4 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005fa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005faa:	461a      	mov	r2, r3
 8005fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f917 	bl	80061e2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	b21b      	sxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f6ff acc3 	blt.w	800594c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3748      	adds	r7, #72	@ 0x48
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d07c      	beq.n	80060e2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	4413      	add	r3, r2
 8006002:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800600c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	8b7b      	ldrh	r3, [r7, #26]
 8006014:	429a      	cmp	r2, r3
 8006016:	d306      	bcc.n	8006026 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	8b7b      	ldrh	r3, [r7, #26]
 800601e:	1ad2      	subs	r2, r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	619a      	str	r2, [r3, #24]
 8006024:	e002      	b.n	800602c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2200      	movs	r2, #0
 800602a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d123      	bne.n	800607c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800604a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604e:	833b      	strh	r3, [r7, #24]
 8006050:	8b3b      	ldrh	r3, [r7, #24]
 8006052:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006056:	833b      	strh	r3, [r7, #24]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	441a      	add	r2, r3
 8006066:	8b3b      	ldrh	r3, [r7, #24]
 8006068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800606c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006078:	b29b      	uxth	r3, r3
 800607a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d01f      	beq.n	80060c6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800609c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a0:	82fb      	strh	r3, [r7, #22]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	441a      	add	r2, r3
 80060b0:	8afb      	ldrh	r3, [r7, #22]
 80060b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80060c6:	8b7b      	ldrh	r3, [r7, #26]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 8085 	beq.w	80061d8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6959      	ldr	r1, [r3, #20]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	891a      	ldrh	r2, [r3, #8]
 80060da:	8b7b      	ldrh	r3, [r7, #26]
 80060dc:	f004 fd6e 	bl	800abbc <USB_ReadPMA>
 80060e0:	e07a      	b.n	80061d8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4413      	add	r3, r2
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	4413      	add	r3, r2
 80060fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006106:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	8b7b      	ldrh	r3, [r7, #26]
 800610e:	429a      	cmp	r2, r3
 8006110:	d306      	bcc.n	8006120 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	8b7b      	ldrh	r3, [r7, #26]
 8006118:	1ad2      	subs	r2, r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	619a      	str	r2, [r3, #24]
 800611e:	e002      	b.n	8006126 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2200      	movs	r2, #0
 8006124:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d123      	bne.n	8006176 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006148:	83fb      	strh	r3, [r7, #30]
 800614a:	8bfb      	ldrh	r3, [r7, #30]
 800614c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006150:	83fb      	strh	r3, [r7, #30]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	8bfb      	ldrh	r3, [r7, #30]
 8006162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800616a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800616e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006172:	b29b      	uxth	r3, r3
 8006174:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d11f      	bne.n	80061c0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	83bb      	strh	r3, [r7, #28]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	8bbb      	ldrh	r3, [r7, #28]
 80061ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80061c0:	8b7b      	ldrh	r3, [r7, #26]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d008      	beq.n	80061d8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6959      	ldr	r1, [r3, #20]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	895a      	ldrh	r2, [r3, #10]
 80061d2:	8b7b      	ldrh	r3, [r7, #26]
 80061d4:	f004 fcf2 	bl	800abbc <USB_ReadPMA>
    }
  }

  return count;
 80061d8:	8b7b      	ldrh	r3, [r7, #26]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b0a6      	sub	sp, #152	@ 0x98
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	4613      	mov	r3, r2
 80061ee:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 81f7 	beq.w	80065ea <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006204:	b29b      	uxth	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	4413      	add	r3, r2
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	4413      	add	r3, r2
 8006216:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006220:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800622c:	429a      	cmp	r2, r3
 800622e:	d907      	bls.n	8006240 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	699a      	ldr	r2, [r3, #24]
 8006234:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006238:	1ad2      	subs	r2, r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	619a      	str	r2, [r3, #24]
 800623e:	e002      	b.n	8006246 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	2b00      	cmp	r3, #0
 800624c:	f040 80e1 	bne.w	8006412 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d126      	bne.n	80062a6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	633b      	str	r3, [r7, #48]	@ 0x30
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006266:	b29b      	uxth	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	4413      	add	r3, r2
 800626e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	00da      	lsls	r2, r3, #3
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	4413      	add	r3, r2
 800627a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800627e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800628a:	b29a      	uxth	r2, r3
 800628c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629e:	b29a      	uxth	r2, r3
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	e01a      	b.n	80062dc <HAL_PCD_EP_DB_Transmit+0xfa>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	785b      	ldrb	r3, [r3, #1]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d116      	bne.n	80062dc <HAL_PCD_EP_DB_Transmit+0xfa>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062bc:	b29b      	uxth	r3, r3
 80062be:	461a      	mov	r2, r3
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	4413      	add	r3, r2
 80062c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	00da      	lsls	r2, r3, #3
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	4413      	add	r3, r2
 80062d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d8:	2200      	movs	r2, #0
 80062da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d126      	bne.n	8006338 <HAL_PCD_EP_DB_Transmit+0x156>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	623b      	str	r3, [r7, #32]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	4413      	add	r3, r2
 8006300:	623b      	str	r3, [r7, #32]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	00da      	lsls	r2, r3, #3
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	4413      	add	r3, r2
 800630c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800631c:	b29a      	uxth	r2, r3
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006330:	b29a      	uxth	r2, r3
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	e017      	b.n	8006368 <HAL_PCD_EP_DB_Transmit+0x186>
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d113      	bne.n	8006368 <HAL_PCD_EP_DB_Transmit+0x186>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634e:	4413      	add	r3, r2
 8006350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	00da      	lsls	r2, r3, #3
 8006358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635a:	4413      	add	r3, r2
 800635c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	2200      	movs	r2, #0
 8006366:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	78db      	ldrb	r3, [r3, #3]
 800636c:	2b02      	cmp	r3, #2
 800636e:	d123      	bne.n	80063b8 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800638a:	837b      	strh	r3, [r7, #26]
 800638c:	8b7b      	ldrh	r3, [r7, #26]
 800638e:	f083 0320 	eor.w	r3, r3, #32
 8006392:	837b      	strh	r3, [r7, #26]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	441a      	add	r2, r3
 80063a2:	8b7b      	ldrh	r3, [r7, #26]
 80063a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	4619      	mov	r1, r3
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f009 fae1 	bl	800f986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01f      	beq.n	800640e <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e8:	833b      	strh	r3, [r7, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	441a      	add	r2, r3
 80063f8:	8b3b      	ldrh	r3, [r7, #24]
 80063fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800640a:	b29b      	uxth	r3, r3
 800640c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e31f      	b.n	8006a52 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d021      	beq.n	8006460 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006436:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800644c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006450:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800645c:	b29b      	uxth	r3, r3
 800645e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006466:	2b01      	cmp	r3, #1
 8006468:	f040 82ca 	bne.w	8006a00 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	695a      	ldr	r2, [r3, #20]
 8006470:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006474:	441a      	add	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006482:	441a      	add	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6a1a      	ldr	r2, [r3, #32]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	429a      	cmp	r2, r3
 8006492:	d309      	bcc.n	80064a8 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6a1a      	ldr	r2, [r3, #32]
 800649e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064a0:	1ad2      	subs	r2, r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	621a      	str	r2, [r3, #32]
 80064a6:	e015      	b.n	80064d4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d107      	bne.n	80064c0 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80064b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064b4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80064be:	e009      	b.n	80064d4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2200      	movs	r2, #0
 80064d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d15f      	bne.n	800659c <HAL_PCD_EP_DB_Transmit+0x3ba>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064f0:	4413      	add	r3, r2
 80064f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	00da      	lsls	r2, r3, #3
 80064fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064fc:	4413      	add	r3, r2
 80064fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800650e:	b29a      	uxth	r2, r3
 8006510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006512:	801a      	strh	r2, [r3, #0]
 8006514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <HAL_PCD_EP_DB_Transmit+0x34e>
 800651a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006528:	b29a      	uxth	r2, r3
 800652a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e051      	b.n	80065d4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006530:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006532:	2b3e      	cmp	r3, #62	@ 0x3e
 8006534:	d816      	bhi.n	8006564 <HAL_PCD_EP_DB_Transmit+0x382>
 8006536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	653b      	str	r3, [r7, #80]	@ 0x50
 800653c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_PCD_EP_DB_Transmit+0x36a>
 8006546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006548:	3301      	adds	r3, #1
 800654a:	653b      	str	r3, [r7, #80]	@ 0x50
 800654c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29a      	uxth	r2, r3
 8006552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006554:	b29b      	uxth	r3, r3
 8006556:	029b      	lsls	r3, r3, #10
 8006558:	b29b      	uxth	r3, r3
 800655a:	4313      	orrs	r3, r2
 800655c:	b29a      	uxth	r2, r3
 800655e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	e037      	b.n	80065d4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006564:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	653b      	str	r3, [r7, #80]	@ 0x50
 800656a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <HAL_PCD_EP_DB_Transmit+0x398>
 8006574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006576:	3b01      	subs	r3, #1
 8006578:	653b      	str	r3, [r7, #80]	@ 0x50
 800657a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29a      	uxth	r2, r3
 8006580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006582:	b29b      	uxth	r3, r3
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	b29b      	uxth	r3, r3
 8006588:	4313      	orrs	r3, r2
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006594:	b29a      	uxth	r2, r3
 8006596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	e01b      	b.n	80065d4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d117      	bne.n	80065d4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b8:	4413      	add	r3, r2
 80065ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	00da      	lsls	r2, r3, #3
 80065c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80065cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6959      	ldr	r1, [r3, #20]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	891a      	ldrh	r2, [r3, #8]
 80065e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f004 faa7 	bl	800ab36 <USB_WritePMA>
 80065e8:	e20a      	b.n	8006a00 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	4413      	add	r3, r2
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	4413      	add	r3, r2
 8006604:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800660e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800661a:	429a      	cmp	r2, r3
 800661c:	d307      	bcc.n	800662e <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	619a      	str	r2, [r3, #24]
 800662c:	e002      	b.n	8006634 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2200      	movs	r2, #0
 8006632:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f040 80f6 	bne.w	800682a <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d126      	bne.n	8006694 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	677b      	str	r3, [r7, #116]	@ 0x74
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006654:	b29b      	uxth	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800665a:	4413      	add	r3, r2
 800665c:	677b      	str	r3, [r7, #116]	@ 0x74
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	00da      	lsls	r2, r3, #3
 8006664:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006666:	4413      	add	r3, r2
 8006668:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800666c:	673b      	str	r3, [r7, #112]	@ 0x70
 800666e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006678:	b29a      	uxth	r2, r3
 800667a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668c:	b29a      	uxth	r2, r3
 800668e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	e01a      	b.n	80066ca <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d116      	bne.n	80066ca <HAL_PCD_EP_DB_Transmit+0x4e8>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066b0:	4413      	add	r3, r2
 80066b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	00da      	lsls	r2, r3, #3
 80066ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066bc:	4413      	add	r3, r2
 80066be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066c6:	2200      	movs	r2, #0
 80066c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d12f      	bne.n	800673a <HAL_PCD_EP_DB_Transmit+0x558>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066f2:	4413      	add	r3, r2
 80066f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	00da      	lsls	r2, r3, #3
 80066fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006702:	4413      	add	r3, r2
 8006704:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800670c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006718:	b29a      	uxth	r2, r3
 800671a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800671e:	801a      	strh	r2, [r3, #0]
 8006720:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800672c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006730:	b29a      	uxth	r2, r3
 8006732:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006736:	801a      	strh	r2, [r3, #0]
 8006738:	e01c      	b.n	8006774 <HAL_PCD_EP_DB_Transmit+0x592>
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d118      	bne.n	8006774 <HAL_PCD_EP_DB_Transmit+0x592>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800674a:	b29b      	uxth	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006752:	4413      	add	r3, r2
 8006754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	00da      	lsls	r2, r3, #3
 800675e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006762:	4413      	add	r3, r2
 8006764:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006768:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800676c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006770:	2200      	movs	r2, #0
 8006772:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	78db      	ldrb	r3, [r3, #3]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d127      	bne.n	80067cc <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006796:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800679a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800679e:	f083 0320 	eor.w	r3, r3, #32
 80067a2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	441a      	add	r2, r3
 80067b4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80067b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f009 f8d7 	bl	800f986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80067d8:	88fb      	ldrh	r3, [r7, #6]
 80067da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d121      	bne.n	8006826 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067fc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	441a      	add	r2, r3
 800680e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800681a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800681e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e113      	b.n	8006a52 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d121      	bne.n	8006878 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800684a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800684e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	441a      	add	r2, r3
 8006860:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800686c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006874:	b29b      	uxth	r3, r3
 8006876:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800687e:	2b01      	cmp	r3, #1
 8006880:	f040 80be 	bne.w	8006a00 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	695a      	ldr	r2, [r3, #20]
 8006888:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800688c:	441a      	add	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	69da      	ldr	r2, [r3, #28]
 8006896:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800689a:	441a      	add	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	6a1a      	ldr	r2, [r3, #32]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d309      	bcc.n	80068c0 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6a1a      	ldr	r2, [r3, #32]
 80068b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068b8:	1ad2      	subs	r2, r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	621a      	str	r2, [r3, #32]
 80068be:	e015      	b.n	80068ec <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d107      	bne.n	80068d8 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80068c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80068cc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80068d6:	e009      	b.n	80068ec <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2200      	movs	r2, #0
 80068e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d15f      	bne.n	80069ba <HAL_PCD_EP_DB_Transmit+0x7d8>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006908:	b29b      	uxth	r3, r3
 800690a:	461a      	mov	r2, r3
 800690c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800690e:	4413      	add	r3, r2
 8006910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	00da      	lsls	r2, r3, #3
 8006918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800691a:	4413      	add	r3, r2
 800691c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006920:	667b      	str	r3, [r7, #100]	@ 0x64
 8006922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800692c:	b29a      	uxth	r2, r3
 800692e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <HAL_PCD_EP_DB_Transmit+0x76c>
 8006938:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006946:	b29a      	uxth	r2, r3
 8006948:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	e04e      	b.n	80069ec <HAL_PCD_EP_DB_Transmit+0x80a>
 800694e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006950:	2b3e      	cmp	r3, #62	@ 0x3e
 8006952:	d816      	bhi.n	8006982 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006956:	085b      	lsrs	r3, r3, #1
 8006958:	663b      	str	r3, [r7, #96]	@ 0x60
 800695a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <HAL_PCD_EP_DB_Transmit+0x788>
 8006964:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006966:	3301      	adds	r3, #1
 8006968:	663b      	str	r3, [r7, #96]	@ 0x60
 800696a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29a      	uxth	r2, r3
 8006970:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006972:	b29b      	uxth	r3, r3
 8006974:	029b      	lsls	r3, r3, #10
 8006976:	b29b      	uxth	r3, r3
 8006978:	4313      	orrs	r3, r2
 800697a:	b29a      	uxth	r2, r3
 800697c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	e034      	b.n	80069ec <HAL_PCD_EP_DB_Transmit+0x80a>
 8006982:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	663b      	str	r3, [r7, #96]	@ 0x60
 8006988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	2b00      	cmp	r3, #0
 8006990:	d102      	bne.n	8006998 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006994:	3b01      	subs	r3, #1
 8006996:	663b      	str	r3, [r7, #96]	@ 0x60
 8006998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29a      	uxth	r2, r3
 800699e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	029b      	lsls	r3, r3, #10
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	4313      	orrs	r3, r2
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	e018      	b.n	80069ec <HAL_PCD_EP_DB_Transmit+0x80a>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d114      	bne.n	80069ec <HAL_PCD_EP_DB_Transmit+0x80a>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069d0:	4413      	add	r3, r2
 80069d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	00da      	lsls	r2, r3, #3
 80069da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069dc:	4413      	add	r3, r2
 80069de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80069e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	6959      	ldr	r1, [r3, #20]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	895a      	ldrh	r2, [r3, #10]
 80069f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f004 f89b 	bl	800ab36 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a1a:	82fb      	strh	r3, [r7, #22]
 8006a1c:	8afb      	ldrh	r3, [r7, #22]
 8006a1e:	f083 0310 	eor.w	r3, r3, #16
 8006a22:	82fb      	strh	r3, [r7, #22]
 8006a24:	8afb      	ldrh	r3, [r7, #22]
 8006a26:	f083 0320 	eor.w	r3, r3, #32
 8006a2a:	82fb      	strh	r3, [r7, #22]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	8afb      	ldrh	r3, [r7, #22]
 8006a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3798      	adds	r7, #152	@ 0x98
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b087      	sub	sp, #28
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	607b      	str	r3, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	817b      	strh	r3, [r7, #10]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006a6c:	897b      	ldrh	r3, [r7, #10]
 8006a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a78:	897b      	ldrh	r3, [r7, #10]
 8006a7a:	f003 0207 	and.w	r2, r3, #7
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	3310      	adds	r3, #16
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	e009      	b.n	8006aa4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a90:	897a      	ldrh	r2, [r7, #10]
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d107      	bne.n	8006aba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2200      	movs	r2, #0
 8006aae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	80da      	strh	r2, [r3, #6]
 8006ab8:	e00b      	b.n	8006ad2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2201      	movs	r2, #1
 8006abe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	0c1b      	lsrs	r3, r3, #16
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f043 0302 	orr.w	r3, r3, #2
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d141      	bne.n	8006bc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b42:	4b4b      	ldr	r3, [pc, #300]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b4e:	d131      	bne.n	8006bb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b50:	4b47      	ldr	r3, [pc, #284]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b56:	4a46      	ldr	r2, [pc, #280]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b60:	4b43      	ldr	r3, [pc, #268]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b68:	4a41      	ldr	r2, [pc, #260]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b70:	4b40      	ldr	r3, [pc, #256]	@ (8006c74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2232      	movs	r2, #50	@ 0x32
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b80:	0c9b      	lsrs	r3, r3, #18
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b86:	e002      	b.n	8006b8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b8e:	4b38      	ldr	r3, [pc, #224]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b9a:	d102      	bne.n	8006ba2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f2      	bne.n	8006b88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ba2:	4b33      	ldr	r3, [pc, #204]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bae:	d158      	bne.n	8006c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e057      	b.n	8006c64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bba:	4a2d      	ldr	r2, [pc, #180]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006bc4:	e04d      	b.n	8006c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bcc:	d141      	bne.n	8006c52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006bce:	4b28      	ldr	r3, [pc, #160]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bda:	d131      	bne.n	8006c40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bdc:	4b24      	ldr	r3, [pc, #144]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006be2:	4a23      	ldr	r2, [pc, #140]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006be8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bec:	4b20      	ldr	r3, [pc, #128]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2232      	movs	r2, #50	@ 0x32
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
 8006c06:	4a1c      	ldr	r2, [pc, #112]	@ (8006c78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c08:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0c:	0c9b      	lsrs	r3, r3, #18
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c12:	e002      	b.n	8006c1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c1a:	4b15      	ldr	r3, [pc, #84]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c26:	d102      	bne.n	8006c2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f2      	bne.n	8006c14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c2e:	4b10      	ldr	r3, [pc, #64]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c3a:	d112      	bne.n	8006c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e011      	b.n	8006c64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c40:	4b0b      	ldr	r3, [pc, #44]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c46:	4a0a      	ldr	r2, [pc, #40]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c50:	e007      	b.n	8006c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c52:	4b07      	ldr	r3, [pc, #28]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c5a:	4a05      	ldr	r2, [pc, #20]	@ (8006c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	40007000 	.word	0x40007000
 8006c74:	20000000 	.word	0x20000000
 8006c78:	431bde83 	.word	0x431bde83

08006c7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006c80:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	4a04      	ldr	r2, [pc, #16]	@ (8006c98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c8a:	6093      	str	r3, [r2, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40007000 	.word	0x40007000

08006c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e2fe      	b.n	80072ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d075      	beq.n	8006da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cba:	4b97      	ldr	r3, [pc, #604]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 030c 	and.w	r3, r3, #12
 8006cc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cc4:	4b94      	ldr	r3, [pc, #592]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 0303 	and.w	r3, r3, #3
 8006ccc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	2b0c      	cmp	r3, #12
 8006cd2:	d102      	bne.n	8006cda <HAL_RCC_OscConfig+0x3e>
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d002      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x44>
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d10b      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce0:	4b8d      	ldr	r3, [pc, #564]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d05b      	beq.n	8006da4 <HAL_RCC_OscConfig+0x108>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d157      	bne.n	8006da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e2d9      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d00:	d106      	bne.n	8006d10 <HAL_RCC_OscConfig+0x74>
 8006d02:	4b85      	ldr	r3, [pc, #532]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a84      	ldr	r2, [pc, #528]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	e01d      	b.n	8006d4c <HAL_RCC_OscConfig+0xb0>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d18:	d10c      	bne.n	8006d34 <HAL_RCC_OscConfig+0x98>
 8006d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	4b7c      	ldr	r3, [pc, #496]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a7b      	ldr	r2, [pc, #492]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e00b      	b.n	8006d4c <HAL_RCC_OscConfig+0xb0>
 8006d34:	4b78      	ldr	r3, [pc, #480]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a77      	ldr	r2, [pc, #476]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	4b75      	ldr	r3, [pc, #468]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a74      	ldr	r2, [pc, #464]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d013      	beq.n	8006d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d54:	f7fb fbcc 	bl	80024f0 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d5c:	f7fb fbc8 	bl	80024f0 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b64      	cmp	r3, #100	@ 0x64
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e29e      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <HAL_RCC_OscConfig+0xc0>
 8006d7a:	e014      	b.n	8006da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d7c:	f7fb fbb8 	bl	80024f0 <HAL_GetTick>
 8006d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d82:	e008      	b.n	8006d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d84:	f7fb fbb4 	bl	80024f0 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b64      	cmp	r3, #100	@ 0x64
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e28a      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d96:	4b60      	ldr	r3, [pc, #384]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1f0      	bne.n	8006d84 <HAL_RCC_OscConfig+0xe8>
 8006da2:	e000      	b.n	8006da6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d075      	beq.n	8006e9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006db2:	4b59      	ldr	r3, [pc, #356]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 030c 	and.w	r3, r3, #12
 8006dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dbc:	4b56      	ldr	r3, [pc, #344]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b0c      	cmp	r3, #12
 8006dca:	d102      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x136>
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d002      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x13c>
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d11f      	bne.n	8006e18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_RCC_OscConfig+0x154>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e25d      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df0:	4b49      	ldr	r3, [pc, #292]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	061b      	lsls	r3, r3, #24
 8006dfe:	4946      	ldr	r1, [pc, #280]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e04:	4b45      	ldr	r3, [pc, #276]	@ (8006f1c <HAL_RCC_OscConfig+0x280>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fb f995 	bl	8002138 <HAL_InitTick>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d043      	beq.n	8006e9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e249      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d023      	beq.n	8006e68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e20:	4b3d      	ldr	r3, [pc, #244]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a3c      	ldr	r2, [pc, #240]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2c:	f7fb fb60 	bl	80024f0 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e34:	f7fb fb5c 	bl	80024f0 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e232      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e46:	4b34      	ldr	r3, [pc, #208]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e52:	4b31      	ldr	r3, [pc, #196]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	061b      	lsls	r3, r3, #24
 8006e60:	492d      	ldr	r1, [pc, #180]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	604b      	str	r3, [r1, #4]
 8006e66:	e01a      	b.n	8006e9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e68:	4b2b      	ldr	r3, [pc, #172]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006e6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e74:	f7fb fb3c 	bl	80024f0 <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e7c:	f7fb fb38 	bl	80024f0 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e20e      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e8e:	4b22      	ldr	r3, [pc, #136]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1f0      	bne.n	8006e7c <HAL_RCC_OscConfig+0x1e0>
 8006e9a:	e000      	b.n	8006e9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d041      	beq.n	8006f2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01c      	beq.n	8006eec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eb2:	4b19      	ldr	r3, [pc, #100]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eb8:	4a17      	ldr	r2, [pc, #92]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006eba:	f043 0301 	orr.w	r3, r3, #1
 8006ebe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec2:	f7fb fb15 	bl	80024f0 <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ec8:	e008      	b.n	8006edc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eca:	f7fb fb11 	bl	80024f0 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e1e7      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006edc:	4b0e      	ldr	r3, [pc, #56]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0ef      	beq.n	8006eca <HAL_RCC_OscConfig+0x22e>
 8006eea:	e020      	b.n	8006f2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006eec:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ef2:	4a09      	ldr	r2, [pc, #36]	@ (8006f18 <HAL_RCC_OscConfig+0x27c>)
 8006ef4:	f023 0301 	bic.w	r3, r3, #1
 8006ef8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efc:	f7fb faf8 	bl	80024f0 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f02:	e00d      	b.n	8006f20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f04:	f7fb faf4 	bl	80024f0 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d906      	bls.n	8006f20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e1ca      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
 8006f16:	bf00      	nop
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f20:	4b8c      	ldr	r3, [pc, #560]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1ea      	bne.n	8006f04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 80a6 	beq.w	8007088 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f40:	4b84      	ldr	r3, [pc, #528]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_RCC_OscConfig+0x2b4>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <HAL_RCC_OscConfig+0x2b6>
 8006f50:	2300      	movs	r3, #0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f56:	4b7f      	ldr	r3, [pc, #508]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f62:	4b7c      	ldr	r3, [pc, #496]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f72:	4b79      	ldr	r3, [pc, #484]	@ (8007158 <HAL_RCC_OscConfig+0x4bc>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d118      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f7e:	4b76      	ldr	r3, [pc, #472]	@ (8007158 <HAL_RCC_OscConfig+0x4bc>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a75      	ldr	r2, [pc, #468]	@ (8007158 <HAL_RCC_OscConfig+0x4bc>)
 8006f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f8a:	f7fb fab1 	bl	80024f0 <HAL_GetTick>
 8006f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f90:	e008      	b.n	8006fa4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f92:	f7fb faad 	bl	80024f0 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e183      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8007158 <HAL_RCC_OscConfig+0x4bc>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0f0      	beq.n	8006f92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d108      	bne.n	8006fca <HAL_RCC_OscConfig+0x32e>
 8006fb8:	4b66      	ldr	r3, [pc, #408]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fbe:	4a65      	ldr	r2, [pc, #404]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fc8:	e024      	b.n	8007014 <HAL_RCC_OscConfig+0x378>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d110      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x358>
 8006fd2:	4b60      	ldr	r3, [pc, #384]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006fda:	f043 0304 	orr.w	r3, r3, #4
 8006fde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006fea:	f043 0301 	orr.w	r3, r3, #1
 8006fee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ff2:	e00f      	b.n	8007014 <HAL_RCC_OscConfig+0x378>
 8006ff4:	4b57      	ldr	r3, [pc, #348]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffa:	4a56      	ldr	r2, [pc, #344]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007004:	4b53      	ldr	r3, [pc, #332]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8007006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800700a:	4a52      	ldr	r2, [pc, #328]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 800700c:	f023 0304 	bic.w	r3, r3, #4
 8007010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d016      	beq.n	800704a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800701c:	f7fb fa68 	bl	80024f0 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007022:	e00a      	b.n	800703a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007024:	f7fb fa64 	bl	80024f0 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007032:	4293      	cmp	r3, r2
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e138      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800703a:	4b46      	ldr	r3, [pc, #280]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 800703c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0ed      	beq.n	8007024 <HAL_RCC_OscConfig+0x388>
 8007048:	e015      	b.n	8007076 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704a:	f7fb fa51 	bl	80024f0 <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007050:	e00a      	b.n	8007068 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007052:	f7fb fa4d 	bl	80024f0 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007060:	4293      	cmp	r3, r2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e121      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007068:	4b3a      	ldr	r3, [pc, #232]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 800706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1ed      	bne.n	8007052 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007076:	7ffb      	ldrb	r3, [r7, #31]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d105      	bne.n	8007088 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800707c:	4b35      	ldr	r3, [pc, #212]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 800707e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007080:	4a34      	ldr	r2, [pc, #208]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8007082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007086:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d03c      	beq.n	800710e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01c      	beq.n	80070d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800709c:	4b2d      	ldr	r3, [pc, #180]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 800709e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070a2:	4a2c      	ldr	r2, [pc, #176]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 80070a4:	f043 0301 	orr.w	r3, r3, #1
 80070a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ac:	f7fb fa20 	bl	80024f0 <HAL_GetTick>
 80070b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070b4:	f7fb fa1c 	bl	80024f0 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e0f2      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070c6:	4b23      	ldr	r3, [pc, #140]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 80070c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0ef      	beq.n	80070b4 <HAL_RCC_OscConfig+0x418>
 80070d4:	e01b      	b.n	800710e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 80070d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 80070de:	f023 0301 	bic.w	r3, r3, #1
 80070e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e6:	f7fb fa03 	bl	80024f0 <HAL_GetTick>
 80070ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070ec:	e008      	b.n	8007100 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070ee:	f7fb f9ff 	bl	80024f0 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d901      	bls.n	8007100 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e0d5      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007100:	4b14      	ldr	r3, [pc, #80]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8007102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1ef      	bne.n	80070ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80c9 	beq.w	80072aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007118:	4b0e      	ldr	r3, [pc, #56]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 030c 	and.w	r3, r3, #12
 8007120:	2b0c      	cmp	r3, #12
 8007122:	f000 8083 	beq.w	800722c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	2b02      	cmp	r3, #2
 800712c:	d15e      	bne.n	80071ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800712e:	4b09      	ldr	r3, [pc, #36]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a08      	ldr	r2, [pc, #32]	@ (8007154 <HAL_RCC_OscConfig+0x4b8>)
 8007134:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713a:	f7fb f9d9 	bl	80024f0 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007140:	e00c      	b.n	800715c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007142:	f7fb f9d5 	bl	80024f0 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d905      	bls.n	800715c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e0ab      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
 8007154:	40021000 	.word	0x40021000
 8007158:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800715c:	4b55      	ldr	r3, [pc, #340]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1ec      	bne.n	8007142 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007168:	4b52      	ldr	r3, [pc, #328]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	4b52      	ldr	r3, [pc, #328]	@ (80072b8 <HAL_RCC_OscConfig+0x61c>)
 800716e:	4013      	ands	r3, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6a11      	ldr	r1, [r2, #32]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007178:	3a01      	subs	r2, #1
 800717a:	0112      	lsls	r2, r2, #4
 800717c:	4311      	orrs	r1, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007182:	0212      	lsls	r2, r2, #8
 8007184:	4311      	orrs	r1, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800718a:	0852      	lsrs	r2, r2, #1
 800718c:	3a01      	subs	r2, #1
 800718e:	0552      	lsls	r2, r2, #21
 8007190:	4311      	orrs	r1, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007196:	0852      	lsrs	r2, r2, #1
 8007198:	3a01      	subs	r2, #1
 800719a:	0652      	lsls	r2, r2, #25
 800719c:	4311      	orrs	r1, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80071a2:	06d2      	lsls	r2, r2, #27
 80071a4:	430a      	orrs	r2, r1
 80071a6:	4943      	ldr	r1, [pc, #268]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071ac:	4b41      	ldr	r3, [pc, #260]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a40      	ldr	r2, [pc, #256]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 80071b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071b8:	4b3e      	ldr	r3, [pc, #248]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	4a3d      	ldr	r2, [pc, #244]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 80071be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c4:	f7fb f994 	bl	80024f0 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071cc:	f7fb f990 	bl	80024f0 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e066      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071de:	4b35      	ldr	r3, [pc, #212]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0f0      	beq.n	80071cc <HAL_RCC_OscConfig+0x530>
 80071ea:	e05e      	b.n	80072aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ec:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a30      	ldr	r2, [pc, #192]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 80071f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f8:	f7fb f97a 	bl	80024f0 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007200:	f7fb f976 	bl	80024f0 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e04c      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007212:	4b28      	ldr	r3, [pc, #160]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1f0      	bne.n	8007200 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800721e:	4b25      	ldr	r3, [pc, #148]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	4924      	ldr	r1, [pc, #144]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 8007224:	4b25      	ldr	r3, [pc, #148]	@ (80072bc <HAL_RCC_OscConfig+0x620>)
 8007226:	4013      	ands	r3, r2
 8007228:	60cb      	str	r3, [r1, #12]
 800722a:	e03e      	b.n	80072aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e039      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007238:	4b1e      	ldr	r3, [pc, #120]	@ (80072b4 <HAL_RCC_OscConfig+0x618>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f003 0203 	and.w	r2, r3, #3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	429a      	cmp	r2, r3
 800724a:	d12c      	bne.n	80072a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007256:	3b01      	subs	r3, #1
 8007258:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800725a:	429a      	cmp	r2, r3
 800725c:	d123      	bne.n	80072a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007268:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800726a:	429a      	cmp	r2, r3
 800726c:	d11b      	bne.n	80072a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007278:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800727a:	429a      	cmp	r2, r3
 800727c:	d113      	bne.n	80072a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	3b01      	subs	r3, #1
 800728c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800728e:	429a      	cmp	r2, r3
 8007290:	d109      	bne.n	80072a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800729c:	085b      	lsrs	r3, r3, #1
 800729e:	3b01      	subs	r3, #1
 80072a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d001      	beq.n	80072aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40021000 	.word	0x40021000
 80072b8:	019f800c 	.word	0x019f800c
 80072bc:	feeefffc 	.word	0xfeeefffc

080072c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e11e      	b.n	8007516 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072d8:	4b91      	ldr	r3, [pc, #580]	@ (8007520 <HAL_RCC_ClockConfig+0x260>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d910      	bls.n	8007308 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072e6:	4b8e      	ldr	r3, [pc, #568]	@ (8007520 <HAL_RCC_ClockConfig+0x260>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f023 020f 	bic.w	r2, r3, #15
 80072ee:	498c      	ldr	r1, [pc, #560]	@ (8007520 <HAL_RCC_ClockConfig+0x260>)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072f6:	4b8a      	ldr	r3, [pc, #552]	@ (8007520 <HAL_RCC_ClockConfig+0x260>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d001      	beq.n	8007308 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e106      	b.n	8007516 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d073      	beq.n	80073fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b03      	cmp	r3, #3
 800731a:	d129      	bne.n	8007370 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800731c:	4b81      	ldr	r3, [pc, #516]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e0f4      	b.n	8007516 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800732c:	f000 f9d0 	bl	80076d0 <RCC_GetSysClockFreqFromPLLSource>
 8007330:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	4a7c      	ldr	r2, [pc, #496]	@ (8007528 <HAL_RCC_ClockConfig+0x268>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d93f      	bls.n	80073ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800733a:	4b7a      	ldr	r3, [pc, #488]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800734e:	2b00      	cmp	r3, #0
 8007350:	d033      	beq.n	80073ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007356:	2b00      	cmp	r3, #0
 8007358:	d12f      	bne.n	80073ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800735a:	4b72      	ldr	r3, [pc, #456]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007362:	4a70      	ldr	r2, [pc, #448]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 8007364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007368:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800736a:	2380      	movs	r3, #128	@ 0x80
 800736c:	617b      	str	r3, [r7, #20]
 800736e:	e024      	b.n	80073ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b02      	cmp	r3, #2
 8007376:	d107      	bne.n	8007388 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007378:	4b6a      	ldr	r3, [pc, #424]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e0c6      	b.n	8007516 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007388:	4b66      	ldr	r3, [pc, #408]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e0be      	b.n	8007516 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007398:	f000 f8ce 	bl	8007538 <HAL_RCC_GetSysClockFreq>
 800739c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	4a61      	ldr	r2, [pc, #388]	@ (8007528 <HAL_RCC_ClockConfig+0x268>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d909      	bls.n	80073ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073a6:	4b5f      	ldr	r3, [pc, #380]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073ae:	4a5d      	ldr	r2, [pc, #372]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 80073b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80073b6:	2380      	movs	r3, #128	@ 0x80
 80073b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073ba:	4b5a      	ldr	r3, [pc, #360]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f023 0203 	bic.w	r2, r3, #3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	4957      	ldr	r1, [pc, #348]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073cc:	f7fb f890 	bl	80024f0 <HAL_GetTick>
 80073d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073d2:	e00a      	b.n	80073ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073d4:	f7fb f88c 	bl	80024f0 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e095      	b.n	8007516 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ea:	4b4e      	ldr	r3, [pc, #312]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 020c 	and.w	r2, r3, #12
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d1eb      	bne.n	80073d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d023      	beq.n	8007450 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007414:	4b43      	ldr	r3, [pc, #268]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	4a42      	ldr	r2, [pc, #264]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 800741a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800741e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0308 	and.w	r3, r3, #8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800742c:	4b3d      	ldr	r3, [pc, #244]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007434:	4a3b      	ldr	r2, [pc, #236]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 8007436:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800743a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800743c:	4b39      	ldr	r3, [pc, #228]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	4936      	ldr	r1, [pc, #216]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 800744a:	4313      	orrs	r3, r2
 800744c:	608b      	str	r3, [r1, #8]
 800744e:	e008      	b.n	8007462 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2b80      	cmp	r3, #128	@ 0x80
 8007454:	d105      	bne.n	8007462 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007456:	4b33      	ldr	r3, [pc, #204]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	4a32      	ldr	r2, [pc, #200]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 800745c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007460:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007462:	4b2f      	ldr	r3, [pc, #188]	@ (8007520 <HAL_RCC_ClockConfig+0x260>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 030f 	and.w	r3, r3, #15
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d21d      	bcs.n	80074ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007470:	4b2b      	ldr	r3, [pc, #172]	@ (8007520 <HAL_RCC_ClockConfig+0x260>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f023 020f 	bic.w	r2, r3, #15
 8007478:	4929      	ldr	r1, [pc, #164]	@ (8007520 <HAL_RCC_ClockConfig+0x260>)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	4313      	orrs	r3, r2
 800747e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007480:	f7fb f836 	bl	80024f0 <HAL_GetTick>
 8007484:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007486:	e00a      	b.n	800749e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007488:	f7fb f832 	bl	80024f0 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007496:	4293      	cmp	r3, r2
 8007498:	d901      	bls.n	800749e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e03b      	b.n	8007516 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800749e:	4b20      	ldr	r3, [pc, #128]	@ (8007520 <HAL_RCC_ClockConfig+0x260>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 030f 	and.w	r3, r3, #15
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d1ed      	bne.n	8007488 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d008      	beq.n	80074ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	4917      	ldr	r1, [pc, #92]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074d6:	4b13      	ldr	r3, [pc, #76]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	490f      	ldr	r1, [pc, #60]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80074ea:	f000 f825 	bl	8007538 <HAL_RCC_GetSysClockFreq>
 80074ee:	4602      	mov	r2, r0
 80074f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007524 <HAL_RCC_ClockConfig+0x264>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	091b      	lsrs	r3, r3, #4
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	490c      	ldr	r1, [pc, #48]	@ (800752c <HAL_RCC_ClockConfig+0x26c>)
 80074fc:	5ccb      	ldrb	r3, [r1, r3]
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	4a0a      	ldr	r2, [pc, #40]	@ (8007530 <HAL_RCC_ClockConfig+0x270>)
 8007508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800750a:	4b0a      	ldr	r3, [pc, #40]	@ (8007534 <HAL_RCC_ClockConfig+0x274>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f7fa fe12 	bl	8002138 <HAL_InitTick>
 8007514:	4603      	mov	r3, r0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	40022000 	.word	0x40022000
 8007524:	40021000 	.word	0x40021000
 8007528:	04c4b400 	.word	0x04c4b400
 800752c:	08013018 	.word	0x08013018
 8007530:	20000000 	.word	0x20000000
 8007534:	20000004 	.word	0x20000004

08007538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800753e:	4b2c      	ldr	r3, [pc, #176]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 030c 	and.w	r3, r3, #12
 8007546:	2b04      	cmp	r3, #4
 8007548:	d102      	bne.n	8007550 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800754a:	4b2a      	ldr	r3, [pc, #168]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	e047      	b.n	80075e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007550:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 030c 	and.w	r3, r3, #12
 8007558:	2b08      	cmp	r3, #8
 800755a:	d102      	bne.n	8007562 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800755c:	4b26      	ldr	r3, [pc, #152]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	e03e      	b.n	80075e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007562:	4b23      	ldr	r3, [pc, #140]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 030c 	and.w	r3, r3, #12
 800756a:	2b0c      	cmp	r3, #12
 800756c:	d136      	bne.n	80075dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800756e:	4b20      	ldr	r3, [pc, #128]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007578:	4b1d      	ldr	r3, [pc, #116]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	091b      	lsrs	r3, r3, #4
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	3301      	adds	r3, #1
 8007584:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b03      	cmp	r3, #3
 800758a:	d10c      	bne.n	80075a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800758c:	4a1a      	ldr	r2, [pc, #104]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	fbb2 f3f3 	udiv	r3, r2, r3
 8007594:	4a16      	ldr	r2, [pc, #88]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007596:	68d2      	ldr	r2, [r2, #12]
 8007598:	0a12      	lsrs	r2, r2, #8
 800759a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	617b      	str	r3, [r7, #20]
      break;
 80075a4:	e00c      	b.n	80075c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075a6:	4a13      	ldr	r2, [pc, #76]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ae:	4a10      	ldr	r2, [pc, #64]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075b0:	68d2      	ldr	r2, [r2, #12]
 80075b2:	0a12      	lsrs	r2, r2, #8
 80075b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075b8:	fb02 f303 	mul.w	r3, r2, r3
 80075bc:	617b      	str	r3, [r7, #20]
      break;
 80075be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075c0:	4b0b      	ldr	r3, [pc, #44]	@ (80075f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	0e5b      	lsrs	r3, r3, #25
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	3301      	adds	r3, #1
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	e001      	b.n	80075e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80075e0:	693b      	ldr	r3, [r7, #16]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	40021000 	.word	0x40021000
 80075f4:	00f42400 	.word	0x00f42400
 80075f8:	007a1200 	.word	0x007a1200

080075fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007600:	4b03      	ldr	r3, [pc, #12]	@ (8007610 <HAL_RCC_GetHCLKFreq+0x14>)
 8007602:	681b      	ldr	r3, [r3, #0]
}
 8007604:	4618      	mov	r0, r3
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20000000 	.word	0x20000000

08007614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007618:	f7ff fff0 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 800761c:	4602      	mov	r2, r0
 800761e:	4b06      	ldr	r3, [pc, #24]	@ (8007638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	0a1b      	lsrs	r3, r3, #8
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	4904      	ldr	r1, [pc, #16]	@ (800763c <HAL_RCC_GetPCLK1Freq+0x28>)
 800762a:	5ccb      	ldrb	r3, [r1, r3]
 800762c:	f003 031f 	and.w	r3, r3, #31
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007634:	4618      	mov	r0, r3
 8007636:	bd80      	pop	{r7, pc}
 8007638:	40021000 	.word	0x40021000
 800763c:	08013028 	.word	0x08013028

08007640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007644:	f7ff ffda 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 8007648:	4602      	mov	r2, r0
 800764a:	4b06      	ldr	r3, [pc, #24]	@ (8007664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	0adb      	lsrs	r3, r3, #11
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	4904      	ldr	r1, [pc, #16]	@ (8007668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007656:	5ccb      	ldrb	r3, [r1, r3]
 8007658:	f003 031f 	and.w	r3, r3, #31
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007660:	4618      	mov	r0, r3
 8007662:	bd80      	pop	{r7, pc}
 8007664:	40021000 	.word	0x40021000
 8007668:	08013028 	.word	0x08013028

0800766c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	220f      	movs	r2, #15
 800767a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800767c:	4b12      	ldr	r3, [pc, #72]	@ (80076c8 <HAL_RCC_GetClockConfig+0x5c>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f003 0203 	and.w	r2, r3, #3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007688:	4b0f      	ldr	r3, [pc, #60]	@ (80076c8 <HAL_RCC_GetClockConfig+0x5c>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007694:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <HAL_RCC_GetClockConfig+0x5c>)
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80076a0:	4b09      	ldr	r3, [pc, #36]	@ (80076c8 <HAL_RCC_GetClockConfig+0x5c>)
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	08db      	lsrs	r3, r3, #3
 80076a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80076ae:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <HAL_RCC_GetClockConfig+0x60>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 020f 	and.w	r2, r3, #15
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	601a      	str	r2, [r3, #0]
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40021000 	.word	0x40021000
 80076cc:	40022000 	.word	0x40022000

080076d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	091b      	lsrs	r3, r3, #4
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d10c      	bne.n	800770e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076f4:	4a17      	ldr	r2, [pc, #92]	@ (8007754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fc:	4a14      	ldr	r2, [pc, #80]	@ (8007750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076fe:	68d2      	ldr	r2, [r2, #12]
 8007700:	0a12      	lsrs	r2, r2, #8
 8007702:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007706:	fb02 f303 	mul.w	r3, r2, r3
 800770a:	617b      	str	r3, [r7, #20]
    break;
 800770c:	e00c      	b.n	8007728 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800770e:	4a12      	ldr	r2, [pc, #72]	@ (8007758 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	fbb2 f3f3 	udiv	r3, r2, r3
 8007716:	4a0e      	ldr	r2, [pc, #56]	@ (8007750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007718:	68d2      	ldr	r2, [r2, #12]
 800771a:	0a12      	lsrs	r2, r2, #8
 800771c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007720:	fb02 f303 	mul.w	r3, r2, r3
 8007724:	617b      	str	r3, [r7, #20]
    break;
 8007726:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007728:	4b09      	ldr	r3, [pc, #36]	@ (8007750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	0e5b      	lsrs	r3, r3, #25
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	3301      	adds	r3, #1
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007740:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007742:	687b      	ldr	r3, [r7, #4]
}
 8007744:	4618      	mov	r0, r3
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	40021000 	.word	0x40021000
 8007754:	007a1200 	.word	0x007a1200
 8007758:	00f42400 	.word	0x00f42400

0800775c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007764:	2300      	movs	r3, #0
 8007766:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007768:	2300      	movs	r3, #0
 800776a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 8098 	beq.w	80078aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800777a:	2300      	movs	r3, #0
 800777c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800777e:	4b43      	ldr	r3, [pc, #268]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10d      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800778a:	4b40      	ldr	r3, [pc, #256]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800778c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800778e:	4a3f      	ldr	r2, [pc, #252]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007794:	6593      	str	r3, [r2, #88]	@ 0x58
 8007796:	4b3d      	ldr	r3, [pc, #244]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800779e:	60bb      	str	r3, [r7, #8]
 80077a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077a2:	2301      	movs	r3, #1
 80077a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077a6:	4b3a      	ldr	r3, [pc, #232]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a39      	ldr	r2, [pc, #228]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077b2:	f7fa fe9d 	bl	80024f0 <HAL_GetTick>
 80077b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077b8:	e009      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077ba:	f7fa fe99 	bl	80024f0 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d902      	bls.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	74fb      	strb	r3, [r7, #19]
        break;
 80077cc:	e005      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077ce:	4b30      	ldr	r3, [pc, #192]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0ef      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80077da:	7cfb      	ldrb	r3, [r7, #19]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d159      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077e0:	4b2a      	ldr	r3, [pc, #168]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d01e      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d019      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077fc:	4b23      	ldr	r3, [pc, #140]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007808:	4b20      	ldr	r3, [pc, #128]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800780a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800780e:	4a1f      	ldr	r2, [pc, #124]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007818:	4b1c      	ldr	r3, [pc, #112]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781e:	4a1b      	ldr	r2, [pc, #108]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007828:	4a18      	ldr	r2, [pc, #96]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d016      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783a:	f7fa fe59 	bl	80024f0 <HAL_GetTick>
 800783e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007840:	e00b      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007842:	f7fa fe55 	bl	80024f0 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007850:	4293      	cmp	r3, r2
 8007852:	d902      	bls.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	74fb      	strb	r3, [r7, #19]
            break;
 8007858:	e006      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800785a:	4b0c      	ldr	r3, [pc, #48]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0ec      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007868:	7cfb      	ldrb	r3, [r7, #19]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10b      	bne.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800786e:	4b07      	ldr	r3, [pc, #28]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800787c:	4903      	ldr	r1, [pc, #12]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800787e:	4313      	orrs	r3, r2
 8007880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007884:	e008      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007886:	7cfb      	ldrb	r3, [r7, #19]
 8007888:	74bb      	strb	r3, [r7, #18]
 800788a:	e005      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800788c:	40021000 	.word	0x40021000
 8007890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	7cfb      	ldrb	r3, [r7, #19]
 8007896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007898:	7c7b      	ldrb	r3, [r7, #17]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d105      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800789e:	4ba7      	ldr	r3, [pc, #668]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a2:	4aa6      	ldr	r2, [pc, #664]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078b6:	4ba1      	ldr	r3, [pc, #644]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078bc:	f023 0203 	bic.w	r2, r3, #3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	499d      	ldr	r1, [pc, #628]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078d8:	4b98      	ldr	r3, [pc, #608]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078de:	f023 020c 	bic.w	r2, r3, #12
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	4995      	ldr	r1, [pc, #596]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0304 	and.w	r3, r3, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078fa:	4b90      	ldr	r3, [pc, #576]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007900:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	498c      	ldr	r1, [pc, #560]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800791c:	4b87      	ldr	r3, [pc, #540]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007922:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	4984      	ldr	r1, [pc, #528]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800793e:	4b7f      	ldr	r3, [pc, #508]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007944:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	497b      	ldr	r1, [pc, #492]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007960:	4b76      	ldr	r3, [pc, #472]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007966:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	4973      	ldr	r1, [pc, #460]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007982:	4b6e      	ldr	r3, [pc, #440]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007988:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	496a      	ldr	r1, [pc, #424]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007992:	4313      	orrs	r3, r2
 8007994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079a4:	4b65      	ldr	r3, [pc, #404]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	4962      	ldr	r1, [pc, #392]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079c6:	4b5d      	ldr	r3, [pc, #372]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	4959      	ldr	r1, [pc, #356]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079e8:	4b54      	ldr	r3, [pc, #336]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ee:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f6:	4951      	ldr	r1, [pc, #324]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d015      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a18:	4948      	ldr	r1, [pc, #288]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a28:	d105      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a2a:	4b44      	ldr	r3, [pc, #272]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	4a43      	ldr	r2, [pc, #268]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a34:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d015      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a42:	4b3e      	ldr	r3, [pc, #248]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a50:	493a      	ldr	r1, [pc, #232]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a60:	d105      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a62:	4b36      	ldr	r3, [pc, #216]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	4a35      	ldr	r2, [pc, #212]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a6c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d015      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a7a:	4b30      	ldr	r3, [pc, #192]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a80:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a88:	492c      	ldr	r1, [pc, #176]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a98:	d105      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a9a:	4b28      	ldr	r3, [pc, #160]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	4a27      	ldr	r2, [pc, #156]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aa4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d015      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ab2:	4b22      	ldr	r3, [pc, #136]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac0:	491e      	ldr	r1, [pc, #120]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007acc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ad0:	d105      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	4a19      	ldr	r2, [pc, #100]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007adc:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d015      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007aea:	4b14      	ldr	r3, [pc, #80]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af8:	4910      	ldr	r1, [pc, #64]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b08:	d105      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b14:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d018      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b22:	4b06      	ldr	r3, [pc, #24]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b28:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b30:	4902      	ldr	r1, [pc, #8]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	e001      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007b3c:	40021000 	.word	0x40021000
 8007b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b46:	d105      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b48:	4b21      	ldr	r3, [pc, #132]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	4a20      	ldr	r2, [pc, #128]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b52:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d015      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007b60:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b66:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6e:	4918      	ldr	r1, [pc, #96]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b7e:	d105      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b80:	4b13      	ldr	r3, [pc, #76]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	4a12      	ldr	r2, [pc, #72]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b8a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d015      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b98:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ba6:	490a      	ldr	r1, [pc, #40]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bb6:	d105      	bne.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bb8:	4b05      	ldr	r3, [pc, #20]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	4a04      	ldr	r2, [pc, #16]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007bc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40021000 	.word	0x40021000

08007bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e049      	b.n	8007c7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d106      	bne.n	8007c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f841 	bl	8007c82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	4619      	mov	r1, r3
 8007c12:	4610      	mov	r0, r2
 8007c14:	f000 fa28 	bl	8008068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
	...

08007c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d001      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e04f      	b.n	8007d50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0201 	orr.w	r2, r2, #1
 8007cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a23      	ldr	r2, [pc, #140]	@ (8007d5c <HAL_TIM_Base_Start_IT+0xc4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d01d      	beq.n	8007d0e <HAL_TIM_Base_Start_IT+0x76>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cda:	d018      	beq.n	8007d0e <HAL_TIM_Base_Start_IT+0x76>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d60 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d013      	beq.n	8007d0e <HAL_TIM_Base_Start_IT+0x76>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a1e      	ldr	r2, [pc, #120]	@ (8007d64 <HAL_TIM_Base_Start_IT+0xcc>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00e      	beq.n	8007d0e <HAL_TIM_Base_Start_IT+0x76>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d009      	beq.n	8007d0e <HAL_TIM_Base_Start_IT+0x76>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8007d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d004      	beq.n	8007d0e <HAL_TIM_Base_Start_IT+0x76>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a19      	ldr	r2, [pc, #100]	@ (8007d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d115      	bne.n	8007d3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	4b17      	ldr	r3, [pc, #92]	@ (8007d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b06      	cmp	r3, #6
 8007d1e:	d015      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0xb4>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d26:	d011      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0201 	orr.w	r2, r2, #1
 8007d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d38:	e008      	b.n	8007d4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0201 	orr.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	e000      	b.n	8007d4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	40012c00 	.word	0x40012c00
 8007d60:	40000400 	.word	0x40000400
 8007d64:	40000800 	.word	0x40000800
 8007d68:	40013400 	.word	0x40013400
 8007d6c:	40014000 	.word	0x40014000
 8007d70:	40015000 	.word	0x40015000
 8007d74:	00010007 	.word	0x00010007

08007d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d020      	beq.n	8007ddc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01b      	beq.n	8007ddc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0202 	mvn.w	r2, #2
 8007dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f931 	bl	800802a <HAL_TIM_IC_CaptureCallback>
 8007dc8:	e005      	b.n	8007dd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f923 	bl	8008016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f934 	bl	800803e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d020      	beq.n	8007e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01b      	beq.n	8007e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f06f 0204 	mvn.w	r2, #4
 8007df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f90b 	bl	800802a <HAL_TIM_IC_CaptureCallback>
 8007e14:	e005      	b.n	8007e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f8fd 	bl	8008016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f90e 	bl	800803e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d020      	beq.n	8007e74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d01b      	beq.n	8007e74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0208 	mvn.w	r2, #8
 8007e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2204      	movs	r2, #4
 8007e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f8e5 	bl	800802a <HAL_TIM_IC_CaptureCallback>
 8007e60:	e005      	b.n	8007e6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f8d7 	bl	8008016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f8e8 	bl	800803e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d020      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f003 0310 	and.w	r3, r3, #16
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01b      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0210 	mvn.w	r2, #16
 8007e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2208      	movs	r2, #8
 8007e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f8bf 	bl	800802a <HAL_TIM_IC_CaptureCallback>
 8007eac:	e005      	b.n	8007eba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f8b1 	bl	8008016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f8c2 	bl	800803e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00c      	beq.n	8007ee4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d007      	beq.n	8007ee4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f06f 0201 	mvn.w	r2, #1
 8007edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7f9 ff86 	bl	8001df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00c      	beq.n	8007f12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d007      	beq.n	8007f12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f95f 	bl	80081d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00c      	beq.n	8007f36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d007      	beq.n	8007f36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f957 	bl	80081e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00c      	beq.n	8007f5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f87c 	bl	8008052 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00c      	beq.n	8007f7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d007      	beq.n	8007f7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f06f 0220 	mvn.w	r2, #32
 8007f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f91f 	bl	80081bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00c      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f92b 	bl	80081f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00c      	beq.n	8007fc6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d007      	beq.n	8007fc6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f923 	bl	800820c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00c      	beq.n	8007fea <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d007      	beq.n	8007fea <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f91b 	bl	8008220 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00c      	beq.n	800800e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f913 	bl	8008234 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800805a:	bf00      	nop
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
	...

08008068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a48      	ldr	r2, [pc, #288]	@ (800819c <TIM_Base_SetConfig+0x134>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d013      	beq.n	80080a8 <TIM_Base_SetConfig+0x40>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008086:	d00f      	beq.n	80080a8 <TIM_Base_SetConfig+0x40>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a45      	ldr	r2, [pc, #276]	@ (80081a0 <TIM_Base_SetConfig+0x138>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00b      	beq.n	80080a8 <TIM_Base_SetConfig+0x40>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a44      	ldr	r2, [pc, #272]	@ (80081a4 <TIM_Base_SetConfig+0x13c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d007      	beq.n	80080a8 <TIM_Base_SetConfig+0x40>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a43      	ldr	r2, [pc, #268]	@ (80081a8 <TIM_Base_SetConfig+0x140>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d003      	beq.n	80080a8 <TIM_Base_SetConfig+0x40>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a42      	ldr	r2, [pc, #264]	@ (80081ac <TIM_Base_SetConfig+0x144>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d108      	bne.n	80080ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a37      	ldr	r2, [pc, #220]	@ (800819c <TIM_Base_SetConfig+0x134>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d01f      	beq.n	8008102 <TIM_Base_SetConfig+0x9a>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c8:	d01b      	beq.n	8008102 <TIM_Base_SetConfig+0x9a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a34      	ldr	r2, [pc, #208]	@ (80081a0 <TIM_Base_SetConfig+0x138>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d017      	beq.n	8008102 <TIM_Base_SetConfig+0x9a>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a33      	ldr	r2, [pc, #204]	@ (80081a4 <TIM_Base_SetConfig+0x13c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d013      	beq.n	8008102 <TIM_Base_SetConfig+0x9a>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a32      	ldr	r2, [pc, #200]	@ (80081a8 <TIM_Base_SetConfig+0x140>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00f      	beq.n	8008102 <TIM_Base_SetConfig+0x9a>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a32      	ldr	r2, [pc, #200]	@ (80081b0 <TIM_Base_SetConfig+0x148>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00b      	beq.n	8008102 <TIM_Base_SetConfig+0x9a>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a31      	ldr	r2, [pc, #196]	@ (80081b4 <TIM_Base_SetConfig+0x14c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d007      	beq.n	8008102 <TIM_Base_SetConfig+0x9a>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a30      	ldr	r2, [pc, #192]	@ (80081b8 <TIM_Base_SetConfig+0x150>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d003      	beq.n	8008102 <TIM_Base_SetConfig+0x9a>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a2b      	ldr	r2, [pc, #172]	@ (80081ac <TIM_Base_SetConfig+0x144>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d108      	bne.n	8008114 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a18      	ldr	r2, [pc, #96]	@ (800819c <TIM_Base_SetConfig+0x134>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d013      	beq.n	8008168 <TIM_Base_SetConfig+0x100>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a19      	ldr	r2, [pc, #100]	@ (80081a8 <TIM_Base_SetConfig+0x140>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00f      	beq.n	8008168 <TIM_Base_SetConfig+0x100>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a19      	ldr	r2, [pc, #100]	@ (80081b0 <TIM_Base_SetConfig+0x148>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00b      	beq.n	8008168 <TIM_Base_SetConfig+0x100>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a18      	ldr	r2, [pc, #96]	@ (80081b4 <TIM_Base_SetConfig+0x14c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d007      	beq.n	8008168 <TIM_Base_SetConfig+0x100>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a17      	ldr	r2, [pc, #92]	@ (80081b8 <TIM_Base_SetConfig+0x150>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_Base_SetConfig+0x100>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a12      	ldr	r2, [pc, #72]	@ (80081ac <TIM_Base_SetConfig+0x144>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d103      	bne.n	8008170 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	691a      	ldr	r2, [r3, #16]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b01      	cmp	r3, #1
 8008180:	d105      	bne.n	800818e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f023 0201 	bic.w	r2, r3, #1
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	611a      	str	r2, [r3, #16]
  }
}
 800818e:	bf00      	nop
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40012c00 	.word	0x40012c00
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800
 80081a8:	40013400 	.word	0x40013400
 80081ac:	40015000 	.word	0x40015000
 80081b0:	40014000 	.word	0x40014000
 80081b4:	40014400 	.word	0x40014400
 80081b8:	40014800 	.word	0x40014800

080081bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e042      	b.n	80082e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008260:	2b00      	cmp	r3, #0
 8008262:	d106      	bne.n	8008272 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7f9 ff0b 	bl	8002088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2224      	movs	r2, #36	@ 0x24
 8008276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0201 	bic.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fb24 	bl	80088e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f825 	bl	80082e8 <UART_SetConfig>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d101      	bne.n	80082a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e01b      	b.n	80082e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fba3 	bl	8008a24 <UART_CheckIdleState>
 80082de:	4603      	mov	r3, r0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082ec:	b08c      	sub	sp, #48	@ 0x30
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	431a      	orrs	r2, r3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	431a      	orrs	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	4313      	orrs	r3, r2
 800830e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4baa      	ldr	r3, [pc, #680]	@ (80085c0 <UART_SetConfig+0x2d8>)
 8008318:	4013      	ands	r3, r2
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008320:	430b      	orrs	r3, r1
 8008322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a9f      	ldr	r2, [pc, #636]	@ (80085c4 <UART_SetConfig+0x2dc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d004      	beq.n	8008354 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008350:	4313      	orrs	r3, r2
 8008352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800835e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008368:	430b      	orrs	r3, r1
 800836a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	f023 010f 	bic.w	r1, r3, #15
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a90      	ldr	r2, [pc, #576]	@ (80085c8 <UART_SetConfig+0x2e0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d125      	bne.n	80083d8 <UART_SetConfig+0xf0>
 800838c:	4b8f      	ldr	r3, [pc, #572]	@ (80085cc <UART_SetConfig+0x2e4>)
 800838e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	2b03      	cmp	r3, #3
 8008398:	d81a      	bhi.n	80083d0 <UART_SetConfig+0xe8>
 800839a:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <UART_SetConfig+0xb8>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083b1 	.word	0x080083b1
 80083a4:	080083c1 	.word	0x080083c1
 80083a8:	080083b9 	.word	0x080083b9
 80083ac:	080083c9 	.word	0x080083c9
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b6:	e116      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80083b8:	2302      	movs	r3, #2
 80083ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083be:	e112      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80083c0:	2304      	movs	r3, #4
 80083c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c6:	e10e      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80083c8:	2308      	movs	r3, #8
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ce:	e10a      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80083d0:	2310      	movs	r3, #16
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d6:	e106      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a7c      	ldr	r2, [pc, #496]	@ (80085d0 <UART_SetConfig+0x2e8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d138      	bne.n	8008454 <UART_SetConfig+0x16c>
 80083e2:	4b7a      	ldr	r3, [pc, #488]	@ (80085cc <UART_SetConfig+0x2e4>)
 80083e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e8:	f003 030c 	and.w	r3, r3, #12
 80083ec:	2b0c      	cmp	r3, #12
 80083ee:	d82d      	bhi.n	800844c <UART_SetConfig+0x164>
 80083f0:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <UART_SetConfig+0x110>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	0800842d 	.word	0x0800842d
 80083fc:	0800844d 	.word	0x0800844d
 8008400:	0800844d 	.word	0x0800844d
 8008404:	0800844d 	.word	0x0800844d
 8008408:	0800843d 	.word	0x0800843d
 800840c:	0800844d 	.word	0x0800844d
 8008410:	0800844d 	.word	0x0800844d
 8008414:	0800844d 	.word	0x0800844d
 8008418:	08008435 	.word	0x08008435
 800841c:	0800844d 	.word	0x0800844d
 8008420:	0800844d 	.word	0x0800844d
 8008424:	0800844d 	.word	0x0800844d
 8008428:	08008445 	.word	0x08008445
 800842c:	2300      	movs	r3, #0
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008432:	e0d8      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008434:	2302      	movs	r3, #2
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800843a:	e0d4      	b.n	80085e6 <UART_SetConfig+0x2fe>
 800843c:	2304      	movs	r3, #4
 800843e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008442:	e0d0      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008444:	2308      	movs	r3, #8
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800844a:	e0cc      	b.n	80085e6 <UART_SetConfig+0x2fe>
 800844c:	2310      	movs	r3, #16
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008452:	e0c8      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a5e      	ldr	r2, [pc, #376]	@ (80085d4 <UART_SetConfig+0x2ec>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d125      	bne.n	80084aa <UART_SetConfig+0x1c2>
 800845e:	4b5b      	ldr	r3, [pc, #364]	@ (80085cc <UART_SetConfig+0x2e4>)
 8008460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008464:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008468:	2b30      	cmp	r3, #48	@ 0x30
 800846a:	d016      	beq.n	800849a <UART_SetConfig+0x1b2>
 800846c:	2b30      	cmp	r3, #48	@ 0x30
 800846e:	d818      	bhi.n	80084a2 <UART_SetConfig+0x1ba>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d00a      	beq.n	800848a <UART_SetConfig+0x1a2>
 8008474:	2b20      	cmp	r3, #32
 8008476:	d814      	bhi.n	80084a2 <UART_SetConfig+0x1ba>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <UART_SetConfig+0x19a>
 800847c:	2b10      	cmp	r3, #16
 800847e:	d008      	beq.n	8008492 <UART_SetConfig+0x1aa>
 8008480:	e00f      	b.n	80084a2 <UART_SetConfig+0x1ba>
 8008482:	2300      	movs	r3, #0
 8008484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008488:	e0ad      	b.n	80085e6 <UART_SetConfig+0x2fe>
 800848a:	2302      	movs	r3, #2
 800848c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008490:	e0a9      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008492:	2304      	movs	r3, #4
 8008494:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008498:	e0a5      	b.n	80085e6 <UART_SetConfig+0x2fe>
 800849a:	2308      	movs	r3, #8
 800849c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084a0:	e0a1      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084a2:	2310      	movs	r3, #16
 80084a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084a8:	e09d      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a4a      	ldr	r2, [pc, #296]	@ (80085d8 <UART_SetConfig+0x2f0>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d125      	bne.n	8008500 <UART_SetConfig+0x218>
 80084b4:	4b45      	ldr	r3, [pc, #276]	@ (80085cc <UART_SetConfig+0x2e4>)
 80084b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80084be:	2bc0      	cmp	r3, #192	@ 0xc0
 80084c0:	d016      	beq.n	80084f0 <UART_SetConfig+0x208>
 80084c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80084c4:	d818      	bhi.n	80084f8 <UART_SetConfig+0x210>
 80084c6:	2b80      	cmp	r3, #128	@ 0x80
 80084c8:	d00a      	beq.n	80084e0 <UART_SetConfig+0x1f8>
 80084ca:	2b80      	cmp	r3, #128	@ 0x80
 80084cc:	d814      	bhi.n	80084f8 <UART_SetConfig+0x210>
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d002      	beq.n	80084d8 <UART_SetConfig+0x1f0>
 80084d2:	2b40      	cmp	r3, #64	@ 0x40
 80084d4:	d008      	beq.n	80084e8 <UART_SetConfig+0x200>
 80084d6:	e00f      	b.n	80084f8 <UART_SetConfig+0x210>
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084de:	e082      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084e0:	2302      	movs	r3, #2
 80084e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084e6:	e07e      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084e8:	2304      	movs	r3, #4
 80084ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ee:	e07a      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084f6:	e076      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084fe:	e072      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a35      	ldr	r2, [pc, #212]	@ (80085dc <UART_SetConfig+0x2f4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d12a      	bne.n	8008560 <UART_SetConfig+0x278>
 800850a:	4b30      	ldr	r3, [pc, #192]	@ (80085cc <UART_SetConfig+0x2e4>)
 800850c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008518:	d01a      	beq.n	8008550 <UART_SetConfig+0x268>
 800851a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800851e:	d81b      	bhi.n	8008558 <UART_SetConfig+0x270>
 8008520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008524:	d00c      	beq.n	8008540 <UART_SetConfig+0x258>
 8008526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800852a:	d815      	bhi.n	8008558 <UART_SetConfig+0x270>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <UART_SetConfig+0x250>
 8008530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008534:	d008      	beq.n	8008548 <UART_SetConfig+0x260>
 8008536:	e00f      	b.n	8008558 <UART_SetConfig+0x270>
 8008538:	2300      	movs	r3, #0
 800853a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800853e:	e052      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008540:	2302      	movs	r3, #2
 8008542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008546:	e04e      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008548:	2304      	movs	r3, #4
 800854a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800854e:	e04a      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008550:	2308      	movs	r3, #8
 8008552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008556:	e046      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008558:	2310      	movs	r3, #16
 800855a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800855e:	e042      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a17      	ldr	r2, [pc, #92]	@ (80085c4 <UART_SetConfig+0x2dc>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d13a      	bne.n	80085e0 <UART_SetConfig+0x2f8>
 800856a:	4b18      	ldr	r3, [pc, #96]	@ (80085cc <UART_SetConfig+0x2e4>)
 800856c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008578:	d01a      	beq.n	80085b0 <UART_SetConfig+0x2c8>
 800857a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800857e:	d81b      	bhi.n	80085b8 <UART_SetConfig+0x2d0>
 8008580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008584:	d00c      	beq.n	80085a0 <UART_SetConfig+0x2b8>
 8008586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800858a:	d815      	bhi.n	80085b8 <UART_SetConfig+0x2d0>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <UART_SetConfig+0x2b0>
 8008590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008594:	d008      	beq.n	80085a8 <UART_SetConfig+0x2c0>
 8008596:	e00f      	b.n	80085b8 <UART_SetConfig+0x2d0>
 8008598:	2300      	movs	r3, #0
 800859a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800859e:	e022      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80085a0:	2302      	movs	r3, #2
 80085a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085a6:	e01e      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80085a8:	2304      	movs	r3, #4
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085ae:	e01a      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80085b0:	2308      	movs	r3, #8
 80085b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085b6:	e016      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80085b8:	2310      	movs	r3, #16
 80085ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085be:	e012      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80085c0:	cfff69f3 	.word	0xcfff69f3
 80085c4:	40008000 	.word	0x40008000
 80085c8:	40013800 	.word	0x40013800
 80085cc:	40021000 	.word	0x40021000
 80085d0:	40004400 	.word	0x40004400
 80085d4:	40004800 	.word	0x40004800
 80085d8:	40004c00 	.word	0x40004c00
 80085dc:	40005000 	.word	0x40005000
 80085e0:	2310      	movs	r3, #16
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4aae      	ldr	r2, [pc, #696]	@ (80088a4 <UART_SetConfig+0x5bc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	f040 8097 	bne.w	8008720 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d823      	bhi.n	8008642 <UART_SetConfig+0x35a>
 80085fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008600 <UART_SetConfig+0x318>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	08008625 	.word	0x08008625
 8008604:	08008643 	.word	0x08008643
 8008608:	0800862d 	.word	0x0800862d
 800860c:	08008643 	.word	0x08008643
 8008610:	08008633 	.word	0x08008633
 8008614:	08008643 	.word	0x08008643
 8008618:	08008643 	.word	0x08008643
 800861c:	08008643 	.word	0x08008643
 8008620:	0800863b 	.word	0x0800863b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008624:	f7fe fff6 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 8008628:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800862a:	e010      	b.n	800864e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800862c:	4b9e      	ldr	r3, [pc, #632]	@ (80088a8 <UART_SetConfig+0x5c0>)
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008630:	e00d      	b.n	800864e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008632:	f7fe ff81 	bl	8007538 <HAL_RCC_GetSysClockFreq>
 8008636:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008638:	e009      	b.n	800864e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800863a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800863e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008640:	e005      	b.n	800864e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800864c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 8130 	beq.w	80088b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865a:	4a94      	ldr	r2, [pc, #592]	@ (80088ac <UART_SetConfig+0x5c4>)
 800865c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008660:	461a      	mov	r2, r3
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	fbb3 f3f2 	udiv	r3, r3, r2
 8008668:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	4413      	add	r3, r2
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	429a      	cmp	r2, r3
 8008678:	d305      	bcc.n	8008686 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	429a      	cmp	r2, r3
 8008684:	d903      	bls.n	800868e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800868c:	e113      	b.n	80088b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008690:	2200      	movs	r2, #0
 8008692:	60bb      	str	r3, [r7, #8]
 8008694:	60fa      	str	r2, [r7, #12]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	4a84      	ldr	r2, [pc, #528]	@ (80088ac <UART_SetConfig+0x5c4>)
 800869c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2200      	movs	r2, #0
 80086a4:	603b      	str	r3, [r7, #0]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086b0:	f7f8 faf2 	bl	8000c98 <__aeabi_uldivmod>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4610      	mov	r0, r2
 80086ba:	4619      	mov	r1, r3
 80086bc:	f04f 0200 	mov.w	r2, #0
 80086c0:	f04f 0300 	mov.w	r3, #0
 80086c4:	020b      	lsls	r3, r1, #8
 80086c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086ca:	0202      	lsls	r2, r0, #8
 80086cc:	6979      	ldr	r1, [r7, #20]
 80086ce:	6849      	ldr	r1, [r1, #4]
 80086d0:	0849      	lsrs	r1, r1, #1
 80086d2:	2000      	movs	r0, #0
 80086d4:	460c      	mov	r4, r1
 80086d6:	4605      	mov	r5, r0
 80086d8:	eb12 0804 	adds.w	r8, r2, r4
 80086dc:	eb43 0905 	adc.w	r9, r3, r5
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	469a      	mov	sl, r3
 80086e8:	4693      	mov	fp, r2
 80086ea:	4652      	mov	r2, sl
 80086ec:	465b      	mov	r3, fp
 80086ee:	4640      	mov	r0, r8
 80086f0:	4649      	mov	r1, r9
 80086f2:	f7f8 fad1 	bl	8000c98 <__aeabi_uldivmod>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4613      	mov	r3, r2
 80086fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008704:	d308      	bcc.n	8008718 <UART_SetConfig+0x430>
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800870c:	d204      	bcs.n	8008718 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6a3a      	ldr	r2, [r7, #32]
 8008714:	60da      	str	r2, [r3, #12]
 8008716:	e0ce      	b.n	80088b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800871e:	e0ca      	b.n	80088b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008728:	d166      	bne.n	80087f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800872a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800872e:	2b08      	cmp	r3, #8
 8008730:	d827      	bhi.n	8008782 <UART_SetConfig+0x49a>
 8008732:	a201      	add	r2, pc, #4	@ (adr r2, 8008738 <UART_SetConfig+0x450>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	0800875d 	.word	0x0800875d
 800873c:	08008765 	.word	0x08008765
 8008740:	0800876d 	.word	0x0800876d
 8008744:	08008783 	.word	0x08008783
 8008748:	08008773 	.word	0x08008773
 800874c:	08008783 	.word	0x08008783
 8008750:	08008783 	.word	0x08008783
 8008754:	08008783 	.word	0x08008783
 8008758:	0800877b 	.word	0x0800877b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800875c:	f7fe ff5a 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 8008760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008762:	e014      	b.n	800878e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008764:	f7fe ff6c 	bl	8007640 <HAL_RCC_GetPCLK2Freq>
 8008768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800876a:	e010      	b.n	800878e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800876c:	4b4e      	ldr	r3, [pc, #312]	@ (80088a8 <UART_SetConfig+0x5c0>)
 800876e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008770:	e00d      	b.n	800878e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008772:	f7fe fee1 	bl	8007538 <HAL_RCC_GetSysClockFreq>
 8008776:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008778:	e009      	b.n	800878e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800877a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800877e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008780:	e005      	b.n	800878e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800878c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 8090 	beq.w	80088b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879a:	4a44      	ldr	r2, [pc, #272]	@ (80088ac <UART_SetConfig+0x5c4>)
 800879c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a0:	461a      	mov	r2, r3
 80087a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80087a8:	005a      	lsls	r2, r3, #1
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	441a      	add	r2, r3
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d916      	bls.n	80087f0 <UART_SetConfig+0x508>
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087c8:	d212      	bcs.n	80087f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f023 030f 	bic.w	r3, r3, #15
 80087d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	b29b      	uxth	r3, r3
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	b29a      	uxth	r2, r3
 80087e0:	8bfb      	ldrh	r3, [r7, #30]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	8bfa      	ldrh	r2, [r7, #30]
 80087ec:	60da      	str	r2, [r3, #12]
 80087ee:	e062      	b.n	80088b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80087f6:	e05e      	b.n	80088b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087fc:	2b08      	cmp	r3, #8
 80087fe:	d828      	bhi.n	8008852 <UART_SetConfig+0x56a>
 8008800:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <UART_SetConfig+0x520>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	0800882d 	.word	0x0800882d
 800880c:	08008835 	.word	0x08008835
 8008810:	0800883d 	.word	0x0800883d
 8008814:	08008853 	.word	0x08008853
 8008818:	08008843 	.word	0x08008843
 800881c:	08008853 	.word	0x08008853
 8008820:	08008853 	.word	0x08008853
 8008824:	08008853 	.word	0x08008853
 8008828:	0800884b 	.word	0x0800884b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800882c:	f7fe fef2 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 8008830:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008832:	e014      	b.n	800885e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008834:	f7fe ff04 	bl	8007640 <HAL_RCC_GetPCLK2Freq>
 8008838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800883a:	e010      	b.n	800885e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800883c:	4b1a      	ldr	r3, [pc, #104]	@ (80088a8 <UART_SetConfig+0x5c0>)
 800883e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008840:	e00d      	b.n	800885e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008842:	f7fe fe79 	bl	8007538 <HAL_RCC_GetSysClockFreq>
 8008846:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008848:	e009      	b.n	800885e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800884a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800884e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008850:	e005      	b.n	800885e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800885c:	bf00      	nop
    }

    if (pclk != 0U)
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d028      	beq.n	80088b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008868:	4a10      	ldr	r2, [pc, #64]	@ (80088ac <UART_SetConfig+0x5c4>)
 800886a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800886e:	461a      	mov	r2, r3
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	fbb3 f2f2 	udiv	r2, r3, r2
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	085b      	lsrs	r3, r3, #1
 800887c:	441a      	add	r2, r3
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	fbb2 f3f3 	udiv	r3, r2, r3
 8008886:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	2b0f      	cmp	r3, #15
 800888c:	d910      	bls.n	80088b0 <UART_SetConfig+0x5c8>
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008894:	d20c      	bcs.n	80088b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	b29a      	uxth	r2, r3
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60da      	str	r2, [r3, #12]
 80088a0:	e009      	b.n	80088b6 <UART_SetConfig+0x5ce>
 80088a2:	bf00      	nop
 80088a4:	40008000 	.word	0x40008000
 80088a8:	00f42400 	.word	0x00f42400
 80088ac:	08013040 	.word	0x08013040
      }
      else
      {
        ret = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2200      	movs	r2, #0
 80088d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80088d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3730      	adds	r7, #48	@ 0x30
 80088da:	46bd      	mov	sp, r7
 80088dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080088e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008974:	f003 0310 	and.w	r3, r3, #16
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01a      	beq.n	80089f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089de:	d10a      	bne.n	80089f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00a      	beq.n	8008a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	430a      	orrs	r2, r1
 8008a16:	605a      	str	r2, [r3, #4]
  }
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b098      	sub	sp, #96	@ 0x60
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a34:	f7f9 fd5c 	bl	80024f0 <HAL_GetTick>
 8008a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d12f      	bne.n	8008aa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a50:	2200      	movs	r2, #0
 8008a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f88e 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d022      	beq.n	8008aa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e6      	bne.n	8008a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e063      	b.n	8008b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0304 	and.w	r3, r3, #4
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	d149      	bne.n	8008b4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ab6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f857 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d03c      	beq.n	8008b4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8008af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e6      	bne.n	8008ad0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f023 0301 	bic.w	r3, r3, #1
 8008b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3308      	adds	r3, #8
 8008b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b22:	61fa      	str	r2, [r7, #28]
 8008b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e5      	bne.n	8008b02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e012      	b.n	8008b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3758      	adds	r7, #88	@ 0x58
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	4613      	mov	r3, r2
 8008b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b88:	e04f      	b.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d04b      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b92:	f7f9 fcad 	bl	80024f0 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d302      	bcc.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e04e      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0304 	and.w	r3, r3, #4
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d037      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b80      	cmp	r3, #128	@ 0x80
 8008bbe:	d034      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b40      	cmp	r3, #64	@ 0x40
 8008bc4:	d031      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	f003 0308 	and.w	r3, r3, #8
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	d110      	bne.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2208      	movs	r2, #8
 8008bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 f838 	bl	8008c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2208      	movs	r2, #8
 8008be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e029      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c04:	d111      	bne.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f81e 	bl	8008c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e00f      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69da      	ldr	r2, [r3, #28]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4013      	ands	r3, r2
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	bf0c      	ite	eq
 8008c3a:	2301      	moveq	r3, #1
 8008c3c:	2300      	movne	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d0a0      	beq.n	8008b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b095      	sub	sp, #84	@ 0x54
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c62:	e853 3f00 	ldrex	r3, [r3]
 8008c66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	461a      	mov	r2, r3
 8008c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e6      	bne.n	8008c5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3308      	adds	r3, #8
 8008c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ca2:	f023 0301 	bic.w	r3, r3, #1
 8008ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3308      	adds	r3, #8
 8008cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cb8:	e841 2300 	strex	r3, r2, [r1]
 8008cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e3      	bne.n	8008c8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d118      	bne.n	8008cfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f023 0310 	bic.w	r3, r3, #16
 8008ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cea:	61bb      	str	r3, [r7, #24]
 8008cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6979      	ldr	r1, [r7, #20]
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e6      	bne.n	8008ccc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d12:	bf00      	nop
 8008d14:	3754      	adds	r7, #84	@ 0x54
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b085      	sub	sp, #20
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e027      	b.n	8008d84 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2224      	movs	r2, #36	@ 0x24
 8008d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f022 0201 	bic.w	r2, r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2220      	movs	r2, #32
 8008d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d101      	bne.n	8008da8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e02d      	b.n	8008e04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2224      	movs	r2, #36	@ 0x24
 8008db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0201 	bic.w	r2, r2, #1
 8008dce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f84f 	bl	8008e88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d101      	bne.n	8008e24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e20:	2302      	movs	r3, #2
 8008e22:	e02d      	b.n	8008e80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2224      	movs	r2, #36	@ 0x24
 8008e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0201 	bic.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f811 	bl	8008e88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d108      	bne.n	8008eaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ea8:	e031      	b.n	8008f0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008eaa:	2308      	movs	r3, #8
 8008eac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008eae:	2308      	movs	r3, #8
 8008eb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	0e5b      	lsrs	r3, r3, #25
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	0f5b      	lsrs	r3, r3, #29
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	7b3a      	ldrb	r2, [r7, #12]
 8008ed6:	4911      	ldr	r1, [pc, #68]	@ (8008f1c <UARTEx_SetNbDataToProcess+0x94>)
 8008ed8:	5c8a      	ldrb	r2, [r1, r2]
 8008eda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ede:	7b3a      	ldrb	r2, [r7, #12]
 8008ee0:	490f      	ldr	r1, [pc, #60]	@ (8008f20 <UARTEx_SetNbDataToProcess+0x98>)
 8008ee2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	7b7a      	ldrb	r2, [r7, #13]
 8008ef4:	4909      	ldr	r1, [pc, #36]	@ (8008f1c <UARTEx_SetNbDataToProcess+0x94>)
 8008ef6:	5c8a      	ldrb	r2, [r1, r2]
 8008ef8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008efc:	7b7a      	ldrb	r2, [r7, #13]
 8008efe:	4908      	ldr	r1, [pc, #32]	@ (8008f20 <UARTEx_SetNbDataToProcess+0x98>)
 8008f00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f02:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008f0e:	bf00      	nop
 8008f10:	3714      	adds	r7, #20
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	08013058 	.word	0x08013058
 8008f20:	08013060 	.word	0x08013060

08008f24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f34:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008f38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f5a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008f5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	43db      	mvns	r3, r3
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	4013      	ands	r3, r2
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	1d3b      	adds	r3, r7, #4
 8008f92:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b0a7      	sub	sp, #156	@ 0x9c
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fea:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	78db      	ldrb	r3, [r3, #3]
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d81f      	bhi.n	8009036 <USB_ActivateEndpoint+0x72>
 8008ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ffc <USB_ActivateEndpoint+0x38>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	0800900d 	.word	0x0800900d
 8009000:	08009029 	.word	0x08009029
 8009004:	0800903f 	.word	0x0800903f
 8009008:	0800901b 	.word	0x0800901b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800900c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009010:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009014:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009018:	e012      	b.n	8009040 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800901a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800901e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009022:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009026:	e00b      	b.n	8009040 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009028:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800902c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009030:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009034:	e004      	b.n	8009040 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800903c:	e000      	b.n	8009040 <USB_ActivateEndpoint+0x7c>
      break;
 800903e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	441a      	add	r2, r3
 800904a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800904e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800905a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800905e:	b29b      	uxth	r3, r3
 8009060:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	b21b      	sxth	r3, r3
 8009072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907a:	b21a      	sxth	r2, r3
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	b21b      	sxth	r3, r3
 8009082:	4313      	orrs	r3, r2
 8009084:	b21b      	sxth	r3, r3
 8009086:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	441a      	add	r2, r3
 8009094:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009098:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800909c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	7b1b      	ldrb	r3, [r3, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f040 8180 	bne.w	80093b6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	785b      	ldrb	r3, [r3, #1]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 8084 	beq.w	80091c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	61bb      	str	r3, [r7, #24]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	4413      	add	r3, r2
 80090d2:	61bb      	str	r3, [r7, #24]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	00da      	lsls	r2, r3, #3
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	88db      	ldrh	r3, [r3, #6]
 80090e8:	085b      	lsrs	r3, r3, #1
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	827b      	strh	r3, [r7, #18]
 8009102:	8a7b      	ldrh	r3, [r7, #18]
 8009104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01b      	beq.n	8009144 <USB_ActivateEndpoint+0x180>
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800911e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009122:	823b      	strh	r3, [r7, #16]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	441a      	add	r2, r3
 800912e:	8a3b      	ldrh	r3, [r7, #16]
 8009130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800913c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009140:	b29b      	uxth	r3, r3
 8009142:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	78db      	ldrb	r3, [r3, #3]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d020      	beq.n	800918e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	b29b      	uxth	r3, r3
 800915a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800915e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009162:	81bb      	strh	r3, [r7, #12]
 8009164:	89bb      	ldrh	r3, [r7, #12]
 8009166:	f083 0320 	eor.w	r3, r3, #32
 800916a:	81bb      	strh	r3, [r7, #12]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	441a      	add	r2, r3
 8009176:	89bb      	ldrh	r3, [r7, #12]
 8009178:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800917c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009188:	b29b      	uxth	r3, r3
 800918a:	8013      	strh	r3, [r2, #0]
 800918c:	e3f9      	b.n	8009982 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091a4:	81fb      	strh	r3, [r7, #14]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	441a      	add	r2, r3
 80091b0:	89fb      	ldrh	r3, [r7, #14]
 80091b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	8013      	strh	r3, [r2, #0]
 80091c6:	e3dc      	b.n	8009982 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	461a      	mov	r2, r3
 80091d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d8:	4413      	add	r3, r2
 80091da:	633b      	str	r3, [r7, #48]	@ 0x30
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	00da      	lsls	r2, r3, #3
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	4413      	add	r3, r2
 80091e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80091ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	88db      	ldrh	r3, [r3, #6]
 80091f0:	085b      	lsrs	r3, r3, #1
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009206:	b29b      	uxth	r3, r3
 8009208:	461a      	mov	r2, r3
 800920a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920c:	4413      	add	r3, r2
 800920e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	00da      	lsls	r2, r3, #3
 8009216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009218:	4413      	add	r3, r2
 800921a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800921e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	b29b      	uxth	r3, r3
 8009226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800922a:	b29a      	uxth	r2, r3
 800922c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10a      	bne.n	800924e <USB_ActivateEndpoint+0x28a>
 8009238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009246:	b29a      	uxth	r2, r3
 8009248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924a:	801a      	strh	r2, [r3, #0]
 800924c:	e041      	b.n	80092d2 <USB_ActivateEndpoint+0x30e>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b3e      	cmp	r3, #62	@ 0x3e
 8009254:	d81c      	bhi.n	8009290 <USB_ActivateEndpoint+0x2cc>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	085b      	lsrs	r3, r3, #1
 800925c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d004      	beq.n	8009276 <USB_ActivateEndpoint+0x2b2>
 800926c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009270:	3301      	adds	r3, #1
 8009272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	b29a      	uxth	r2, r3
 800927c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009280:	b29b      	uxth	r3, r3
 8009282:	029b      	lsls	r3, r3, #10
 8009284:	b29b      	uxth	r3, r3
 8009286:	4313      	orrs	r3, r2
 8009288:	b29a      	uxth	r2, r3
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	801a      	strh	r2, [r3, #0]
 800928e:	e020      	b.n	80092d2 <USB_ActivateEndpoint+0x30e>
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	095b      	lsrs	r3, r3, #5
 8009296:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f003 031f 	and.w	r3, r3, #31
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d104      	bne.n	80092b0 <USB_ActivateEndpoint+0x2ec>
 80092a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092aa:	3b01      	subs	r3, #1
 80092ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	029b      	lsls	r3, r3, #10
 80092be:	b29b      	uxth	r3, r3
 80092c0:	4313      	orrs	r3, r2
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80092e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80092e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d01b      	beq.n	8009322 <USB_ActivateEndpoint+0x35e>
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009300:	843b      	strh	r3, [r7, #32]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	441a      	add	r2, r3
 800930c:	8c3b      	ldrh	r3, [r7, #32]
 800930e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009312:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009316:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800931a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800931e:	b29b      	uxth	r3, r3
 8009320:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d124      	bne.n	8009374 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	b29b      	uxth	r3, r3
 8009338:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800933c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009340:	83bb      	strh	r3, [r7, #28]
 8009342:	8bbb      	ldrh	r3, [r7, #28]
 8009344:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009348:	83bb      	strh	r3, [r7, #28]
 800934a:	8bbb      	ldrh	r3, [r7, #28]
 800934c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009350:	83bb      	strh	r3, [r7, #28]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	441a      	add	r2, r3
 800935c:	8bbb      	ldrh	r3, [r7, #28]
 800935e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800936a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936e:	b29b      	uxth	r3, r3
 8009370:	8013      	strh	r3, [r2, #0]
 8009372:	e306      	b.n	8009982 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	b29b      	uxth	r3, r3
 8009382:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800938a:	83fb      	strh	r3, [r7, #30]
 800938c:	8bfb      	ldrh	r3, [r7, #30]
 800938e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009392:	83fb      	strh	r3, [r7, #30]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	441a      	add	r2, r3
 800939e:	8bfb      	ldrh	r3, [r7, #30]
 80093a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	8013      	strh	r3, [r2, #0]
 80093b4:	e2e5      	b.n	8009982 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	78db      	ldrb	r3, [r3, #3]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d11e      	bne.n	80093fc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093d4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	441a      	add	r2, r3
 80093e2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80093e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80093f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	8013      	strh	r3, [r2, #0]
 80093fa:	e01d      	b.n	8009438 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	b29b      	uxth	r3, r3
 800940a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800940e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009412:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	441a      	add	r2, r3
 8009420:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009424:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009428:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800942c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009434:	b29b      	uxth	r3, r3
 8009436:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009442:	b29b      	uxth	r3, r3
 8009444:	461a      	mov	r2, r3
 8009446:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009448:	4413      	add	r3, r2
 800944a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	00da      	lsls	r2, r3, #3
 8009452:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009454:	4413      	add	r3, r2
 8009456:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800945a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	891b      	ldrh	r3, [r3, #8]
 8009460:	085b      	lsrs	r3, r3, #1
 8009462:	b29b      	uxth	r3, r3
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	b29a      	uxth	r2, r3
 8009468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800946a:	801a      	strh	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009476:	b29b      	uxth	r3, r3
 8009478:	461a      	mov	r2, r3
 800947a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800947c:	4413      	add	r3, r2
 800947e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	00da      	lsls	r2, r3, #3
 8009486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009488:	4413      	add	r3, r2
 800948a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800948e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	895b      	ldrh	r3, [r3, #10]
 8009494:	085b      	lsrs	r3, r3, #1
 8009496:	b29b      	uxth	r3, r3
 8009498:	005b      	lsls	r3, r3, #1
 800949a:	b29a      	uxth	r2, r3
 800949c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800949e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	785b      	ldrb	r3, [r3, #1]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f040 81af 	bne.w	8009808 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80094ba:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80094be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d01d      	beq.n	8009502 <USB_ActivateEndpoint+0x53e>
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094dc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	441a      	add	r2, r3
 80094ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80094ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094fe:	b29b      	uxth	r3, r3
 8009500:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009512:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951a:	2b00      	cmp	r3, #0
 800951c:	d01d      	beq.n	800955a <USB_ActivateEndpoint+0x596>
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	b29b      	uxth	r3, r3
 800952c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009534:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	441a      	add	r2, r3
 8009542:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800954a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800954e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009552:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009556:	b29b      	uxth	r3, r3
 8009558:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d16b      	bne.n	800963a <USB_ActivateEndpoint+0x676>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800956c:	b29b      	uxth	r3, r3
 800956e:	461a      	mov	r2, r3
 8009570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009572:	4413      	add	r3, r2
 8009574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	00da      	lsls	r2, r3, #3
 800957c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800957e:	4413      	add	r3, r2
 8009580:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	b29b      	uxth	r3, r3
 800958c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009590:	b29a      	uxth	r2, r3
 8009592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009594:	801a      	strh	r2, [r3, #0]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10a      	bne.n	80095b4 <USB_ActivateEndpoint+0x5f0>
 800959e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095b0:	801a      	strh	r2, [r3, #0]
 80095b2:	e05d      	b.n	8009670 <USB_ActivateEndpoint+0x6ac>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80095ba:	d81c      	bhi.n	80095f6 <USB_ActivateEndpoint+0x632>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	085b      	lsrs	r3, r3, #1
 80095c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d004      	beq.n	80095dc <USB_ActivateEndpoint+0x618>
 80095d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095d6:	3301      	adds	r3, #1
 80095d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80095dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	029b      	lsls	r3, r3, #10
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	4313      	orrs	r3, r2
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f2:	801a      	strh	r2, [r3, #0]
 80095f4:	e03c      	b.n	8009670 <USB_ActivateEndpoint+0x6ac>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	095b      	lsrs	r3, r3, #5
 80095fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	f003 031f 	and.w	r3, r3, #31
 8009608:	2b00      	cmp	r3, #0
 800960a:	d104      	bne.n	8009616 <USB_ActivateEndpoint+0x652>
 800960c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009610:	3b01      	subs	r3, #1
 8009612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29a      	uxth	r2, r3
 800961c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009620:	b29b      	uxth	r3, r3
 8009622:	029b      	lsls	r3, r3, #10
 8009624:	b29b      	uxth	r3, r3
 8009626:	4313      	orrs	r3, r2
 8009628:	b29b      	uxth	r3, r3
 800962a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800962e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009632:	b29a      	uxth	r2, r3
 8009634:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009636:	801a      	strh	r2, [r3, #0]
 8009638:	e01a      	b.n	8009670 <USB_ActivateEndpoint+0x6ac>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	785b      	ldrb	r3, [r3, #1]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d116      	bne.n	8009670 <USB_ActivateEndpoint+0x6ac>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	657b      	str	r3, [r7, #84]	@ 0x54
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800964c:	b29b      	uxth	r3, r3
 800964e:	461a      	mov	r2, r3
 8009650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009652:	4413      	add	r3, r2
 8009654:	657b      	str	r3, [r7, #84]	@ 0x54
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	00da      	lsls	r2, r3, #3
 800965c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800965e:	4413      	add	r3, r2
 8009660:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009664:	653b      	str	r3, [r7, #80]	@ 0x50
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	b29a      	uxth	r2, r3
 800966c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800966e:	801a      	strh	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	647b      	str	r3, [r7, #68]	@ 0x44
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	785b      	ldrb	r3, [r3, #1]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d16b      	bne.n	8009754 <USB_ActivateEndpoint+0x790>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009686:	b29b      	uxth	r3, r3
 8009688:	461a      	mov	r2, r3
 800968a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800968c:	4413      	add	r3, r2
 800968e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	00da      	lsls	r2, r3, #3
 8009696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009698:	4413      	add	r3, r2
 800969a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800969e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ae:	801a      	strh	r2, [r3, #0]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <USB_ActivateEndpoint+0x70a>
 80096b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	801a      	strh	r2, [r3, #0]
 80096cc:	e05b      	b.n	8009786 <USB_ActivateEndpoint+0x7c2>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80096d4:	d81c      	bhi.n	8009710 <USB_ActivateEndpoint+0x74c>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	085b      	lsrs	r3, r3, #1
 80096dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d004      	beq.n	80096f6 <USB_ActivateEndpoint+0x732>
 80096ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096f0:	3301      	adds	r3, #1
 80096f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009700:	b29b      	uxth	r3, r3
 8009702:	029b      	lsls	r3, r3, #10
 8009704:	b29b      	uxth	r3, r3
 8009706:	4313      	orrs	r3, r2
 8009708:	b29a      	uxth	r2, r3
 800970a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970c:	801a      	strh	r2, [r3, #0]
 800970e:	e03a      	b.n	8009786 <USB_ActivateEndpoint+0x7c2>
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	095b      	lsrs	r3, r3, #5
 8009716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	f003 031f 	and.w	r3, r3, #31
 8009722:	2b00      	cmp	r3, #0
 8009724:	d104      	bne.n	8009730 <USB_ActivateEndpoint+0x76c>
 8009726:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800972a:	3b01      	subs	r3, #1
 800972c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29a      	uxth	r2, r3
 8009736:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800973a:	b29b      	uxth	r3, r3
 800973c:	029b      	lsls	r3, r3, #10
 800973e:	b29b      	uxth	r3, r3
 8009740:	4313      	orrs	r3, r2
 8009742:	b29b      	uxth	r3, r3
 8009744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800974c:	b29a      	uxth	r2, r3
 800974e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009750:	801a      	strh	r2, [r3, #0]
 8009752:	e018      	b.n	8009786 <USB_ActivateEndpoint+0x7c2>
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	785b      	ldrb	r3, [r3, #1]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d114      	bne.n	8009786 <USB_ActivateEndpoint+0x7c2>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009762:	b29b      	uxth	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009768:	4413      	add	r3, r2
 800976a:	647b      	str	r3, [r7, #68]	@ 0x44
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	00da      	lsls	r2, r3, #3
 8009772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009774:	4413      	add	r3, r2
 8009776:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800977a:	643b      	str	r3, [r7, #64]	@ 0x40
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	b29a      	uxth	r2, r3
 8009782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009784:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800979c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800979e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80097a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80097a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80097ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	441a      	add	r2, r3
 80097b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097e4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	441a      	add	r2, r3
 80097f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80097f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009802:	b29b      	uxth	r3, r3
 8009804:	8013      	strh	r3, [r2, #0]
 8009806:	e0bc      	b.n	8009982 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8009818:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800981c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d01d      	beq.n	8009860 <USB_ActivateEndpoint+0x89c>
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	881b      	ldrh	r3, [r3, #0]
 8009830:	b29b      	uxth	r3, r3
 8009832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800983a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	441a      	add	r2, r3
 8009848:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800984c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009854:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985c:	b29b      	uxth	r3, r3
 800985e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009870:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01d      	beq.n	80098b8 <USB_ActivateEndpoint+0x8f4>
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	b29b      	uxth	r3, r3
 800988a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800988e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009892:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	441a      	add	r2, r3
 80098a0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80098a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	78db      	ldrb	r3, [r3, #3]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d024      	beq.n	800990a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098d6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80098da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80098de:	f083 0320 	eor.w	r3, r3, #32
 80098e2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	441a      	add	r2, r3
 80098f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80098f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009904:	b29b      	uxth	r3, r3
 8009906:	8013      	strh	r3, [r2, #0]
 8009908:	e01d      	b.n	8009946 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	881b      	ldrh	r3, [r3, #0]
 8009916:	b29b      	uxth	r3, r3
 8009918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800991c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009920:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	441a      	add	r2, r3
 800992e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800993a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800993e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009942:	b29b      	uxth	r3, r3
 8009944:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800995c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	441a      	add	r2, r3
 800996a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800996e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800997a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800997e:	b29b      	uxth	r3, r3
 8009980:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009982:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8009986:	4618      	mov	r0, r3
 8009988:	379c      	adds	r7, #156	@ 0x9c
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop

08009994 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009994:	b480      	push	{r7}
 8009996:	b08d      	sub	sp, #52	@ 0x34
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	7b1b      	ldrb	r3, [r3, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f040 808e 	bne.w	8009ac4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	785b      	ldrb	r3, [r3, #1]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d044      	beq.n	8009a3a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	881b      	ldrh	r3, [r3, #0]
 80099bc:	81bb      	strh	r3, [r7, #12]
 80099be:	89bb      	ldrh	r3, [r7, #12]
 80099c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01b      	beq.n	8009a00 <USB_DeactivateEndpoint+0x6c>
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099de:	817b      	strh	r3, [r7, #10]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	441a      	add	r2, r3
 80099ea:	897b      	ldrh	r3, [r7, #10]
 80099ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a16:	813b      	strh	r3, [r7, #8]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	441a      	add	r2, r3
 8009a22:	893b      	ldrh	r3, [r7, #8]
 8009a24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	8013      	strh	r3, [r2, #0]
 8009a38:	e192      	b.n	8009d60 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	827b      	strh	r3, [r7, #18]
 8009a48:	8a7b      	ldrh	r3, [r7, #18]
 8009a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d01b      	beq.n	8009a8a <USB_DeactivateEndpoint+0xf6>
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a68:	823b      	strh	r3, [r7, #16]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	441a      	add	r2, r3
 8009a74:	8a3b      	ldrh	r3, [r7, #16]
 8009a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aa0:	81fb      	strh	r3, [r7, #14]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	441a      	add	r2, r3
 8009aac:	89fb      	ldrh	r3, [r7, #14]
 8009aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	8013      	strh	r3, [r2, #0]
 8009ac2:	e14d      	b.n	8009d60 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	785b      	ldrb	r3, [r3, #1]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f040 80a5 	bne.w	8009c18 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	843b      	strh	r3, [r7, #32]
 8009adc:	8c3b      	ldrh	r3, [r7, #32]
 8009ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d01b      	beq.n	8009b1e <USB_DeactivateEndpoint+0x18a>
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009afc:	83fb      	strh	r3, [r7, #30]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	441a      	add	r2, r3
 8009b08:	8bfb      	ldrh	r3, [r7, #30]
 8009b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	83bb      	strh	r3, [r7, #28]
 8009b2c:	8bbb      	ldrh	r3, [r7, #28]
 8009b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d01b      	beq.n	8009b6e <USB_DeactivateEndpoint+0x1da>
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4413      	add	r3, r2
 8009b40:	881b      	ldrh	r3, [r3, #0]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b4c:	837b      	strh	r3, [r7, #26]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	441a      	add	r2, r3
 8009b58:	8b7b      	ldrh	r3, [r7, #26]
 8009b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b84:	833b      	strh	r3, [r7, #24]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	441a      	add	r2, r3
 8009b90:	8b3b      	ldrh	r3, [r7, #24]
 8009b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bbc:	82fb      	strh	r3, [r7, #22]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	441a      	add	r2, r3
 8009bc8:	8afb      	ldrh	r3, [r7, #22]
 8009bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bf4:	82bb      	strh	r3, [r7, #20]
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	441a      	add	r2, r3
 8009c00:	8abb      	ldrh	r3, [r7, #20]
 8009c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	8013      	strh	r3, [r2, #0]
 8009c16:	e0a3      	b.n	8009d60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009c26:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d01b      	beq.n	8009c68 <USB_DeactivateEndpoint+0x2d4>
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c46:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	441a      	add	r2, r3
 8009c52:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009c76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d01b      	beq.n	8009cb8 <USB_DeactivateEndpoint+0x324>
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c96:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	441a      	add	r2, r3
 8009ca2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cb0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	441a      	add	r2, r3
 8009cda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d06:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	441a      	add	r2, r3
 8009d12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d3e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	441a      	add	r2, r3
 8009d4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3734      	adds	r7, #52	@ 0x34
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b0ac      	sub	sp, #176	@ 0xb0
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	785b      	ldrb	r3, [r3, #1]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	f040 84ca 	bne.w	800a716 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	699a      	ldr	r2, [r3, #24]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d904      	bls.n	8009d98 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d96:	e003      	b.n	8009da0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	7b1b      	ldrb	r3, [r3, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d122      	bne.n	8009dee <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	6959      	ldr	r1, [r3, #20]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	88da      	ldrh	r2, [r3, #6]
 8009db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 febd 	bl	800ab36 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	613b      	str	r3, [r7, #16]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	461a      	mov	r2, r3
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	4413      	add	r3, r2
 8009dce:	613b      	str	r3, [r7, #16]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	00da      	lsls	r2, r3, #3
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	801a      	strh	r2, [r3, #0]
 8009dea:	f000 bc6f 	b.w	800a6cc <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	78db      	ldrb	r3, [r3, #3]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	f040 831e 	bne.w	800a434 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	6a1a      	ldr	r2, [r3, #32]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	f240 82cf 	bls.w	800a3a4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e1c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	441a      	add	r2, r3
 8009e2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e36:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	6a1a      	ldr	r2, [r3, #32]
 8009e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e4a:	1ad2      	subs	r2, r2, r3
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	881b      	ldrh	r3, [r3, #0]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 814f 	beq.w	800a106 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	785b      	ldrb	r3, [r3, #1]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d16b      	bne.n	8009f4c <USB_EPStartXfer+0x1de>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e84:	4413      	add	r3, r2
 8009e86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	00da      	lsls	r2, r3, #3
 8009e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e90:	4413      	add	r3, r2
 8009e92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea6:	801a      	strh	r2, [r3, #0]
 8009ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10a      	bne.n	8009ec6 <USB_EPStartXfer+0x158>
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb2:	881b      	ldrh	r3, [r3, #0]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec2:	801a      	strh	r2, [r3, #0]
 8009ec4:	e05b      	b.n	8009f7e <USB_EPStartXfer+0x210>
 8009ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eca:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ecc:	d81c      	bhi.n	8009f08 <USB_EPStartXfer+0x19a>
 8009ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ed2:	085b      	lsrs	r3, r3, #1
 8009ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <USB_EPStartXfer+0x180>
 8009ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ee8:	3301      	adds	r3, #1
 8009eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	029b      	lsls	r3, r3, #10
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	4313      	orrs	r3, r2
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f04:	801a      	strh	r2, [r3, #0]
 8009f06:	e03a      	b.n	8009f7e <USB_EPStartXfer+0x210>
 8009f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f0c:	095b      	lsrs	r3, r3, #5
 8009f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f16:	f003 031f 	and.w	r3, r3, #31
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d104      	bne.n	8009f28 <USB_EPStartXfer+0x1ba>
 8009f1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f22:	3b01      	subs	r3, #1
 8009f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2a:	881b      	ldrh	r3, [r3, #0]
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	029b      	lsls	r3, r3, #10
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f48:	801a      	strh	r2, [r3, #0]
 8009f4a:	e018      	b.n	8009f7e <USB_EPStartXfer+0x210>
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	785b      	ldrb	r3, [r3, #1]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d114      	bne.n	8009f7e <USB_EPStartXfer+0x210>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f60:	4413      	add	r3, r2
 8009f62:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	00da      	lsls	r2, r3, #3
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	895b      	ldrh	r3, [r3, #10]
 8009f82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	6959      	ldr	r1, [r3, #20]
 8009f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fdce 	bl	800ab36 <USB_WritePMA>
            ep->xfer_buff += len;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	695a      	ldr	r2, [r3, #20]
 8009f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fa2:	441a      	add	r2, r3
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	6a1a      	ldr	r2, [r3, #32]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d907      	bls.n	8009fc4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	6a1a      	ldr	r2, [r3, #32]
 8009fb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fbc:	1ad2      	subs	r2, r2, r3
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	621a      	str	r2, [r3, #32]
 8009fc2:	e006      	b.n	8009fd2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d16b      	bne.n	800a0b2 <USB_EPStartXfer+0x344>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	61bb      	str	r3, [r7, #24]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	4413      	add	r3, r2
 8009fec:	61bb      	str	r3, [r7, #24]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	00da      	lsls	r2, r3, #3
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	b29b      	uxth	r3, r3
 800a004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a008:	b29a      	uxth	r2, r3
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	801a      	strh	r2, [r3, #0]
 800a00e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <USB_EPStartXfer+0x2be>
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a024:	b29a      	uxth	r2, r3
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	801a      	strh	r2, [r3, #0]
 800a02a:	e05d      	b.n	800a0e8 <USB_EPStartXfer+0x37a>
 800a02c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a030:	2b3e      	cmp	r3, #62	@ 0x3e
 800a032:	d81c      	bhi.n	800a06e <USB_EPStartXfer+0x300>
 800a034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a038:	085b      	lsrs	r3, r3, #1
 800a03a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a03e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d004      	beq.n	800a054 <USB_EPStartXfer+0x2e6>
 800a04a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a04e:	3301      	adds	r3, #1
 800a050:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	b29a      	uxth	r2, r3
 800a05a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a05e:	b29b      	uxth	r3, r3
 800a060:	029b      	lsls	r3, r3, #10
 800a062:	b29b      	uxth	r3, r3
 800a064:	4313      	orrs	r3, r2
 800a066:	b29a      	uxth	r2, r3
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	801a      	strh	r2, [r3, #0]
 800a06c:	e03c      	b.n	800a0e8 <USB_EPStartXfer+0x37a>
 800a06e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a072:	095b      	lsrs	r3, r3, #5
 800a074:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a07c:	f003 031f 	and.w	r3, r3, #31
 800a080:	2b00      	cmp	r3, #0
 800a082:	d104      	bne.n	800a08e <USB_EPStartXfer+0x320>
 800a084:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a088:	3b01      	subs	r3, #1
 800a08a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	b29a      	uxth	r2, r3
 800a094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a098:	b29b      	uxth	r3, r3
 800a09a:	029b      	lsls	r3, r3, #10
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	801a      	strh	r2, [r3, #0]
 800a0b0:	e01a      	b.n	800a0e8 <USB_EPStartXfer+0x37a>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	785b      	ldrb	r3, [r3, #1]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d116      	bne.n	800a0e8 <USB_EPStartXfer+0x37a>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	623b      	str	r3, [r7, #32]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	623b      	str	r3, [r7, #32]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	00da      	lsls	r2, r3, #3
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a0dc:	61fb      	str	r3, [r7, #28]
 800a0de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	891b      	ldrh	r3, [r3, #8]
 800a0ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	6959      	ldr	r1, [r3, #20]
 800a0f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fd19 	bl	800ab36 <USB_WritePMA>
 800a104:	e2e2      	b.n	800a6cc <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	785b      	ldrb	r3, [r3, #1]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d16b      	bne.n	800a1e6 <USB_EPStartXfer+0x478>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a118:	b29b      	uxth	r3, r3
 800a11a:	461a      	mov	r2, r3
 800a11c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a11e:	4413      	add	r3, r2
 800a120:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	00da      	lsls	r2, r3, #3
 800a128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a12a:	4413      	add	r3, r2
 800a12c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a130:	647b      	str	r3, [r7, #68]	@ 0x44
 800a132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	b29b      	uxth	r3, r3
 800a138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a140:	801a      	strh	r2, [r3, #0]
 800a142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10a      	bne.n	800a160 <USB_EPStartXfer+0x3f2>
 800a14a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a158:	b29a      	uxth	r2, r3
 800a15a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a15c:	801a      	strh	r2, [r3, #0]
 800a15e:	e05d      	b.n	800a21c <USB_EPStartXfer+0x4ae>
 800a160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a164:	2b3e      	cmp	r3, #62	@ 0x3e
 800a166:	d81c      	bhi.n	800a1a2 <USB_EPStartXfer+0x434>
 800a168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a16c:	085b      	lsrs	r3, r3, #1
 800a16e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d004      	beq.n	800a188 <USB_EPStartXfer+0x41a>
 800a17e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a182:	3301      	adds	r3, #1
 800a184:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a192:	b29b      	uxth	r3, r3
 800a194:	029b      	lsls	r3, r3, #10
 800a196:	b29b      	uxth	r3, r3
 800a198:	4313      	orrs	r3, r2
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a19e:	801a      	strh	r2, [r3, #0]
 800a1a0:	e03c      	b.n	800a21c <USB_EPStartXfer+0x4ae>
 800a1a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1a6:	095b      	lsrs	r3, r3, #5
 800a1a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1b0:	f003 031f 	and.w	r3, r3, #31
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d104      	bne.n	800a1c2 <USB_EPStartXfer+0x454>
 800a1b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	029b      	lsls	r3, r3, #10
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1e2:	801a      	strh	r2, [r3, #0]
 800a1e4:	e01a      	b.n	800a21c <USB_EPStartXfer+0x4ae>
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d116      	bne.n	800a21c <USB_EPStartXfer+0x4ae>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1fe:	4413      	add	r3, r2
 800a200:	653b      	str	r3, [r7, #80]	@ 0x50
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	00da      	lsls	r2, r3, #3
 800a208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a20a:	4413      	add	r3, r2
 800a20c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a216:	b29a      	uxth	r2, r3
 800a218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a21a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	891b      	ldrh	r3, [r3, #8]
 800a220:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	6959      	ldr	r1, [r3, #20]
 800a228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fc7f 	bl	800ab36 <USB_WritePMA>
            ep->xfer_buff += len;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	695a      	ldr	r2, [r3, #20]
 800a23c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a240:	441a      	add	r2, r3
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	6a1a      	ldr	r2, [r3, #32]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d907      	bls.n	800a262 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	6a1a      	ldr	r2, [r3, #32]
 800a256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a25a:	1ad2      	subs	r2, r2, r3
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	621a      	str	r2, [r3, #32]
 800a260:	e006      	b.n	800a270 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2200      	movs	r2, #0
 800a26e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	643b      	str	r3, [r7, #64]	@ 0x40
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	785b      	ldrb	r3, [r3, #1]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d16b      	bne.n	800a354 <USB_EPStartXfer+0x5e6>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a286:	b29b      	uxth	r3, r3
 800a288:	461a      	mov	r2, r3
 800a28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28c:	4413      	add	r3, r2
 800a28e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	00da      	lsls	r2, r3, #3
 800a296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a298:	4413      	add	r3, r2
 800a29a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a29e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a2:	881b      	ldrh	r3, [r3, #0]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ae:	801a      	strh	r2, [r3, #0]
 800a2b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10a      	bne.n	800a2ce <USB_EPStartXfer+0x560>
 800a2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ca:	801a      	strh	r2, [r3, #0]
 800a2cc:	e05b      	b.n	800a386 <USB_EPStartXfer+0x618>
 800a2ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2d4:	d81c      	bhi.n	800a310 <USB_EPStartXfer+0x5a2>
 800a2d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2da:	085b      	lsrs	r3, r3, #1
 800a2dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a2e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d004      	beq.n	800a2f6 <USB_EPStartXfer+0x588>
 800a2ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a300:	b29b      	uxth	r3, r3
 800a302:	029b      	lsls	r3, r3, #10
 800a304:	b29b      	uxth	r3, r3
 800a306:	4313      	orrs	r3, r2
 800a308:	b29a      	uxth	r2, r3
 800a30a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a30c:	801a      	strh	r2, [r3, #0]
 800a30e:	e03a      	b.n	800a386 <USB_EPStartXfer+0x618>
 800a310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a314:	095b      	lsrs	r3, r3, #5
 800a316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a31a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a31e:	f003 031f 	and.w	r3, r3, #31
 800a322:	2b00      	cmp	r3, #0
 800a324:	d104      	bne.n	800a330 <USB_EPStartXfer+0x5c2>
 800a326:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a32a:	3b01      	subs	r3, #1
 800a32c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	b29a      	uxth	r2, r3
 800a336:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	029b      	lsls	r3, r3, #10
 800a33e:	b29b      	uxth	r3, r3
 800a340:	4313      	orrs	r3, r2
 800a342:	b29b      	uxth	r3, r3
 800a344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a350:	801a      	strh	r2, [r3, #0]
 800a352:	e018      	b.n	800a386 <USB_EPStartXfer+0x618>
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	785b      	ldrb	r3, [r3, #1]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d114      	bne.n	800a386 <USB_EPStartXfer+0x618>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a362:	b29b      	uxth	r3, r3
 800a364:	461a      	mov	r2, r3
 800a366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a368:	4413      	add	r3, r2
 800a36a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	00da      	lsls	r2, r3, #3
 800a372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a374:	4413      	add	r3, r2
 800a376:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a37c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a380:	b29a      	uxth	r2, r3
 800a382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a384:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	895b      	ldrh	r3, [r3, #10]
 800a38a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	6959      	ldr	r1, [r3, #20]
 800a392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a396:	b29b      	uxth	r3, r3
 800a398:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fbca 	bl	800ab36 <USB_WritePMA>
 800a3a2:	e193      	b.n	800a6cc <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	881b      	ldrh	r3, [r3, #0]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a3be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3c2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	441a      	add	r2, r3
 800a3d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a3d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3f8:	4413      	add	r3, r2
 800a3fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	00da      	lsls	r2, r3, #3
 800a402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a404:	4413      	add	r3, r2
 800a406:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a40a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a40c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a410:	b29a      	uxth	r2, r3
 800a412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a414:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	891b      	ldrh	r3, [r3, #8]
 800a41a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	6959      	ldr	r1, [r3, #20]
 800a422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a426:	b29b      	uxth	r3, r3
 800a428:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fb82 	bl	800ab36 <USB_WritePMA>
 800a432:	e14b      	b.n	800a6cc <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	6a1a      	ldr	r2, [r3, #32]
 800a438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a43c:	1ad2      	subs	r2, r2, r3
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	881b      	ldrh	r3, [r3, #0]
 800a44e:	b29b      	uxth	r3, r3
 800a450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 809a 	beq.w	800a58e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	785b      	ldrb	r3, [r3, #1]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d16b      	bne.n	800a53e <USB_EPStartXfer+0x7d0>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a470:	b29b      	uxth	r3, r3
 800a472:	461a      	mov	r2, r3
 800a474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a476:	4413      	add	r3, r2
 800a478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	00da      	lsls	r2, r3, #3
 800a480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a482:	4413      	add	r3, r2
 800a484:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a488:	667b      	str	r3, [r7, #100]	@ 0x64
 800a48a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	b29b      	uxth	r3, r3
 800a490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a494:	b29a      	uxth	r2, r3
 800a496:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a498:	801a      	strh	r2, [r3, #0]
 800a49a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <USB_EPStartXfer+0x74a>
 800a4a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4b4:	801a      	strh	r2, [r3, #0]
 800a4b6:	e05b      	b.n	800a570 <USB_EPStartXfer+0x802>
 800a4b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4bc:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4be:	d81c      	bhi.n	800a4fa <USB_EPStartXfer+0x78c>
 800a4c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4c4:	085b      	lsrs	r3, r3, #1
 800a4c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d004      	beq.n	800a4e0 <USB_EPStartXfer+0x772>
 800a4d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4da:	3301      	adds	r3, #1
 800a4dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	029b      	lsls	r3, r3, #10
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4f6:	801a      	strh	r2, [r3, #0]
 800a4f8:	e03a      	b.n	800a570 <USB_EPStartXfer+0x802>
 800a4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4fe:	095b      	lsrs	r3, r3, #5
 800a500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a508:	f003 031f 	and.w	r3, r3, #31
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d104      	bne.n	800a51a <USB_EPStartXfer+0x7ac>
 800a510:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a514:	3b01      	subs	r3, #1
 800a516:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a51a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	b29a      	uxth	r2, r3
 800a520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a524:	b29b      	uxth	r3, r3
 800a526:	029b      	lsls	r3, r3, #10
 800a528:	b29b      	uxth	r3, r3
 800a52a:	4313      	orrs	r3, r2
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a536:	b29a      	uxth	r2, r3
 800a538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a53a:	801a      	strh	r2, [r3, #0]
 800a53c:	e018      	b.n	800a570 <USB_EPStartXfer+0x802>
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	785b      	ldrb	r3, [r3, #1]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d114      	bne.n	800a570 <USB_EPStartXfer+0x802>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	461a      	mov	r2, r3
 800a550:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a552:	4413      	add	r3, r2
 800a554:	673b      	str	r3, [r7, #112]	@ 0x70
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	00da      	lsls	r2, r3, #3
 800a55c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a55e:	4413      	add	r3, r2
 800a560:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a564:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a56e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	895b      	ldrh	r3, [r3, #10]
 800a574:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	6959      	ldr	r1, [r3, #20]
 800a57c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a580:	b29b      	uxth	r3, r3
 800a582:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fad5 	bl	800ab36 <USB_WritePMA>
 800a58c:	e09e      	b.n	800a6cc <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	785b      	ldrb	r3, [r3, #1]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d16b      	bne.n	800a66e <USB_EPStartXfer+0x900>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a5a6:	4413      	add	r3, r2
 800a5a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	00da      	lsls	r2, r3, #3
 800a5b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a5b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a5ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5c8:	801a      	strh	r2, [r3, #0]
 800a5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <USB_EPStartXfer+0x87a>
 800a5d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5e4:	801a      	strh	r2, [r3, #0]
 800a5e6:	e063      	b.n	800a6b0 <USB_EPStartXfer+0x942>
 800a5e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5ee:	d81c      	bhi.n	800a62a <USB_EPStartXfer+0x8bc>
 800a5f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5f4:	085b      	lsrs	r3, r3, #1
 800a5f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a5fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d004      	beq.n	800a610 <USB_EPStartXfer+0x8a2>
 800a606:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a60a:	3301      	adds	r3, #1
 800a60c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	b29a      	uxth	r2, r3
 800a616:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	029b      	lsls	r3, r3, #10
 800a61e:	b29b      	uxth	r3, r3
 800a620:	4313      	orrs	r3, r2
 800a622:	b29a      	uxth	r2, r3
 800a624:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a626:	801a      	strh	r2, [r3, #0]
 800a628:	e042      	b.n	800a6b0 <USB_EPStartXfer+0x942>
 800a62a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a62e:	095b      	lsrs	r3, r3, #5
 800a630:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a638:	f003 031f 	and.w	r3, r3, #31
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d104      	bne.n	800a64a <USB_EPStartXfer+0x8dc>
 800a640:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a644:	3b01      	subs	r3, #1
 800a646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a64a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	b29a      	uxth	r2, r3
 800a650:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a654:	b29b      	uxth	r3, r3
 800a656:	029b      	lsls	r3, r3, #10
 800a658:	b29b      	uxth	r3, r3
 800a65a:	4313      	orrs	r3, r2
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a666:	b29a      	uxth	r2, r3
 800a668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a66a:	801a      	strh	r2, [r3, #0]
 800a66c:	e020      	b.n	800a6b0 <USB_EPStartXfer+0x942>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d11c      	bne.n	800a6b0 <USB_EPStartXfer+0x942>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a682:	b29b      	uxth	r3, r3
 800a684:	461a      	mov	r2, r3
 800a686:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a68a:	4413      	add	r3, r2
 800a68c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	00da      	lsls	r2, r3, #3
 800a696:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a69a:	4413      	add	r3, r2
 800a69c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a6a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	891b      	ldrh	r3, [r3, #8]
 800a6b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	6959      	ldr	r1, [r3, #20]
 800a6bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fa35 	bl	800ab36 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6e2:	817b      	strh	r3, [r7, #10]
 800a6e4:	897b      	ldrh	r3, [r7, #10]
 800a6e6:	f083 0310 	eor.w	r3, r3, #16
 800a6ea:	817b      	strh	r3, [r7, #10]
 800a6ec:	897b      	ldrh	r3, [r7, #10]
 800a6ee:	f083 0320 	eor.w	r3, r3, #32
 800a6f2:	817b      	strh	r3, [r7, #10]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	441a      	add	r2, r3
 800a6fe:	897b      	ldrh	r3, [r7, #10]
 800a700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a70c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a710:	b29b      	uxth	r3, r3
 800a712:	8013      	strh	r3, [r2, #0]
 800a714:	e0d5      	b.n	800a8c2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	7b1b      	ldrb	r3, [r3, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d156      	bne.n	800a7cc <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d122      	bne.n	800a76c <USB_EPStartXfer+0x9fe>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	78db      	ldrb	r3, [r3, #3]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d11e      	bne.n	800a76c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a744:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	441a      	add	r2, r3
 800a752:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a75a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a75e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a766:	b29b      	uxth	r3, r3
 800a768:	8013      	strh	r3, [r2, #0]
 800a76a:	e01d      	b.n	800a7a8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a77e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a782:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	441a      	add	r2, r3
 800a790:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a79c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	699a      	ldr	r2, [r3, #24]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d907      	bls.n	800a7c4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	699a      	ldr	r2, [r3, #24]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	1ad2      	subs	r2, r2, r3
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	619a      	str	r2, [r3, #24]
 800a7c2:	e054      	b.n	800a86e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	619a      	str	r2, [r3, #24]
 800a7ca:	e050      	b.n	800a86e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	78db      	ldrb	r3, [r3, #3]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d142      	bne.n	800a85a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	69db      	ldr	r3, [r3, #28]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d048      	beq.n	800a86e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a7ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a7f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d005      	beq.n	800a804 <USB_EPStartXfer+0xa96>
 800a7f8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a7fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10b      	bne.n	800a81c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a804:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d12e      	bne.n	800a86e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a810:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d128      	bne.n	800a86e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	4413      	add	r3, r2
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	b29b      	uxth	r3, r3
 800a82a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a82e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a832:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	441a      	add	r2, r3
 800a840:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a84c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a850:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a854:	b29b      	uxth	r3, r3
 800a856:	8013      	strh	r3, [r2, #0]
 800a858:	e009      	b.n	800a86e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	78db      	ldrb	r3, [r3, #3]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d103      	bne.n	800a86a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2200      	movs	r2, #0
 800a866:	619a      	str	r2, [r3, #24]
 800a868:	e001      	b.n	800a86e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e02a      	b.n	800a8c4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a884:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a888:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a88c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a890:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a894:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a898:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a89c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	441a      	add	r2, r3
 800a8aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a8ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	37b0      	adds	r7, #176	@ 0xb0
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d020      	beq.n	800a920 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8f4:	81bb      	strh	r3, [r7, #12]
 800a8f6:	89bb      	ldrh	r3, [r7, #12]
 800a8f8:	f083 0310 	eor.w	r3, r3, #16
 800a8fc:	81bb      	strh	r3, [r7, #12]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	441a      	add	r2, r3
 800a908:	89bb      	ldrh	r3, [r7, #12]
 800a90a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a90e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	8013      	strh	r3, [r2, #0]
 800a91e:	e01f      	b.n	800a960 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a936:	81fb      	strh	r3, [r7, #14]
 800a938:	89fb      	ldrh	r3, [r7, #14]
 800a93a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a93e:	81fb      	strh	r3, [r7, #14]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	441a      	add	r2, r3
 800a94a:	89fb      	ldrh	r3, [r7, #14]
 800a94c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a96e:	b480      	push	{r7}
 800a970:	b087      	sub	sp, #28
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	785b      	ldrb	r3, [r3, #1]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d04c      	beq.n	800aa1a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4413      	add	r3, r2
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	823b      	strh	r3, [r7, #16]
 800a98e:	8a3b      	ldrh	r3, [r7, #16]
 800a990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a994:	2b00      	cmp	r3, #0
 800a996:	d01b      	beq.n	800a9d0 <USB_EPClearStall+0x62>
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	881b      	ldrh	r3, [r3, #0]
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9ae:	81fb      	strh	r3, [r7, #14]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	441a      	add	r2, r3
 800a9ba:	89fb      	ldrh	r3, [r7, #14]
 800a9bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	78db      	ldrb	r3, [r3, #3]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d06c      	beq.n	800aab2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	881b      	ldrh	r3, [r3, #0]
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9ee:	81bb      	strh	r3, [r7, #12]
 800a9f0:	89bb      	ldrh	r3, [r7, #12]
 800a9f2:	f083 0320 	eor.w	r3, r3, #32
 800a9f6:	81bb      	strh	r3, [r7, #12]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	441a      	add	r2, r3
 800aa02:	89bb      	ldrh	r3, [r7, #12]
 800aa04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	8013      	strh	r3, [r2, #0]
 800aa18:	e04b      	b.n	800aab2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	82fb      	strh	r3, [r7, #22]
 800aa28:	8afb      	ldrh	r3, [r7, #22]
 800aa2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d01b      	beq.n	800aa6a <USB_EPClearStall+0xfc>
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa48:	82bb      	strh	r3, [r7, #20]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	441a      	add	r2, r3
 800aa54:	8abb      	ldrh	r3, [r7, #20]
 800aa56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aa62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa80:	827b      	strh	r3, [r7, #18]
 800aa82:	8a7b      	ldrh	r3, [r7, #18]
 800aa84:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa88:	827b      	strh	r3, [r7, #18]
 800aa8a:	8a7b      	ldrh	r3, [r7, #18]
 800aa8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa90:	827b      	strh	r3, [r7, #18]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	441a      	add	r2, r3
 800aa9c:	8a7b      	ldrh	r3, [r7, #18]
 800aa9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	371c      	adds	r7, #28
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aacc:	78fb      	ldrb	r3, [r7, #3]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d103      	bne.n	800aada <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2280      	movs	r2, #128	@ 0x80
 800aad6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aafc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b085      	sub	sp, #20
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ab28:	68fb      	ldr	r3, [r7, #12]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b08b      	sub	sp, #44	@ 0x2c
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	60b9      	str	r1, [r7, #8]
 800ab40:	4611      	mov	r1, r2
 800ab42:	461a      	mov	r2, r3
 800ab44:	460b      	mov	r3, r1
 800ab46:	80fb      	strh	r3, [r7, #6]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ab4c:	88bb      	ldrh	r3, [r7, #4]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	085b      	lsrs	r3, r3, #1
 800ab52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab5c:	88fa      	ldrh	r2, [r7, #6]
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	4413      	add	r3, r2
 800ab62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab66:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab6c:	e01c      	b.n	800aba8 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	3301      	adds	r3, #1
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	b21b      	sxth	r3, r3
 800ab7c:	021b      	lsls	r3, r3, #8
 800ab7e:	b21a      	sxth	r2, r3
 800ab80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	b21b      	sxth	r3, r3
 800ab88:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	8a7a      	ldrh	r2, [r7, #18]
 800ab8e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ab90:	6a3b      	ldr	r3, [r7, #32]
 800ab92:	3302      	adds	r3, #2
 800ab94:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800aba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba4:	3b01      	subs	r3, #1
 800aba6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1df      	bne.n	800ab6e <USB_WritePMA+0x38>
  }
}
 800abae:	bf00      	nop
 800abb0:	bf00      	nop
 800abb2:	372c      	adds	r7, #44	@ 0x2c
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b08b      	sub	sp, #44	@ 0x2c
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4611      	mov	r1, r2
 800abc8:	461a      	mov	r2, r3
 800abca:	460b      	mov	r3, r1
 800abcc:	80fb      	strh	r3, [r7, #6]
 800abce:	4613      	mov	r3, r2
 800abd0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800abd2:	88bb      	ldrh	r3, [r7, #4]
 800abd4:	085b      	lsrs	r3, r3, #1
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800abe2:	88fa      	ldrh	r2, [r7, #6]
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	627b      	str	r3, [r7, #36]	@ 0x24
 800abf2:	e018      	b.n	800ac26 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	3302      	adds	r3, #2
 800ac00:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	0a1b      	lsrs	r3, r3, #8
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ac20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac22:	3b01      	subs	r3, #1
 800ac24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1e3      	bne.n	800abf4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ac2c:	88bb      	ldrh	r3, [r7, #4]
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d007      	beq.n	800ac48 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	701a      	strb	r2, [r3, #0]
  }
}
 800ac48:	bf00      	nop
 800ac4a:	372c      	adds	r7, #44	@ 0x2c
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac60:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ac64:	f005 f8e0 	bl	800fe28 <USBD_static_malloc>
 800ac68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d105      	bne.n	800ac7c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ac78:	2302      	movs	r3, #2
 800ac7a:	e066      	b.n	800ad4a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	7c1b      	ldrb	r3, [r3, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d119      	bne.n	800acc0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac90:	2202      	movs	r2, #2
 800ac92:	2181      	movs	r1, #129	@ 0x81
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f004 ff6e 	bl	800fb76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aca0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aca4:	2202      	movs	r2, #2
 800aca6:	2101      	movs	r1, #1
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f004 ff64 	bl	800fb76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2210      	movs	r2, #16
 800acba:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800acbe:	e016      	b.n	800acee <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800acc0:	2340      	movs	r3, #64	@ 0x40
 800acc2:	2202      	movs	r2, #2
 800acc4:	2181      	movs	r1, #129	@ 0x81
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f004 ff55 	bl	800fb76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800acd2:	2340      	movs	r3, #64	@ 0x40
 800acd4:	2202      	movs	r2, #2
 800acd6:	2101      	movs	r1, #1
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f004 ff4c 	bl	800fb76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2210      	movs	r2, #16
 800acea:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acee:	2308      	movs	r3, #8
 800acf0:	2203      	movs	r2, #3
 800acf2:	2182      	movs	r1, #130	@ 0x82
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f004 ff3e 	bl	800fb76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2201      	movs	r2, #1
 800acfe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	7c1b      	ldrb	r3, [r3, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d109      	bne.n	800ad38 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad2e:	2101      	movs	r1, #1
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f005 f80f 	bl	800fd54 <USBD_LL_PrepareReceive>
 800ad36:	e007      	b.n	800ad48 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad3e:	2340      	movs	r3, #64	@ 0x40
 800ad40:	2101      	movs	r1, #1
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f005 f806 	bl	800fd54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ad5e:	2181      	movs	r1, #129	@ 0x81
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f004 ff2e 	bl	800fbc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f004 ff27 	bl	800fbc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ad7c:	2182      	movs	r1, #130	@ 0x82
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f004 ff1f 	bl	800fbc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00e      	beq.n	800adbc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800adae:	4618      	mov	r0, r3
 800adb0:	f005 f848 	bl	800fe44 <USBD_static_free>
    pdev->pClassData = NULL;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
	...

0800adc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800add8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800adde:	2300      	movs	r3, #0
 800ade0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800adec:	2303      	movs	r3, #3
 800adee:	e0af      	b.n	800af50 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d03f      	beq.n	800ae7c <USBD_CDC_Setup+0xb4>
 800adfc:	2b20      	cmp	r3, #32
 800adfe:	f040 809f 	bne.w	800af40 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	88db      	ldrh	r3, [r3, #6]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d02e      	beq.n	800ae68 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	b25b      	sxtb	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	da16      	bge.n	800ae42 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ae20:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	88d2      	ldrh	r2, [r2, #6]
 800ae26:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	88db      	ldrh	r3, [r3, #6]
 800ae2c:	2b07      	cmp	r3, #7
 800ae2e:	bf28      	it	cs
 800ae30:	2307      	movcs	r3, #7
 800ae32:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	89fa      	ldrh	r2, [r7, #14]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f001 facf 	bl	800c3de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ae40:	e085      	b.n	800af4e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	785a      	ldrb	r2, [r3, #1]
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	88db      	ldrh	r3, [r3, #6]
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ae58:	6939      	ldr	r1, [r7, #16]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	88db      	ldrh	r3, [r3, #6]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f001 fae8 	bl	800c436 <USBD_CtlPrepareRx>
      break;
 800ae66:	e072      	b.n	800af4e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	7850      	ldrb	r0, [r2, #1]
 800ae74:	2200      	movs	r2, #0
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	4798      	blx	r3
      break;
 800ae7a:	e068      	b.n	800af4e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	785b      	ldrb	r3, [r3, #1]
 800ae80:	2b0b      	cmp	r3, #11
 800ae82:	d852      	bhi.n	800af2a <USBD_CDC_Setup+0x162>
 800ae84:	a201      	add	r2, pc, #4	@ (adr r2, 800ae8c <USBD_CDC_Setup+0xc4>)
 800ae86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8a:	bf00      	nop
 800ae8c:	0800aebd 	.word	0x0800aebd
 800ae90:	0800af39 	.word	0x0800af39
 800ae94:	0800af2b 	.word	0x0800af2b
 800ae98:	0800af2b 	.word	0x0800af2b
 800ae9c:	0800af2b 	.word	0x0800af2b
 800aea0:	0800af2b 	.word	0x0800af2b
 800aea4:	0800af2b 	.word	0x0800af2b
 800aea8:	0800af2b 	.word	0x0800af2b
 800aeac:	0800af2b 	.word	0x0800af2b
 800aeb0:	0800af2b 	.word	0x0800af2b
 800aeb4:	0800aee7 	.word	0x0800aee7
 800aeb8:	0800af11 	.word	0x0800af11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d107      	bne.n	800aed8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aec8:	f107 030a 	add.w	r3, r7, #10
 800aecc:	2202      	movs	r2, #2
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f001 fa84 	bl	800c3de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aed6:	e032      	b.n	800af3e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f001 fa0e 	bl	800c2fc <USBD_CtlError>
            ret = USBD_FAIL;
 800aee0:	2303      	movs	r3, #3
 800aee2:	75fb      	strb	r3, [r7, #23]
          break;
 800aee4:	e02b      	b.n	800af3e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b03      	cmp	r3, #3
 800aef0:	d107      	bne.n	800af02 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aef2:	f107 030d 	add.w	r3, r7, #13
 800aef6:	2201      	movs	r2, #1
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f001 fa6f 	bl	800c3de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af00:	e01d      	b.n	800af3e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f001 f9f9 	bl	800c2fc <USBD_CtlError>
            ret = USBD_FAIL;
 800af0a:	2303      	movs	r3, #3
 800af0c:	75fb      	strb	r3, [r7, #23]
          break;
 800af0e:	e016      	b.n	800af3e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d00f      	beq.n	800af3c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f001 f9ec 	bl	800c2fc <USBD_CtlError>
            ret = USBD_FAIL;
 800af24:	2303      	movs	r3, #3
 800af26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af28:	e008      	b.n	800af3c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f001 f9e5 	bl	800c2fc <USBD_CtlError>
          ret = USBD_FAIL;
 800af32:	2303      	movs	r3, #3
 800af34:	75fb      	strb	r3, [r7, #23]
          break;
 800af36:	e002      	b.n	800af3e <USBD_CDC_Setup+0x176>
          break;
 800af38:	bf00      	nop
 800af3a:	e008      	b.n	800af4e <USBD_CDC_Setup+0x186>
          break;
 800af3c:	bf00      	nop
      }
      break;
 800af3e:	e006      	b.n	800af4e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 f9da 	bl	800c2fc <USBD_CtlError>
      ret = USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	75fb      	strb	r3, [r7, #23]
      break;
 800af4c:	bf00      	nop
  }

  return (uint8_t)ret;
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3718      	adds	r7, #24
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	460b      	mov	r3, r1
 800af62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800af6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800af76:	2303      	movs	r3, #3
 800af78:	e04f      	b.n	800b01a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800af82:	78fa      	ldrb	r2, [r7, #3]
 800af84:	6879      	ldr	r1, [r7, #4]
 800af86:	4613      	mov	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	440b      	add	r3, r1
 800af90:	3318      	adds	r3, #24
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d029      	beq.n	800afec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800af98:	78fa      	ldrb	r2, [r7, #3]
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	4613      	mov	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	440b      	add	r3, r1
 800afa6:	3318      	adds	r3, #24
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	78f9      	ldrb	r1, [r7, #3]
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	460b      	mov	r3, r1
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	440b      	add	r3, r1
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	4403      	add	r3, r0
 800afb8:	3320      	adds	r3, #32
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	fbb2 f1f3 	udiv	r1, r2, r3
 800afc0:	fb01 f303 	mul.w	r3, r1, r3
 800afc4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d110      	bne.n	800afec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800afca:	78fa      	ldrb	r2, [r7, #3]
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	4613      	mov	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	440b      	add	r3, r1
 800afd8:	3318      	adds	r3, #24
 800afda:	2200      	movs	r2, #0
 800afdc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800afde:	78f9      	ldrb	r1, [r7, #3]
 800afe0:	2300      	movs	r3, #0
 800afe2:	2200      	movs	r2, #0
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f004 fe94 	bl	800fd12 <USBD_LL_Transmit>
 800afea:	e015      	b.n	800b018 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00b      	beq.n	800b018 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b014:	78fa      	ldrb	r2, [r7, #3]
 800b016:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b034:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b040:	2303      	movs	r3, #3
 800b042:	e015      	b.n	800b070 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f004 fea4 	bl	800fd96 <USBD_LL_GetRxDataSize>
 800b04e:	4602      	mov	r2, r0
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b06a:	4611      	mov	r1, r2
 800b06c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b086:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b08e:	2303      	movs	r3, #3
 800b090:	e01a      	b.n	800b0c8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d014      	beq.n	800b0c6 <USBD_CDC_EP0_RxReady+0x4e>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b0a2:	2bff      	cmp	r3, #255	@ 0xff
 800b0a4:	d00f      	beq.n	800b0c6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b0b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	22ff      	movs	r2, #255	@ 0xff
 800b0c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2243      	movs	r2, #67	@ 0x43
 800b0dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b0de:	4b03      	ldr	r3, [pc, #12]	@ (800b0ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	20000094 	.word	0x20000094

0800b0f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2243      	movs	r2, #67	@ 0x43
 800b0fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b0fe:	4b03      	ldr	r3, [pc, #12]	@ (800b10c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	20000050 	.word	0x20000050

0800b110 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2243      	movs	r2, #67	@ 0x43
 800b11c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b11e:	4b03      	ldr	r3, [pc, #12]	@ (800b12c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b120:	4618      	mov	r0, r3
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	200000d8 	.word	0x200000d8

0800b130 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	220a      	movs	r2, #10
 800b13c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b13e:	4b03      	ldr	r3, [pc, #12]	@ (800b14c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b140:	4618      	mov	r0, r3
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	2000000c 	.word	0x2000000c

0800b150 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d101      	bne.n	800b164 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b160:	2303      	movs	r3, #3
 800b162:	e004      	b.n	800b16e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b087      	sub	sp, #28
 800b17e:	af00      	add	r7, sp, #0
 800b180:	60f8      	str	r0, [r7, #12]
 800b182:	60b9      	str	r1, [r7, #8]
 800b184:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b18c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b194:	2303      	movs	r3, #3
 800b196:	e008      	b.n	800b1aa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	371c      	adds	r7, #28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b085      	sub	sp, #20
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	e004      	b.n	800b1dc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3714      	adds	r7, #20
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b202:	2b00      	cmp	r3, #0
 800b204:	d101      	bne.n	800b20a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b206:	2303      	movs	r3, #3
 800b208:	e01a      	b.n	800b240 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b210:	2b00      	cmp	r3, #0
 800b212:	d114      	bne.n	800b23e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2201      	movs	r2, #1
 800b218:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b232:	2181      	movs	r1, #129	@ 0x81
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f004 fd6c 	bl	800fd12 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b256:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b262:	2303      	movs	r3, #3
 800b264:	e016      	b.n	800b294 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	7c1b      	ldrb	r3, [r3, #16]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d109      	bne.n	800b282 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b274:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b278:	2101      	movs	r1, #1
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f004 fd6a 	bl	800fd54 <USBD_LL_PrepareReceive>
 800b280:	e007      	b.n	800b292 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b288:	2340      	movs	r3, #64	@ 0x40
 800b28a:	2101      	movs	r1, #1
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f004 fd61 	bl	800fd54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e01f      	b.n	800b2f4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	79fa      	ldrb	r2, [r7, #7]
 800b2e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f004 fbc9 	bl	800fa80 <USBD_LL_Init>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b306:	2300      	movs	r3, #0
 800b308:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b310:	2303      	movs	r3, #3
 800b312:	e016      	b.n	800b342 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00b      	beq.n	800b340 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b330:	f107 020e 	add.w	r2, r7, #14
 800b334:	4610      	mov	r0, r2
 800b336:	4798      	blx	r3
 800b338:	4602      	mov	r2, r0
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b082      	sub	sp, #8
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f004 fbf4 	bl	800fb40 <USBD_LL_Start>
 800b358:	4603      	mov	r3, r0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b384:	2303      	movs	r3, #3
 800b386:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d009      	beq.n	800b3a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	78fa      	ldrb	r2, [r7, #3]
 800b39c:	4611      	mov	r1, r2
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	4798      	blx	r3
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d007      	beq.n	800b3d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	78fa      	ldrb	r2, [r7, #3]
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	4798      	blx	r3
  }

  return USBD_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 ff48 	bl	800c288 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b406:	461a      	mov	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b414:	f003 031f 	and.w	r3, r3, #31
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d01a      	beq.n	800b452 <USBD_LL_SetupStage+0x72>
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d822      	bhi.n	800b466 <USBD_LL_SetupStage+0x86>
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <USBD_LL_SetupStage+0x4a>
 800b424:	2b01      	cmp	r3, #1
 800b426:	d00a      	beq.n	800b43e <USBD_LL_SetupStage+0x5e>
 800b428:	e01d      	b.n	800b466 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f9f0 	bl	800b818 <USBD_StdDevReq>
 800b438:	4603      	mov	r3, r0
 800b43a:	73fb      	strb	r3, [r7, #15]
      break;
 800b43c:	e020      	b.n	800b480 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fa54 	bl	800b8f4 <USBD_StdItfReq>
 800b44c:	4603      	mov	r3, r0
 800b44e:	73fb      	strb	r3, [r7, #15]
      break;
 800b450:	e016      	b.n	800b480 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fa93 	bl	800b986 <USBD_StdEPReq>
 800b460:	4603      	mov	r3, r0
 800b462:	73fb      	strb	r3, [r7, #15]
      break;
 800b464:	e00c      	b.n	800b480 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b46c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b470:	b2db      	uxtb	r3, r3
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f004 fbc3 	bl	800fc00 <USBD_LL_StallEP>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]
      break;
 800b47e:	bf00      	nop
  }

  return ret;
 800b480:	7bfb      	ldrb	r3, [r7, #15]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b086      	sub	sp, #24
 800b48e:	af00      	add	r7, sp, #0
 800b490:	60f8      	str	r0, [r7, #12]
 800b492:	460b      	mov	r3, r1
 800b494:	607a      	str	r2, [r7, #4]
 800b496:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b498:	7afb      	ldrb	r3, [r7, #11]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d138      	bne.n	800b510 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b4a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	d14a      	bne.n	800b546 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	689a      	ldr	r2, [r3, #8]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d913      	bls.n	800b4e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	689a      	ldr	r2, [r3, #8]
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	1ad2      	subs	r2, r2, r3
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	68da      	ldr	r2, [r3, #12]
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	bf28      	it	cs
 800b4d6:	4613      	movcs	r3, r2
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 ffc7 	bl	800c470 <USBD_CtlContinueRx>
 800b4e2:	e030      	b.n	800b546 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d10b      	bne.n	800b508 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d005      	beq.n	800b508 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 ffc2 	bl	800c492 <USBD_CtlSendStatus>
 800b50e:	e01a      	b.n	800b546 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2b03      	cmp	r3, #3
 800b51a:	d114      	bne.n	800b546 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00e      	beq.n	800b546 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	7afa      	ldrb	r2, [r7, #11]
 800b532:	4611      	mov	r1, r2
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	4798      	blx	r3
 800b538:	4603      	mov	r3, r0
 800b53a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b53c:	7dfb      	ldrb	r3, [r7, #23]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	e000      	b.n	800b548 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	460b      	mov	r3, r1
 800b55a:	607a      	str	r2, [r7, #4]
 800b55c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b55e:	7afb      	ldrb	r3, [r7, #11]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d16b      	bne.n	800b63c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	3314      	adds	r3, #20
 800b568:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b570:	2b02      	cmp	r3, #2
 800b572:	d156      	bne.n	800b622 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	689a      	ldr	r2, [r3, #8]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d914      	bls.n	800b5aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	689a      	ldr	r2, [r3, #8]
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	1ad2      	subs	r2, r2, r3
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	461a      	mov	r2, r3
 800b594:	6879      	ldr	r1, [r7, #4]
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 ff3c 	bl	800c414 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b59c:	2300      	movs	r3, #0
 800b59e:	2200      	movs	r2, #0
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f004 fbd6 	bl	800fd54 <USBD_LL_PrepareReceive>
 800b5a8:	e03b      	b.n	800b622 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	68da      	ldr	r2, [r3, #12]
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d11c      	bne.n	800b5f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	685a      	ldr	r2, [r3, #4]
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d316      	bcc.n	800b5f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d20f      	bcs.n	800b5f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 ff1d 	bl	800c414 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f004 fbb3 	bl	800fd54 <USBD_LL_PrepareReceive>
 800b5ee:	e018      	b.n	800b622 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	2b03      	cmp	r3, #3
 800b5fa:	d10b      	bne.n	800b614 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d005      	beq.n	800b614 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b614:	2180      	movs	r1, #128	@ 0x80
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f004 faf2 	bl	800fc00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 ff4b 	bl	800c4b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d122      	bne.n	800b672 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7ff fe98 	bl	800b362 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b63a:	e01a      	b.n	800b672 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b03      	cmp	r3, #3
 800b646:	d114      	bne.n	800b672 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00e      	beq.n	800b672 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	7afa      	ldrb	r2, [r7, #11]
 800b65e:	4611      	mov	r1, r2
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	4798      	blx	r3
 800b664:	4603      	mov	r3, r0
 800b666:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b668:	7dfb      	ldrb	r3, [r7, #23]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b66e:	7dfb      	ldrb	r3, [r7, #23]
 800b670:	e000      	b.n	800b674 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3718      	adds	r7, #24
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e02f      	b.n	800b710 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00f      	beq.n	800b6da <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d009      	beq.n	800b6da <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	6852      	ldr	r2, [r2, #4]
 800b6d2:	b2d2      	uxtb	r2, r2
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6da:	2340      	movs	r3, #64	@ 0x40
 800b6dc:	2200      	movs	r2, #0
 800b6de:	2100      	movs	r1, #0
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f004 fa48 	bl	800fb76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2240      	movs	r2, #64	@ 0x40
 800b6f2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6f6:	2340      	movs	r3, #64	@ 0x40
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	2180      	movs	r1, #128	@ 0x80
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f004 fa3a 	bl	800fb76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2240      	movs	r2, #64	@ 0x40
 800b70c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	78fa      	ldrb	r2, [r7, #3]
 800b728:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b746:	b2da      	uxtb	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2204      	movs	r2, #4
 800b752:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b04      	cmp	r3, #4
 800b776:	d106      	bne.n	800b786 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e012      	b.n	800b7d0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d10b      	bne.n	800b7ce <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d005      	beq.n	800b7ce <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b7f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	b21a      	sxth	r2, r3
 800b7fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b802:	4313      	orrs	r3, r2
 800b804:	b21b      	sxth	r3, r3
 800b806:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b808:	89fb      	ldrh	r3, [r7, #14]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	371c      	adds	r7, #28
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
	...

0800b818 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b82e:	2b40      	cmp	r3, #64	@ 0x40
 800b830:	d005      	beq.n	800b83e <USBD_StdDevReq+0x26>
 800b832:	2b40      	cmp	r3, #64	@ 0x40
 800b834:	d853      	bhi.n	800b8de <USBD_StdDevReq+0xc6>
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00b      	beq.n	800b852 <USBD_StdDevReq+0x3a>
 800b83a:	2b20      	cmp	r3, #32
 800b83c:	d14f      	bne.n	800b8de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	4798      	blx	r3
 800b84c:	4603      	mov	r3, r0
 800b84e:	73fb      	strb	r3, [r7, #15]
      break;
 800b850:	e04a      	b.n	800b8e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	785b      	ldrb	r3, [r3, #1]
 800b856:	2b09      	cmp	r3, #9
 800b858:	d83b      	bhi.n	800b8d2 <USBD_StdDevReq+0xba>
 800b85a:	a201      	add	r2, pc, #4	@ (adr r2, 800b860 <USBD_StdDevReq+0x48>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b8b5 	.word	0x0800b8b5
 800b864:	0800b8c9 	.word	0x0800b8c9
 800b868:	0800b8d3 	.word	0x0800b8d3
 800b86c:	0800b8bf 	.word	0x0800b8bf
 800b870:	0800b8d3 	.word	0x0800b8d3
 800b874:	0800b893 	.word	0x0800b893
 800b878:	0800b889 	.word	0x0800b889
 800b87c:	0800b8d3 	.word	0x0800b8d3
 800b880:	0800b8ab 	.word	0x0800b8ab
 800b884:	0800b89d 	.word	0x0800b89d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f9de 	bl	800bc4c <USBD_GetDescriptor>
          break;
 800b890:	e024      	b.n	800b8dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fb6d 	bl	800bf74 <USBD_SetAddress>
          break;
 800b89a:	e01f      	b.n	800b8dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fbac 	bl	800bffc <USBD_SetConfig>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	73fb      	strb	r3, [r7, #15]
          break;
 800b8a8:	e018      	b.n	800b8dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fc4b 	bl	800c148 <USBD_GetConfig>
          break;
 800b8b2:	e013      	b.n	800b8dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fc7c 	bl	800c1b4 <USBD_GetStatus>
          break;
 800b8bc:	e00e      	b.n	800b8dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fcab 	bl	800c21c <USBD_SetFeature>
          break;
 800b8c6:	e009      	b.n	800b8dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fcba 	bl	800c244 <USBD_ClrFeature>
          break;
 800b8d0:	e004      	b.n	800b8dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fd11 	bl	800c2fc <USBD_CtlError>
          break;
 800b8da:	bf00      	nop
      }
      break;
 800b8dc:	e004      	b.n	800b8e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fd0b 	bl	800c2fc <USBD_CtlError>
      break;
 800b8e6:	bf00      	nop
  }

  return ret;
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop

0800b8f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b90a:	2b40      	cmp	r3, #64	@ 0x40
 800b90c:	d005      	beq.n	800b91a <USBD_StdItfReq+0x26>
 800b90e:	2b40      	cmp	r3, #64	@ 0x40
 800b910:	d82f      	bhi.n	800b972 <USBD_StdItfReq+0x7e>
 800b912:	2b00      	cmp	r3, #0
 800b914:	d001      	beq.n	800b91a <USBD_StdItfReq+0x26>
 800b916:	2b20      	cmp	r3, #32
 800b918:	d12b      	bne.n	800b972 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b920:	b2db      	uxtb	r3, r3
 800b922:	3b01      	subs	r3, #1
 800b924:	2b02      	cmp	r3, #2
 800b926:	d81d      	bhi.n	800b964 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	889b      	ldrh	r3, [r3, #4]
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d813      	bhi.n	800b95a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	4798      	blx	r3
 800b940:	4603      	mov	r3, r0
 800b942:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	88db      	ldrh	r3, [r3, #6]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d110      	bne.n	800b96e <USBD_StdItfReq+0x7a>
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d10d      	bne.n	800b96e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fd9d 	bl	800c492 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b958:	e009      	b.n	800b96e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fccd 	bl	800c2fc <USBD_CtlError>
          break;
 800b962:	e004      	b.n	800b96e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fcc8 	bl	800c2fc <USBD_CtlError>
          break;
 800b96c:	e000      	b.n	800b970 <USBD_StdItfReq+0x7c>
          break;
 800b96e:	bf00      	nop
      }
      break;
 800b970:	e004      	b.n	800b97c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b972:	6839      	ldr	r1, [r7, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fcc1 	bl	800c2fc <USBD_CtlError>
      break;
 800b97a:	bf00      	nop
  }

  return ret;
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b084      	sub	sp, #16
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	889b      	ldrh	r3, [r3, #4]
 800b998:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9a2:	2b40      	cmp	r3, #64	@ 0x40
 800b9a4:	d007      	beq.n	800b9b6 <USBD_StdEPReq+0x30>
 800b9a6:	2b40      	cmp	r3, #64	@ 0x40
 800b9a8:	f200 8145 	bhi.w	800bc36 <USBD_StdEPReq+0x2b0>
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00c      	beq.n	800b9ca <USBD_StdEPReq+0x44>
 800b9b0:	2b20      	cmp	r3, #32
 800b9b2:	f040 8140 	bne.w	800bc36 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	6839      	ldr	r1, [r7, #0]
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	4798      	blx	r3
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9c8:	e13a      	b.n	800bc40 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	785b      	ldrb	r3, [r3, #1]
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d007      	beq.n	800b9e2 <USBD_StdEPReq+0x5c>
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	f300 8129 	bgt.w	800bc2a <USBD_StdEPReq+0x2a4>
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d07f      	beq.n	800badc <USBD_StdEPReq+0x156>
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d03c      	beq.n	800ba5a <USBD_StdEPReq+0xd4>
 800b9e0:	e123      	b.n	800bc2a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d002      	beq.n	800b9f4 <USBD_StdEPReq+0x6e>
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	d016      	beq.n	800ba20 <USBD_StdEPReq+0x9a>
 800b9f2:	e02c      	b.n	800ba4e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9f4:	7bbb      	ldrb	r3, [r7, #14]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00d      	beq.n	800ba16 <USBD_StdEPReq+0x90>
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	2b80      	cmp	r3, #128	@ 0x80
 800b9fe:	d00a      	beq.n	800ba16 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba00:	7bbb      	ldrb	r3, [r7, #14]
 800ba02:	4619      	mov	r1, r3
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f004 f8fb 	bl	800fc00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba0a:	2180      	movs	r1, #128	@ 0x80
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f004 f8f7 	bl	800fc00 <USBD_LL_StallEP>
 800ba12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba14:	e020      	b.n	800ba58 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fc6f 	bl	800c2fc <USBD_CtlError>
              break;
 800ba1e:	e01b      	b.n	800ba58 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	885b      	ldrh	r3, [r3, #2]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10e      	bne.n	800ba46 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba28:	7bbb      	ldrb	r3, [r7, #14]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00b      	beq.n	800ba46 <USBD_StdEPReq+0xc0>
 800ba2e:	7bbb      	ldrb	r3, [r7, #14]
 800ba30:	2b80      	cmp	r3, #128	@ 0x80
 800ba32:	d008      	beq.n	800ba46 <USBD_StdEPReq+0xc0>
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	88db      	ldrh	r3, [r3, #6]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d104      	bne.n	800ba46 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba3c:	7bbb      	ldrb	r3, [r7, #14]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f004 f8dd 	bl	800fc00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fd23 	bl	800c492 <USBD_CtlSendStatus>

              break;
 800ba4c:	e004      	b.n	800ba58 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 fc53 	bl	800c2fc <USBD_CtlError>
              break;
 800ba56:	bf00      	nop
          }
          break;
 800ba58:	e0ec      	b.n	800bc34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d002      	beq.n	800ba6c <USBD_StdEPReq+0xe6>
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	d016      	beq.n	800ba98 <USBD_StdEPReq+0x112>
 800ba6a:	e030      	b.n	800bace <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00d      	beq.n	800ba8e <USBD_StdEPReq+0x108>
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	2b80      	cmp	r3, #128	@ 0x80
 800ba76:	d00a      	beq.n	800ba8e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba78:	7bbb      	ldrb	r3, [r7, #14]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f004 f8bf 	bl	800fc00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba82:	2180      	movs	r1, #128	@ 0x80
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f004 f8bb 	bl	800fc00 <USBD_LL_StallEP>
 800ba8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba8c:	e025      	b.n	800bada <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fc33 	bl	800c2fc <USBD_CtlError>
              break;
 800ba96:	e020      	b.n	800bada <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	885b      	ldrh	r3, [r3, #2]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d11b      	bne.n	800bad8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d004      	beq.n	800bab4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	4619      	mov	r1, r3
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f004 f8c5 	bl	800fc3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fcec 	bl	800c492 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	4798      	blx	r3
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bacc:	e004      	b.n	800bad8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fc13 	bl	800c2fc <USBD_CtlError>
              break;
 800bad6:	e000      	b.n	800bada <USBD_StdEPReq+0x154>
              break;
 800bad8:	bf00      	nop
          }
          break;
 800bada:	e0ab      	b.n	800bc34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d002      	beq.n	800baee <USBD_StdEPReq+0x168>
 800bae8:	2b03      	cmp	r3, #3
 800baea:	d032      	beq.n	800bb52 <USBD_StdEPReq+0x1cc>
 800baec:	e097      	b.n	800bc1e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baee:	7bbb      	ldrb	r3, [r7, #14]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d007      	beq.n	800bb04 <USBD_StdEPReq+0x17e>
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
 800baf6:	2b80      	cmp	r3, #128	@ 0x80
 800baf8:	d004      	beq.n	800bb04 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fbfd 	bl	800c2fc <USBD_CtlError>
                break;
 800bb02:	e091      	b.n	800bc28 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	da0b      	bge.n	800bb24 <USBD_StdEPReq+0x19e>
 800bb0c:	7bbb      	ldrb	r3, [r7, #14]
 800bb0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb12:	4613      	mov	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	3310      	adds	r3, #16
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	4413      	add	r3, r2
 800bb20:	3304      	adds	r3, #4
 800bb22:	e00b      	b.n	800bb3c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
 800bb26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4413      	add	r3, r2
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	4413      	add	r3, r2
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	2200      	movs	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2202      	movs	r2, #2
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fc47 	bl	800c3de <USBD_CtlSendData>
              break;
 800bb50:	e06a      	b.n	800bc28 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	da11      	bge.n	800bb7e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb5a:	7bbb      	ldrb	r3, [r7, #14]
 800bb5c:	f003 020f 	and.w	r2, r3, #15
 800bb60:	6879      	ldr	r1, [r7, #4]
 800bb62:	4613      	mov	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	440b      	add	r3, r1
 800bb6c:	3324      	adds	r3, #36	@ 0x24
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d117      	bne.n	800bba4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 fbc0 	bl	800c2fc <USBD_CtlError>
                  break;
 800bb7c:	e054      	b.n	800bc28 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb7e:	7bbb      	ldrb	r3, [r7, #14]
 800bb80:	f003 020f 	and.w	r2, r3, #15
 800bb84:	6879      	ldr	r1, [r7, #4]
 800bb86:	4613      	mov	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	440b      	add	r3, r1
 800bb90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d104      	bne.n	800bba4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fbad 	bl	800c2fc <USBD_CtlError>
                  break;
 800bba2:	e041      	b.n	800bc28 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	da0b      	bge.n	800bbc4 <USBD_StdEPReq+0x23e>
 800bbac:	7bbb      	ldrb	r3, [r7, #14]
 800bbae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	3310      	adds	r3, #16
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	e00b      	b.n	800bbdc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
 800bbc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbca:	4613      	mov	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4413      	add	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	4413      	add	r3, r2
 800bbda:	3304      	adds	r3, #4
 800bbdc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbde:	7bbb      	ldrb	r3, [r7, #14]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d002      	beq.n	800bbea <USBD_StdEPReq+0x264>
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
 800bbe6:	2b80      	cmp	r3, #128	@ 0x80
 800bbe8:	d103      	bne.n	800bbf2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	2200      	movs	r2, #0
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	e00e      	b.n	800bc10 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f004 f840 	bl	800fc7c <USBD_LL_IsStallEP>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	2201      	movs	r2, #1
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	e002      	b.n	800bc10 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	2202      	movs	r2, #2
 800bc14:	4619      	mov	r1, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fbe1 	bl	800c3de <USBD_CtlSendData>
              break;
 800bc1c:	e004      	b.n	800bc28 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fb6b 	bl	800c2fc <USBD_CtlError>
              break;
 800bc26:	bf00      	nop
          }
          break;
 800bc28:	e004      	b.n	800bc34 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fb65 	bl	800c2fc <USBD_CtlError>
          break;
 800bc32:	bf00      	nop
      }
      break;
 800bc34:	e004      	b.n	800bc40 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fb5f 	bl	800c2fc <USBD_CtlError>
      break;
 800bc3e:	bf00      	nop
  }

  return ret;
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
	...

0800bc4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc56:	2300      	movs	r3, #0
 800bc58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	885b      	ldrh	r3, [r3, #2]
 800bc66:	0a1b      	lsrs	r3, r3, #8
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	2b0e      	cmp	r3, #14
 800bc6e:	f200 8152 	bhi.w	800bf16 <USBD_GetDescriptor+0x2ca>
 800bc72:	a201      	add	r2, pc, #4	@ (adr r2, 800bc78 <USBD_GetDescriptor+0x2c>)
 800bc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc78:	0800bce9 	.word	0x0800bce9
 800bc7c:	0800bd01 	.word	0x0800bd01
 800bc80:	0800bd41 	.word	0x0800bd41
 800bc84:	0800bf17 	.word	0x0800bf17
 800bc88:	0800bf17 	.word	0x0800bf17
 800bc8c:	0800beb7 	.word	0x0800beb7
 800bc90:	0800bee3 	.word	0x0800bee3
 800bc94:	0800bf17 	.word	0x0800bf17
 800bc98:	0800bf17 	.word	0x0800bf17
 800bc9c:	0800bf17 	.word	0x0800bf17
 800bca0:	0800bf17 	.word	0x0800bf17
 800bca4:	0800bf17 	.word	0x0800bf17
 800bca8:	0800bf17 	.word	0x0800bf17
 800bcac:	0800bf17 	.word	0x0800bf17
 800bcb0:	0800bcb5 	.word	0x0800bcb5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00b      	beq.n	800bcd8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcc6:	69db      	ldr	r3, [r3, #28]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	7c12      	ldrb	r2, [r2, #16]
 800bccc:	f107 0108 	add.w	r1, r7, #8
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	4798      	blx	r3
 800bcd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcd6:	e126      	b.n	800bf26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fb0e 	bl	800c2fc <USBD_CtlError>
        err++;
 800bce0:	7afb      	ldrb	r3, [r7, #11]
 800bce2:	3301      	adds	r3, #1
 800bce4:	72fb      	strb	r3, [r7, #11]
      break;
 800bce6:	e11e      	b.n	800bf26 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	7c12      	ldrb	r2, [r2, #16]
 800bcf4:	f107 0108 	add.w	r1, r7, #8
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	4798      	blx	r3
 800bcfc:	60f8      	str	r0, [r7, #12]
      break;
 800bcfe:	e112      	b.n	800bf26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	7c1b      	ldrb	r3, [r3, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10d      	bne.n	800bd24 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd10:	f107 0208 	add.w	r2, r7, #8
 800bd14:	4610      	mov	r0, r2
 800bd16:	4798      	blx	r3
 800bd18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	2202      	movs	r2, #2
 800bd20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd22:	e100      	b.n	800bf26 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd2c:	f107 0208 	add.w	r2, r7, #8
 800bd30:	4610      	mov	r0, r2
 800bd32:	4798      	blx	r3
 800bd34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	2202      	movs	r2, #2
 800bd3c:	701a      	strb	r2, [r3, #0]
      break;
 800bd3e:	e0f2      	b.n	800bf26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	885b      	ldrh	r3, [r3, #2]
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	2b05      	cmp	r3, #5
 800bd48:	f200 80ac 	bhi.w	800bea4 <USBD_GetDescriptor+0x258>
 800bd4c:	a201      	add	r2, pc, #4	@ (adr r2, 800bd54 <USBD_GetDescriptor+0x108>)
 800bd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd52:	bf00      	nop
 800bd54:	0800bd6d 	.word	0x0800bd6d
 800bd58:	0800bda1 	.word	0x0800bda1
 800bd5c:	0800bdd5 	.word	0x0800bdd5
 800bd60:	0800be09 	.word	0x0800be09
 800bd64:	0800be3d 	.word	0x0800be3d
 800bd68:	0800be71 	.word	0x0800be71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00b      	beq.n	800bd90 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	7c12      	ldrb	r2, [r2, #16]
 800bd84:	f107 0108 	add.w	r1, r7, #8
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4798      	blx	r3
 800bd8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd8e:	e091      	b.n	800beb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd90:	6839      	ldr	r1, [r7, #0]
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fab2 	bl	800c2fc <USBD_CtlError>
            err++;
 800bd98:	7afb      	ldrb	r3, [r7, #11]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd9e:	e089      	b.n	800beb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00b      	beq.n	800bdc4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	7c12      	ldrb	r2, [r2, #16]
 800bdb8:	f107 0108 	add.w	r1, r7, #8
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4798      	blx	r3
 800bdc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdc2:	e077      	b.n	800beb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa98 	bl	800c2fc <USBD_CtlError>
            err++;
 800bdcc:	7afb      	ldrb	r3, [r7, #11]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	72fb      	strb	r3, [r7, #11]
          break;
 800bdd2:	e06f      	b.n	800beb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00b      	beq.n	800bdf8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	7c12      	ldrb	r2, [r2, #16]
 800bdec:	f107 0108 	add.w	r1, r7, #8
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	4798      	blx	r3
 800bdf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdf6:	e05d      	b.n	800beb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fa7e 	bl	800c2fc <USBD_CtlError>
            err++;
 800be00:	7afb      	ldrb	r3, [r7, #11]
 800be02:	3301      	adds	r3, #1
 800be04:	72fb      	strb	r3, [r7, #11]
          break;
 800be06:	e055      	b.n	800beb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00b      	beq.n	800be2c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	7c12      	ldrb	r2, [r2, #16]
 800be20:	f107 0108 	add.w	r1, r7, #8
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
 800be28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be2a:	e043      	b.n	800beb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fa64 	bl	800c2fc <USBD_CtlError>
            err++;
 800be34:	7afb      	ldrb	r3, [r7, #11]
 800be36:	3301      	adds	r3, #1
 800be38:	72fb      	strb	r3, [r7, #11]
          break;
 800be3a:	e03b      	b.n	800beb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00b      	beq.n	800be60 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	7c12      	ldrb	r2, [r2, #16]
 800be54:	f107 0108 	add.w	r1, r7, #8
 800be58:	4610      	mov	r0, r2
 800be5a:	4798      	blx	r3
 800be5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be5e:	e029      	b.n	800beb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fa4a 	bl	800c2fc <USBD_CtlError>
            err++;
 800be68:	7afb      	ldrb	r3, [r7, #11]
 800be6a:	3301      	adds	r3, #1
 800be6c:	72fb      	strb	r3, [r7, #11]
          break;
 800be6e:	e021      	b.n	800beb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00b      	beq.n	800be94 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	7c12      	ldrb	r2, [r2, #16]
 800be88:	f107 0108 	add.w	r1, r7, #8
 800be8c:	4610      	mov	r0, r2
 800be8e:	4798      	blx	r3
 800be90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be92:	e00f      	b.n	800beb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa30 	bl	800c2fc <USBD_CtlError>
            err++;
 800be9c:	7afb      	ldrb	r3, [r7, #11]
 800be9e:	3301      	adds	r3, #1
 800bea0:	72fb      	strb	r3, [r7, #11]
          break;
 800bea2:	e007      	b.n	800beb4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fa28 	bl	800c2fc <USBD_CtlError>
          err++;
 800beac:	7afb      	ldrb	r3, [r7, #11]
 800beae:	3301      	adds	r3, #1
 800beb0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800beb2:	bf00      	nop
      }
      break;
 800beb4:	e037      	b.n	800bf26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	7c1b      	ldrb	r3, [r3, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d109      	bne.n	800bed2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bec6:	f107 0208 	add.w	r2, r7, #8
 800beca:	4610      	mov	r0, r2
 800becc:	4798      	blx	r3
 800bece:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bed0:	e029      	b.n	800bf26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fa11 	bl	800c2fc <USBD_CtlError>
        err++;
 800beda:	7afb      	ldrb	r3, [r7, #11]
 800bedc:	3301      	adds	r3, #1
 800bede:	72fb      	strb	r3, [r7, #11]
      break;
 800bee0:	e021      	b.n	800bf26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	7c1b      	ldrb	r3, [r3, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10d      	bne.n	800bf06 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bef2:	f107 0208 	add.w	r2, r7, #8
 800bef6:	4610      	mov	r0, r2
 800bef8:	4798      	blx	r3
 800befa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3301      	adds	r3, #1
 800bf00:	2207      	movs	r2, #7
 800bf02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf04:	e00f      	b.n	800bf26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f9f7 	bl	800c2fc <USBD_CtlError>
        err++;
 800bf0e:	7afb      	ldrb	r3, [r7, #11]
 800bf10:	3301      	adds	r3, #1
 800bf12:	72fb      	strb	r3, [r7, #11]
      break;
 800bf14:	e007      	b.n	800bf26 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 f9ef 	bl	800c2fc <USBD_CtlError>
      err++;
 800bf1e:	7afb      	ldrb	r3, [r7, #11]
 800bf20:	3301      	adds	r3, #1
 800bf22:	72fb      	strb	r3, [r7, #11]
      break;
 800bf24:	bf00      	nop
  }

  if (err != 0U)
 800bf26:	7afb      	ldrb	r3, [r7, #11]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d11e      	bne.n	800bf6a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	88db      	ldrh	r3, [r3, #6]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d016      	beq.n	800bf62 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bf34:	893b      	ldrh	r3, [r7, #8]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00e      	beq.n	800bf58 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	88da      	ldrh	r2, [r3, #6]
 800bf3e:	893b      	ldrh	r3, [r7, #8]
 800bf40:	4293      	cmp	r3, r2
 800bf42:	bf28      	it	cs
 800bf44:	4613      	movcs	r3, r2
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf4a:	893b      	ldrh	r3, [r7, #8]
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	68f9      	ldr	r1, [r7, #12]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fa44 	bl	800c3de <USBD_CtlSendData>
 800bf56:	e009      	b.n	800bf6c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf58:	6839      	ldr	r1, [r7, #0]
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 f9ce 	bl	800c2fc <USBD_CtlError>
 800bf60:	e004      	b.n	800bf6c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fa95 	bl	800c492 <USBD_CtlSendStatus>
 800bf68:	e000      	b.n	800bf6c <USBD_GetDescriptor+0x320>
    return;
 800bf6a:	bf00      	nop
  }
}
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop

0800bf74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	889b      	ldrh	r3, [r3, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d131      	bne.n	800bfea <USBD_SetAddress+0x76>
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	88db      	ldrh	r3, [r3, #6]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d12d      	bne.n	800bfea <USBD_SetAddress+0x76>
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	885b      	ldrh	r3, [r3, #2]
 800bf92:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf94:	d829      	bhi.n	800bfea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	885b      	ldrh	r3, [r3, #2]
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d104      	bne.n	800bfb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 f9a3 	bl	800c2fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb6:	e01d      	b.n	800bff4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	7bfa      	ldrb	r2, [r7, #15]
 800bfbc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f003 fe85 	bl	800fcd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fa61 	bl	800c492 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d004      	beq.n	800bfe0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2202      	movs	r2, #2
 800bfda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfde:	e009      	b.n	800bff4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfe8:	e004      	b.n	800bff4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f985 	bl	800c2fc <USBD_CtlError>
  }
}
 800bff2:	bf00      	nop
 800bff4:	bf00      	nop
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c006:	2300      	movs	r3, #0
 800c008:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	885b      	ldrh	r3, [r3, #2]
 800c00e:	b2da      	uxtb	r2, r3
 800c010:	4b4c      	ldr	r3, [pc, #304]	@ (800c144 <USBD_SetConfig+0x148>)
 800c012:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c014:	4b4b      	ldr	r3, [pc, #300]	@ (800c144 <USBD_SetConfig+0x148>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d905      	bls.n	800c028 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f96c 	bl	800c2fc <USBD_CtlError>
    return USBD_FAIL;
 800c024:	2303      	movs	r3, #3
 800c026:	e088      	b.n	800c13a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b02      	cmp	r3, #2
 800c032:	d002      	beq.n	800c03a <USBD_SetConfig+0x3e>
 800c034:	2b03      	cmp	r3, #3
 800c036:	d025      	beq.n	800c084 <USBD_SetConfig+0x88>
 800c038:	e071      	b.n	800c11e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c03a:	4b42      	ldr	r3, [pc, #264]	@ (800c144 <USBD_SetConfig+0x148>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d01c      	beq.n	800c07c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c042:	4b40      	ldr	r3, [pc, #256]	@ (800c144 <USBD_SetConfig+0x148>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	461a      	mov	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c04c:	4b3d      	ldr	r3, [pc, #244]	@ (800c144 <USBD_SetConfig+0x148>)
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	4619      	mov	r1, r3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f7ff f990 	bl	800b378 <USBD_SetClassConfig>
 800c058:	4603      	mov	r3, r0
 800c05a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d004      	beq.n	800c06c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c062:	6839      	ldr	r1, [r7, #0]
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 f949 	bl	800c2fc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c06a:	e065      	b.n	800c138 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fa10 	bl	800c492 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2203      	movs	r2, #3
 800c076:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c07a:	e05d      	b.n	800c138 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fa08 	bl	800c492 <USBD_CtlSendStatus>
      break;
 800c082:	e059      	b.n	800c138 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c084:	4b2f      	ldr	r3, [pc, #188]	@ (800c144 <USBD_SetConfig+0x148>)
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d112      	bne.n	800c0b2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2202      	movs	r2, #2
 800c090:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c094:	4b2b      	ldr	r3, [pc, #172]	@ (800c144 <USBD_SetConfig+0x148>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	461a      	mov	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c09e:	4b29      	ldr	r3, [pc, #164]	@ (800c144 <USBD_SetConfig+0x148>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7ff f983 	bl	800b3b0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f9f1 	bl	800c492 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0b0:	e042      	b.n	800c138 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c0b2:	4b24      	ldr	r3, [pc, #144]	@ (800c144 <USBD_SetConfig+0x148>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d02a      	beq.n	800c116 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff f971 	bl	800b3b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c0ce:	4b1d      	ldr	r3, [pc, #116]	@ (800c144 <USBD_SetConfig+0x148>)
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0d8:	4b1a      	ldr	r3, [pc, #104]	@ (800c144 <USBD_SetConfig+0x148>)
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff f94a 	bl	800b378 <USBD_SetClassConfig>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c0e8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00f      	beq.n	800c10e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f903 	bl	800c2fc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff f956 	bl	800b3b0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2202      	movs	r2, #2
 800c108:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c10c:	e014      	b.n	800c138 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f9bf 	bl	800c492 <USBD_CtlSendStatus>
      break;
 800c114:	e010      	b.n	800c138 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 f9bb 	bl	800c492 <USBD_CtlSendStatus>
      break;
 800c11c:	e00c      	b.n	800c138 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 f8eb 	bl	800c2fc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c126:	4b07      	ldr	r3, [pc, #28]	@ (800c144 <USBD_SetConfig+0x148>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7ff f93f 	bl	800b3b0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c132:	2303      	movs	r3, #3
 800c134:	73fb      	strb	r3, [r7, #15]
      break;
 800c136:	bf00      	nop
  }

  return ret;
 800c138:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	200005a8 	.word	0x200005a8

0800c148 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	88db      	ldrh	r3, [r3, #6]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d004      	beq.n	800c164 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 f8cd 	bl	800c2fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c162:	e023      	b.n	800c1ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	dc02      	bgt.n	800c176 <USBD_GetConfig+0x2e>
 800c170:	2b00      	cmp	r3, #0
 800c172:	dc03      	bgt.n	800c17c <USBD_GetConfig+0x34>
 800c174:	e015      	b.n	800c1a2 <USBD_GetConfig+0x5a>
 800c176:	2b03      	cmp	r3, #3
 800c178:	d00b      	beq.n	800c192 <USBD_GetConfig+0x4a>
 800c17a:	e012      	b.n	800c1a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	3308      	adds	r3, #8
 800c186:	2201      	movs	r2, #1
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f927 	bl	800c3de <USBD_CtlSendData>
        break;
 800c190:	e00c      	b.n	800c1ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	3304      	adds	r3, #4
 800c196:	2201      	movs	r2, #1
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f91f 	bl	800c3de <USBD_CtlSendData>
        break;
 800c1a0:	e004      	b.n	800c1ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 f8a9 	bl	800c2fc <USBD_CtlError>
        break;
 800c1aa:	bf00      	nop
}
 800c1ac:	bf00      	nop
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d81e      	bhi.n	800c20a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	88db      	ldrh	r3, [r3, #6]
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d004      	beq.n	800c1de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c1d4:	6839      	ldr	r1, [r7, #0]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 f890 	bl	800c2fc <USBD_CtlError>
        break;
 800c1dc:	e01a      	b.n	800c214 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d005      	beq.n	800c1fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	f043 0202 	orr.w	r2, r3, #2
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	330c      	adds	r3, #12
 800c1fe:	2202      	movs	r2, #2
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f8eb 	bl	800c3de <USBD_CtlSendData>
      break;
 800c208:	e004      	b.n	800c214 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f875 	bl	800c2fc <USBD_CtlError>
      break;
 800c212:	bf00      	nop
  }
}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	885b      	ldrh	r3, [r3, #2]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d106      	bne.n	800c23c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f92b 	bl	800c492 <USBD_CtlSendStatus>
  }
}
 800c23c:	bf00      	nop
 800c23e:	3708      	adds	r7, #8
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c254:	b2db      	uxtb	r3, r3
 800c256:	3b01      	subs	r3, #1
 800c258:	2b02      	cmp	r3, #2
 800c25a:	d80b      	bhi.n	800c274 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	885b      	ldrh	r3, [r3, #2]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d10c      	bne.n	800c27e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f910 	bl	800c492 <USBD_CtlSendStatus>
      }
      break;
 800c272:	e004      	b.n	800c27e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c274:	6839      	ldr	r1, [r7, #0]
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f840 	bl	800c2fc <USBD_CtlError>
      break;
 800c27c:	e000      	b.n	800c280 <USBD_ClrFeature+0x3c>
      break;
 800c27e:	bf00      	nop
  }
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	781a      	ldrb	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	781a      	ldrb	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f7ff fa90 	bl	800b7d8 <SWAPBYTE>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f7ff fa83 	bl	800b7d8 <SWAPBYTE>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f7ff fa76 	bl	800b7d8 <SWAPBYTE>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	80da      	strh	r2, [r3, #6]
}
 800c2f4:	bf00      	nop
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c306:	2180      	movs	r1, #128	@ 0x80
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f003 fc79 	bl	800fc00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c30e:	2100      	movs	r1, #0
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f003 fc75 	bl	800fc00 <USBD_LL_StallEP>
}
 800c316:	bf00      	nop
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b086      	sub	sp, #24
 800c322:	af00      	add	r7, sp, #0
 800c324:	60f8      	str	r0, [r7, #12]
 800c326:	60b9      	str	r1, [r7, #8]
 800c328:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c32a:	2300      	movs	r3, #0
 800c32c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d036      	beq.n	800c3a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c338:	6938      	ldr	r0, [r7, #16]
 800c33a:	f000 f836 	bl	800c3aa <USBD_GetLen>
 800c33e:	4603      	mov	r3, r0
 800c340:	3301      	adds	r3, #1
 800c342:	b29b      	uxth	r3, r3
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	b29a      	uxth	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	4413      	add	r3, r2
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	7812      	ldrb	r2, [r2, #0]
 800c356:	701a      	strb	r2, [r3, #0]
  idx++;
 800c358:	7dfb      	ldrb	r3, [r7, #23]
 800c35a:	3301      	adds	r3, #1
 800c35c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	4413      	add	r3, r2
 800c364:	2203      	movs	r2, #3
 800c366:	701a      	strb	r2, [r3, #0]
  idx++;
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	3301      	adds	r3, #1
 800c36c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c36e:	e013      	b.n	800c398 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c370:	7dfb      	ldrb	r3, [r7, #23]
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	4413      	add	r3, r2
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	7812      	ldrb	r2, [r2, #0]
 800c37a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	3301      	adds	r3, #1
 800c380:	613b      	str	r3, [r7, #16]
    idx++;
 800c382:	7dfb      	ldrb	r3, [r7, #23]
 800c384:	3301      	adds	r3, #1
 800c386:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c388:	7dfb      	ldrb	r3, [r7, #23]
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	4413      	add	r3, r2
 800c38e:	2200      	movs	r2, #0
 800c390:	701a      	strb	r2, [r3, #0]
    idx++;
 800c392:	7dfb      	ldrb	r3, [r7, #23]
 800c394:	3301      	adds	r3, #1
 800c396:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1e7      	bne.n	800c370 <USBD_GetString+0x52>
 800c3a0:	e000      	b.n	800c3a4 <USBD_GetString+0x86>
    return;
 800c3a2:	bf00      	nop
  }
}
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c3aa:	b480      	push	{r7}
 800c3ac:	b085      	sub	sp, #20
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c3ba:	e005      	b.n	800c3c8 <USBD_GetLen+0x1e>
  {
    len++;
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1f5      	bne.n	800c3bc <USBD_GetLen+0x12>
  }

  return len;
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b084      	sub	sp, #16
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	60f8      	str	r0, [r7, #12]
 800c3e6:	60b9      	str	r1, [r7, #8]
 800c3e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2202      	movs	r2, #2
 800c3ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	2100      	movs	r1, #0
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f003 fc84 	bl	800fd12 <USBD_LL_Transmit>

  return USBD_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	2100      	movs	r1, #0
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	f003 fc73 	bl	800fd12 <USBD_LL_Transmit>

  return USBD_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b084      	sub	sp, #16
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	60b9      	str	r1, [r7, #8]
 800c440:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2203      	movs	r2, #3
 800c446:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	2100      	movs	r1, #0
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f003 fc77 	bl	800fd54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	2100      	movs	r1, #0
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f003 fc66 	bl	800fd54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b082      	sub	sp, #8
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2204      	movs	r2, #4
 800c49e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f003 fc32 	bl	800fd12 <USBD_LL_Transmit>

  return USBD_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2205      	movs	r2, #5
 800c4c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f003 fc40 	bl	800fd54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <__NVIC_SetPriority>:
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	6039      	str	r1, [r7, #0]
 800c4ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c4ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	db0a      	blt.n	800c50a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	490c      	ldr	r1, [pc, #48]	@ (800c52c <__NVIC_SetPriority+0x4c>)
 800c4fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4fe:	0112      	lsls	r2, r2, #4
 800c500:	b2d2      	uxtb	r2, r2
 800c502:	440b      	add	r3, r1
 800c504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c508:	e00a      	b.n	800c520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	4908      	ldr	r1, [pc, #32]	@ (800c530 <__NVIC_SetPriority+0x50>)
 800c510:	79fb      	ldrb	r3, [r7, #7]
 800c512:	f003 030f 	and.w	r3, r3, #15
 800c516:	3b04      	subs	r3, #4
 800c518:	0112      	lsls	r2, r2, #4
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	440b      	add	r3, r1
 800c51e:	761a      	strb	r2, [r3, #24]
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	e000e100 	.word	0xe000e100
 800c530:	e000ed00 	.word	0xe000ed00

0800c534 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c538:	4b05      	ldr	r3, [pc, #20]	@ (800c550 <SysTick_Handler+0x1c>)
 800c53a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c53c:	f001 ff36 	bl	800e3ac <xTaskGetSchedulerState>
 800c540:	4603      	mov	r3, r0
 800c542:	2b01      	cmp	r3, #1
 800c544:	d001      	beq.n	800c54a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c546:	f002 fd2f 	bl	800efa8 <xPortSysTickHandler>
  }
}
 800c54a:	bf00      	nop
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	e000e010 	.word	0xe000e010

0800c554 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c554:	b580      	push	{r7, lr}
 800c556:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c558:	2100      	movs	r1, #0
 800c55a:	f06f 0004 	mvn.w	r0, #4
 800c55e:	f7ff ffbf 	bl	800c4e0 <__NVIC_SetPriority>
#endif
}
 800c562:	bf00      	nop
 800c564:	bd80      	pop	{r7, pc}
	...

0800c568 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c56e:	f3ef 8305 	mrs	r3, IPSR
 800c572:	603b      	str	r3, [r7, #0]
  return(result);
 800c574:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c57a:	f06f 0305 	mvn.w	r3, #5
 800c57e:	607b      	str	r3, [r7, #4]
 800c580:	e00c      	b.n	800c59c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c582:	4b0a      	ldr	r3, [pc, #40]	@ (800c5ac <osKernelInitialize+0x44>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d105      	bne.n	800c596 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c58a:	4b08      	ldr	r3, [pc, #32]	@ (800c5ac <osKernelInitialize+0x44>)
 800c58c:	2201      	movs	r2, #1
 800c58e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c590:	2300      	movs	r3, #0
 800c592:	607b      	str	r3, [r7, #4]
 800c594:	e002      	b.n	800c59c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c596:	f04f 33ff 	mov.w	r3, #4294967295
 800c59a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c59c:	687b      	ldr	r3, [r7, #4]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	200005ac 	.word	0x200005ac

0800c5b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5b6:	f3ef 8305 	mrs	r3, IPSR
 800c5ba:	603b      	str	r3, [r7, #0]
  return(result);
 800c5bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d003      	beq.n	800c5ca <osKernelStart+0x1a>
    stat = osErrorISR;
 800c5c2:	f06f 0305 	mvn.w	r3, #5
 800c5c6:	607b      	str	r3, [r7, #4]
 800c5c8:	e010      	b.n	800c5ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c5ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c5f8 <osKernelStart+0x48>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d109      	bne.n	800c5e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c5d2:	f7ff ffbf 	bl	800c554 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c5d6:	4b08      	ldr	r3, [pc, #32]	@ (800c5f8 <osKernelStart+0x48>)
 800c5d8:	2202      	movs	r2, #2
 800c5da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c5dc:	f001 fa82 	bl	800dae4 <vTaskStartScheduler>
      stat = osOK;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	607b      	str	r3, [r7, #4]
 800c5e4:	e002      	b.n	800c5ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c5ec:	687b      	ldr	r3, [r7, #4]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	200005ac 	.word	0x200005ac

0800c5fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b08e      	sub	sp, #56	@ 0x38
 800c600:	af04      	add	r7, sp, #16
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c608:	2300      	movs	r3, #0
 800c60a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c60c:	f3ef 8305 	mrs	r3, IPSR
 800c610:	617b      	str	r3, [r7, #20]
  return(result);
 800c612:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c614:	2b00      	cmp	r3, #0
 800c616:	d17f      	bne.n	800c718 <osThreadNew+0x11c>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d07c      	beq.n	800c718 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c61e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c622:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c624:	2318      	movs	r3, #24
 800c626:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c628:	2300      	movs	r3, #0
 800c62a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c62c:	f04f 33ff 	mov.w	r3, #4294967295
 800c630:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d045      	beq.n	800c6c4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <osThreadNew+0x4a>
        name = attr->name;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d002      	beq.n	800c654 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d008      	beq.n	800c66c <osThreadNew+0x70>
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	2b38      	cmp	r3, #56	@ 0x38
 800c65e:	d805      	bhi.n	800c66c <osThreadNew+0x70>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	f003 0301 	and.w	r3, r3, #1
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <osThreadNew+0x74>
        return (NULL);
 800c66c:	2300      	movs	r3, #0
 800c66e:	e054      	b.n	800c71a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	695b      	ldr	r3, [r3, #20]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d003      	beq.n	800c680 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	695b      	ldr	r3, [r3, #20]
 800c67c:	089b      	lsrs	r3, r3, #2
 800c67e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00e      	beq.n	800c6a6 <osThreadNew+0xaa>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	2ba7      	cmp	r3, #167	@ 0xa7
 800c68e:	d90a      	bls.n	800c6a6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c694:	2b00      	cmp	r3, #0
 800c696:	d006      	beq.n	800c6a6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <osThreadNew+0xaa>
        mem = 1;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	61bb      	str	r3, [r7, #24]
 800c6a4:	e010      	b.n	800c6c8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10c      	bne.n	800c6c8 <osThreadNew+0xcc>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d108      	bne.n	800c6c8 <osThreadNew+0xcc>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d104      	bne.n	800c6c8 <osThreadNew+0xcc>
          mem = 0;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	61bb      	str	r3, [r7, #24]
 800c6c2:	e001      	b.n	800c6c8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d110      	bne.n	800c6f0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6d6:	9202      	str	r2, [sp, #8]
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	6a3a      	ldr	r2, [r7, #32]
 800c6e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f001 f809 	bl	800d6fc <xTaskCreateStatic>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	613b      	str	r3, [r7, #16]
 800c6ee:	e013      	b.n	800c718 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d110      	bne.n	800c718 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c6f6:	6a3b      	ldr	r3, [r7, #32]
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	f107 0310 	add.w	r3, r7, #16
 800c6fe:	9301      	str	r3, [sp, #4]
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f001 f857 	bl	800d7bc <xTaskCreate>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b01      	cmp	r3, #1
 800c712:	d001      	beq.n	800c718 <osThreadNew+0x11c>
            hTask = NULL;
 800c714:	2300      	movs	r3, #0
 800c716:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c718:	693b      	ldr	r3, [r7, #16]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3728      	adds	r7, #40	@ 0x28
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c722:	b580      	push	{r7, lr}
 800c724:	b084      	sub	sp, #16
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c72a:	f3ef 8305 	mrs	r3, IPSR
 800c72e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c730:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <osDelay+0x1c>
    stat = osErrorISR;
 800c736:	f06f 0305 	mvn.w	r3, #5
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	e007      	b.n	800c74e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c73e:	2300      	movs	r3, #0
 800c740:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d002      	beq.n	800c74e <osDelay+0x2c>
      vTaskDelay(ticks);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f001 f995 	bl	800da78 <vTaskDelay>
    }
  }

  return (stat);
 800c74e:	68fb      	ldr	r3, [r7, #12]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08a      	sub	sp, #40	@ 0x28
 800c75c:	af02      	add	r7, sp, #8
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c764:	2300      	movs	r3, #0
 800c766:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c768:	f3ef 8305 	mrs	r3, IPSR
 800c76c:	613b      	str	r3, [r7, #16]
  return(result);
 800c76e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c770:	2b00      	cmp	r3, #0
 800c772:	d15f      	bne.n	800c834 <osMessageQueueNew+0xdc>
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d05c      	beq.n	800c834 <osMessageQueueNew+0xdc>
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d059      	beq.n	800c834 <osMessageQueueNew+0xdc>
    mem = -1;
 800c780:	f04f 33ff 	mov.w	r3, #4294967295
 800c784:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d029      	beq.n	800c7e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d012      	beq.n	800c7ba <osMessageQueueNew+0x62>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	2b4f      	cmp	r3, #79	@ 0x4f
 800c79a:	d90e      	bls.n	800c7ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00a      	beq.n	800c7ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	695a      	ldr	r2, [r3, #20]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	68b9      	ldr	r1, [r7, #8]
 800c7ac:	fb01 f303 	mul.w	r3, r1, r3
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d302      	bcc.n	800c7ba <osMessageQueueNew+0x62>
        mem = 1;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	61bb      	str	r3, [r7, #24]
 800c7b8:	e014      	b.n	800c7e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d110      	bne.n	800c7e4 <osMessageQueueNew+0x8c>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10c      	bne.n	800c7e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d108      	bne.n	800c7e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	695b      	ldr	r3, [r3, #20]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d104      	bne.n	800c7e4 <osMessageQueueNew+0x8c>
          mem = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	61bb      	str	r3, [r7, #24]
 800c7de:	e001      	b.n	800c7e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d10b      	bne.n	800c802 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	691a      	ldr	r2, [r3, #16]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	9100      	str	r1, [sp, #0]
 800c7f6:	68b9      	ldr	r1, [r7, #8]
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f000 fa31 	bl	800cc60 <xQueueGenericCreateStatic>
 800c7fe:	61f8      	str	r0, [r7, #28]
 800c800:	e008      	b.n	800c814 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d105      	bne.n	800c814 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c808:	2200      	movs	r2, #0
 800c80a:	68b9      	ldr	r1, [r7, #8]
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f000 faa4 	bl	800cd5a <xQueueGenericCreate>
 800c812:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00c      	beq.n	800c834 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	617b      	str	r3, [r7, #20]
 800c826:	e001      	b.n	800c82c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c828:	2300      	movs	r3, #0
 800c82a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c82c:	6979      	ldr	r1, [r7, #20]
 800c82e:	69f8      	ldr	r0, [r7, #28]
 800c830:	f000 ff06 	bl	800d640 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c834:	69fb      	ldr	r3, [r7, #28]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3720      	adds	r7, #32
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
	...

0800c840 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c840:	b580      	push	{r7, lr}
 800c842:	b088      	sub	sp, #32
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	603b      	str	r3, [r7, #0]
 800c84c:	4613      	mov	r3, r2
 800c84e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c854:	2300      	movs	r3, #0
 800c856:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c858:	f3ef 8305 	mrs	r3, IPSR
 800c85c:	617b      	str	r3, [r7, #20]
  return(result);
 800c85e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c860:	2b00      	cmp	r3, #0
 800c862:	d028      	beq.n	800c8b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c864:	69bb      	ldr	r3, [r7, #24]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <osMessageQueuePut+0x36>
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d002      	beq.n	800c876 <osMessageQueuePut+0x36>
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d003      	beq.n	800c87e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c876:	f06f 0303 	mvn.w	r3, #3
 800c87a:	61fb      	str	r3, [r7, #28]
 800c87c:	e038      	b.n	800c8f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c87e:	2300      	movs	r3, #0
 800c880:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c882:	f107 0210 	add.w	r2, r7, #16
 800c886:	2300      	movs	r3, #0
 800c888:	68b9      	ldr	r1, [r7, #8]
 800c88a:	69b8      	ldr	r0, [r7, #24]
 800c88c:	f000 fbc6 	bl	800d01c <xQueueGenericSendFromISR>
 800c890:	4603      	mov	r3, r0
 800c892:	2b01      	cmp	r3, #1
 800c894:	d003      	beq.n	800c89e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c896:	f06f 0302 	mvn.w	r3, #2
 800c89a:	61fb      	str	r3, [r7, #28]
 800c89c:	e028      	b.n	800c8f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d025      	beq.n	800c8f0 <osMessageQueuePut+0xb0>
 800c8a4:	4b15      	ldr	r3, [pc, #84]	@ (800c8fc <osMessageQueuePut+0xbc>)
 800c8a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	e01c      	b.n	800c8f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d002      	beq.n	800c8c2 <osMessageQueuePut+0x82>
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d103      	bne.n	800c8ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c8c2:	f06f 0303 	mvn.w	r3, #3
 800c8c6:	61fb      	str	r3, [r7, #28]
 800c8c8:	e012      	b.n	800c8f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	683a      	ldr	r2, [r7, #0]
 800c8ce:	68b9      	ldr	r1, [r7, #8]
 800c8d0:	69b8      	ldr	r0, [r7, #24]
 800c8d2:	f000 faa1 	bl	800ce18 <xQueueGenericSend>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d009      	beq.n	800c8f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d003      	beq.n	800c8ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c8e2:	f06f 0301 	mvn.w	r3, #1
 800c8e6:	61fb      	str	r3, [r7, #28]
 800c8e8:	e002      	b.n	800c8f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c8ea:	f06f 0302 	mvn.w	r3, #2
 800c8ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c8f0:	69fb      	ldr	r3, [r7, #28]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3720      	adds	r7, #32
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	e000ed04 	.word	0xe000ed04

0800c900 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c900:	b580      	push	{r7, lr}
 800c902:	b088      	sub	sp, #32
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
 800c90c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c912:	2300      	movs	r3, #0
 800c914:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c916:	f3ef 8305 	mrs	r3, IPSR
 800c91a:	617b      	str	r3, [r7, #20]
  return(result);
 800c91c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d028      	beq.n	800c974 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d005      	beq.n	800c934 <osMessageQueueGet+0x34>
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <osMessageQueueGet+0x34>
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d003      	beq.n	800c93c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c934:	f06f 0303 	mvn.w	r3, #3
 800c938:	61fb      	str	r3, [r7, #28]
 800c93a:	e037      	b.n	800c9ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c93c:	2300      	movs	r3, #0
 800c93e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c940:	f107 0310 	add.w	r3, r7, #16
 800c944:	461a      	mov	r2, r3
 800c946:	68b9      	ldr	r1, [r7, #8]
 800c948:	69b8      	ldr	r0, [r7, #24]
 800c94a:	f000 fce7 	bl	800d31c <xQueueReceiveFromISR>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b01      	cmp	r3, #1
 800c952:	d003      	beq.n	800c95c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c954:	f06f 0302 	mvn.w	r3, #2
 800c958:	61fb      	str	r3, [r7, #28]
 800c95a:	e027      	b.n	800c9ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d024      	beq.n	800c9ac <osMessageQueueGet+0xac>
 800c962:	4b15      	ldr	r3, [pc, #84]	@ (800c9b8 <osMessageQueueGet+0xb8>)
 800c964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c968:	601a      	str	r2, [r3, #0]
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	e01b      	b.n	800c9ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <osMessageQueueGet+0x80>
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d103      	bne.n	800c988 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c980:	f06f 0303 	mvn.w	r3, #3
 800c984:	61fb      	str	r3, [r7, #28]
 800c986:	e011      	b.n	800c9ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c988:	683a      	ldr	r2, [r7, #0]
 800c98a:	68b9      	ldr	r1, [r7, #8]
 800c98c:	69b8      	ldr	r0, [r7, #24]
 800c98e:	f000 fbe3 	bl	800d158 <xQueueReceive>
 800c992:	4603      	mov	r3, r0
 800c994:	2b01      	cmp	r3, #1
 800c996:	d009      	beq.n	800c9ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d003      	beq.n	800c9a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c99e:	f06f 0301 	mvn.w	r3, #1
 800c9a2:	61fb      	str	r3, [r7, #28]
 800c9a4:	e002      	b.n	800c9ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c9a6:	f06f 0302 	mvn.w	r3, #2
 800c9aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c9ac:	69fb      	ldr	r3, [r7, #28]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3720      	adds	r7, #32
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	e000ed04 	.word	0xe000ed04

0800c9bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	4a07      	ldr	r2, [pc, #28]	@ (800c9e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c9cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	4a06      	ldr	r2, [pc, #24]	@ (800c9ec <vApplicationGetIdleTaskMemory+0x30>)
 800c9d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c9da:	601a      	str	r2, [r3, #0]
}
 800c9dc:	bf00      	nop
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr
 800c9e8:	200005b0 	.word	0x200005b0
 800c9ec:	20000658 	.word	0x20000658

0800c9f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	4a07      	ldr	r2, [pc, #28]	@ (800ca1c <vApplicationGetTimerTaskMemory+0x2c>)
 800ca00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	4a06      	ldr	r2, [pc, #24]	@ (800ca20 <vApplicationGetTimerTaskMemory+0x30>)
 800ca06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f44f 6283 	mov.w	r2, #1048	@ 0x418
 800ca0e:	601a      	str	r2, [r3, #0]
}
 800ca10:	bf00      	nop
 800ca12:	3714      	adds	r7, #20
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	200015f8 	.word	0x200015f8
 800ca20:	200016a0 	.word	0x200016a0

0800ca24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f103 0208 	add.w	r2, r3, #8
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f103 0208 	add.w	r2, r3, #8
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f103 0208 	add.w	r2, r3, #8
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca72:	bf00      	nop
 800ca74:	370c      	adds	r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b085      	sub	sp, #20
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	689a      	ldr	r2, [r3, #8]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	683a      	ldr	r2, [r7, #0]
 800caa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	601a      	str	r2, [r3, #0]
}
 800caba:	bf00      	nop
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cac6:	b480      	push	{r7}
 800cac8:	b085      	sub	sp, #20
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cadc:	d103      	bne.n	800cae6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	e00c      	b.n	800cb00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	3308      	adds	r3, #8
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	e002      	b.n	800caf4 <vListInsert+0x2e>
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d2f6      	bcs.n	800caee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	685a      	ldr	r2, [r3, #4]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	683a      	ldr	r2, [r7, #0]
 800cb0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	683a      	ldr	r2, [r7, #0]
 800cb1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	1c5a      	adds	r2, r3, #1
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	601a      	str	r2, [r3, #0]
}
 800cb2c:	bf00      	nop
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	6892      	ldr	r2, [r2, #8]
 800cb4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	6852      	ldr	r2, [r2, #4]
 800cb58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d103      	bne.n	800cb6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	689a      	ldr	r2, [r3, #8]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	1e5a      	subs	r2, r3, #1
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3714      	adds	r7, #20
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10b      	bne.n	800cbb8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cbb2:	bf00      	nop
 800cbb4:	bf00      	nop
 800cbb6:	e7fd      	b.n	800cbb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cbb8:	f002 f966 	bl	800ee88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbc4:	68f9      	ldr	r1, [r7, #12]
 800cbc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cbc8:	fb01 f303 	mul.w	r3, r1, r3
 800cbcc:	441a      	add	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	68f9      	ldr	r1, [r7, #12]
 800cbec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cbee:	fb01 f303 	mul.w	r3, r1, r3
 800cbf2:	441a      	add	r2, r3
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	22ff      	movs	r2, #255	@ 0xff
 800cbfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	22ff      	movs	r2, #255	@ 0xff
 800cc04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d114      	bne.n	800cc38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d01a      	beq.n	800cc4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	3310      	adds	r3, #16
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 fa00 	bl	800e020 <xTaskRemoveFromEventList>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d012      	beq.n	800cc4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc26:	4b0d      	ldr	r3, [pc, #52]	@ (800cc5c <xQueueGenericReset+0xd0>)
 800cc28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	e009      	b.n	800cc4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	3310      	adds	r3, #16
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7ff fef1 	bl	800ca24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3324      	adds	r3, #36	@ 0x24
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7ff feec 	bl	800ca24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc4c:	f002 f94e 	bl	800eeec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc50:	2301      	movs	r3, #1
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	e000ed04 	.word	0xe000ed04

0800cc60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b08e      	sub	sp, #56	@ 0x38
 800cc64:	af02      	add	r7, sp, #8
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
 800cc6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10b      	bne.n	800cc8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc86:	bf00      	nop
 800cc88:	bf00      	nop
 800cc8a:	e7fd      	b.n	800cc88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10b      	bne.n	800ccaa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cca4:	bf00      	nop
 800cca6:	bf00      	nop
 800cca8:	e7fd      	b.n	800cca6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d002      	beq.n	800ccb6 <xQueueGenericCreateStatic+0x56>
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d001      	beq.n	800ccba <xQueueGenericCreateStatic+0x5a>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e000      	b.n	800ccbc <xQueueGenericCreateStatic+0x5c>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d10b      	bne.n	800ccd8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	623b      	str	r3, [r7, #32]
}
 800ccd2:	bf00      	nop
 800ccd4:	bf00      	nop
 800ccd6:	e7fd      	b.n	800ccd4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d102      	bne.n	800cce4 <xQueueGenericCreateStatic+0x84>
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <xQueueGenericCreateStatic+0x88>
 800cce4:	2301      	movs	r3, #1
 800cce6:	e000      	b.n	800ccea <xQueueGenericCreateStatic+0x8a>
 800cce8:	2300      	movs	r3, #0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d10b      	bne.n	800cd06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ccee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	61fb      	str	r3, [r7, #28]
}
 800cd00:	bf00      	nop
 800cd02:	bf00      	nop
 800cd04:	e7fd      	b.n	800cd02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd06:	2350      	movs	r3, #80	@ 0x50
 800cd08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2b50      	cmp	r3, #80	@ 0x50
 800cd0e:	d00b      	beq.n	800cd28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	61bb      	str	r3, [r7, #24]
}
 800cd22:	bf00      	nop
 800cd24:	bf00      	nop
 800cd26:	e7fd      	b.n	800cd24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cd2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00d      	beq.n	800cd50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	4613      	mov	r3, r2
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	68b9      	ldr	r1, [r7, #8]
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f000 f840 	bl	800cdd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3730      	adds	r7, #48	@ 0x30
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b08a      	sub	sp, #40	@ 0x28
 800cd5e:	af02      	add	r7, sp, #8
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	4613      	mov	r3, r2
 800cd66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d10b      	bne.n	800cd86 <xQueueGenericCreate+0x2c>
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	613b      	str	r3, [r7, #16]
}
 800cd80:	bf00      	nop
 800cd82:	bf00      	nop
 800cd84:	e7fd      	b.n	800cd82 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	fb02 f303 	mul.w	r3, r2, r3
 800cd8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	3350      	adds	r3, #80	@ 0x50
 800cd94:	4618      	mov	r0, r3
 800cd96:	f002 f999 	bl	800f0cc <pvPortMalloc>
 800cd9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d011      	beq.n	800cdc6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	3350      	adds	r3, #80	@ 0x50
 800cdaa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdb4:	79fa      	ldrb	r2, [r7, #7]
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	4613      	mov	r3, r2
 800cdbc:	697a      	ldr	r2, [r7, #20]
 800cdbe:	68b9      	ldr	r1, [r7, #8]
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f000 f805 	bl	800cdd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdc6:	69bb      	ldr	r3, [r7, #24]
	}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3720      	adds	r7, #32
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
 800cddc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d103      	bne.n	800cdec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cde4:	69bb      	ldr	r3, [r7, #24]
 800cde6:	69ba      	ldr	r2, [r7, #24]
 800cde8:	601a      	str	r2, [r3, #0]
 800cdea:	e002      	b.n	800cdf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cdfe:	2101      	movs	r1, #1
 800ce00:	69b8      	ldr	r0, [r7, #24]
 800ce02:	f7ff fec3 	bl	800cb8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	78fa      	ldrb	r2, [r7, #3]
 800ce0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce0e:	bf00      	nop
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
	...

0800ce18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08e      	sub	sp, #56	@ 0x38
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
 800ce24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ce26:	2300      	movs	r3, #0
 800ce28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10b      	bne.n	800ce4c <xQueueGenericSend+0x34>
	__asm volatile
 800ce34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ce46:	bf00      	nop
 800ce48:	bf00      	nop
 800ce4a:	e7fd      	b.n	800ce48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d103      	bne.n	800ce5a <xQueueGenericSend+0x42>
 800ce52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d101      	bne.n	800ce5e <xQueueGenericSend+0x46>
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	e000      	b.n	800ce60 <xQueueGenericSend+0x48>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10b      	bne.n	800ce7c <xQueueGenericSend+0x64>
	__asm volatile
 800ce64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce68:	f383 8811 	msr	BASEPRI, r3
 800ce6c:	f3bf 8f6f 	isb	sy
 800ce70:	f3bf 8f4f 	dsb	sy
 800ce74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ce76:	bf00      	nop
 800ce78:	bf00      	nop
 800ce7a:	e7fd      	b.n	800ce78 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	d103      	bne.n	800ce8a <xQueueGenericSend+0x72>
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d101      	bne.n	800ce8e <xQueueGenericSend+0x76>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e000      	b.n	800ce90 <xQueueGenericSend+0x78>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10b      	bne.n	800ceac <xQueueGenericSend+0x94>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	623b      	str	r3, [r7, #32]
}
 800cea6:	bf00      	nop
 800cea8:	bf00      	nop
 800ceaa:	e7fd      	b.n	800cea8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceac:	f001 fa7e 	bl	800e3ac <xTaskGetSchedulerState>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d102      	bne.n	800cebc <xQueueGenericSend+0xa4>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <xQueueGenericSend+0xa8>
 800cebc:	2301      	movs	r3, #1
 800cebe:	e000      	b.n	800cec2 <xQueueGenericSend+0xaa>
 800cec0:	2300      	movs	r3, #0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d10b      	bne.n	800cede <xQueueGenericSend+0xc6>
	__asm volatile
 800cec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceca:	f383 8811 	msr	BASEPRI, r3
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	61fb      	str	r3, [r7, #28]
}
 800ced8:	bf00      	nop
 800ceda:	bf00      	nop
 800cedc:	e7fd      	b.n	800ceda <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cede:	f001 ffd3 	bl	800ee88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d302      	bcc.n	800cef4 <xQueueGenericSend+0xdc>
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d129      	bne.n	800cf48 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	68b9      	ldr	r1, [r7, #8]
 800cef8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cefa:	f000 fa91 	bl	800d420 <prvCopyDataToQueue>
 800cefe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d010      	beq.n	800cf2a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0a:	3324      	adds	r3, #36	@ 0x24
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f001 f887 	bl	800e020 <xTaskRemoveFromEventList>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d013      	beq.n	800cf40 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cf18:	4b3f      	ldr	r3, [pc, #252]	@ (800d018 <xQueueGenericSend+0x200>)
 800cf1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	e00a      	b.n	800cf40 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cf2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d007      	beq.n	800cf40 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cf30:	4b39      	ldr	r3, [pc, #228]	@ (800d018 <xQueueGenericSend+0x200>)
 800cf32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cf40:	f001 ffd4 	bl	800eeec <vPortExitCritical>
				return pdPASS;
 800cf44:	2301      	movs	r3, #1
 800cf46:	e063      	b.n	800d010 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d103      	bne.n	800cf56 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf4e:	f001 ffcd 	bl	800eeec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cf52:	2300      	movs	r3, #0
 800cf54:	e05c      	b.n	800d010 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d106      	bne.n	800cf6a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf5c:	f107 0314 	add.w	r3, r7, #20
 800cf60:	4618      	mov	r0, r3
 800cf62:	f001 f8c1 	bl	800e0e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf66:	2301      	movs	r3, #1
 800cf68:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf6a:	f001 ffbf 	bl	800eeec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf6e:	f000 fe29 	bl	800dbc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf72:	f001 ff89 	bl	800ee88 <vPortEnterCritical>
 800cf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf7c:	b25b      	sxtb	r3, r3
 800cf7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf82:	d103      	bne.n	800cf8c <xQueueGenericSend+0x174>
 800cf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf92:	b25b      	sxtb	r3, r3
 800cf94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf98:	d103      	bne.n	800cfa2 <xQueueGenericSend+0x18a>
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfa2:	f001 ffa3 	bl	800eeec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfa6:	1d3a      	adds	r2, r7, #4
 800cfa8:	f107 0314 	add.w	r3, r7, #20
 800cfac:	4611      	mov	r1, r2
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f001 f8b0 	bl	800e114 <xTaskCheckForTimeOut>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d124      	bne.n	800d004 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cfba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfbc:	f000 fb28 	bl	800d610 <prvIsQueueFull>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d018      	beq.n	800cff8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc8:	3310      	adds	r3, #16
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 ffd4 	bl	800df7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cfd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfd6:	f000 fab3 	bl	800d540 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cfda:	f000 fe01 	bl	800dbe0 <xTaskResumeAll>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f47f af7c 	bne.w	800cede <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cfe6:	4b0c      	ldr	r3, [pc, #48]	@ (800d018 <xQueueGenericSend+0x200>)
 800cfe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfec:	601a      	str	r2, [r3, #0]
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	e772      	b.n	800cede <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cffa:	f000 faa1 	bl	800d540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cffe:	f000 fdef 	bl	800dbe0 <xTaskResumeAll>
 800d002:	e76c      	b.n	800cede <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d006:	f000 fa9b 	bl	800d540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d00a:	f000 fde9 	bl	800dbe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d00e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d010:	4618      	mov	r0, r3
 800d012:	3738      	adds	r7, #56	@ 0x38
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	e000ed04 	.word	0xe000ed04

0800d01c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b090      	sub	sp, #64	@ 0x40
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10b      	bne.n	800d04c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d038:	f383 8811 	msr	BASEPRI, r3
 800d03c:	f3bf 8f6f 	isb	sy
 800d040:	f3bf 8f4f 	dsb	sy
 800d044:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d046:	bf00      	nop
 800d048:	bf00      	nop
 800d04a:	e7fd      	b.n	800d048 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d103      	bne.n	800d05a <xQueueGenericSendFromISR+0x3e>
 800d052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d056:	2b00      	cmp	r3, #0
 800d058:	d101      	bne.n	800d05e <xQueueGenericSendFromISR+0x42>
 800d05a:	2301      	movs	r3, #1
 800d05c:	e000      	b.n	800d060 <xQueueGenericSendFromISR+0x44>
 800d05e:	2300      	movs	r3, #0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10b      	bne.n	800d07c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d076:	bf00      	nop
 800d078:	bf00      	nop
 800d07a:	e7fd      	b.n	800d078 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	2b02      	cmp	r3, #2
 800d080:	d103      	bne.n	800d08a <xQueueGenericSendFromISR+0x6e>
 800d082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d086:	2b01      	cmp	r3, #1
 800d088:	d101      	bne.n	800d08e <xQueueGenericSendFromISR+0x72>
 800d08a:	2301      	movs	r3, #1
 800d08c:	e000      	b.n	800d090 <xQueueGenericSendFromISR+0x74>
 800d08e:	2300      	movs	r3, #0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10b      	bne.n	800d0ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d098:	f383 8811 	msr	BASEPRI, r3
 800d09c:	f3bf 8f6f 	isb	sy
 800d0a0:	f3bf 8f4f 	dsb	sy
 800d0a4:	623b      	str	r3, [r7, #32]
}
 800d0a6:	bf00      	nop
 800d0a8:	bf00      	nop
 800d0aa:	e7fd      	b.n	800d0a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0ac:	f001 ffcc 	bl	800f048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d0b0:	f3ef 8211 	mrs	r2, BASEPRI
 800d0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	61fa      	str	r2, [r7, #28]
 800d0c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d0c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d302      	bcc.n	800d0de <xQueueGenericSendFromISR+0xc2>
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d12f      	bne.n	800d13e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d0e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	68b9      	ldr	r1, [r7, #8]
 800d0f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d0f4:	f000 f994 	bl	800d420 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d100:	d112      	bne.n	800d128 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d106:	2b00      	cmp	r3, #0
 800d108:	d016      	beq.n	800d138 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10c:	3324      	adds	r3, #36	@ 0x24
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 ff86 	bl	800e020 <xTaskRemoveFromEventList>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00e      	beq.n	800d138 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00b      	beq.n	800d138 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	601a      	str	r2, [r3, #0]
 800d126:	e007      	b.n	800d138 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d128:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d12c:	3301      	adds	r3, #1
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	b25a      	sxtb	r2, r3
 800d132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d138:	2301      	movs	r3, #1
 800d13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d13c:	e001      	b.n	800d142 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d144:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d14c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d14e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d150:	4618      	mov	r0, r3
 800d152:	3740      	adds	r7, #64	@ 0x40
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08c      	sub	sp, #48	@ 0x30
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d164:	2300      	movs	r3, #0
 800d166:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d10b      	bne.n	800d18a <xQueueReceive+0x32>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	623b      	str	r3, [r7, #32]
}
 800d184:	bf00      	nop
 800d186:	bf00      	nop
 800d188:	e7fd      	b.n	800d186 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d103      	bne.n	800d198 <xQueueReceive+0x40>
 800d190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <xQueueReceive+0x44>
 800d198:	2301      	movs	r3, #1
 800d19a:	e000      	b.n	800d19e <xQueueReceive+0x46>
 800d19c:	2300      	movs	r3, #0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10b      	bne.n	800d1ba <xQueueReceive+0x62>
	__asm volatile
 800d1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a6:	f383 8811 	msr	BASEPRI, r3
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	61fb      	str	r3, [r7, #28]
}
 800d1b4:	bf00      	nop
 800d1b6:	bf00      	nop
 800d1b8:	e7fd      	b.n	800d1b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1ba:	f001 f8f7 	bl	800e3ac <xTaskGetSchedulerState>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d102      	bne.n	800d1ca <xQueueReceive+0x72>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d101      	bne.n	800d1ce <xQueueReceive+0x76>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e000      	b.n	800d1d0 <xQueueReceive+0x78>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10b      	bne.n	800d1ec <xQueueReceive+0x94>
	__asm volatile
 800d1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	61bb      	str	r3, [r7, #24]
}
 800d1e6:	bf00      	nop
 800d1e8:	bf00      	nop
 800d1ea:	e7fd      	b.n	800d1e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1ec:	f001 fe4c 	bl	800ee88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d01f      	beq.n	800d23c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1fc:	68b9      	ldr	r1, [r7, #8]
 800d1fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d200:	f000 f978 	bl	800d4f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d206:	1e5a      	subs	r2, r3, #1
 800d208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00f      	beq.n	800d234 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d216:	3310      	adds	r3, #16
 800d218:	4618      	mov	r0, r3
 800d21a:	f000 ff01 	bl	800e020 <xTaskRemoveFromEventList>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d007      	beq.n	800d234 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d224:	4b3c      	ldr	r3, [pc, #240]	@ (800d318 <xQueueReceive+0x1c0>)
 800d226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d22a:	601a      	str	r2, [r3, #0]
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d234:	f001 fe5a 	bl	800eeec <vPortExitCritical>
				return pdPASS;
 800d238:	2301      	movs	r3, #1
 800d23a:	e069      	b.n	800d310 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d103      	bne.n	800d24a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d242:	f001 fe53 	bl	800eeec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d246:	2300      	movs	r3, #0
 800d248:	e062      	b.n	800d310 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d106      	bne.n	800d25e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d250:	f107 0310 	add.w	r3, r7, #16
 800d254:	4618      	mov	r0, r3
 800d256:	f000 ff47 	bl	800e0e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d25a:	2301      	movs	r3, #1
 800d25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d25e:	f001 fe45 	bl	800eeec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d262:	f000 fcaf 	bl	800dbc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d266:	f001 fe0f 	bl	800ee88 <vPortEnterCritical>
 800d26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d26c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d270:	b25b      	sxtb	r3, r3
 800d272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d276:	d103      	bne.n	800d280 <xQueueReceive+0x128>
 800d278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27a:	2200      	movs	r2, #0
 800d27c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d282:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d286:	b25b      	sxtb	r3, r3
 800d288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28c:	d103      	bne.n	800d296 <xQueueReceive+0x13e>
 800d28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d290:	2200      	movs	r2, #0
 800d292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d296:	f001 fe29 	bl	800eeec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d29a:	1d3a      	adds	r2, r7, #4
 800d29c:	f107 0310 	add.w	r3, r7, #16
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 ff36 	bl	800e114 <xTaskCheckForTimeOut>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d123      	bne.n	800d2f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2b0:	f000 f998 	bl	800d5e4 <prvIsQueueEmpty>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d017      	beq.n	800d2ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2bc:	3324      	adds	r3, #36	@ 0x24
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 fe5a 	bl	800df7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2ca:	f000 f939 	bl	800d540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2ce:	f000 fc87 	bl	800dbe0 <xTaskResumeAll>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d189      	bne.n	800d1ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d2d8:	4b0f      	ldr	r3, [pc, #60]	@ (800d318 <xQueueReceive+0x1c0>)
 800d2da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	e780      	b.n	800d1ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d2ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2ec:	f000 f928 	bl	800d540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2f0:	f000 fc76 	bl	800dbe0 <xTaskResumeAll>
 800d2f4:	e77a      	b.n	800d1ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d2f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2f8:	f000 f922 	bl	800d540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2fc:	f000 fc70 	bl	800dbe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d300:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d302:	f000 f96f 	bl	800d5e4 <prvIsQueueEmpty>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f43f af6f 	beq.w	800d1ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d30e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d310:	4618      	mov	r0, r3
 800d312:	3730      	adds	r7, #48	@ 0x30
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	e000ed04 	.word	0xe000ed04

0800d31c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b08e      	sub	sp, #56	@ 0x38
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d10b      	bne.n	800d34a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d336:	f383 8811 	msr	BASEPRI, r3
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	623b      	str	r3, [r7, #32]
}
 800d344:	bf00      	nop
 800d346:	bf00      	nop
 800d348:	e7fd      	b.n	800d346 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d103      	bne.n	800d358 <xQueueReceiveFromISR+0x3c>
 800d350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d354:	2b00      	cmp	r3, #0
 800d356:	d101      	bne.n	800d35c <xQueueReceiveFromISR+0x40>
 800d358:	2301      	movs	r3, #1
 800d35a:	e000      	b.n	800d35e <xQueueReceiveFromISR+0x42>
 800d35c:	2300      	movs	r3, #0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d10b      	bne.n	800d37a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d366:	f383 8811 	msr	BASEPRI, r3
 800d36a:	f3bf 8f6f 	isb	sy
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	61fb      	str	r3, [r7, #28]
}
 800d374:	bf00      	nop
 800d376:	bf00      	nop
 800d378:	e7fd      	b.n	800d376 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d37a:	f001 fe65 	bl	800f048 <vPortValidateInterruptPriority>
	__asm volatile
 800d37e:	f3ef 8211 	mrs	r2, BASEPRI
 800d382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	61ba      	str	r2, [r7, #24]
 800d394:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d396:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d398:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d39e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d02f      	beq.n	800d406 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d3ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d3b0:	68b9      	ldr	r1, [r7, #8]
 800d3b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3b4:	f000 f89e 	bl	800d4f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ba:	1e5a      	subs	r2, r3, #1
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d3c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c8:	d112      	bne.n	800d3f0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d016      	beq.n	800d400 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d4:	3310      	adds	r3, #16
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 fe22 	bl	800e020 <xTaskRemoveFromEventList>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00e      	beq.n	800d400 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00b      	beq.n	800d400 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	e007      	b.n	800d400 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	b25a      	sxtb	r2, r3
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d400:	2301      	movs	r3, #1
 800d402:	637b      	str	r3, [r7, #52]	@ 0x34
 800d404:	e001      	b.n	800d40a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d406:	2300      	movs	r3, #0
 800d408:	637b      	str	r3, [r7, #52]	@ 0x34
 800d40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	f383 8811 	msr	BASEPRI, r3
}
 800d414:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3738      	adds	r7, #56	@ 0x38
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d42c:	2300      	movs	r3, #0
 800d42e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d434:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10d      	bne.n	800d45a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d14d      	bne.n	800d4e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 ffcc 	bl	800e3e8 <xTaskPriorityDisinherit>
 800d450:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	609a      	str	r2, [r3, #8]
 800d458:	e043      	b.n	800d4e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d119      	bne.n	800d494 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	6858      	ldr	r0, [r3, #4]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d468:	461a      	mov	r2, r3
 800d46a:	68b9      	ldr	r1, [r7, #8]
 800d46c:	f003 fb7f 	bl	8010b6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	685a      	ldr	r2, [r3, #4]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d478:	441a      	add	r2, r3
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	685a      	ldr	r2, [r3, #4]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	429a      	cmp	r2, r3
 800d488:	d32b      	bcc.n	800d4e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	605a      	str	r2, [r3, #4]
 800d492:	e026      	b.n	800d4e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	68d8      	ldr	r0, [r3, #12]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d49c:	461a      	mov	r2, r3
 800d49e:	68b9      	ldr	r1, [r7, #8]
 800d4a0:	f003 fb65 	bl	8010b6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	68da      	ldr	r2, [r3, #12]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ac:	425b      	negs	r3, r3
 800d4ae:	441a      	add	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	68da      	ldr	r2, [r3, #12]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d207      	bcs.n	800d4d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	689a      	ldr	r2, [r3, #8]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4c8:	425b      	negs	r3, r3
 800d4ca:	441a      	add	r2, r3
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d105      	bne.n	800d4e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	1c5a      	adds	r2, r3, #1
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d4ea:	697b      	ldr	r3, [r7, #20]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d502:	2b00      	cmp	r3, #0
 800d504:	d018      	beq.n	800d538 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	68da      	ldr	r2, [r3, #12]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d50e:	441a      	add	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68da      	ldr	r2, [r3, #12]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d303      	bcc.n	800d528 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	68d9      	ldr	r1, [r3, #12]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d530:	461a      	mov	r2, r3
 800d532:	6838      	ldr	r0, [r7, #0]
 800d534:	f003 fb1b 	bl	8010b6e <memcpy>
	}
}
 800d538:	bf00      	nop
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d548:	f001 fc9e 	bl	800ee88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d552:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d554:	e011      	b.n	800d57a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d012      	beq.n	800d584 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	3324      	adds	r3, #36	@ 0x24
 800d562:	4618      	mov	r0, r3
 800d564:	f000 fd5c 	bl	800e020 <xTaskRemoveFromEventList>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d001      	beq.n	800d572 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d56e:	f000 fe35 	bl	800e1dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d572:	7bfb      	ldrb	r3, [r7, #15]
 800d574:	3b01      	subs	r3, #1
 800d576:	b2db      	uxtb	r3, r3
 800d578:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	dce9      	bgt.n	800d556 <prvUnlockQueue+0x16>
 800d582:	e000      	b.n	800d586 <prvUnlockQueue+0x46>
					break;
 800d584:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	22ff      	movs	r2, #255	@ 0xff
 800d58a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d58e:	f001 fcad 	bl	800eeec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d592:	f001 fc79 	bl	800ee88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d59c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d59e:	e011      	b.n	800d5c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d012      	beq.n	800d5ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3310      	adds	r3, #16
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f000 fd37 	bl	800e020 <xTaskRemoveFromEventList>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d5b8:	f000 fe10 	bl	800e1dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d5bc:	7bbb      	ldrb	r3, [r7, #14]
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	dce9      	bgt.n	800d5a0 <prvUnlockQueue+0x60>
 800d5cc:	e000      	b.n	800d5d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d5ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	22ff      	movs	r2, #255	@ 0xff
 800d5d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d5d8:	f001 fc88 	bl	800eeec <vPortExitCritical>
}
 800d5dc:	bf00      	nop
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5ec:	f001 fc4c 	bl	800ee88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d102      	bne.n	800d5fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	60fb      	str	r3, [r7, #12]
 800d5fc:	e001      	b.n	800d602 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d5fe:	2300      	movs	r3, #0
 800d600:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d602:	f001 fc73 	bl	800eeec <vPortExitCritical>

	return xReturn;
 800d606:	68fb      	ldr	r3, [r7, #12]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d618:	f001 fc36 	bl	800ee88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d624:	429a      	cmp	r2, r3
 800d626:	d102      	bne.n	800d62e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d628:	2301      	movs	r3, #1
 800d62a:	60fb      	str	r3, [r7, #12]
 800d62c:	e001      	b.n	800d632 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d62e:	2300      	movs	r3, #0
 800d630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d632:	f001 fc5b 	bl	800eeec <vPortExitCritical>

	return xReturn;
 800d636:	68fb      	ldr	r3, [r7, #12]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d64a:	2300      	movs	r3, #0
 800d64c:	60fb      	str	r3, [r7, #12]
 800d64e:	e014      	b.n	800d67a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d650:	4a0f      	ldr	r2, [pc, #60]	@ (800d690 <vQueueAddToRegistry+0x50>)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10b      	bne.n	800d674 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d65c:	490c      	ldr	r1, [pc, #48]	@ (800d690 <vQueueAddToRegistry+0x50>)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d666:	4a0a      	ldr	r2, [pc, #40]	@ (800d690 <vQueueAddToRegistry+0x50>)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	4413      	add	r3, r2
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d672:	e006      	b.n	800d682 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	3301      	adds	r3, #1
 800d678:	60fb      	str	r3, [r7, #12]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b07      	cmp	r3, #7
 800d67e:	d9e7      	bls.n	800d650 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d680:	bf00      	nop
 800d682:	bf00      	nop
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	20002700 	.word	0x20002700

0800d694 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d6a4:	f001 fbf0 	bl	800ee88 <vPortEnterCritical>
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6ae:	b25b      	sxtb	r3, r3
 800d6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b4:	d103      	bne.n	800d6be <vQueueWaitForMessageRestricted+0x2a>
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6c4:	b25b      	sxtb	r3, r3
 800d6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ca:	d103      	bne.n	800d6d4 <vQueueWaitForMessageRestricted+0x40>
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6d4:	f001 fc0a 	bl	800eeec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d106      	bne.n	800d6ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	3324      	adds	r3, #36	@ 0x24
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	68b9      	ldr	r1, [r7, #8]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 fc6d 	bl	800dfc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d6ee:	6978      	ldr	r0, [r7, #20]
 800d6f0:	f7ff ff26 	bl	800d540 <prvUnlockQueue>
	}
 800d6f4:	bf00      	nop
 800d6f6:	3718      	adds	r7, #24
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08e      	sub	sp, #56	@ 0x38
 800d700:	af04      	add	r7, sp, #16
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
 800d708:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10b      	bne.n	800d728 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	623b      	str	r3, [r7, #32]
}
 800d722:	bf00      	nop
 800d724:	bf00      	nop
 800d726:	e7fd      	b.n	800d724 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10b      	bne.n	800d746 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	61fb      	str	r3, [r7, #28]
}
 800d740:	bf00      	nop
 800d742:	bf00      	nop
 800d744:	e7fd      	b.n	800d742 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d746:	23a8      	movs	r3, #168	@ 0xa8
 800d748:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	2ba8      	cmp	r3, #168	@ 0xa8
 800d74e:	d00b      	beq.n	800d768 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	61bb      	str	r3, [r7, #24]
}
 800d762:	bf00      	nop
 800d764:	bf00      	nop
 800d766:	e7fd      	b.n	800d764 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d768:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d01e      	beq.n	800d7ae <xTaskCreateStatic+0xb2>
 800d770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d772:	2b00      	cmp	r3, #0
 800d774:	d01b      	beq.n	800d7ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d778:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d77e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d782:	2202      	movs	r2, #2
 800d784:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d788:	2300      	movs	r3, #0
 800d78a:	9303      	str	r3, [sp, #12]
 800d78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78e:	9302      	str	r3, [sp, #8]
 800d790:	f107 0314 	add.w	r3, r7, #20
 800d794:	9301      	str	r3, [sp, #4]
 800d796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	68b9      	ldr	r1, [r7, #8]
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 f851 	bl	800d848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7a8:	f000 f8f6 	bl	800d998 <prvAddNewTaskToReadyList>
 800d7ac:	e001      	b.n	800d7b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d7b2:	697b      	ldr	r3, [r7, #20]
	}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3728      	adds	r7, #40	@ 0x28
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b08c      	sub	sp, #48	@ 0x30
 800d7c0:	af04      	add	r7, sp, #16
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	603b      	str	r3, [r7, #0]
 800d7c8:	4613      	mov	r3, r2
 800d7ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7cc:	88fb      	ldrh	r3, [r7, #6]
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f001 fc7b 	bl	800f0cc <pvPortMalloc>
 800d7d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00e      	beq.n	800d7fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7de:	20a8      	movs	r0, #168	@ 0xa8
 800d7e0:	f001 fc74 	bl	800f0cc <pvPortMalloc>
 800d7e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d003      	beq.n	800d7f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	697a      	ldr	r2, [r7, #20]
 800d7f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800d7f2:	e005      	b.n	800d800 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7f4:	6978      	ldr	r0, [r7, #20]
 800d7f6:	f001 fd37 	bl	800f268 <vPortFree>
 800d7fa:	e001      	b.n	800d800 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d017      	beq.n	800d836 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d80e:	88fa      	ldrh	r2, [r7, #6]
 800d810:	2300      	movs	r3, #0
 800d812:	9303      	str	r3, [sp, #12]
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	9302      	str	r3, [sp, #8]
 800d818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	68b9      	ldr	r1, [r7, #8]
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f000 f80f 	bl	800d848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d82a:	69f8      	ldr	r0, [r7, #28]
 800d82c:	f000 f8b4 	bl	800d998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d830:	2301      	movs	r3, #1
 800d832:	61bb      	str	r3, [r7, #24]
 800d834:	e002      	b.n	800d83c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d836:	f04f 33ff 	mov.w	r3, #4294967295
 800d83a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d83c:	69bb      	ldr	r3, [r7, #24]
	}
 800d83e:	4618      	mov	r0, r3
 800d840:	3720      	adds	r7, #32
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
	...

0800d848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]
 800d854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d858:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	461a      	mov	r2, r3
 800d860:	21a5      	movs	r1, #165	@ 0xa5
 800d862:	f003 f8a7 	bl	80109b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d870:	3b01      	subs	r3, #1
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	4413      	add	r3, r2
 800d876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	f023 0307 	bic.w	r3, r3, #7
 800d87e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	f003 0307 	and.w	r3, r3, #7
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00b      	beq.n	800d8a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	617b      	str	r3, [r7, #20]
}
 800d89c:	bf00      	nop
 800d89e:	bf00      	nop
 800d8a0:	e7fd      	b.n	800d89e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d01f      	beq.n	800d8e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	61fb      	str	r3, [r7, #28]
 800d8ac:	e012      	b.n	800d8d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d8ae:	68ba      	ldr	r2, [r7, #8]
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	7819      	ldrb	r1, [r3, #0]
 800d8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	3334      	adds	r3, #52	@ 0x34
 800d8be:	460a      	mov	r2, r1
 800d8c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d006      	beq.n	800d8dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	61fb      	str	r3, [r7, #28]
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	2b0f      	cmp	r3, #15
 800d8d8:	d9e9      	bls.n	800d8ae <prvInitialiseNewTask+0x66>
 800d8da:	e000      	b.n	800d8de <prvInitialiseNewTask+0x96>
			{
				break;
 800d8dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d8e6:	e003      	b.n	800d8f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f2:	2b37      	cmp	r3, #55	@ 0x37
 800d8f4:	d901      	bls.n	800d8fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8f6:	2337      	movs	r3, #55	@ 0x37
 800d8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d904:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d908:	2200      	movs	r2, #0
 800d90a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d90e:	3304      	adds	r3, #4
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff f8a7 	bl	800ca64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d918:	3318      	adds	r3, #24
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7ff f8a2 	bl	800ca64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d924:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d928:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d92e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d934:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d938:	2200      	movs	r2, #0
 800d93a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d940:	2200      	movs	r2, #0
 800d942:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d948:	3354      	adds	r3, #84	@ 0x54
 800d94a:	224c      	movs	r2, #76	@ 0x4c
 800d94c:	2100      	movs	r1, #0
 800d94e:	4618      	mov	r0, r3
 800d950:	f003 f830 	bl	80109b4 <memset>
 800d954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d956:	4a0d      	ldr	r2, [pc, #52]	@ (800d98c <prvInitialiseNewTask+0x144>)
 800d958:	659a      	str	r2, [r3, #88]	@ 0x58
 800d95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95c:	4a0c      	ldr	r2, [pc, #48]	@ (800d990 <prvInitialiseNewTask+0x148>)
 800d95e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d962:	4a0c      	ldr	r2, [pc, #48]	@ (800d994 <prvInitialiseNewTask+0x14c>)
 800d964:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d966:	683a      	ldr	r2, [r7, #0]
 800d968:	68f9      	ldr	r1, [r7, #12]
 800d96a:	69b8      	ldr	r0, [r7, #24]
 800d96c:	f001 f95a 	bl	800ec24 <pxPortInitialiseStack>
 800d970:	4602      	mov	r2, r0
 800d972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d974:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d002      	beq.n	800d982 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d97e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d982:	bf00      	nop
 800d984:	3720      	adds	r7, #32
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	200102e0 	.word	0x200102e0
 800d990:	20010348 	.word	0x20010348
 800d994:	200103b0 	.word	0x200103b0

0800d998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9a0:	f001 fa72 	bl	800ee88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9a4:	4b2d      	ldr	r3, [pc, #180]	@ (800da5c <prvAddNewTaskToReadyList+0xc4>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	4a2c      	ldr	r2, [pc, #176]	@ (800da5c <prvAddNewTaskToReadyList+0xc4>)
 800d9ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9ae:	4b2c      	ldr	r3, [pc, #176]	@ (800da60 <prvAddNewTaskToReadyList+0xc8>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d109      	bne.n	800d9ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9b6:	4a2a      	ldr	r2, [pc, #168]	@ (800da60 <prvAddNewTaskToReadyList+0xc8>)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9bc:	4b27      	ldr	r3, [pc, #156]	@ (800da5c <prvAddNewTaskToReadyList+0xc4>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d110      	bne.n	800d9e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9c4:	f000 fc2e 	bl	800e224 <prvInitialiseTaskLists>
 800d9c8:	e00d      	b.n	800d9e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d9ca:	4b26      	ldr	r3, [pc, #152]	@ (800da64 <prvAddNewTaskToReadyList+0xcc>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d109      	bne.n	800d9e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9d2:	4b23      	ldr	r3, [pc, #140]	@ (800da60 <prvAddNewTaskToReadyList+0xc8>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d802      	bhi.n	800d9e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9e0:	4a1f      	ldr	r2, [pc, #124]	@ (800da60 <prvAddNewTaskToReadyList+0xc8>)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9e6:	4b20      	ldr	r3, [pc, #128]	@ (800da68 <prvAddNewTaskToReadyList+0xd0>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	4a1e      	ldr	r2, [pc, #120]	@ (800da68 <prvAddNewTaskToReadyList+0xd0>)
 800d9ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d9f0:	4b1d      	ldr	r3, [pc, #116]	@ (800da68 <prvAddNewTaskToReadyList+0xd0>)
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9fc:	4b1b      	ldr	r3, [pc, #108]	@ (800da6c <prvAddNewTaskToReadyList+0xd4>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	429a      	cmp	r2, r3
 800da02:	d903      	bls.n	800da0c <prvAddNewTaskToReadyList+0x74>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da08:	4a18      	ldr	r2, [pc, #96]	@ (800da6c <prvAddNewTaskToReadyList+0xd4>)
 800da0a:	6013      	str	r3, [r2, #0]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da10:	4613      	mov	r3, r2
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	4413      	add	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4a15      	ldr	r2, [pc, #84]	@ (800da70 <prvAddNewTaskToReadyList+0xd8>)
 800da1a:	441a      	add	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	3304      	adds	r3, #4
 800da20:	4619      	mov	r1, r3
 800da22:	4610      	mov	r0, r2
 800da24:	f7ff f82b 	bl	800ca7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da28:	f001 fa60 	bl	800eeec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da2c:	4b0d      	ldr	r3, [pc, #52]	@ (800da64 <prvAddNewTaskToReadyList+0xcc>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00e      	beq.n	800da52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da34:	4b0a      	ldr	r3, [pc, #40]	@ (800da60 <prvAddNewTaskToReadyList+0xc8>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3e:	429a      	cmp	r2, r3
 800da40:	d207      	bcs.n	800da52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da42:	4b0c      	ldr	r3, [pc, #48]	@ (800da74 <prvAddNewTaskToReadyList+0xdc>)
 800da44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da48:	601a      	str	r2, [r3, #0]
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da52:	bf00      	nop
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20002c14 	.word	0x20002c14
 800da60:	20002740 	.word	0x20002740
 800da64:	20002c20 	.word	0x20002c20
 800da68:	20002c30 	.word	0x20002c30
 800da6c:	20002c1c 	.word	0x20002c1c
 800da70:	20002744 	.word	0x20002744
 800da74:	e000ed04 	.word	0xe000ed04

0800da78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da80:	2300      	movs	r3, #0
 800da82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d018      	beq.n	800dabc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da8a:	4b14      	ldr	r3, [pc, #80]	@ (800dadc <vTaskDelay+0x64>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00b      	beq.n	800daaa <vTaskDelay+0x32>
	__asm volatile
 800da92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	60bb      	str	r3, [r7, #8]
}
 800daa4:	bf00      	nop
 800daa6:	bf00      	nop
 800daa8:	e7fd      	b.n	800daa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800daaa:	f000 f88b 	bl	800dbc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800daae:	2100      	movs	r1, #0
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fd09 	bl	800e4c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dab6:	f000 f893 	bl	800dbe0 <xTaskResumeAll>
 800daba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d107      	bne.n	800dad2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dac2:	4b07      	ldr	r3, [pc, #28]	@ (800dae0 <vTaskDelay+0x68>)
 800dac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dac8:	601a      	str	r2, [r3, #0]
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dad2:	bf00      	nop
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	20002c3c 	.word	0x20002c3c
 800dae0:	e000ed04 	.word	0xe000ed04

0800dae4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b08a      	sub	sp, #40	@ 0x28
 800dae8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800daea:	2300      	movs	r3, #0
 800daec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800daf2:	463a      	mov	r2, r7
 800daf4:	1d39      	adds	r1, r7, #4
 800daf6:	f107 0308 	add.w	r3, r7, #8
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fe ff5e 	bl	800c9bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800db00:	6839      	ldr	r1, [r7, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	9202      	str	r2, [sp, #8]
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	2300      	movs	r3, #0
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	2300      	movs	r3, #0
 800db10:	460a      	mov	r2, r1
 800db12:	4924      	ldr	r1, [pc, #144]	@ (800dba4 <vTaskStartScheduler+0xc0>)
 800db14:	4824      	ldr	r0, [pc, #144]	@ (800dba8 <vTaskStartScheduler+0xc4>)
 800db16:	f7ff fdf1 	bl	800d6fc <xTaskCreateStatic>
 800db1a:	4603      	mov	r3, r0
 800db1c:	4a23      	ldr	r2, [pc, #140]	@ (800dbac <vTaskStartScheduler+0xc8>)
 800db1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db20:	4b22      	ldr	r3, [pc, #136]	@ (800dbac <vTaskStartScheduler+0xc8>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d002      	beq.n	800db2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db28:	2301      	movs	r3, #1
 800db2a:	617b      	str	r3, [r7, #20]
 800db2c:	e001      	b.n	800db32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db2e:	2300      	movs	r3, #0
 800db30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d102      	bne.n	800db3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db38:	f000 fd1a 	bl	800e570 <xTimerCreateTimerTask>
 800db3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	2b01      	cmp	r3, #1
 800db42:	d11b      	bne.n	800db7c <vTaskStartScheduler+0x98>
	__asm volatile
 800db44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	613b      	str	r3, [r7, #16]
}
 800db56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db58:	4b15      	ldr	r3, [pc, #84]	@ (800dbb0 <vTaskStartScheduler+0xcc>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	3354      	adds	r3, #84	@ 0x54
 800db5e:	4a15      	ldr	r2, [pc, #84]	@ (800dbb4 <vTaskStartScheduler+0xd0>)
 800db60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db62:	4b15      	ldr	r3, [pc, #84]	@ (800dbb8 <vTaskStartScheduler+0xd4>)
 800db64:	f04f 32ff 	mov.w	r2, #4294967295
 800db68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db6a:	4b14      	ldr	r3, [pc, #80]	@ (800dbbc <vTaskStartScheduler+0xd8>)
 800db6c:	2201      	movs	r2, #1
 800db6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db70:	4b13      	ldr	r3, [pc, #76]	@ (800dbc0 <vTaskStartScheduler+0xdc>)
 800db72:	2200      	movs	r2, #0
 800db74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db76:	f001 f8e3 	bl	800ed40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db7a:	e00f      	b.n	800db9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db82:	d10b      	bne.n	800db9c <vTaskStartScheduler+0xb8>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	60fb      	str	r3, [r7, #12]
}
 800db96:	bf00      	nop
 800db98:	bf00      	nop
 800db9a:	e7fd      	b.n	800db98 <vTaskStartScheduler+0xb4>
}
 800db9c:	bf00      	nop
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	08012ec8 	.word	0x08012ec8
 800dba8:	0800e1f5 	.word	0x0800e1f5
 800dbac:	20002c38 	.word	0x20002c38
 800dbb0:	20002740 	.word	0x20002740
 800dbb4:	20000194 	.word	0x20000194
 800dbb8:	20002c34 	.word	0x20002c34
 800dbbc:	20002c20 	.word	0x20002c20
 800dbc0:	20002c18 	.word	0x20002c18

0800dbc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dbc8:	4b04      	ldr	r3, [pc, #16]	@ (800dbdc <vTaskSuspendAll+0x18>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	4a03      	ldr	r2, [pc, #12]	@ (800dbdc <vTaskSuspendAll+0x18>)
 800dbd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dbd2:	bf00      	nop
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	20002c3c 	.word	0x20002c3c

0800dbe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dbea:	2300      	movs	r3, #0
 800dbec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dbee:	4b42      	ldr	r3, [pc, #264]	@ (800dcf8 <xTaskResumeAll+0x118>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10b      	bne.n	800dc0e <xTaskResumeAll+0x2e>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	603b      	str	r3, [r7, #0]
}
 800dc08:	bf00      	nop
 800dc0a:	bf00      	nop
 800dc0c:	e7fd      	b.n	800dc0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dc0e:	f001 f93b 	bl	800ee88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dc12:	4b39      	ldr	r3, [pc, #228]	@ (800dcf8 <xTaskResumeAll+0x118>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3b01      	subs	r3, #1
 800dc18:	4a37      	ldr	r2, [pc, #220]	@ (800dcf8 <xTaskResumeAll+0x118>)
 800dc1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc1c:	4b36      	ldr	r3, [pc, #216]	@ (800dcf8 <xTaskResumeAll+0x118>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d162      	bne.n	800dcea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc24:	4b35      	ldr	r3, [pc, #212]	@ (800dcfc <xTaskResumeAll+0x11c>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d05e      	beq.n	800dcea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc2c:	e02f      	b.n	800dc8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc2e:	4b34      	ldr	r3, [pc, #208]	@ (800dd00 <xTaskResumeAll+0x120>)
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	3318      	adds	r3, #24
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe ff7c 	bl	800cb38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	3304      	adds	r3, #4
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7fe ff77 	bl	800cb38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4e:	4b2d      	ldr	r3, [pc, #180]	@ (800dd04 <xTaskResumeAll+0x124>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d903      	bls.n	800dc5e <xTaskResumeAll+0x7e>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc5a:	4a2a      	ldr	r2, [pc, #168]	@ (800dd04 <xTaskResumeAll+0x124>)
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc62:	4613      	mov	r3, r2
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	4413      	add	r3, r2
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	4a27      	ldr	r2, [pc, #156]	@ (800dd08 <xTaskResumeAll+0x128>)
 800dc6c:	441a      	add	r2, r3
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	3304      	adds	r3, #4
 800dc72:	4619      	mov	r1, r3
 800dc74:	4610      	mov	r0, r2
 800dc76:	f7fe ff02 	bl	800ca7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc7e:	4b23      	ldr	r3, [pc, #140]	@ (800dd0c <xTaskResumeAll+0x12c>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d302      	bcc.n	800dc8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dc88:	4b21      	ldr	r3, [pc, #132]	@ (800dd10 <xTaskResumeAll+0x130>)
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc8e:	4b1c      	ldr	r3, [pc, #112]	@ (800dd00 <xTaskResumeAll+0x120>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1cb      	bne.n	800dc2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d001      	beq.n	800dca0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc9c:	f000 fb66 	bl	800e36c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dca0:	4b1c      	ldr	r3, [pc, #112]	@ (800dd14 <xTaskResumeAll+0x134>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d010      	beq.n	800dcce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dcac:	f000 f846 	bl	800dd3c <xTaskIncrementTick>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dcb6:	4b16      	ldr	r3, [pc, #88]	@ (800dd10 <xTaskResumeAll+0x130>)
 800dcb8:	2201      	movs	r2, #1
 800dcba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d1f1      	bne.n	800dcac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dcc8:	4b12      	ldr	r3, [pc, #72]	@ (800dd14 <xTaskResumeAll+0x134>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dcce:	4b10      	ldr	r3, [pc, #64]	@ (800dd10 <xTaskResumeAll+0x130>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d009      	beq.n	800dcea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dcda:	4b0f      	ldr	r3, [pc, #60]	@ (800dd18 <xTaskResumeAll+0x138>)
 800dcdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dce0:	601a      	str	r2, [r3, #0]
 800dce2:	f3bf 8f4f 	dsb	sy
 800dce6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcea:	f001 f8ff 	bl	800eeec <vPortExitCritical>

	return xAlreadyYielded;
 800dcee:	68bb      	ldr	r3, [r7, #8]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	20002c3c 	.word	0x20002c3c
 800dcfc:	20002c14 	.word	0x20002c14
 800dd00:	20002bd4 	.word	0x20002bd4
 800dd04:	20002c1c 	.word	0x20002c1c
 800dd08:	20002744 	.word	0x20002744
 800dd0c:	20002740 	.word	0x20002740
 800dd10:	20002c28 	.word	0x20002c28
 800dd14:	20002c24 	.word	0x20002c24
 800dd18:	e000ed04 	.word	0xe000ed04

0800dd1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dd22:	4b05      	ldr	r3, [pc, #20]	@ (800dd38 <xTaskGetTickCount+0x1c>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dd28:	687b      	ldr	r3, [r7, #4]
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	370c      	adds	r7, #12
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	20002c18 	.word	0x20002c18

0800dd3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd42:	2300      	movs	r3, #0
 800dd44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd46:	4b4f      	ldr	r3, [pc, #316]	@ (800de84 <xTaskIncrementTick+0x148>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f040 8090 	bne.w	800de70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd50:	4b4d      	ldr	r3, [pc, #308]	@ (800de88 <xTaskIncrementTick+0x14c>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	3301      	adds	r3, #1
 800dd56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd58:	4a4b      	ldr	r2, [pc, #300]	@ (800de88 <xTaskIncrementTick+0x14c>)
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d121      	bne.n	800dda8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd64:	4b49      	ldr	r3, [pc, #292]	@ (800de8c <xTaskIncrementTick+0x150>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00b      	beq.n	800dd86 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	603b      	str	r3, [r7, #0]
}
 800dd80:	bf00      	nop
 800dd82:	bf00      	nop
 800dd84:	e7fd      	b.n	800dd82 <xTaskIncrementTick+0x46>
 800dd86:	4b41      	ldr	r3, [pc, #260]	@ (800de8c <xTaskIncrementTick+0x150>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	60fb      	str	r3, [r7, #12]
 800dd8c:	4b40      	ldr	r3, [pc, #256]	@ (800de90 <xTaskIncrementTick+0x154>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a3e      	ldr	r2, [pc, #248]	@ (800de8c <xTaskIncrementTick+0x150>)
 800dd92:	6013      	str	r3, [r2, #0]
 800dd94:	4a3e      	ldr	r2, [pc, #248]	@ (800de90 <xTaskIncrementTick+0x154>)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6013      	str	r3, [r2, #0]
 800dd9a:	4b3e      	ldr	r3, [pc, #248]	@ (800de94 <xTaskIncrementTick+0x158>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	4a3c      	ldr	r2, [pc, #240]	@ (800de94 <xTaskIncrementTick+0x158>)
 800dda2:	6013      	str	r3, [r2, #0]
 800dda4:	f000 fae2 	bl	800e36c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dda8:	4b3b      	ldr	r3, [pc, #236]	@ (800de98 <xTaskIncrementTick+0x15c>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	693a      	ldr	r2, [r7, #16]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d349      	bcc.n	800de46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddb2:	4b36      	ldr	r3, [pc, #216]	@ (800de8c <xTaskIncrementTick+0x150>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d104      	bne.n	800ddc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddbc:	4b36      	ldr	r3, [pc, #216]	@ (800de98 <xTaskIncrementTick+0x15c>)
 800ddbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ddc2:	601a      	str	r2, [r3, #0]
					break;
 800ddc4:	e03f      	b.n	800de46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddc6:	4b31      	ldr	r3, [pc, #196]	@ (800de8c <xTaskIncrementTick+0x150>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ddd6:	693a      	ldr	r2, [r7, #16]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d203      	bcs.n	800dde6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ddde:	4a2e      	ldr	r2, [pc, #184]	@ (800de98 <xTaskIncrementTick+0x15c>)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dde4:	e02f      	b.n	800de46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	3304      	adds	r3, #4
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe fea4 	bl	800cb38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d004      	beq.n	800de02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	3318      	adds	r3, #24
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fe fe9b 	bl	800cb38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de06:	4b25      	ldr	r3, [pc, #148]	@ (800de9c <xTaskIncrementTick+0x160>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d903      	bls.n	800de16 <xTaskIncrementTick+0xda>
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de12:	4a22      	ldr	r2, [pc, #136]	@ (800de9c <xTaskIncrementTick+0x160>)
 800de14:	6013      	str	r3, [r2, #0]
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de1a:	4613      	mov	r3, r2
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	4413      	add	r3, r2
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4a1f      	ldr	r2, [pc, #124]	@ (800dea0 <xTaskIncrementTick+0x164>)
 800de24:	441a      	add	r2, r3
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	3304      	adds	r3, #4
 800de2a:	4619      	mov	r1, r3
 800de2c:	4610      	mov	r0, r2
 800de2e:	f7fe fe26 	bl	800ca7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de36:	4b1b      	ldr	r3, [pc, #108]	@ (800dea4 <xTaskIncrementTick+0x168>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d3b8      	bcc.n	800ddb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800de40:	2301      	movs	r3, #1
 800de42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de44:	e7b5      	b.n	800ddb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de46:	4b17      	ldr	r3, [pc, #92]	@ (800dea4 <xTaskIncrementTick+0x168>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de4c:	4914      	ldr	r1, [pc, #80]	@ (800dea0 <xTaskIncrementTick+0x164>)
 800de4e:	4613      	mov	r3, r2
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4413      	add	r3, r2
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	440b      	add	r3, r1
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d901      	bls.n	800de62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800de5e:	2301      	movs	r3, #1
 800de60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de62:	4b11      	ldr	r3, [pc, #68]	@ (800dea8 <xTaskIncrementTick+0x16c>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d007      	beq.n	800de7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800de6a:	2301      	movs	r3, #1
 800de6c:	617b      	str	r3, [r7, #20]
 800de6e:	e004      	b.n	800de7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de70:	4b0e      	ldr	r3, [pc, #56]	@ (800deac <xTaskIncrementTick+0x170>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	3301      	adds	r3, #1
 800de76:	4a0d      	ldr	r2, [pc, #52]	@ (800deac <xTaskIncrementTick+0x170>)
 800de78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de7a:	697b      	ldr	r3, [r7, #20]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3718      	adds	r7, #24
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	20002c3c 	.word	0x20002c3c
 800de88:	20002c18 	.word	0x20002c18
 800de8c:	20002bcc 	.word	0x20002bcc
 800de90:	20002bd0 	.word	0x20002bd0
 800de94:	20002c2c 	.word	0x20002c2c
 800de98:	20002c34 	.word	0x20002c34
 800de9c:	20002c1c 	.word	0x20002c1c
 800dea0:	20002744 	.word	0x20002744
 800dea4:	20002740 	.word	0x20002740
 800dea8:	20002c28 	.word	0x20002c28
 800deac:	20002c24 	.word	0x20002c24

0800deb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800deb6:	4b2b      	ldr	r3, [pc, #172]	@ (800df64 <vTaskSwitchContext+0xb4>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800debe:	4b2a      	ldr	r3, [pc, #168]	@ (800df68 <vTaskSwitchContext+0xb8>)
 800dec0:	2201      	movs	r2, #1
 800dec2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dec4:	e047      	b.n	800df56 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800dec6:	4b28      	ldr	r3, [pc, #160]	@ (800df68 <vTaskSwitchContext+0xb8>)
 800dec8:	2200      	movs	r2, #0
 800deca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800decc:	4b27      	ldr	r3, [pc, #156]	@ (800df6c <vTaskSwitchContext+0xbc>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	60fb      	str	r3, [r7, #12]
 800ded2:	e011      	b.n	800def8 <vTaskSwitchContext+0x48>
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d10b      	bne.n	800def2 <vTaskSwitchContext+0x42>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	607b      	str	r3, [r7, #4]
}
 800deec:	bf00      	nop
 800deee:	bf00      	nop
 800def0:	e7fd      	b.n	800deee <vTaskSwitchContext+0x3e>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	3b01      	subs	r3, #1
 800def6:	60fb      	str	r3, [r7, #12]
 800def8:	491d      	ldr	r1, [pc, #116]	@ (800df70 <vTaskSwitchContext+0xc0>)
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	4613      	mov	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	4413      	add	r3, r2
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	440b      	add	r3, r1
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d0e3      	beq.n	800ded4 <vTaskSwitchContext+0x24>
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	4613      	mov	r3, r2
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4413      	add	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4a16      	ldr	r2, [pc, #88]	@ (800df70 <vTaskSwitchContext+0xc0>)
 800df18:	4413      	add	r3, r2
 800df1a:	60bb      	str	r3, [r7, #8]
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	685a      	ldr	r2, [r3, #4]
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	605a      	str	r2, [r3, #4]
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	685a      	ldr	r2, [r3, #4]
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	3308      	adds	r3, #8
 800df2e:	429a      	cmp	r2, r3
 800df30:	d104      	bne.n	800df3c <vTaskSwitchContext+0x8c>
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	685a      	ldr	r2, [r3, #4]
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	605a      	str	r2, [r3, #4]
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	4a0c      	ldr	r2, [pc, #48]	@ (800df74 <vTaskSwitchContext+0xc4>)
 800df44:	6013      	str	r3, [r2, #0]
 800df46:	4a09      	ldr	r2, [pc, #36]	@ (800df6c <vTaskSwitchContext+0xbc>)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df4c:	4b09      	ldr	r3, [pc, #36]	@ (800df74 <vTaskSwitchContext+0xc4>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	3354      	adds	r3, #84	@ 0x54
 800df52:	4a09      	ldr	r2, [pc, #36]	@ (800df78 <vTaskSwitchContext+0xc8>)
 800df54:	6013      	str	r3, [r2, #0]
}
 800df56:	bf00      	nop
 800df58:	3714      	adds	r7, #20
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	20002c3c 	.word	0x20002c3c
 800df68:	20002c28 	.word	0x20002c28
 800df6c:	20002c1c 	.word	0x20002c1c
 800df70:	20002744 	.word	0x20002744
 800df74:	20002740 	.word	0x20002740
 800df78:	20000194 	.word	0x20000194

0800df7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d10b      	bne.n	800dfa4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800df8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	60fb      	str	r3, [r7, #12]
}
 800df9e:	bf00      	nop
 800dfa0:	bf00      	nop
 800dfa2:	e7fd      	b.n	800dfa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfa4:	4b07      	ldr	r3, [pc, #28]	@ (800dfc4 <vTaskPlaceOnEventList+0x48>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	3318      	adds	r3, #24
 800dfaa:	4619      	mov	r1, r3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7fe fd8a 	bl	800cac6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	6838      	ldr	r0, [r7, #0]
 800dfb6:	f000 fa87 	bl	800e4c8 <prvAddCurrentTaskToDelayedList>
}
 800dfba:	bf00      	nop
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20002740 	.word	0x20002740

0800dfc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10b      	bne.n	800dff2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800dfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	617b      	str	r3, [r7, #20]
}
 800dfec:	bf00      	nop
 800dfee:	bf00      	nop
 800dff0:	e7fd      	b.n	800dfee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dff2:	4b0a      	ldr	r3, [pc, #40]	@ (800e01c <vTaskPlaceOnEventListRestricted+0x54>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	3318      	adds	r3, #24
 800dff8:	4619      	mov	r1, r3
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f7fe fd3f 	bl	800ca7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d002      	beq.n	800e00c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e006:	f04f 33ff 	mov.w	r3, #4294967295
 800e00a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e00c:	6879      	ldr	r1, [r7, #4]
 800e00e:	68b8      	ldr	r0, [r7, #8]
 800e010:	f000 fa5a 	bl	800e4c8 <prvAddCurrentTaskToDelayedList>
	}
 800e014:	bf00      	nop
 800e016:	3718      	adds	r7, #24
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	20002740 	.word	0x20002740

0800e020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10b      	bne.n	800e04e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	60fb      	str	r3, [r7, #12]
}
 800e048:	bf00      	nop
 800e04a:	bf00      	nop
 800e04c:	e7fd      	b.n	800e04a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	3318      	adds	r3, #24
 800e052:	4618      	mov	r0, r3
 800e054:	f7fe fd70 	bl	800cb38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e058:	4b1d      	ldr	r3, [pc, #116]	@ (800e0d0 <xTaskRemoveFromEventList+0xb0>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d11d      	bne.n	800e09c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	3304      	adds	r3, #4
 800e064:	4618      	mov	r0, r3
 800e066:	f7fe fd67 	bl	800cb38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e06e:	4b19      	ldr	r3, [pc, #100]	@ (800e0d4 <xTaskRemoveFromEventList+0xb4>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	429a      	cmp	r2, r3
 800e074:	d903      	bls.n	800e07e <xTaskRemoveFromEventList+0x5e>
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e07a:	4a16      	ldr	r2, [pc, #88]	@ (800e0d4 <xTaskRemoveFromEventList+0xb4>)
 800e07c:	6013      	str	r3, [r2, #0]
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e082:	4613      	mov	r3, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4413      	add	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4a13      	ldr	r2, [pc, #76]	@ (800e0d8 <xTaskRemoveFromEventList+0xb8>)
 800e08c:	441a      	add	r2, r3
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	3304      	adds	r3, #4
 800e092:	4619      	mov	r1, r3
 800e094:	4610      	mov	r0, r2
 800e096:	f7fe fcf2 	bl	800ca7e <vListInsertEnd>
 800e09a:	e005      	b.n	800e0a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	3318      	adds	r3, #24
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	480e      	ldr	r0, [pc, #56]	@ (800e0dc <xTaskRemoveFromEventList+0xbc>)
 800e0a4:	f7fe fceb 	bl	800ca7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ac:	4b0c      	ldr	r3, [pc, #48]	@ (800e0e0 <xTaskRemoveFromEventList+0xc0>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d905      	bls.n	800e0c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e0ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e0e4 <xTaskRemoveFromEventList+0xc4>)
 800e0bc:	2201      	movs	r2, #1
 800e0be:	601a      	str	r2, [r3, #0]
 800e0c0:	e001      	b.n	800e0c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e0c6:	697b      	ldr	r3, [r7, #20]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	20002c3c 	.word	0x20002c3c
 800e0d4:	20002c1c 	.word	0x20002c1c
 800e0d8:	20002744 	.word	0x20002744
 800e0dc:	20002bd4 	.word	0x20002bd4
 800e0e0:	20002740 	.word	0x20002740
 800e0e4:	20002c28 	.word	0x20002c28

0800e0e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0f0:	4b06      	ldr	r3, [pc, #24]	@ (800e10c <vTaskInternalSetTimeOutState+0x24>)
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0f8:	4b05      	ldr	r3, [pc, #20]	@ (800e110 <vTaskInternalSetTimeOutState+0x28>)
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	605a      	str	r2, [r3, #4]
}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	20002c2c 	.word	0x20002c2c
 800e110:	20002c18 	.word	0x20002c18

0800e114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b088      	sub	sp, #32
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10b      	bne.n	800e13c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	613b      	str	r3, [r7, #16]
}
 800e136:	bf00      	nop
 800e138:	bf00      	nop
 800e13a:	e7fd      	b.n	800e138 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10b      	bne.n	800e15a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	60fb      	str	r3, [r7, #12]
}
 800e154:	bf00      	nop
 800e156:	bf00      	nop
 800e158:	e7fd      	b.n	800e156 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e15a:	f000 fe95 	bl	800ee88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e15e:	4b1d      	ldr	r3, [pc, #116]	@ (800e1d4 <xTaskCheckForTimeOut+0xc0>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	69ba      	ldr	r2, [r7, #24]
 800e16a:	1ad3      	subs	r3, r2, r3
 800e16c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e176:	d102      	bne.n	800e17e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e178:	2300      	movs	r3, #0
 800e17a:	61fb      	str	r3, [r7, #28]
 800e17c:	e023      	b.n	800e1c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	4b15      	ldr	r3, [pc, #84]	@ (800e1d8 <xTaskCheckForTimeOut+0xc4>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	429a      	cmp	r2, r3
 800e188:	d007      	beq.n	800e19a <xTaskCheckForTimeOut+0x86>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	69ba      	ldr	r2, [r7, #24]
 800e190:	429a      	cmp	r2, r3
 800e192:	d302      	bcc.n	800e19a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e194:	2301      	movs	r3, #1
 800e196:	61fb      	str	r3, [r7, #28]
 800e198:	e015      	b.n	800e1c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	697a      	ldr	r2, [r7, #20]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d20b      	bcs.n	800e1bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	1ad2      	subs	r2, r2, r3
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f7ff ff99 	bl	800e0e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	61fb      	str	r3, [r7, #28]
 800e1ba:	e004      	b.n	800e1c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1c6:	f000 fe91 	bl	800eeec <vPortExitCritical>

	return xReturn;
 800e1ca:	69fb      	ldr	r3, [r7, #28]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3720      	adds	r7, #32
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	20002c18 	.word	0x20002c18
 800e1d8:	20002c2c 	.word	0x20002c2c

0800e1dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1dc:	b480      	push	{r7}
 800e1de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1e0:	4b03      	ldr	r3, [pc, #12]	@ (800e1f0 <vTaskMissedYield+0x14>)
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	601a      	str	r2, [r3, #0]
}
 800e1e6:	bf00      	nop
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr
 800e1f0:	20002c28 	.word	0x20002c28

0800e1f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1fc:	f000 f852 	bl	800e2a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e200:	4b06      	ldr	r3, [pc, #24]	@ (800e21c <prvIdleTask+0x28>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d9f9      	bls.n	800e1fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e208:	4b05      	ldr	r3, [pc, #20]	@ (800e220 <prvIdleTask+0x2c>)
 800e20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e20e:	601a      	str	r2, [r3, #0]
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e218:	e7f0      	b.n	800e1fc <prvIdleTask+0x8>
 800e21a:	bf00      	nop
 800e21c:	20002744 	.word	0x20002744
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e22a:	2300      	movs	r3, #0
 800e22c:	607b      	str	r3, [r7, #4]
 800e22e:	e00c      	b.n	800e24a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	4613      	mov	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4a12      	ldr	r2, [pc, #72]	@ (800e284 <prvInitialiseTaskLists+0x60>)
 800e23c:	4413      	add	r3, r2
 800e23e:	4618      	mov	r0, r3
 800e240:	f7fe fbf0 	bl	800ca24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	3301      	adds	r3, #1
 800e248:	607b      	str	r3, [r7, #4]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b37      	cmp	r3, #55	@ 0x37
 800e24e:	d9ef      	bls.n	800e230 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e250:	480d      	ldr	r0, [pc, #52]	@ (800e288 <prvInitialiseTaskLists+0x64>)
 800e252:	f7fe fbe7 	bl	800ca24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e256:	480d      	ldr	r0, [pc, #52]	@ (800e28c <prvInitialiseTaskLists+0x68>)
 800e258:	f7fe fbe4 	bl	800ca24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e25c:	480c      	ldr	r0, [pc, #48]	@ (800e290 <prvInitialiseTaskLists+0x6c>)
 800e25e:	f7fe fbe1 	bl	800ca24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e262:	480c      	ldr	r0, [pc, #48]	@ (800e294 <prvInitialiseTaskLists+0x70>)
 800e264:	f7fe fbde 	bl	800ca24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e268:	480b      	ldr	r0, [pc, #44]	@ (800e298 <prvInitialiseTaskLists+0x74>)
 800e26a:	f7fe fbdb 	bl	800ca24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e26e:	4b0b      	ldr	r3, [pc, #44]	@ (800e29c <prvInitialiseTaskLists+0x78>)
 800e270:	4a05      	ldr	r2, [pc, #20]	@ (800e288 <prvInitialiseTaskLists+0x64>)
 800e272:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e274:	4b0a      	ldr	r3, [pc, #40]	@ (800e2a0 <prvInitialiseTaskLists+0x7c>)
 800e276:	4a05      	ldr	r2, [pc, #20]	@ (800e28c <prvInitialiseTaskLists+0x68>)
 800e278:	601a      	str	r2, [r3, #0]
}
 800e27a:	bf00      	nop
 800e27c:	3708      	adds	r7, #8
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	20002744 	.word	0x20002744
 800e288:	20002ba4 	.word	0x20002ba4
 800e28c:	20002bb8 	.word	0x20002bb8
 800e290:	20002bd4 	.word	0x20002bd4
 800e294:	20002be8 	.word	0x20002be8
 800e298:	20002c00 	.word	0x20002c00
 800e29c:	20002bcc 	.word	0x20002bcc
 800e2a0:	20002bd0 	.word	0x20002bd0

0800e2a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2aa:	e019      	b.n	800e2e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2ac:	f000 fdec 	bl	800ee88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b0:	4b10      	ldr	r3, [pc, #64]	@ (800e2f4 <prvCheckTasksWaitingTermination+0x50>)
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fe fc3b 	bl	800cb38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f8 <prvCheckTasksWaitingTermination+0x54>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	4a0b      	ldr	r2, [pc, #44]	@ (800e2f8 <prvCheckTasksWaitingTermination+0x54>)
 800e2ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2cc:	4b0b      	ldr	r3, [pc, #44]	@ (800e2fc <prvCheckTasksWaitingTermination+0x58>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	4a0a      	ldr	r2, [pc, #40]	@ (800e2fc <prvCheckTasksWaitingTermination+0x58>)
 800e2d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2d6:	f000 fe09 	bl	800eeec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 f810 	bl	800e300 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2e0:	4b06      	ldr	r3, [pc, #24]	@ (800e2fc <prvCheckTasksWaitingTermination+0x58>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1e1      	bne.n	800e2ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2e8:	bf00      	nop
 800e2ea:	bf00      	nop
 800e2ec:	3708      	adds	r7, #8
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	20002be8 	.word	0x20002be8
 800e2f8:	20002c14 	.word	0x20002c14
 800e2fc:	20002bfc 	.word	0x20002bfc

0800e300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	3354      	adds	r3, #84	@ 0x54
 800e30c:	4618      	mov	r0, r3
 800e30e:	f002 fb6d 	bl	80109ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d108      	bne.n	800e32e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e320:	4618      	mov	r0, r3
 800e322:	f000 ffa1 	bl	800f268 <vPortFree>
				vPortFree( pxTCB );
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 ff9e 	bl	800f268 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e32c:	e019      	b.n	800e362 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e334:	2b01      	cmp	r3, #1
 800e336:	d103      	bne.n	800e340 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 ff95 	bl	800f268 <vPortFree>
	}
 800e33e:	e010      	b.n	800e362 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e346:	2b02      	cmp	r3, #2
 800e348:	d00b      	beq.n	800e362 <prvDeleteTCB+0x62>
	__asm volatile
 800e34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34e:	f383 8811 	msr	BASEPRI, r3
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	60fb      	str	r3, [r7, #12]
}
 800e35c:	bf00      	nop
 800e35e:	bf00      	nop
 800e360:	e7fd      	b.n	800e35e <prvDeleteTCB+0x5e>
	}
 800e362:	bf00      	nop
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
	...

0800e36c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e372:	4b0c      	ldr	r3, [pc, #48]	@ (800e3a4 <prvResetNextTaskUnblockTime+0x38>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d104      	bne.n	800e386 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e37c:	4b0a      	ldr	r3, [pc, #40]	@ (800e3a8 <prvResetNextTaskUnblockTime+0x3c>)
 800e37e:	f04f 32ff 	mov.w	r2, #4294967295
 800e382:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e384:	e008      	b.n	800e398 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e386:	4b07      	ldr	r3, [pc, #28]	@ (800e3a4 <prvResetNextTaskUnblockTime+0x38>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	4a04      	ldr	r2, [pc, #16]	@ (800e3a8 <prvResetNextTaskUnblockTime+0x3c>)
 800e396:	6013      	str	r3, [r2, #0]
}
 800e398:	bf00      	nop
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr
 800e3a4:	20002bcc 	.word	0x20002bcc
 800e3a8:	20002c34 	.word	0x20002c34

0800e3ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e3b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e3e0 <xTaskGetSchedulerState+0x34>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d102      	bne.n	800e3c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	607b      	str	r3, [r7, #4]
 800e3be:	e008      	b.n	800e3d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3c0:	4b08      	ldr	r3, [pc, #32]	@ (800e3e4 <xTaskGetSchedulerState+0x38>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d102      	bne.n	800e3ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3c8:	2302      	movs	r3, #2
 800e3ca:	607b      	str	r3, [r7, #4]
 800e3cc:	e001      	b.n	800e3d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3d2:	687b      	ldr	r3, [r7, #4]
	}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	20002c20 	.word	0x20002c20
 800e3e4:	20002c3c 	.word	0x20002c3c

0800e3e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b086      	sub	sp, #24
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d058      	beq.n	800e4b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e3fe:	4b2f      	ldr	r3, [pc, #188]	@ (800e4bc <xTaskPriorityDisinherit+0xd4>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	693a      	ldr	r2, [r7, #16]
 800e404:	429a      	cmp	r2, r3
 800e406:	d00b      	beq.n	800e420 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e40c:	f383 8811 	msr	BASEPRI, r3
 800e410:	f3bf 8f6f 	isb	sy
 800e414:	f3bf 8f4f 	dsb	sy
 800e418:	60fb      	str	r3, [r7, #12]
}
 800e41a:	bf00      	nop
 800e41c:	bf00      	nop
 800e41e:	e7fd      	b.n	800e41c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10b      	bne.n	800e440 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	60bb      	str	r3, [r7, #8]
}
 800e43a:	bf00      	nop
 800e43c:	bf00      	nop
 800e43e:	e7fd      	b.n	800e43c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e444:	1e5a      	subs	r2, r3, #1
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e452:	429a      	cmp	r2, r3
 800e454:	d02c      	beq.n	800e4b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d128      	bne.n	800e4b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	3304      	adds	r3, #4
 800e462:	4618      	mov	r0, r3
 800e464:	f7fe fb68 	bl	800cb38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e474:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e480:	4b0f      	ldr	r3, [pc, #60]	@ (800e4c0 <xTaskPriorityDisinherit+0xd8>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	429a      	cmp	r2, r3
 800e486:	d903      	bls.n	800e490 <xTaskPriorityDisinherit+0xa8>
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48c:	4a0c      	ldr	r2, [pc, #48]	@ (800e4c0 <xTaskPriorityDisinherit+0xd8>)
 800e48e:	6013      	str	r3, [r2, #0]
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e494:	4613      	mov	r3, r2
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	4413      	add	r3, r2
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	4a09      	ldr	r2, [pc, #36]	@ (800e4c4 <xTaskPriorityDisinherit+0xdc>)
 800e49e:	441a      	add	r2, r3
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4610      	mov	r0, r2
 800e4a8:	f7fe fae9 	bl	800ca7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4b0:	697b      	ldr	r3, [r7, #20]
	}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3718      	adds	r7, #24
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	20002740 	.word	0x20002740
 800e4c0:	20002c1c 	.word	0x20002c1c
 800e4c4:	20002744 	.word	0x20002744

0800e4c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4d2:	4b21      	ldr	r3, [pc, #132]	@ (800e558 <prvAddCurrentTaskToDelayedList+0x90>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4d8:	4b20      	ldr	r3, [pc, #128]	@ (800e55c <prvAddCurrentTaskToDelayedList+0x94>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3304      	adds	r3, #4
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fe fb2a 	bl	800cb38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ea:	d10a      	bne.n	800e502 <prvAddCurrentTaskToDelayedList+0x3a>
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d007      	beq.n	800e502 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4f2:	4b1a      	ldr	r3, [pc, #104]	@ (800e55c <prvAddCurrentTaskToDelayedList+0x94>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4819      	ldr	r0, [pc, #100]	@ (800e560 <prvAddCurrentTaskToDelayedList+0x98>)
 800e4fc:	f7fe fabf 	bl	800ca7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e500:	e026      	b.n	800e550 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	4413      	add	r3, r2
 800e508:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e50a:	4b14      	ldr	r3, [pc, #80]	@ (800e55c <prvAddCurrentTaskToDelayedList+0x94>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e512:	68ba      	ldr	r2, [r7, #8]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	429a      	cmp	r2, r3
 800e518:	d209      	bcs.n	800e52e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e51a:	4b12      	ldr	r3, [pc, #72]	@ (800e564 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	4b0f      	ldr	r3, [pc, #60]	@ (800e55c <prvAddCurrentTaskToDelayedList+0x94>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3304      	adds	r3, #4
 800e524:	4619      	mov	r1, r3
 800e526:	4610      	mov	r0, r2
 800e528:	f7fe facd 	bl	800cac6 <vListInsert>
}
 800e52c:	e010      	b.n	800e550 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e52e:	4b0e      	ldr	r3, [pc, #56]	@ (800e568 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e530:	681a      	ldr	r2, [r3, #0]
 800e532:	4b0a      	ldr	r3, [pc, #40]	@ (800e55c <prvAddCurrentTaskToDelayedList+0x94>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	3304      	adds	r3, #4
 800e538:	4619      	mov	r1, r3
 800e53a:	4610      	mov	r0, r2
 800e53c:	f7fe fac3 	bl	800cac6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e540:	4b0a      	ldr	r3, [pc, #40]	@ (800e56c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	68ba      	ldr	r2, [r7, #8]
 800e546:	429a      	cmp	r2, r3
 800e548:	d202      	bcs.n	800e550 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e54a:	4a08      	ldr	r2, [pc, #32]	@ (800e56c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	6013      	str	r3, [r2, #0]
}
 800e550:	bf00      	nop
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20002c18 	.word	0x20002c18
 800e55c:	20002740 	.word	0x20002740
 800e560:	20002c00 	.word	0x20002c00
 800e564:	20002bd0 	.word	0x20002bd0
 800e568:	20002bcc 	.word	0x20002bcc
 800e56c:	20002c34 	.word	0x20002c34

0800e570 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08a      	sub	sp, #40	@ 0x28
 800e574:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e576:	2300      	movs	r3, #0
 800e578:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e57a:	f000 fb13 	bl	800eba4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e57e:	4b1d      	ldr	r3, [pc, #116]	@ (800e5f4 <xTimerCreateTimerTask+0x84>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d021      	beq.n	800e5ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e586:	2300      	movs	r3, #0
 800e588:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e58a:	2300      	movs	r3, #0
 800e58c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e58e:	1d3a      	adds	r2, r7, #4
 800e590:	f107 0108 	add.w	r1, r7, #8
 800e594:	f107 030c 	add.w	r3, r7, #12
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fe fa29 	bl	800c9f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e59e:	6879      	ldr	r1, [r7, #4]
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	68fa      	ldr	r2, [r7, #12]
 800e5a4:	9202      	str	r2, [sp, #8]
 800e5a6:	9301      	str	r3, [sp, #4]
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	9300      	str	r3, [sp, #0]
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	460a      	mov	r2, r1
 800e5b0:	4911      	ldr	r1, [pc, #68]	@ (800e5f8 <xTimerCreateTimerTask+0x88>)
 800e5b2:	4812      	ldr	r0, [pc, #72]	@ (800e5fc <xTimerCreateTimerTask+0x8c>)
 800e5b4:	f7ff f8a2 	bl	800d6fc <xTaskCreateStatic>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	4a11      	ldr	r2, [pc, #68]	@ (800e600 <xTimerCreateTimerTask+0x90>)
 800e5bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e5be:	4b10      	ldr	r3, [pc, #64]	@ (800e600 <xTimerCreateTimerTask+0x90>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10b      	bne.n	800e5e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5d4:	f383 8811 	msr	BASEPRI, r3
 800e5d8:	f3bf 8f6f 	isb	sy
 800e5dc:	f3bf 8f4f 	dsb	sy
 800e5e0:	613b      	str	r3, [r7, #16]
}
 800e5e2:	bf00      	nop
 800e5e4:	bf00      	nop
 800e5e6:	e7fd      	b.n	800e5e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e5e8:	697b      	ldr	r3, [r7, #20]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3718      	adds	r7, #24
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	20002c70 	.word	0x20002c70
 800e5f8:	08012ed0 	.word	0x08012ed0
 800e5fc:	0800e73d 	.word	0x0800e73d
 800e600:	20002c74 	.word	0x20002c74

0800e604 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b08a      	sub	sp, #40	@ 0x28
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
 800e610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e612:	2300      	movs	r3, #0
 800e614:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d10b      	bne.n	800e634 <xTimerGenericCommand+0x30>
	__asm volatile
 800e61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e620:	f383 8811 	msr	BASEPRI, r3
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	623b      	str	r3, [r7, #32]
}
 800e62e:	bf00      	nop
 800e630:	bf00      	nop
 800e632:	e7fd      	b.n	800e630 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e634:	4b19      	ldr	r3, [pc, #100]	@ (800e69c <xTimerGenericCommand+0x98>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d02a      	beq.n	800e692 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	2b05      	cmp	r3, #5
 800e64c:	dc18      	bgt.n	800e680 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e64e:	f7ff fead 	bl	800e3ac <xTaskGetSchedulerState>
 800e652:	4603      	mov	r3, r0
 800e654:	2b02      	cmp	r3, #2
 800e656:	d109      	bne.n	800e66c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e658:	4b10      	ldr	r3, [pc, #64]	@ (800e69c <xTimerGenericCommand+0x98>)
 800e65a:	6818      	ldr	r0, [r3, #0]
 800e65c:	f107 0110 	add.w	r1, r7, #16
 800e660:	2300      	movs	r3, #0
 800e662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e664:	f7fe fbd8 	bl	800ce18 <xQueueGenericSend>
 800e668:	6278      	str	r0, [r7, #36]	@ 0x24
 800e66a:	e012      	b.n	800e692 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e66c:	4b0b      	ldr	r3, [pc, #44]	@ (800e69c <xTimerGenericCommand+0x98>)
 800e66e:	6818      	ldr	r0, [r3, #0]
 800e670:	f107 0110 	add.w	r1, r7, #16
 800e674:	2300      	movs	r3, #0
 800e676:	2200      	movs	r2, #0
 800e678:	f7fe fbce 	bl	800ce18 <xQueueGenericSend>
 800e67c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e67e:	e008      	b.n	800e692 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e680:	4b06      	ldr	r3, [pc, #24]	@ (800e69c <xTimerGenericCommand+0x98>)
 800e682:	6818      	ldr	r0, [r3, #0]
 800e684:	f107 0110 	add.w	r1, r7, #16
 800e688:	2300      	movs	r3, #0
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	f7fe fcc6 	bl	800d01c <xQueueGenericSendFromISR>
 800e690:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e694:	4618      	mov	r0, r3
 800e696:	3728      	adds	r7, #40	@ 0x28
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	20002c70 	.word	0x20002c70

0800e6a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af02      	add	r7, sp, #8
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6aa:	4b23      	ldr	r3, [pc, #140]	@ (800e738 <prvProcessExpiredTimer+0x98>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	3304      	adds	r3, #4
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fe fa3d 	bl	800cb38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e6c4:	f003 0304 	and.w	r3, r3, #4
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d023      	beq.n	800e714 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	699a      	ldr	r2, [r3, #24]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	18d1      	adds	r1, r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	6978      	ldr	r0, [r7, #20]
 800e6da:	f000 f8d5 	bl	800e888 <prvInsertTimerInActiveList>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d020      	beq.n	800e726 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	6978      	ldr	r0, [r7, #20]
 800e6f0:	f7ff ff88 	bl	800e604 <xTimerGenericCommand>
 800e6f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d114      	bne.n	800e726 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e700:	f383 8811 	msr	BASEPRI, r3
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	60fb      	str	r3, [r7, #12]
}
 800e70e:	bf00      	nop
 800e710:	bf00      	nop
 800e712:	e7fd      	b.n	800e710 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e71a:	f023 0301 	bic.w	r3, r3, #1
 800e71e:	b2da      	uxtb	r2, r3
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	6a1b      	ldr	r3, [r3, #32]
 800e72a:	6978      	ldr	r0, [r7, #20]
 800e72c:	4798      	blx	r3
}
 800e72e:	bf00      	nop
 800e730:	3718      	adds	r7, #24
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	20002c68 	.word	0x20002c68

0800e73c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e744:	f107 0308 	add.w	r3, r7, #8
 800e748:	4618      	mov	r0, r3
 800e74a:	f000 f859 	bl	800e800 <prvGetNextExpireTime>
 800e74e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	4619      	mov	r1, r3
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f000 f805 	bl	800e764 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e75a:	f000 f8d7 	bl	800e90c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e75e:	bf00      	nop
 800e760:	e7f0      	b.n	800e744 <prvTimerTask+0x8>
	...

0800e764 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e76e:	f7ff fa29 	bl	800dbc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e772:	f107 0308 	add.w	r3, r7, #8
 800e776:	4618      	mov	r0, r3
 800e778:	f000 f866 	bl	800e848 <prvSampleTimeNow>
 800e77c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d130      	bne.n	800e7e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d10a      	bne.n	800e7a0 <prvProcessTimerOrBlockTask+0x3c>
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d806      	bhi.n	800e7a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e792:	f7ff fa25 	bl	800dbe0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e796:	68f9      	ldr	r1, [r7, #12]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7ff ff81 	bl	800e6a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e79e:	e024      	b.n	800e7ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d008      	beq.n	800e7b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e7a6:	4b13      	ldr	r3, [pc, #76]	@ (800e7f4 <prvProcessTimerOrBlockTask+0x90>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d101      	bne.n	800e7b4 <prvProcessTimerOrBlockTask+0x50>
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	e000      	b.n	800e7b6 <prvProcessTimerOrBlockTask+0x52>
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e7b8:	4b0f      	ldr	r3, [pc, #60]	@ (800e7f8 <prvProcessTimerOrBlockTask+0x94>)
 800e7ba:	6818      	ldr	r0, [r3, #0]
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	683a      	ldr	r2, [r7, #0]
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	f7fe ff65 	bl	800d694 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e7ca:	f7ff fa09 	bl	800dbe0 <xTaskResumeAll>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d10a      	bne.n	800e7ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e7d4:	4b09      	ldr	r3, [pc, #36]	@ (800e7fc <prvProcessTimerOrBlockTask+0x98>)
 800e7d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7da:	601a      	str	r2, [r3, #0]
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	f3bf 8f6f 	isb	sy
}
 800e7e4:	e001      	b.n	800e7ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e7e6:	f7ff f9fb 	bl	800dbe0 <xTaskResumeAll>
}
 800e7ea:	bf00      	nop
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	20002c6c 	.word	0x20002c6c
 800e7f8:	20002c70 	.word	0x20002c70
 800e7fc:	e000ed04 	.word	0xe000ed04

0800e800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e800:	b480      	push	{r7}
 800e802:	b085      	sub	sp, #20
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e808:	4b0e      	ldr	r3, [pc, #56]	@ (800e844 <prvGetNextExpireTime+0x44>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d101      	bne.n	800e816 <prvGetNextExpireTime+0x16>
 800e812:	2201      	movs	r2, #1
 800e814:	e000      	b.n	800e818 <prvGetNextExpireTime+0x18>
 800e816:	2200      	movs	r2, #0
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d105      	bne.n	800e830 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e824:	4b07      	ldr	r3, [pc, #28]	@ (800e844 <prvGetNextExpireTime+0x44>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	60fb      	str	r3, [r7, #12]
 800e82e:	e001      	b.n	800e834 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e830:	2300      	movs	r3, #0
 800e832:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e834:	68fb      	ldr	r3, [r7, #12]
}
 800e836:	4618      	mov	r0, r3
 800e838:	3714      	adds	r7, #20
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
 800e842:	bf00      	nop
 800e844:	20002c68 	.word	0x20002c68

0800e848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e850:	f7ff fa64 	bl	800dd1c <xTaskGetTickCount>
 800e854:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e856:	4b0b      	ldr	r3, [pc, #44]	@ (800e884 <prvSampleTimeNow+0x3c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d205      	bcs.n	800e86c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e860:	f000 f93a 	bl	800ead8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2201      	movs	r2, #1
 800e868:	601a      	str	r2, [r3, #0]
 800e86a:	e002      	b.n	800e872 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e872:	4a04      	ldr	r2, [pc, #16]	@ (800e884 <prvSampleTimeNow+0x3c>)
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e878:	68fb      	ldr	r3, [r7, #12]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	20002c78 	.word	0x20002c78

0800e888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b086      	sub	sp, #24
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e896:	2300      	movs	r3, #0
 800e898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	68ba      	ldr	r2, [r7, #8]
 800e89e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	68fa      	ldr	r2, [r7, #12]
 800e8a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d812      	bhi.n	800e8d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	1ad2      	subs	r2, r2, r3
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	699b      	ldr	r3, [r3, #24]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d302      	bcc.n	800e8c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	617b      	str	r3, [r7, #20]
 800e8c0:	e01b      	b.n	800e8fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e8c2:	4b10      	ldr	r3, [pc, #64]	@ (800e904 <prvInsertTimerInActiveList+0x7c>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	3304      	adds	r3, #4
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	f7fe f8fa 	bl	800cac6 <vListInsert>
 800e8d2:	e012      	b.n	800e8fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d206      	bcs.n	800e8ea <prvInsertTimerInActiveList+0x62>
 800e8dc:	68ba      	ldr	r2, [r7, #8]
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d302      	bcc.n	800e8ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	617b      	str	r3, [r7, #20]
 800e8e8:	e007      	b.n	800e8fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8ea:	4b07      	ldr	r3, [pc, #28]	@ (800e908 <prvInsertTimerInActiveList+0x80>)
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	3304      	adds	r3, #4
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	f7fe f8e6 	bl	800cac6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e8fa:	697b      	ldr	r3, [r7, #20]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3718      	adds	r7, #24
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	20002c6c 	.word	0x20002c6c
 800e908:	20002c68 	.word	0x20002c68

0800e90c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b08e      	sub	sp, #56	@ 0x38
 800e910:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e912:	e0ce      	b.n	800eab2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	da19      	bge.n	800e94e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e91a:	1d3b      	adds	r3, r7, #4
 800e91c:	3304      	adds	r3, #4
 800e91e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e922:	2b00      	cmp	r3, #0
 800e924:	d10b      	bne.n	800e93e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e92a:	f383 8811 	msr	BASEPRI, r3
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f3bf 8f4f 	dsb	sy
 800e936:	61fb      	str	r3, [r7, #28]
}
 800e938:	bf00      	nop
 800e93a:	bf00      	nop
 800e93c:	e7fd      	b.n	800e93a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e944:	6850      	ldr	r0, [r2, #4]
 800e946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e948:	6892      	ldr	r2, [r2, #8]
 800e94a:	4611      	mov	r1, r2
 800e94c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	f2c0 80ae 	blt.w	800eab2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d004      	beq.n	800e96c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e964:	3304      	adds	r3, #4
 800e966:	4618      	mov	r0, r3
 800e968:	f7fe f8e6 	bl	800cb38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e96c:	463b      	mov	r3, r7
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff ff6a 	bl	800e848 <prvSampleTimeNow>
 800e974:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2b09      	cmp	r3, #9
 800e97a:	f200 8097 	bhi.w	800eaac <prvProcessReceivedCommands+0x1a0>
 800e97e:	a201      	add	r2, pc, #4	@ (adr r2, 800e984 <prvProcessReceivedCommands+0x78>)
 800e980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e984:	0800e9ad 	.word	0x0800e9ad
 800e988:	0800e9ad 	.word	0x0800e9ad
 800e98c:	0800e9ad 	.word	0x0800e9ad
 800e990:	0800ea23 	.word	0x0800ea23
 800e994:	0800ea37 	.word	0x0800ea37
 800e998:	0800ea83 	.word	0x0800ea83
 800e99c:	0800e9ad 	.word	0x0800e9ad
 800e9a0:	0800e9ad 	.word	0x0800e9ad
 800e9a4:	0800ea23 	.word	0x0800ea23
 800e9a8:	0800ea37 	.word	0x0800ea37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9b2:	f043 0301 	orr.w	r3, r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e9be:	68ba      	ldr	r2, [r7, #8]
 800e9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c2:	699b      	ldr	r3, [r3, #24]
 800e9c4:	18d1      	adds	r1, r2, r3
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9cc:	f7ff ff5c 	bl	800e888 <prvInsertTimerInActiveList>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d06c      	beq.n	800eab0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d8:	6a1b      	ldr	r3, [r3, #32]
 800e9da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9e4:	f003 0304 	and.w	r3, r3, #4
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d061      	beq.n	800eab0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e9ec:	68ba      	ldr	r2, [r7, #8]
 800e9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9f0:	699b      	ldr	r3, [r3, #24]
 800e9f2:	441a      	add	r2, r3
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9fe:	f7ff fe01 	bl	800e604 <xTimerGenericCommand>
 800ea02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ea04:	6a3b      	ldr	r3, [r7, #32]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d152      	bne.n	800eab0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ea0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea0e:	f383 8811 	msr	BASEPRI, r3
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	f3bf 8f4f 	dsb	sy
 800ea1a:	61bb      	str	r3, [r7, #24]
}
 800ea1c:	bf00      	nop
 800ea1e:	bf00      	nop
 800ea20:	e7fd      	b.n	800ea1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea28:	f023 0301 	bic.w	r3, r3, #1
 800ea2c:	b2da      	uxtb	r2, r3
 800ea2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ea34:	e03d      	b.n	800eab2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea3c:	f043 0301 	orr.w	r3, r3, #1
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea48:	68ba      	ldr	r2, [r7, #8]
 800ea4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d10b      	bne.n	800ea6e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ea56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea5a:	f383 8811 	msr	BASEPRI, r3
 800ea5e:	f3bf 8f6f 	isb	sy
 800ea62:	f3bf 8f4f 	dsb	sy
 800ea66:	617b      	str	r3, [r7, #20]
}
 800ea68:	bf00      	nop
 800ea6a:	bf00      	nop
 800ea6c:	e7fd      	b.n	800ea6a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea70:	699a      	ldr	r2, [r3, #24]
 800ea72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea74:	18d1      	adds	r1, r2, r3
 800ea76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea7c:	f7ff ff04 	bl	800e888 <prvInsertTimerInActiveList>
					break;
 800ea80:	e017      	b.n	800eab2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea88:	f003 0302 	and.w	r3, r3, #2
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d103      	bne.n	800ea98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ea90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea92:	f000 fbe9 	bl	800f268 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea96:	e00c      	b.n	800eab2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea9e:	f023 0301 	bic.w	r3, r3, #1
 800eaa2:	b2da      	uxtb	r2, r3
 800eaa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eaaa:	e002      	b.n	800eab2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800eaac:	bf00      	nop
 800eaae:	e000      	b.n	800eab2 <prvProcessReceivedCommands+0x1a6>
					break;
 800eab0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eab2:	4b08      	ldr	r3, [pc, #32]	@ (800ead4 <prvProcessReceivedCommands+0x1c8>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	1d39      	adds	r1, r7, #4
 800eab8:	2200      	movs	r2, #0
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fe fb4c 	bl	800d158 <xQueueReceive>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f47f af26 	bne.w	800e914 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800eac8:	bf00      	nop
 800eaca:	bf00      	nop
 800eacc:	3730      	adds	r7, #48	@ 0x30
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	20002c70 	.word	0x20002c70

0800ead8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b088      	sub	sp, #32
 800eadc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eade:	e049      	b.n	800eb74 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eae0:	4b2e      	ldr	r3, [pc, #184]	@ (800eb9c <prvSwitchTimerLists+0xc4>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaea:	4b2c      	ldr	r3, [pc, #176]	@ (800eb9c <prvSwitchTimerLists+0xc4>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	3304      	adds	r3, #4
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7fe f81d 	bl	800cb38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6a1b      	ldr	r3, [r3, #32]
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb0c:	f003 0304 	and.w	r3, r3, #4
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d02f      	beq.n	800eb74 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	699b      	ldr	r3, [r3, #24]
 800eb18:	693a      	ldr	r2, [r7, #16]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d90e      	bls.n	800eb44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	68fa      	ldr	r2, [r7, #12]
 800eb30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb32:	4b1a      	ldr	r3, [pc, #104]	@ (800eb9c <prvSwitchTimerLists+0xc4>)
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	3304      	adds	r3, #4
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	f7fd ffc2 	bl	800cac6 <vListInsert>
 800eb42:	e017      	b.n	800eb74 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb44:	2300      	movs	r3, #0
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	2300      	movs	r3, #0
 800eb4a:	693a      	ldr	r2, [r7, #16]
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	f7ff fd58 	bl	800e604 <xTimerGenericCommand>
 800eb54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d10b      	bne.n	800eb74 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800eb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb60:	f383 8811 	msr	BASEPRI, r3
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	603b      	str	r3, [r7, #0]
}
 800eb6e:	bf00      	nop
 800eb70:	bf00      	nop
 800eb72:	e7fd      	b.n	800eb70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb74:	4b09      	ldr	r3, [pc, #36]	@ (800eb9c <prvSwitchTimerLists+0xc4>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1b0      	bne.n	800eae0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb7e:	4b07      	ldr	r3, [pc, #28]	@ (800eb9c <prvSwitchTimerLists+0xc4>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb84:	4b06      	ldr	r3, [pc, #24]	@ (800eba0 <prvSwitchTimerLists+0xc8>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4a04      	ldr	r2, [pc, #16]	@ (800eb9c <prvSwitchTimerLists+0xc4>)
 800eb8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb8c:	4a04      	ldr	r2, [pc, #16]	@ (800eba0 <prvSwitchTimerLists+0xc8>)
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	6013      	str	r3, [r2, #0]
}
 800eb92:	bf00      	nop
 800eb94:	3718      	adds	r7, #24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20002c68 	.word	0x20002c68
 800eba0:	20002c6c 	.word	0x20002c6c

0800eba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ebaa:	f000 f96d 	bl	800ee88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ebae:	4b15      	ldr	r3, [pc, #84]	@ (800ec04 <prvCheckForValidListAndQueue+0x60>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d120      	bne.n	800ebf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ebb6:	4814      	ldr	r0, [pc, #80]	@ (800ec08 <prvCheckForValidListAndQueue+0x64>)
 800ebb8:	f7fd ff34 	bl	800ca24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ebbc:	4813      	ldr	r0, [pc, #76]	@ (800ec0c <prvCheckForValidListAndQueue+0x68>)
 800ebbe:	f7fd ff31 	bl	800ca24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ebc2:	4b13      	ldr	r3, [pc, #76]	@ (800ec10 <prvCheckForValidListAndQueue+0x6c>)
 800ebc4:	4a10      	ldr	r2, [pc, #64]	@ (800ec08 <prvCheckForValidListAndQueue+0x64>)
 800ebc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ebc8:	4b12      	ldr	r3, [pc, #72]	@ (800ec14 <prvCheckForValidListAndQueue+0x70>)
 800ebca:	4a10      	ldr	r2, [pc, #64]	@ (800ec0c <prvCheckForValidListAndQueue+0x68>)
 800ebcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ebce:	2300      	movs	r3, #0
 800ebd0:	9300      	str	r3, [sp, #0]
 800ebd2:	4b11      	ldr	r3, [pc, #68]	@ (800ec18 <prvCheckForValidListAndQueue+0x74>)
 800ebd4:	4a11      	ldr	r2, [pc, #68]	@ (800ec1c <prvCheckForValidListAndQueue+0x78>)
 800ebd6:	2110      	movs	r1, #16
 800ebd8:	200a      	movs	r0, #10
 800ebda:	f7fe f841 	bl	800cc60 <xQueueGenericCreateStatic>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	4a08      	ldr	r2, [pc, #32]	@ (800ec04 <prvCheckForValidListAndQueue+0x60>)
 800ebe2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ebe4:	4b07      	ldr	r3, [pc, #28]	@ (800ec04 <prvCheckForValidListAndQueue+0x60>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d005      	beq.n	800ebf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ebec:	4b05      	ldr	r3, [pc, #20]	@ (800ec04 <prvCheckForValidListAndQueue+0x60>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	490b      	ldr	r1, [pc, #44]	@ (800ec20 <prvCheckForValidListAndQueue+0x7c>)
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7fe fd24 	bl	800d640 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebf8:	f000 f978 	bl	800eeec <vPortExitCritical>
}
 800ebfc:	bf00      	nop
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	20002c70 	.word	0x20002c70
 800ec08:	20002c40 	.word	0x20002c40
 800ec0c:	20002c54 	.word	0x20002c54
 800ec10:	20002c68 	.word	0x20002c68
 800ec14:	20002c6c 	.word	0x20002c6c
 800ec18:	20002d1c 	.word	0x20002d1c
 800ec1c:	20002c7c 	.word	0x20002c7c
 800ec20:	08012ed8 	.word	0x08012ed8

0800ec24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	3b04      	subs	r3, #4
 800ec34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ec3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	3b04      	subs	r3, #4
 800ec42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	f023 0201 	bic.w	r2, r3, #1
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	3b04      	subs	r3, #4
 800ec52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ec54:	4a0c      	ldr	r2, [pc, #48]	@ (800ec88 <pxPortInitialiseStack+0x64>)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3b14      	subs	r3, #20
 800ec5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	3b04      	subs	r3, #4
 800ec6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f06f 0202 	mvn.w	r2, #2
 800ec72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	3b20      	subs	r3, #32
 800ec78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	0800ec8d 	.word	0x0800ec8d

0800ec8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b085      	sub	sp, #20
 800ec90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec92:	2300      	movs	r3, #0
 800ec94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec96:	4b13      	ldr	r3, [pc, #76]	@ (800ece4 <prvTaskExitError+0x58>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec9e:	d00b      	beq.n	800ecb8 <prvTaskExitError+0x2c>
	__asm volatile
 800eca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	60fb      	str	r3, [r7, #12]
}
 800ecb2:	bf00      	nop
 800ecb4:	bf00      	nop
 800ecb6:	e7fd      	b.n	800ecb4 <prvTaskExitError+0x28>
	__asm volatile
 800ecb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecbc:	f383 8811 	msr	BASEPRI, r3
 800ecc0:	f3bf 8f6f 	isb	sy
 800ecc4:	f3bf 8f4f 	dsb	sy
 800ecc8:	60bb      	str	r3, [r7, #8]
}
 800ecca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eccc:	bf00      	nop
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d0fc      	beq.n	800ecce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ecd4:	bf00      	nop
 800ecd6:	bf00      	nop
 800ecd8:	3714      	adds	r7, #20
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	2000011c 	.word	0x2000011c
	...

0800ecf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ecf0:	4b07      	ldr	r3, [pc, #28]	@ (800ed10 <pxCurrentTCBConst2>)
 800ecf2:	6819      	ldr	r1, [r3, #0]
 800ecf4:	6808      	ldr	r0, [r1, #0]
 800ecf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfa:	f380 8809 	msr	PSP, r0
 800ecfe:	f3bf 8f6f 	isb	sy
 800ed02:	f04f 0000 	mov.w	r0, #0
 800ed06:	f380 8811 	msr	BASEPRI, r0
 800ed0a:	4770      	bx	lr
 800ed0c:	f3af 8000 	nop.w

0800ed10 <pxCurrentTCBConst2>:
 800ed10:	20002740 	.word	0x20002740
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ed14:	bf00      	nop
 800ed16:	bf00      	nop

0800ed18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ed18:	4808      	ldr	r0, [pc, #32]	@ (800ed3c <prvPortStartFirstTask+0x24>)
 800ed1a:	6800      	ldr	r0, [r0, #0]
 800ed1c:	6800      	ldr	r0, [r0, #0]
 800ed1e:	f380 8808 	msr	MSP, r0
 800ed22:	f04f 0000 	mov.w	r0, #0
 800ed26:	f380 8814 	msr	CONTROL, r0
 800ed2a:	b662      	cpsie	i
 800ed2c:	b661      	cpsie	f
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	df00      	svc	0
 800ed38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ed3a:	bf00      	nop
 800ed3c:	e000ed08 	.word	0xe000ed08

0800ed40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ed46:	4b47      	ldr	r3, [pc, #284]	@ (800ee64 <xPortStartScheduler+0x124>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a47      	ldr	r2, [pc, #284]	@ (800ee68 <xPortStartScheduler+0x128>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d10b      	bne.n	800ed68 <xPortStartScheduler+0x28>
	__asm volatile
 800ed50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	60fb      	str	r3, [r7, #12]
}
 800ed62:	bf00      	nop
 800ed64:	bf00      	nop
 800ed66:	e7fd      	b.n	800ed64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ed68:	4b3e      	ldr	r3, [pc, #248]	@ (800ee64 <xPortStartScheduler+0x124>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a3f      	ldr	r2, [pc, #252]	@ (800ee6c <xPortStartScheduler+0x12c>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d10b      	bne.n	800ed8a <xPortStartScheduler+0x4a>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	613b      	str	r3, [r7, #16]
}
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop
 800ed88:	e7fd      	b.n	800ed86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed8a:	4b39      	ldr	r3, [pc, #228]	@ (800ee70 <xPortStartScheduler+0x130>)
 800ed8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	22ff      	movs	r2, #255	@ 0xff
 800ed9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eda4:	78fb      	ldrb	r3, [r7, #3]
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800edac:	b2da      	uxtb	r2, r3
 800edae:	4b31      	ldr	r3, [pc, #196]	@ (800ee74 <xPortStartScheduler+0x134>)
 800edb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800edb2:	4b31      	ldr	r3, [pc, #196]	@ (800ee78 <xPortStartScheduler+0x138>)
 800edb4:	2207      	movs	r2, #7
 800edb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800edb8:	e009      	b.n	800edce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800edba:	4b2f      	ldr	r3, [pc, #188]	@ (800ee78 <xPortStartScheduler+0x138>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	3b01      	subs	r3, #1
 800edc0:	4a2d      	ldr	r2, [pc, #180]	@ (800ee78 <xPortStartScheduler+0x138>)
 800edc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800edc4:	78fb      	ldrb	r3, [r7, #3]
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	005b      	lsls	r3, r3, #1
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800edce:	78fb      	ldrb	r3, [r7, #3]
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edd6:	2b80      	cmp	r3, #128	@ 0x80
 800edd8:	d0ef      	beq.n	800edba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800edda:	4b27      	ldr	r3, [pc, #156]	@ (800ee78 <xPortStartScheduler+0x138>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f1c3 0307 	rsb	r3, r3, #7
 800ede2:	2b04      	cmp	r3, #4
 800ede4:	d00b      	beq.n	800edfe <xPortStartScheduler+0xbe>
	__asm volatile
 800ede6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edea:	f383 8811 	msr	BASEPRI, r3
 800edee:	f3bf 8f6f 	isb	sy
 800edf2:	f3bf 8f4f 	dsb	sy
 800edf6:	60bb      	str	r3, [r7, #8]
}
 800edf8:	bf00      	nop
 800edfa:	bf00      	nop
 800edfc:	e7fd      	b.n	800edfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800edfe:	4b1e      	ldr	r3, [pc, #120]	@ (800ee78 <xPortStartScheduler+0x138>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	021b      	lsls	r3, r3, #8
 800ee04:	4a1c      	ldr	r2, [pc, #112]	@ (800ee78 <xPortStartScheduler+0x138>)
 800ee06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ee08:	4b1b      	ldr	r3, [pc, #108]	@ (800ee78 <xPortStartScheduler+0x138>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ee10:	4a19      	ldr	r2, [pc, #100]	@ (800ee78 <xPortStartScheduler+0x138>)
 800ee12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	b2da      	uxtb	r2, r3
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ee1c:	4b17      	ldr	r3, [pc, #92]	@ (800ee7c <xPortStartScheduler+0x13c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a16      	ldr	r2, [pc, #88]	@ (800ee7c <xPortStartScheduler+0x13c>)
 800ee22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ee26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ee28:	4b14      	ldr	r3, [pc, #80]	@ (800ee7c <xPortStartScheduler+0x13c>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a13      	ldr	r2, [pc, #76]	@ (800ee7c <xPortStartScheduler+0x13c>)
 800ee2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ee32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ee34:	f000 f8da 	bl	800efec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ee38:	4b11      	ldr	r3, [pc, #68]	@ (800ee80 <xPortStartScheduler+0x140>)
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ee3e:	f000 f8f9 	bl	800f034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ee42:	4b10      	ldr	r3, [pc, #64]	@ (800ee84 <xPortStartScheduler+0x144>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	4a0f      	ldr	r2, [pc, #60]	@ (800ee84 <xPortStartScheduler+0x144>)
 800ee48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ee4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ee4e:	f7ff ff63 	bl	800ed18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ee52:	f7ff f82d 	bl	800deb0 <vTaskSwitchContext>
	prvTaskExitError();
 800ee56:	f7ff ff19 	bl	800ec8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3718      	adds	r7, #24
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	e000ed00 	.word	0xe000ed00
 800ee68:	410fc271 	.word	0x410fc271
 800ee6c:	410fc270 	.word	0x410fc270
 800ee70:	e000e400 	.word	0xe000e400
 800ee74:	20002d6c 	.word	0x20002d6c
 800ee78:	20002d70 	.word	0x20002d70
 800ee7c:	e000ed20 	.word	0xe000ed20
 800ee80:	2000011c 	.word	0x2000011c
 800ee84:	e000ef34 	.word	0xe000ef34

0800ee88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ee8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee92:	f383 8811 	msr	BASEPRI, r3
 800ee96:	f3bf 8f6f 	isb	sy
 800ee9a:	f3bf 8f4f 	dsb	sy
 800ee9e:	607b      	str	r3, [r7, #4]
}
 800eea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eea2:	4b10      	ldr	r3, [pc, #64]	@ (800eee4 <vPortEnterCritical+0x5c>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	3301      	adds	r3, #1
 800eea8:	4a0e      	ldr	r2, [pc, #56]	@ (800eee4 <vPortEnterCritical+0x5c>)
 800eeaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eeac:	4b0d      	ldr	r3, [pc, #52]	@ (800eee4 <vPortEnterCritical+0x5c>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d110      	bne.n	800eed6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eeb4:	4b0c      	ldr	r3, [pc, #48]	@ (800eee8 <vPortEnterCritical+0x60>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00b      	beq.n	800eed6 <vPortEnterCritical+0x4e>
	__asm volatile
 800eebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	603b      	str	r3, [r7, #0]
}
 800eed0:	bf00      	nop
 800eed2:	bf00      	nop
 800eed4:	e7fd      	b.n	800eed2 <vPortEnterCritical+0x4a>
	}
}
 800eed6:	bf00      	nop
 800eed8:	370c      	adds	r7, #12
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	2000011c 	.word	0x2000011c
 800eee8:	e000ed04 	.word	0xe000ed04

0800eeec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eef2:	4b12      	ldr	r3, [pc, #72]	@ (800ef3c <vPortExitCritical+0x50>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d10b      	bne.n	800ef12 <vPortExitCritical+0x26>
	__asm volatile
 800eefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	607b      	str	r3, [r7, #4]
}
 800ef0c:	bf00      	nop
 800ef0e:	bf00      	nop
 800ef10:	e7fd      	b.n	800ef0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ef12:	4b0a      	ldr	r3, [pc, #40]	@ (800ef3c <vPortExitCritical+0x50>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	3b01      	subs	r3, #1
 800ef18:	4a08      	ldr	r2, [pc, #32]	@ (800ef3c <vPortExitCritical+0x50>)
 800ef1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ef1c:	4b07      	ldr	r3, [pc, #28]	@ (800ef3c <vPortExitCritical+0x50>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d105      	bne.n	800ef30 <vPortExitCritical+0x44>
 800ef24:	2300      	movs	r3, #0
 800ef26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	f383 8811 	msr	BASEPRI, r3
}
 800ef2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ef30:	bf00      	nop
 800ef32:	370c      	adds	r7, #12
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr
 800ef3c:	2000011c 	.word	0x2000011c

0800ef40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ef40:	f3ef 8009 	mrs	r0, PSP
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	4b15      	ldr	r3, [pc, #84]	@ (800efa0 <pxCurrentTCBConst>)
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	f01e 0f10 	tst.w	lr, #16
 800ef50:	bf08      	it	eq
 800ef52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ef56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5a:	6010      	str	r0, [r2, #0]
 800ef5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ef60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ef64:	f380 8811 	msr	BASEPRI, r0
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f7fe ff9e 	bl	800deb0 <vTaskSwitchContext>
 800ef74:	f04f 0000 	mov.w	r0, #0
 800ef78:	f380 8811 	msr	BASEPRI, r0
 800ef7c:	bc09      	pop	{r0, r3}
 800ef7e:	6819      	ldr	r1, [r3, #0]
 800ef80:	6808      	ldr	r0, [r1, #0]
 800ef82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef86:	f01e 0f10 	tst.w	lr, #16
 800ef8a:	bf08      	it	eq
 800ef8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef90:	f380 8809 	msr	PSP, r0
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	f3af 8000 	nop.w

0800efa0 <pxCurrentTCBConst>:
 800efa0:	20002740 	.word	0x20002740
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800efa4:	bf00      	nop
 800efa6:	bf00      	nop

0800efa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
	__asm volatile
 800efae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	607b      	str	r3, [r7, #4]
}
 800efc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800efc2:	f7fe febb 	bl	800dd3c <xTaskIncrementTick>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d003      	beq.n	800efd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800efcc:	4b06      	ldr	r3, [pc, #24]	@ (800efe8 <xPortSysTickHandler+0x40>)
 800efce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efd2:	601a      	str	r2, [r3, #0]
 800efd4:	2300      	movs	r3, #0
 800efd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	f383 8811 	msr	BASEPRI, r3
}
 800efde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800efe0:	bf00      	nop
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	e000ed04 	.word	0xe000ed04

0800efec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800efec:	b480      	push	{r7}
 800efee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eff0:	4b0b      	ldr	r3, [pc, #44]	@ (800f020 <vPortSetupTimerInterrupt+0x34>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eff6:	4b0b      	ldr	r3, [pc, #44]	@ (800f024 <vPortSetupTimerInterrupt+0x38>)
 800eff8:	2200      	movs	r2, #0
 800effa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800effc:	4b0a      	ldr	r3, [pc, #40]	@ (800f028 <vPortSetupTimerInterrupt+0x3c>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a0a      	ldr	r2, [pc, #40]	@ (800f02c <vPortSetupTimerInterrupt+0x40>)
 800f002:	fba2 2303 	umull	r2, r3, r2, r3
 800f006:	099b      	lsrs	r3, r3, #6
 800f008:	4a09      	ldr	r2, [pc, #36]	@ (800f030 <vPortSetupTimerInterrupt+0x44>)
 800f00a:	3b01      	subs	r3, #1
 800f00c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f00e:	4b04      	ldr	r3, [pc, #16]	@ (800f020 <vPortSetupTimerInterrupt+0x34>)
 800f010:	2207      	movs	r2, #7
 800f012:	601a      	str	r2, [r3, #0]
}
 800f014:	bf00      	nop
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	e000e010 	.word	0xe000e010
 800f024:	e000e018 	.word	0xe000e018
 800f028:	20000000 	.word	0x20000000
 800f02c:	10624dd3 	.word	0x10624dd3
 800f030:	e000e014 	.word	0xe000e014

0800f034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f044 <vPortEnableVFP+0x10>
 800f038:	6801      	ldr	r1, [r0, #0]
 800f03a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f03e:	6001      	str	r1, [r0, #0]
 800f040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f042:	bf00      	nop
 800f044:	e000ed88 	.word	0xe000ed88

0800f048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f048:	b480      	push	{r7}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f04e:	f3ef 8305 	mrs	r3, IPSR
 800f052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2b0f      	cmp	r3, #15
 800f058:	d915      	bls.n	800f086 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f05a:	4a18      	ldr	r2, [pc, #96]	@ (800f0bc <vPortValidateInterruptPriority+0x74>)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	4413      	add	r3, r2
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f064:	4b16      	ldr	r3, [pc, #88]	@ (800f0c0 <vPortValidateInterruptPriority+0x78>)
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	7afa      	ldrb	r2, [r7, #11]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d20b      	bcs.n	800f086 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	607b      	str	r3, [r7, #4]
}
 800f080:	bf00      	nop
 800f082:	bf00      	nop
 800f084:	e7fd      	b.n	800f082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f086:	4b0f      	ldr	r3, [pc, #60]	@ (800f0c4 <vPortValidateInterruptPriority+0x7c>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f08e:	4b0e      	ldr	r3, [pc, #56]	@ (800f0c8 <vPortValidateInterruptPriority+0x80>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	429a      	cmp	r2, r3
 800f094:	d90b      	bls.n	800f0ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f09a:	f383 8811 	msr	BASEPRI, r3
 800f09e:	f3bf 8f6f 	isb	sy
 800f0a2:	f3bf 8f4f 	dsb	sy
 800f0a6:	603b      	str	r3, [r7, #0]
}
 800f0a8:	bf00      	nop
 800f0aa:	bf00      	nop
 800f0ac:	e7fd      	b.n	800f0aa <vPortValidateInterruptPriority+0x62>
	}
 800f0ae:	bf00      	nop
 800f0b0:	3714      	adds	r7, #20
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	e000e3f0 	.word	0xe000e3f0
 800f0c0:	20002d6c 	.word	0x20002d6c
 800f0c4:	e000ed0c 	.word	0xe000ed0c
 800f0c8:	20002d70 	.word	0x20002d70

0800f0cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b08a      	sub	sp, #40	@ 0x28
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f0d8:	f7fe fd74 	bl	800dbc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f0dc:	4b5c      	ldr	r3, [pc, #368]	@ (800f250 <pvPortMalloc+0x184>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d101      	bne.n	800f0e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f0e4:	f000 f924 	bl	800f330 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f0e8:	4b5a      	ldr	r3, [pc, #360]	@ (800f254 <pvPortMalloc+0x188>)
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4013      	ands	r3, r2
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f040 8095 	bne.w	800f220 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d01e      	beq.n	800f13a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f0fc:	2208      	movs	r2, #8
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4413      	add	r3, r2
 800f102:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f003 0307 	and.w	r3, r3, #7
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d015      	beq.n	800f13a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f023 0307 	bic.w	r3, r3, #7
 800f114:	3308      	adds	r3, #8
 800f116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f003 0307 	and.w	r3, r3, #7
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00b      	beq.n	800f13a <pvPortMalloc+0x6e>
	__asm volatile
 800f122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	617b      	str	r3, [r7, #20]
}
 800f134:	bf00      	nop
 800f136:	bf00      	nop
 800f138:	e7fd      	b.n	800f136 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d06f      	beq.n	800f220 <pvPortMalloc+0x154>
 800f140:	4b45      	ldr	r3, [pc, #276]	@ (800f258 <pvPortMalloc+0x18c>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	429a      	cmp	r2, r3
 800f148:	d86a      	bhi.n	800f220 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f14a:	4b44      	ldr	r3, [pc, #272]	@ (800f25c <pvPortMalloc+0x190>)
 800f14c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f14e:	4b43      	ldr	r3, [pc, #268]	@ (800f25c <pvPortMalloc+0x190>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f154:	e004      	b.n	800f160 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	429a      	cmp	r2, r3
 800f168:	d903      	bls.n	800f172 <pvPortMalloc+0xa6>
 800f16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1f1      	bne.n	800f156 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f172:	4b37      	ldr	r3, [pc, #220]	@ (800f250 <pvPortMalloc+0x184>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f178:	429a      	cmp	r2, r3
 800f17a:	d051      	beq.n	800f220 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f17c:	6a3b      	ldr	r3, [r7, #32]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2208      	movs	r2, #8
 800f182:	4413      	add	r3, r2
 800f184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	6a3b      	ldr	r3, [r7, #32]
 800f18c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f190:	685a      	ldr	r2, [r3, #4]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	1ad2      	subs	r2, r2, r3
 800f196:	2308      	movs	r3, #8
 800f198:	005b      	lsls	r3, r3, #1
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d920      	bls.n	800f1e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f19e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4413      	add	r3, r2
 800f1a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	f003 0307 	and.w	r3, r3, #7
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d00b      	beq.n	800f1c8 <pvPortMalloc+0xfc>
	__asm volatile
 800f1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b4:	f383 8811 	msr	BASEPRI, r3
 800f1b8:	f3bf 8f6f 	isb	sy
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	613b      	str	r3, [r7, #16]
}
 800f1c2:	bf00      	nop
 800f1c4:	bf00      	nop
 800f1c6:	e7fd      	b.n	800f1c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ca:	685a      	ldr	r2, [r3, #4]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	1ad2      	subs	r2, r2, r3
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f1da:	69b8      	ldr	r0, [r7, #24]
 800f1dc:	f000 f90a 	bl	800f3f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f1e0:	4b1d      	ldr	r3, [pc, #116]	@ (800f258 <pvPortMalloc+0x18c>)
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	1ad3      	subs	r3, r2, r3
 800f1ea:	4a1b      	ldr	r2, [pc, #108]	@ (800f258 <pvPortMalloc+0x18c>)
 800f1ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f1ee:	4b1a      	ldr	r3, [pc, #104]	@ (800f258 <pvPortMalloc+0x18c>)
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	4b1b      	ldr	r3, [pc, #108]	@ (800f260 <pvPortMalloc+0x194>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d203      	bcs.n	800f202 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f1fa:	4b17      	ldr	r3, [pc, #92]	@ (800f258 <pvPortMalloc+0x18c>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4a18      	ldr	r2, [pc, #96]	@ (800f260 <pvPortMalloc+0x194>)
 800f200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f204:	685a      	ldr	r2, [r3, #4]
 800f206:	4b13      	ldr	r3, [pc, #76]	@ (800f254 <pvPortMalloc+0x188>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	431a      	orrs	r2, r3
 800f20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f20e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f212:	2200      	movs	r2, #0
 800f214:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f216:	4b13      	ldr	r3, [pc, #76]	@ (800f264 <pvPortMalloc+0x198>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	3301      	adds	r3, #1
 800f21c:	4a11      	ldr	r2, [pc, #68]	@ (800f264 <pvPortMalloc+0x198>)
 800f21e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f220:	f7fe fcde 	bl	800dbe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	f003 0307 	and.w	r3, r3, #7
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d00b      	beq.n	800f246 <pvPortMalloc+0x17a>
	__asm volatile
 800f22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f232:	f383 8811 	msr	BASEPRI, r3
 800f236:	f3bf 8f6f 	isb	sy
 800f23a:	f3bf 8f4f 	dsb	sy
 800f23e:	60fb      	str	r3, [r7, #12]
}
 800f240:	bf00      	nop
 800f242:	bf00      	nop
 800f244:	e7fd      	b.n	800f242 <pvPortMalloc+0x176>
	return pvReturn;
 800f246:	69fb      	ldr	r3, [r7, #28]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3728      	adds	r7, #40	@ 0x28
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	2000e8fc 	.word	0x2000e8fc
 800f254:	2000e910 	.word	0x2000e910
 800f258:	2000e900 	.word	0x2000e900
 800f25c:	2000e8f4 	.word	0x2000e8f4
 800f260:	2000e904 	.word	0x2000e904
 800f264:	2000e908 	.word	0x2000e908

0800f268 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d04f      	beq.n	800f31a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f27a:	2308      	movs	r3, #8
 800f27c:	425b      	negs	r3, r3
 800f27e:	697a      	ldr	r2, [r7, #20]
 800f280:	4413      	add	r3, r2
 800f282:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	685a      	ldr	r2, [r3, #4]
 800f28c:	4b25      	ldr	r3, [pc, #148]	@ (800f324 <vPortFree+0xbc>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	4013      	ands	r3, r2
 800f292:	2b00      	cmp	r3, #0
 800f294:	d10b      	bne.n	800f2ae <vPortFree+0x46>
	__asm volatile
 800f296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f29a:	f383 8811 	msr	BASEPRI, r3
 800f29e:	f3bf 8f6f 	isb	sy
 800f2a2:	f3bf 8f4f 	dsb	sy
 800f2a6:	60fb      	str	r3, [r7, #12]
}
 800f2a8:	bf00      	nop
 800f2aa:	bf00      	nop
 800f2ac:	e7fd      	b.n	800f2aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d00b      	beq.n	800f2ce <vPortFree+0x66>
	__asm volatile
 800f2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ba:	f383 8811 	msr	BASEPRI, r3
 800f2be:	f3bf 8f6f 	isb	sy
 800f2c2:	f3bf 8f4f 	dsb	sy
 800f2c6:	60bb      	str	r3, [r7, #8]
}
 800f2c8:	bf00      	nop
 800f2ca:	bf00      	nop
 800f2cc:	e7fd      	b.n	800f2ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	685a      	ldr	r2, [r3, #4]
 800f2d2:	4b14      	ldr	r3, [pc, #80]	@ (800f324 <vPortFree+0xbc>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	4013      	ands	r3, r2
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d01e      	beq.n	800f31a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d11a      	bne.n	800f31a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	685a      	ldr	r2, [r3, #4]
 800f2e8:	4b0e      	ldr	r3, [pc, #56]	@ (800f324 <vPortFree+0xbc>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	43db      	mvns	r3, r3
 800f2ee:	401a      	ands	r2, r3
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f2f4:	f7fe fc66 	bl	800dbc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	685a      	ldr	r2, [r3, #4]
 800f2fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f328 <vPortFree+0xc0>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4413      	add	r3, r2
 800f302:	4a09      	ldr	r2, [pc, #36]	@ (800f328 <vPortFree+0xc0>)
 800f304:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f306:	6938      	ldr	r0, [r7, #16]
 800f308:	f000 f874 	bl	800f3f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f30c:	4b07      	ldr	r3, [pc, #28]	@ (800f32c <vPortFree+0xc4>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	3301      	adds	r3, #1
 800f312:	4a06      	ldr	r2, [pc, #24]	@ (800f32c <vPortFree+0xc4>)
 800f314:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f316:	f7fe fc63 	bl	800dbe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f31a:	bf00      	nop
 800f31c:	3718      	adds	r7, #24
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	2000e910 	.word	0x2000e910
 800f328:	2000e900 	.word	0x2000e900
 800f32c:	2000e90c 	.word	0x2000e90c

0800f330 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f336:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f33a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f33c:	4b27      	ldr	r3, [pc, #156]	@ (800f3dc <prvHeapInit+0xac>)
 800f33e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f003 0307 	and.w	r3, r3, #7
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00c      	beq.n	800f364 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	3307      	adds	r3, #7
 800f34e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f023 0307 	bic.w	r3, r3, #7
 800f356:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f358:	68ba      	ldr	r2, [r7, #8]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	1ad3      	subs	r3, r2, r3
 800f35e:	4a1f      	ldr	r2, [pc, #124]	@ (800f3dc <prvHeapInit+0xac>)
 800f360:	4413      	add	r3, r2
 800f362:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f368:	4a1d      	ldr	r2, [pc, #116]	@ (800f3e0 <prvHeapInit+0xb0>)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f36e:	4b1c      	ldr	r3, [pc, #112]	@ (800f3e0 <prvHeapInit+0xb0>)
 800f370:	2200      	movs	r2, #0
 800f372:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	68ba      	ldr	r2, [r7, #8]
 800f378:	4413      	add	r3, r2
 800f37a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f37c:	2208      	movs	r2, #8
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	1a9b      	subs	r3, r3, r2
 800f382:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f023 0307 	bic.w	r3, r3, #7
 800f38a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	4a15      	ldr	r2, [pc, #84]	@ (800f3e4 <prvHeapInit+0xb4>)
 800f390:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f392:	4b14      	ldr	r3, [pc, #80]	@ (800f3e4 <prvHeapInit+0xb4>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2200      	movs	r2, #0
 800f398:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f39a:	4b12      	ldr	r3, [pc, #72]	@ (800f3e4 <prvHeapInit+0xb4>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	1ad2      	subs	r2, r2, r3
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f3b0:	4b0c      	ldr	r3, [pc, #48]	@ (800f3e4 <prvHeapInit+0xb4>)
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	4a0a      	ldr	r2, [pc, #40]	@ (800f3e8 <prvHeapInit+0xb8>)
 800f3be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	4a09      	ldr	r2, [pc, #36]	@ (800f3ec <prvHeapInit+0xbc>)
 800f3c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f3c8:	4b09      	ldr	r3, [pc, #36]	@ (800f3f0 <prvHeapInit+0xc0>)
 800f3ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f3ce:	601a      	str	r2, [r3, #0]
}
 800f3d0:	bf00      	nop
 800f3d2:	3714      	adds	r7, #20
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr
 800f3dc:	20002d74 	.word	0x20002d74
 800f3e0:	2000e8f4 	.word	0x2000e8f4
 800f3e4:	2000e8fc 	.word	0x2000e8fc
 800f3e8:	2000e904 	.word	0x2000e904
 800f3ec:	2000e900 	.word	0x2000e900
 800f3f0:	2000e910 	.word	0x2000e910

0800f3f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b085      	sub	sp, #20
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3fc:	4b28      	ldr	r3, [pc, #160]	@ (800f4a0 <prvInsertBlockIntoFreeList+0xac>)
 800f3fe:	60fb      	str	r3, [r7, #12]
 800f400:	e002      	b.n	800f408 <prvInsertBlockIntoFreeList+0x14>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	60fb      	str	r3, [r7, #12]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d8f7      	bhi.n	800f402 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	68ba      	ldr	r2, [r7, #8]
 800f41c:	4413      	add	r3, r2
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	429a      	cmp	r2, r3
 800f422:	d108      	bne.n	800f436 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	685a      	ldr	r2, [r3, #4]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	441a      	add	r2, r3
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	68ba      	ldr	r2, [r7, #8]
 800f440:	441a      	add	r2, r3
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	429a      	cmp	r2, r3
 800f448:	d118      	bne.n	800f47c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	4b15      	ldr	r3, [pc, #84]	@ (800f4a4 <prvInsertBlockIntoFreeList+0xb0>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	429a      	cmp	r2, r3
 800f454:	d00d      	beq.n	800f472 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	685a      	ldr	r2, [r3, #4]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	685b      	ldr	r3, [r3, #4]
 800f460:	441a      	add	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	601a      	str	r2, [r3, #0]
 800f470:	e008      	b.n	800f484 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f472:	4b0c      	ldr	r3, [pc, #48]	@ (800f4a4 <prvInsertBlockIntoFreeList+0xb0>)
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	601a      	str	r2, [r3, #0]
 800f47a:	e003      	b.n	800f484 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d002      	beq.n	800f492 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f492:	bf00      	nop
 800f494:	3714      	adds	r7, #20
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	2000e8f4 	.word	0x2000e8f4
 800f4a4:	2000e8fc 	.word	0x2000e8fc

0800f4a8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	4912      	ldr	r1, [pc, #72]	@ (800f4f8 <MX_USB_Device_Init+0x50>)
 800f4b0:	4812      	ldr	r0, [pc, #72]	@ (800f4fc <MX_USB_Device_Init+0x54>)
 800f4b2:	f7fb fef3 	bl	800b29c <USBD_Init>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800f4bc:	f7f2 fcaa 	bl	8001e14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f4c0:	490f      	ldr	r1, [pc, #60]	@ (800f500 <MX_USB_Device_Init+0x58>)
 800f4c2:	480e      	ldr	r0, [pc, #56]	@ (800f4fc <MX_USB_Device_Init+0x54>)
 800f4c4:	f7fb ff1a 	bl	800b2fc <USBD_RegisterClass>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d001      	beq.n	800f4d2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800f4ce:	f7f2 fca1 	bl	8001e14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f4d2:	490c      	ldr	r1, [pc, #48]	@ (800f504 <MX_USB_Device_Init+0x5c>)
 800f4d4:	4809      	ldr	r0, [pc, #36]	@ (800f4fc <MX_USB_Device_Init+0x54>)
 800f4d6:	f7fb fe3b 	bl	800b150 <USBD_CDC_RegisterInterface>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d001      	beq.n	800f4e4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800f4e0:	f7f2 fc98 	bl	8001e14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f4e4:	4805      	ldr	r0, [pc, #20]	@ (800f4fc <MX_USB_Device_Init+0x54>)
 800f4e6:	f7fb ff30 	bl	800b34a <USBD_Start>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d001      	beq.n	800f4f4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800f4f0:	f7f2 fc90 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f4f4:	bf00      	nop
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	20000134 	.word	0x20000134
 800f4fc:	2000e914 	.word	0x2000e914
 800f500:	20000018 	.word	0x20000018
 800f504:	20000120 	.word	0x20000120

0800f508 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f50c:	2200      	movs	r2, #0
 800f50e:	4905      	ldr	r1, [pc, #20]	@ (800f524 <CDC_Init_FS+0x1c>)
 800f510:	4805      	ldr	r0, [pc, #20]	@ (800f528 <CDC_Init_FS+0x20>)
 800f512:	f7fb fe32 	bl	800b17a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f516:	4905      	ldr	r1, [pc, #20]	@ (800f52c <CDC_Init_FS+0x24>)
 800f518:	4803      	ldr	r0, [pc, #12]	@ (800f528 <CDC_Init_FS+0x20>)
 800f51a:	f7fb fe4c 	bl	800b1b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f51e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f520:	4618      	mov	r0, r3
 800f522:	bd80      	pop	{r7, pc}
 800f524:	2000f3e4 	.word	0x2000f3e4
 800f528:	2000e914 	.word	0x2000e914
 800f52c:	2000ebe4 	.word	0x2000ebe4

0800f530 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f530:	b480      	push	{r7}
 800f532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f534:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f536:	4618      	mov	r0, r3
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	4603      	mov	r3, r0
 800f548:	6039      	str	r1, [r7, #0]
 800f54a:	71fb      	strb	r3, [r7, #7]
 800f54c:	4613      	mov	r3, r2
 800f54e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f550:	79fb      	ldrb	r3, [r7, #7]
 800f552:	2b23      	cmp	r3, #35	@ 0x23
 800f554:	d84a      	bhi.n	800f5ec <CDC_Control_FS+0xac>
 800f556:	a201      	add	r2, pc, #4	@ (adr r2, 800f55c <CDC_Control_FS+0x1c>)
 800f558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55c:	0800f5ed 	.word	0x0800f5ed
 800f560:	0800f5ed 	.word	0x0800f5ed
 800f564:	0800f5ed 	.word	0x0800f5ed
 800f568:	0800f5ed 	.word	0x0800f5ed
 800f56c:	0800f5ed 	.word	0x0800f5ed
 800f570:	0800f5ed 	.word	0x0800f5ed
 800f574:	0800f5ed 	.word	0x0800f5ed
 800f578:	0800f5ed 	.word	0x0800f5ed
 800f57c:	0800f5ed 	.word	0x0800f5ed
 800f580:	0800f5ed 	.word	0x0800f5ed
 800f584:	0800f5ed 	.word	0x0800f5ed
 800f588:	0800f5ed 	.word	0x0800f5ed
 800f58c:	0800f5ed 	.word	0x0800f5ed
 800f590:	0800f5ed 	.word	0x0800f5ed
 800f594:	0800f5ed 	.word	0x0800f5ed
 800f598:	0800f5ed 	.word	0x0800f5ed
 800f59c:	0800f5ed 	.word	0x0800f5ed
 800f5a0:	0800f5ed 	.word	0x0800f5ed
 800f5a4:	0800f5ed 	.word	0x0800f5ed
 800f5a8:	0800f5ed 	.word	0x0800f5ed
 800f5ac:	0800f5ed 	.word	0x0800f5ed
 800f5b0:	0800f5ed 	.word	0x0800f5ed
 800f5b4:	0800f5ed 	.word	0x0800f5ed
 800f5b8:	0800f5ed 	.word	0x0800f5ed
 800f5bc:	0800f5ed 	.word	0x0800f5ed
 800f5c0:	0800f5ed 	.word	0x0800f5ed
 800f5c4:	0800f5ed 	.word	0x0800f5ed
 800f5c8:	0800f5ed 	.word	0x0800f5ed
 800f5cc:	0800f5ed 	.word	0x0800f5ed
 800f5d0:	0800f5ed 	.word	0x0800f5ed
 800f5d4:	0800f5ed 	.word	0x0800f5ed
 800f5d8:	0800f5ed 	.word	0x0800f5ed
 800f5dc:	0800f5ed 	.word	0x0800f5ed
 800f5e0:	0800f5ed 	.word	0x0800f5ed
 800f5e4:	0800f5ed 	.word	0x0800f5ed
 800f5e8:	0800f5ed 	.word	0x0800f5ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f5ec:	bf00      	nop
  }

  return (USBD_OK);
 800f5ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f606:	6879      	ldr	r1, [r7, #4]
 800f608:	4805      	ldr	r0, [pc, #20]	@ (800f620 <CDC_Receive_FS+0x24>)
 800f60a:	f7fb fdd4 	bl	800b1b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f60e:	4804      	ldr	r0, [pc, #16]	@ (800f620 <CDC_Receive_FS+0x24>)
 800f610:	f7fb fe1a 	bl	800b248 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f614:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f616:	4618      	mov	r0, r3
 800f618:	3708      	adds	r7, #8
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	2000e914 	.word	0x2000e914

0800f624 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	460b      	mov	r3, r1
 800f62e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f630:	2300      	movs	r3, #0
 800f632:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f634:	4b0d      	ldr	r3, [pc, #52]	@ (800f66c <CDC_Transmit_FS+0x48>)
 800f636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f63a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f646:	2301      	movs	r3, #1
 800f648:	e00b      	b.n	800f662 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f64a:	887b      	ldrh	r3, [r7, #2]
 800f64c:	461a      	mov	r2, r3
 800f64e:	6879      	ldr	r1, [r7, #4]
 800f650:	4806      	ldr	r0, [pc, #24]	@ (800f66c <CDC_Transmit_FS+0x48>)
 800f652:	f7fb fd92 	bl	800b17a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f656:	4805      	ldr	r0, [pc, #20]	@ (800f66c <CDC_Transmit_FS+0x48>)
 800f658:	f7fb fdc6 	bl	800b1e8 <USBD_CDC_TransmitPacket>
 800f65c:	4603      	mov	r3, r0
 800f65e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f660:	7bfb      	ldrb	r3, [r7, #15]
}
 800f662:	4618      	mov	r0, r3
 800f664:	3710      	adds	r7, #16
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	2000e914 	.word	0x2000e914

0800f670 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f670:	b480      	push	{r7}
 800f672:	b087      	sub	sp, #28
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	4613      	mov	r3, r2
 800f67c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f67e:	2300      	movs	r3, #0
 800f680:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f682:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f686:	4618      	mov	r0, r3
 800f688:	371c      	adds	r7, #28
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
	...

0800f694 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	6039      	str	r1, [r7, #0]
 800f69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	2212      	movs	r2, #18
 800f6a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f6a6:	4b03      	ldr	r3, [pc, #12]	@ (800f6b4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	20000154 	.word	0x20000154

0800f6b8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	4603      	mov	r3, r0
 800f6c0:	6039      	str	r1, [r7, #0]
 800f6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	2204      	movs	r2, #4
 800f6c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6ca:	4b03      	ldr	r3, [pc, #12]	@ (800f6d8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr
 800f6d8:	20000168 	.word	0x20000168

0800f6dc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	6039      	str	r1, [r7, #0]
 800f6e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6e8:	79fb      	ldrb	r3, [r7, #7]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d105      	bne.n	800f6fa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f6ee:	683a      	ldr	r2, [r7, #0]
 800f6f0:	4907      	ldr	r1, [pc, #28]	@ (800f710 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f6f2:	4808      	ldr	r0, [pc, #32]	@ (800f714 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f6f4:	f7fc fe13 	bl	800c31e <USBD_GetString>
 800f6f8:	e004      	b.n	800f704 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f6fa:	683a      	ldr	r2, [r7, #0]
 800f6fc:	4904      	ldr	r1, [pc, #16]	@ (800f710 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f6fe:	4805      	ldr	r0, [pc, #20]	@ (800f714 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f700:	f7fc fe0d 	bl	800c31e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f704:	4b02      	ldr	r3, [pc, #8]	@ (800f710 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f706:	4618      	mov	r0, r3
 800f708:	3708      	adds	r7, #8
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	bf00      	nop
 800f710:	2000fbe4 	.word	0x2000fbe4
 800f714:	08012ee0 	.word	0x08012ee0

0800f718 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	4603      	mov	r3, r0
 800f720:	6039      	str	r1, [r7, #0]
 800f722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f724:	683a      	ldr	r2, [r7, #0]
 800f726:	4904      	ldr	r1, [pc, #16]	@ (800f738 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f728:	4804      	ldr	r0, [pc, #16]	@ (800f73c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f72a:	f7fc fdf8 	bl	800c31e <USBD_GetString>
  return USBD_StrDesc;
 800f72e:	4b02      	ldr	r3, [pc, #8]	@ (800f738 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f730:	4618      	mov	r0, r3
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	2000fbe4 	.word	0x2000fbe4
 800f73c:	08012ef8 	.word	0x08012ef8

0800f740 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	4603      	mov	r3, r0
 800f748:	6039      	str	r1, [r7, #0]
 800f74a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	221a      	movs	r2, #26
 800f750:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f752:	f000 f843 	bl	800f7dc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f756:	4b02      	ldr	r3, [pc, #8]	@ (800f760 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	2000016c 	.word	0x2000016c

0800f764 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	4603      	mov	r3, r0
 800f76c:	6039      	str	r1, [r7, #0]
 800f76e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f770:	79fb      	ldrb	r3, [r7, #7]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d105      	bne.n	800f782 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	4907      	ldr	r1, [pc, #28]	@ (800f798 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f77a:	4808      	ldr	r0, [pc, #32]	@ (800f79c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f77c:	f7fc fdcf 	bl	800c31e <USBD_GetString>
 800f780:	e004      	b.n	800f78c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f782:	683a      	ldr	r2, [r7, #0]
 800f784:	4904      	ldr	r1, [pc, #16]	@ (800f798 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f786:	4805      	ldr	r0, [pc, #20]	@ (800f79c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f788:	f7fc fdc9 	bl	800c31e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f78c:	4b02      	ldr	r3, [pc, #8]	@ (800f798 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	2000fbe4 	.word	0x2000fbe4
 800f79c:	08012f0c 	.word	0x08012f0c

0800f7a0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	6039      	str	r1, [r7, #0]
 800f7aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7ac:	79fb      	ldrb	r3, [r7, #7]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d105      	bne.n	800f7be <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f7b2:	683a      	ldr	r2, [r7, #0]
 800f7b4:	4907      	ldr	r1, [pc, #28]	@ (800f7d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f7b6:	4808      	ldr	r0, [pc, #32]	@ (800f7d8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f7b8:	f7fc fdb1 	bl	800c31e <USBD_GetString>
 800f7bc:	e004      	b.n	800f7c8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f7be:	683a      	ldr	r2, [r7, #0]
 800f7c0:	4904      	ldr	r1, [pc, #16]	@ (800f7d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f7c2:	4805      	ldr	r0, [pc, #20]	@ (800f7d8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f7c4:	f7fc fdab 	bl	800c31e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7c8:	4b02      	ldr	r3, [pc, #8]	@ (800f7d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	2000fbe4 	.word	0x2000fbe4
 800f7d8:	08012f18 	.word	0x08012f18

0800f7dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f7e2:	4b0f      	ldr	r3, [pc, #60]	@ (800f820 <Get_SerialNum+0x44>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f7e8:	4b0e      	ldr	r3, [pc, #56]	@ (800f824 <Get_SerialNum+0x48>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f7ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f828 <Get_SerialNum+0x4c>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f7f4:	68fa      	ldr	r2, [r7, #12]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d009      	beq.n	800f816 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f802:	2208      	movs	r2, #8
 800f804:	4909      	ldr	r1, [pc, #36]	@ (800f82c <Get_SerialNum+0x50>)
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f000 f814 	bl	800f834 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f80c:	2204      	movs	r2, #4
 800f80e:	4908      	ldr	r1, [pc, #32]	@ (800f830 <Get_SerialNum+0x54>)
 800f810:	68b8      	ldr	r0, [r7, #8]
 800f812:	f000 f80f 	bl	800f834 <IntToUnicode>
  }
}
 800f816:	bf00      	nop
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	1fff7590 	.word	0x1fff7590
 800f824:	1fff7594 	.word	0x1fff7594
 800f828:	1fff7598 	.word	0x1fff7598
 800f82c:	2000016e 	.word	0x2000016e
 800f830:	2000017e 	.word	0x2000017e

0800f834 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f834:	b480      	push	{r7}
 800f836:	b087      	sub	sp, #28
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	4613      	mov	r3, r2
 800f840:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f842:	2300      	movs	r3, #0
 800f844:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f846:	2300      	movs	r3, #0
 800f848:	75fb      	strb	r3, [r7, #23]
 800f84a:	e027      	b.n	800f89c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	0f1b      	lsrs	r3, r3, #28
 800f850:	2b09      	cmp	r3, #9
 800f852:	d80b      	bhi.n	800f86c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	0f1b      	lsrs	r3, r3, #28
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	7dfb      	ldrb	r3, [r7, #23]
 800f85c:	005b      	lsls	r3, r3, #1
 800f85e:	4619      	mov	r1, r3
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	440b      	add	r3, r1
 800f864:	3230      	adds	r2, #48	@ 0x30
 800f866:	b2d2      	uxtb	r2, r2
 800f868:	701a      	strb	r2, [r3, #0]
 800f86a:	e00a      	b.n	800f882 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	0f1b      	lsrs	r3, r3, #28
 800f870:	b2da      	uxtb	r2, r3
 800f872:	7dfb      	ldrb	r3, [r7, #23]
 800f874:	005b      	lsls	r3, r3, #1
 800f876:	4619      	mov	r1, r3
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	440b      	add	r3, r1
 800f87c:	3237      	adds	r2, #55	@ 0x37
 800f87e:	b2d2      	uxtb	r2, r2
 800f880:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	011b      	lsls	r3, r3, #4
 800f886:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f888:	7dfb      	ldrb	r3, [r7, #23]
 800f88a:	005b      	lsls	r3, r3, #1
 800f88c:	3301      	adds	r3, #1
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	4413      	add	r3, r2
 800f892:	2200      	movs	r2, #0
 800f894:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f896:	7dfb      	ldrb	r3, [r7, #23]
 800f898:	3301      	adds	r3, #1
 800f89a:	75fb      	strb	r3, [r7, #23]
 800f89c:	7dfa      	ldrb	r2, [r7, #23]
 800f89e:	79fb      	ldrb	r3, [r7, #7]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d3d3      	bcc.n	800f84c <IntToUnicode+0x18>
  }
}
 800f8a4:	bf00      	nop
 800f8a6:	bf00      	nop
 800f8a8:	371c      	adds	r7, #28
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
	...

0800f8b4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b098      	sub	sp, #96	@ 0x60
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f8bc:	f107 0310 	add.w	r3, r7, #16
 800f8c0:	2250      	movs	r2, #80	@ 0x50
 800f8c2:	2100      	movs	r1, #0
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f001 f875 	bl	80109b4 <memset>
  if(pcdHandle->Instance==USB)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4a15      	ldr	r2, [pc, #84]	@ (800f924 <HAL_PCD_MspInit+0x70>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d122      	bne.n	800f91a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f8d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f8d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f8de:	f107 0310 	add.w	r3, r7, #16
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7f7 ff3a 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d001      	beq.n	800f8f2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f8ee:	f7f2 fa91 	bl	8001e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f928 <HAL_PCD_MspInit+0x74>)
 800f8f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8f6:	4a0c      	ldr	r2, [pc, #48]	@ (800f928 <HAL_PCD_MspInit+0x74>)
 800f8f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f8fc:	6593      	str	r3, [r2, #88]	@ 0x58
 800f8fe:	4b0a      	ldr	r3, [pc, #40]	@ (800f928 <HAL_PCD_MspInit+0x74>)
 800f900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f906:	60fb      	str	r3, [r7, #12]
 800f908:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800f90a:	2200      	movs	r2, #0
 800f90c:	2105      	movs	r1, #5
 800f90e:	2014      	movs	r0, #20
 800f910:	f7f4 f93c 	bl	8003b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f914:	2014      	movs	r0, #20
 800f916:	f7f4 f953 	bl	8003bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f91a:	bf00      	nop
 800f91c:	3760      	adds	r7, #96	@ 0x60
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	40005c00 	.word	0x40005c00
 800f928:	40021000 	.word	0x40021000

0800f92c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f940:	4619      	mov	r1, r3
 800f942:	4610      	mov	r0, r2
 800f944:	f7fb fd4c 	bl	800b3e0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f948:	bf00      	nop
 800f94a:	3708      	adds	r7, #8
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	460b      	mov	r3, r1
 800f95a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f962:	78fa      	ldrb	r2, [r7, #3]
 800f964:	6879      	ldr	r1, [r7, #4]
 800f966:	4613      	mov	r3, r2
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	4413      	add	r3, r2
 800f96c:	00db      	lsls	r3, r3, #3
 800f96e:	440b      	add	r3, r1
 800f970:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	78fb      	ldrb	r3, [r7, #3]
 800f978:	4619      	mov	r1, r3
 800f97a:	f7fb fd86 	bl	800b48a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f97e:	bf00      	nop
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b082      	sub	sp, #8
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
 800f98e:	460b      	mov	r3, r1
 800f990:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f998:	78fa      	ldrb	r2, [r7, #3]
 800f99a:	6879      	ldr	r1, [r7, #4]
 800f99c:	4613      	mov	r3, r2
 800f99e:	009b      	lsls	r3, r3, #2
 800f9a0:	4413      	add	r3, r2
 800f9a2:	00db      	lsls	r3, r3, #3
 800f9a4:	440b      	add	r3, r1
 800f9a6:	3324      	adds	r3, #36	@ 0x24
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	78fb      	ldrb	r3, [r7, #3]
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	f7fb fdcf 	bl	800b550 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f9b2:	bf00      	nop
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b082      	sub	sp, #8
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fb fee3 	bl	800b794 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f9ce:	bf00      	nop
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b084      	sub	sp, #16
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	795b      	ldrb	r3, [r3, #5]
 800f9e6:	2b02      	cmp	r3, #2
 800f9e8:	d001      	beq.n	800f9ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f9ea:	f7f2 fa13 	bl	8001e14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f9f4:	7bfa      	ldrb	r2, [r7, #15]
 800f9f6:	4611      	mov	r1, r2
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7fb fe8d 	bl	800b718 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fb fe39 	bl	800b67c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800fa0a:	bf00      	nop
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
	...

0800fa14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fb fe88 	bl	800b738 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	7a5b      	ldrb	r3, [r3, #9]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d005      	beq.n	800fa3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa30:	4b04      	ldr	r3, [pc, #16]	@ (800fa44 <HAL_PCD_SuspendCallback+0x30>)
 800fa32:	691b      	ldr	r3, [r3, #16]
 800fa34:	4a03      	ldr	r2, [pc, #12]	@ (800fa44 <HAL_PCD_SuspendCallback+0x30>)
 800fa36:	f043 0306 	orr.w	r3, r3, #6
 800fa3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800fa3c:	bf00      	nop
 800fa3e:	3708      	adds	r7, #8
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}
 800fa44:	e000ed00 	.word	0xe000ed00

0800fa48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	7a5b      	ldrb	r3, [r3, #9]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d007      	beq.n	800fa68 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa58:	4b08      	ldr	r3, [pc, #32]	@ (800fa7c <HAL_PCD_ResumeCallback+0x34>)
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	4a07      	ldr	r2, [pc, #28]	@ (800fa7c <HAL_PCD_ResumeCallback+0x34>)
 800fa5e:	f023 0306 	bic.w	r3, r3, #6
 800fa62:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fa64:	f000 f9f8 	bl	800fe58 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fb fe78 	bl	800b764 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800fa74:	bf00      	nop
 800fa76:	3708      	adds	r7, #8
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	e000ed00 	.word	0xe000ed00

0800fa80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800fa88:	4a2b      	ldr	r2, [pc, #172]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	4a29      	ldr	r2, [pc, #164]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800fa94:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800fa98:	4b27      	ldr	r3, [pc, #156]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800fa9a:	4a28      	ldr	r2, [pc, #160]	@ (800fb3c <USBD_LL_Init+0xbc>)
 800fa9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fa9e:	4b26      	ldr	r3, [pc, #152]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800faa0:	2208      	movs	r2, #8
 800faa2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800faa4:	4b24      	ldr	r3, [pc, #144]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800faa6:	2202      	movs	r2, #2
 800faa8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800faaa:	4b23      	ldr	r3, [pc, #140]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800faac:	2202      	movs	r2, #2
 800faae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800fab0:	4b21      	ldr	r3, [pc, #132]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800fab2:	2200      	movs	r2, #0
 800fab4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800fab6:	4b20      	ldr	r3, [pc, #128]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800fab8:	2200      	movs	r2, #0
 800faba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800fabc:	4b1e      	ldr	r3, [pc, #120]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800fabe:	2200      	movs	r2, #0
 800fac0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800fac2:	4b1d      	ldr	r3, [pc, #116]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800fac4:	2200      	movs	r2, #0
 800fac6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800fac8:	481b      	ldr	r0, [pc, #108]	@ (800fb38 <USBD_LL_Init+0xb8>)
 800faca:	f7f5 fb32 	bl	8005132 <HAL_PCD_Init>
 800face:	4603      	mov	r3, r0
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d001      	beq.n	800fad8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800fad4:	f7f2 f99e 	bl	8001e14 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fade:	2318      	movs	r3, #24
 800fae0:	2200      	movs	r2, #0
 800fae2:	2100      	movs	r1, #0
 800fae4:	f7f6 ffb9 	bl	8006a5a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800faee:	2358      	movs	r3, #88	@ 0x58
 800faf0:	2200      	movs	r2, #0
 800faf2:	2180      	movs	r1, #128	@ 0x80
 800faf4:	f7f6 ffb1 	bl	8006a5a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fafe:	23c0      	movs	r3, #192	@ 0xc0
 800fb00:	2200      	movs	r2, #0
 800fb02:	2181      	movs	r1, #129	@ 0x81
 800fb04:	f7f6 ffa9 	bl	8006a5a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fb0e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800fb12:	2200      	movs	r2, #0
 800fb14:	2101      	movs	r1, #1
 800fb16:	f7f6 ffa0 	bl	8006a5a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fb20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb24:	2200      	movs	r2, #0
 800fb26:	2182      	movs	r1, #130	@ 0x82
 800fb28:	f7f6 ff97 	bl	8006a5a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800fb2c:	2300      	movs	r3, #0
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3708      	adds	r7, #8
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	2000fde4 	.word	0x2000fde4
 800fb3c:	40005c00 	.word	0x40005c00

0800fb40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7f5 fbb9 	bl	80052ce <HAL_PCD_Start>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb60:	7bfb      	ldrb	r3, [r7, #15]
 800fb62:	4618      	mov	r0, r3
 800fb64:	f000 f97e 	bl	800fe64 <USBD_Get_USB_Status>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b084      	sub	sp, #16
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	4608      	mov	r0, r1
 800fb80:	4611      	mov	r1, r2
 800fb82:	461a      	mov	r2, r3
 800fb84:	4603      	mov	r3, r0
 800fb86:	70fb      	strb	r3, [r7, #3]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	70bb      	strb	r3, [r7, #2]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb90:	2300      	movs	r3, #0
 800fb92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb94:	2300      	movs	r3, #0
 800fb96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fb9e:	78bb      	ldrb	r3, [r7, #2]
 800fba0:	883a      	ldrh	r2, [r7, #0]
 800fba2:	78f9      	ldrb	r1, [r7, #3]
 800fba4:	f7f5 fd00 	bl	80055a8 <HAL_PCD_EP_Open>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbac:	7bfb      	ldrb	r3, [r7, #15]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f000 f958 	bl	800fe64 <USBD_Get_USB_Status>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}

0800fbc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b084      	sub	sp, #16
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
 800fbca:	460b      	mov	r3, r1
 800fbcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fbdc:	78fa      	ldrb	r2, [r7, #3]
 800fbde:	4611      	mov	r1, r2
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7f5 fd40 	bl	8005666 <HAL_PCD_EP_Close>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbea:	7bfb      	ldrb	r3, [r7, #15]
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 f939 	bl	800fe64 <USBD_Get_USB_Status>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3710      	adds	r7, #16
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	460b      	mov	r3, r1
 800fc0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc10:	2300      	movs	r3, #0
 800fc12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fc1a:	78fa      	ldrb	r2, [r7, #3]
 800fc1c:	4611      	mov	r1, r2
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7f5 fde9 	bl	80057f6 <HAL_PCD_EP_SetStall>
 800fc24:	4603      	mov	r3, r0
 800fc26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f000 f91a 	bl	800fe64 <USBD_Get_USB_Status>
 800fc30:	4603      	mov	r3, r0
 800fc32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc34:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b084      	sub	sp, #16
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
 800fc46:	460b      	mov	r3, r1
 800fc48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fc58:	78fa      	ldrb	r2, [r7, #3]
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7f5 fe1c 	bl	800589a <HAL_PCD_EP_ClrStall>
 800fc62:	4603      	mov	r3, r0
 800fc64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc66:	7bfb      	ldrb	r3, [r7, #15]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f000 f8fb 	bl	800fe64 <USBD_Get_USB_Status>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc72:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b085      	sub	sp, #20
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	460b      	mov	r3, r1
 800fc86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fc8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fc90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	da0b      	bge.n	800fcb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fc98:	78fb      	ldrb	r3, [r7, #3]
 800fc9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc9e:	68f9      	ldr	r1, [r7, #12]
 800fca0:	4613      	mov	r3, r2
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	4413      	add	r3, r2
 800fca6:	00db      	lsls	r3, r3, #3
 800fca8:	440b      	add	r3, r1
 800fcaa:	3312      	adds	r3, #18
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	e00b      	b.n	800fcc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fcb0:	78fb      	ldrb	r3, [r7, #3]
 800fcb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fcb6:	68f9      	ldr	r1, [r7, #12]
 800fcb8:	4613      	mov	r3, r2
 800fcba:	009b      	lsls	r3, r3, #2
 800fcbc:	4413      	add	r3, r2
 800fcbe:	00db      	lsls	r3, r3, #3
 800fcc0:	440b      	add	r3, r1
 800fcc2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800fcc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3714      	adds	r7, #20
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	460b      	mov	r3, r1
 800fcde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fce4:	2300      	movs	r3, #0
 800fce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fcee:	78fa      	ldrb	r2, [r7, #3]
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7f5 fc34 	bl	8005560 <HAL_PCD_SetAddress>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcfc:	7bfb      	ldrb	r3, [r7, #15]
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f000 f8b0 	bl	800fe64 <USBD_Get_USB_Status>
 800fd04:	4603      	mov	r3, r0
 800fd06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd08:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b086      	sub	sp, #24
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	60f8      	str	r0, [r7, #12]
 800fd1a:	607a      	str	r2, [r7, #4]
 800fd1c:	603b      	str	r3, [r7, #0]
 800fd1e:	460b      	mov	r3, r1
 800fd20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd22:	2300      	movs	r3, #0
 800fd24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd26:	2300      	movs	r3, #0
 800fd28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd30:	7af9      	ldrb	r1, [r7, #11]
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	f7f5 fd27 	bl	8005788 <HAL_PCD_EP_Transmit>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd3e:	7dfb      	ldrb	r3, [r7, #23]
 800fd40:	4618      	mov	r0, r3
 800fd42:	f000 f88f 	bl	800fe64 <USBD_Get_USB_Status>
 800fd46:	4603      	mov	r3, r0
 800fd48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3718      	adds	r7, #24
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b086      	sub	sp, #24
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	607a      	str	r2, [r7, #4]
 800fd5e:	603b      	str	r3, [r7, #0]
 800fd60:	460b      	mov	r3, r1
 800fd62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd64:	2300      	movs	r3, #0
 800fd66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd72:	7af9      	ldrb	r1, [r7, #11]
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	f7f5 fcbd 	bl	80056f6 <HAL_PCD_EP_Receive>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd80:	7dfb      	ldrb	r3, [r7, #23]
 800fd82:	4618      	mov	r0, r3
 800fd84:	f000 f86e 	bl	800fe64 <USBD_Get_USB_Status>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3718      	adds	r7, #24
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b082      	sub	sp, #8
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
 800fd9e:	460b      	mov	r3, r1
 800fda0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fda8:	78fa      	ldrb	r2, [r7, #3]
 800fdaa:	4611      	mov	r1, r2
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7f5 fcd3 	bl	8005758 <HAL_PCD_EP_GetRxCount>
 800fdb2:	4603      	mov	r3, r0
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3708      	adds	r7, #8
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800fdc8:	78fb      	ldrb	r3, [r7, #3]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d002      	beq.n	800fdd4 <HAL_PCDEx_LPM_Callback+0x18>
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d013      	beq.n	800fdfa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800fdd2:	e023      	b.n	800fe1c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	7a5b      	ldrb	r3, [r3, #9]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d007      	beq.n	800fdec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fddc:	f000 f83c 	bl	800fe58 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fde0:	4b10      	ldr	r3, [pc, #64]	@ (800fe24 <HAL_PCDEx_LPM_Callback+0x68>)
 800fde2:	691b      	ldr	r3, [r3, #16]
 800fde4:	4a0f      	ldr	r2, [pc, #60]	@ (800fe24 <HAL_PCDEx_LPM_Callback+0x68>)
 800fde6:	f023 0306 	bic.w	r3, r3, #6
 800fdea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fb fcb6 	bl	800b764 <USBD_LL_Resume>
    break;
 800fdf8:	e010      	b.n	800fe1c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fb fc99 	bl	800b738 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	7a5b      	ldrb	r3, [r3, #9]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d005      	beq.n	800fe1a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe0e:	4b05      	ldr	r3, [pc, #20]	@ (800fe24 <HAL_PCDEx_LPM_Callback+0x68>)
 800fe10:	691b      	ldr	r3, [r3, #16]
 800fe12:	4a04      	ldr	r2, [pc, #16]	@ (800fe24 <HAL_PCDEx_LPM_Callback+0x68>)
 800fe14:	f043 0306 	orr.w	r3, r3, #6
 800fe18:	6113      	str	r3, [r2, #16]
    break;
 800fe1a:	bf00      	nop
}
 800fe1c:	bf00      	nop
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	e000ed00 	.word	0xe000ed00

0800fe28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fe30:	4b03      	ldr	r3, [pc, #12]	@ (800fe40 <USBD_static_malloc+0x18>)
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	370c      	adds	r7, #12
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	200100c0 	.word	0x200100c0

0800fe44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]

}
 800fe4c:	bf00      	nop
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fe5c:	f7f1 fcde 	bl	800181c <SystemClock_Config>
}
 800fe60:	bf00      	nop
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe72:	79fb      	ldrb	r3, [r7, #7]
 800fe74:	2b03      	cmp	r3, #3
 800fe76:	d817      	bhi.n	800fea8 <USBD_Get_USB_Status+0x44>
 800fe78:	a201      	add	r2, pc, #4	@ (adr r2, 800fe80 <USBD_Get_USB_Status+0x1c>)
 800fe7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe7e:	bf00      	nop
 800fe80:	0800fe91 	.word	0x0800fe91
 800fe84:	0800fe97 	.word	0x0800fe97
 800fe88:	0800fe9d 	.word	0x0800fe9d
 800fe8c:	0800fea3 	.word	0x0800fea3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe90:	2300      	movs	r3, #0
 800fe92:	73fb      	strb	r3, [r7, #15]
    break;
 800fe94:	e00b      	b.n	800feae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe96:	2303      	movs	r3, #3
 800fe98:	73fb      	strb	r3, [r7, #15]
    break;
 800fe9a:	e008      	b.n	800feae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	73fb      	strb	r3, [r7, #15]
    break;
 800fea0:	e005      	b.n	800feae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fea2:	2303      	movs	r3, #3
 800fea4:	73fb      	strb	r3, [r7, #15]
    break;
 800fea6:	e002      	b.n	800feae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fea8:	2303      	movs	r3, #3
 800feaa:	73fb      	strb	r3, [r7, #15]
    break;
 800feac:	bf00      	nop
  }
  return usb_status;
 800feae:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3714      	adds	r7, #20
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <__cvt>:
 800febc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fec0:	ec57 6b10 	vmov	r6, r7, d0
 800fec4:	2f00      	cmp	r7, #0
 800fec6:	460c      	mov	r4, r1
 800fec8:	4619      	mov	r1, r3
 800feca:	463b      	mov	r3, r7
 800fecc:	bfbb      	ittet	lt
 800fece:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fed2:	461f      	movlt	r7, r3
 800fed4:	2300      	movge	r3, #0
 800fed6:	232d      	movlt	r3, #45	@ 0x2d
 800fed8:	700b      	strb	r3, [r1, #0]
 800feda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fedc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fee0:	4691      	mov	r9, r2
 800fee2:	f023 0820 	bic.w	r8, r3, #32
 800fee6:	bfbc      	itt	lt
 800fee8:	4632      	movlt	r2, r6
 800feea:	4616      	movlt	r6, r2
 800feec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fef0:	d005      	beq.n	800fefe <__cvt+0x42>
 800fef2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fef6:	d100      	bne.n	800fefa <__cvt+0x3e>
 800fef8:	3401      	adds	r4, #1
 800fefa:	2102      	movs	r1, #2
 800fefc:	e000      	b.n	800ff00 <__cvt+0x44>
 800fefe:	2103      	movs	r1, #3
 800ff00:	ab03      	add	r3, sp, #12
 800ff02:	9301      	str	r3, [sp, #4]
 800ff04:	ab02      	add	r3, sp, #8
 800ff06:	9300      	str	r3, [sp, #0]
 800ff08:	ec47 6b10 	vmov	d0, r6, r7
 800ff0c:	4653      	mov	r3, sl
 800ff0e:	4622      	mov	r2, r4
 800ff10:	f000 fec6 	bl	8010ca0 <_dtoa_r>
 800ff14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ff18:	4605      	mov	r5, r0
 800ff1a:	d119      	bne.n	800ff50 <__cvt+0x94>
 800ff1c:	f019 0f01 	tst.w	r9, #1
 800ff20:	d00e      	beq.n	800ff40 <__cvt+0x84>
 800ff22:	eb00 0904 	add.w	r9, r0, r4
 800ff26:	2200      	movs	r2, #0
 800ff28:	2300      	movs	r3, #0
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	4639      	mov	r1, r7
 800ff2e:	f7f0 fdf3 	bl	8000b18 <__aeabi_dcmpeq>
 800ff32:	b108      	cbz	r0, 800ff38 <__cvt+0x7c>
 800ff34:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff38:	2230      	movs	r2, #48	@ 0x30
 800ff3a:	9b03      	ldr	r3, [sp, #12]
 800ff3c:	454b      	cmp	r3, r9
 800ff3e:	d31e      	bcc.n	800ff7e <__cvt+0xc2>
 800ff40:	9b03      	ldr	r3, [sp, #12]
 800ff42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff44:	1b5b      	subs	r3, r3, r5
 800ff46:	4628      	mov	r0, r5
 800ff48:	6013      	str	r3, [r2, #0]
 800ff4a:	b004      	add	sp, #16
 800ff4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ff54:	eb00 0904 	add.w	r9, r0, r4
 800ff58:	d1e5      	bne.n	800ff26 <__cvt+0x6a>
 800ff5a:	7803      	ldrb	r3, [r0, #0]
 800ff5c:	2b30      	cmp	r3, #48	@ 0x30
 800ff5e:	d10a      	bne.n	800ff76 <__cvt+0xba>
 800ff60:	2200      	movs	r2, #0
 800ff62:	2300      	movs	r3, #0
 800ff64:	4630      	mov	r0, r6
 800ff66:	4639      	mov	r1, r7
 800ff68:	f7f0 fdd6 	bl	8000b18 <__aeabi_dcmpeq>
 800ff6c:	b918      	cbnz	r0, 800ff76 <__cvt+0xba>
 800ff6e:	f1c4 0401 	rsb	r4, r4, #1
 800ff72:	f8ca 4000 	str.w	r4, [sl]
 800ff76:	f8da 3000 	ldr.w	r3, [sl]
 800ff7a:	4499      	add	r9, r3
 800ff7c:	e7d3      	b.n	800ff26 <__cvt+0x6a>
 800ff7e:	1c59      	adds	r1, r3, #1
 800ff80:	9103      	str	r1, [sp, #12]
 800ff82:	701a      	strb	r2, [r3, #0]
 800ff84:	e7d9      	b.n	800ff3a <__cvt+0x7e>

0800ff86 <__exponent>:
 800ff86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff88:	2900      	cmp	r1, #0
 800ff8a:	bfba      	itte	lt
 800ff8c:	4249      	neglt	r1, r1
 800ff8e:	232d      	movlt	r3, #45	@ 0x2d
 800ff90:	232b      	movge	r3, #43	@ 0x2b
 800ff92:	2909      	cmp	r1, #9
 800ff94:	7002      	strb	r2, [r0, #0]
 800ff96:	7043      	strb	r3, [r0, #1]
 800ff98:	dd29      	ble.n	800ffee <__exponent+0x68>
 800ff9a:	f10d 0307 	add.w	r3, sp, #7
 800ff9e:	461d      	mov	r5, r3
 800ffa0:	270a      	movs	r7, #10
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	fbb1 f6f7 	udiv	r6, r1, r7
 800ffa8:	fb07 1416 	mls	r4, r7, r6, r1
 800ffac:	3430      	adds	r4, #48	@ 0x30
 800ffae:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	2c63      	cmp	r4, #99	@ 0x63
 800ffb6:	f103 33ff 	add.w	r3, r3, #4294967295
 800ffba:	4631      	mov	r1, r6
 800ffbc:	dcf1      	bgt.n	800ffa2 <__exponent+0x1c>
 800ffbe:	3130      	adds	r1, #48	@ 0x30
 800ffc0:	1e94      	subs	r4, r2, #2
 800ffc2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ffc6:	1c41      	adds	r1, r0, #1
 800ffc8:	4623      	mov	r3, r4
 800ffca:	42ab      	cmp	r3, r5
 800ffcc:	d30a      	bcc.n	800ffe4 <__exponent+0x5e>
 800ffce:	f10d 0309 	add.w	r3, sp, #9
 800ffd2:	1a9b      	subs	r3, r3, r2
 800ffd4:	42ac      	cmp	r4, r5
 800ffd6:	bf88      	it	hi
 800ffd8:	2300      	movhi	r3, #0
 800ffda:	3302      	adds	r3, #2
 800ffdc:	4403      	add	r3, r0
 800ffde:	1a18      	subs	r0, r3, r0
 800ffe0:	b003      	add	sp, #12
 800ffe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffe4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ffe8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ffec:	e7ed      	b.n	800ffca <__exponent+0x44>
 800ffee:	2330      	movs	r3, #48	@ 0x30
 800fff0:	3130      	adds	r1, #48	@ 0x30
 800fff2:	7083      	strb	r3, [r0, #2]
 800fff4:	70c1      	strb	r1, [r0, #3]
 800fff6:	1d03      	adds	r3, r0, #4
 800fff8:	e7f1      	b.n	800ffde <__exponent+0x58>
	...

0800fffc <_printf_float>:
 800fffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010000:	b08d      	sub	sp, #52	@ 0x34
 8010002:	460c      	mov	r4, r1
 8010004:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010008:	4616      	mov	r6, r2
 801000a:	461f      	mov	r7, r3
 801000c:	4605      	mov	r5, r0
 801000e:	f000 fcd9 	bl	80109c4 <_localeconv_r>
 8010012:	6803      	ldr	r3, [r0, #0]
 8010014:	9304      	str	r3, [sp, #16]
 8010016:	4618      	mov	r0, r3
 8010018:	f7f0 f952 	bl	80002c0 <strlen>
 801001c:	2300      	movs	r3, #0
 801001e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010020:	f8d8 3000 	ldr.w	r3, [r8]
 8010024:	9005      	str	r0, [sp, #20]
 8010026:	3307      	adds	r3, #7
 8010028:	f023 0307 	bic.w	r3, r3, #7
 801002c:	f103 0208 	add.w	r2, r3, #8
 8010030:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010034:	f8d4 b000 	ldr.w	fp, [r4]
 8010038:	f8c8 2000 	str.w	r2, [r8]
 801003c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010040:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010044:	9307      	str	r3, [sp, #28]
 8010046:	f8cd 8018 	str.w	r8, [sp, #24]
 801004a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801004e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010052:	4b9c      	ldr	r3, [pc, #624]	@ (80102c4 <_printf_float+0x2c8>)
 8010054:	f04f 32ff 	mov.w	r2, #4294967295
 8010058:	f7f0 fd90 	bl	8000b7c <__aeabi_dcmpun>
 801005c:	bb70      	cbnz	r0, 80100bc <_printf_float+0xc0>
 801005e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010062:	4b98      	ldr	r3, [pc, #608]	@ (80102c4 <_printf_float+0x2c8>)
 8010064:	f04f 32ff 	mov.w	r2, #4294967295
 8010068:	f7f0 fd6a 	bl	8000b40 <__aeabi_dcmple>
 801006c:	bb30      	cbnz	r0, 80100bc <_printf_float+0xc0>
 801006e:	2200      	movs	r2, #0
 8010070:	2300      	movs	r3, #0
 8010072:	4640      	mov	r0, r8
 8010074:	4649      	mov	r1, r9
 8010076:	f7f0 fd59 	bl	8000b2c <__aeabi_dcmplt>
 801007a:	b110      	cbz	r0, 8010082 <_printf_float+0x86>
 801007c:	232d      	movs	r3, #45	@ 0x2d
 801007e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010082:	4a91      	ldr	r2, [pc, #580]	@ (80102c8 <_printf_float+0x2cc>)
 8010084:	4b91      	ldr	r3, [pc, #580]	@ (80102cc <_printf_float+0x2d0>)
 8010086:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801008a:	bf8c      	ite	hi
 801008c:	4690      	movhi	r8, r2
 801008e:	4698      	movls	r8, r3
 8010090:	2303      	movs	r3, #3
 8010092:	6123      	str	r3, [r4, #16]
 8010094:	f02b 0304 	bic.w	r3, fp, #4
 8010098:	6023      	str	r3, [r4, #0]
 801009a:	f04f 0900 	mov.w	r9, #0
 801009e:	9700      	str	r7, [sp, #0]
 80100a0:	4633      	mov	r3, r6
 80100a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80100a4:	4621      	mov	r1, r4
 80100a6:	4628      	mov	r0, r5
 80100a8:	f000 f9d2 	bl	8010450 <_printf_common>
 80100ac:	3001      	adds	r0, #1
 80100ae:	f040 808d 	bne.w	80101cc <_printf_float+0x1d0>
 80100b2:	f04f 30ff 	mov.w	r0, #4294967295
 80100b6:	b00d      	add	sp, #52	@ 0x34
 80100b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100bc:	4642      	mov	r2, r8
 80100be:	464b      	mov	r3, r9
 80100c0:	4640      	mov	r0, r8
 80100c2:	4649      	mov	r1, r9
 80100c4:	f7f0 fd5a 	bl	8000b7c <__aeabi_dcmpun>
 80100c8:	b140      	cbz	r0, 80100dc <_printf_float+0xe0>
 80100ca:	464b      	mov	r3, r9
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	bfbc      	itt	lt
 80100d0:	232d      	movlt	r3, #45	@ 0x2d
 80100d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80100d6:	4a7e      	ldr	r2, [pc, #504]	@ (80102d0 <_printf_float+0x2d4>)
 80100d8:	4b7e      	ldr	r3, [pc, #504]	@ (80102d4 <_printf_float+0x2d8>)
 80100da:	e7d4      	b.n	8010086 <_printf_float+0x8a>
 80100dc:	6863      	ldr	r3, [r4, #4]
 80100de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80100e2:	9206      	str	r2, [sp, #24]
 80100e4:	1c5a      	adds	r2, r3, #1
 80100e6:	d13b      	bne.n	8010160 <_printf_float+0x164>
 80100e8:	2306      	movs	r3, #6
 80100ea:	6063      	str	r3, [r4, #4]
 80100ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80100f0:	2300      	movs	r3, #0
 80100f2:	6022      	str	r2, [r4, #0]
 80100f4:	9303      	str	r3, [sp, #12]
 80100f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80100f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80100fc:	ab09      	add	r3, sp, #36	@ 0x24
 80100fe:	9300      	str	r3, [sp, #0]
 8010100:	6861      	ldr	r1, [r4, #4]
 8010102:	ec49 8b10 	vmov	d0, r8, r9
 8010106:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801010a:	4628      	mov	r0, r5
 801010c:	f7ff fed6 	bl	800febc <__cvt>
 8010110:	9b06      	ldr	r3, [sp, #24]
 8010112:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010114:	2b47      	cmp	r3, #71	@ 0x47
 8010116:	4680      	mov	r8, r0
 8010118:	d129      	bne.n	801016e <_printf_float+0x172>
 801011a:	1cc8      	adds	r0, r1, #3
 801011c:	db02      	blt.n	8010124 <_printf_float+0x128>
 801011e:	6863      	ldr	r3, [r4, #4]
 8010120:	4299      	cmp	r1, r3
 8010122:	dd41      	ble.n	80101a8 <_printf_float+0x1ac>
 8010124:	f1aa 0a02 	sub.w	sl, sl, #2
 8010128:	fa5f fa8a 	uxtb.w	sl, sl
 801012c:	3901      	subs	r1, #1
 801012e:	4652      	mov	r2, sl
 8010130:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010134:	9109      	str	r1, [sp, #36]	@ 0x24
 8010136:	f7ff ff26 	bl	800ff86 <__exponent>
 801013a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801013c:	1813      	adds	r3, r2, r0
 801013e:	2a01      	cmp	r2, #1
 8010140:	4681      	mov	r9, r0
 8010142:	6123      	str	r3, [r4, #16]
 8010144:	dc02      	bgt.n	801014c <_printf_float+0x150>
 8010146:	6822      	ldr	r2, [r4, #0]
 8010148:	07d2      	lsls	r2, r2, #31
 801014a:	d501      	bpl.n	8010150 <_printf_float+0x154>
 801014c:	3301      	adds	r3, #1
 801014e:	6123      	str	r3, [r4, #16]
 8010150:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010154:	2b00      	cmp	r3, #0
 8010156:	d0a2      	beq.n	801009e <_printf_float+0xa2>
 8010158:	232d      	movs	r3, #45	@ 0x2d
 801015a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801015e:	e79e      	b.n	801009e <_printf_float+0xa2>
 8010160:	9a06      	ldr	r2, [sp, #24]
 8010162:	2a47      	cmp	r2, #71	@ 0x47
 8010164:	d1c2      	bne.n	80100ec <_printf_float+0xf0>
 8010166:	2b00      	cmp	r3, #0
 8010168:	d1c0      	bne.n	80100ec <_printf_float+0xf0>
 801016a:	2301      	movs	r3, #1
 801016c:	e7bd      	b.n	80100ea <_printf_float+0xee>
 801016e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010172:	d9db      	bls.n	801012c <_printf_float+0x130>
 8010174:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010178:	d118      	bne.n	80101ac <_printf_float+0x1b0>
 801017a:	2900      	cmp	r1, #0
 801017c:	6863      	ldr	r3, [r4, #4]
 801017e:	dd0b      	ble.n	8010198 <_printf_float+0x19c>
 8010180:	6121      	str	r1, [r4, #16]
 8010182:	b913      	cbnz	r3, 801018a <_printf_float+0x18e>
 8010184:	6822      	ldr	r2, [r4, #0]
 8010186:	07d0      	lsls	r0, r2, #31
 8010188:	d502      	bpl.n	8010190 <_printf_float+0x194>
 801018a:	3301      	adds	r3, #1
 801018c:	440b      	add	r3, r1
 801018e:	6123      	str	r3, [r4, #16]
 8010190:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010192:	f04f 0900 	mov.w	r9, #0
 8010196:	e7db      	b.n	8010150 <_printf_float+0x154>
 8010198:	b913      	cbnz	r3, 80101a0 <_printf_float+0x1a4>
 801019a:	6822      	ldr	r2, [r4, #0]
 801019c:	07d2      	lsls	r2, r2, #31
 801019e:	d501      	bpl.n	80101a4 <_printf_float+0x1a8>
 80101a0:	3302      	adds	r3, #2
 80101a2:	e7f4      	b.n	801018e <_printf_float+0x192>
 80101a4:	2301      	movs	r3, #1
 80101a6:	e7f2      	b.n	801018e <_printf_float+0x192>
 80101a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80101ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101ae:	4299      	cmp	r1, r3
 80101b0:	db05      	blt.n	80101be <_printf_float+0x1c2>
 80101b2:	6823      	ldr	r3, [r4, #0]
 80101b4:	6121      	str	r1, [r4, #16]
 80101b6:	07d8      	lsls	r0, r3, #31
 80101b8:	d5ea      	bpl.n	8010190 <_printf_float+0x194>
 80101ba:	1c4b      	adds	r3, r1, #1
 80101bc:	e7e7      	b.n	801018e <_printf_float+0x192>
 80101be:	2900      	cmp	r1, #0
 80101c0:	bfd4      	ite	le
 80101c2:	f1c1 0202 	rsble	r2, r1, #2
 80101c6:	2201      	movgt	r2, #1
 80101c8:	4413      	add	r3, r2
 80101ca:	e7e0      	b.n	801018e <_printf_float+0x192>
 80101cc:	6823      	ldr	r3, [r4, #0]
 80101ce:	055a      	lsls	r2, r3, #21
 80101d0:	d407      	bmi.n	80101e2 <_printf_float+0x1e6>
 80101d2:	6923      	ldr	r3, [r4, #16]
 80101d4:	4642      	mov	r2, r8
 80101d6:	4631      	mov	r1, r6
 80101d8:	4628      	mov	r0, r5
 80101da:	47b8      	blx	r7
 80101dc:	3001      	adds	r0, #1
 80101de:	d12b      	bne.n	8010238 <_printf_float+0x23c>
 80101e0:	e767      	b.n	80100b2 <_printf_float+0xb6>
 80101e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80101e6:	f240 80dd 	bls.w	80103a4 <_printf_float+0x3a8>
 80101ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80101ee:	2200      	movs	r2, #0
 80101f0:	2300      	movs	r3, #0
 80101f2:	f7f0 fc91 	bl	8000b18 <__aeabi_dcmpeq>
 80101f6:	2800      	cmp	r0, #0
 80101f8:	d033      	beq.n	8010262 <_printf_float+0x266>
 80101fa:	4a37      	ldr	r2, [pc, #220]	@ (80102d8 <_printf_float+0x2dc>)
 80101fc:	2301      	movs	r3, #1
 80101fe:	4631      	mov	r1, r6
 8010200:	4628      	mov	r0, r5
 8010202:	47b8      	blx	r7
 8010204:	3001      	adds	r0, #1
 8010206:	f43f af54 	beq.w	80100b2 <_printf_float+0xb6>
 801020a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801020e:	4543      	cmp	r3, r8
 8010210:	db02      	blt.n	8010218 <_printf_float+0x21c>
 8010212:	6823      	ldr	r3, [r4, #0]
 8010214:	07d8      	lsls	r0, r3, #31
 8010216:	d50f      	bpl.n	8010238 <_printf_float+0x23c>
 8010218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801021c:	4631      	mov	r1, r6
 801021e:	4628      	mov	r0, r5
 8010220:	47b8      	blx	r7
 8010222:	3001      	adds	r0, #1
 8010224:	f43f af45 	beq.w	80100b2 <_printf_float+0xb6>
 8010228:	f04f 0900 	mov.w	r9, #0
 801022c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010230:	f104 0a1a 	add.w	sl, r4, #26
 8010234:	45c8      	cmp	r8, r9
 8010236:	dc09      	bgt.n	801024c <_printf_float+0x250>
 8010238:	6823      	ldr	r3, [r4, #0]
 801023a:	079b      	lsls	r3, r3, #30
 801023c:	f100 8103 	bmi.w	8010446 <_printf_float+0x44a>
 8010240:	68e0      	ldr	r0, [r4, #12]
 8010242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010244:	4298      	cmp	r0, r3
 8010246:	bfb8      	it	lt
 8010248:	4618      	movlt	r0, r3
 801024a:	e734      	b.n	80100b6 <_printf_float+0xba>
 801024c:	2301      	movs	r3, #1
 801024e:	4652      	mov	r2, sl
 8010250:	4631      	mov	r1, r6
 8010252:	4628      	mov	r0, r5
 8010254:	47b8      	blx	r7
 8010256:	3001      	adds	r0, #1
 8010258:	f43f af2b 	beq.w	80100b2 <_printf_float+0xb6>
 801025c:	f109 0901 	add.w	r9, r9, #1
 8010260:	e7e8      	b.n	8010234 <_printf_float+0x238>
 8010262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010264:	2b00      	cmp	r3, #0
 8010266:	dc39      	bgt.n	80102dc <_printf_float+0x2e0>
 8010268:	4a1b      	ldr	r2, [pc, #108]	@ (80102d8 <_printf_float+0x2dc>)
 801026a:	2301      	movs	r3, #1
 801026c:	4631      	mov	r1, r6
 801026e:	4628      	mov	r0, r5
 8010270:	47b8      	blx	r7
 8010272:	3001      	adds	r0, #1
 8010274:	f43f af1d 	beq.w	80100b2 <_printf_float+0xb6>
 8010278:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801027c:	ea59 0303 	orrs.w	r3, r9, r3
 8010280:	d102      	bne.n	8010288 <_printf_float+0x28c>
 8010282:	6823      	ldr	r3, [r4, #0]
 8010284:	07d9      	lsls	r1, r3, #31
 8010286:	d5d7      	bpl.n	8010238 <_printf_float+0x23c>
 8010288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801028c:	4631      	mov	r1, r6
 801028e:	4628      	mov	r0, r5
 8010290:	47b8      	blx	r7
 8010292:	3001      	adds	r0, #1
 8010294:	f43f af0d 	beq.w	80100b2 <_printf_float+0xb6>
 8010298:	f04f 0a00 	mov.w	sl, #0
 801029c:	f104 0b1a 	add.w	fp, r4, #26
 80102a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102a2:	425b      	negs	r3, r3
 80102a4:	4553      	cmp	r3, sl
 80102a6:	dc01      	bgt.n	80102ac <_printf_float+0x2b0>
 80102a8:	464b      	mov	r3, r9
 80102aa:	e793      	b.n	80101d4 <_printf_float+0x1d8>
 80102ac:	2301      	movs	r3, #1
 80102ae:	465a      	mov	r2, fp
 80102b0:	4631      	mov	r1, r6
 80102b2:	4628      	mov	r0, r5
 80102b4:	47b8      	blx	r7
 80102b6:	3001      	adds	r0, #1
 80102b8:	f43f aefb 	beq.w	80100b2 <_printf_float+0xb6>
 80102bc:	f10a 0a01 	add.w	sl, sl, #1
 80102c0:	e7ee      	b.n	80102a0 <_printf_float+0x2a4>
 80102c2:	bf00      	nop
 80102c4:	7fefffff 	.word	0x7fefffff
 80102c8:	0801306c 	.word	0x0801306c
 80102cc:	08013068 	.word	0x08013068
 80102d0:	08013074 	.word	0x08013074
 80102d4:	08013070 	.word	0x08013070
 80102d8:	08013078 	.word	0x08013078
 80102dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80102de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80102e2:	4553      	cmp	r3, sl
 80102e4:	bfa8      	it	ge
 80102e6:	4653      	movge	r3, sl
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	4699      	mov	r9, r3
 80102ec:	dc36      	bgt.n	801035c <_printf_float+0x360>
 80102ee:	f04f 0b00 	mov.w	fp, #0
 80102f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102f6:	f104 021a 	add.w	r2, r4, #26
 80102fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80102fc:	9306      	str	r3, [sp, #24]
 80102fe:	eba3 0309 	sub.w	r3, r3, r9
 8010302:	455b      	cmp	r3, fp
 8010304:	dc31      	bgt.n	801036a <_printf_float+0x36e>
 8010306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010308:	459a      	cmp	sl, r3
 801030a:	dc3a      	bgt.n	8010382 <_printf_float+0x386>
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	07da      	lsls	r2, r3, #31
 8010310:	d437      	bmi.n	8010382 <_printf_float+0x386>
 8010312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010314:	ebaa 0903 	sub.w	r9, sl, r3
 8010318:	9b06      	ldr	r3, [sp, #24]
 801031a:	ebaa 0303 	sub.w	r3, sl, r3
 801031e:	4599      	cmp	r9, r3
 8010320:	bfa8      	it	ge
 8010322:	4699      	movge	r9, r3
 8010324:	f1b9 0f00 	cmp.w	r9, #0
 8010328:	dc33      	bgt.n	8010392 <_printf_float+0x396>
 801032a:	f04f 0800 	mov.w	r8, #0
 801032e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010332:	f104 0b1a 	add.w	fp, r4, #26
 8010336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010338:	ebaa 0303 	sub.w	r3, sl, r3
 801033c:	eba3 0309 	sub.w	r3, r3, r9
 8010340:	4543      	cmp	r3, r8
 8010342:	f77f af79 	ble.w	8010238 <_printf_float+0x23c>
 8010346:	2301      	movs	r3, #1
 8010348:	465a      	mov	r2, fp
 801034a:	4631      	mov	r1, r6
 801034c:	4628      	mov	r0, r5
 801034e:	47b8      	blx	r7
 8010350:	3001      	adds	r0, #1
 8010352:	f43f aeae 	beq.w	80100b2 <_printf_float+0xb6>
 8010356:	f108 0801 	add.w	r8, r8, #1
 801035a:	e7ec      	b.n	8010336 <_printf_float+0x33a>
 801035c:	4642      	mov	r2, r8
 801035e:	4631      	mov	r1, r6
 8010360:	4628      	mov	r0, r5
 8010362:	47b8      	blx	r7
 8010364:	3001      	adds	r0, #1
 8010366:	d1c2      	bne.n	80102ee <_printf_float+0x2f2>
 8010368:	e6a3      	b.n	80100b2 <_printf_float+0xb6>
 801036a:	2301      	movs	r3, #1
 801036c:	4631      	mov	r1, r6
 801036e:	4628      	mov	r0, r5
 8010370:	9206      	str	r2, [sp, #24]
 8010372:	47b8      	blx	r7
 8010374:	3001      	adds	r0, #1
 8010376:	f43f ae9c 	beq.w	80100b2 <_printf_float+0xb6>
 801037a:	9a06      	ldr	r2, [sp, #24]
 801037c:	f10b 0b01 	add.w	fp, fp, #1
 8010380:	e7bb      	b.n	80102fa <_printf_float+0x2fe>
 8010382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010386:	4631      	mov	r1, r6
 8010388:	4628      	mov	r0, r5
 801038a:	47b8      	blx	r7
 801038c:	3001      	adds	r0, #1
 801038e:	d1c0      	bne.n	8010312 <_printf_float+0x316>
 8010390:	e68f      	b.n	80100b2 <_printf_float+0xb6>
 8010392:	9a06      	ldr	r2, [sp, #24]
 8010394:	464b      	mov	r3, r9
 8010396:	4442      	add	r2, r8
 8010398:	4631      	mov	r1, r6
 801039a:	4628      	mov	r0, r5
 801039c:	47b8      	blx	r7
 801039e:	3001      	adds	r0, #1
 80103a0:	d1c3      	bne.n	801032a <_printf_float+0x32e>
 80103a2:	e686      	b.n	80100b2 <_printf_float+0xb6>
 80103a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80103a8:	f1ba 0f01 	cmp.w	sl, #1
 80103ac:	dc01      	bgt.n	80103b2 <_printf_float+0x3b6>
 80103ae:	07db      	lsls	r3, r3, #31
 80103b0:	d536      	bpl.n	8010420 <_printf_float+0x424>
 80103b2:	2301      	movs	r3, #1
 80103b4:	4642      	mov	r2, r8
 80103b6:	4631      	mov	r1, r6
 80103b8:	4628      	mov	r0, r5
 80103ba:	47b8      	blx	r7
 80103bc:	3001      	adds	r0, #1
 80103be:	f43f ae78 	beq.w	80100b2 <_printf_float+0xb6>
 80103c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103c6:	4631      	mov	r1, r6
 80103c8:	4628      	mov	r0, r5
 80103ca:	47b8      	blx	r7
 80103cc:	3001      	adds	r0, #1
 80103ce:	f43f ae70 	beq.w	80100b2 <_printf_float+0xb6>
 80103d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80103d6:	2200      	movs	r2, #0
 80103d8:	2300      	movs	r3, #0
 80103da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80103de:	f7f0 fb9b 	bl	8000b18 <__aeabi_dcmpeq>
 80103e2:	b9c0      	cbnz	r0, 8010416 <_printf_float+0x41a>
 80103e4:	4653      	mov	r3, sl
 80103e6:	f108 0201 	add.w	r2, r8, #1
 80103ea:	4631      	mov	r1, r6
 80103ec:	4628      	mov	r0, r5
 80103ee:	47b8      	blx	r7
 80103f0:	3001      	adds	r0, #1
 80103f2:	d10c      	bne.n	801040e <_printf_float+0x412>
 80103f4:	e65d      	b.n	80100b2 <_printf_float+0xb6>
 80103f6:	2301      	movs	r3, #1
 80103f8:	465a      	mov	r2, fp
 80103fa:	4631      	mov	r1, r6
 80103fc:	4628      	mov	r0, r5
 80103fe:	47b8      	blx	r7
 8010400:	3001      	adds	r0, #1
 8010402:	f43f ae56 	beq.w	80100b2 <_printf_float+0xb6>
 8010406:	f108 0801 	add.w	r8, r8, #1
 801040a:	45d0      	cmp	r8, sl
 801040c:	dbf3      	blt.n	80103f6 <_printf_float+0x3fa>
 801040e:	464b      	mov	r3, r9
 8010410:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010414:	e6df      	b.n	80101d6 <_printf_float+0x1da>
 8010416:	f04f 0800 	mov.w	r8, #0
 801041a:	f104 0b1a 	add.w	fp, r4, #26
 801041e:	e7f4      	b.n	801040a <_printf_float+0x40e>
 8010420:	2301      	movs	r3, #1
 8010422:	4642      	mov	r2, r8
 8010424:	e7e1      	b.n	80103ea <_printf_float+0x3ee>
 8010426:	2301      	movs	r3, #1
 8010428:	464a      	mov	r2, r9
 801042a:	4631      	mov	r1, r6
 801042c:	4628      	mov	r0, r5
 801042e:	47b8      	blx	r7
 8010430:	3001      	adds	r0, #1
 8010432:	f43f ae3e 	beq.w	80100b2 <_printf_float+0xb6>
 8010436:	f108 0801 	add.w	r8, r8, #1
 801043a:	68e3      	ldr	r3, [r4, #12]
 801043c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801043e:	1a5b      	subs	r3, r3, r1
 8010440:	4543      	cmp	r3, r8
 8010442:	dcf0      	bgt.n	8010426 <_printf_float+0x42a>
 8010444:	e6fc      	b.n	8010240 <_printf_float+0x244>
 8010446:	f04f 0800 	mov.w	r8, #0
 801044a:	f104 0919 	add.w	r9, r4, #25
 801044e:	e7f4      	b.n	801043a <_printf_float+0x43e>

08010450 <_printf_common>:
 8010450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010454:	4616      	mov	r6, r2
 8010456:	4698      	mov	r8, r3
 8010458:	688a      	ldr	r2, [r1, #8]
 801045a:	690b      	ldr	r3, [r1, #16]
 801045c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010460:	4293      	cmp	r3, r2
 8010462:	bfb8      	it	lt
 8010464:	4613      	movlt	r3, r2
 8010466:	6033      	str	r3, [r6, #0]
 8010468:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801046c:	4607      	mov	r7, r0
 801046e:	460c      	mov	r4, r1
 8010470:	b10a      	cbz	r2, 8010476 <_printf_common+0x26>
 8010472:	3301      	adds	r3, #1
 8010474:	6033      	str	r3, [r6, #0]
 8010476:	6823      	ldr	r3, [r4, #0]
 8010478:	0699      	lsls	r1, r3, #26
 801047a:	bf42      	ittt	mi
 801047c:	6833      	ldrmi	r3, [r6, #0]
 801047e:	3302      	addmi	r3, #2
 8010480:	6033      	strmi	r3, [r6, #0]
 8010482:	6825      	ldr	r5, [r4, #0]
 8010484:	f015 0506 	ands.w	r5, r5, #6
 8010488:	d106      	bne.n	8010498 <_printf_common+0x48>
 801048a:	f104 0a19 	add.w	sl, r4, #25
 801048e:	68e3      	ldr	r3, [r4, #12]
 8010490:	6832      	ldr	r2, [r6, #0]
 8010492:	1a9b      	subs	r3, r3, r2
 8010494:	42ab      	cmp	r3, r5
 8010496:	dc26      	bgt.n	80104e6 <_printf_common+0x96>
 8010498:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801049c:	6822      	ldr	r2, [r4, #0]
 801049e:	3b00      	subs	r3, #0
 80104a0:	bf18      	it	ne
 80104a2:	2301      	movne	r3, #1
 80104a4:	0692      	lsls	r2, r2, #26
 80104a6:	d42b      	bmi.n	8010500 <_printf_common+0xb0>
 80104a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80104ac:	4641      	mov	r1, r8
 80104ae:	4638      	mov	r0, r7
 80104b0:	47c8      	blx	r9
 80104b2:	3001      	adds	r0, #1
 80104b4:	d01e      	beq.n	80104f4 <_printf_common+0xa4>
 80104b6:	6823      	ldr	r3, [r4, #0]
 80104b8:	6922      	ldr	r2, [r4, #16]
 80104ba:	f003 0306 	and.w	r3, r3, #6
 80104be:	2b04      	cmp	r3, #4
 80104c0:	bf02      	ittt	eq
 80104c2:	68e5      	ldreq	r5, [r4, #12]
 80104c4:	6833      	ldreq	r3, [r6, #0]
 80104c6:	1aed      	subeq	r5, r5, r3
 80104c8:	68a3      	ldr	r3, [r4, #8]
 80104ca:	bf0c      	ite	eq
 80104cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104d0:	2500      	movne	r5, #0
 80104d2:	4293      	cmp	r3, r2
 80104d4:	bfc4      	itt	gt
 80104d6:	1a9b      	subgt	r3, r3, r2
 80104d8:	18ed      	addgt	r5, r5, r3
 80104da:	2600      	movs	r6, #0
 80104dc:	341a      	adds	r4, #26
 80104de:	42b5      	cmp	r5, r6
 80104e0:	d11a      	bne.n	8010518 <_printf_common+0xc8>
 80104e2:	2000      	movs	r0, #0
 80104e4:	e008      	b.n	80104f8 <_printf_common+0xa8>
 80104e6:	2301      	movs	r3, #1
 80104e8:	4652      	mov	r2, sl
 80104ea:	4641      	mov	r1, r8
 80104ec:	4638      	mov	r0, r7
 80104ee:	47c8      	blx	r9
 80104f0:	3001      	adds	r0, #1
 80104f2:	d103      	bne.n	80104fc <_printf_common+0xac>
 80104f4:	f04f 30ff 	mov.w	r0, #4294967295
 80104f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104fc:	3501      	adds	r5, #1
 80104fe:	e7c6      	b.n	801048e <_printf_common+0x3e>
 8010500:	18e1      	adds	r1, r4, r3
 8010502:	1c5a      	adds	r2, r3, #1
 8010504:	2030      	movs	r0, #48	@ 0x30
 8010506:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801050a:	4422      	add	r2, r4
 801050c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010510:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010514:	3302      	adds	r3, #2
 8010516:	e7c7      	b.n	80104a8 <_printf_common+0x58>
 8010518:	2301      	movs	r3, #1
 801051a:	4622      	mov	r2, r4
 801051c:	4641      	mov	r1, r8
 801051e:	4638      	mov	r0, r7
 8010520:	47c8      	blx	r9
 8010522:	3001      	adds	r0, #1
 8010524:	d0e6      	beq.n	80104f4 <_printf_common+0xa4>
 8010526:	3601      	adds	r6, #1
 8010528:	e7d9      	b.n	80104de <_printf_common+0x8e>
	...

0801052c <_printf_i>:
 801052c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010530:	7e0f      	ldrb	r7, [r1, #24]
 8010532:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010534:	2f78      	cmp	r7, #120	@ 0x78
 8010536:	4691      	mov	r9, r2
 8010538:	4680      	mov	r8, r0
 801053a:	460c      	mov	r4, r1
 801053c:	469a      	mov	sl, r3
 801053e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010542:	d807      	bhi.n	8010554 <_printf_i+0x28>
 8010544:	2f62      	cmp	r7, #98	@ 0x62
 8010546:	d80a      	bhi.n	801055e <_printf_i+0x32>
 8010548:	2f00      	cmp	r7, #0
 801054a:	f000 80d1 	beq.w	80106f0 <_printf_i+0x1c4>
 801054e:	2f58      	cmp	r7, #88	@ 0x58
 8010550:	f000 80b8 	beq.w	80106c4 <_printf_i+0x198>
 8010554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010558:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801055c:	e03a      	b.n	80105d4 <_printf_i+0xa8>
 801055e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010562:	2b15      	cmp	r3, #21
 8010564:	d8f6      	bhi.n	8010554 <_printf_i+0x28>
 8010566:	a101      	add	r1, pc, #4	@ (adr r1, 801056c <_printf_i+0x40>)
 8010568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801056c:	080105c5 	.word	0x080105c5
 8010570:	080105d9 	.word	0x080105d9
 8010574:	08010555 	.word	0x08010555
 8010578:	08010555 	.word	0x08010555
 801057c:	08010555 	.word	0x08010555
 8010580:	08010555 	.word	0x08010555
 8010584:	080105d9 	.word	0x080105d9
 8010588:	08010555 	.word	0x08010555
 801058c:	08010555 	.word	0x08010555
 8010590:	08010555 	.word	0x08010555
 8010594:	08010555 	.word	0x08010555
 8010598:	080106d7 	.word	0x080106d7
 801059c:	08010603 	.word	0x08010603
 80105a0:	08010691 	.word	0x08010691
 80105a4:	08010555 	.word	0x08010555
 80105a8:	08010555 	.word	0x08010555
 80105ac:	080106f9 	.word	0x080106f9
 80105b0:	08010555 	.word	0x08010555
 80105b4:	08010603 	.word	0x08010603
 80105b8:	08010555 	.word	0x08010555
 80105bc:	08010555 	.word	0x08010555
 80105c0:	08010699 	.word	0x08010699
 80105c4:	6833      	ldr	r3, [r6, #0]
 80105c6:	1d1a      	adds	r2, r3, #4
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	6032      	str	r2, [r6, #0]
 80105cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80105d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80105d4:	2301      	movs	r3, #1
 80105d6:	e09c      	b.n	8010712 <_printf_i+0x1e6>
 80105d8:	6833      	ldr	r3, [r6, #0]
 80105da:	6820      	ldr	r0, [r4, #0]
 80105dc:	1d19      	adds	r1, r3, #4
 80105de:	6031      	str	r1, [r6, #0]
 80105e0:	0606      	lsls	r6, r0, #24
 80105e2:	d501      	bpl.n	80105e8 <_printf_i+0xbc>
 80105e4:	681d      	ldr	r5, [r3, #0]
 80105e6:	e003      	b.n	80105f0 <_printf_i+0xc4>
 80105e8:	0645      	lsls	r5, r0, #25
 80105ea:	d5fb      	bpl.n	80105e4 <_printf_i+0xb8>
 80105ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80105f0:	2d00      	cmp	r5, #0
 80105f2:	da03      	bge.n	80105fc <_printf_i+0xd0>
 80105f4:	232d      	movs	r3, #45	@ 0x2d
 80105f6:	426d      	negs	r5, r5
 80105f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105fc:	4858      	ldr	r0, [pc, #352]	@ (8010760 <_printf_i+0x234>)
 80105fe:	230a      	movs	r3, #10
 8010600:	e011      	b.n	8010626 <_printf_i+0xfa>
 8010602:	6821      	ldr	r1, [r4, #0]
 8010604:	6833      	ldr	r3, [r6, #0]
 8010606:	0608      	lsls	r0, r1, #24
 8010608:	f853 5b04 	ldr.w	r5, [r3], #4
 801060c:	d402      	bmi.n	8010614 <_printf_i+0xe8>
 801060e:	0649      	lsls	r1, r1, #25
 8010610:	bf48      	it	mi
 8010612:	b2ad      	uxthmi	r5, r5
 8010614:	2f6f      	cmp	r7, #111	@ 0x6f
 8010616:	4852      	ldr	r0, [pc, #328]	@ (8010760 <_printf_i+0x234>)
 8010618:	6033      	str	r3, [r6, #0]
 801061a:	bf14      	ite	ne
 801061c:	230a      	movne	r3, #10
 801061e:	2308      	moveq	r3, #8
 8010620:	2100      	movs	r1, #0
 8010622:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010626:	6866      	ldr	r6, [r4, #4]
 8010628:	60a6      	str	r6, [r4, #8]
 801062a:	2e00      	cmp	r6, #0
 801062c:	db05      	blt.n	801063a <_printf_i+0x10e>
 801062e:	6821      	ldr	r1, [r4, #0]
 8010630:	432e      	orrs	r6, r5
 8010632:	f021 0104 	bic.w	r1, r1, #4
 8010636:	6021      	str	r1, [r4, #0]
 8010638:	d04b      	beq.n	80106d2 <_printf_i+0x1a6>
 801063a:	4616      	mov	r6, r2
 801063c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010640:	fb03 5711 	mls	r7, r3, r1, r5
 8010644:	5dc7      	ldrb	r7, [r0, r7]
 8010646:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801064a:	462f      	mov	r7, r5
 801064c:	42bb      	cmp	r3, r7
 801064e:	460d      	mov	r5, r1
 8010650:	d9f4      	bls.n	801063c <_printf_i+0x110>
 8010652:	2b08      	cmp	r3, #8
 8010654:	d10b      	bne.n	801066e <_printf_i+0x142>
 8010656:	6823      	ldr	r3, [r4, #0]
 8010658:	07df      	lsls	r7, r3, #31
 801065a:	d508      	bpl.n	801066e <_printf_i+0x142>
 801065c:	6923      	ldr	r3, [r4, #16]
 801065e:	6861      	ldr	r1, [r4, #4]
 8010660:	4299      	cmp	r1, r3
 8010662:	bfde      	ittt	le
 8010664:	2330      	movle	r3, #48	@ 0x30
 8010666:	f806 3c01 	strble.w	r3, [r6, #-1]
 801066a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801066e:	1b92      	subs	r2, r2, r6
 8010670:	6122      	str	r2, [r4, #16]
 8010672:	f8cd a000 	str.w	sl, [sp]
 8010676:	464b      	mov	r3, r9
 8010678:	aa03      	add	r2, sp, #12
 801067a:	4621      	mov	r1, r4
 801067c:	4640      	mov	r0, r8
 801067e:	f7ff fee7 	bl	8010450 <_printf_common>
 8010682:	3001      	adds	r0, #1
 8010684:	d14a      	bne.n	801071c <_printf_i+0x1f0>
 8010686:	f04f 30ff 	mov.w	r0, #4294967295
 801068a:	b004      	add	sp, #16
 801068c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	f043 0320 	orr.w	r3, r3, #32
 8010696:	6023      	str	r3, [r4, #0]
 8010698:	4832      	ldr	r0, [pc, #200]	@ (8010764 <_printf_i+0x238>)
 801069a:	2778      	movs	r7, #120	@ 0x78
 801069c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80106a0:	6823      	ldr	r3, [r4, #0]
 80106a2:	6831      	ldr	r1, [r6, #0]
 80106a4:	061f      	lsls	r7, r3, #24
 80106a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80106aa:	d402      	bmi.n	80106b2 <_printf_i+0x186>
 80106ac:	065f      	lsls	r7, r3, #25
 80106ae:	bf48      	it	mi
 80106b0:	b2ad      	uxthmi	r5, r5
 80106b2:	6031      	str	r1, [r6, #0]
 80106b4:	07d9      	lsls	r1, r3, #31
 80106b6:	bf44      	itt	mi
 80106b8:	f043 0320 	orrmi.w	r3, r3, #32
 80106bc:	6023      	strmi	r3, [r4, #0]
 80106be:	b11d      	cbz	r5, 80106c8 <_printf_i+0x19c>
 80106c0:	2310      	movs	r3, #16
 80106c2:	e7ad      	b.n	8010620 <_printf_i+0xf4>
 80106c4:	4826      	ldr	r0, [pc, #152]	@ (8010760 <_printf_i+0x234>)
 80106c6:	e7e9      	b.n	801069c <_printf_i+0x170>
 80106c8:	6823      	ldr	r3, [r4, #0]
 80106ca:	f023 0320 	bic.w	r3, r3, #32
 80106ce:	6023      	str	r3, [r4, #0]
 80106d0:	e7f6      	b.n	80106c0 <_printf_i+0x194>
 80106d2:	4616      	mov	r6, r2
 80106d4:	e7bd      	b.n	8010652 <_printf_i+0x126>
 80106d6:	6833      	ldr	r3, [r6, #0]
 80106d8:	6825      	ldr	r5, [r4, #0]
 80106da:	6961      	ldr	r1, [r4, #20]
 80106dc:	1d18      	adds	r0, r3, #4
 80106de:	6030      	str	r0, [r6, #0]
 80106e0:	062e      	lsls	r6, r5, #24
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	d501      	bpl.n	80106ea <_printf_i+0x1be>
 80106e6:	6019      	str	r1, [r3, #0]
 80106e8:	e002      	b.n	80106f0 <_printf_i+0x1c4>
 80106ea:	0668      	lsls	r0, r5, #25
 80106ec:	d5fb      	bpl.n	80106e6 <_printf_i+0x1ba>
 80106ee:	8019      	strh	r1, [r3, #0]
 80106f0:	2300      	movs	r3, #0
 80106f2:	6123      	str	r3, [r4, #16]
 80106f4:	4616      	mov	r6, r2
 80106f6:	e7bc      	b.n	8010672 <_printf_i+0x146>
 80106f8:	6833      	ldr	r3, [r6, #0]
 80106fa:	1d1a      	adds	r2, r3, #4
 80106fc:	6032      	str	r2, [r6, #0]
 80106fe:	681e      	ldr	r6, [r3, #0]
 8010700:	6862      	ldr	r2, [r4, #4]
 8010702:	2100      	movs	r1, #0
 8010704:	4630      	mov	r0, r6
 8010706:	f7ef fd8b 	bl	8000220 <memchr>
 801070a:	b108      	cbz	r0, 8010710 <_printf_i+0x1e4>
 801070c:	1b80      	subs	r0, r0, r6
 801070e:	6060      	str	r0, [r4, #4]
 8010710:	6863      	ldr	r3, [r4, #4]
 8010712:	6123      	str	r3, [r4, #16]
 8010714:	2300      	movs	r3, #0
 8010716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801071a:	e7aa      	b.n	8010672 <_printf_i+0x146>
 801071c:	6923      	ldr	r3, [r4, #16]
 801071e:	4632      	mov	r2, r6
 8010720:	4649      	mov	r1, r9
 8010722:	4640      	mov	r0, r8
 8010724:	47d0      	blx	sl
 8010726:	3001      	adds	r0, #1
 8010728:	d0ad      	beq.n	8010686 <_printf_i+0x15a>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	079b      	lsls	r3, r3, #30
 801072e:	d413      	bmi.n	8010758 <_printf_i+0x22c>
 8010730:	68e0      	ldr	r0, [r4, #12]
 8010732:	9b03      	ldr	r3, [sp, #12]
 8010734:	4298      	cmp	r0, r3
 8010736:	bfb8      	it	lt
 8010738:	4618      	movlt	r0, r3
 801073a:	e7a6      	b.n	801068a <_printf_i+0x15e>
 801073c:	2301      	movs	r3, #1
 801073e:	4632      	mov	r2, r6
 8010740:	4649      	mov	r1, r9
 8010742:	4640      	mov	r0, r8
 8010744:	47d0      	blx	sl
 8010746:	3001      	adds	r0, #1
 8010748:	d09d      	beq.n	8010686 <_printf_i+0x15a>
 801074a:	3501      	adds	r5, #1
 801074c:	68e3      	ldr	r3, [r4, #12]
 801074e:	9903      	ldr	r1, [sp, #12]
 8010750:	1a5b      	subs	r3, r3, r1
 8010752:	42ab      	cmp	r3, r5
 8010754:	dcf2      	bgt.n	801073c <_printf_i+0x210>
 8010756:	e7eb      	b.n	8010730 <_printf_i+0x204>
 8010758:	2500      	movs	r5, #0
 801075a:	f104 0619 	add.w	r6, r4, #25
 801075e:	e7f5      	b.n	801074c <_printf_i+0x220>
 8010760:	0801307a 	.word	0x0801307a
 8010764:	0801308b 	.word	0x0801308b

08010768 <std>:
 8010768:	2300      	movs	r3, #0
 801076a:	b510      	push	{r4, lr}
 801076c:	4604      	mov	r4, r0
 801076e:	e9c0 3300 	strd	r3, r3, [r0]
 8010772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010776:	6083      	str	r3, [r0, #8]
 8010778:	8181      	strh	r1, [r0, #12]
 801077a:	6643      	str	r3, [r0, #100]	@ 0x64
 801077c:	81c2      	strh	r2, [r0, #14]
 801077e:	6183      	str	r3, [r0, #24]
 8010780:	4619      	mov	r1, r3
 8010782:	2208      	movs	r2, #8
 8010784:	305c      	adds	r0, #92	@ 0x5c
 8010786:	f000 f915 	bl	80109b4 <memset>
 801078a:	4b0d      	ldr	r3, [pc, #52]	@ (80107c0 <std+0x58>)
 801078c:	6263      	str	r3, [r4, #36]	@ 0x24
 801078e:	4b0d      	ldr	r3, [pc, #52]	@ (80107c4 <std+0x5c>)
 8010790:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010792:	4b0d      	ldr	r3, [pc, #52]	@ (80107c8 <std+0x60>)
 8010794:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010796:	4b0d      	ldr	r3, [pc, #52]	@ (80107cc <std+0x64>)
 8010798:	6323      	str	r3, [r4, #48]	@ 0x30
 801079a:	4b0d      	ldr	r3, [pc, #52]	@ (80107d0 <std+0x68>)
 801079c:	6224      	str	r4, [r4, #32]
 801079e:	429c      	cmp	r4, r3
 80107a0:	d006      	beq.n	80107b0 <std+0x48>
 80107a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80107a6:	4294      	cmp	r4, r2
 80107a8:	d002      	beq.n	80107b0 <std+0x48>
 80107aa:	33d0      	adds	r3, #208	@ 0xd0
 80107ac:	429c      	cmp	r4, r3
 80107ae:	d105      	bne.n	80107bc <std+0x54>
 80107b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80107b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107b8:	f000 b9d6 	b.w	8010b68 <__retarget_lock_init_recursive>
 80107bc:	bd10      	pop	{r4, pc}
 80107be:	bf00      	nop
 80107c0:	080108ed 	.word	0x080108ed
 80107c4:	0801090f 	.word	0x0801090f
 80107c8:	08010947 	.word	0x08010947
 80107cc:	0801096b 	.word	0x0801096b
 80107d0:	200102e0 	.word	0x200102e0

080107d4 <stdio_exit_handler>:
 80107d4:	4a02      	ldr	r2, [pc, #8]	@ (80107e0 <stdio_exit_handler+0xc>)
 80107d6:	4903      	ldr	r1, [pc, #12]	@ (80107e4 <stdio_exit_handler+0x10>)
 80107d8:	4803      	ldr	r0, [pc, #12]	@ (80107e8 <stdio_exit_handler+0x14>)
 80107da:	f000 b869 	b.w	80108b0 <_fwalk_sglue>
 80107de:	bf00      	nop
 80107e0:	20000188 	.word	0x20000188
 80107e4:	080124ed 	.word	0x080124ed
 80107e8:	20000198 	.word	0x20000198

080107ec <cleanup_stdio>:
 80107ec:	6841      	ldr	r1, [r0, #4]
 80107ee:	4b0c      	ldr	r3, [pc, #48]	@ (8010820 <cleanup_stdio+0x34>)
 80107f0:	4299      	cmp	r1, r3
 80107f2:	b510      	push	{r4, lr}
 80107f4:	4604      	mov	r4, r0
 80107f6:	d001      	beq.n	80107fc <cleanup_stdio+0x10>
 80107f8:	f001 fe78 	bl	80124ec <_fflush_r>
 80107fc:	68a1      	ldr	r1, [r4, #8]
 80107fe:	4b09      	ldr	r3, [pc, #36]	@ (8010824 <cleanup_stdio+0x38>)
 8010800:	4299      	cmp	r1, r3
 8010802:	d002      	beq.n	801080a <cleanup_stdio+0x1e>
 8010804:	4620      	mov	r0, r4
 8010806:	f001 fe71 	bl	80124ec <_fflush_r>
 801080a:	68e1      	ldr	r1, [r4, #12]
 801080c:	4b06      	ldr	r3, [pc, #24]	@ (8010828 <cleanup_stdio+0x3c>)
 801080e:	4299      	cmp	r1, r3
 8010810:	d004      	beq.n	801081c <cleanup_stdio+0x30>
 8010812:	4620      	mov	r0, r4
 8010814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010818:	f001 be68 	b.w	80124ec <_fflush_r>
 801081c:	bd10      	pop	{r4, pc}
 801081e:	bf00      	nop
 8010820:	200102e0 	.word	0x200102e0
 8010824:	20010348 	.word	0x20010348
 8010828:	200103b0 	.word	0x200103b0

0801082c <global_stdio_init.part.0>:
 801082c:	b510      	push	{r4, lr}
 801082e:	4b0b      	ldr	r3, [pc, #44]	@ (801085c <global_stdio_init.part.0+0x30>)
 8010830:	4c0b      	ldr	r4, [pc, #44]	@ (8010860 <global_stdio_init.part.0+0x34>)
 8010832:	4a0c      	ldr	r2, [pc, #48]	@ (8010864 <global_stdio_init.part.0+0x38>)
 8010834:	601a      	str	r2, [r3, #0]
 8010836:	4620      	mov	r0, r4
 8010838:	2200      	movs	r2, #0
 801083a:	2104      	movs	r1, #4
 801083c:	f7ff ff94 	bl	8010768 <std>
 8010840:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010844:	2201      	movs	r2, #1
 8010846:	2109      	movs	r1, #9
 8010848:	f7ff ff8e 	bl	8010768 <std>
 801084c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010850:	2202      	movs	r2, #2
 8010852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010856:	2112      	movs	r1, #18
 8010858:	f7ff bf86 	b.w	8010768 <std>
 801085c:	20010418 	.word	0x20010418
 8010860:	200102e0 	.word	0x200102e0
 8010864:	080107d5 	.word	0x080107d5

08010868 <__sfp_lock_acquire>:
 8010868:	4801      	ldr	r0, [pc, #4]	@ (8010870 <__sfp_lock_acquire+0x8>)
 801086a:	f000 b97e 	b.w	8010b6a <__retarget_lock_acquire_recursive>
 801086e:	bf00      	nop
 8010870:	20010421 	.word	0x20010421

08010874 <__sfp_lock_release>:
 8010874:	4801      	ldr	r0, [pc, #4]	@ (801087c <__sfp_lock_release+0x8>)
 8010876:	f000 b979 	b.w	8010b6c <__retarget_lock_release_recursive>
 801087a:	bf00      	nop
 801087c:	20010421 	.word	0x20010421

08010880 <__sinit>:
 8010880:	b510      	push	{r4, lr}
 8010882:	4604      	mov	r4, r0
 8010884:	f7ff fff0 	bl	8010868 <__sfp_lock_acquire>
 8010888:	6a23      	ldr	r3, [r4, #32]
 801088a:	b11b      	cbz	r3, 8010894 <__sinit+0x14>
 801088c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010890:	f7ff bff0 	b.w	8010874 <__sfp_lock_release>
 8010894:	4b04      	ldr	r3, [pc, #16]	@ (80108a8 <__sinit+0x28>)
 8010896:	6223      	str	r3, [r4, #32]
 8010898:	4b04      	ldr	r3, [pc, #16]	@ (80108ac <__sinit+0x2c>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d1f5      	bne.n	801088c <__sinit+0xc>
 80108a0:	f7ff ffc4 	bl	801082c <global_stdio_init.part.0>
 80108a4:	e7f2      	b.n	801088c <__sinit+0xc>
 80108a6:	bf00      	nop
 80108a8:	080107ed 	.word	0x080107ed
 80108ac:	20010418 	.word	0x20010418

080108b0 <_fwalk_sglue>:
 80108b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108b4:	4607      	mov	r7, r0
 80108b6:	4688      	mov	r8, r1
 80108b8:	4614      	mov	r4, r2
 80108ba:	2600      	movs	r6, #0
 80108bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80108c0:	f1b9 0901 	subs.w	r9, r9, #1
 80108c4:	d505      	bpl.n	80108d2 <_fwalk_sglue+0x22>
 80108c6:	6824      	ldr	r4, [r4, #0]
 80108c8:	2c00      	cmp	r4, #0
 80108ca:	d1f7      	bne.n	80108bc <_fwalk_sglue+0xc>
 80108cc:	4630      	mov	r0, r6
 80108ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108d2:	89ab      	ldrh	r3, [r5, #12]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d907      	bls.n	80108e8 <_fwalk_sglue+0x38>
 80108d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80108dc:	3301      	adds	r3, #1
 80108de:	d003      	beq.n	80108e8 <_fwalk_sglue+0x38>
 80108e0:	4629      	mov	r1, r5
 80108e2:	4638      	mov	r0, r7
 80108e4:	47c0      	blx	r8
 80108e6:	4306      	orrs	r6, r0
 80108e8:	3568      	adds	r5, #104	@ 0x68
 80108ea:	e7e9      	b.n	80108c0 <_fwalk_sglue+0x10>

080108ec <__sread>:
 80108ec:	b510      	push	{r4, lr}
 80108ee:	460c      	mov	r4, r1
 80108f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108f4:	f000 f8ea 	bl	8010acc <_read_r>
 80108f8:	2800      	cmp	r0, #0
 80108fa:	bfab      	itete	ge
 80108fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80108fe:	89a3      	ldrhlt	r3, [r4, #12]
 8010900:	181b      	addge	r3, r3, r0
 8010902:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010906:	bfac      	ite	ge
 8010908:	6563      	strge	r3, [r4, #84]	@ 0x54
 801090a:	81a3      	strhlt	r3, [r4, #12]
 801090c:	bd10      	pop	{r4, pc}

0801090e <__swrite>:
 801090e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010912:	461f      	mov	r7, r3
 8010914:	898b      	ldrh	r3, [r1, #12]
 8010916:	05db      	lsls	r3, r3, #23
 8010918:	4605      	mov	r5, r0
 801091a:	460c      	mov	r4, r1
 801091c:	4616      	mov	r6, r2
 801091e:	d505      	bpl.n	801092c <__swrite+0x1e>
 8010920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010924:	2302      	movs	r3, #2
 8010926:	2200      	movs	r2, #0
 8010928:	f000 f8be 	bl	8010aa8 <_lseek_r>
 801092c:	89a3      	ldrh	r3, [r4, #12]
 801092e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010936:	81a3      	strh	r3, [r4, #12]
 8010938:	4632      	mov	r2, r6
 801093a:	463b      	mov	r3, r7
 801093c:	4628      	mov	r0, r5
 801093e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010942:	f000 b8d5 	b.w	8010af0 <_write_r>

08010946 <__sseek>:
 8010946:	b510      	push	{r4, lr}
 8010948:	460c      	mov	r4, r1
 801094a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801094e:	f000 f8ab 	bl	8010aa8 <_lseek_r>
 8010952:	1c43      	adds	r3, r0, #1
 8010954:	89a3      	ldrh	r3, [r4, #12]
 8010956:	bf15      	itete	ne
 8010958:	6560      	strne	r0, [r4, #84]	@ 0x54
 801095a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801095e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010962:	81a3      	strheq	r3, [r4, #12]
 8010964:	bf18      	it	ne
 8010966:	81a3      	strhne	r3, [r4, #12]
 8010968:	bd10      	pop	{r4, pc}

0801096a <__sclose>:
 801096a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801096e:	f000 b82d 	b.w	80109cc <_close_r>
	...

08010974 <_vsiprintf_r>:
 8010974:	b510      	push	{r4, lr}
 8010976:	b09a      	sub	sp, #104	@ 0x68
 8010978:	2400      	movs	r4, #0
 801097a:	9100      	str	r1, [sp, #0]
 801097c:	9104      	str	r1, [sp, #16]
 801097e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010982:	9105      	str	r1, [sp, #20]
 8010984:	9102      	str	r1, [sp, #8]
 8010986:	4905      	ldr	r1, [pc, #20]	@ (801099c <_vsiprintf_r+0x28>)
 8010988:	9103      	str	r1, [sp, #12]
 801098a:	4669      	mov	r1, sp
 801098c:	9419      	str	r4, [sp, #100]	@ 0x64
 801098e:	f001 fc2d 	bl	80121ec <_svfiprintf_r>
 8010992:	9b00      	ldr	r3, [sp, #0]
 8010994:	701c      	strb	r4, [r3, #0]
 8010996:	b01a      	add	sp, #104	@ 0x68
 8010998:	bd10      	pop	{r4, pc}
 801099a:	bf00      	nop
 801099c:	ffff0208 	.word	0xffff0208

080109a0 <vsiprintf>:
 80109a0:	4613      	mov	r3, r2
 80109a2:	460a      	mov	r2, r1
 80109a4:	4601      	mov	r1, r0
 80109a6:	4802      	ldr	r0, [pc, #8]	@ (80109b0 <vsiprintf+0x10>)
 80109a8:	6800      	ldr	r0, [r0, #0]
 80109aa:	f7ff bfe3 	b.w	8010974 <_vsiprintf_r>
 80109ae:	bf00      	nop
 80109b0:	20000194 	.word	0x20000194

080109b4 <memset>:
 80109b4:	4402      	add	r2, r0
 80109b6:	4603      	mov	r3, r0
 80109b8:	4293      	cmp	r3, r2
 80109ba:	d100      	bne.n	80109be <memset+0xa>
 80109bc:	4770      	bx	lr
 80109be:	f803 1b01 	strb.w	r1, [r3], #1
 80109c2:	e7f9      	b.n	80109b8 <memset+0x4>

080109c4 <_localeconv_r>:
 80109c4:	4800      	ldr	r0, [pc, #0]	@ (80109c8 <_localeconv_r+0x4>)
 80109c6:	4770      	bx	lr
 80109c8:	200002d4 	.word	0x200002d4

080109cc <_close_r>:
 80109cc:	b538      	push	{r3, r4, r5, lr}
 80109ce:	4d06      	ldr	r5, [pc, #24]	@ (80109e8 <_close_r+0x1c>)
 80109d0:	2300      	movs	r3, #0
 80109d2:	4604      	mov	r4, r0
 80109d4:	4608      	mov	r0, r1
 80109d6:	602b      	str	r3, [r5, #0]
 80109d8:	f7f1 fcba 	bl	8002350 <_close>
 80109dc:	1c43      	adds	r3, r0, #1
 80109de:	d102      	bne.n	80109e6 <_close_r+0x1a>
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	b103      	cbz	r3, 80109e6 <_close_r+0x1a>
 80109e4:	6023      	str	r3, [r4, #0]
 80109e6:	bd38      	pop	{r3, r4, r5, pc}
 80109e8:	2001041c 	.word	0x2001041c

080109ec <_reclaim_reent>:
 80109ec:	4b2d      	ldr	r3, [pc, #180]	@ (8010aa4 <_reclaim_reent+0xb8>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4283      	cmp	r3, r0
 80109f2:	b570      	push	{r4, r5, r6, lr}
 80109f4:	4604      	mov	r4, r0
 80109f6:	d053      	beq.n	8010aa0 <_reclaim_reent+0xb4>
 80109f8:	69c3      	ldr	r3, [r0, #28]
 80109fa:	b31b      	cbz	r3, 8010a44 <_reclaim_reent+0x58>
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	b163      	cbz	r3, 8010a1a <_reclaim_reent+0x2e>
 8010a00:	2500      	movs	r5, #0
 8010a02:	69e3      	ldr	r3, [r4, #28]
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	5959      	ldr	r1, [r3, r5]
 8010a08:	b9b1      	cbnz	r1, 8010a38 <_reclaim_reent+0x4c>
 8010a0a:	3504      	adds	r5, #4
 8010a0c:	2d80      	cmp	r5, #128	@ 0x80
 8010a0e:	d1f8      	bne.n	8010a02 <_reclaim_reent+0x16>
 8010a10:	69e3      	ldr	r3, [r4, #28]
 8010a12:	4620      	mov	r0, r4
 8010a14:	68d9      	ldr	r1, [r3, #12]
 8010a16:	f000 ff13 	bl	8011840 <_free_r>
 8010a1a:	69e3      	ldr	r3, [r4, #28]
 8010a1c:	6819      	ldr	r1, [r3, #0]
 8010a1e:	b111      	cbz	r1, 8010a26 <_reclaim_reent+0x3a>
 8010a20:	4620      	mov	r0, r4
 8010a22:	f000 ff0d 	bl	8011840 <_free_r>
 8010a26:	69e3      	ldr	r3, [r4, #28]
 8010a28:	689d      	ldr	r5, [r3, #8]
 8010a2a:	b15d      	cbz	r5, 8010a44 <_reclaim_reent+0x58>
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	4620      	mov	r0, r4
 8010a30:	682d      	ldr	r5, [r5, #0]
 8010a32:	f000 ff05 	bl	8011840 <_free_r>
 8010a36:	e7f8      	b.n	8010a2a <_reclaim_reent+0x3e>
 8010a38:	680e      	ldr	r6, [r1, #0]
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	f000 ff00 	bl	8011840 <_free_r>
 8010a40:	4631      	mov	r1, r6
 8010a42:	e7e1      	b.n	8010a08 <_reclaim_reent+0x1c>
 8010a44:	6961      	ldr	r1, [r4, #20]
 8010a46:	b111      	cbz	r1, 8010a4e <_reclaim_reent+0x62>
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f000 fef9 	bl	8011840 <_free_r>
 8010a4e:	69e1      	ldr	r1, [r4, #28]
 8010a50:	b111      	cbz	r1, 8010a58 <_reclaim_reent+0x6c>
 8010a52:	4620      	mov	r0, r4
 8010a54:	f000 fef4 	bl	8011840 <_free_r>
 8010a58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010a5a:	b111      	cbz	r1, 8010a62 <_reclaim_reent+0x76>
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	f000 feef 	bl	8011840 <_free_r>
 8010a62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a64:	b111      	cbz	r1, 8010a6c <_reclaim_reent+0x80>
 8010a66:	4620      	mov	r0, r4
 8010a68:	f000 feea 	bl	8011840 <_free_r>
 8010a6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010a6e:	b111      	cbz	r1, 8010a76 <_reclaim_reent+0x8a>
 8010a70:	4620      	mov	r0, r4
 8010a72:	f000 fee5 	bl	8011840 <_free_r>
 8010a76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010a78:	b111      	cbz	r1, 8010a80 <_reclaim_reent+0x94>
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	f000 fee0 	bl	8011840 <_free_r>
 8010a80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010a82:	b111      	cbz	r1, 8010a8a <_reclaim_reent+0x9e>
 8010a84:	4620      	mov	r0, r4
 8010a86:	f000 fedb 	bl	8011840 <_free_r>
 8010a8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010a8c:	b111      	cbz	r1, 8010a94 <_reclaim_reent+0xa8>
 8010a8e:	4620      	mov	r0, r4
 8010a90:	f000 fed6 	bl	8011840 <_free_r>
 8010a94:	6a23      	ldr	r3, [r4, #32]
 8010a96:	b11b      	cbz	r3, 8010aa0 <_reclaim_reent+0xb4>
 8010a98:	4620      	mov	r0, r4
 8010a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a9e:	4718      	bx	r3
 8010aa0:	bd70      	pop	{r4, r5, r6, pc}
 8010aa2:	bf00      	nop
 8010aa4:	20000194 	.word	0x20000194

08010aa8 <_lseek_r>:
 8010aa8:	b538      	push	{r3, r4, r5, lr}
 8010aaa:	4d07      	ldr	r5, [pc, #28]	@ (8010ac8 <_lseek_r+0x20>)
 8010aac:	4604      	mov	r4, r0
 8010aae:	4608      	mov	r0, r1
 8010ab0:	4611      	mov	r1, r2
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	602a      	str	r2, [r5, #0]
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	f7f1 fc71 	bl	800239e <_lseek>
 8010abc:	1c43      	adds	r3, r0, #1
 8010abe:	d102      	bne.n	8010ac6 <_lseek_r+0x1e>
 8010ac0:	682b      	ldr	r3, [r5, #0]
 8010ac2:	b103      	cbz	r3, 8010ac6 <_lseek_r+0x1e>
 8010ac4:	6023      	str	r3, [r4, #0]
 8010ac6:	bd38      	pop	{r3, r4, r5, pc}
 8010ac8:	2001041c 	.word	0x2001041c

08010acc <_read_r>:
 8010acc:	b538      	push	{r3, r4, r5, lr}
 8010ace:	4d07      	ldr	r5, [pc, #28]	@ (8010aec <_read_r+0x20>)
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	4608      	mov	r0, r1
 8010ad4:	4611      	mov	r1, r2
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	602a      	str	r2, [r5, #0]
 8010ada:	461a      	mov	r2, r3
 8010adc:	f7f1 fbff 	bl	80022de <_read>
 8010ae0:	1c43      	adds	r3, r0, #1
 8010ae2:	d102      	bne.n	8010aea <_read_r+0x1e>
 8010ae4:	682b      	ldr	r3, [r5, #0]
 8010ae6:	b103      	cbz	r3, 8010aea <_read_r+0x1e>
 8010ae8:	6023      	str	r3, [r4, #0]
 8010aea:	bd38      	pop	{r3, r4, r5, pc}
 8010aec:	2001041c 	.word	0x2001041c

08010af0 <_write_r>:
 8010af0:	b538      	push	{r3, r4, r5, lr}
 8010af2:	4d07      	ldr	r5, [pc, #28]	@ (8010b10 <_write_r+0x20>)
 8010af4:	4604      	mov	r4, r0
 8010af6:	4608      	mov	r0, r1
 8010af8:	4611      	mov	r1, r2
 8010afa:	2200      	movs	r2, #0
 8010afc:	602a      	str	r2, [r5, #0]
 8010afe:	461a      	mov	r2, r3
 8010b00:	f7f1 fc0a 	bl	8002318 <_write>
 8010b04:	1c43      	adds	r3, r0, #1
 8010b06:	d102      	bne.n	8010b0e <_write_r+0x1e>
 8010b08:	682b      	ldr	r3, [r5, #0]
 8010b0a:	b103      	cbz	r3, 8010b0e <_write_r+0x1e>
 8010b0c:	6023      	str	r3, [r4, #0]
 8010b0e:	bd38      	pop	{r3, r4, r5, pc}
 8010b10:	2001041c 	.word	0x2001041c

08010b14 <__errno>:
 8010b14:	4b01      	ldr	r3, [pc, #4]	@ (8010b1c <__errno+0x8>)
 8010b16:	6818      	ldr	r0, [r3, #0]
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	20000194 	.word	0x20000194

08010b20 <__libc_init_array>:
 8010b20:	b570      	push	{r4, r5, r6, lr}
 8010b22:	4d0d      	ldr	r5, [pc, #52]	@ (8010b58 <__libc_init_array+0x38>)
 8010b24:	4c0d      	ldr	r4, [pc, #52]	@ (8010b5c <__libc_init_array+0x3c>)
 8010b26:	1b64      	subs	r4, r4, r5
 8010b28:	10a4      	asrs	r4, r4, #2
 8010b2a:	2600      	movs	r6, #0
 8010b2c:	42a6      	cmp	r6, r4
 8010b2e:	d109      	bne.n	8010b44 <__libc_init_array+0x24>
 8010b30:	4d0b      	ldr	r5, [pc, #44]	@ (8010b60 <__libc_init_array+0x40>)
 8010b32:	4c0c      	ldr	r4, [pc, #48]	@ (8010b64 <__libc_init_array+0x44>)
 8010b34:	f002 f86a 	bl	8012c0c <_init>
 8010b38:	1b64      	subs	r4, r4, r5
 8010b3a:	10a4      	asrs	r4, r4, #2
 8010b3c:	2600      	movs	r6, #0
 8010b3e:	42a6      	cmp	r6, r4
 8010b40:	d105      	bne.n	8010b4e <__libc_init_array+0x2e>
 8010b42:	bd70      	pop	{r4, r5, r6, pc}
 8010b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b48:	4798      	blx	r3
 8010b4a:	3601      	adds	r6, #1
 8010b4c:	e7ee      	b.n	8010b2c <__libc_init_array+0xc>
 8010b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b52:	4798      	blx	r3
 8010b54:	3601      	adds	r6, #1
 8010b56:	e7f2      	b.n	8010b3e <__libc_init_array+0x1e>
 8010b58:	080133e4 	.word	0x080133e4
 8010b5c:	080133e4 	.word	0x080133e4
 8010b60:	080133e4 	.word	0x080133e4
 8010b64:	080133e8 	.word	0x080133e8

08010b68 <__retarget_lock_init_recursive>:
 8010b68:	4770      	bx	lr

08010b6a <__retarget_lock_acquire_recursive>:
 8010b6a:	4770      	bx	lr

08010b6c <__retarget_lock_release_recursive>:
 8010b6c:	4770      	bx	lr

08010b6e <memcpy>:
 8010b6e:	440a      	add	r2, r1
 8010b70:	4291      	cmp	r1, r2
 8010b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b76:	d100      	bne.n	8010b7a <memcpy+0xc>
 8010b78:	4770      	bx	lr
 8010b7a:	b510      	push	{r4, lr}
 8010b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b84:	4291      	cmp	r1, r2
 8010b86:	d1f9      	bne.n	8010b7c <memcpy+0xe>
 8010b88:	bd10      	pop	{r4, pc}

08010b8a <quorem>:
 8010b8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8e:	6903      	ldr	r3, [r0, #16]
 8010b90:	690c      	ldr	r4, [r1, #16]
 8010b92:	42a3      	cmp	r3, r4
 8010b94:	4607      	mov	r7, r0
 8010b96:	db7e      	blt.n	8010c96 <quorem+0x10c>
 8010b98:	3c01      	subs	r4, #1
 8010b9a:	f101 0814 	add.w	r8, r1, #20
 8010b9e:	00a3      	lsls	r3, r4, #2
 8010ba0:	f100 0514 	add.w	r5, r0, #20
 8010ba4:	9300      	str	r3, [sp, #0]
 8010ba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010baa:	9301      	str	r3, [sp, #4]
 8010bac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010bb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010bbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8010bc0:	d32e      	bcc.n	8010c20 <quorem+0x96>
 8010bc2:	f04f 0a00 	mov.w	sl, #0
 8010bc6:	46c4      	mov	ip, r8
 8010bc8:	46ae      	mov	lr, r5
 8010bca:	46d3      	mov	fp, sl
 8010bcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010bd0:	b298      	uxth	r0, r3
 8010bd2:	fb06 a000 	mla	r0, r6, r0, sl
 8010bd6:	0c02      	lsrs	r2, r0, #16
 8010bd8:	0c1b      	lsrs	r3, r3, #16
 8010bda:	fb06 2303 	mla	r3, r6, r3, r2
 8010bde:	f8de 2000 	ldr.w	r2, [lr]
 8010be2:	b280      	uxth	r0, r0
 8010be4:	b292      	uxth	r2, r2
 8010be6:	1a12      	subs	r2, r2, r0
 8010be8:	445a      	add	r2, fp
 8010bea:	f8de 0000 	ldr.w	r0, [lr]
 8010bee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010bf8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010bfc:	b292      	uxth	r2, r2
 8010bfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010c02:	45e1      	cmp	r9, ip
 8010c04:	f84e 2b04 	str.w	r2, [lr], #4
 8010c08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010c0c:	d2de      	bcs.n	8010bcc <quorem+0x42>
 8010c0e:	9b00      	ldr	r3, [sp, #0]
 8010c10:	58eb      	ldr	r3, [r5, r3]
 8010c12:	b92b      	cbnz	r3, 8010c20 <quorem+0x96>
 8010c14:	9b01      	ldr	r3, [sp, #4]
 8010c16:	3b04      	subs	r3, #4
 8010c18:	429d      	cmp	r5, r3
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	d32f      	bcc.n	8010c7e <quorem+0xf4>
 8010c1e:	613c      	str	r4, [r7, #16]
 8010c20:	4638      	mov	r0, r7
 8010c22:	f001 f97f 	bl	8011f24 <__mcmp>
 8010c26:	2800      	cmp	r0, #0
 8010c28:	db25      	blt.n	8010c76 <quorem+0xec>
 8010c2a:	4629      	mov	r1, r5
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010c32:	f8d1 c000 	ldr.w	ip, [r1]
 8010c36:	fa1f fe82 	uxth.w	lr, r2
 8010c3a:	fa1f f38c 	uxth.w	r3, ip
 8010c3e:	eba3 030e 	sub.w	r3, r3, lr
 8010c42:	4403      	add	r3, r0
 8010c44:	0c12      	lsrs	r2, r2, #16
 8010c46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010c4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c54:	45c1      	cmp	r9, r8
 8010c56:	f841 3b04 	str.w	r3, [r1], #4
 8010c5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010c5e:	d2e6      	bcs.n	8010c2e <quorem+0xa4>
 8010c60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c68:	b922      	cbnz	r2, 8010c74 <quorem+0xea>
 8010c6a:	3b04      	subs	r3, #4
 8010c6c:	429d      	cmp	r5, r3
 8010c6e:	461a      	mov	r2, r3
 8010c70:	d30b      	bcc.n	8010c8a <quorem+0x100>
 8010c72:	613c      	str	r4, [r7, #16]
 8010c74:	3601      	adds	r6, #1
 8010c76:	4630      	mov	r0, r6
 8010c78:	b003      	add	sp, #12
 8010c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c7e:	6812      	ldr	r2, [r2, #0]
 8010c80:	3b04      	subs	r3, #4
 8010c82:	2a00      	cmp	r2, #0
 8010c84:	d1cb      	bne.n	8010c1e <quorem+0x94>
 8010c86:	3c01      	subs	r4, #1
 8010c88:	e7c6      	b.n	8010c18 <quorem+0x8e>
 8010c8a:	6812      	ldr	r2, [r2, #0]
 8010c8c:	3b04      	subs	r3, #4
 8010c8e:	2a00      	cmp	r2, #0
 8010c90:	d1ef      	bne.n	8010c72 <quorem+0xe8>
 8010c92:	3c01      	subs	r4, #1
 8010c94:	e7ea      	b.n	8010c6c <quorem+0xe2>
 8010c96:	2000      	movs	r0, #0
 8010c98:	e7ee      	b.n	8010c78 <quorem+0xee>
 8010c9a:	0000      	movs	r0, r0
 8010c9c:	0000      	movs	r0, r0
	...

08010ca0 <_dtoa_r>:
 8010ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca4:	69c7      	ldr	r7, [r0, #28]
 8010ca6:	b097      	sub	sp, #92	@ 0x5c
 8010ca8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010cac:	ec55 4b10 	vmov	r4, r5, d0
 8010cb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010cb2:	9107      	str	r1, [sp, #28]
 8010cb4:	4681      	mov	r9, r0
 8010cb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8010cb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010cba:	b97f      	cbnz	r7, 8010cdc <_dtoa_r+0x3c>
 8010cbc:	2010      	movs	r0, #16
 8010cbe:	f000 fe09 	bl	80118d4 <malloc>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	f8c9 001c 	str.w	r0, [r9, #28]
 8010cc8:	b920      	cbnz	r0, 8010cd4 <_dtoa_r+0x34>
 8010cca:	4ba9      	ldr	r3, [pc, #676]	@ (8010f70 <_dtoa_r+0x2d0>)
 8010ccc:	21ef      	movs	r1, #239	@ 0xef
 8010cce:	48a9      	ldr	r0, [pc, #676]	@ (8010f74 <_dtoa_r+0x2d4>)
 8010cd0:	f001 fc5e 	bl	8012590 <__assert_func>
 8010cd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010cd8:	6007      	str	r7, [r0, #0]
 8010cda:	60c7      	str	r7, [r0, #12]
 8010cdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010ce0:	6819      	ldr	r1, [r3, #0]
 8010ce2:	b159      	cbz	r1, 8010cfc <_dtoa_r+0x5c>
 8010ce4:	685a      	ldr	r2, [r3, #4]
 8010ce6:	604a      	str	r2, [r1, #4]
 8010ce8:	2301      	movs	r3, #1
 8010cea:	4093      	lsls	r3, r2
 8010cec:	608b      	str	r3, [r1, #8]
 8010cee:	4648      	mov	r0, r9
 8010cf0:	f000 fee6 	bl	8011ac0 <_Bfree>
 8010cf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	601a      	str	r2, [r3, #0]
 8010cfc:	1e2b      	subs	r3, r5, #0
 8010cfe:	bfb9      	ittee	lt
 8010d00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010d04:	9305      	strlt	r3, [sp, #20]
 8010d06:	2300      	movge	r3, #0
 8010d08:	6033      	strge	r3, [r6, #0]
 8010d0a:	9f05      	ldr	r7, [sp, #20]
 8010d0c:	4b9a      	ldr	r3, [pc, #616]	@ (8010f78 <_dtoa_r+0x2d8>)
 8010d0e:	bfbc      	itt	lt
 8010d10:	2201      	movlt	r2, #1
 8010d12:	6032      	strlt	r2, [r6, #0]
 8010d14:	43bb      	bics	r3, r7
 8010d16:	d112      	bne.n	8010d3e <_dtoa_r+0x9e>
 8010d18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010d1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010d1e:	6013      	str	r3, [r2, #0]
 8010d20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010d24:	4323      	orrs	r3, r4
 8010d26:	f000 855a 	beq.w	80117de <_dtoa_r+0xb3e>
 8010d2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010d2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010f8c <_dtoa_r+0x2ec>
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f000 855c 	beq.w	80117ee <_dtoa_r+0xb4e>
 8010d36:	f10a 0303 	add.w	r3, sl, #3
 8010d3a:	f000 bd56 	b.w	80117ea <_dtoa_r+0xb4a>
 8010d3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010d42:	2200      	movs	r2, #0
 8010d44:	ec51 0b17 	vmov	r0, r1, d7
 8010d48:	2300      	movs	r3, #0
 8010d4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010d4e:	f7ef fee3 	bl	8000b18 <__aeabi_dcmpeq>
 8010d52:	4680      	mov	r8, r0
 8010d54:	b158      	cbz	r0, 8010d6e <_dtoa_r+0xce>
 8010d56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010d58:	2301      	movs	r3, #1
 8010d5a:	6013      	str	r3, [r2, #0]
 8010d5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010d5e:	b113      	cbz	r3, 8010d66 <_dtoa_r+0xc6>
 8010d60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010d62:	4b86      	ldr	r3, [pc, #536]	@ (8010f7c <_dtoa_r+0x2dc>)
 8010d64:	6013      	str	r3, [r2, #0]
 8010d66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010f90 <_dtoa_r+0x2f0>
 8010d6a:	f000 bd40 	b.w	80117ee <_dtoa_r+0xb4e>
 8010d6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010d72:	aa14      	add	r2, sp, #80	@ 0x50
 8010d74:	a915      	add	r1, sp, #84	@ 0x54
 8010d76:	4648      	mov	r0, r9
 8010d78:	f001 f984 	bl	8012084 <__d2b>
 8010d7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010d80:	9002      	str	r0, [sp, #8]
 8010d82:	2e00      	cmp	r6, #0
 8010d84:	d078      	beq.n	8010e78 <_dtoa_r+0x1d8>
 8010d86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010d94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010d98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010d9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010da0:	4619      	mov	r1, r3
 8010da2:	2200      	movs	r2, #0
 8010da4:	4b76      	ldr	r3, [pc, #472]	@ (8010f80 <_dtoa_r+0x2e0>)
 8010da6:	f7ef fa97 	bl	80002d8 <__aeabi_dsub>
 8010daa:	a36b      	add	r3, pc, #428	@ (adr r3, 8010f58 <_dtoa_r+0x2b8>)
 8010dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db0:	f7ef fc4a 	bl	8000648 <__aeabi_dmul>
 8010db4:	a36a      	add	r3, pc, #424	@ (adr r3, 8010f60 <_dtoa_r+0x2c0>)
 8010db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dba:	f7ef fa8f 	bl	80002dc <__adddf3>
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	4630      	mov	r0, r6
 8010dc2:	460d      	mov	r5, r1
 8010dc4:	f7ef fbd6 	bl	8000574 <__aeabi_i2d>
 8010dc8:	a367      	add	r3, pc, #412	@ (adr r3, 8010f68 <_dtoa_r+0x2c8>)
 8010dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dce:	f7ef fc3b 	bl	8000648 <__aeabi_dmul>
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	4629      	mov	r1, r5
 8010dda:	f7ef fa7f 	bl	80002dc <__adddf3>
 8010dde:	4604      	mov	r4, r0
 8010de0:	460d      	mov	r5, r1
 8010de2:	f7ef fee1 	bl	8000ba8 <__aeabi_d2iz>
 8010de6:	2200      	movs	r2, #0
 8010de8:	4607      	mov	r7, r0
 8010dea:	2300      	movs	r3, #0
 8010dec:	4620      	mov	r0, r4
 8010dee:	4629      	mov	r1, r5
 8010df0:	f7ef fe9c 	bl	8000b2c <__aeabi_dcmplt>
 8010df4:	b140      	cbz	r0, 8010e08 <_dtoa_r+0x168>
 8010df6:	4638      	mov	r0, r7
 8010df8:	f7ef fbbc 	bl	8000574 <__aeabi_i2d>
 8010dfc:	4622      	mov	r2, r4
 8010dfe:	462b      	mov	r3, r5
 8010e00:	f7ef fe8a 	bl	8000b18 <__aeabi_dcmpeq>
 8010e04:	b900      	cbnz	r0, 8010e08 <_dtoa_r+0x168>
 8010e06:	3f01      	subs	r7, #1
 8010e08:	2f16      	cmp	r7, #22
 8010e0a:	d852      	bhi.n	8010eb2 <_dtoa_r+0x212>
 8010e0c:	4b5d      	ldr	r3, [pc, #372]	@ (8010f84 <_dtoa_r+0x2e4>)
 8010e0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010e1a:	f7ef fe87 	bl	8000b2c <__aeabi_dcmplt>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	d049      	beq.n	8010eb6 <_dtoa_r+0x216>
 8010e22:	3f01      	subs	r7, #1
 8010e24:	2300      	movs	r3, #0
 8010e26:	9310      	str	r3, [sp, #64]	@ 0x40
 8010e28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e2a:	1b9b      	subs	r3, r3, r6
 8010e2c:	1e5a      	subs	r2, r3, #1
 8010e2e:	bf45      	ittet	mi
 8010e30:	f1c3 0301 	rsbmi	r3, r3, #1
 8010e34:	9300      	strmi	r3, [sp, #0]
 8010e36:	2300      	movpl	r3, #0
 8010e38:	2300      	movmi	r3, #0
 8010e3a:	9206      	str	r2, [sp, #24]
 8010e3c:	bf54      	ite	pl
 8010e3e:	9300      	strpl	r3, [sp, #0]
 8010e40:	9306      	strmi	r3, [sp, #24]
 8010e42:	2f00      	cmp	r7, #0
 8010e44:	db39      	blt.n	8010eba <_dtoa_r+0x21a>
 8010e46:	9b06      	ldr	r3, [sp, #24]
 8010e48:	970d      	str	r7, [sp, #52]	@ 0x34
 8010e4a:	443b      	add	r3, r7
 8010e4c:	9306      	str	r3, [sp, #24]
 8010e4e:	2300      	movs	r3, #0
 8010e50:	9308      	str	r3, [sp, #32]
 8010e52:	9b07      	ldr	r3, [sp, #28]
 8010e54:	2b09      	cmp	r3, #9
 8010e56:	d863      	bhi.n	8010f20 <_dtoa_r+0x280>
 8010e58:	2b05      	cmp	r3, #5
 8010e5a:	bfc4      	itt	gt
 8010e5c:	3b04      	subgt	r3, #4
 8010e5e:	9307      	strgt	r3, [sp, #28]
 8010e60:	9b07      	ldr	r3, [sp, #28]
 8010e62:	f1a3 0302 	sub.w	r3, r3, #2
 8010e66:	bfcc      	ite	gt
 8010e68:	2400      	movgt	r4, #0
 8010e6a:	2401      	movle	r4, #1
 8010e6c:	2b03      	cmp	r3, #3
 8010e6e:	d863      	bhi.n	8010f38 <_dtoa_r+0x298>
 8010e70:	e8df f003 	tbb	[pc, r3]
 8010e74:	2b375452 	.word	0x2b375452
 8010e78:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010e7c:	441e      	add	r6, r3
 8010e7e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010e82:	2b20      	cmp	r3, #32
 8010e84:	bfc1      	itttt	gt
 8010e86:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010e8a:	409f      	lslgt	r7, r3
 8010e8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010e90:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010e94:	bfd6      	itet	le
 8010e96:	f1c3 0320 	rsble	r3, r3, #32
 8010e9a:	ea47 0003 	orrgt.w	r0, r7, r3
 8010e9e:	fa04 f003 	lslle.w	r0, r4, r3
 8010ea2:	f7ef fb57 	bl	8000554 <__aeabi_ui2d>
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010eac:	3e01      	subs	r6, #1
 8010eae:	9212      	str	r2, [sp, #72]	@ 0x48
 8010eb0:	e776      	b.n	8010da0 <_dtoa_r+0x100>
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e7b7      	b.n	8010e26 <_dtoa_r+0x186>
 8010eb6:	9010      	str	r0, [sp, #64]	@ 0x40
 8010eb8:	e7b6      	b.n	8010e28 <_dtoa_r+0x188>
 8010eba:	9b00      	ldr	r3, [sp, #0]
 8010ebc:	1bdb      	subs	r3, r3, r7
 8010ebe:	9300      	str	r3, [sp, #0]
 8010ec0:	427b      	negs	r3, r7
 8010ec2:	9308      	str	r3, [sp, #32]
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	930d      	str	r3, [sp, #52]	@ 0x34
 8010ec8:	e7c3      	b.n	8010e52 <_dtoa_r+0x1b2>
 8010eca:	2301      	movs	r3, #1
 8010ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ece:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ed0:	eb07 0b03 	add.w	fp, r7, r3
 8010ed4:	f10b 0301 	add.w	r3, fp, #1
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	9303      	str	r3, [sp, #12]
 8010edc:	bfb8      	it	lt
 8010ede:	2301      	movlt	r3, #1
 8010ee0:	e006      	b.n	8010ef0 <_dtoa_r+0x250>
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ee6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	dd28      	ble.n	8010f3e <_dtoa_r+0x29e>
 8010eec:	469b      	mov	fp, r3
 8010eee:	9303      	str	r3, [sp, #12]
 8010ef0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	2204      	movs	r2, #4
 8010ef8:	f102 0514 	add.w	r5, r2, #20
 8010efc:	429d      	cmp	r5, r3
 8010efe:	d926      	bls.n	8010f4e <_dtoa_r+0x2ae>
 8010f00:	6041      	str	r1, [r0, #4]
 8010f02:	4648      	mov	r0, r9
 8010f04:	f000 fd9c 	bl	8011a40 <_Balloc>
 8010f08:	4682      	mov	sl, r0
 8010f0a:	2800      	cmp	r0, #0
 8010f0c:	d142      	bne.n	8010f94 <_dtoa_r+0x2f4>
 8010f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8010f88 <_dtoa_r+0x2e8>)
 8010f10:	4602      	mov	r2, r0
 8010f12:	f240 11af 	movw	r1, #431	@ 0x1af
 8010f16:	e6da      	b.n	8010cce <_dtoa_r+0x2e>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	e7e3      	b.n	8010ee4 <_dtoa_r+0x244>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	e7d5      	b.n	8010ecc <_dtoa_r+0x22c>
 8010f20:	2401      	movs	r4, #1
 8010f22:	2300      	movs	r3, #0
 8010f24:	9307      	str	r3, [sp, #28]
 8010f26:	9409      	str	r4, [sp, #36]	@ 0x24
 8010f28:	f04f 3bff 	mov.w	fp, #4294967295
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f8cd b00c 	str.w	fp, [sp, #12]
 8010f32:	2312      	movs	r3, #18
 8010f34:	920c      	str	r2, [sp, #48]	@ 0x30
 8010f36:	e7db      	b.n	8010ef0 <_dtoa_r+0x250>
 8010f38:	2301      	movs	r3, #1
 8010f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f3c:	e7f4      	b.n	8010f28 <_dtoa_r+0x288>
 8010f3e:	f04f 0b01 	mov.w	fp, #1
 8010f42:	f8cd b00c 	str.w	fp, [sp, #12]
 8010f46:	465b      	mov	r3, fp
 8010f48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010f4c:	e7d0      	b.n	8010ef0 <_dtoa_r+0x250>
 8010f4e:	3101      	adds	r1, #1
 8010f50:	0052      	lsls	r2, r2, #1
 8010f52:	e7d1      	b.n	8010ef8 <_dtoa_r+0x258>
 8010f54:	f3af 8000 	nop.w
 8010f58:	636f4361 	.word	0x636f4361
 8010f5c:	3fd287a7 	.word	0x3fd287a7
 8010f60:	8b60c8b3 	.word	0x8b60c8b3
 8010f64:	3fc68a28 	.word	0x3fc68a28
 8010f68:	509f79fb 	.word	0x509f79fb
 8010f6c:	3fd34413 	.word	0x3fd34413
 8010f70:	080130a9 	.word	0x080130a9
 8010f74:	080130c0 	.word	0x080130c0
 8010f78:	7ff00000 	.word	0x7ff00000
 8010f7c:	08013079 	.word	0x08013079
 8010f80:	3ff80000 	.word	0x3ff80000
 8010f84:	08013210 	.word	0x08013210
 8010f88:	08013118 	.word	0x08013118
 8010f8c:	080130a5 	.word	0x080130a5
 8010f90:	08013078 	.word	0x08013078
 8010f94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010f98:	6018      	str	r0, [r3, #0]
 8010f9a:	9b03      	ldr	r3, [sp, #12]
 8010f9c:	2b0e      	cmp	r3, #14
 8010f9e:	f200 80a1 	bhi.w	80110e4 <_dtoa_r+0x444>
 8010fa2:	2c00      	cmp	r4, #0
 8010fa4:	f000 809e 	beq.w	80110e4 <_dtoa_r+0x444>
 8010fa8:	2f00      	cmp	r7, #0
 8010faa:	dd33      	ble.n	8011014 <_dtoa_r+0x374>
 8010fac:	4b9c      	ldr	r3, [pc, #624]	@ (8011220 <_dtoa_r+0x580>)
 8010fae:	f007 020f 	and.w	r2, r7, #15
 8010fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fb6:	ed93 7b00 	vldr	d7, [r3]
 8010fba:	05f8      	lsls	r0, r7, #23
 8010fbc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010fc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010fc4:	d516      	bpl.n	8010ff4 <_dtoa_r+0x354>
 8010fc6:	4b97      	ldr	r3, [pc, #604]	@ (8011224 <_dtoa_r+0x584>)
 8010fc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010fd0:	f7ef fc64 	bl	800089c <__aeabi_ddiv>
 8010fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010fd8:	f004 040f 	and.w	r4, r4, #15
 8010fdc:	2603      	movs	r6, #3
 8010fde:	4d91      	ldr	r5, [pc, #580]	@ (8011224 <_dtoa_r+0x584>)
 8010fe0:	b954      	cbnz	r4, 8010ff8 <_dtoa_r+0x358>
 8010fe2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010fe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010fea:	f7ef fc57 	bl	800089c <__aeabi_ddiv>
 8010fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ff2:	e028      	b.n	8011046 <_dtoa_r+0x3a6>
 8010ff4:	2602      	movs	r6, #2
 8010ff6:	e7f2      	b.n	8010fde <_dtoa_r+0x33e>
 8010ff8:	07e1      	lsls	r1, r4, #31
 8010ffa:	d508      	bpl.n	801100e <_dtoa_r+0x36e>
 8010ffc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011000:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011004:	f7ef fb20 	bl	8000648 <__aeabi_dmul>
 8011008:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801100c:	3601      	adds	r6, #1
 801100e:	1064      	asrs	r4, r4, #1
 8011010:	3508      	adds	r5, #8
 8011012:	e7e5      	b.n	8010fe0 <_dtoa_r+0x340>
 8011014:	f000 80af 	beq.w	8011176 <_dtoa_r+0x4d6>
 8011018:	427c      	negs	r4, r7
 801101a:	4b81      	ldr	r3, [pc, #516]	@ (8011220 <_dtoa_r+0x580>)
 801101c:	4d81      	ldr	r5, [pc, #516]	@ (8011224 <_dtoa_r+0x584>)
 801101e:	f004 020f 	and.w	r2, r4, #15
 8011022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801102a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801102e:	f7ef fb0b 	bl	8000648 <__aeabi_dmul>
 8011032:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011036:	1124      	asrs	r4, r4, #4
 8011038:	2300      	movs	r3, #0
 801103a:	2602      	movs	r6, #2
 801103c:	2c00      	cmp	r4, #0
 801103e:	f040 808f 	bne.w	8011160 <_dtoa_r+0x4c0>
 8011042:	2b00      	cmp	r3, #0
 8011044:	d1d3      	bne.n	8010fee <_dtoa_r+0x34e>
 8011046:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011048:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801104c:	2b00      	cmp	r3, #0
 801104e:	f000 8094 	beq.w	801117a <_dtoa_r+0x4da>
 8011052:	4b75      	ldr	r3, [pc, #468]	@ (8011228 <_dtoa_r+0x588>)
 8011054:	2200      	movs	r2, #0
 8011056:	4620      	mov	r0, r4
 8011058:	4629      	mov	r1, r5
 801105a:	f7ef fd67 	bl	8000b2c <__aeabi_dcmplt>
 801105e:	2800      	cmp	r0, #0
 8011060:	f000 808b 	beq.w	801117a <_dtoa_r+0x4da>
 8011064:	9b03      	ldr	r3, [sp, #12]
 8011066:	2b00      	cmp	r3, #0
 8011068:	f000 8087 	beq.w	801117a <_dtoa_r+0x4da>
 801106c:	f1bb 0f00 	cmp.w	fp, #0
 8011070:	dd34      	ble.n	80110dc <_dtoa_r+0x43c>
 8011072:	4620      	mov	r0, r4
 8011074:	4b6d      	ldr	r3, [pc, #436]	@ (801122c <_dtoa_r+0x58c>)
 8011076:	2200      	movs	r2, #0
 8011078:	4629      	mov	r1, r5
 801107a:	f7ef fae5 	bl	8000648 <__aeabi_dmul>
 801107e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011082:	f107 38ff 	add.w	r8, r7, #4294967295
 8011086:	3601      	adds	r6, #1
 8011088:	465c      	mov	r4, fp
 801108a:	4630      	mov	r0, r6
 801108c:	f7ef fa72 	bl	8000574 <__aeabi_i2d>
 8011090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011094:	f7ef fad8 	bl	8000648 <__aeabi_dmul>
 8011098:	4b65      	ldr	r3, [pc, #404]	@ (8011230 <_dtoa_r+0x590>)
 801109a:	2200      	movs	r2, #0
 801109c:	f7ef f91e 	bl	80002dc <__adddf3>
 80110a0:	4605      	mov	r5, r0
 80110a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80110a6:	2c00      	cmp	r4, #0
 80110a8:	d16a      	bne.n	8011180 <_dtoa_r+0x4e0>
 80110aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110ae:	4b61      	ldr	r3, [pc, #388]	@ (8011234 <_dtoa_r+0x594>)
 80110b0:	2200      	movs	r2, #0
 80110b2:	f7ef f911 	bl	80002d8 <__aeabi_dsub>
 80110b6:	4602      	mov	r2, r0
 80110b8:	460b      	mov	r3, r1
 80110ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80110be:	462a      	mov	r2, r5
 80110c0:	4633      	mov	r3, r6
 80110c2:	f7ef fd51 	bl	8000b68 <__aeabi_dcmpgt>
 80110c6:	2800      	cmp	r0, #0
 80110c8:	f040 8298 	bne.w	80115fc <_dtoa_r+0x95c>
 80110cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110d0:	462a      	mov	r2, r5
 80110d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80110d6:	f7ef fd29 	bl	8000b2c <__aeabi_dcmplt>
 80110da:	bb38      	cbnz	r0, 801112c <_dtoa_r+0x48c>
 80110dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80110e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80110e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	f2c0 8157 	blt.w	801139a <_dtoa_r+0x6fa>
 80110ec:	2f0e      	cmp	r7, #14
 80110ee:	f300 8154 	bgt.w	801139a <_dtoa_r+0x6fa>
 80110f2:	4b4b      	ldr	r3, [pc, #300]	@ (8011220 <_dtoa_r+0x580>)
 80110f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80110f8:	ed93 7b00 	vldr	d7, [r3]
 80110fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80110fe:	2b00      	cmp	r3, #0
 8011100:	ed8d 7b00 	vstr	d7, [sp]
 8011104:	f280 80e5 	bge.w	80112d2 <_dtoa_r+0x632>
 8011108:	9b03      	ldr	r3, [sp, #12]
 801110a:	2b00      	cmp	r3, #0
 801110c:	f300 80e1 	bgt.w	80112d2 <_dtoa_r+0x632>
 8011110:	d10c      	bne.n	801112c <_dtoa_r+0x48c>
 8011112:	4b48      	ldr	r3, [pc, #288]	@ (8011234 <_dtoa_r+0x594>)
 8011114:	2200      	movs	r2, #0
 8011116:	ec51 0b17 	vmov	r0, r1, d7
 801111a:	f7ef fa95 	bl	8000648 <__aeabi_dmul>
 801111e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011122:	f7ef fd17 	bl	8000b54 <__aeabi_dcmpge>
 8011126:	2800      	cmp	r0, #0
 8011128:	f000 8266 	beq.w	80115f8 <_dtoa_r+0x958>
 801112c:	2400      	movs	r4, #0
 801112e:	4625      	mov	r5, r4
 8011130:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011132:	4656      	mov	r6, sl
 8011134:	ea6f 0803 	mvn.w	r8, r3
 8011138:	2700      	movs	r7, #0
 801113a:	4621      	mov	r1, r4
 801113c:	4648      	mov	r0, r9
 801113e:	f000 fcbf 	bl	8011ac0 <_Bfree>
 8011142:	2d00      	cmp	r5, #0
 8011144:	f000 80bd 	beq.w	80112c2 <_dtoa_r+0x622>
 8011148:	b12f      	cbz	r7, 8011156 <_dtoa_r+0x4b6>
 801114a:	42af      	cmp	r7, r5
 801114c:	d003      	beq.n	8011156 <_dtoa_r+0x4b6>
 801114e:	4639      	mov	r1, r7
 8011150:	4648      	mov	r0, r9
 8011152:	f000 fcb5 	bl	8011ac0 <_Bfree>
 8011156:	4629      	mov	r1, r5
 8011158:	4648      	mov	r0, r9
 801115a:	f000 fcb1 	bl	8011ac0 <_Bfree>
 801115e:	e0b0      	b.n	80112c2 <_dtoa_r+0x622>
 8011160:	07e2      	lsls	r2, r4, #31
 8011162:	d505      	bpl.n	8011170 <_dtoa_r+0x4d0>
 8011164:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011168:	f7ef fa6e 	bl	8000648 <__aeabi_dmul>
 801116c:	3601      	adds	r6, #1
 801116e:	2301      	movs	r3, #1
 8011170:	1064      	asrs	r4, r4, #1
 8011172:	3508      	adds	r5, #8
 8011174:	e762      	b.n	801103c <_dtoa_r+0x39c>
 8011176:	2602      	movs	r6, #2
 8011178:	e765      	b.n	8011046 <_dtoa_r+0x3a6>
 801117a:	9c03      	ldr	r4, [sp, #12]
 801117c:	46b8      	mov	r8, r7
 801117e:	e784      	b.n	801108a <_dtoa_r+0x3ea>
 8011180:	4b27      	ldr	r3, [pc, #156]	@ (8011220 <_dtoa_r+0x580>)
 8011182:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011184:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011188:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801118c:	4454      	add	r4, sl
 801118e:	2900      	cmp	r1, #0
 8011190:	d054      	beq.n	801123c <_dtoa_r+0x59c>
 8011192:	4929      	ldr	r1, [pc, #164]	@ (8011238 <_dtoa_r+0x598>)
 8011194:	2000      	movs	r0, #0
 8011196:	f7ef fb81 	bl	800089c <__aeabi_ddiv>
 801119a:	4633      	mov	r3, r6
 801119c:	462a      	mov	r2, r5
 801119e:	f7ef f89b 	bl	80002d8 <__aeabi_dsub>
 80111a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80111a6:	4656      	mov	r6, sl
 80111a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111ac:	f7ef fcfc 	bl	8000ba8 <__aeabi_d2iz>
 80111b0:	4605      	mov	r5, r0
 80111b2:	f7ef f9df 	bl	8000574 <__aeabi_i2d>
 80111b6:	4602      	mov	r2, r0
 80111b8:	460b      	mov	r3, r1
 80111ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111be:	f7ef f88b 	bl	80002d8 <__aeabi_dsub>
 80111c2:	3530      	adds	r5, #48	@ 0x30
 80111c4:	4602      	mov	r2, r0
 80111c6:	460b      	mov	r3, r1
 80111c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80111cc:	f806 5b01 	strb.w	r5, [r6], #1
 80111d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80111d4:	f7ef fcaa 	bl	8000b2c <__aeabi_dcmplt>
 80111d8:	2800      	cmp	r0, #0
 80111da:	d172      	bne.n	80112c2 <_dtoa_r+0x622>
 80111dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111e0:	4911      	ldr	r1, [pc, #68]	@ (8011228 <_dtoa_r+0x588>)
 80111e2:	2000      	movs	r0, #0
 80111e4:	f7ef f878 	bl	80002d8 <__aeabi_dsub>
 80111e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80111ec:	f7ef fc9e 	bl	8000b2c <__aeabi_dcmplt>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	f040 80b4 	bne.w	801135e <_dtoa_r+0x6be>
 80111f6:	42a6      	cmp	r6, r4
 80111f8:	f43f af70 	beq.w	80110dc <_dtoa_r+0x43c>
 80111fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011200:	4b0a      	ldr	r3, [pc, #40]	@ (801122c <_dtoa_r+0x58c>)
 8011202:	2200      	movs	r2, #0
 8011204:	f7ef fa20 	bl	8000648 <__aeabi_dmul>
 8011208:	4b08      	ldr	r3, [pc, #32]	@ (801122c <_dtoa_r+0x58c>)
 801120a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801120e:	2200      	movs	r2, #0
 8011210:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011214:	f7ef fa18 	bl	8000648 <__aeabi_dmul>
 8011218:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801121c:	e7c4      	b.n	80111a8 <_dtoa_r+0x508>
 801121e:	bf00      	nop
 8011220:	08013210 	.word	0x08013210
 8011224:	080131e8 	.word	0x080131e8
 8011228:	3ff00000 	.word	0x3ff00000
 801122c:	40240000 	.word	0x40240000
 8011230:	401c0000 	.word	0x401c0000
 8011234:	40140000 	.word	0x40140000
 8011238:	3fe00000 	.word	0x3fe00000
 801123c:	4631      	mov	r1, r6
 801123e:	4628      	mov	r0, r5
 8011240:	f7ef fa02 	bl	8000648 <__aeabi_dmul>
 8011244:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011248:	9413      	str	r4, [sp, #76]	@ 0x4c
 801124a:	4656      	mov	r6, sl
 801124c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011250:	f7ef fcaa 	bl	8000ba8 <__aeabi_d2iz>
 8011254:	4605      	mov	r5, r0
 8011256:	f7ef f98d 	bl	8000574 <__aeabi_i2d>
 801125a:	4602      	mov	r2, r0
 801125c:	460b      	mov	r3, r1
 801125e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011262:	f7ef f839 	bl	80002d8 <__aeabi_dsub>
 8011266:	3530      	adds	r5, #48	@ 0x30
 8011268:	f806 5b01 	strb.w	r5, [r6], #1
 801126c:	4602      	mov	r2, r0
 801126e:	460b      	mov	r3, r1
 8011270:	42a6      	cmp	r6, r4
 8011272:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011276:	f04f 0200 	mov.w	r2, #0
 801127a:	d124      	bne.n	80112c6 <_dtoa_r+0x626>
 801127c:	4baf      	ldr	r3, [pc, #700]	@ (801153c <_dtoa_r+0x89c>)
 801127e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011282:	f7ef f82b 	bl	80002dc <__adddf3>
 8011286:	4602      	mov	r2, r0
 8011288:	460b      	mov	r3, r1
 801128a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801128e:	f7ef fc6b 	bl	8000b68 <__aeabi_dcmpgt>
 8011292:	2800      	cmp	r0, #0
 8011294:	d163      	bne.n	801135e <_dtoa_r+0x6be>
 8011296:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801129a:	49a8      	ldr	r1, [pc, #672]	@ (801153c <_dtoa_r+0x89c>)
 801129c:	2000      	movs	r0, #0
 801129e:	f7ef f81b 	bl	80002d8 <__aeabi_dsub>
 80112a2:	4602      	mov	r2, r0
 80112a4:	460b      	mov	r3, r1
 80112a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80112aa:	f7ef fc3f 	bl	8000b2c <__aeabi_dcmplt>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	f43f af14 	beq.w	80110dc <_dtoa_r+0x43c>
 80112b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80112b6:	1e73      	subs	r3, r6, #1
 80112b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80112ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80112be:	2b30      	cmp	r3, #48	@ 0x30
 80112c0:	d0f8      	beq.n	80112b4 <_dtoa_r+0x614>
 80112c2:	4647      	mov	r7, r8
 80112c4:	e03b      	b.n	801133e <_dtoa_r+0x69e>
 80112c6:	4b9e      	ldr	r3, [pc, #632]	@ (8011540 <_dtoa_r+0x8a0>)
 80112c8:	f7ef f9be 	bl	8000648 <__aeabi_dmul>
 80112cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112d0:	e7bc      	b.n	801124c <_dtoa_r+0x5ac>
 80112d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80112d6:	4656      	mov	r6, sl
 80112d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112dc:	4620      	mov	r0, r4
 80112de:	4629      	mov	r1, r5
 80112e0:	f7ef fadc 	bl	800089c <__aeabi_ddiv>
 80112e4:	f7ef fc60 	bl	8000ba8 <__aeabi_d2iz>
 80112e8:	4680      	mov	r8, r0
 80112ea:	f7ef f943 	bl	8000574 <__aeabi_i2d>
 80112ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112f2:	f7ef f9a9 	bl	8000648 <__aeabi_dmul>
 80112f6:	4602      	mov	r2, r0
 80112f8:	460b      	mov	r3, r1
 80112fa:	4620      	mov	r0, r4
 80112fc:	4629      	mov	r1, r5
 80112fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011302:	f7ee ffe9 	bl	80002d8 <__aeabi_dsub>
 8011306:	f806 4b01 	strb.w	r4, [r6], #1
 801130a:	9d03      	ldr	r5, [sp, #12]
 801130c:	eba6 040a 	sub.w	r4, r6, sl
 8011310:	42a5      	cmp	r5, r4
 8011312:	4602      	mov	r2, r0
 8011314:	460b      	mov	r3, r1
 8011316:	d133      	bne.n	8011380 <_dtoa_r+0x6e0>
 8011318:	f7ee ffe0 	bl	80002dc <__adddf3>
 801131c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011320:	4604      	mov	r4, r0
 8011322:	460d      	mov	r5, r1
 8011324:	f7ef fc20 	bl	8000b68 <__aeabi_dcmpgt>
 8011328:	b9c0      	cbnz	r0, 801135c <_dtoa_r+0x6bc>
 801132a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801132e:	4620      	mov	r0, r4
 8011330:	4629      	mov	r1, r5
 8011332:	f7ef fbf1 	bl	8000b18 <__aeabi_dcmpeq>
 8011336:	b110      	cbz	r0, 801133e <_dtoa_r+0x69e>
 8011338:	f018 0f01 	tst.w	r8, #1
 801133c:	d10e      	bne.n	801135c <_dtoa_r+0x6bc>
 801133e:	9902      	ldr	r1, [sp, #8]
 8011340:	4648      	mov	r0, r9
 8011342:	f000 fbbd 	bl	8011ac0 <_Bfree>
 8011346:	2300      	movs	r3, #0
 8011348:	7033      	strb	r3, [r6, #0]
 801134a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801134c:	3701      	adds	r7, #1
 801134e:	601f      	str	r7, [r3, #0]
 8011350:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011352:	2b00      	cmp	r3, #0
 8011354:	f000 824b 	beq.w	80117ee <_dtoa_r+0xb4e>
 8011358:	601e      	str	r6, [r3, #0]
 801135a:	e248      	b.n	80117ee <_dtoa_r+0xb4e>
 801135c:	46b8      	mov	r8, r7
 801135e:	4633      	mov	r3, r6
 8011360:	461e      	mov	r6, r3
 8011362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011366:	2a39      	cmp	r2, #57	@ 0x39
 8011368:	d106      	bne.n	8011378 <_dtoa_r+0x6d8>
 801136a:	459a      	cmp	sl, r3
 801136c:	d1f8      	bne.n	8011360 <_dtoa_r+0x6c0>
 801136e:	2230      	movs	r2, #48	@ 0x30
 8011370:	f108 0801 	add.w	r8, r8, #1
 8011374:	f88a 2000 	strb.w	r2, [sl]
 8011378:	781a      	ldrb	r2, [r3, #0]
 801137a:	3201      	adds	r2, #1
 801137c:	701a      	strb	r2, [r3, #0]
 801137e:	e7a0      	b.n	80112c2 <_dtoa_r+0x622>
 8011380:	4b6f      	ldr	r3, [pc, #444]	@ (8011540 <_dtoa_r+0x8a0>)
 8011382:	2200      	movs	r2, #0
 8011384:	f7ef f960 	bl	8000648 <__aeabi_dmul>
 8011388:	2200      	movs	r2, #0
 801138a:	2300      	movs	r3, #0
 801138c:	4604      	mov	r4, r0
 801138e:	460d      	mov	r5, r1
 8011390:	f7ef fbc2 	bl	8000b18 <__aeabi_dcmpeq>
 8011394:	2800      	cmp	r0, #0
 8011396:	d09f      	beq.n	80112d8 <_dtoa_r+0x638>
 8011398:	e7d1      	b.n	801133e <_dtoa_r+0x69e>
 801139a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801139c:	2a00      	cmp	r2, #0
 801139e:	f000 80ea 	beq.w	8011576 <_dtoa_r+0x8d6>
 80113a2:	9a07      	ldr	r2, [sp, #28]
 80113a4:	2a01      	cmp	r2, #1
 80113a6:	f300 80cd 	bgt.w	8011544 <_dtoa_r+0x8a4>
 80113aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80113ac:	2a00      	cmp	r2, #0
 80113ae:	f000 80c1 	beq.w	8011534 <_dtoa_r+0x894>
 80113b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80113b6:	9c08      	ldr	r4, [sp, #32]
 80113b8:	9e00      	ldr	r6, [sp, #0]
 80113ba:	9a00      	ldr	r2, [sp, #0]
 80113bc:	441a      	add	r2, r3
 80113be:	9200      	str	r2, [sp, #0]
 80113c0:	9a06      	ldr	r2, [sp, #24]
 80113c2:	2101      	movs	r1, #1
 80113c4:	441a      	add	r2, r3
 80113c6:	4648      	mov	r0, r9
 80113c8:	9206      	str	r2, [sp, #24]
 80113ca:	f000 fc2d 	bl	8011c28 <__i2b>
 80113ce:	4605      	mov	r5, r0
 80113d0:	b166      	cbz	r6, 80113ec <_dtoa_r+0x74c>
 80113d2:	9b06      	ldr	r3, [sp, #24]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	dd09      	ble.n	80113ec <_dtoa_r+0x74c>
 80113d8:	42b3      	cmp	r3, r6
 80113da:	9a00      	ldr	r2, [sp, #0]
 80113dc:	bfa8      	it	ge
 80113de:	4633      	movge	r3, r6
 80113e0:	1ad2      	subs	r2, r2, r3
 80113e2:	9200      	str	r2, [sp, #0]
 80113e4:	9a06      	ldr	r2, [sp, #24]
 80113e6:	1af6      	subs	r6, r6, r3
 80113e8:	1ad3      	subs	r3, r2, r3
 80113ea:	9306      	str	r3, [sp, #24]
 80113ec:	9b08      	ldr	r3, [sp, #32]
 80113ee:	b30b      	cbz	r3, 8011434 <_dtoa_r+0x794>
 80113f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f000 80c6 	beq.w	8011584 <_dtoa_r+0x8e4>
 80113f8:	2c00      	cmp	r4, #0
 80113fa:	f000 80c0 	beq.w	801157e <_dtoa_r+0x8de>
 80113fe:	4629      	mov	r1, r5
 8011400:	4622      	mov	r2, r4
 8011402:	4648      	mov	r0, r9
 8011404:	f000 fcc8 	bl	8011d98 <__pow5mult>
 8011408:	9a02      	ldr	r2, [sp, #8]
 801140a:	4601      	mov	r1, r0
 801140c:	4605      	mov	r5, r0
 801140e:	4648      	mov	r0, r9
 8011410:	f000 fc20 	bl	8011c54 <__multiply>
 8011414:	9902      	ldr	r1, [sp, #8]
 8011416:	4680      	mov	r8, r0
 8011418:	4648      	mov	r0, r9
 801141a:	f000 fb51 	bl	8011ac0 <_Bfree>
 801141e:	9b08      	ldr	r3, [sp, #32]
 8011420:	1b1b      	subs	r3, r3, r4
 8011422:	9308      	str	r3, [sp, #32]
 8011424:	f000 80b1 	beq.w	801158a <_dtoa_r+0x8ea>
 8011428:	9a08      	ldr	r2, [sp, #32]
 801142a:	4641      	mov	r1, r8
 801142c:	4648      	mov	r0, r9
 801142e:	f000 fcb3 	bl	8011d98 <__pow5mult>
 8011432:	9002      	str	r0, [sp, #8]
 8011434:	2101      	movs	r1, #1
 8011436:	4648      	mov	r0, r9
 8011438:	f000 fbf6 	bl	8011c28 <__i2b>
 801143c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801143e:	4604      	mov	r4, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	f000 81d8 	beq.w	80117f6 <_dtoa_r+0xb56>
 8011446:	461a      	mov	r2, r3
 8011448:	4601      	mov	r1, r0
 801144a:	4648      	mov	r0, r9
 801144c:	f000 fca4 	bl	8011d98 <__pow5mult>
 8011450:	9b07      	ldr	r3, [sp, #28]
 8011452:	2b01      	cmp	r3, #1
 8011454:	4604      	mov	r4, r0
 8011456:	f300 809f 	bgt.w	8011598 <_dtoa_r+0x8f8>
 801145a:	9b04      	ldr	r3, [sp, #16]
 801145c:	2b00      	cmp	r3, #0
 801145e:	f040 8097 	bne.w	8011590 <_dtoa_r+0x8f0>
 8011462:	9b05      	ldr	r3, [sp, #20]
 8011464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011468:	2b00      	cmp	r3, #0
 801146a:	f040 8093 	bne.w	8011594 <_dtoa_r+0x8f4>
 801146e:	9b05      	ldr	r3, [sp, #20]
 8011470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011474:	0d1b      	lsrs	r3, r3, #20
 8011476:	051b      	lsls	r3, r3, #20
 8011478:	b133      	cbz	r3, 8011488 <_dtoa_r+0x7e8>
 801147a:	9b00      	ldr	r3, [sp, #0]
 801147c:	3301      	adds	r3, #1
 801147e:	9300      	str	r3, [sp, #0]
 8011480:	9b06      	ldr	r3, [sp, #24]
 8011482:	3301      	adds	r3, #1
 8011484:	9306      	str	r3, [sp, #24]
 8011486:	2301      	movs	r3, #1
 8011488:	9308      	str	r3, [sp, #32]
 801148a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801148c:	2b00      	cmp	r3, #0
 801148e:	f000 81b8 	beq.w	8011802 <_dtoa_r+0xb62>
 8011492:	6923      	ldr	r3, [r4, #16]
 8011494:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011498:	6918      	ldr	r0, [r3, #16]
 801149a:	f000 fb79 	bl	8011b90 <__hi0bits>
 801149e:	f1c0 0020 	rsb	r0, r0, #32
 80114a2:	9b06      	ldr	r3, [sp, #24]
 80114a4:	4418      	add	r0, r3
 80114a6:	f010 001f 	ands.w	r0, r0, #31
 80114aa:	f000 8082 	beq.w	80115b2 <_dtoa_r+0x912>
 80114ae:	f1c0 0320 	rsb	r3, r0, #32
 80114b2:	2b04      	cmp	r3, #4
 80114b4:	dd73      	ble.n	801159e <_dtoa_r+0x8fe>
 80114b6:	9b00      	ldr	r3, [sp, #0]
 80114b8:	f1c0 001c 	rsb	r0, r0, #28
 80114bc:	4403      	add	r3, r0
 80114be:	9300      	str	r3, [sp, #0]
 80114c0:	9b06      	ldr	r3, [sp, #24]
 80114c2:	4403      	add	r3, r0
 80114c4:	4406      	add	r6, r0
 80114c6:	9306      	str	r3, [sp, #24]
 80114c8:	9b00      	ldr	r3, [sp, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	dd05      	ble.n	80114da <_dtoa_r+0x83a>
 80114ce:	9902      	ldr	r1, [sp, #8]
 80114d0:	461a      	mov	r2, r3
 80114d2:	4648      	mov	r0, r9
 80114d4:	f000 fcba 	bl	8011e4c <__lshift>
 80114d8:	9002      	str	r0, [sp, #8]
 80114da:	9b06      	ldr	r3, [sp, #24]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	dd05      	ble.n	80114ec <_dtoa_r+0x84c>
 80114e0:	4621      	mov	r1, r4
 80114e2:	461a      	mov	r2, r3
 80114e4:	4648      	mov	r0, r9
 80114e6:	f000 fcb1 	bl	8011e4c <__lshift>
 80114ea:	4604      	mov	r4, r0
 80114ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d061      	beq.n	80115b6 <_dtoa_r+0x916>
 80114f2:	9802      	ldr	r0, [sp, #8]
 80114f4:	4621      	mov	r1, r4
 80114f6:	f000 fd15 	bl	8011f24 <__mcmp>
 80114fa:	2800      	cmp	r0, #0
 80114fc:	da5b      	bge.n	80115b6 <_dtoa_r+0x916>
 80114fe:	2300      	movs	r3, #0
 8011500:	9902      	ldr	r1, [sp, #8]
 8011502:	220a      	movs	r2, #10
 8011504:	4648      	mov	r0, r9
 8011506:	f000 fafd 	bl	8011b04 <__multadd>
 801150a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801150c:	9002      	str	r0, [sp, #8]
 801150e:	f107 38ff 	add.w	r8, r7, #4294967295
 8011512:	2b00      	cmp	r3, #0
 8011514:	f000 8177 	beq.w	8011806 <_dtoa_r+0xb66>
 8011518:	4629      	mov	r1, r5
 801151a:	2300      	movs	r3, #0
 801151c:	220a      	movs	r2, #10
 801151e:	4648      	mov	r0, r9
 8011520:	f000 faf0 	bl	8011b04 <__multadd>
 8011524:	f1bb 0f00 	cmp.w	fp, #0
 8011528:	4605      	mov	r5, r0
 801152a:	dc6f      	bgt.n	801160c <_dtoa_r+0x96c>
 801152c:	9b07      	ldr	r3, [sp, #28]
 801152e:	2b02      	cmp	r3, #2
 8011530:	dc49      	bgt.n	80115c6 <_dtoa_r+0x926>
 8011532:	e06b      	b.n	801160c <_dtoa_r+0x96c>
 8011534:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011536:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801153a:	e73c      	b.n	80113b6 <_dtoa_r+0x716>
 801153c:	3fe00000 	.word	0x3fe00000
 8011540:	40240000 	.word	0x40240000
 8011544:	9b03      	ldr	r3, [sp, #12]
 8011546:	1e5c      	subs	r4, r3, #1
 8011548:	9b08      	ldr	r3, [sp, #32]
 801154a:	42a3      	cmp	r3, r4
 801154c:	db09      	blt.n	8011562 <_dtoa_r+0x8c2>
 801154e:	1b1c      	subs	r4, r3, r4
 8011550:	9b03      	ldr	r3, [sp, #12]
 8011552:	2b00      	cmp	r3, #0
 8011554:	f6bf af30 	bge.w	80113b8 <_dtoa_r+0x718>
 8011558:	9b00      	ldr	r3, [sp, #0]
 801155a:	9a03      	ldr	r2, [sp, #12]
 801155c:	1a9e      	subs	r6, r3, r2
 801155e:	2300      	movs	r3, #0
 8011560:	e72b      	b.n	80113ba <_dtoa_r+0x71a>
 8011562:	9b08      	ldr	r3, [sp, #32]
 8011564:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011566:	9408      	str	r4, [sp, #32]
 8011568:	1ae3      	subs	r3, r4, r3
 801156a:	441a      	add	r2, r3
 801156c:	9e00      	ldr	r6, [sp, #0]
 801156e:	9b03      	ldr	r3, [sp, #12]
 8011570:	920d      	str	r2, [sp, #52]	@ 0x34
 8011572:	2400      	movs	r4, #0
 8011574:	e721      	b.n	80113ba <_dtoa_r+0x71a>
 8011576:	9c08      	ldr	r4, [sp, #32]
 8011578:	9e00      	ldr	r6, [sp, #0]
 801157a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801157c:	e728      	b.n	80113d0 <_dtoa_r+0x730>
 801157e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011582:	e751      	b.n	8011428 <_dtoa_r+0x788>
 8011584:	9a08      	ldr	r2, [sp, #32]
 8011586:	9902      	ldr	r1, [sp, #8]
 8011588:	e750      	b.n	801142c <_dtoa_r+0x78c>
 801158a:	f8cd 8008 	str.w	r8, [sp, #8]
 801158e:	e751      	b.n	8011434 <_dtoa_r+0x794>
 8011590:	2300      	movs	r3, #0
 8011592:	e779      	b.n	8011488 <_dtoa_r+0x7e8>
 8011594:	9b04      	ldr	r3, [sp, #16]
 8011596:	e777      	b.n	8011488 <_dtoa_r+0x7e8>
 8011598:	2300      	movs	r3, #0
 801159a:	9308      	str	r3, [sp, #32]
 801159c:	e779      	b.n	8011492 <_dtoa_r+0x7f2>
 801159e:	d093      	beq.n	80114c8 <_dtoa_r+0x828>
 80115a0:	9a00      	ldr	r2, [sp, #0]
 80115a2:	331c      	adds	r3, #28
 80115a4:	441a      	add	r2, r3
 80115a6:	9200      	str	r2, [sp, #0]
 80115a8:	9a06      	ldr	r2, [sp, #24]
 80115aa:	441a      	add	r2, r3
 80115ac:	441e      	add	r6, r3
 80115ae:	9206      	str	r2, [sp, #24]
 80115b0:	e78a      	b.n	80114c8 <_dtoa_r+0x828>
 80115b2:	4603      	mov	r3, r0
 80115b4:	e7f4      	b.n	80115a0 <_dtoa_r+0x900>
 80115b6:	9b03      	ldr	r3, [sp, #12]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	46b8      	mov	r8, r7
 80115bc:	dc20      	bgt.n	8011600 <_dtoa_r+0x960>
 80115be:	469b      	mov	fp, r3
 80115c0:	9b07      	ldr	r3, [sp, #28]
 80115c2:	2b02      	cmp	r3, #2
 80115c4:	dd1e      	ble.n	8011604 <_dtoa_r+0x964>
 80115c6:	f1bb 0f00 	cmp.w	fp, #0
 80115ca:	f47f adb1 	bne.w	8011130 <_dtoa_r+0x490>
 80115ce:	4621      	mov	r1, r4
 80115d0:	465b      	mov	r3, fp
 80115d2:	2205      	movs	r2, #5
 80115d4:	4648      	mov	r0, r9
 80115d6:	f000 fa95 	bl	8011b04 <__multadd>
 80115da:	4601      	mov	r1, r0
 80115dc:	4604      	mov	r4, r0
 80115de:	9802      	ldr	r0, [sp, #8]
 80115e0:	f000 fca0 	bl	8011f24 <__mcmp>
 80115e4:	2800      	cmp	r0, #0
 80115e6:	f77f ada3 	ble.w	8011130 <_dtoa_r+0x490>
 80115ea:	4656      	mov	r6, sl
 80115ec:	2331      	movs	r3, #49	@ 0x31
 80115ee:	f806 3b01 	strb.w	r3, [r6], #1
 80115f2:	f108 0801 	add.w	r8, r8, #1
 80115f6:	e59f      	b.n	8011138 <_dtoa_r+0x498>
 80115f8:	9c03      	ldr	r4, [sp, #12]
 80115fa:	46b8      	mov	r8, r7
 80115fc:	4625      	mov	r5, r4
 80115fe:	e7f4      	b.n	80115ea <_dtoa_r+0x94a>
 8011600:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011606:	2b00      	cmp	r3, #0
 8011608:	f000 8101 	beq.w	801180e <_dtoa_r+0xb6e>
 801160c:	2e00      	cmp	r6, #0
 801160e:	dd05      	ble.n	801161c <_dtoa_r+0x97c>
 8011610:	4629      	mov	r1, r5
 8011612:	4632      	mov	r2, r6
 8011614:	4648      	mov	r0, r9
 8011616:	f000 fc19 	bl	8011e4c <__lshift>
 801161a:	4605      	mov	r5, r0
 801161c:	9b08      	ldr	r3, [sp, #32]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d05c      	beq.n	80116dc <_dtoa_r+0xa3c>
 8011622:	6869      	ldr	r1, [r5, #4]
 8011624:	4648      	mov	r0, r9
 8011626:	f000 fa0b 	bl	8011a40 <_Balloc>
 801162a:	4606      	mov	r6, r0
 801162c:	b928      	cbnz	r0, 801163a <_dtoa_r+0x99a>
 801162e:	4b82      	ldr	r3, [pc, #520]	@ (8011838 <_dtoa_r+0xb98>)
 8011630:	4602      	mov	r2, r0
 8011632:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011636:	f7ff bb4a 	b.w	8010cce <_dtoa_r+0x2e>
 801163a:	692a      	ldr	r2, [r5, #16]
 801163c:	3202      	adds	r2, #2
 801163e:	0092      	lsls	r2, r2, #2
 8011640:	f105 010c 	add.w	r1, r5, #12
 8011644:	300c      	adds	r0, #12
 8011646:	f7ff fa92 	bl	8010b6e <memcpy>
 801164a:	2201      	movs	r2, #1
 801164c:	4631      	mov	r1, r6
 801164e:	4648      	mov	r0, r9
 8011650:	f000 fbfc 	bl	8011e4c <__lshift>
 8011654:	f10a 0301 	add.w	r3, sl, #1
 8011658:	9300      	str	r3, [sp, #0]
 801165a:	eb0a 030b 	add.w	r3, sl, fp
 801165e:	9308      	str	r3, [sp, #32]
 8011660:	9b04      	ldr	r3, [sp, #16]
 8011662:	f003 0301 	and.w	r3, r3, #1
 8011666:	462f      	mov	r7, r5
 8011668:	9306      	str	r3, [sp, #24]
 801166a:	4605      	mov	r5, r0
 801166c:	9b00      	ldr	r3, [sp, #0]
 801166e:	9802      	ldr	r0, [sp, #8]
 8011670:	4621      	mov	r1, r4
 8011672:	f103 3bff 	add.w	fp, r3, #4294967295
 8011676:	f7ff fa88 	bl	8010b8a <quorem>
 801167a:	4603      	mov	r3, r0
 801167c:	3330      	adds	r3, #48	@ 0x30
 801167e:	9003      	str	r0, [sp, #12]
 8011680:	4639      	mov	r1, r7
 8011682:	9802      	ldr	r0, [sp, #8]
 8011684:	9309      	str	r3, [sp, #36]	@ 0x24
 8011686:	f000 fc4d 	bl	8011f24 <__mcmp>
 801168a:	462a      	mov	r2, r5
 801168c:	9004      	str	r0, [sp, #16]
 801168e:	4621      	mov	r1, r4
 8011690:	4648      	mov	r0, r9
 8011692:	f000 fc63 	bl	8011f5c <__mdiff>
 8011696:	68c2      	ldr	r2, [r0, #12]
 8011698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801169a:	4606      	mov	r6, r0
 801169c:	bb02      	cbnz	r2, 80116e0 <_dtoa_r+0xa40>
 801169e:	4601      	mov	r1, r0
 80116a0:	9802      	ldr	r0, [sp, #8]
 80116a2:	f000 fc3f 	bl	8011f24 <__mcmp>
 80116a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116a8:	4602      	mov	r2, r0
 80116aa:	4631      	mov	r1, r6
 80116ac:	4648      	mov	r0, r9
 80116ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80116b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80116b2:	f000 fa05 	bl	8011ac0 <_Bfree>
 80116b6:	9b07      	ldr	r3, [sp, #28]
 80116b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80116ba:	9e00      	ldr	r6, [sp, #0]
 80116bc:	ea42 0103 	orr.w	r1, r2, r3
 80116c0:	9b06      	ldr	r3, [sp, #24]
 80116c2:	4319      	orrs	r1, r3
 80116c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116c6:	d10d      	bne.n	80116e4 <_dtoa_r+0xa44>
 80116c8:	2b39      	cmp	r3, #57	@ 0x39
 80116ca:	d027      	beq.n	801171c <_dtoa_r+0xa7c>
 80116cc:	9a04      	ldr	r2, [sp, #16]
 80116ce:	2a00      	cmp	r2, #0
 80116d0:	dd01      	ble.n	80116d6 <_dtoa_r+0xa36>
 80116d2:	9b03      	ldr	r3, [sp, #12]
 80116d4:	3331      	adds	r3, #49	@ 0x31
 80116d6:	f88b 3000 	strb.w	r3, [fp]
 80116da:	e52e      	b.n	801113a <_dtoa_r+0x49a>
 80116dc:	4628      	mov	r0, r5
 80116de:	e7b9      	b.n	8011654 <_dtoa_r+0x9b4>
 80116e0:	2201      	movs	r2, #1
 80116e2:	e7e2      	b.n	80116aa <_dtoa_r+0xa0a>
 80116e4:	9904      	ldr	r1, [sp, #16]
 80116e6:	2900      	cmp	r1, #0
 80116e8:	db04      	blt.n	80116f4 <_dtoa_r+0xa54>
 80116ea:	9807      	ldr	r0, [sp, #28]
 80116ec:	4301      	orrs	r1, r0
 80116ee:	9806      	ldr	r0, [sp, #24]
 80116f0:	4301      	orrs	r1, r0
 80116f2:	d120      	bne.n	8011736 <_dtoa_r+0xa96>
 80116f4:	2a00      	cmp	r2, #0
 80116f6:	ddee      	ble.n	80116d6 <_dtoa_r+0xa36>
 80116f8:	9902      	ldr	r1, [sp, #8]
 80116fa:	9300      	str	r3, [sp, #0]
 80116fc:	2201      	movs	r2, #1
 80116fe:	4648      	mov	r0, r9
 8011700:	f000 fba4 	bl	8011e4c <__lshift>
 8011704:	4621      	mov	r1, r4
 8011706:	9002      	str	r0, [sp, #8]
 8011708:	f000 fc0c 	bl	8011f24 <__mcmp>
 801170c:	2800      	cmp	r0, #0
 801170e:	9b00      	ldr	r3, [sp, #0]
 8011710:	dc02      	bgt.n	8011718 <_dtoa_r+0xa78>
 8011712:	d1e0      	bne.n	80116d6 <_dtoa_r+0xa36>
 8011714:	07da      	lsls	r2, r3, #31
 8011716:	d5de      	bpl.n	80116d6 <_dtoa_r+0xa36>
 8011718:	2b39      	cmp	r3, #57	@ 0x39
 801171a:	d1da      	bne.n	80116d2 <_dtoa_r+0xa32>
 801171c:	2339      	movs	r3, #57	@ 0x39
 801171e:	f88b 3000 	strb.w	r3, [fp]
 8011722:	4633      	mov	r3, r6
 8011724:	461e      	mov	r6, r3
 8011726:	3b01      	subs	r3, #1
 8011728:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801172c:	2a39      	cmp	r2, #57	@ 0x39
 801172e:	d04e      	beq.n	80117ce <_dtoa_r+0xb2e>
 8011730:	3201      	adds	r2, #1
 8011732:	701a      	strb	r2, [r3, #0]
 8011734:	e501      	b.n	801113a <_dtoa_r+0x49a>
 8011736:	2a00      	cmp	r2, #0
 8011738:	dd03      	ble.n	8011742 <_dtoa_r+0xaa2>
 801173a:	2b39      	cmp	r3, #57	@ 0x39
 801173c:	d0ee      	beq.n	801171c <_dtoa_r+0xa7c>
 801173e:	3301      	adds	r3, #1
 8011740:	e7c9      	b.n	80116d6 <_dtoa_r+0xa36>
 8011742:	9a00      	ldr	r2, [sp, #0]
 8011744:	9908      	ldr	r1, [sp, #32]
 8011746:	f802 3c01 	strb.w	r3, [r2, #-1]
 801174a:	428a      	cmp	r2, r1
 801174c:	d028      	beq.n	80117a0 <_dtoa_r+0xb00>
 801174e:	9902      	ldr	r1, [sp, #8]
 8011750:	2300      	movs	r3, #0
 8011752:	220a      	movs	r2, #10
 8011754:	4648      	mov	r0, r9
 8011756:	f000 f9d5 	bl	8011b04 <__multadd>
 801175a:	42af      	cmp	r7, r5
 801175c:	9002      	str	r0, [sp, #8]
 801175e:	f04f 0300 	mov.w	r3, #0
 8011762:	f04f 020a 	mov.w	r2, #10
 8011766:	4639      	mov	r1, r7
 8011768:	4648      	mov	r0, r9
 801176a:	d107      	bne.n	801177c <_dtoa_r+0xadc>
 801176c:	f000 f9ca 	bl	8011b04 <__multadd>
 8011770:	4607      	mov	r7, r0
 8011772:	4605      	mov	r5, r0
 8011774:	9b00      	ldr	r3, [sp, #0]
 8011776:	3301      	adds	r3, #1
 8011778:	9300      	str	r3, [sp, #0]
 801177a:	e777      	b.n	801166c <_dtoa_r+0x9cc>
 801177c:	f000 f9c2 	bl	8011b04 <__multadd>
 8011780:	4629      	mov	r1, r5
 8011782:	4607      	mov	r7, r0
 8011784:	2300      	movs	r3, #0
 8011786:	220a      	movs	r2, #10
 8011788:	4648      	mov	r0, r9
 801178a:	f000 f9bb 	bl	8011b04 <__multadd>
 801178e:	4605      	mov	r5, r0
 8011790:	e7f0      	b.n	8011774 <_dtoa_r+0xad4>
 8011792:	f1bb 0f00 	cmp.w	fp, #0
 8011796:	bfcc      	ite	gt
 8011798:	465e      	movgt	r6, fp
 801179a:	2601      	movle	r6, #1
 801179c:	4456      	add	r6, sl
 801179e:	2700      	movs	r7, #0
 80117a0:	9902      	ldr	r1, [sp, #8]
 80117a2:	9300      	str	r3, [sp, #0]
 80117a4:	2201      	movs	r2, #1
 80117a6:	4648      	mov	r0, r9
 80117a8:	f000 fb50 	bl	8011e4c <__lshift>
 80117ac:	4621      	mov	r1, r4
 80117ae:	9002      	str	r0, [sp, #8]
 80117b0:	f000 fbb8 	bl	8011f24 <__mcmp>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	dcb4      	bgt.n	8011722 <_dtoa_r+0xa82>
 80117b8:	d102      	bne.n	80117c0 <_dtoa_r+0xb20>
 80117ba:	9b00      	ldr	r3, [sp, #0]
 80117bc:	07db      	lsls	r3, r3, #31
 80117be:	d4b0      	bmi.n	8011722 <_dtoa_r+0xa82>
 80117c0:	4633      	mov	r3, r6
 80117c2:	461e      	mov	r6, r3
 80117c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117c8:	2a30      	cmp	r2, #48	@ 0x30
 80117ca:	d0fa      	beq.n	80117c2 <_dtoa_r+0xb22>
 80117cc:	e4b5      	b.n	801113a <_dtoa_r+0x49a>
 80117ce:	459a      	cmp	sl, r3
 80117d0:	d1a8      	bne.n	8011724 <_dtoa_r+0xa84>
 80117d2:	2331      	movs	r3, #49	@ 0x31
 80117d4:	f108 0801 	add.w	r8, r8, #1
 80117d8:	f88a 3000 	strb.w	r3, [sl]
 80117dc:	e4ad      	b.n	801113a <_dtoa_r+0x49a>
 80117de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80117e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801183c <_dtoa_r+0xb9c>
 80117e4:	b11b      	cbz	r3, 80117ee <_dtoa_r+0xb4e>
 80117e6:	f10a 0308 	add.w	r3, sl, #8
 80117ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80117ec:	6013      	str	r3, [r2, #0]
 80117ee:	4650      	mov	r0, sl
 80117f0:	b017      	add	sp, #92	@ 0x5c
 80117f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f6:	9b07      	ldr	r3, [sp, #28]
 80117f8:	2b01      	cmp	r3, #1
 80117fa:	f77f ae2e 	ble.w	801145a <_dtoa_r+0x7ba>
 80117fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011800:	9308      	str	r3, [sp, #32]
 8011802:	2001      	movs	r0, #1
 8011804:	e64d      	b.n	80114a2 <_dtoa_r+0x802>
 8011806:	f1bb 0f00 	cmp.w	fp, #0
 801180a:	f77f aed9 	ble.w	80115c0 <_dtoa_r+0x920>
 801180e:	4656      	mov	r6, sl
 8011810:	9802      	ldr	r0, [sp, #8]
 8011812:	4621      	mov	r1, r4
 8011814:	f7ff f9b9 	bl	8010b8a <quorem>
 8011818:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801181c:	f806 3b01 	strb.w	r3, [r6], #1
 8011820:	eba6 020a 	sub.w	r2, r6, sl
 8011824:	4593      	cmp	fp, r2
 8011826:	ddb4      	ble.n	8011792 <_dtoa_r+0xaf2>
 8011828:	9902      	ldr	r1, [sp, #8]
 801182a:	2300      	movs	r3, #0
 801182c:	220a      	movs	r2, #10
 801182e:	4648      	mov	r0, r9
 8011830:	f000 f968 	bl	8011b04 <__multadd>
 8011834:	9002      	str	r0, [sp, #8]
 8011836:	e7eb      	b.n	8011810 <_dtoa_r+0xb70>
 8011838:	08013118 	.word	0x08013118
 801183c:	0801309c 	.word	0x0801309c

08011840 <_free_r>:
 8011840:	b538      	push	{r3, r4, r5, lr}
 8011842:	4605      	mov	r5, r0
 8011844:	2900      	cmp	r1, #0
 8011846:	d041      	beq.n	80118cc <_free_r+0x8c>
 8011848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801184c:	1f0c      	subs	r4, r1, #4
 801184e:	2b00      	cmp	r3, #0
 8011850:	bfb8      	it	lt
 8011852:	18e4      	addlt	r4, r4, r3
 8011854:	f000 f8e8 	bl	8011a28 <__malloc_lock>
 8011858:	4a1d      	ldr	r2, [pc, #116]	@ (80118d0 <_free_r+0x90>)
 801185a:	6813      	ldr	r3, [r2, #0]
 801185c:	b933      	cbnz	r3, 801186c <_free_r+0x2c>
 801185e:	6063      	str	r3, [r4, #4]
 8011860:	6014      	str	r4, [r2, #0]
 8011862:	4628      	mov	r0, r5
 8011864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011868:	f000 b8e4 	b.w	8011a34 <__malloc_unlock>
 801186c:	42a3      	cmp	r3, r4
 801186e:	d908      	bls.n	8011882 <_free_r+0x42>
 8011870:	6820      	ldr	r0, [r4, #0]
 8011872:	1821      	adds	r1, r4, r0
 8011874:	428b      	cmp	r3, r1
 8011876:	bf01      	itttt	eq
 8011878:	6819      	ldreq	r1, [r3, #0]
 801187a:	685b      	ldreq	r3, [r3, #4]
 801187c:	1809      	addeq	r1, r1, r0
 801187e:	6021      	streq	r1, [r4, #0]
 8011880:	e7ed      	b.n	801185e <_free_r+0x1e>
 8011882:	461a      	mov	r2, r3
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	b10b      	cbz	r3, 801188c <_free_r+0x4c>
 8011888:	42a3      	cmp	r3, r4
 801188a:	d9fa      	bls.n	8011882 <_free_r+0x42>
 801188c:	6811      	ldr	r1, [r2, #0]
 801188e:	1850      	adds	r0, r2, r1
 8011890:	42a0      	cmp	r0, r4
 8011892:	d10b      	bne.n	80118ac <_free_r+0x6c>
 8011894:	6820      	ldr	r0, [r4, #0]
 8011896:	4401      	add	r1, r0
 8011898:	1850      	adds	r0, r2, r1
 801189a:	4283      	cmp	r3, r0
 801189c:	6011      	str	r1, [r2, #0]
 801189e:	d1e0      	bne.n	8011862 <_free_r+0x22>
 80118a0:	6818      	ldr	r0, [r3, #0]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	6053      	str	r3, [r2, #4]
 80118a6:	4408      	add	r0, r1
 80118a8:	6010      	str	r0, [r2, #0]
 80118aa:	e7da      	b.n	8011862 <_free_r+0x22>
 80118ac:	d902      	bls.n	80118b4 <_free_r+0x74>
 80118ae:	230c      	movs	r3, #12
 80118b0:	602b      	str	r3, [r5, #0]
 80118b2:	e7d6      	b.n	8011862 <_free_r+0x22>
 80118b4:	6820      	ldr	r0, [r4, #0]
 80118b6:	1821      	adds	r1, r4, r0
 80118b8:	428b      	cmp	r3, r1
 80118ba:	bf04      	itt	eq
 80118bc:	6819      	ldreq	r1, [r3, #0]
 80118be:	685b      	ldreq	r3, [r3, #4]
 80118c0:	6063      	str	r3, [r4, #4]
 80118c2:	bf04      	itt	eq
 80118c4:	1809      	addeq	r1, r1, r0
 80118c6:	6021      	streq	r1, [r4, #0]
 80118c8:	6054      	str	r4, [r2, #4]
 80118ca:	e7ca      	b.n	8011862 <_free_r+0x22>
 80118cc:	bd38      	pop	{r3, r4, r5, pc}
 80118ce:	bf00      	nop
 80118d0:	20010428 	.word	0x20010428

080118d4 <malloc>:
 80118d4:	4b02      	ldr	r3, [pc, #8]	@ (80118e0 <malloc+0xc>)
 80118d6:	4601      	mov	r1, r0
 80118d8:	6818      	ldr	r0, [r3, #0]
 80118da:	f000 b825 	b.w	8011928 <_malloc_r>
 80118de:	bf00      	nop
 80118e0:	20000194 	.word	0x20000194

080118e4 <sbrk_aligned>:
 80118e4:	b570      	push	{r4, r5, r6, lr}
 80118e6:	4e0f      	ldr	r6, [pc, #60]	@ (8011924 <sbrk_aligned+0x40>)
 80118e8:	460c      	mov	r4, r1
 80118ea:	6831      	ldr	r1, [r6, #0]
 80118ec:	4605      	mov	r5, r0
 80118ee:	b911      	cbnz	r1, 80118f6 <sbrk_aligned+0x12>
 80118f0:	f000 fe3e 	bl	8012570 <_sbrk_r>
 80118f4:	6030      	str	r0, [r6, #0]
 80118f6:	4621      	mov	r1, r4
 80118f8:	4628      	mov	r0, r5
 80118fa:	f000 fe39 	bl	8012570 <_sbrk_r>
 80118fe:	1c43      	adds	r3, r0, #1
 8011900:	d103      	bne.n	801190a <sbrk_aligned+0x26>
 8011902:	f04f 34ff 	mov.w	r4, #4294967295
 8011906:	4620      	mov	r0, r4
 8011908:	bd70      	pop	{r4, r5, r6, pc}
 801190a:	1cc4      	adds	r4, r0, #3
 801190c:	f024 0403 	bic.w	r4, r4, #3
 8011910:	42a0      	cmp	r0, r4
 8011912:	d0f8      	beq.n	8011906 <sbrk_aligned+0x22>
 8011914:	1a21      	subs	r1, r4, r0
 8011916:	4628      	mov	r0, r5
 8011918:	f000 fe2a 	bl	8012570 <_sbrk_r>
 801191c:	3001      	adds	r0, #1
 801191e:	d1f2      	bne.n	8011906 <sbrk_aligned+0x22>
 8011920:	e7ef      	b.n	8011902 <sbrk_aligned+0x1e>
 8011922:	bf00      	nop
 8011924:	20010424 	.word	0x20010424

08011928 <_malloc_r>:
 8011928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801192c:	1ccd      	adds	r5, r1, #3
 801192e:	f025 0503 	bic.w	r5, r5, #3
 8011932:	3508      	adds	r5, #8
 8011934:	2d0c      	cmp	r5, #12
 8011936:	bf38      	it	cc
 8011938:	250c      	movcc	r5, #12
 801193a:	2d00      	cmp	r5, #0
 801193c:	4606      	mov	r6, r0
 801193e:	db01      	blt.n	8011944 <_malloc_r+0x1c>
 8011940:	42a9      	cmp	r1, r5
 8011942:	d904      	bls.n	801194e <_malloc_r+0x26>
 8011944:	230c      	movs	r3, #12
 8011946:	6033      	str	r3, [r6, #0]
 8011948:	2000      	movs	r0, #0
 801194a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801194e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a24 <_malloc_r+0xfc>
 8011952:	f000 f869 	bl	8011a28 <__malloc_lock>
 8011956:	f8d8 3000 	ldr.w	r3, [r8]
 801195a:	461c      	mov	r4, r3
 801195c:	bb44      	cbnz	r4, 80119b0 <_malloc_r+0x88>
 801195e:	4629      	mov	r1, r5
 8011960:	4630      	mov	r0, r6
 8011962:	f7ff ffbf 	bl	80118e4 <sbrk_aligned>
 8011966:	1c43      	adds	r3, r0, #1
 8011968:	4604      	mov	r4, r0
 801196a:	d158      	bne.n	8011a1e <_malloc_r+0xf6>
 801196c:	f8d8 4000 	ldr.w	r4, [r8]
 8011970:	4627      	mov	r7, r4
 8011972:	2f00      	cmp	r7, #0
 8011974:	d143      	bne.n	80119fe <_malloc_r+0xd6>
 8011976:	2c00      	cmp	r4, #0
 8011978:	d04b      	beq.n	8011a12 <_malloc_r+0xea>
 801197a:	6823      	ldr	r3, [r4, #0]
 801197c:	4639      	mov	r1, r7
 801197e:	4630      	mov	r0, r6
 8011980:	eb04 0903 	add.w	r9, r4, r3
 8011984:	f000 fdf4 	bl	8012570 <_sbrk_r>
 8011988:	4581      	cmp	r9, r0
 801198a:	d142      	bne.n	8011a12 <_malloc_r+0xea>
 801198c:	6821      	ldr	r1, [r4, #0]
 801198e:	1a6d      	subs	r5, r5, r1
 8011990:	4629      	mov	r1, r5
 8011992:	4630      	mov	r0, r6
 8011994:	f7ff ffa6 	bl	80118e4 <sbrk_aligned>
 8011998:	3001      	adds	r0, #1
 801199a:	d03a      	beq.n	8011a12 <_malloc_r+0xea>
 801199c:	6823      	ldr	r3, [r4, #0]
 801199e:	442b      	add	r3, r5
 80119a0:	6023      	str	r3, [r4, #0]
 80119a2:	f8d8 3000 	ldr.w	r3, [r8]
 80119a6:	685a      	ldr	r2, [r3, #4]
 80119a8:	bb62      	cbnz	r2, 8011a04 <_malloc_r+0xdc>
 80119aa:	f8c8 7000 	str.w	r7, [r8]
 80119ae:	e00f      	b.n	80119d0 <_malloc_r+0xa8>
 80119b0:	6822      	ldr	r2, [r4, #0]
 80119b2:	1b52      	subs	r2, r2, r5
 80119b4:	d420      	bmi.n	80119f8 <_malloc_r+0xd0>
 80119b6:	2a0b      	cmp	r2, #11
 80119b8:	d917      	bls.n	80119ea <_malloc_r+0xc2>
 80119ba:	1961      	adds	r1, r4, r5
 80119bc:	42a3      	cmp	r3, r4
 80119be:	6025      	str	r5, [r4, #0]
 80119c0:	bf18      	it	ne
 80119c2:	6059      	strne	r1, [r3, #4]
 80119c4:	6863      	ldr	r3, [r4, #4]
 80119c6:	bf08      	it	eq
 80119c8:	f8c8 1000 	streq.w	r1, [r8]
 80119cc:	5162      	str	r2, [r4, r5]
 80119ce:	604b      	str	r3, [r1, #4]
 80119d0:	4630      	mov	r0, r6
 80119d2:	f000 f82f 	bl	8011a34 <__malloc_unlock>
 80119d6:	f104 000b 	add.w	r0, r4, #11
 80119da:	1d23      	adds	r3, r4, #4
 80119dc:	f020 0007 	bic.w	r0, r0, #7
 80119e0:	1ac2      	subs	r2, r0, r3
 80119e2:	bf1c      	itt	ne
 80119e4:	1a1b      	subne	r3, r3, r0
 80119e6:	50a3      	strne	r3, [r4, r2]
 80119e8:	e7af      	b.n	801194a <_malloc_r+0x22>
 80119ea:	6862      	ldr	r2, [r4, #4]
 80119ec:	42a3      	cmp	r3, r4
 80119ee:	bf0c      	ite	eq
 80119f0:	f8c8 2000 	streq.w	r2, [r8]
 80119f4:	605a      	strne	r2, [r3, #4]
 80119f6:	e7eb      	b.n	80119d0 <_malloc_r+0xa8>
 80119f8:	4623      	mov	r3, r4
 80119fa:	6864      	ldr	r4, [r4, #4]
 80119fc:	e7ae      	b.n	801195c <_malloc_r+0x34>
 80119fe:	463c      	mov	r4, r7
 8011a00:	687f      	ldr	r7, [r7, #4]
 8011a02:	e7b6      	b.n	8011972 <_malloc_r+0x4a>
 8011a04:	461a      	mov	r2, r3
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	42a3      	cmp	r3, r4
 8011a0a:	d1fb      	bne.n	8011a04 <_malloc_r+0xdc>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	6053      	str	r3, [r2, #4]
 8011a10:	e7de      	b.n	80119d0 <_malloc_r+0xa8>
 8011a12:	230c      	movs	r3, #12
 8011a14:	6033      	str	r3, [r6, #0]
 8011a16:	4630      	mov	r0, r6
 8011a18:	f000 f80c 	bl	8011a34 <__malloc_unlock>
 8011a1c:	e794      	b.n	8011948 <_malloc_r+0x20>
 8011a1e:	6005      	str	r5, [r0, #0]
 8011a20:	e7d6      	b.n	80119d0 <_malloc_r+0xa8>
 8011a22:	bf00      	nop
 8011a24:	20010428 	.word	0x20010428

08011a28 <__malloc_lock>:
 8011a28:	4801      	ldr	r0, [pc, #4]	@ (8011a30 <__malloc_lock+0x8>)
 8011a2a:	f7ff b89e 	b.w	8010b6a <__retarget_lock_acquire_recursive>
 8011a2e:	bf00      	nop
 8011a30:	20010420 	.word	0x20010420

08011a34 <__malloc_unlock>:
 8011a34:	4801      	ldr	r0, [pc, #4]	@ (8011a3c <__malloc_unlock+0x8>)
 8011a36:	f7ff b899 	b.w	8010b6c <__retarget_lock_release_recursive>
 8011a3a:	bf00      	nop
 8011a3c:	20010420 	.word	0x20010420

08011a40 <_Balloc>:
 8011a40:	b570      	push	{r4, r5, r6, lr}
 8011a42:	69c6      	ldr	r6, [r0, #28]
 8011a44:	4604      	mov	r4, r0
 8011a46:	460d      	mov	r5, r1
 8011a48:	b976      	cbnz	r6, 8011a68 <_Balloc+0x28>
 8011a4a:	2010      	movs	r0, #16
 8011a4c:	f7ff ff42 	bl	80118d4 <malloc>
 8011a50:	4602      	mov	r2, r0
 8011a52:	61e0      	str	r0, [r4, #28]
 8011a54:	b920      	cbnz	r0, 8011a60 <_Balloc+0x20>
 8011a56:	4b18      	ldr	r3, [pc, #96]	@ (8011ab8 <_Balloc+0x78>)
 8011a58:	4818      	ldr	r0, [pc, #96]	@ (8011abc <_Balloc+0x7c>)
 8011a5a:	216b      	movs	r1, #107	@ 0x6b
 8011a5c:	f000 fd98 	bl	8012590 <__assert_func>
 8011a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a64:	6006      	str	r6, [r0, #0]
 8011a66:	60c6      	str	r6, [r0, #12]
 8011a68:	69e6      	ldr	r6, [r4, #28]
 8011a6a:	68f3      	ldr	r3, [r6, #12]
 8011a6c:	b183      	cbz	r3, 8011a90 <_Balloc+0x50>
 8011a6e:	69e3      	ldr	r3, [r4, #28]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a76:	b9b8      	cbnz	r0, 8011aa8 <_Balloc+0x68>
 8011a78:	2101      	movs	r1, #1
 8011a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8011a7e:	1d72      	adds	r2, r6, #5
 8011a80:	0092      	lsls	r2, r2, #2
 8011a82:	4620      	mov	r0, r4
 8011a84:	f000 fda2 	bl	80125cc <_calloc_r>
 8011a88:	b160      	cbz	r0, 8011aa4 <_Balloc+0x64>
 8011a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a8e:	e00e      	b.n	8011aae <_Balloc+0x6e>
 8011a90:	2221      	movs	r2, #33	@ 0x21
 8011a92:	2104      	movs	r1, #4
 8011a94:	4620      	mov	r0, r4
 8011a96:	f000 fd99 	bl	80125cc <_calloc_r>
 8011a9a:	69e3      	ldr	r3, [r4, #28]
 8011a9c:	60f0      	str	r0, [r6, #12]
 8011a9e:	68db      	ldr	r3, [r3, #12]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d1e4      	bne.n	8011a6e <_Balloc+0x2e>
 8011aa4:	2000      	movs	r0, #0
 8011aa6:	bd70      	pop	{r4, r5, r6, pc}
 8011aa8:	6802      	ldr	r2, [r0, #0]
 8011aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011aae:	2300      	movs	r3, #0
 8011ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ab4:	e7f7      	b.n	8011aa6 <_Balloc+0x66>
 8011ab6:	bf00      	nop
 8011ab8:	080130a9 	.word	0x080130a9
 8011abc:	08013129 	.word	0x08013129

08011ac0 <_Bfree>:
 8011ac0:	b570      	push	{r4, r5, r6, lr}
 8011ac2:	69c6      	ldr	r6, [r0, #28]
 8011ac4:	4605      	mov	r5, r0
 8011ac6:	460c      	mov	r4, r1
 8011ac8:	b976      	cbnz	r6, 8011ae8 <_Bfree+0x28>
 8011aca:	2010      	movs	r0, #16
 8011acc:	f7ff ff02 	bl	80118d4 <malloc>
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	61e8      	str	r0, [r5, #28]
 8011ad4:	b920      	cbnz	r0, 8011ae0 <_Bfree+0x20>
 8011ad6:	4b09      	ldr	r3, [pc, #36]	@ (8011afc <_Bfree+0x3c>)
 8011ad8:	4809      	ldr	r0, [pc, #36]	@ (8011b00 <_Bfree+0x40>)
 8011ada:	218f      	movs	r1, #143	@ 0x8f
 8011adc:	f000 fd58 	bl	8012590 <__assert_func>
 8011ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ae4:	6006      	str	r6, [r0, #0]
 8011ae6:	60c6      	str	r6, [r0, #12]
 8011ae8:	b13c      	cbz	r4, 8011afa <_Bfree+0x3a>
 8011aea:	69eb      	ldr	r3, [r5, #28]
 8011aec:	6862      	ldr	r2, [r4, #4]
 8011aee:	68db      	ldr	r3, [r3, #12]
 8011af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011af4:	6021      	str	r1, [r4, #0]
 8011af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011afa:	bd70      	pop	{r4, r5, r6, pc}
 8011afc:	080130a9 	.word	0x080130a9
 8011b00:	08013129 	.word	0x08013129

08011b04 <__multadd>:
 8011b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b08:	690d      	ldr	r5, [r1, #16]
 8011b0a:	4607      	mov	r7, r0
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	461e      	mov	r6, r3
 8011b10:	f101 0c14 	add.w	ip, r1, #20
 8011b14:	2000      	movs	r0, #0
 8011b16:	f8dc 3000 	ldr.w	r3, [ip]
 8011b1a:	b299      	uxth	r1, r3
 8011b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8011b20:	0c1e      	lsrs	r6, r3, #16
 8011b22:	0c0b      	lsrs	r3, r1, #16
 8011b24:	fb02 3306 	mla	r3, r2, r6, r3
 8011b28:	b289      	uxth	r1, r1
 8011b2a:	3001      	adds	r0, #1
 8011b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b30:	4285      	cmp	r5, r0
 8011b32:	f84c 1b04 	str.w	r1, [ip], #4
 8011b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b3a:	dcec      	bgt.n	8011b16 <__multadd+0x12>
 8011b3c:	b30e      	cbz	r6, 8011b82 <__multadd+0x7e>
 8011b3e:	68a3      	ldr	r3, [r4, #8]
 8011b40:	42ab      	cmp	r3, r5
 8011b42:	dc19      	bgt.n	8011b78 <__multadd+0x74>
 8011b44:	6861      	ldr	r1, [r4, #4]
 8011b46:	4638      	mov	r0, r7
 8011b48:	3101      	adds	r1, #1
 8011b4a:	f7ff ff79 	bl	8011a40 <_Balloc>
 8011b4e:	4680      	mov	r8, r0
 8011b50:	b928      	cbnz	r0, 8011b5e <__multadd+0x5a>
 8011b52:	4602      	mov	r2, r0
 8011b54:	4b0c      	ldr	r3, [pc, #48]	@ (8011b88 <__multadd+0x84>)
 8011b56:	480d      	ldr	r0, [pc, #52]	@ (8011b8c <__multadd+0x88>)
 8011b58:	21ba      	movs	r1, #186	@ 0xba
 8011b5a:	f000 fd19 	bl	8012590 <__assert_func>
 8011b5e:	6922      	ldr	r2, [r4, #16]
 8011b60:	3202      	adds	r2, #2
 8011b62:	f104 010c 	add.w	r1, r4, #12
 8011b66:	0092      	lsls	r2, r2, #2
 8011b68:	300c      	adds	r0, #12
 8011b6a:	f7ff f800 	bl	8010b6e <memcpy>
 8011b6e:	4621      	mov	r1, r4
 8011b70:	4638      	mov	r0, r7
 8011b72:	f7ff ffa5 	bl	8011ac0 <_Bfree>
 8011b76:	4644      	mov	r4, r8
 8011b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b7c:	3501      	adds	r5, #1
 8011b7e:	615e      	str	r6, [r3, #20]
 8011b80:	6125      	str	r5, [r4, #16]
 8011b82:	4620      	mov	r0, r4
 8011b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b88:	08013118 	.word	0x08013118
 8011b8c:	08013129 	.word	0x08013129

08011b90 <__hi0bits>:
 8011b90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011b94:	4603      	mov	r3, r0
 8011b96:	bf36      	itet	cc
 8011b98:	0403      	lslcc	r3, r0, #16
 8011b9a:	2000      	movcs	r0, #0
 8011b9c:	2010      	movcc	r0, #16
 8011b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011ba2:	bf3c      	itt	cc
 8011ba4:	021b      	lslcc	r3, r3, #8
 8011ba6:	3008      	addcc	r0, #8
 8011ba8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011bac:	bf3c      	itt	cc
 8011bae:	011b      	lslcc	r3, r3, #4
 8011bb0:	3004      	addcc	r0, #4
 8011bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011bb6:	bf3c      	itt	cc
 8011bb8:	009b      	lslcc	r3, r3, #2
 8011bba:	3002      	addcc	r0, #2
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	db05      	blt.n	8011bcc <__hi0bits+0x3c>
 8011bc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011bc4:	f100 0001 	add.w	r0, r0, #1
 8011bc8:	bf08      	it	eq
 8011bca:	2020      	moveq	r0, #32
 8011bcc:	4770      	bx	lr

08011bce <__lo0bits>:
 8011bce:	6803      	ldr	r3, [r0, #0]
 8011bd0:	4602      	mov	r2, r0
 8011bd2:	f013 0007 	ands.w	r0, r3, #7
 8011bd6:	d00b      	beq.n	8011bf0 <__lo0bits+0x22>
 8011bd8:	07d9      	lsls	r1, r3, #31
 8011bda:	d421      	bmi.n	8011c20 <__lo0bits+0x52>
 8011bdc:	0798      	lsls	r0, r3, #30
 8011bde:	bf49      	itett	mi
 8011be0:	085b      	lsrmi	r3, r3, #1
 8011be2:	089b      	lsrpl	r3, r3, #2
 8011be4:	2001      	movmi	r0, #1
 8011be6:	6013      	strmi	r3, [r2, #0]
 8011be8:	bf5c      	itt	pl
 8011bea:	6013      	strpl	r3, [r2, #0]
 8011bec:	2002      	movpl	r0, #2
 8011bee:	4770      	bx	lr
 8011bf0:	b299      	uxth	r1, r3
 8011bf2:	b909      	cbnz	r1, 8011bf8 <__lo0bits+0x2a>
 8011bf4:	0c1b      	lsrs	r3, r3, #16
 8011bf6:	2010      	movs	r0, #16
 8011bf8:	b2d9      	uxtb	r1, r3
 8011bfa:	b909      	cbnz	r1, 8011c00 <__lo0bits+0x32>
 8011bfc:	3008      	adds	r0, #8
 8011bfe:	0a1b      	lsrs	r3, r3, #8
 8011c00:	0719      	lsls	r1, r3, #28
 8011c02:	bf04      	itt	eq
 8011c04:	091b      	lsreq	r3, r3, #4
 8011c06:	3004      	addeq	r0, #4
 8011c08:	0799      	lsls	r1, r3, #30
 8011c0a:	bf04      	itt	eq
 8011c0c:	089b      	lsreq	r3, r3, #2
 8011c0e:	3002      	addeq	r0, #2
 8011c10:	07d9      	lsls	r1, r3, #31
 8011c12:	d403      	bmi.n	8011c1c <__lo0bits+0x4e>
 8011c14:	085b      	lsrs	r3, r3, #1
 8011c16:	f100 0001 	add.w	r0, r0, #1
 8011c1a:	d003      	beq.n	8011c24 <__lo0bits+0x56>
 8011c1c:	6013      	str	r3, [r2, #0]
 8011c1e:	4770      	bx	lr
 8011c20:	2000      	movs	r0, #0
 8011c22:	4770      	bx	lr
 8011c24:	2020      	movs	r0, #32
 8011c26:	4770      	bx	lr

08011c28 <__i2b>:
 8011c28:	b510      	push	{r4, lr}
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	2101      	movs	r1, #1
 8011c2e:	f7ff ff07 	bl	8011a40 <_Balloc>
 8011c32:	4602      	mov	r2, r0
 8011c34:	b928      	cbnz	r0, 8011c42 <__i2b+0x1a>
 8011c36:	4b05      	ldr	r3, [pc, #20]	@ (8011c4c <__i2b+0x24>)
 8011c38:	4805      	ldr	r0, [pc, #20]	@ (8011c50 <__i2b+0x28>)
 8011c3a:	f240 1145 	movw	r1, #325	@ 0x145
 8011c3e:	f000 fca7 	bl	8012590 <__assert_func>
 8011c42:	2301      	movs	r3, #1
 8011c44:	6144      	str	r4, [r0, #20]
 8011c46:	6103      	str	r3, [r0, #16]
 8011c48:	bd10      	pop	{r4, pc}
 8011c4a:	bf00      	nop
 8011c4c:	08013118 	.word	0x08013118
 8011c50:	08013129 	.word	0x08013129

08011c54 <__multiply>:
 8011c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c58:	4617      	mov	r7, r2
 8011c5a:	690a      	ldr	r2, [r1, #16]
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	bfa8      	it	ge
 8011c62:	463b      	movge	r3, r7
 8011c64:	4689      	mov	r9, r1
 8011c66:	bfa4      	itt	ge
 8011c68:	460f      	movge	r7, r1
 8011c6a:	4699      	movge	r9, r3
 8011c6c:	693d      	ldr	r5, [r7, #16]
 8011c6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	6879      	ldr	r1, [r7, #4]
 8011c76:	eb05 060a 	add.w	r6, r5, sl
 8011c7a:	42b3      	cmp	r3, r6
 8011c7c:	b085      	sub	sp, #20
 8011c7e:	bfb8      	it	lt
 8011c80:	3101      	addlt	r1, #1
 8011c82:	f7ff fedd 	bl	8011a40 <_Balloc>
 8011c86:	b930      	cbnz	r0, 8011c96 <__multiply+0x42>
 8011c88:	4602      	mov	r2, r0
 8011c8a:	4b41      	ldr	r3, [pc, #260]	@ (8011d90 <__multiply+0x13c>)
 8011c8c:	4841      	ldr	r0, [pc, #260]	@ (8011d94 <__multiply+0x140>)
 8011c8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011c92:	f000 fc7d 	bl	8012590 <__assert_func>
 8011c96:	f100 0414 	add.w	r4, r0, #20
 8011c9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011c9e:	4623      	mov	r3, r4
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	4573      	cmp	r3, lr
 8011ca4:	d320      	bcc.n	8011ce8 <__multiply+0x94>
 8011ca6:	f107 0814 	add.w	r8, r7, #20
 8011caa:	f109 0114 	add.w	r1, r9, #20
 8011cae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011cb2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011cb6:	9302      	str	r3, [sp, #8]
 8011cb8:	1beb      	subs	r3, r5, r7
 8011cba:	3b15      	subs	r3, #21
 8011cbc:	f023 0303 	bic.w	r3, r3, #3
 8011cc0:	3304      	adds	r3, #4
 8011cc2:	3715      	adds	r7, #21
 8011cc4:	42bd      	cmp	r5, r7
 8011cc6:	bf38      	it	cc
 8011cc8:	2304      	movcc	r3, #4
 8011cca:	9301      	str	r3, [sp, #4]
 8011ccc:	9b02      	ldr	r3, [sp, #8]
 8011cce:	9103      	str	r1, [sp, #12]
 8011cd0:	428b      	cmp	r3, r1
 8011cd2:	d80c      	bhi.n	8011cee <__multiply+0x9a>
 8011cd4:	2e00      	cmp	r6, #0
 8011cd6:	dd03      	ble.n	8011ce0 <__multiply+0x8c>
 8011cd8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d055      	beq.n	8011d8c <__multiply+0x138>
 8011ce0:	6106      	str	r6, [r0, #16]
 8011ce2:	b005      	add	sp, #20
 8011ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ce8:	f843 2b04 	str.w	r2, [r3], #4
 8011cec:	e7d9      	b.n	8011ca2 <__multiply+0x4e>
 8011cee:	f8b1 a000 	ldrh.w	sl, [r1]
 8011cf2:	f1ba 0f00 	cmp.w	sl, #0
 8011cf6:	d01f      	beq.n	8011d38 <__multiply+0xe4>
 8011cf8:	46c4      	mov	ip, r8
 8011cfa:	46a1      	mov	r9, r4
 8011cfc:	2700      	movs	r7, #0
 8011cfe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011d02:	f8d9 3000 	ldr.w	r3, [r9]
 8011d06:	fa1f fb82 	uxth.w	fp, r2
 8011d0a:	b29b      	uxth	r3, r3
 8011d0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011d10:	443b      	add	r3, r7
 8011d12:	f8d9 7000 	ldr.w	r7, [r9]
 8011d16:	0c12      	lsrs	r2, r2, #16
 8011d18:	0c3f      	lsrs	r7, r7, #16
 8011d1a:	fb0a 7202 	mla	r2, sl, r2, r7
 8011d1e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d28:	4565      	cmp	r5, ip
 8011d2a:	f849 3b04 	str.w	r3, [r9], #4
 8011d2e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011d32:	d8e4      	bhi.n	8011cfe <__multiply+0xaa>
 8011d34:	9b01      	ldr	r3, [sp, #4]
 8011d36:	50e7      	str	r7, [r4, r3]
 8011d38:	9b03      	ldr	r3, [sp, #12]
 8011d3a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011d3e:	3104      	adds	r1, #4
 8011d40:	f1b9 0f00 	cmp.w	r9, #0
 8011d44:	d020      	beq.n	8011d88 <__multiply+0x134>
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	4647      	mov	r7, r8
 8011d4a:	46a4      	mov	ip, r4
 8011d4c:	f04f 0a00 	mov.w	sl, #0
 8011d50:	f8b7 b000 	ldrh.w	fp, [r7]
 8011d54:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011d58:	fb09 220b 	mla	r2, r9, fp, r2
 8011d5c:	4452      	add	r2, sl
 8011d5e:	b29b      	uxth	r3, r3
 8011d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d64:	f84c 3b04 	str.w	r3, [ip], #4
 8011d68:	f857 3b04 	ldr.w	r3, [r7], #4
 8011d6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011d70:	f8bc 3000 	ldrh.w	r3, [ip]
 8011d74:	fb09 330a 	mla	r3, r9, sl, r3
 8011d78:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011d7c:	42bd      	cmp	r5, r7
 8011d7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011d82:	d8e5      	bhi.n	8011d50 <__multiply+0xfc>
 8011d84:	9a01      	ldr	r2, [sp, #4]
 8011d86:	50a3      	str	r3, [r4, r2]
 8011d88:	3404      	adds	r4, #4
 8011d8a:	e79f      	b.n	8011ccc <__multiply+0x78>
 8011d8c:	3e01      	subs	r6, #1
 8011d8e:	e7a1      	b.n	8011cd4 <__multiply+0x80>
 8011d90:	08013118 	.word	0x08013118
 8011d94:	08013129 	.word	0x08013129

08011d98 <__pow5mult>:
 8011d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d9c:	4615      	mov	r5, r2
 8011d9e:	f012 0203 	ands.w	r2, r2, #3
 8011da2:	4607      	mov	r7, r0
 8011da4:	460e      	mov	r6, r1
 8011da6:	d007      	beq.n	8011db8 <__pow5mult+0x20>
 8011da8:	4c25      	ldr	r4, [pc, #148]	@ (8011e40 <__pow5mult+0xa8>)
 8011daa:	3a01      	subs	r2, #1
 8011dac:	2300      	movs	r3, #0
 8011dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011db2:	f7ff fea7 	bl	8011b04 <__multadd>
 8011db6:	4606      	mov	r6, r0
 8011db8:	10ad      	asrs	r5, r5, #2
 8011dba:	d03d      	beq.n	8011e38 <__pow5mult+0xa0>
 8011dbc:	69fc      	ldr	r4, [r7, #28]
 8011dbe:	b97c      	cbnz	r4, 8011de0 <__pow5mult+0x48>
 8011dc0:	2010      	movs	r0, #16
 8011dc2:	f7ff fd87 	bl	80118d4 <malloc>
 8011dc6:	4602      	mov	r2, r0
 8011dc8:	61f8      	str	r0, [r7, #28]
 8011dca:	b928      	cbnz	r0, 8011dd8 <__pow5mult+0x40>
 8011dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8011e44 <__pow5mult+0xac>)
 8011dce:	481e      	ldr	r0, [pc, #120]	@ (8011e48 <__pow5mult+0xb0>)
 8011dd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011dd4:	f000 fbdc 	bl	8012590 <__assert_func>
 8011dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ddc:	6004      	str	r4, [r0, #0]
 8011dde:	60c4      	str	r4, [r0, #12]
 8011de0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011de8:	b94c      	cbnz	r4, 8011dfe <__pow5mult+0x66>
 8011dea:	f240 2171 	movw	r1, #625	@ 0x271
 8011dee:	4638      	mov	r0, r7
 8011df0:	f7ff ff1a 	bl	8011c28 <__i2b>
 8011df4:	2300      	movs	r3, #0
 8011df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	6003      	str	r3, [r0, #0]
 8011dfe:	f04f 0900 	mov.w	r9, #0
 8011e02:	07eb      	lsls	r3, r5, #31
 8011e04:	d50a      	bpl.n	8011e1c <__pow5mult+0x84>
 8011e06:	4631      	mov	r1, r6
 8011e08:	4622      	mov	r2, r4
 8011e0a:	4638      	mov	r0, r7
 8011e0c:	f7ff ff22 	bl	8011c54 <__multiply>
 8011e10:	4631      	mov	r1, r6
 8011e12:	4680      	mov	r8, r0
 8011e14:	4638      	mov	r0, r7
 8011e16:	f7ff fe53 	bl	8011ac0 <_Bfree>
 8011e1a:	4646      	mov	r6, r8
 8011e1c:	106d      	asrs	r5, r5, #1
 8011e1e:	d00b      	beq.n	8011e38 <__pow5mult+0xa0>
 8011e20:	6820      	ldr	r0, [r4, #0]
 8011e22:	b938      	cbnz	r0, 8011e34 <__pow5mult+0x9c>
 8011e24:	4622      	mov	r2, r4
 8011e26:	4621      	mov	r1, r4
 8011e28:	4638      	mov	r0, r7
 8011e2a:	f7ff ff13 	bl	8011c54 <__multiply>
 8011e2e:	6020      	str	r0, [r4, #0]
 8011e30:	f8c0 9000 	str.w	r9, [r0]
 8011e34:	4604      	mov	r4, r0
 8011e36:	e7e4      	b.n	8011e02 <__pow5mult+0x6a>
 8011e38:	4630      	mov	r0, r6
 8011e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e3e:	bf00      	nop
 8011e40:	080131dc 	.word	0x080131dc
 8011e44:	080130a9 	.word	0x080130a9
 8011e48:	08013129 	.word	0x08013129

08011e4c <__lshift>:
 8011e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e50:	460c      	mov	r4, r1
 8011e52:	6849      	ldr	r1, [r1, #4]
 8011e54:	6923      	ldr	r3, [r4, #16]
 8011e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011e5a:	68a3      	ldr	r3, [r4, #8]
 8011e5c:	4607      	mov	r7, r0
 8011e5e:	4691      	mov	r9, r2
 8011e60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011e64:	f108 0601 	add.w	r6, r8, #1
 8011e68:	42b3      	cmp	r3, r6
 8011e6a:	db0b      	blt.n	8011e84 <__lshift+0x38>
 8011e6c:	4638      	mov	r0, r7
 8011e6e:	f7ff fde7 	bl	8011a40 <_Balloc>
 8011e72:	4605      	mov	r5, r0
 8011e74:	b948      	cbnz	r0, 8011e8a <__lshift+0x3e>
 8011e76:	4602      	mov	r2, r0
 8011e78:	4b28      	ldr	r3, [pc, #160]	@ (8011f1c <__lshift+0xd0>)
 8011e7a:	4829      	ldr	r0, [pc, #164]	@ (8011f20 <__lshift+0xd4>)
 8011e7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011e80:	f000 fb86 	bl	8012590 <__assert_func>
 8011e84:	3101      	adds	r1, #1
 8011e86:	005b      	lsls	r3, r3, #1
 8011e88:	e7ee      	b.n	8011e68 <__lshift+0x1c>
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	f100 0114 	add.w	r1, r0, #20
 8011e90:	f100 0210 	add.w	r2, r0, #16
 8011e94:	4618      	mov	r0, r3
 8011e96:	4553      	cmp	r3, sl
 8011e98:	db33      	blt.n	8011f02 <__lshift+0xb6>
 8011e9a:	6920      	ldr	r0, [r4, #16]
 8011e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ea0:	f104 0314 	add.w	r3, r4, #20
 8011ea4:	f019 091f 	ands.w	r9, r9, #31
 8011ea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011eac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011eb0:	d02b      	beq.n	8011f0a <__lshift+0xbe>
 8011eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8011eb6:	468a      	mov	sl, r1
 8011eb8:	2200      	movs	r2, #0
 8011eba:	6818      	ldr	r0, [r3, #0]
 8011ebc:	fa00 f009 	lsl.w	r0, r0, r9
 8011ec0:	4310      	orrs	r0, r2
 8011ec2:	f84a 0b04 	str.w	r0, [sl], #4
 8011ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eca:	459c      	cmp	ip, r3
 8011ecc:	fa22 f20e 	lsr.w	r2, r2, lr
 8011ed0:	d8f3      	bhi.n	8011eba <__lshift+0x6e>
 8011ed2:	ebac 0304 	sub.w	r3, ip, r4
 8011ed6:	3b15      	subs	r3, #21
 8011ed8:	f023 0303 	bic.w	r3, r3, #3
 8011edc:	3304      	adds	r3, #4
 8011ede:	f104 0015 	add.w	r0, r4, #21
 8011ee2:	4560      	cmp	r0, ip
 8011ee4:	bf88      	it	hi
 8011ee6:	2304      	movhi	r3, #4
 8011ee8:	50ca      	str	r2, [r1, r3]
 8011eea:	b10a      	cbz	r2, 8011ef0 <__lshift+0xa4>
 8011eec:	f108 0602 	add.w	r6, r8, #2
 8011ef0:	3e01      	subs	r6, #1
 8011ef2:	4638      	mov	r0, r7
 8011ef4:	612e      	str	r6, [r5, #16]
 8011ef6:	4621      	mov	r1, r4
 8011ef8:	f7ff fde2 	bl	8011ac0 <_Bfree>
 8011efc:	4628      	mov	r0, r5
 8011efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f02:	f842 0f04 	str.w	r0, [r2, #4]!
 8011f06:	3301      	adds	r3, #1
 8011f08:	e7c5      	b.n	8011e96 <__lshift+0x4a>
 8011f0a:	3904      	subs	r1, #4
 8011f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f10:	f841 2f04 	str.w	r2, [r1, #4]!
 8011f14:	459c      	cmp	ip, r3
 8011f16:	d8f9      	bhi.n	8011f0c <__lshift+0xc0>
 8011f18:	e7ea      	b.n	8011ef0 <__lshift+0xa4>
 8011f1a:	bf00      	nop
 8011f1c:	08013118 	.word	0x08013118
 8011f20:	08013129 	.word	0x08013129

08011f24 <__mcmp>:
 8011f24:	690a      	ldr	r2, [r1, #16]
 8011f26:	4603      	mov	r3, r0
 8011f28:	6900      	ldr	r0, [r0, #16]
 8011f2a:	1a80      	subs	r0, r0, r2
 8011f2c:	b530      	push	{r4, r5, lr}
 8011f2e:	d10e      	bne.n	8011f4e <__mcmp+0x2a>
 8011f30:	3314      	adds	r3, #20
 8011f32:	3114      	adds	r1, #20
 8011f34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011f38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011f3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011f40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011f44:	4295      	cmp	r5, r2
 8011f46:	d003      	beq.n	8011f50 <__mcmp+0x2c>
 8011f48:	d205      	bcs.n	8011f56 <__mcmp+0x32>
 8011f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f4e:	bd30      	pop	{r4, r5, pc}
 8011f50:	42a3      	cmp	r3, r4
 8011f52:	d3f3      	bcc.n	8011f3c <__mcmp+0x18>
 8011f54:	e7fb      	b.n	8011f4e <__mcmp+0x2a>
 8011f56:	2001      	movs	r0, #1
 8011f58:	e7f9      	b.n	8011f4e <__mcmp+0x2a>
	...

08011f5c <__mdiff>:
 8011f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f60:	4689      	mov	r9, r1
 8011f62:	4606      	mov	r6, r0
 8011f64:	4611      	mov	r1, r2
 8011f66:	4648      	mov	r0, r9
 8011f68:	4614      	mov	r4, r2
 8011f6a:	f7ff ffdb 	bl	8011f24 <__mcmp>
 8011f6e:	1e05      	subs	r5, r0, #0
 8011f70:	d112      	bne.n	8011f98 <__mdiff+0x3c>
 8011f72:	4629      	mov	r1, r5
 8011f74:	4630      	mov	r0, r6
 8011f76:	f7ff fd63 	bl	8011a40 <_Balloc>
 8011f7a:	4602      	mov	r2, r0
 8011f7c:	b928      	cbnz	r0, 8011f8a <__mdiff+0x2e>
 8011f7e:	4b3f      	ldr	r3, [pc, #252]	@ (801207c <__mdiff+0x120>)
 8011f80:	f240 2137 	movw	r1, #567	@ 0x237
 8011f84:	483e      	ldr	r0, [pc, #248]	@ (8012080 <__mdiff+0x124>)
 8011f86:	f000 fb03 	bl	8012590 <__assert_func>
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011f90:	4610      	mov	r0, r2
 8011f92:	b003      	add	sp, #12
 8011f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f98:	bfbc      	itt	lt
 8011f9a:	464b      	movlt	r3, r9
 8011f9c:	46a1      	movlt	r9, r4
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011fa4:	bfba      	itte	lt
 8011fa6:	461c      	movlt	r4, r3
 8011fa8:	2501      	movlt	r5, #1
 8011faa:	2500      	movge	r5, #0
 8011fac:	f7ff fd48 	bl	8011a40 <_Balloc>
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	b918      	cbnz	r0, 8011fbc <__mdiff+0x60>
 8011fb4:	4b31      	ldr	r3, [pc, #196]	@ (801207c <__mdiff+0x120>)
 8011fb6:	f240 2145 	movw	r1, #581	@ 0x245
 8011fba:	e7e3      	b.n	8011f84 <__mdiff+0x28>
 8011fbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011fc0:	6926      	ldr	r6, [r4, #16]
 8011fc2:	60c5      	str	r5, [r0, #12]
 8011fc4:	f109 0310 	add.w	r3, r9, #16
 8011fc8:	f109 0514 	add.w	r5, r9, #20
 8011fcc:	f104 0e14 	add.w	lr, r4, #20
 8011fd0:	f100 0b14 	add.w	fp, r0, #20
 8011fd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011fd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011fdc:	9301      	str	r3, [sp, #4]
 8011fde:	46d9      	mov	r9, fp
 8011fe0:	f04f 0c00 	mov.w	ip, #0
 8011fe4:	9b01      	ldr	r3, [sp, #4]
 8011fe6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011fea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011fee:	9301      	str	r3, [sp, #4]
 8011ff0:	fa1f f38a 	uxth.w	r3, sl
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	b283      	uxth	r3, r0
 8011ff8:	1acb      	subs	r3, r1, r3
 8011ffa:	0c00      	lsrs	r0, r0, #16
 8011ffc:	4463      	add	r3, ip
 8011ffe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012002:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012006:	b29b      	uxth	r3, r3
 8012008:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801200c:	4576      	cmp	r6, lr
 801200e:	f849 3b04 	str.w	r3, [r9], #4
 8012012:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012016:	d8e5      	bhi.n	8011fe4 <__mdiff+0x88>
 8012018:	1b33      	subs	r3, r6, r4
 801201a:	3b15      	subs	r3, #21
 801201c:	f023 0303 	bic.w	r3, r3, #3
 8012020:	3415      	adds	r4, #21
 8012022:	3304      	adds	r3, #4
 8012024:	42a6      	cmp	r6, r4
 8012026:	bf38      	it	cc
 8012028:	2304      	movcc	r3, #4
 801202a:	441d      	add	r5, r3
 801202c:	445b      	add	r3, fp
 801202e:	461e      	mov	r6, r3
 8012030:	462c      	mov	r4, r5
 8012032:	4544      	cmp	r4, r8
 8012034:	d30e      	bcc.n	8012054 <__mdiff+0xf8>
 8012036:	f108 0103 	add.w	r1, r8, #3
 801203a:	1b49      	subs	r1, r1, r5
 801203c:	f021 0103 	bic.w	r1, r1, #3
 8012040:	3d03      	subs	r5, #3
 8012042:	45a8      	cmp	r8, r5
 8012044:	bf38      	it	cc
 8012046:	2100      	movcc	r1, #0
 8012048:	440b      	add	r3, r1
 801204a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801204e:	b191      	cbz	r1, 8012076 <__mdiff+0x11a>
 8012050:	6117      	str	r7, [r2, #16]
 8012052:	e79d      	b.n	8011f90 <__mdiff+0x34>
 8012054:	f854 1b04 	ldr.w	r1, [r4], #4
 8012058:	46e6      	mov	lr, ip
 801205a:	0c08      	lsrs	r0, r1, #16
 801205c:	fa1c fc81 	uxtah	ip, ip, r1
 8012060:	4471      	add	r1, lr
 8012062:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012066:	b289      	uxth	r1, r1
 8012068:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801206c:	f846 1b04 	str.w	r1, [r6], #4
 8012070:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012074:	e7dd      	b.n	8012032 <__mdiff+0xd6>
 8012076:	3f01      	subs	r7, #1
 8012078:	e7e7      	b.n	801204a <__mdiff+0xee>
 801207a:	bf00      	nop
 801207c:	08013118 	.word	0x08013118
 8012080:	08013129 	.word	0x08013129

08012084 <__d2b>:
 8012084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012088:	460f      	mov	r7, r1
 801208a:	2101      	movs	r1, #1
 801208c:	ec59 8b10 	vmov	r8, r9, d0
 8012090:	4616      	mov	r6, r2
 8012092:	f7ff fcd5 	bl	8011a40 <_Balloc>
 8012096:	4604      	mov	r4, r0
 8012098:	b930      	cbnz	r0, 80120a8 <__d2b+0x24>
 801209a:	4602      	mov	r2, r0
 801209c:	4b23      	ldr	r3, [pc, #140]	@ (801212c <__d2b+0xa8>)
 801209e:	4824      	ldr	r0, [pc, #144]	@ (8012130 <__d2b+0xac>)
 80120a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80120a4:	f000 fa74 	bl	8012590 <__assert_func>
 80120a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80120ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120b0:	b10d      	cbz	r5, 80120b6 <__d2b+0x32>
 80120b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80120b6:	9301      	str	r3, [sp, #4]
 80120b8:	f1b8 0300 	subs.w	r3, r8, #0
 80120bc:	d023      	beq.n	8012106 <__d2b+0x82>
 80120be:	4668      	mov	r0, sp
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	f7ff fd84 	bl	8011bce <__lo0bits>
 80120c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80120ca:	b1d0      	cbz	r0, 8012102 <__d2b+0x7e>
 80120cc:	f1c0 0320 	rsb	r3, r0, #32
 80120d0:	fa02 f303 	lsl.w	r3, r2, r3
 80120d4:	430b      	orrs	r3, r1
 80120d6:	40c2      	lsrs	r2, r0
 80120d8:	6163      	str	r3, [r4, #20]
 80120da:	9201      	str	r2, [sp, #4]
 80120dc:	9b01      	ldr	r3, [sp, #4]
 80120de:	61a3      	str	r3, [r4, #24]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	bf0c      	ite	eq
 80120e4:	2201      	moveq	r2, #1
 80120e6:	2202      	movne	r2, #2
 80120e8:	6122      	str	r2, [r4, #16]
 80120ea:	b1a5      	cbz	r5, 8012116 <__d2b+0x92>
 80120ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80120f0:	4405      	add	r5, r0
 80120f2:	603d      	str	r5, [r7, #0]
 80120f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80120f8:	6030      	str	r0, [r6, #0]
 80120fa:	4620      	mov	r0, r4
 80120fc:	b003      	add	sp, #12
 80120fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012102:	6161      	str	r1, [r4, #20]
 8012104:	e7ea      	b.n	80120dc <__d2b+0x58>
 8012106:	a801      	add	r0, sp, #4
 8012108:	f7ff fd61 	bl	8011bce <__lo0bits>
 801210c:	9b01      	ldr	r3, [sp, #4]
 801210e:	6163      	str	r3, [r4, #20]
 8012110:	3020      	adds	r0, #32
 8012112:	2201      	movs	r2, #1
 8012114:	e7e8      	b.n	80120e8 <__d2b+0x64>
 8012116:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801211a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801211e:	6038      	str	r0, [r7, #0]
 8012120:	6918      	ldr	r0, [r3, #16]
 8012122:	f7ff fd35 	bl	8011b90 <__hi0bits>
 8012126:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801212a:	e7e5      	b.n	80120f8 <__d2b+0x74>
 801212c:	08013118 	.word	0x08013118
 8012130:	08013129 	.word	0x08013129

08012134 <__ssputs_r>:
 8012134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012138:	688e      	ldr	r6, [r1, #8]
 801213a:	461f      	mov	r7, r3
 801213c:	42be      	cmp	r6, r7
 801213e:	680b      	ldr	r3, [r1, #0]
 8012140:	4682      	mov	sl, r0
 8012142:	460c      	mov	r4, r1
 8012144:	4690      	mov	r8, r2
 8012146:	d82d      	bhi.n	80121a4 <__ssputs_r+0x70>
 8012148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801214c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012150:	d026      	beq.n	80121a0 <__ssputs_r+0x6c>
 8012152:	6965      	ldr	r5, [r4, #20]
 8012154:	6909      	ldr	r1, [r1, #16]
 8012156:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801215a:	eba3 0901 	sub.w	r9, r3, r1
 801215e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012162:	1c7b      	adds	r3, r7, #1
 8012164:	444b      	add	r3, r9
 8012166:	106d      	asrs	r5, r5, #1
 8012168:	429d      	cmp	r5, r3
 801216a:	bf38      	it	cc
 801216c:	461d      	movcc	r5, r3
 801216e:	0553      	lsls	r3, r2, #21
 8012170:	d527      	bpl.n	80121c2 <__ssputs_r+0x8e>
 8012172:	4629      	mov	r1, r5
 8012174:	f7ff fbd8 	bl	8011928 <_malloc_r>
 8012178:	4606      	mov	r6, r0
 801217a:	b360      	cbz	r0, 80121d6 <__ssputs_r+0xa2>
 801217c:	6921      	ldr	r1, [r4, #16]
 801217e:	464a      	mov	r2, r9
 8012180:	f7fe fcf5 	bl	8010b6e <memcpy>
 8012184:	89a3      	ldrh	r3, [r4, #12]
 8012186:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801218a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801218e:	81a3      	strh	r3, [r4, #12]
 8012190:	6126      	str	r6, [r4, #16]
 8012192:	6165      	str	r5, [r4, #20]
 8012194:	444e      	add	r6, r9
 8012196:	eba5 0509 	sub.w	r5, r5, r9
 801219a:	6026      	str	r6, [r4, #0]
 801219c:	60a5      	str	r5, [r4, #8]
 801219e:	463e      	mov	r6, r7
 80121a0:	42be      	cmp	r6, r7
 80121a2:	d900      	bls.n	80121a6 <__ssputs_r+0x72>
 80121a4:	463e      	mov	r6, r7
 80121a6:	6820      	ldr	r0, [r4, #0]
 80121a8:	4632      	mov	r2, r6
 80121aa:	4641      	mov	r1, r8
 80121ac:	f000 f9c6 	bl	801253c <memmove>
 80121b0:	68a3      	ldr	r3, [r4, #8]
 80121b2:	1b9b      	subs	r3, r3, r6
 80121b4:	60a3      	str	r3, [r4, #8]
 80121b6:	6823      	ldr	r3, [r4, #0]
 80121b8:	4433      	add	r3, r6
 80121ba:	6023      	str	r3, [r4, #0]
 80121bc:	2000      	movs	r0, #0
 80121be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121c2:	462a      	mov	r2, r5
 80121c4:	f000 fa28 	bl	8012618 <_realloc_r>
 80121c8:	4606      	mov	r6, r0
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d1e0      	bne.n	8012190 <__ssputs_r+0x5c>
 80121ce:	6921      	ldr	r1, [r4, #16]
 80121d0:	4650      	mov	r0, sl
 80121d2:	f7ff fb35 	bl	8011840 <_free_r>
 80121d6:	230c      	movs	r3, #12
 80121d8:	f8ca 3000 	str.w	r3, [sl]
 80121dc:	89a3      	ldrh	r3, [r4, #12]
 80121de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121e2:	81a3      	strh	r3, [r4, #12]
 80121e4:	f04f 30ff 	mov.w	r0, #4294967295
 80121e8:	e7e9      	b.n	80121be <__ssputs_r+0x8a>
	...

080121ec <_svfiprintf_r>:
 80121ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121f0:	4698      	mov	r8, r3
 80121f2:	898b      	ldrh	r3, [r1, #12]
 80121f4:	061b      	lsls	r3, r3, #24
 80121f6:	b09d      	sub	sp, #116	@ 0x74
 80121f8:	4607      	mov	r7, r0
 80121fa:	460d      	mov	r5, r1
 80121fc:	4614      	mov	r4, r2
 80121fe:	d510      	bpl.n	8012222 <_svfiprintf_r+0x36>
 8012200:	690b      	ldr	r3, [r1, #16]
 8012202:	b973      	cbnz	r3, 8012222 <_svfiprintf_r+0x36>
 8012204:	2140      	movs	r1, #64	@ 0x40
 8012206:	f7ff fb8f 	bl	8011928 <_malloc_r>
 801220a:	6028      	str	r0, [r5, #0]
 801220c:	6128      	str	r0, [r5, #16]
 801220e:	b930      	cbnz	r0, 801221e <_svfiprintf_r+0x32>
 8012210:	230c      	movs	r3, #12
 8012212:	603b      	str	r3, [r7, #0]
 8012214:	f04f 30ff 	mov.w	r0, #4294967295
 8012218:	b01d      	add	sp, #116	@ 0x74
 801221a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221e:	2340      	movs	r3, #64	@ 0x40
 8012220:	616b      	str	r3, [r5, #20]
 8012222:	2300      	movs	r3, #0
 8012224:	9309      	str	r3, [sp, #36]	@ 0x24
 8012226:	2320      	movs	r3, #32
 8012228:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801222c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012230:	2330      	movs	r3, #48	@ 0x30
 8012232:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80123d0 <_svfiprintf_r+0x1e4>
 8012236:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801223a:	f04f 0901 	mov.w	r9, #1
 801223e:	4623      	mov	r3, r4
 8012240:	469a      	mov	sl, r3
 8012242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012246:	b10a      	cbz	r2, 801224c <_svfiprintf_r+0x60>
 8012248:	2a25      	cmp	r2, #37	@ 0x25
 801224a:	d1f9      	bne.n	8012240 <_svfiprintf_r+0x54>
 801224c:	ebba 0b04 	subs.w	fp, sl, r4
 8012250:	d00b      	beq.n	801226a <_svfiprintf_r+0x7e>
 8012252:	465b      	mov	r3, fp
 8012254:	4622      	mov	r2, r4
 8012256:	4629      	mov	r1, r5
 8012258:	4638      	mov	r0, r7
 801225a:	f7ff ff6b 	bl	8012134 <__ssputs_r>
 801225e:	3001      	adds	r0, #1
 8012260:	f000 80a7 	beq.w	80123b2 <_svfiprintf_r+0x1c6>
 8012264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012266:	445a      	add	r2, fp
 8012268:	9209      	str	r2, [sp, #36]	@ 0x24
 801226a:	f89a 3000 	ldrb.w	r3, [sl]
 801226e:	2b00      	cmp	r3, #0
 8012270:	f000 809f 	beq.w	80123b2 <_svfiprintf_r+0x1c6>
 8012274:	2300      	movs	r3, #0
 8012276:	f04f 32ff 	mov.w	r2, #4294967295
 801227a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801227e:	f10a 0a01 	add.w	sl, sl, #1
 8012282:	9304      	str	r3, [sp, #16]
 8012284:	9307      	str	r3, [sp, #28]
 8012286:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801228a:	931a      	str	r3, [sp, #104]	@ 0x68
 801228c:	4654      	mov	r4, sl
 801228e:	2205      	movs	r2, #5
 8012290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012294:	484e      	ldr	r0, [pc, #312]	@ (80123d0 <_svfiprintf_r+0x1e4>)
 8012296:	f7ed ffc3 	bl	8000220 <memchr>
 801229a:	9a04      	ldr	r2, [sp, #16]
 801229c:	b9d8      	cbnz	r0, 80122d6 <_svfiprintf_r+0xea>
 801229e:	06d0      	lsls	r0, r2, #27
 80122a0:	bf44      	itt	mi
 80122a2:	2320      	movmi	r3, #32
 80122a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122a8:	0711      	lsls	r1, r2, #28
 80122aa:	bf44      	itt	mi
 80122ac:	232b      	movmi	r3, #43	@ 0x2b
 80122ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122b2:	f89a 3000 	ldrb.w	r3, [sl]
 80122b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80122b8:	d015      	beq.n	80122e6 <_svfiprintf_r+0xfa>
 80122ba:	9a07      	ldr	r2, [sp, #28]
 80122bc:	4654      	mov	r4, sl
 80122be:	2000      	movs	r0, #0
 80122c0:	f04f 0c0a 	mov.w	ip, #10
 80122c4:	4621      	mov	r1, r4
 80122c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122ca:	3b30      	subs	r3, #48	@ 0x30
 80122cc:	2b09      	cmp	r3, #9
 80122ce:	d94b      	bls.n	8012368 <_svfiprintf_r+0x17c>
 80122d0:	b1b0      	cbz	r0, 8012300 <_svfiprintf_r+0x114>
 80122d2:	9207      	str	r2, [sp, #28]
 80122d4:	e014      	b.n	8012300 <_svfiprintf_r+0x114>
 80122d6:	eba0 0308 	sub.w	r3, r0, r8
 80122da:	fa09 f303 	lsl.w	r3, r9, r3
 80122de:	4313      	orrs	r3, r2
 80122e0:	9304      	str	r3, [sp, #16]
 80122e2:	46a2      	mov	sl, r4
 80122e4:	e7d2      	b.n	801228c <_svfiprintf_r+0xa0>
 80122e6:	9b03      	ldr	r3, [sp, #12]
 80122e8:	1d19      	adds	r1, r3, #4
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	9103      	str	r1, [sp, #12]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	bfbb      	ittet	lt
 80122f2:	425b      	neglt	r3, r3
 80122f4:	f042 0202 	orrlt.w	r2, r2, #2
 80122f8:	9307      	strge	r3, [sp, #28]
 80122fa:	9307      	strlt	r3, [sp, #28]
 80122fc:	bfb8      	it	lt
 80122fe:	9204      	strlt	r2, [sp, #16]
 8012300:	7823      	ldrb	r3, [r4, #0]
 8012302:	2b2e      	cmp	r3, #46	@ 0x2e
 8012304:	d10a      	bne.n	801231c <_svfiprintf_r+0x130>
 8012306:	7863      	ldrb	r3, [r4, #1]
 8012308:	2b2a      	cmp	r3, #42	@ 0x2a
 801230a:	d132      	bne.n	8012372 <_svfiprintf_r+0x186>
 801230c:	9b03      	ldr	r3, [sp, #12]
 801230e:	1d1a      	adds	r2, r3, #4
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	9203      	str	r2, [sp, #12]
 8012314:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012318:	3402      	adds	r4, #2
 801231a:	9305      	str	r3, [sp, #20]
 801231c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80123e0 <_svfiprintf_r+0x1f4>
 8012320:	7821      	ldrb	r1, [r4, #0]
 8012322:	2203      	movs	r2, #3
 8012324:	4650      	mov	r0, sl
 8012326:	f7ed ff7b 	bl	8000220 <memchr>
 801232a:	b138      	cbz	r0, 801233c <_svfiprintf_r+0x150>
 801232c:	9b04      	ldr	r3, [sp, #16]
 801232e:	eba0 000a 	sub.w	r0, r0, sl
 8012332:	2240      	movs	r2, #64	@ 0x40
 8012334:	4082      	lsls	r2, r0
 8012336:	4313      	orrs	r3, r2
 8012338:	3401      	adds	r4, #1
 801233a:	9304      	str	r3, [sp, #16]
 801233c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012340:	4824      	ldr	r0, [pc, #144]	@ (80123d4 <_svfiprintf_r+0x1e8>)
 8012342:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012346:	2206      	movs	r2, #6
 8012348:	f7ed ff6a 	bl	8000220 <memchr>
 801234c:	2800      	cmp	r0, #0
 801234e:	d036      	beq.n	80123be <_svfiprintf_r+0x1d2>
 8012350:	4b21      	ldr	r3, [pc, #132]	@ (80123d8 <_svfiprintf_r+0x1ec>)
 8012352:	bb1b      	cbnz	r3, 801239c <_svfiprintf_r+0x1b0>
 8012354:	9b03      	ldr	r3, [sp, #12]
 8012356:	3307      	adds	r3, #7
 8012358:	f023 0307 	bic.w	r3, r3, #7
 801235c:	3308      	adds	r3, #8
 801235e:	9303      	str	r3, [sp, #12]
 8012360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012362:	4433      	add	r3, r6
 8012364:	9309      	str	r3, [sp, #36]	@ 0x24
 8012366:	e76a      	b.n	801223e <_svfiprintf_r+0x52>
 8012368:	fb0c 3202 	mla	r2, ip, r2, r3
 801236c:	460c      	mov	r4, r1
 801236e:	2001      	movs	r0, #1
 8012370:	e7a8      	b.n	80122c4 <_svfiprintf_r+0xd8>
 8012372:	2300      	movs	r3, #0
 8012374:	3401      	adds	r4, #1
 8012376:	9305      	str	r3, [sp, #20]
 8012378:	4619      	mov	r1, r3
 801237a:	f04f 0c0a 	mov.w	ip, #10
 801237e:	4620      	mov	r0, r4
 8012380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012384:	3a30      	subs	r2, #48	@ 0x30
 8012386:	2a09      	cmp	r2, #9
 8012388:	d903      	bls.n	8012392 <_svfiprintf_r+0x1a6>
 801238a:	2b00      	cmp	r3, #0
 801238c:	d0c6      	beq.n	801231c <_svfiprintf_r+0x130>
 801238e:	9105      	str	r1, [sp, #20]
 8012390:	e7c4      	b.n	801231c <_svfiprintf_r+0x130>
 8012392:	fb0c 2101 	mla	r1, ip, r1, r2
 8012396:	4604      	mov	r4, r0
 8012398:	2301      	movs	r3, #1
 801239a:	e7f0      	b.n	801237e <_svfiprintf_r+0x192>
 801239c:	ab03      	add	r3, sp, #12
 801239e:	9300      	str	r3, [sp, #0]
 80123a0:	462a      	mov	r2, r5
 80123a2:	4b0e      	ldr	r3, [pc, #56]	@ (80123dc <_svfiprintf_r+0x1f0>)
 80123a4:	a904      	add	r1, sp, #16
 80123a6:	4638      	mov	r0, r7
 80123a8:	f7fd fe28 	bl	800fffc <_printf_float>
 80123ac:	1c42      	adds	r2, r0, #1
 80123ae:	4606      	mov	r6, r0
 80123b0:	d1d6      	bne.n	8012360 <_svfiprintf_r+0x174>
 80123b2:	89ab      	ldrh	r3, [r5, #12]
 80123b4:	065b      	lsls	r3, r3, #25
 80123b6:	f53f af2d 	bmi.w	8012214 <_svfiprintf_r+0x28>
 80123ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123bc:	e72c      	b.n	8012218 <_svfiprintf_r+0x2c>
 80123be:	ab03      	add	r3, sp, #12
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	462a      	mov	r2, r5
 80123c4:	4b05      	ldr	r3, [pc, #20]	@ (80123dc <_svfiprintf_r+0x1f0>)
 80123c6:	a904      	add	r1, sp, #16
 80123c8:	4638      	mov	r0, r7
 80123ca:	f7fe f8af 	bl	801052c <_printf_i>
 80123ce:	e7ed      	b.n	80123ac <_svfiprintf_r+0x1c0>
 80123d0:	08013182 	.word	0x08013182
 80123d4:	0801318c 	.word	0x0801318c
 80123d8:	0800fffd 	.word	0x0800fffd
 80123dc:	08012135 	.word	0x08012135
 80123e0:	08013188 	.word	0x08013188

080123e4 <__sflush_r>:
 80123e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80123e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123ec:	0716      	lsls	r6, r2, #28
 80123ee:	4605      	mov	r5, r0
 80123f0:	460c      	mov	r4, r1
 80123f2:	d454      	bmi.n	801249e <__sflush_r+0xba>
 80123f4:	684b      	ldr	r3, [r1, #4]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	dc02      	bgt.n	8012400 <__sflush_r+0x1c>
 80123fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	dd48      	ble.n	8012492 <__sflush_r+0xae>
 8012400:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012402:	2e00      	cmp	r6, #0
 8012404:	d045      	beq.n	8012492 <__sflush_r+0xae>
 8012406:	2300      	movs	r3, #0
 8012408:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801240c:	682f      	ldr	r7, [r5, #0]
 801240e:	6a21      	ldr	r1, [r4, #32]
 8012410:	602b      	str	r3, [r5, #0]
 8012412:	d030      	beq.n	8012476 <__sflush_r+0x92>
 8012414:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012416:	89a3      	ldrh	r3, [r4, #12]
 8012418:	0759      	lsls	r1, r3, #29
 801241a:	d505      	bpl.n	8012428 <__sflush_r+0x44>
 801241c:	6863      	ldr	r3, [r4, #4]
 801241e:	1ad2      	subs	r2, r2, r3
 8012420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012422:	b10b      	cbz	r3, 8012428 <__sflush_r+0x44>
 8012424:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012426:	1ad2      	subs	r2, r2, r3
 8012428:	2300      	movs	r3, #0
 801242a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801242c:	6a21      	ldr	r1, [r4, #32]
 801242e:	4628      	mov	r0, r5
 8012430:	47b0      	blx	r6
 8012432:	1c43      	adds	r3, r0, #1
 8012434:	89a3      	ldrh	r3, [r4, #12]
 8012436:	d106      	bne.n	8012446 <__sflush_r+0x62>
 8012438:	6829      	ldr	r1, [r5, #0]
 801243a:	291d      	cmp	r1, #29
 801243c:	d82b      	bhi.n	8012496 <__sflush_r+0xb2>
 801243e:	4a2a      	ldr	r2, [pc, #168]	@ (80124e8 <__sflush_r+0x104>)
 8012440:	40ca      	lsrs	r2, r1
 8012442:	07d6      	lsls	r6, r2, #31
 8012444:	d527      	bpl.n	8012496 <__sflush_r+0xb2>
 8012446:	2200      	movs	r2, #0
 8012448:	6062      	str	r2, [r4, #4]
 801244a:	04d9      	lsls	r1, r3, #19
 801244c:	6922      	ldr	r2, [r4, #16]
 801244e:	6022      	str	r2, [r4, #0]
 8012450:	d504      	bpl.n	801245c <__sflush_r+0x78>
 8012452:	1c42      	adds	r2, r0, #1
 8012454:	d101      	bne.n	801245a <__sflush_r+0x76>
 8012456:	682b      	ldr	r3, [r5, #0]
 8012458:	b903      	cbnz	r3, 801245c <__sflush_r+0x78>
 801245a:	6560      	str	r0, [r4, #84]	@ 0x54
 801245c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801245e:	602f      	str	r7, [r5, #0]
 8012460:	b1b9      	cbz	r1, 8012492 <__sflush_r+0xae>
 8012462:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012466:	4299      	cmp	r1, r3
 8012468:	d002      	beq.n	8012470 <__sflush_r+0x8c>
 801246a:	4628      	mov	r0, r5
 801246c:	f7ff f9e8 	bl	8011840 <_free_r>
 8012470:	2300      	movs	r3, #0
 8012472:	6363      	str	r3, [r4, #52]	@ 0x34
 8012474:	e00d      	b.n	8012492 <__sflush_r+0xae>
 8012476:	2301      	movs	r3, #1
 8012478:	4628      	mov	r0, r5
 801247a:	47b0      	blx	r6
 801247c:	4602      	mov	r2, r0
 801247e:	1c50      	adds	r0, r2, #1
 8012480:	d1c9      	bne.n	8012416 <__sflush_r+0x32>
 8012482:	682b      	ldr	r3, [r5, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d0c6      	beq.n	8012416 <__sflush_r+0x32>
 8012488:	2b1d      	cmp	r3, #29
 801248a:	d001      	beq.n	8012490 <__sflush_r+0xac>
 801248c:	2b16      	cmp	r3, #22
 801248e:	d11e      	bne.n	80124ce <__sflush_r+0xea>
 8012490:	602f      	str	r7, [r5, #0]
 8012492:	2000      	movs	r0, #0
 8012494:	e022      	b.n	80124dc <__sflush_r+0xf8>
 8012496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801249a:	b21b      	sxth	r3, r3
 801249c:	e01b      	b.n	80124d6 <__sflush_r+0xf2>
 801249e:	690f      	ldr	r7, [r1, #16]
 80124a0:	2f00      	cmp	r7, #0
 80124a2:	d0f6      	beq.n	8012492 <__sflush_r+0xae>
 80124a4:	0793      	lsls	r3, r2, #30
 80124a6:	680e      	ldr	r6, [r1, #0]
 80124a8:	bf08      	it	eq
 80124aa:	694b      	ldreq	r3, [r1, #20]
 80124ac:	600f      	str	r7, [r1, #0]
 80124ae:	bf18      	it	ne
 80124b0:	2300      	movne	r3, #0
 80124b2:	eba6 0807 	sub.w	r8, r6, r7
 80124b6:	608b      	str	r3, [r1, #8]
 80124b8:	f1b8 0f00 	cmp.w	r8, #0
 80124bc:	dde9      	ble.n	8012492 <__sflush_r+0xae>
 80124be:	6a21      	ldr	r1, [r4, #32]
 80124c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80124c2:	4643      	mov	r3, r8
 80124c4:	463a      	mov	r2, r7
 80124c6:	4628      	mov	r0, r5
 80124c8:	47b0      	blx	r6
 80124ca:	2800      	cmp	r0, #0
 80124cc:	dc08      	bgt.n	80124e0 <__sflush_r+0xfc>
 80124ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124d6:	81a3      	strh	r3, [r4, #12]
 80124d8:	f04f 30ff 	mov.w	r0, #4294967295
 80124dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124e0:	4407      	add	r7, r0
 80124e2:	eba8 0800 	sub.w	r8, r8, r0
 80124e6:	e7e7      	b.n	80124b8 <__sflush_r+0xd4>
 80124e8:	20400001 	.word	0x20400001

080124ec <_fflush_r>:
 80124ec:	b538      	push	{r3, r4, r5, lr}
 80124ee:	690b      	ldr	r3, [r1, #16]
 80124f0:	4605      	mov	r5, r0
 80124f2:	460c      	mov	r4, r1
 80124f4:	b913      	cbnz	r3, 80124fc <_fflush_r+0x10>
 80124f6:	2500      	movs	r5, #0
 80124f8:	4628      	mov	r0, r5
 80124fa:	bd38      	pop	{r3, r4, r5, pc}
 80124fc:	b118      	cbz	r0, 8012506 <_fflush_r+0x1a>
 80124fe:	6a03      	ldr	r3, [r0, #32]
 8012500:	b90b      	cbnz	r3, 8012506 <_fflush_r+0x1a>
 8012502:	f7fe f9bd 	bl	8010880 <__sinit>
 8012506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d0f3      	beq.n	80124f6 <_fflush_r+0xa>
 801250e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012510:	07d0      	lsls	r0, r2, #31
 8012512:	d404      	bmi.n	801251e <_fflush_r+0x32>
 8012514:	0599      	lsls	r1, r3, #22
 8012516:	d402      	bmi.n	801251e <_fflush_r+0x32>
 8012518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801251a:	f7fe fb26 	bl	8010b6a <__retarget_lock_acquire_recursive>
 801251e:	4628      	mov	r0, r5
 8012520:	4621      	mov	r1, r4
 8012522:	f7ff ff5f 	bl	80123e4 <__sflush_r>
 8012526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012528:	07da      	lsls	r2, r3, #31
 801252a:	4605      	mov	r5, r0
 801252c:	d4e4      	bmi.n	80124f8 <_fflush_r+0xc>
 801252e:	89a3      	ldrh	r3, [r4, #12]
 8012530:	059b      	lsls	r3, r3, #22
 8012532:	d4e1      	bmi.n	80124f8 <_fflush_r+0xc>
 8012534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012536:	f7fe fb19 	bl	8010b6c <__retarget_lock_release_recursive>
 801253a:	e7dd      	b.n	80124f8 <_fflush_r+0xc>

0801253c <memmove>:
 801253c:	4288      	cmp	r0, r1
 801253e:	b510      	push	{r4, lr}
 8012540:	eb01 0402 	add.w	r4, r1, r2
 8012544:	d902      	bls.n	801254c <memmove+0x10>
 8012546:	4284      	cmp	r4, r0
 8012548:	4623      	mov	r3, r4
 801254a:	d807      	bhi.n	801255c <memmove+0x20>
 801254c:	1e43      	subs	r3, r0, #1
 801254e:	42a1      	cmp	r1, r4
 8012550:	d008      	beq.n	8012564 <memmove+0x28>
 8012552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012556:	f803 2f01 	strb.w	r2, [r3, #1]!
 801255a:	e7f8      	b.n	801254e <memmove+0x12>
 801255c:	4402      	add	r2, r0
 801255e:	4601      	mov	r1, r0
 8012560:	428a      	cmp	r2, r1
 8012562:	d100      	bne.n	8012566 <memmove+0x2a>
 8012564:	bd10      	pop	{r4, pc}
 8012566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801256a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801256e:	e7f7      	b.n	8012560 <memmove+0x24>

08012570 <_sbrk_r>:
 8012570:	b538      	push	{r3, r4, r5, lr}
 8012572:	4d06      	ldr	r5, [pc, #24]	@ (801258c <_sbrk_r+0x1c>)
 8012574:	2300      	movs	r3, #0
 8012576:	4604      	mov	r4, r0
 8012578:	4608      	mov	r0, r1
 801257a:	602b      	str	r3, [r5, #0]
 801257c:	f7ef ff1c 	bl	80023b8 <_sbrk>
 8012580:	1c43      	adds	r3, r0, #1
 8012582:	d102      	bne.n	801258a <_sbrk_r+0x1a>
 8012584:	682b      	ldr	r3, [r5, #0]
 8012586:	b103      	cbz	r3, 801258a <_sbrk_r+0x1a>
 8012588:	6023      	str	r3, [r4, #0]
 801258a:	bd38      	pop	{r3, r4, r5, pc}
 801258c:	2001041c 	.word	0x2001041c

08012590 <__assert_func>:
 8012590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012592:	4614      	mov	r4, r2
 8012594:	461a      	mov	r2, r3
 8012596:	4b09      	ldr	r3, [pc, #36]	@ (80125bc <__assert_func+0x2c>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4605      	mov	r5, r0
 801259c:	68d8      	ldr	r0, [r3, #12]
 801259e:	b14c      	cbz	r4, 80125b4 <__assert_func+0x24>
 80125a0:	4b07      	ldr	r3, [pc, #28]	@ (80125c0 <__assert_func+0x30>)
 80125a2:	9100      	str	r1, [sp, #0]
 80125a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80125a8:	4906      	ldr	r1, [pc, #24]	@ (80125c4 <__assert_func+0x34>)
 80125aa:	462b      	mov	r3, r5
 80125ac:	f000 f870 	bl	8012690 <fiprintf>
 80125b0:	f000 f880 	bl	80126b4 <abort>
 80125b4:	4b04      	ldr	r3, [pc, #16]	@ (80125c8 <__assert_func+0x38>)
 80125b6:	461c      	mov	r4, r3
 80125b8:	e7f3      	b.n	80125a2 <__assert_func+0x12>
 80125ba:	bf00      	nop
 80125bc:	20000194 	.word	0x20000194
 80125c0:	0801319d 	.word	0x0801319d
 80125c4:	080131aa 	.word	0x080131aa
 80125c8:	080131d8 	.word	0x080131d8

080125cc <_calloc_r>:
 80125cc:	b570      	push	{r4, r5, r6, lr}
 80125ce:	fba1 5402 	umull	r5, r4, r1, r2
 80125d2:	b934      	cbnz	r4, 80125e2 <_calloc_r+0x16>
 80125d4:	4629      	mov	r1, r5
 80125d6:	f7ff f9a7 	bl	8011928 <_malloc_r>
 80125da:	4606      	mov	r6, r0
 80125dc:	b928      	cbnz	r0, 80125ea <_calloc_r+0x1e>
 80125de:	4630      	mov	r0, r6
 80125e0:	bd70      	pop	{r4, r5, r6, pc}
 80125e2:	220c      	movs	r2, #12
 80125e4:	6002      	str	r2, [r0, #0]
 80125e6:	2600      	movs	r6, #0
 80125e8:	e7f9      	b.n	80125de <_calloc_r+0x12>
 80125ea:	462a      	mov	r2, r5
 80125ec:	4621      	mov	r1, r4
 80125ee:	f7fe f9e1 	bl	80109b4 <memset>
 80125f2:	e7f4      	b.n	80125de <_calloc_r+0x12>

080125f4 <__ascii_mbtowc>:
 80125f4:	b082      	sub	sp, #8
 80125f6:	b901      	cbnz	r1, 80125fa <__ascii_mbtowc+0x6>
 80125f8:	a901      	add	r1, sp, #4
 80125fa:	b142      	cbz	r2, 801260e <__ascii_mbtowc+0x1a>
 80125fc:	b14b      	cbz	r3, 8012612 <__ascii_mbtowc+0x1e>
 80125fe:	7813      	ldrb	r3, [r2, #0]
 8012600:	600b      	str	r3, [r1, #0]
 8012602:	7812      	ldrb	r2, [r2, #0]
 8012604:	1e10      	subs	r0, r2, #0
 8012606:	bf18      	it	ne
 8012608:	2001      	movne	r0, #1
 801260a:	b002      	add	sp, #8
 801260c:	4770      	bx	lr
 801260e:	4610      	mov	r0, r2
 8012610:	e7fb      	b.n	801260a <__ascii_mbtowc+0x16>
 8012612:	f06f 0001 	mvn.w	r0, #1
 8012616:	e7f8      	b.n	801260a <__ascii_mbtowc+0x16>

08012618 <_realloc_r>:
 8012618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801261c:	4607      	mov	r7, r0
 801261e:	4614      	mov	r4, r2
 8012620:	460d      	mov	r5, r1
 8012622:	b921      	cbnz	r1, 801262e <_realloc_r+0x16>
 8012624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012628:	4611      	mov	r1, r2
 801262a:	f7ff b97d 	b.w	8011928 <_malloc_r>
 801262e:	b92a      	cbnz	r2, 801263c <_realloc_r+0x24>
 8012630:	f7ff f906 	bl	8011840 <_free_r>
 8012634:	4625      	mov	r5, r4
 8012636:	4628      	mov	r0, r5
 8012638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801263c:	f000 f841 	bl	80126c2 <_malloc_usable_size_r>
 8012640:	4284      	cmp	r4, r0
 8012642:	4606      	mov	r6, r0
 8012644:	d802      	bhi.n	801264c <_realloc_r+0x34>
 8012646:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801264a:	d8f4      	bhi.n	8012636 <_realloc_r+0x1e>
 801264c:	4621      	mov	r1, r4
 801264e:	4638      	mov	r0, r7
 8012650:	f7ff f96a 	bl	8011928 <_malloc_r>
 8012654:	4680      	mov	r8, r0
 8012656:	b908      	cbnz	r0, 801265c <_realloc_r+0x44>
 8012658:	4645      	mov	r5, r8
 801265a:	e7ec      	b.n	8012636 <_realloc_r+0x1e>
 801265c:	42b4      	cmp	r4, r6
 801265e:	4622      	mov	r2, r4
 8012660:	4629      	mov	r1, r5
 8012662:	bf28      	it	cs
 8012664:	4632      	movcs	r2, r6
 8012666:	f7fe fa82 	bl	8010b6e <memcpy>
 801266a:	4629      	mov	r1, r5
 801266c:	4638      	mov	r0, r7
 801266e:	f7ff f8e7 	bl	8011840 <_free_r>
 8012672:	e7f1      	b.n	8012658 <_realloc_r+0x40>

08012674 <__ascii_wctomb>:
 8012674:	4603      	mov	r3, r0
 8012676:	4608      	mov	r0, r1
 8012678:	b141      	cbz	r1, 801268c <__ascii_wctomb+0x18>
 801267a:	2aff      	cmp	r2, #255	@ 0xff
 801267c:	d904      	bls.n	8012688 <__ascii_wctomb+0x14>
 801267e:	228a      	movs	r2, #138	@ 0x8a
 8012680:	601a      	str	r2, [r3, #0]
 8012682:	f04f 30ff 	mov.w	r0, #4294967295
 8012686:	4770      	bx	lr
 8012688:	700a      	strb	r2, [r1, #0]
 801268a:	2001      	movs	r0, #1
 801268c:	4770      	bx	lr
	...

08012690 <fiprintf>:
 8012690:	b40e      	push	{r1, r2, r3}
 8012692:	b503      	push	{r0, r1, lr}
 8012694:	4601      	mov	r1, r0
 8012696:	ab03      	add	r3, sp, #12
 8012698:	4805      	ldr	r0, [pc, #20]	@ (80126b0 <fiprintf+0x20>)
 801269a:	f853 2b04 	ldr.w	r2, [r3], #4
 801269e:	6800      	ldr	r0, [r0, #0]
 80126a0:	9301      	str	r3, [sp, #4]
 80126a2:	f000 f83f 	bl	8012724 <_vfiprintf_r>
 80126a6:	b002      	add	sp, #8
 80126a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80126ac:	b003      	add	sp, #12
 80126ae:	4770      	bx	lr
 80126b0:	20000194 	.word	0x20000194

080126b4 <abort>:
 80126b4:	b508      	push	{r3, lr}
 80126b6:	2006      	movs	r0, #6
 80126b8:	f000 fa08 	bl	8012acc <raise>
 80126bc:	2001      	movs	r0, #1
 80126be:	f7ef fe03 	bl	80022c8 <_exit>

080126c2 <_malloc_usable_size_r>:
 80126c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126c6:	1f18      	subs	r0, r3, #4
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	bfbc      	itt	lt
 80126cc:	580b      	ldrlt	r3, [r1, r0]
 80126ce:	18c0      	addlt	r0, r0, r3
 80126d0:	4770      	bx	lr

080126d2 <__sfputc_r>:
 80126d2:	6893      	ldr	r3, [r2, #8]
 80126d4:	3b01      	subs	r3, #1
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	b410      	push	{r4}
 80126da:	6093      	str	r3, [r2, #8]
 80126dc:	da08      	bge.n	80126f0 <__sfputc_r+0x1e>
 80126de:	6994      	ldr	r4, [r2, #24]
 80126e0:	42a3      	cmp	r3, r4
 80126e2:	db01      	blt.n	80126e8 <__sfputc_r+0x16>
 80126e4:	290a      	cmp	r1, #10
 80126e6:	d103      	bne.n	80126f0 <__sfputc_r+0x1e>
 80126e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126ec:	f000 b932 	b.w	8012954 <__swbuf_r>
 80126f0:	6813      	ldr	r3, [r2, #0]
 80126f2:	1c58      	adds	r0, r3, #1
 80126f4:	6010      	str	r0, [r2, #0]
 80126f6:	7019      	strb	r1, [r3, #0]
 80126f8:	4608      	mov	r0, r1
 80126fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126fe:	4770      	bx	lr

08012700 <__sfputs_r>:
 8012700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012702:	4606      	mov	r6, r0
 8012704:	460f      	mov	r7, r1
 8012706:	4614      	mov	r4, r2
 8012708:	18d5      	adds	r5, r2, r3
 801270a:	42ac      	cmp	r4, r5
 801270c:	d101      	bne.n	8012712 <__sfputs_r+0x12>
 801270e:	2000      	movs	r0, #0
 8012710:	e007      	b.n	8012722 <__sfputs_r+0x22>
 8012712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012716:	463a      	mov	r2, r7
 8012718:	4630      	mov	r0, r6
 801271a:	f7ff ffda 	bl	80126d2 <__sfputc_r>
 801271e:	1c43      	adds	r3, r0, #1
 8012720:	d1f3      	bne.n	801270a <__sfputs_r+0xa>
 8012722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012724 <_vfiprintf_r>:
 8012724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012728:	460d      	mov	r5, r1
 801272a:	b09d      	sub	sp, #116	@ 0x74
 801272c:	4614      	mov	r4, r2
 801272e:	4698      	mov	r8, r3
 8012730:	4606      	mov	r6, r0
 8012732:	b118      	cbz	r0, 801273c <_vfiprintf_r+0x18>
 8012734:	6a03      	ldr	r3, [r0, #32]
 8012736:	b90b      	cbnz	r3, 801273c <_vfiprintf_r+0x18>
 8012738:	f7fe f8a2 	bl	8010880 <__sinit>
 801273c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801273e:	07d9      	lsls	r1, r3, #31
 8012740:	d405      	bmi.n	801274e <_vfiprintf_r+0x2a>
 8012742:	89ab      	ldrh	r3, [r5, #12]
 8012744:	059a      	lsls	r2, r3, #22
 8012746:	d402      	bmi.n	801274e <_vfiprintf_r+0x2a>
 8012748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801274a:	f7fe fa0e 	bl	8010b6a <__retarget_lock_acquire_recursive>
 801274e:	89ab      	ldrh	r3, [r5, #12]
 8012750:	071b      	lsls	r3, r3, #28
 8012752:	d501      	bpl.n	8012758 <_vfiprintf_r+0x34>
 8012754:	692b      	ldr	r3, [r5, #16]
 8012756:	b99b      	cbnz	r3, 8012780 <_vfiprintf_r+0x5c>
 8012758:	4629      	mov	r1, r5
 801275a:	4630      	mov	r0, r6
 801275c:	f000 f938 	bl	80129d0 <__swsetup_r>
 8012760:	b170      	cbz	r0, 8012780 <_vfiprintf_r+0x5c>
 8012762:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012764:	07dc      	lsls	r4, r3, #31
 8012766:	d504      	bpl.n	8012772 <_vfiprintf_r+0x4e>
 8012768:	f04f 30ff 	mov.w	r0, #4294967295
 801276c:	b01d      	add	sp, #116	@ 0x74
 801276e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012772:	89ab      	ldrh	r3, [r5, #12]
 8012774:	0598      	lsls	r0, r3, #22
 8012776:	d4f7      	bmi.n	8012768 <_vfiprintf_r+0x44>
 8012778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801277a:	f7fe f9f7 	bl	8010b6c <__retarget_lock_release_recursive>
 801277e:	e7f3      	b.n	8012768 <_vfiprintf_r+0x44>
 8012780:	2300      	movs	r3, #0
 8012782:	9309      	str	r3, [sp, #36]	@ 0x24
 8012784:	2320      	movs	r3, #32
 8012786:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801278a:	f8cd 800c 	str.w	r8, [sp, #12]
 801278e:	2330      	movs	r3, #48	@ 0x30
 8012790:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012940 <_vfiprintf_r+0x21c>
 8012794:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012798:	f04f 0901 	mov.w	r9, #1
 801279c:	4623      	mov	r3, r4
 801279e:	469a      	mov	sl, r3
 80127a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127a4:	b10a      	cbz	r2, 80127aa <_vfiprintf_r+0x86>
 80127a6:	2a25      	cmp	r2, #37	@ 0x25
 80127a8:	d1f9      	bne.n	801279e <_vfiprintf_r+0x7a>
 80127aa:	ebba 0b04 	subs.w	fp, sl, r4
 80127ae:	d00b      	beq.n	80127c8 <_vfiprintf_r+0xa4>
 80127b0:	465b      	mov	r3, fp
 80127b2:	4622      	mov	r2, r4
 80127b4:	4629      	mov	r1, r5
 80127b6:	4630      	mov	r0, r6
 80127b8:	f7ff ffa2 	bl	8012700 <__sfputs_r>
 80127bc:	3001      	adds	r0, #1
 80127be:	f000 80a7 	beq.w	8012910 <_vfiprintf_r+0x1ec>
 80127c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127c4:	445a      	add	r2, fp
 80127c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80127c8:	f89a 3000 	ldrb.w	r3, [sl]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f000 809f 	beq.w	8012910 <_vfiprintf_r+0x1ec>
 80127d2:	2300      	movs	r3, #0
 80127d4:	f04f 32ff 	mov.w	r2, #4294967295
 80127d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127dc:	f10a 0a01 	add.w	sl, sl, #1
 80127e0:	9304      	str	r3, [sp, #16]
 80127e2:	9307      	str	r3, [sp, #28]
 80127e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80127e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80127ea:	4654      	mov	r4, sl
 80127ec:	2205      	movs	r2, #5
 80127ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127f2:	4853      	ldr	r0, [pc, #332]	@ (8012940 <_vfiprintf_r+0x21c>)
 80127f4:	f7ed fd14 	bl	8000220 <memchr>
 80127f8:	9a04      	ldr	r2, [sp, #16]
 80127fa:	b9d8      	cbnz	r0, 8012834 <_vfiprintf_r+0x110>
 80127fc:	06d1      	lsls	r1, r2, #27
 80127fe:	bf44      	itt	mi
 8012800:	2320      	movmi	r3, #32
 8012802:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012806:	0713      	lsls	r3, r2, #28
 8012808:	bf44      	itt	mi
 801280a:	232b      	movmi	r3, #43	@ 0x2b
 801280c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012810:	f89a 3000 	ldrb.w	r3, [sl]
 8012814:	2b2a      	cmp	r3, #42	@ 0x2a
 8012816:	d015      	beq.n	8012844 <_vfiprintf_r+0x120>
 8012818:	9a07      	ldr	r2, [sp, #28]
 801281a:	4654      	mov	r4, sl
 801281c:	2000      	movs	r0, #0
 801281e:	f04f 0c0a 	mov.w	ip, #10
 8012822:	4621      	mov	r1, r4
 8012824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012828:	3b30      	subs	r3, #48	@ 0x30
 801282a:	2b09      	cmp	r3, #9
 801282c:	d94b      	bls.n	80128c6 <_vfiprintf_r+0x1a2>
 801282e:	b1b0      	cbz	r0, 801285e <_vfiprintf_r+0x13a>
 8012830:	9207      	str	r2, [sp, #28]
 8012832:	e014      	b.n	801285e <_vfiprintf_r+0x13a>
 8012834:	eba0 0308 	sub.w	r3, r0, r8
 8012838:	fa09 f303 	lsl.w	r3, r9, r3
 801283c:	4313      	orrs	r3, r2
 801283e:	9304      	str	r3, [sp, #16]
 8012840:	46a2      	mov	sl, r4
 8012842:	e7d2      	b.n	80127ea <_vfiprintf_r+0xc6>
 8012844:	9b03      	ldr	r3, [sp, #12]
 8012846:	1d19      	adds	r1, r3, #4
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	9103      	str	r1, [sp, #12]
 801284c:	2b00      	cmp	r3, #0
 801284e:	bfbb      	ittet	lt
 8012850:	425b      	neglt	r3, r3
 8012852:	f042 0202 	orrlt.w	r2, r2, #2
 8012856:	9307      	strge	r3, [sp, #28]
 8012858:	9307      	strlt	r3, [sp, #28]
 801285a:	bfb8      	it	lt
 801285c:	9204      	strlt	r2, [sp, #16]
 801285e:	7823      	ldrb	r3, [r4, #0]
 8012860:	2b2e      	cmp	r3, #46	@ 0x2e
 8012862:	d10a      	bne.n	801287a <_vfiprintf_r+0x156>
 8012864:	7863      	ldrb	r3, [r4, #1]
 8012866:	2b2a      	cmp	r3, #42	@ 0x2a
 8012868:	d132      	bne.n	80128d0 <_vfiprintf_r+0x1ac>
 801286a:	9b03      	ldr	r3, [sp, #12]
 801286c:	1d1a      	adds	r2, r3, #4
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	9203      	str	r2, [sp, #12]
 8012872:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012876:	3402      	adds	r4, #2
 8012878:	9305      	str	r3, [sp, #20]
 801287a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012950 <_vfiprintf_r+0x22c>
 801287e:	7821      	ldrb	r1, [r4, #0]
 8012880:	2203      	movs	r2, #3
 8012882:	4650      	mov	r0, sl
 8012884:	f7ed fccc 	bl	8000220 <memchr>
 8012888:	b138      	cbz	r0, 801289a <_vfiprintf_r+0x176>
 801288a:	9b04      	ldr	r3, [sp, #16]
 801288c:	eba0 000a 	sub.w	r0, r0, sl
 8012890:	2240      	movs	r2, #64	@ 0x40
 8012892:	4082      	lsls	r2, r0
 8012894:	4313      	orrs	r3, r2
 8012896:	3401      	adds	r4, #1
 8012898:	9304      	str	r3, [sp, #16]
 801289a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801289e:	4829      	ldr	r0, [pc, #164]	@ (8012944 <_vfiprintf_r+0x220>)
 80128a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80128a4:	2206      	movs	r2, #6
 80128a6:	f7ed fcbb 	bl	8000220 <memchr>
 80128aa:	2800      	cmp	r0, #0
 80128ac:	d03f      	beq.n	801292e <_vfiprintf_r+0x20a>
 80128ae:	4b26      	ldr	r3, [pc, #152]	@ (8012948 <_vfiprintf_r+0x224>)
 80128b0:	bb1b      	cbnz	r3, 80128fa <_vfiprintf_r+0x1d6>
 80128b2:	9b03      	ldr	r3, [sp, #12]
 80128b4:	3307      	adds	r3, #7
 80128b6:	f023 0307 	bic.w	r3, r3, #7
 80128ba:	3308      	adds	r3, #8
 80128bc:	9303      	str	r3, [sp, #12]
 80128be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128c0:	443b      	add	r3, r7
 80128c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80128c4:	e76a      	b.n	801279c <_vfiprintf_r+0x78>
 80128c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80128ca:	460c      	mov	r4, r1
 80128cc:	2001      	movs	r0, #1
 80128ce:	e7a8      	b.n	8012822 <_vfiprintf_r+0xfe>
 80128d0:	2300      	movs	r3, #0
 80128d2:	3401      	adds	r4, #1
 80128d4:	9305      	str	r3, [sp, #20]
 80128d6:	4619      	mov	r1, r3
 80128d8:	f04f 0c0a 	mov.w	ip, #10
 80128dc:	4620      	mov	r0, r4
 80128de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128e2:	3a30      	subs	r2, #48	@ 0x30
 80128e4:	2a09      	cmp	r2, #9
 80128e6:	d903      	bls.n	80128f0 <_vfiprintf_r+0x1cc>
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d0c6      	beq.n	801287a <_vfiprintf_r+0x156>
 80128ec:	9105      	str	r1, [sp, #20]
 80128ee:	e7c4      	b.n	801287a <_vfiprintf_r+0x156>
 80128f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80128f4:	4604      	mov	r4, r0
 80128f6:	2301      	movs	r3, #1
 80128f8:	e7f0      	b.n	80128dc <_vfiprintf_r+0x1b8>
 80128fa:	ab03      	add	r3, sp, #12
 80128fc:	9300      	str	r3, [sp, #0]
 80128fe:	462a      	mov	r2, r5
 8012900:	4b12      	ldr	r3, [pc, #72]	@ (801294c <_vfiprintf_r+0x228>)
 8012902:	a904      	add	r1, sp, #16
 8012904:	4630      	mov	r0, r6
 8012906:	f7fd fb79 	bl	800fffc <_printf_float>
 801290a:	4607      	mov	r7, r0
 801290c:	1c78      	adds	r0, r7, #1
 801290e:	d1d6      	bne.n	80128be <_vfiprintf_r+0x19a>
 8012910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012912:	07d9      	lsls	r1, r3, #31
 8012914:	d405      	bmi.n	8012922 <_vfiprintf_r+0x1fe>
 8012916:	89ab      	ldrh	r3, [r5, #12]
 8012918:	059a      	lsls	r2, r3, #22
 801291a:	d402      	bmi.n	8012922 <_vfiprintf_r+0x1fe>
 801291c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801291e:	f7fe f925 	bl	8010b6c <__retarget_lock_release_recursive>
 8012922:	89ab      	ldrh	r3, [r5, #12]
 8012924:	065b      	lsls	r3, r3, #25
 8012926:	f53f af1f 	bmi.w	8012768 <_vfiprintf_r+0x44>
 801292a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801292c:	e71e      	b.n	801276c <_vfiprintf_r+0x48>
 801292e:	ab03      	add	r3, sp, #12
 8012930:	9300      	str	r3, [sp, #0]
 8012932:	462a      	mov	r2, r5
 8012934:	4b05      	ldr	r3, [pc, #20]	@ (801294c <_vfiprintf_r+0x228>)
 8012936:	a904      	add	r1, sp, #16
 8012938:	4630      	mov	r0, r6
 801293a:	f7fd fdf7 	bl	801052c <_printf_i>
 801293e:	e7e4      	b.n	801290a <_vfiprintf_r+0x1e6>
 8012940:	08013182 	.word	0x08013182
 8012944:	0801318c 	.word	0x0801318c
 8012948:	0800fffd 	.word	0x0800fffd
 801294c:	08012701 	.word	0x08012701
 8012950:	08013188 	.word	0x08013188

08012954 <__swbuf_r>:
 8012954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012956:	460e      	mov	r6, r1
 8012958:	4614      	mov	r4, r2
 801295a:	4605      	mov	r5, r0
 801295c:	b118      	cbz	r0, 8012966 <__swbuf_r+0x12>
 801295e:	6a03      	ldr	r3, [r0, #32]
 8012960:	b90b      	cbnz	r3, 8012966 <__swbuf_r+0x12>
 8012962:	f7fd ff8d 	bl	8010880 <__sinit>
 8012966:	69a3      	ldr	r3, [r4, #24]
 8012968:	60a3      	str	r3, [r4, #8]
 801296a:	89a3      	ldrh	r3, [r4, #12]
 801296c:	071a      	lsls	r2, r3, #28
 801296e:	d501      	bpl.n	8012974 <__swbuf_r+0x20>
 8012970:	6923      	ldr	r3, [r4, #16]
 8012972:	b943      	cbnz	r3, 8012986 <__swbuf_r+0x32>
 8012974:	4621      	mov	r1, r4
 8012976:	4628      	mov	r0, r5
 8012978:	f000 f82a 	bl	80129d0 <__swsetup_r>
 801297c:	b118      	cbz	r0, 8012986 <__swbuf_r+0x32>
 801297e:	f04f 37ff 	mov.w	r7, #4294967295
 8012982:	4638      	mov	r0, r7
 8012984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012986:	6823      	ldr	r3, [r4, #0]
 8012988:	6922      	ldr	r2, [r4, #16]
 801298a:	1a98      	subs	r0, r3, r2
 801298c:	6963      	ldr	r3, [r4, #20]
 801298e:	b2f6      	uxtb	r6, r6
 8012990:	4283      	cmp	r3, r0
 8012992:	4637      	mov	r7, r6
 8012994:	dc05      	bgt.n	80129a2 <__swbuf_r+0x4e>
 8012996:	4621      	mov	r1, r4
 8012998:	4628      	mov	r0, r5
 801299a:	f7ff fda7 	bl	80124ec <_fflush_r>
 801299e:	2800      	cmp	r0, #0
 80129a0:	d1ed      	bne.n	801297e <__swbuf_r+0x2a>
 80129a2:	68a3      	ldr	r3, [r4, #8]
 80129a4:	3b01      	subs	r3, #1
 80129a6:	60a3      	str	r3, [r4, #8]
 80129a8:	6823      	ldr	r3, [r4, #0]
 80129aa:	1c5a      	adds	r2, r3, #1
 80129ac:	6022      	str	r2, [r4, #0]
 80129ae:	701e      	strb	r6, [r3, #0]
 80129b0:	6962      	ldr	r2, [r4, #20]
 80129b2:	1c43      	adds	r3, r0, #1
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d004      	beq.n	80129c2 <__swbuf_r+0x6e>
 80129b8:	89a3      	ldrh	r3, [r4, #12]
 80129ba:	07db      	lsls	r3, r3, #31
 80129bc:	d5e1      	bpl.n	8012982 <__swbuf_r+0x2e>
 80129be:	2e0a      	cmp	r6, #10
 80129c0:	d1df      	bne.n	8012982 <__swbuf_r+0x2e>
 80129c2:	4621      	mov	r1, r4
 80129c4:	4628      	mov	r0, r5
 80129c6:	f7ff fd91 	bl	80124ec <_fflush_r>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	d0d9      	beq.n	8012982 <__swbuf_r+0x2e>
 80129ce:	e7d6      	b.n	801297e <__swbuf_r+0x2a>

080129d0 <__swsetup_r>:
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	4b29      	ldr	r3, [pc, #164]	@ (8012a78 <__swsetup_r+0xa8>)
 80129d4:	4605      	mov	r5, r0
 80129d6:	6818      	ldr	r0, [r3, #0]
 80129d8:	460c      	mov	r4, r1
 80129da:	b118      	cbz	r0, 80129e4 <__swsetup_r+0x14>
 80129dc:	6a03      	ldr	r3, [r0, #32]
 80129de:	b90b      	cbnz	r3, 80129e4 <__swsetup_r+0x14>
 80129e0:	f7fd ff4e 	bl	8010880 <__sinit>
 80129e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129e8:	0719      	lsls	r1, r3, #28
 80129ea:	d422      	bmi.n	8012a32 <__swsetup_r+0x62>
 80129ec:	06da      	lsls	r2, r3, #27
 80129ee:	d407      	bmi.n	8012a00 <__swsetup_r+0x30>
 80129f0:	2209      	movs	r2, #9
 80129f2:	602a      	str	r2, [r5, #0]
 80129f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129f8:	81a3      	strh	r3, [r4, #12]
 80129fa:	f04f 30ff 	mov.w	r0, #4294967295
 80129fe:	e033      	b.n	8012a68 <__swsetup_r+0x98>
 8012a00:	0758      	lsls	r0, r3, #29
 8012a02:	d512      	bpl.n	8012a2a <__swsetup_r+0x5a>
 8012a04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a06:	b141      	cbz	r1, 8012a1a <__swsetup_r+0x4a>
 8012a08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a0c:	4299      	cmp	r1, r3
 8012a0e:	d002      	beq.n	8012a16 <__swsetup_r+0x46>
 8012a10:	4628      	mov	r0, r5
 8012a12:	f7fe ff15 	bl	8011840 <_free_r>
 8012a16:	2300      	movs	r3, #0
 8012a18:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a1a:	89a3      	ldrh	r3, [r4, #12]
 8012a1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012a20:	81a3      	strh	r3, [r4, #12]
 8012a22:	2300      	movs	r3, #0
 8012a24:	6063      	str	r3, [r4, #4]
 8012a26:	6923      	ldr	r3, [r4, #16]
 8012a28:	6023      	str	r3, [r4, #0]
 8012a2a:	89a3      	ldrh	r3, [r4, #12]
 8012a2c:	f043 0308 	orr.w	r3, r3, #8
 8012a30:	81a3      	strh	r3, [r4, #12]
 8012a32:	6923      	ldr	r3, [r4, #16]
 8012a34:	b94b      	cbnz	r3, 8012a4a <__swsetup_r+0x7a>
 8012a36:	89a3      	ldrh	r3, [r4, #12]
 8012a38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a40:	d003      	beq.n	8012a4a <__swsetup_r+0x7a>
 8012a42:	4621      	mov	r1, r4
 8012a44:	4628      	mov	r0, r5
 8012a46:	f000 f883 	bl	8012b50 <__smakebuf_r>
 8012a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a4e:	f013 0201 	ands.w	r2, r3, #1
 8012a52:	d00a      	beq.n	8012a6a <__swsetup_r+0x9a>
 8012a54:	2200      	movs	r2, #0
 8012a56:	60a2      	str	r2, [r4, #8]
 8012a58:	6962      	ldr	r2, [r4, #20]
 8012a5a:	4252      	negs	r2, r2
 8012a5c:	61a2      	str	r2, [r4, #24]
 8012a5e:	6922      	ldr	r2, [r4, #16]
 8012a60:	b942      	cbnz	r2, 8012a74 <__swsetup_r+0xa4>
 8012a62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012a66:	d1c5      	bne.n	80129f4 <__swsetup_r+0x24>
 8012a68:	bd38      	pop	{r3, r4, r5, pc}
 8012a6a:	0799      	lsls	r1, r3, #30
 8012a6c:	bf58      	it	pl
 8012a6e:	6962      	ldrpl	r2, [r4, #20]
 8012a70:	60a2      	str	r2, [r4, #8]
 8012a72:	e7f4      	b.n	8012a5e <__swsetup_r+0x8e>
 8012a74:	2000      	movs	r0, #0
 8012a76:	e7f7      	b.n	8012a68 <__swsetup_r+0x98>
 8012a78:	20000194 	.word	0x20000194

08012a7c <_raise_r>:
 8012a7c:	291f      	cmp	r1, #31
 8012a7e:	b538      	push	{r3, r4, r5, lr}
 8012a80:	4605      	mov	r5, r0
 8012a82:	460c      	mov	r4, r1
 8012a84:	d904      	bls.n	8012a90 <_raise_r+0x14>
 8012a86:	2316      	movs	r3, #22
 8012a88:	6003      	str	r3, [r0, #0]
 8012a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8e:	bd38      	pop	{r3, r4, r5, pc}
 8012a90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012a92:	b112      	cbz	r2, 8012a9a <_raise_r+0x1e>
 8012a94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a98:	b94b      	cbnz	r3, 8012aae <_raise_r+0x32>
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	f000 f830 	bl	8012b00 <_getpid_r>
 8012aa0:	4622      	mov	r2, r4
 8012aa2:	4601      	mov	r1, r0
 8012aa4:	4628      	mov	r0, r5
 8012aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aaa:	f000 b817 	b.w	8012adc <_kill_r>
 8012aae:	2b01      	cmp	r3, #1
 8012ab0:	d00a      	beq.n	8012ac8 <_raise_r+0x4c>
 8012ab2:	1c59      	adds	r1, r3, #1
 8012ab4:	d103      	bne.n	8012abe <_raise_r+0x42>
 8012ab6:	2316      	movs	r3, #22
 8012ab8:	6003      	str	r3, [r0, #0]
 8012aba:	2001      	movs	r0, #1
 8012abc:	e7e7      	b.n	8012a8e <_raise_r+0x12>
 8012abe:	2100      	movs	r1, #0
 8012ac0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	4798      	blx	r3
 8012ac8:	2000      	movs	r0, #0
 8012aca:	e7e0      	b.n	8012a8e <_raise_r+0x12>

08012acc <raise>:
 8012acc:	4b02      	ldr	r3, [pc, #8]	@ (8012ad8 <raise+0xc>)
 8012ace:	4601      	mov	r1, r0
 8012ad0:	6818      	ldr	r0, [r3, #0]
 8012ad2:	f7ff bfd3 	b.w	8012a7c <_raise_r>
 8012ad6:	bf00      	nop
 8012ad8:	20000194 	.word	0x20000194

08012adc <_kill_r>:
 8012adc:	b538      	push	{r3, r4, r5, lr}
 8012ade:	4d07      	ldr	r5, [pc, #28]	@ (8012afc <_kill_r+0x20>)
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	4604      	mov	r4, r0
 8012ae4:	4608      	mov	r0, r1
 8012ae6:	4611      	mov	r1, r2
 8012ae8:	602b      	str	r3, [r5, #0]
 8012aea:	f7ef fbdd 	bl	80022a8 <_kill>
 8012aee:	1c43      	adds	r3, r0, #1
 8012af0:	d102      	bne.n	8012af8 <_kill_r+0x1c>
 8012af2:	682b      	ldr	r3, [r5, #0]
 8012af4:	b103      	cbz	r3, 8012af8 <_kill_r+0x1c>
 8012af6:	6023      	str	r3, [r4, #0]
 8012af8:	bd38      	pop	{r3, r4, r5, pc}
 8012afa:	bf00      	nop
 8012afc:	2001041c 	.word	0x2001041c

08012b00 <_getpid_r>:
 8012b00:	f7ef bbca 	b.w	8002298 <_getpid>

08012b04 <__swhatbuf_r>:
 8012b04:	b570      	push	{r4, r5, r6, lr}
 8012b06:	460c      	mov	r4, r1
 8012b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b0c:	2900      	cmp	r1, #0
 8012b0e:	b096      	sub	sp, #88	@ 0x58
 8012b10:	4615      	mov	r5, r2
 8012b12:	461e      	mov	r6, r3
 8012b14:	da0d      	bge.n	8012b32 <__swhatbuf_r+0x2e>
 8012b16:	89a3      	ldrh	r3, [r4, #12]
 8012b18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012b1c:	f04f 0100 	mov.w	r1, #0
 8012b20:	bf14      	ite	ne
 8012b22:	2340      	movne	r3, #64	@ 0x40
 8012b24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012b28:	2000      	movs	r0, #0
 8012b2a:	6031      	str	r1, [r6, #0]
 8012b2c:	602b      	str	r3, [r5, #0]
 8012b2e:	b016      	add	sp, #88	@ 0x58
 8012b30:	bd70      	pop	{r4, r5, r6, pc}
 8012b32:	466a      	mov	r2, sp
 8012b34:	f000 f848 	bl	8012bc8 <_fstat_r>
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	dbec      	blt.n	8012b16 <__swhatbuf_r+0x12>
 8012b3c:	9901      	ldr	r1, [sp, #4]
 8012b3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012b42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012b46:	4259      	negs	r1, r3
 8012b48:	4159      	adcs	r1, r3
 8012b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012b4e:	e7eb      	b.n	8012b28 <__swhatbuf_r+0x24>

08012b50 <__smakebuf_r>:
 8012b50:	898b      	ldrh	r3, [r1, #12]
 8012b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b54:	079d      	lsls	r5, r3, #30
 8012b56:	4606      	mov	r6, r0
 8012b58:	460c      	mov	r4, r1
 8012b5a:	d507      	bpl.n	8012b6c <__smakebuf_r+0x1c>
 8012b5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012b60:	6023      	str	r3, [r4, #0]
 8012b62:	6123      	str	r3, [r4, #16]
 8012b64:	2301      	movs	r3, #1
 8012b66:	6163      	str	r3, [r4, #20]
 8012b68:	b003      	add	sp, #12
 8012b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b6c:	ab01      	add	r3, sp, #4
 8012b6e:	466a      	mov	r2, sp
 8012b70:	f7ff ffc8 	bl	8012b04 <__swhatbuf_r>
 8012b74:	9f00      	ldr	r7, [sp, #0]
 8012b76:	4605      	mov	r5, r0
 8012b78:	4639      	mov	r1, r7
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f7fe fed4 	bl	8011928 <_malloc_r>
 8012b80:	b948      	cbnz	r0, 8012b96 <__smakebuf_r+0x46>
 8012b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b86:	059a      	lsls	r2, r3, #22
 8012b88:	d4ee      	bmi.n	8012b68 <__smakebuf_r+0x18>
 8012b8a:	f023 0303 	bic.w	r3, r3, #3
 8012b8e:	f043 0302 	orr.w	r3, r3, #2
 8012b92:	81a3      	strh	r3, [r4, #12]
 8012b94:	e7e2      	b.n	8012b5c <__smakebuf_r+0xc>
 8012b96:	89a3      	ldrh	r3, [r4, #12]
 8012b98:	6020      	str	r0, [r4, #0]
 8012b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b9e:	81a3      	strh	r3, [r4, #12]
 8012ba0:	9b01      	ldr	r3, [sp, #4]
 8012ba2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012ba6:	b15b      	cbz	r3, 8012bc0 <__smakebuf_r+0x70>
 8012ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bac:	4630      	mov	r0, r6
 8012bae:	f000 f81d 	bl	8012bec <_isatty_r>
 8012bb2:	b128      	cbz	r0, 8012bc0 <__smakebuf_r+0x70>
 8012bb4:	89a3      	ldrh	r3, [r4, #12]
 8012bb6:	f023 0303 	bic.w	r3, r3, #3
 8012bba:	f043 0301 	orr.w	r3, r3, #1
 8012bbe:	81a3      	strh	r3, [r4, #12]
 8012bc0:	89a3      	ldrh	r3, [r4, #12]
 8012bc2:	431d      	orrs	r5, r3
 8012bc4:	81a5      	strh	r5, [r4, #12]
 8012bc6:	e7cf      	b.n	8012b68 <__smakebuf_r+0x18>

08012bc8 <_fstat_r>:
 8012bc8:	b538      	push	{r3, r4, r5, lr}
 8012bca:	4d07      	ldr	r5, [pc, #28]	@ (8012be8 <_fstat_r+0x20>)
 8012bcc:	2300      	movs	r3, #0
 8012bce:	4604      	mov	r4, r0
 8012bd0:	4608      	mov	r0, r1
 8012bd2:	4611      	mov	r1, r2
 8012bd4:	602b      	str	r3, [r5, #0]
 8012bd6:	f7ef fbc7 	bl	8002368 <_fstat>
 8012bda:	1c43      	adds	r3, r0, #1
 8012bdc:	d102      	bne.n	8012be4 <_fstat_r+0x1c>
 8012bde:	682b      	ldr	r3, [r5, #0]
 8012be0:	b103      	cbz	r3, 8012be4 <_fstat_r+0x1c>
 8012be2:	6023      	str	r3, [r4, #0]
 8012be4:	bd38      	pop	{r3, r4, r5, pc}
 8012be6:	bf00      	nop
 8012be8:	2001041c 	.word	0x2001041c

08012bec <_isatty_r>:
 8012bec:	b538      	push	{r3, r4, r5, lr}
 8012bee:	4d06      	ldr	r5, [pc, #24]	@ (8012c08 <_isatty_r+0x1c>)
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	4608      	mov	r0, r1
 8012bf6:	602b      	str	r3, [r5, #0]
 8012bf8:	f7ef fbc6 	bl	8002388 <_isatty>
 8012bfc:	1c43      	adds	r3, r0, #1
 8012bfe:	d102      	bne.n	8012c06 <_isatty_r+0x1a>
 8012c00:	682b      	ldr	r3, [r5, #0]
 8012c02:	b103      	cbz	r3, 8012c06 <_isatty_r+0x1a>
 8012c04:	6023      	str	r3, [r4, #0]
 8012c06:	bd38      	pop	{r3, r4, r5, pc}
 8012c08:	2001041c 	.word	0x2001041c

08012c0c <_init>:
 8012c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c0e:	bf00      	nop
 8012c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c12:	bc08      	pop	{r3}
 8012c14:	469e      	mov	lr, r3
 8012c16:	4770      	bx	lr

08012c18 <_fini>:
 8012c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c1a:	bf00      	nop
 8012c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c1e:	bc08      	pop	{r3}
 8012c20:	469e      	mov	lr, r3
 8012c22:	4770      	bx	lr
