
ValveBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08012bb0  08012bb0  00013bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013300  08013300  00015350  2**0
                  CONTENTS
  4 .ARM          00000008  08013300  08013300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013308  08013308  00015350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013308  08013308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801330c  0801330c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  08013310  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000100d0  20000350  08013660  00015350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010420  08013660  00015420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030683  00000000  00000000  00015380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062aa  00000000  00000000  00045a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002730  00000000  00000000  0004bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e3e  00000000  00000000  0004e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028443  00000000  00000000  0005021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e538  00000000  00000000  00078661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd39d  00000000  00000000  000a6b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a3f36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b90c  00000000  00000000  001a3f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001af888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012b98 	.word	0x08012b98

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08012b98 	.word	0x08012b98

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <LTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int LTC2990_Init(LTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c, uint8_t address) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	4613      	mov	r3, r2
 8000f94:	71fb      	strb	r3, [r7, #7]
	int8_t ack;

	handle->hi2c = hi2c;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	601a      	str	r2, [r3, #0]

	//Initialize current to NAN
	handle->current = NAN;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4a20      	ldr	r2, [pc, #128]	@ (8001020 <LTC2990_Init+0x98>)
 8000fa0:	611a      	str	r2, [r3, #16]

	handle->i2c_address = address;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	711a      	strb	r2, [r3, #4]

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, CLEAR_ALL); // was V1DV2_V3DV4 //
 8000fa8:	22ff      	movs	r2, #255	@ 0xff
 8000faa:	211f      	movs	r1, #31
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f000 f971 	bl	8001294 <LTC2990_Set_Mode>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8000fb6:	2064      	movs	r0, #100	@ 0x64
 8000fb8:	f001 fa62 	bl	8002480 <HAL_Delay>

	if(ack != 0) {
 8000fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <LTC2990_Init+0x46>
		CDC_Transmit_Print("Failed to set in Differential Voltage Mode \n");
 8000fc4:	4817      	ldr	r0, [pc, #92]	@ (8001024 <LTC2990_Init+0x9c>)
 8000fc6:	f000 fb3b 	bl	8001640 <CDC_Transmit_Print>
		while(1);
 8000fca:	bf00      	nop
 8000fcc:	e7fd      	b.n	8000fca <LTC2990_Init+0x42>
	}

	uint8_t reg_check;
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_check);
 8000fce:	f107 0316 	add.w	r3, r7, #22
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f000 fad8 	bl	800158c <LTC2990_Read_Register>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	75fb      	strb	r3, [r7, #23]
	while(reg_check != 0x1F) {
 8000fe0:	e010      	b.n	8001004 <LTC2990_Init+0x7c>
		CDC_Transmit_Print("NOT SETTING CONTROL REGISTER CORRECTLY\n");
 8000fe2:	4811      	ldr	r0, [pc, #68]	@ (8001028 <LTC2990_Init+0xa0>)
 8000fe4:	f000 fb2c 	bl	8001640 <CDC_Transmit_Print>
		CDC_Transmit_Print("GOT %X\n", reg_check);
 8000fe8:	7dbb      	ldrb	r3, [r7, #22]
 8000fea:	4619      	mov	r1, r3
 8000fec:	480f      	ldr	r0, [pc, #60]	@ (800102c <LTC2990_Init+0xa4>)
 8000fee:	f000 fb27 	bl	8001640 <CDC_Transmit_Print>
		ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_check);
 8000ff2:	f107 0316 	add.w	r3, r7, #22
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 fac6 	bl	800158c <LTC2990_Read_Register>
 8001000:	4603      	mov	r3, r0
 8001002:	75fb      	strb	r3, [r7, #23]
	while(reg_check != 0x1F) {
 8001004:	7dbb      	ldrb	r3, [r7, #22]
 8001006:	2b1f      	cmp	r3, #31
 8001008:	d1eb      	bne.n	8000fe2 <LTC2990_Init+0x5a>
	}

	CDC_Transmit_Print("LTC2990 configured for Differential Voltage Monitoring. \n");
 800100a:	4809      	ldr	r0, [pc, #36]	@ (8001030 <LTC2990_Init+0xa8>)
 800100c:	f000 fb18 	bl	8001640 <CDC_Transmit_Print>

	//Initial data reading
	LTC2990_Step(handle);
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 f811 	bl	8001038 <LTC2990_Step>

	return 0;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	7fc00000 	.word	0x7fc00000
 8001024:	08012bb0 	.word	0x08012bb0
 8001028:	08012be0 	.word	0x08012be0
 800102c:	08012c08 	.word	0x08012c08
 8001030:	08012c10 	.word	0x08012c10
 8001034:	00000000 	.word	0x00000000

08001038 <LTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void LTC2990_Step(LTC2990_Handle_t *handle) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	int8_t data_valid;


	// Read differential voltage V1-V2

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, 0x5F);
 8001040:	225f      	movs	r2, #95	@ 0x5f
 8001042:	211f      	movs	r1, #31
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f925 	bl	8001294 <LTC2990_Set_Mode>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]

	if(ack != 0) {
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <LTC2990_Step+0x28>
		CDC_Transmit_Print("Failed to switch mode \n");
 8001056:	487e      	ldr	r0, [pc, #504]	@ (8001250 <LTC2990_Step+0x218>)
 8001058:	f000 faf2 	bl	8001640 <CDC_Transmit_Print>
		while(1);
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <LTC2990_Step+0x24>
	}

	HAL_Delay(50);
 8001060:	2032      	movs	r0, #50	@ 0x32
 8001062:	f001 fa0d 	bl	8002480 <HAL_Delay>

	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f958 	bl	800131c <LTC2990_Trigger_Conversion>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
	if(ack != 0) {
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <LTC2990_Step+0x48>
		CDC_Transmit_Print("Failed to trigger conversion.");
 8001078:	4876      	ldr	r0, [pc, #472]	@ (8001254 <LTC2990_Step+0x21c>)
 800107a:	f000 fae1 	bl	8001640 <CDC_Transmit_Print>
		return;
 800107e:	e0e0      	b.n	8001242 <LTC2990_Step+0x20a>
	}

	// Allow time for conversion
	HAL_Delay(100);
 8001080:	2064      	movs	r0, #100	@ 0x64
 8001082:	f001 f9fd 	bl	8002480 <HAL_Delay>


	ack = LTC2990_ADC_Read_New_Data(handle, V1_MSB_REG, &adc_code, &data_valid);
 8001086:	f107 030b 	add.w	r3, r7, #11
 800108a:	f107 020c 	add.w	r2, r7, #12
 800108e:	2106      	movs	r1, #6
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f951 	bl	8001338 <LTC2990_ADC_Read_New_Data>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <LTC2990_Step+0x72>
 80010a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d019      	beq.n	80010de <LTC2990_Step+0xa6>
		CDC_Transmit_Print("Error reading Register %x \n", V1_MSB_REG);
 80010aa:	2106      	movs	r1, #6
 80010ac:	486a      	ldr	r0, [pc, #424]	@ (8001258 <LTC2990_Step+0x220>)
 80010ae:	f000 fac7 	bl	8001640 <CDC_Transmit_Print>
		HAL_Delay(50);
 80010b2:	2032      	movs	r0, #50	@ 0x32
 80010b4:	f001 f9e4 	bl	8002480 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 80010b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010bc:	4619      	mov	r1, r3
 80010be:	4867      	ldr	r0, [pc, #412]	@ (800125c <LTC2990_Step+0x224>)
 80010c0:	f000 fabe 	bl	8001640 <CDC_Transmit_Print>
		HAL_Delay(50);
 80010c4:	2032      	movs	r0, #50	@ 0x32
 80010c6:	f001 f9db 	bl	8002480 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 80010ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4863      	ldr	r0, [pc, #396]	@ (8001260 <LTC2990_Step+0x228>)
 80010d2:	f000 fab5 	bl	8001640 <CDC_Transmit_Print>
		handle->voltages[0] = NAN;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a62      	ldr	r2, [pc, #392]	@ (8001264 <LTC2990_Step+0x22c>)
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	e017      	b.n	800110e <LTC2990_Step+0xd6>
	} else {
		handle->voltages[0] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code) * (28.0/10.0);
 80010de:	89bb      	ldrh	r3, [r7, #12]
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fa12 	bl	800150c <LTC2990_Code_To_Single_Ended_Voltage>
 80010e8:	ee10 3a10 	vmov	r3, s0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa53 	bl	8000598 <__aeabi_f2d>
 80010f2:	a355      	add	r3, pc, #340	@ (adr r3, 8001248 <LTC2990_Step+0x210>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff faa6 	bl	8000648 <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fd78 	bl	8000bf8 <__aeabi_d2f>
 8001108:	4602      	mov	r2, r0
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	609a      	str	r2, [r3, #8]
	}

	ack = LTC2990_ADC_Read_New_Data(handle, V2_MSB_REG, &adc_code, &data_valid);
 800110e:	f107 030b 	add.w	r3, r7, #11
 8001112:	f107 020c 	add.w	r2, r7, #12
 8001116:	2108      	movs	r1, #8
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f90d 	bl	8001338 <LTC2990_ADC_Read_New_Data>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d103      	bne.n	8001132 <LTC2990_Step+0xfa>
 800112a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d019      	beq.n	8001166 <LTC2990_Step+0x12e>
		CDC_Transmit_Print("Error reading Register %x \n", V2_MSB_REG);
 8001132:	2108      	movs	r1, #8
 8001134:	4848      	ldr	r0, [pc, #288]	@ (8001258 <LTC2990_Step+0x220>)
 8001136:	f000 fa83 	bl	8001640 <CDC_Transmit_Print>
		HAL_Delay(50);
 800113a:	2032      	movs	r0, #50	@ 0x32
 800113c:	f001 f9a0 	bl	8002480 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001144:	4619      	mov	r1, r3
 8001146:	4845      	ldr	r0, [pc, #276]	@ (800125c <LTC2990_Step+0x224>)
 8001148:	f000 fa7a 	bl	8001640 <CDC_Transmit_Print>
		HAL_Delay(50);
 800114c:	2032      	movs	r0, #50	@ 0x32
 800114e:	f001 f997 	bl	8002480 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8001152:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001156:	4619      	mov	r1, r3
 8001158:	4841      	ldr	r0, [pc, #260]	@ (8001260 <LTC2990_Step+0x228>)
 800115a:	f000 fa71 	bl	8001640 <CDC_Transmit_Print>
		handle->voltages[0] = NAN;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a40      	ldr	r2, [pc, #256]	@ (8001264 <LTC2990_Step+0x22c>)
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	e017      	b.n	8001196 <LTC2990_Step+0x15e>
	} else {
		handle->voltages[1] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code) * (40.0/10.0);
 8001166:	89bb      	ldrh	r3, [r7, #12]
 8001168:	4619      	mov	r1, r3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f9ce 	bl	800150c <LTC2990_Code_To_Single_Ended_Voltage>
 8001170:	ee10 3a10 	vmov	r3, s0
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fa0f 	bl	8000598 <__aeabi_f2d>
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b3a      	ldr	r3, [pc, #232]	@ (8001268 <LTC2990_Step+0x230>)
 8001180:	f7ff fa62 	bl	8000648 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fd34 	bl	8000bf8 <__aeabi_d2f>
 8001190:	4602      	mov	r2, r0
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60da      	str	r2, [r3, #12]
	}

	ack = LTC2990_Set_Mode(handle, V1DV2_V3DV4, CLEAR_ALL); // was V1DV2_V3DV4 //
 8001196:	22ff      	movs	r2, #255	@ 0xff
 8001198:	215e      	movs	r1, #94	@ 0x5e
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f87a 	bl	8001294 <LTC2990_Set_Mode>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]

	if(ack != 0) {
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d004      	beq.n	80011b6 <LTC2990_Step+0x17e>
		CDC_Transmit_Print("Failed to switch mode \n");
 80011ac:	4828      	ldr	r0, [pc, #160]	@ (8001250 <LTC2990_Step+0x218>)
 80011ae:	f000 fa47 	bl	8001640 <CDC_Transmit_Print>
		while(1);
 80011b2:	bf00      	nop
 80011b4:	e7fd      	b.n	80011b2 <LTC2990_Step+0x17a>
	}

	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f8b0 	bl	800131c <LTC2990_Trigger_Conversion>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]
	if(ack != 0) {
 80011c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <LTC2990_Step+0x198>
		CDC_Transmit_Print("Failed to trigger conversion.");
 80011c8:	4822      	ldr	r0, [pc, #136]	@ (8001254 <LTC2990_Step+0x21c>)
 80011ca:	f000 fa39 	bl	8001640 <CDC_Transmit_Print>
		return;
 80011ce:	e038      	b.n	8001242 <LTC2990_Step+0x20a>
	}

	// Allow time for conversion
	HAL_Delay(100);
 80011d0:	2064      	movs	r0, #100	@ 0x64
 80011d2:	f001 f955 	bl	8002480 <HAL_Delay>

	ack = LTC2990_ADC_Read_New_Data(handle, V3DV4_MSB_REG, &adc_code, &data_valid);
 80011d6:	f107 030b 	add.w	r3, r7, #11
 80011da:	f107 020c 	add.w	r2, r7, #12
 80011de:	210a      	movs	r1, #10
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f8a9 	bl	8001338 <LTC2990_ADC_Read_New_Data>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d103      	bne.n	80011fa <LTC2990_Step+0x1c2>
 80011f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d019      	beq.n	800122e <LTC2990_Step+0x1f6>
		CDC_Transmit_Print("Error reading Register %x \n", V3DV4_MSB_REG);
 80011fa:	210a      	movs	r1, #10
 80011fc:	4816      	ldr	r0, [pc, #88]	@ (8001258 <LTC2990_Step+0x220>)
 80011fe:	f000 fa1f 	bl	8001640 <CDC_Transmit_Print>
		HAL_Delay(50);
 8001202:	2032      	movs	r0, #50	@ 0x32
 8001204:	f001 f93c 	bl	8002480 <HAL_Delay>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120c:	4619      	mov	r1, r3
 800120e:	4813      	ldr	r0, [pc, #76]	@ (800125c <LTC2990_Step+0x224>)
 8001210:	f000 fa16 	bl	8001640 <CDC_Transmit_Print>
		HAL_Delay(50);
 8001214:	2032      	movs	r0, #50	@ 0x32
 8001216:	f001 f933 	bl	8002480 <HAL_Delay>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 800121a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800121e:	4619      	mov	r1, r3
 8001220:	480f      	ldr	r0, [pc, #60]	@ (8001260 <LTC2990_Step+0x228>)
 8001222:	f000 fa0d 	bl	8001640 <CDC_Transmit_Print>
		handle->current = NAN;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <LTC2990_Step+0x22c>)
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	e009      	b.n	8001242 <LTC2990_Step+0x20a>
	} else {
		handle->current = LTC2990_Code_To_Current(handle, adc_code);
 800122e:	89bb      	ldrh	r3, [r7, #12]
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f904 	bl	8001440 <LTC2990_Code_To_Current>
 8001238:	eef0 7a40 	vmov.f32	s15, s0
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a04 	vstr	s15, [r3, #16]
	}

}
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	66666666 	.word	0x66666666
 800124c:	40066666 	.word	0x40066666
 8001250:	08012c4c 	.word	0x08012c4c
 8001254:	08012c64 	.word	0x08012c64
 8001258:	08012c84 	.word	0x08012c84
 800125c:	08012ca0 	.word	0x08012ca0
 8001260:	08012cb8 	.word	0x08012cb8
 8001264:	7fc00000 	.word	0x7fc00000
 8001268:	40100000 	.word	0x40100000

0800126c <LTC2990_Get_Single_Ended_Voltage>:
float LTC2990_Get_Current(LTC2990_Handle_t* handle) {
	return handle->current;
}


void LTC2990_Get_Single_Ended_Voltage(LTC2990_Handle_t* handle, float* volts) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	volts[0] = handle->voltages[0];
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]
	volts[1] = handle->voltages[1];
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3304      	adds	r3, #4
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68d2      	ldr	r2, [r2, #12]
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LTC2990_Set_Mode>:

int8_t LTC2990_Set_Mode(LTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
 80012a0:	4613      	mov	r3, r2
 80012a2:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 80012a4:	f107 030e 	add.w	r3, r7, #14
 80012a8:	461a      	mov	r2, r3
 80012aa:	2101      	movs	r1, #1
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f96d 	bl	800158c <LTC2990_Read_Register>
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <LTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 80012be:	4815      	ldr	r0, [pc, #84]	@ (8001314 <LTC2990_Set_Mode+0x80>)
 80012c0:	f000 f9be 	bl	8001640 <CDC_Transmit_Print>
		return ack;
 80012c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c8:	e01f      	b.n	800130a <LTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 80012ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4013      	ands	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 80012de:	7bba      	ldrb	r2, [r7, #14]
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = LTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	461a      	mov	r2, r3
 80012ec:	2101      	movs	r1, #1
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f978 	bl	80015e4 <LTC2990_Write_Register>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 80012f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <LTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 8001300:	4805      	ldr	r0, [pc, #20]	@ (8001318 <LTC2990_Set_Mode+0x84>)
 8001302:	f000 f99d 	bl	8001640 <CDC_Transmit_Print>
	}
	return ack;
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	08012cd8 	.word	0x08012cd8
 8001318:	08012d00 	.word	0x08012d00

0800131c <LTC2990_Trigger_Conversion>:

int8_t LTC2990_Trigger_Conversion(LTC2990_Handle_t *handle) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	return LTC2990_Write_Register(handle, TRIGGER_REG, 0x01);
 8001324:	2201      	movs	r2, #1
 8001326:	2102      	movs	r1, #2
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f95b 	bl	80015e4 <LTC2990_Write_Register>
 800132e:	4603      	mov	r3, r0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <LTC2990_ADC_Read_New_Data>:


uint8_t LTC2990_ADC_Read_New_Data(LTC2990_Handle_t *handle, uint8_t msb_register_address, uint16_t* adc_code, int8_t* data_valid) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	460b      	mov	r3, r1
 8001346:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 8001348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134c:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	085b      	lsrs	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	3b01      	subs	r3, #1
 8001356:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 8001358:	e01a      	b.n	8001390 <LTC2990_ADC_Read_New_Data+0x58>
		ack = LTC2990_Read_Register(handle, STATUS_REG, &status);
 800135a:	f107 0319 	add.w	r3, r7, #25
 800135e:	461a      	mov	r2, r3
 8001360:	2100      	movs	r1, #0
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f912 	bl	800158c <LTC2990_Read_Register>
 8001368:	4603      	mov	r3, r0
 800136a:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 800136c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <LTC2990_ADC_Read_New_Data+0x40>
			return ack;
 8001374:	7f3b      	ldrb	r3, [r7, #28]
 8001376:	e05a      	b.n	800142e <LTC2990_ADC_Read_New_Data+0xf6>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 8001378:	7e7b      	ldrb	r3, [r7, #25]
 800137a:	461a      	mov	r2, r3
 800137c:	7f7b      	ldrb	r3, [r7, #29]
 800137e:	fa42 f303 	asr.w	r3, r2, r3
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <LTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
 800138a:	2001      	movs	r0, #1
 800138c:	f001 f878 	bl	8002480 <HAL_Delay>
	while (--timeout) {
 8001390:	8bfb      	ldrh	r3, [r7, #30]
 8001392:	3b01      	subs	r3, #1
 8001394:	83fb      	strh	r3, [r7, #30]
 8001396:	8bfb      	ldrh	r3, [r7, #30]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1de      	bne.n	800135a <LTC2990_ADC_Read_New_Data+0x22>
 800139c:	e000      	b.n	80013a0 <LTC2990_ADC_Read_New_Data+0x68>
			break;
 800139e:	bf00      	nop
	}


	if (timeout == 0) {
 80013a0:	8bfb      	ldrh	r3, [r7, #30]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <LTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 80013a6:	4824      	ldr	r0, [pc, #144]	@ (8001438 <LTC2990_ADC_Read_New_Data+0x100>)
 80013a8:	f000 f94a 	bl	8001640 <CDC_Transmit_Print>
		return 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e03e      	b.n	800142e <LTC2990_ADC_Read_New_Data+0xf6>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = LTC2990_Read_Register(handle, msb_register_address, &msb);
 80013b0:	f107 0218 	add.w	r2, r7, #24
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	4619      	mov	r1, r3
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 f8e7 	bl	800158c <LTC2990_Read_Register>
 80013be:	4603      	mov	r3, r0
 80013c0:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 80013c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <LTC2990_ADC_Read_New_Data+0x96>
		return ack;
 80013ca:	7f3b      	ldrb	r3, [r7, #28]
 80013cc:	e02f      	b.n	800142e <LTC2990_ADC_Read_New_Data+0xf6>
	}

	ack = LTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 80013ce:	7afb      	ldrb	r3, [r7, #11]
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f107 0217 	add.w	r2, r7, #23
 80013d8:	4619      	mov	r1, r3
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f8d6 	bl	800158c <LTC2990_Read_Register>
 80013e0:	4603      	mov	r3, r0
 80013e2:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 80013e4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <LTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 80013ec:	7f3b      	ldrb	r3, [r7, #28]
 80013ee:	e01e      	b.n	800142e <LTC2990_ADC_Read_New_Data+0xf6>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 80013f0:	7e3b      	ldrb	r3, [r7, #24]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 8001400:	8b7b      	ldrh	r3, [r7, #26]
 8001402:	0bdb      	lsrs	r3, r3, #15
 8001404:	b29b      	uxth	r3, r3
 8001406:	b25b      	sxtb	r3, r3
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	b25a      	sxtb	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x7FFF;
 8001412:	8b7b      	ldrh	r3, [r7, #26]
 8001414:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	801a      	strh	r2, [r3, #0]


	return (*data_valid == 1) ? 0 : 1;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f993 3000 	ldrsb.w	r3, [r3]
 8001424:	2b01      	cmp	r3, #1
 8001426:	bf14      	ite	ne
 8001428:	2301      	movne	r3, #1
 800142a:	2300      	moveq	r3, #0
 800142c:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
 800142e:	4618      	mov	r0, r3
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	08012d28 	.word	0x08012d28
 800143c:	00000000 	.word	0x00000000

08001440 <LTC2990_Code_To_Current>:

float LTC2990_Code_To_Current(LTC2990_Handle_t *handle, uint16_t adc_code) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 800144c:	2301      	movs	r3, #1
 800144e:	81fb      	strh	r3, [r7, #14]


	if(adc_code & 0x4000) { //If the code is negative //was 0x4000
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00d      	beq.n	8001476 <LTC2990_Code_To_Current+0x36>
		CDC_Transmit_Print("Negative??? \r\n");
 800145a:	482b      	ldr	r0, [pc, #172]	@ (8001508 <LTC2990_Code_To_Current+0xc8>)
 800145c:	f000 f8f0 	bl	8001640 <CDC_Transmit_Print>
		adc_code = (adc_code ^ 0x3FFF) + 1;// Two's compliment //was 0x7FFF
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	f483 537f 	eor.w	r3, r3, #16320	@ 0x3fc0
 8001466:	f083 033f 	eor.w	r3, r3, #63	@ 0x3f
 800146a:	b29b      	uxth	r3, r3
 800146c:	3301      	adds	r3, #1
 800146e:	807b      	strh	r3, [r7, #2]
		sign = -1;
 8001470:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001474:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800147c:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * CSINGLE_ENDED_LSB;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001488:	ee17 0a90 	vmov	r0, s15
 800148c:	f7ff f884 	bl	8000598 <__aeabi_f2d>
 8001490:	a319      	add	r3, pc, #100	@ (adr r3, 80014f8 <LTC2990_Code_To_Current+0xb8>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff f8d7 	bl	8000648 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff fba9 	bl	8000bf8 <__aeabi_d2f>
 80014a6:	4603      	mov	r3, r0
 80014a8:	60bb      	str	r3, [r7, #8]
	voltage /= RSENSE;
 80014aa:	68b8      	ldr	r0, [r7, #8]
 80014ac:	f7ff f874 	bl	8000598 <__aeabi_f2d>
 80014b0:	a313      	add	r3, pc, #76	@ (adr r3, 8001500 <LTC2990_Code_To_Current+0xc0>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f9f1 	bl	800089c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fb99 	bl	8000bf8 <__aeabi_d2f>
 80014c6:	4603      	mov	r3, r0
 80014c8:	60bb      	str	r3, [r7, #8]
	voltage *= sign;
 80014ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	ee07 3a90 	vmov	s15, r3
}
 80014e8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	f3af 8000 	nop.w
 80014f8:	ac083127 	.word	0xac083127
 80014fc:	3ef45a1c 	.word	0x3ef45a1c
 8001500:	47ae147b 	.word	0x47ae147b
 8001504:	3f947ae1 	.word	0x3f947ae1
 8001508:	08012d3c 	.word	0x08012d3c

0800150c <LTC2990_Code_To_Single_Ended_Voltage>:
	voltage *= sign;

	return voltage;
}

float LTC2990_Code_To_Single_Ended_Voltage(LTC2990_Handle_t *handle, uint16_t adc_code) {
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 8001518:	2301      	movs	r3, #1
 800151a:	81fb      	strh	r3, [r7, #14]


	if(adc_code & 0x4000) { //If the code is negative //was 0x4000
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00a      	beq.n	800153c <LTC2990_Code_To_Single_Ended_Voltage+0x30>
		adc_code = (adc_code ^ 0x3FFF) + 1;// Two's compliment //was 0x7FFF
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	f483 537f 	eor.w	r3, r3, #16320	@ 0x3fc0
 800152c:	f083 033f 	eor.w	r3, r3, #63	@ 0x3f
 8001530:	b29b      	uxth	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	807b      	strh	r3, [r7, #2]
		sign = -1;
 8001536:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800153a:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001542:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * VSINGLE_ENDED_LSB;
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001588 <LTC2990_Code_To_Single_Ended_Voltage+0x7c>
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	edc7 7a02 	vstr	s15, [r7, #8]
	voltage *= sign;
 800155a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001566:	ed97 7a02 	vldr	s14, [r7, #8]
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156e:	edc7 7a02 	vstr	s15, [r7, #8]


	return voltage;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	ee07 3a90 	vmov	s15, r3
}
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	39a00000 	.word	0x39a00000

0800158c <LTC2990_Read_Register>:


int8_t LTC2990_Read_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af04      	add	r7, sp, #16
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	460b      	mov	r3, r1
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	791b      	ldrb	r3, [r3, #4]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	b299      	uxth	r1, r3
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	2301      	movs	r3, #1
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2301      	movs	r3, #1
 80015ba:	f003 f903 	bl	80047c4 <HAL_I2C_Mem_Read>
 80015be:	4603      	mov	r3, r0
 80015c0:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK) {
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <LTC2990_Read_Register+0x40>
		return 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e005      	b.n	80015d8 <LTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <LTC2990_Read_Register+0x54>)
 80015d2:	f000 f835 	bl	8001640 <CDC_Transmit_Print>
	return 1;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	08012d4c 	.word	0x08012d4c

080015e4 <LTC2990_Write_Register>:

int8_t LTC2990_Write_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
 80015f0:	4613      	mov	r3, r2
 80015f2:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	791b      	ldrb	r3, [r3, #4]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	b299      	uxth	r1, r3
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	b29a      	uxth	r2, r3
 8001604:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	2301      	movs	r3, #1
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	1cbb      	adds	r3, r7, #2
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2301      	movs	r3, #1
 8001614:	f002 ffc2 	bl	800459c <HAL_I2C_Mem_Write>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK) {
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <LTC2990_Write_Register+0x42>
		return 0;
 8001622:	2300      	movs	r3, #0
 8001624:	e005      	b.n	8001632 <LTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	4619      	mov	r1, r3
 800162a:	4804      	ldr	r0, [pc, #16]	@ (800163c <LTC2990_Write_Register+0x58>)
 800162c:	f000 f808 	bl	8001640 <CDC_Transmit_Print>

	return 1;
 8001630:	2301      	movs	r3, #1
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	08012d74 	.word	0x08012d74

08001640 <CDC_Transmit_Print>:
/* USER CODE BEGIN 0 */

#define PRINT_BUFFER_SIZE     256

void CDC_Transmit_Print(const char *format, ...)
{
 8001640:	b40f      	push	{r0, r1, r2, r3}
 8001642:	b580      	push	{r7, lr}
 8001644:	b0c2      	sub	sp, #264	@ 0x108
 8001646:	af00      	add	r7, sp, #0
    char buf[PRINT_BUFFER_SIZE];
    va_list  args;
    va_start(args, format);
 8001648:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800164c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001654:	601a      	str	r2, [r3, #0]
    int len = vsnprintf(buf, sizeof(buf), format, args);
 8001656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800165a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800165e:	1d38      	adds	r0, r7, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001666:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800166a:	f00f f925 	bl	80108b8 <vsniprintf>
 800166e:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(args);
    if (len <= 0) {
 8001672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001676:	2b00      	cmp	r3, #0
 8001678:	dd10      	ble.n	800169c <CDC_Transmit_Print+0x5c>
        return;
    }
    if (len > (PRINT_BUFFER_SIZE - 1)) {
 800167a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800167e:	2bff      	cmp	r3, #255	@ 0xff
 8001680:	dd02      	ble.n	8001688 <CDC_Transmit_Print+0x48>
        len = PRINT_BUFFER_SIZE - 1;
 8001682:	23ff      	movs	r3, #255	@ 0xff
 8001684:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }
    CDC_Transmit_FS((uint8_t*)buf, (uint16_t)len);
 8001688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800168c:	b29b      	uxth	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f00d ff7d 	bl	800f594 <CDC_Transmit_FS>
 800169a:	e000      	b.n	800169e <CDC_Transmit_Print+0x5e>
        return;
 800169c:	bf00      	nop
}
 800169e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80016a2:	46bd      	mov	sp, r7
 80016a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016a8:	b004      	add	sp, #16
 80016aa:	4770      	bx	lr

080016ac <HAL_GPIO_EXTI_Callback>:
//uint32_t adc_data;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == EMER_VALVE_IN_Pin) {
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d10d      	bne.n	80016d8 <HAL_GPIO_EXTI_Callback+0x2c>
		GPIO_PinState in = HAL_GPIO_ReadPin(EMER_VALVE_IN_GPIO_Port, EMER_VALVE_IN_Pin);
 80016bc:	2101      	movs	r1, #1
 80016be:	4812      	ldr	r0, [pc, #72]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016c0:	f002 fe6e 	bl	80043a0 <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(Emergency_Valve_OUT_GPIO_Port, Emergency_Valve_OUT_Pin, in);
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	461a      	mov	r2, r3
 80016cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016d2:	f002 fe7d 	bl	80043d0 <HAL_GPIO_WritePin>
 80016d6:	e014      	b.n	8001702 <HAL_GPIO_EXTI_Callback+0x56>
	} else if (GPIO_Pin == FC_FAULT_Pin) {
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d106      	bne.n	80016ec <HAL_GPIO_EXTI_Callback+0x40>
		HAL_GPIO_WritePin(Emergency_Valve_OUT_GPIO_Port, Emergency_Valve_OUT_Pin, GPIO_PIN_SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e4:	4808      	ldr	r0, [pc, #32]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016e6:	f002 fe73 	bl	80043d0 <HAL_GPIO_WritePin>
 80016ea:	e00a      	b.n	8001702 <HAL_GPIO_EXTI_Callback+0x56>
	} else if (GPIO_Pin == SOLENOID_IN_Pin) {
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d106      	bne.n	8001700 <HAL_GPIO_EXTI_Callback+0x54>
		HAL_GPIO_WritePin(Solenoid_OUT_GPIO_Port, Solenoid_OUT_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016fa:	f002 fe69 	bl	80043d0 <HAL_GPIO_WritePin>
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_EXTI_Callback+0x56>
	} else {
		return;
 8001700:	bf00      	nop
	}
}
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	48000400 	.word	0x48000400

0800170c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001710:	f000 fe7f 	bl	8002412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001714:	f000 f84c 	bl	80017b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001718:	f000 f9d0 	bl	8001abc <MX_GPIO_Init>
  MX_ADC3_Init();
 800171c:	f000 f88a 	bl	8001834 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8001720:	f000 f8fa 	bl	8001918 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8001724:	f000 f940 	bl	80019a8 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001728:	f000 f97e 	bl	8001a28 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_FDCAN_Start(&hfdcan2);
 800172c:	4814      	ldr	r0, [pc, #80]	@ (8001780 <main+0x74>)
 800172e:	f002 fb6b 	bl	8003e08 <HAL_FDCAN_Start>

  /* Init scheduler */
  osKernelInitialize();
 8001732:	f00a fed1 	bl	800c4d8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorQueue */
  sensorQueueHandle = osMessageQueueNew (16, sizeof(valveBoardPayload_t), &sensorQueue_attributes);
 8001736:	4a13      	ldr	r2, [pc, #76]	@ (8001784 <main+0x78>)
 8001738:	210c      	movs	r1, #12
 800173a:	2010      	movs	r0, #16
 800173c:	f00a ffc4 	bl	800c6c8 <osMessageQueueNew>
 8001740:	4603      	mov	r3, r0
 8001742:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <main+0x7c>)
 8001744:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED */
  blinkLEDHandle = osThreadNew(startBlinkLED, NULL, &blinkLED_attributes);
 8001746:	4a11      	ldr	r2, [pc, #68]	@ (800178c <main+0x80>)
 8001748:	2100      	movs	r1, #0
 800174a:	4811      	ldr	r0, [pc, #68]	@ (8001790 <main+0x84>)
 800174c:	f00a ff0e 	bl	800c56c <osThreadNew>
 8001750:	4603      	mov	r3, r0
 8001752:	4a10      	ldr	r2, [pc, #64]	@ (8001794 <main+0x88>)
 8001754:	6013      	str	r3, [r2, #0]

  /* creation of readInstrumenta */
  readInstrumentaHandle = osThreadNew(startReadInstrumentation, NULL, &readInstrumenta_attributes);
 8001756:	4a10      	ldr	r2, [pc, #64]	@ (8001798 <main+0x8c>)
 8001758:	2100      	movs	r1, #0
 800175a:	4810      	ldr	r0, [pc, #64]	@ (800179c <main+0x90>)
 800175c:	f00a ff06 	bl	800c56c <osThreadNew>
 8001760:	4603      	mov	r3, r0
 8001762:	4a0f      	ldr	r2, [pc, #60]	@ (80017a0 <main+0x94>)
 8001764:	6013      	str	r3, [r2, #0]

  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 8001766:	4a0f      	ldr	r2, [pc, #60]	@ (80017a4 <main+0x98>)
 8001768:	2100      	movs	r1, #0
 800176a:	480f      	ldr	r0, [pc, #60]	@ (80017a8 <main+0x9c>)
 800176c:	f00a fefe 	bl	800c56c <osThreadNew>
 8001770:	4603      	mov	r3, r0
 8001772:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <main+0xa0>)
 8001774:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001776:	f00a fed3 	bl	800c520 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800177a:	bf00      	nop
 800177c:	e7fd      	b.n	800177a <main+0x6e>
 800177e:	bf00      	nop
 8001780:	200003d8 	.word	0x200003d8
 8001784:	08012f24 	.word	0x08012f24
 8001788:	20000530 	.word	0x20000530
 800178c:	08012eb8 	.word	0x08012eb8
 8001790:	08001c35 	.word	0x08001c35
 8001794:	20000524 	.word	0x20000524
 8001798:	08012edc 	.word	0x08012edc
 800179c:	08001c59 	.word	0x08001c59
 80017a0:	20000528 	.word	0x20000528
 80017a4:	08012f00 	.word	0x08012f00
 80017a8:	08001d05 	.word	0x08001d05
 80017ac:	2000052c 	.word	0x2000052c

080017b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	@ 0x50
 80017b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b6:	f107 0318 	add.w	r3, r7, #24
 80017ba:	2238      	movs	r2, #56	@ 0x38
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f00f f888 	bl	80108d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017d6:	f005 f969 	bl	8006aac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80017da:	2322      	movs	r3, #34	@ 0x22
 80017dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e4:	2340      	movs	r3, #64	@ 0x40
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80017e8:	2301      	movs	r3, #1
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f0:	f107 0318 	add.w	r3, r7, #24
 80017f4:	4618      	mov	r0, r3
 80017f6:	f005 fa0d 	bl	8006c14 <HAL_RCC_OscConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001800:	f000 fac4 	bl	8001d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001804:	230f      	movs	r3, #15
 8001806:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001808:	2301      	movs	r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f005 fd0b 	bl	8007238 <HAL_RCC_ClockConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001828:	f000 fab0 	bl	8001d8c <Error_Handler>
  }
}
 800182c:	bf00      	nop
 800182e:	3750      	adds	r7, #80	@ 0x50
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2220      	movs	r2, #32
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f00f f847 	bl	80108d4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001846:	4b31      	ldr	r3, [pc, #196]	@ (800190c <MX_ADC3_Init+0xd8>)
 8001848:	4a31      	ldr	r2, [pc, #196]	@ (8001910 <MX_ADC3_Init+0xdc>)
 800184a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800184c:	4b2f      	ldr	r3, [pc, #188]	@ (800190c <MX_ADC3_Init+0xd8>)
 800184e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001852:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001854:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <MX_ADC3_Init+0xd8>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800185a:	4b2c      	ldr	r3, [pc, #176]	@ (800190c <MX_ADC3_Init+0xd8>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001860:	4b2a      	ldr	r3, [pc, #168]	@ (800190c <MX_ADC3_Init+0xd8>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001866:	4b29      	ldr	r3, [pc, #164]	@ (800190c <MX_ADC3_Init+0xd8>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <MX_ADC3_Init+0xd8>)
 800186e:	2204      	movs	r2, #4
 8001870:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001872:	4b26      	ldr	r3, [pc, #152]	@ (800190c <MX_ADC3_Init+0xd8>)
 8001874:	2200      	movs	r2, #0
 8001876:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001878:	4b24      	ldr	r3, [pc, #144]	@ (800190c <MX_ADC3_Init+0xd8>)
 800187a:	2200      	movs	r2, #0
 800187c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800187e:	4b23      	ldr	r3, [pc, #140]	@ (800190c <MX_ADC3_Init+0xd8>)
 8001880:	2201      	movs	r2, #1
 8001882:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_ADC3_Init+0xd8>)
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_ADC3_Init+0xd8>)
 800188e:	2200      	movs	r2, #0
 8001890:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_ADC3_Init+0xd8>)
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001898:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_ADC3_Init+0xd8>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_ADC3_Init+0xd8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80018a6:	4b19      	ldr	r3, [pc, #100]	@ (800190c <MX_ADC3_Init+0xd8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_ADC3_Init+0xd8>)
 80018b0:	220c      	movs	r2, #12
 80018b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <MX_ADC3_Init+0xd8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_ADC3_Init+0xd8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_ADC3_Init+0xd8>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018c6:	4811      	ldr	r0, [pc, #68]	@ (800190c <MX_ADC3_Init+0xd8>)
 80018c8:	f001 f828 	bl	800291c <HAL_ADC_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_ADC3_Init+0xa2>
  {
    Error_Handler();
 80018d2:	f000 fa5b 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80018d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_ADC3_Init+0xe0>)
 80018d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018da:	2306      	movs	r3, #6
 80018dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018e2:	237f      	movs	r3, #127	@ 0x7f
 80018e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018e6:	2304      	movs	r3, #4
 80018e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018ee:	463b      	mov	r3, r7
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	@ (800190c <MX_ADC3_Init+0xd8>)
 80018f4:	f001 fb8c 	bl	8003010 <HAL_ADC_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80018fe:	f000 fa45 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000036c 	.word	0x2000036c
 8001910:	50000400 	.word	0x50000400
 8001914:	14f00020 	.word	0x14f00020

08001918 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 800191e:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <MX_FDCAN2_Init+0x8c>)
 8001920:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001922:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 800192a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800192e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001936:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001938:	2200      	movs	r2, #0
 800193a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800193c:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 800193e:	2200      	movs	r2, #0
 8001940:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001944:	2200      	movs	r2, #0
 8001946:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8001948:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 800194a:	2201      	movs	r2, #1
 800194c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 800194e:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001950:	2210      	movs	r2, #16
 8001952:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001956:	223f      	movs	r2, #63	@ 0x3f
 8001958:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 800195c:	2210      	movs	r2, #16
 800195e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001962:	2201      	movs	r2, #1
 8001964:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001968:	2204      	movs	r2, #4
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 800196e:	220d      	movs	r2, #13
 8001970:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001974:	2202      	movs	r2, #2
 8001976:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 800197a:	2201      	movs	r2, #1
 800197c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001980:	2201      	movs	r2, #1
 8001982:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 8001986:	2200      	movs	r2, #0
 8001988:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_FDCAN2_Init+0x88>)
 800198c:	f002 f8e2 	bl	8003b54 <HAL_FDCAN_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8001996:	f000 f9f9 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200003d8 	.word	0x200003d8
 80019a4:	40006800 	.word	0x40006800

080019a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <MX_I2C2_Init+0x78>)
 80019b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a24 <MX_I2C2_Init+0x7c>)
 80019b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c4:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019ca:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019e2:	480e      	ldr	r0, [pc, #56]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019e4:	f002 fd3e 	bl	8004464 <HAL_I2C_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80019ee:	f000 f9cd 	bl	8001d8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019f2:	2100      	movs	r1, #0
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <MX_I2C2_Init+0x74>)
 80019f6:	f003 fac1 	bl	8004f7c <HAL_I2CEx_ConfigAnalogFilter>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a00:	f000 f9c4 	bl	8001d8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a04:	2100      	movs	r1, #0
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_I2C2_Init+0x74>)
 8001a08:	f003 fb03 	bl	8005012 <HAL_I2CEx_ConfigDigitalFilter>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a12:	f000 f9bb 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000043c 	.word	0x2000043c
 8001a20:	40005800 	.word	0x40005800
 8001a24:	00503d58 	.word	0x00503d58

08001a28 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a2c:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a2e:	4a21      	ldr	r2, [pc, #132]	@ (8001ab4 <MX_LPUART1_UART_Init+0x8c>)
 8001a30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a34:	4a20      	ldr	r2, [pc, #128]	@ (8001ab8 <MX_LPUART1_UART_Init+0x90>)
 8001a36:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a4c:	220c      	movs	r2, #12
 8001a4e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a68:	4811      	ldr	r0, [pc, #68]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a6a:	f006 fba9 	bl	80081c0 <HAL_UART_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001a74:	f000 f98a 	bl	8001d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a7c:	f007 f944 	bl	8008d08 <HAL_UARTEx_SetTxFifoThreshold>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001a86:	f000 f981 	bl	8001d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a8e:	f007 f979 	bl	8008d84 <HAL_UARTEx_SetRxFifoThreshold>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001a98:	f000 f978 	bl	8001d8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001a9c:	4804      	ldr	r0, [pc, #16]	@ (8001ab0 <MX_LPUART1_UART_Init+0x88>)
 8001a9e:	f007 f8fa 	bl	8008c96 <HAL_UARTEx_DisableFifoMode>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001aa8:	f000 f970 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000490 	.word	0x20000490
 8001ab4:	40008000 	.word	0x40008000
 8001ab8:	00033324 	.word	0x00033324

08001abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	@ 0x28
 8001ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	4b56      	ldr	r3, [pc, #344]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	4a55      	ldr	r2, [pc, #340]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ade:	4b53      	ldr	r3, [pc, #332]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aea:	4b50      	ldr	r3, [pc, #320]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a4f      	ldr	r2, [pc, #316]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001af0:	f043 0320 	orr.w	r3, r3, #32
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b4d      	ldr	r3, [pc, #308]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	4b4a      	ldr	r3, [pc, #296]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	4a49      	ldr	r2, [pc, #292]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0e:	4b47      	ldr	r3, [pc, #284]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b44      	ldr	r3, [pc, #272]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	4a43      	ldr	r2, [pc, #268]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b26:	4b41      	ldr	r3, [pc, #260]	@ (8001c2c <MX_GPIO_Init+0x170>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Solenoid_OUT_Pin|Emergency_Valve_OUT_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001b38:	483d      	ldr	r0, [pc, #244]	@ (8001c30 <MX_GPIO_Init+0x174>)
 8001b3a:	f002 fc49 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin, GPIO_PIN_SET);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b48:	f002 fc42 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EMER_VALVE_IN_Pin */
  GPIO_InitStruct.Pin = EMER_VALVE_IN_Pin;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b50:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_VALVE_IN_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4833      	ldr	r0, [pc, #204]	@ (8001c30 <MX_GPIO_Init+0x174>)
 8001b62:	f002 fa9b 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : SOLENOID_IN_Pin */
  GPIO_InitStruct.Pin = SOLENOID_IN_Pin;
 8001b66:	2302      	movs	r3, #2
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SOLENOID_IN_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	482d      	ldr	r0, [pc, #180]	@ (8001c30 <MX_GPIO_Init+0x174>)
 8001b7c:	f002 fa8e 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : FC_FAULT_Pin */
  GPIO_InitStruct.Pin = FC_FAULT_Pin;
 8001b80:	2304      	movs	r3, #4
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b84:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FC_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4826      	ldr	r0, [pc, #152]	@ (8001c30 <MX_GPIO_Init+0x174>)
 8001b96:	f002 fa81 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : Solenoid_OUT_Pin Emergency_Valve_OUT_Pin */
  GPIO_InitStruct.Pin = Solenoid_OUT_Pin|Emergency_Valve_OUT_Pin;
 8001b9a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	481f      	ldr	r0, [pc, #124]	@ (8001c30 <MX_GPIO_Init+0x174>)
 8001bb4:	f002 fa72 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_LED_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin;
 8001bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRONT_LED_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd4:	f002 fa62 	bl	800409c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2105      	movs	r1, #5
 8001bdc:	2006      	movs	r0, #6
 8001bde:	f001 ff91 	bl	8003b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001be2:	2006      	movs	r0, #6
 8001be4:	f001 ffa8 	bl	8003b38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2105      	movs	r1, #5
 8001bec:	2007      	movs	r0, #7
 8001bee:	f001 ff89 	bl	8003b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001bf2:	2007      	movs	r0, #7
 8001bf4:	f001 ffa0 	bl	8003b38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2105      	movs	r1, #5
 8001bfc:	2008      	movs	r0, #8
 8001bfe:	f001 ff81 	bl	8003b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c02:	2008      	movs	r0, #8
 8001c04:	f001 ff98 	bl	8003b38 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* Configure PB13 as analog for ADC3_IN5 */
  GPIO_InitStruct.Pin  = GPIO_PIN_13;
 8001c08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4804      	ldr	r0, [pc, #16]	@ (8001c30 <MX_GPIO_Init+0x174>)
 8001c1e:	f002 fa3d 	bl	800409c <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	@ 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000400 	.word	0x48000400

08001c34 <startBlinkLED>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startBlinkLED */
void startBlinkLED(void *argument)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8001c3c:	f00d fbec 	bl	800f418 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001c40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c48:	f002 fbda 	bl	8004400 <HAL_GPIO_TogglePin>
    osDelay(100);
 8001c4c:	2064      	movs	r0, #100	@ 0x64
 8001c4e:	f00a fd20 	bl	800c692 <osDelay>
	HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001c52:	bf00      	nop
 8001c54:	e7f4      	b.n	8001c40 <startBlinkLED+0xc>
	...

08001c58 <startReadInstrumentation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadInstrumentation */
void startReadInstrumentation(void *argument)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadInstrumentation */
	LTC2990_Init(&LTC2990_Handle, &hi2c2, LTC2990_I2C_ADDRESS);
 8001c60:	224c      	movs	r2, #76	@ 0x4c
 8001c62:	4921      	ldr	r1, [pc, #132]	@ (8001ce8 <startReadInstrumentation+0x90>)
 8001c64:	4821      	ldr	r0, [pc, #132]	@ (8001cec <startReadInstrumentation+0x94>)
 8001c66:	f7ff f98f 	bl	8000f88 <LTC2990_Init>
  for(;;)
  {
	float raw_voltages[2];
	valveBoardPayload_t payload;

	HAL_ADC_Start(&hadc3);
 8001c6a:	4821      	ldr	r0, [pc, #132]	@ (8001cf0 <startReadInstrumentation+0x98>)
 8001c6c:	f001 f804 	bl	8002c78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3,20);
 8001c70:	2114      	movs	r1, #20
 8001c72:	481f      	ldr	r0, [pc, #124]	@ (8001cf0 <startReadInstrumentation+0x98>)
 8001c74:	f001 f8ca 	bl	8002e0c <HAL_ADC_PollForConversion>
	payload.pressure = HAL_ADC_GetValue(&hadc3);
 8001c78:	481d      	ldr	r0, [pc, #116]	@ (8001cf0 <startReadInstrumentation+0x98>)
 8001c7a:	f001 f9bb 	bl	8002ff4 <HAL_ADC_GetValue>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	617b      	str	r3, [r7, #20]

	LTC2990_Step(&LTC2990_Handle);
 8001c82:	481a      	ldr	r0, [pc, #104]	@ (8001cec <startReadInstrumentation+0x94>)
 8001c84:	f7ff f9d8 	bl	8001038 <LTC2990_Step>

	LTC2990_Get_Single_Ended_Voltage(&LTC2990_Handle, raw_voltages);
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4817      	ldr	r0, [pc, #92]	@ (8001cec <startReadInstrumentation+0x94>)
 8001c90:	f7ff faec 	bl	800126c <LTC2990_Get_Single_Ended_Voltage>


	payload.voltages[0] = raw_voltages[0];
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	60fb      	str	r3, [r7, #12]
	payload.voltages[1] = raw_voltages[1];
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	613b      	str	r3, [r7, #16]

	osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <startReadInstrumentation+0x9c>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	f107 010c 	add.w	r1, r7, #12
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f00a fd81 	bl	800c7b0 <osMessageQueuePut>

	CDC_Transmit_Print("Voltage 1: %f \r\n", payload.voltages[0]);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc71 	bl	8000598 <__aeabi_f2d>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	480f      	ldr	r0, [pc, #60]	@ (8001cf8 <startReadInstrumentation+0xa0>)
 8001cbc:	f7ff fcc0 	bl	8001640 <CDC_Transmit_Print>
	CDC_Transmit_Print("Voltage 2: %f \r\n", payload.voltages[1]);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc68 	bl	8000598 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	480b      	ldr	r0, [pc, #44]	@ (8001cfc <startReadInstrumentation+0xa4>)
 8001cce:	f7ff fcb7 	bl	8001640 <CDC_Transmit_Print>
	CDC_Transmit_Print("ADC Data: %d \r\n", payload.pressure);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480a      	ldr	r0, [pc, #40]	@ (8001d00 <startReadInstrumentation+0xa8>)
 8001cd8:	f7ff fcb2 	bl	8001640 <CDC_Transmit_Print>

    osDelay(50);
 8001cdc:	2032      	movs	r0, #50	@ 0x32
 8001cde:	f00a fcd8 	bl	800c692 <osDelay>
  {
 8001ce2:	bf00      	nop
 8001ce4:	e7c1      	b.n	8001c6a <startReadInstrumentation+0x12>
 8001ce6:	bf00      	nop
 8001ce8:	2000043c 	.word	0x2000043c
 8001cec:	20000534 	.word	0x20000534
 8001cf0:	2000036c 	.word	0x2000036c
 8001cf4:	20000530 	.word	0x20000530
 8001cf8:	08012dfc 	.word	0x08012dfc
 8001cfc:	08012e10 	.word	0x08012e10
 8001d00:	08012e24 	.word	0x08012e24

08001d04 <StartSendMessage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 8001d04:	b5b0      	push	{r4, r5, r7, lr}
 8001d06:	b092      	sub	sp, #72	@ 0x48
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendMessage */
  /* Infinite loop */
	valveBoardPayload_t payload;
	  uint8_t txBuf[sizeof(valveBoardPayload_t)];
	  FDCAN_TxHeaderTypeDef txHeader = {
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <StartSendMessage+0x58>)
 8001d0e:	f107 040c 	add.w	r4, r7, #12
 8001d12:	461d      	mov	r5, r3
 8001d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	6023      	str	r3, [r4, #0]
		  .TxEventFifoControl = FDCAN_STORE_TX_EVENTS,
		  .MessageMarker = 0
	  };
  for(;;)
  {
	  osMessageQueueGet(sensorQueueHandle, &payload, NULL, osWaitForever);
 8001d20:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <StartSendMessage+0x5c>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f00a fd9f 	bl	800c870 <osMessageQueueGet>
	  memcpy(txBuf, &payload, sizeof(payload));
 8001d32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d36:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf);
 8001d40:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	@ (8001d64 <StartSendMessage+0x60>)
 8001d4c:	f002 f884 	bl	8003e58 <HAL_FDCAN_AddMessageToTxFifoQ>
	  osDelay(100);
 8001d50:	2064      	movs	r0, #100	@ 0x64
 8001d52:	f00a fc9e 	bl	800c692 <osDelay>
	  osMessageQueueGet(sensorQueueHandle, &payload, NULL, osWaitForever);
 8001d56:	bf00      	nop
 8001d58:	e7e2      	b.n	8001d20 <StartSendMessage+0x1c>
 8001d5a:	bf00      	nop
 8001d5c:	08012e34 	.word	0x08012e34
 8001d60:	20000530 	.word	0x20000530
 8001d64:	200003d8 	.word	0x200003d8

08001d68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d7a:	f000 fb63 	bl	8002444 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40012c00 	.word	0x40012c00

08001d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
}
 8001d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <Error_Handler+0x8>

08001d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_MspInit+0x50>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da2:	4a11      	ldr	r2, [pc, #68]	@ (8001de8 <HAL_MspInit+0x50>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001daa:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <HAL_MspInit+0x50>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_MspInit+0x50>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	4a0b      	ldr	r2, [pc, #44]	@ (8001de8 <HAL_MspInit+0x50>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <HAL_MspInit+0x50>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	210f      	movs	r1, #15
 8001dd2:	f06f 0001 	mvn.w	r0, #1
 8001dd6:	f001 fe95 	bl	8003b04 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001dda:	f004 ff0b 	bl	8006bf4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b09e      	sub	sp, #120	@ 0x78
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2250      	movs	r2, #80	@ 0x50
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00e fd61 	bl	80108d4 <memset>
  if(hadc->Instance==ADC3)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1e      	ldr	r2, [pc, #120]	@ (8001e90 <HAL_ADC_MspInit+0xa4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d134      	bne.n	8001e86 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001e1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e20:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001e22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001e26:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f005 fc51 	bl	80076d4 <HAL_RCCEx_PeriphCLKConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e38:	f7ff ffa8 	bl	8001d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001e3c:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <HAL_ADC_MspInit+0xa8>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e40:	4a14      	ldr	r2, [pc, #80]	@ (8001e94 <HAL_ADC_MspInit+0xa8>)
 8001e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_ADC_MspInit+0xa8>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <HAL_ADC_MspInit+0xa8>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e58:	4a0e      	ldr	r2, [pc, #56]	@ (8001e94 <HAL_ADC_MspInit+0xa8>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <HAL_ADC_MspInit+0xa8>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = Pressure_IN_Pin;
 8001e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e70:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e72:	2303      	movs	r3, #3
 8001e74:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Pressure_IN_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <HAL_ADC_MspInit+0xac>)
 8001e82:	f002 f90b 	bl	800409c <HAL_GPIO_Init>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001e86:	bf00      	nop
 8001e88:	3778      	adds	r7, #120	@ 0x78
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	50000400 	.word	0x50000400
 8001e94:	40021000 	.word	0x40021000
 8001e98:	48000400 	.word	0x48000400

08001e9c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b09e      	sub	sp, #120	@ 0x78
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2250      	movs	r2, #80	@ 0x50
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f00e fd09 	bl	80108d4 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f44 <HAL_FDCAN_MspInit+0xa8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d137      	bne.n	8001f3c <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001ed2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4618      	mov	r0, r3
 8001ede:	f005 fbf9 	bl	80076d4 <HAL_RCCEx_PeriphCLKConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001ee8:	f7ff ff50 	bl	8001d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001eec:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <HAL_FDCAN_MspInit+0xac>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef0:	4a15      	ldr	r2, [pc, #84]	@ (8001f48 <HAL_FDCAN_MspInit+0xac>)
 8001ef2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <HAL_FDCAN_MspInit+0xac>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f04:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_FDCAN_MspInit+0xac>)
 8001f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f08:	4a0f      	ldr	r2, [pc, #60]	@ (8001f48 <HAL_FDCAN_MspInit+0xac>)
 8001f0a:	f043 0302 	orr.w	r3, r3, #2
 8001f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f10:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_FDCAN_MspInit+0xac>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001f1c:	2360      	movs	r3, #96	@ 0x60
 8001f1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f2c:	2309      	movs	r3, #9
 8001f2e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f34:	4619      	mov	r1, r3
 8001f36:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <HAL_FDCAN_MspInit+0xb0>)
 8001f38:	f002 f8b0 	bl	800409c <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001f3c:	bf00      	nop
 8001f3e:	3778      	adds	r7, #120	@ 0x78
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40006800 	.word	0x40006800
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48000400 	.word	0x48000400

08001f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b09e      	sub	sp, #120	@ 0x78
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2250      	movs	r2, #80	@ 0x50
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f00e fcaf 	bl	80108d4 <memset>
  if(hi2c->Instance==I2C2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff8 <HAL_I2C_MspInit+0xa8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d137      	bne.n	8001ff0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f005 fba1 	bl	80076d4 <HAL_RCCEx_PeriphCLKConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f98:	f7ff fef8 	bl	8001d8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9c:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <HAL_I2C_MspInit+0xac>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa0:	4a16      	ldr	r2, [pc, #88]	@ (8001ffc <HAL_I2C_MspInit+0xac>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <HAL_I2C_MspInit+0xac>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fba:	2312      	movs	r3, #18
 8001fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd4:	f002 f862 	bl	800409c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <HAL_I2C_MspInit+0xac>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fdc:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <HAL_I2C_MspInit+0xac>)
 8001fde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_I2C_MspInit+0xac>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3778      	adds	r7, #120	@ 0x78
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40005800 	.word	0x40005800
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b09e      	sub	sp, #120	@ 0x78
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2250      	movs	r2, #80	@ 0x50
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f00e fc57 	bl	80108d4 <memset>
  if(huart->Instance==LPUART1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1f      	ldr	r2, [pc, #124]	@ (80020a8 <HAL_UART_MspInit+0xa8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d136      	bne.n	800209e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002030:	2320      	movs	r3, #32
 8002032:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4618      	mov	r0, r3
 800203e:	f005 fb49 	bl	80076d4 <HAL_RCCEx_PeriphCLKConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002048:	f7ff fea0 	bl	8001d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800204c:	4b17      	ldr	r3, [pc, #92]	@ (80020ac <HAL_UART_MspInit+0xac>)
 800204e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002050:	4a16      	ldr	r2, [pc, #88]	@ (80020ac <HAL_UART_MspInit+0xac>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002058:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <HAL_UART_MspInit+0xac>)
 800205a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_UART_MspInit+0xac>)
 8002066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002068:	4a10      	ldr	r2, [pc, #64]	@ (80020ac <HAL_UART_MspInit+0xac>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002070:	4b0e      	ldr	r3, [pc, #56]	@ (80020ac <HAL_UART_MspInit+0xac>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800207c:	230c      	movs	r3, #12
 800207e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800208c:	230c      	movs	r3, #12
 800208e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002094:	4619      	mov	r1, r3
 8002096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209a:	f001 ffff 	bl	800409c <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800209e:	bf00      	nop
 80020a0:	3778      	adds	r7, #120	@ 0x78
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40008000 	.word	0x40008000
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	@ 0x30
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002174 <HAL_InitTick+0xc4>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <HAL_InitTick+0xc4>)
 80020c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80020cc:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <HAL_InitTick+0xc4>)
 80020ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020d8:	f107 020c 	add.w	r2, r7, #12
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 fa7e 	bl	80075e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020e8:	f005 fa66 	bl	80075b8 <HAL_RCC_GetPCLK2Freq>
 80020ec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f0:	4a21      	ldr	r2, [pc, #132]	@ (8002178 <HAL_InitTick+0xc8>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0c9b      	lsrs	r3, r3, #18
 80020f8:	3b01      	subs	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <HAL_InitTick+0xcc>)
 80020fe:	4a20      	ldr	r2, [pc, #128]	@ (8002180 <HAL_InitTick+0xd0>)
 8002100:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002102:	4b1e      	ldr	r3, [pc, #120]	@ (800217c <HAL_InitTick+0xcc>)
 8002104:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002108:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800210a:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <HAL_InitTick+0xcc>)
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002110:	4b1a      	ldr	r3, [pc, #104]	@ (800217c <HAL_InitTick+0xcc>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_InitTick+0xcc>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800211c:	4817      	ldr	r0, [pc, #92]	@ (800217c <HAL_InitTick+0xcc>)
 800211e:	f005 fd15 	bl	8007b4c <HAL_TIM_Base_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002128:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11b      	bne.n	8002168 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002130:	4812      	ldr	r0, [pc, #72]	@ (800217c <HAL_InitTick+0xcc>)
 8002132:	f005 fd6d 	bl	8007c10 <HAL_TIM_Base_Start_IT>
 8002136:	4603      	mov	r3, r0
 8002138:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800213c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002140:	2b00      	cmp	r3, #0
 8002142:	d111      	bne.n	8002168 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002144:	2019      	movs	r0, #25
 8002146:	f001 fcf7 	bl	8003b38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d808      	bhi.n	8002162 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002150:	2200      	movs	r2, #0
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	2019      	movs	r0, #25
 8002156:	f001 fcd5 	bl	8003b04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800215a:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <HAL_InitTick+0xd4>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e002      	b.n	8002168 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002168:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800216c:	4618      	mov	r0, r3
 800216e:	3730      	adds	r7, #48	@ 0x30
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	431bde83 	.word	0x431bde83
 800217c:	20000548 	.word	0x20000548
 8002180:	40012c00 	.word	0x40012c00
 8002184:	20000004 	.word	0x20000004

08002188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <NMI_Handler+0x4>

08002190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <MemManage_Handler+0x4>

080021a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <UsageFault_Handler+0x4>

080021b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_VALVE_IN_Pin);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f002 f936 	bl	8004434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SOLENOID_IN_Pin);
 80021d0:	2002      	movs	r0, #2
 80021d2:	f002 f92f 	bl	8004434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}

080021da <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FC_FAULT_Pin);
 80021de:	2004      	movs	r0, #4
 80021e0:	f002 f928 	bl	8004434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <USB_LP_IRQHandler+0x10>)
 80021ee:	f003 f84c 	bl	800528a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000fdd8 	.word	0x2000fdd8

080021fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002202:	f005 fd75 	bl	8007cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000548 	.word	0x20000548

08002210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return 1;
 8002214:	2301      	movs	r3, #1
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_kill>:

int _kill(int pid, int sig)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800222a:	f00e fbb5 	bl	8010998 <__errno>
 800222e:	4603      	mov	r3, r0
 8002230:	2216      	movs	r2, #22
 8002232:	601a      	str	r2, [r3, #0]
  return -1;
 8002234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_exit>:

void _exit (int status)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002248:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ffe7 	bl	8002220 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002252:	bf00      	nop
 8002254:	e7fd      	b.n	8002252 <_exit+0x12>

08002256 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e00a      	b.n	800227e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002268:	f3af 8000 	nop.w
 800226c:	4601      	mov	r1, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	60ba      	str	r2, [r7, #8]
 8002274:	b2ca      	uxtb	r2, r1
 8002276:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	dbf0      	blt.n	8002268 <_read+0x12>
  }

  return len;
 8002286:	687b      	ldr	r3, [r7, #4]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e009      	b.n	80022b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	60ba      	str	r2, [r7, #8]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	3301      	adds	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	dbf1      	blt.n	80022a2 <_write+0x12>
  }
  return len;
 80022be:	687b      	ldr	r3, [r7, #4]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_close>:

int _close(int file)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022f0:	605a      	str	r2, [r3, #4]
  return 0;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_isatty>:

int _isatty(int file)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002338:	4a14      	ldr	r2, [pc, #80]	@ (800238c <_sbrk+0x5c>)
 800233a:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <_sbrk+0x60>)
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <_sbrk+0x64>)
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <_sbrk+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d207      	bcs.n	8002370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002360:	f00e fb1a 	bl	8010998 <__errno>
 8002364:	4603      	mov	r3, r0
 8002366:	220c      	movs	r2, #12
 8002368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800236e:	e009      	b.n	8002384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002370:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002376:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <_sbrk+0x64>)
 8002380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2001c000 	.word	0x2001c000
 8002390:	00000400 	.word	0x00000400
 8002394:	20000594 	.word	0x20000594
 8002398:	20010420 	.word	0x20010420

0800239c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <SystemInit+0x20>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a6:	4a05      	ldr	r2, [pc, #20]	@ (80023bc <SystemInit+0x20>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023c0:	480d      	ldr	r0, [pc, #52]	@ (80023f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023c4:	f7ff ffea 	bl	800239c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c8:	480c      	ldr	r0, [pc, #48]	@ (80023fc <LoopForever+0x6>)
  ldr r1, =_edata
 80023ca:	490d      	ldr	r1, [pc, #52]	@ (8002400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002404 <LoopForever+0xe>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e0:	4c0a      	ldr	r4, [pc, #40]	@ (800240c <LoopForever+0x16>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ee:	f00e fad9 	bl	80109a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023f2:	f7ff f98b 	bl	800170c <main>

080023f6 <LoopForever>:

LoopForever:
    b LoopForever
 80023f6:	e7fe      	b.n	80023f6 <LoopForever>
  ldr   r0, =_estack
 80023f8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8002404:	08013310 	.word	0x08013310
  ldr r2, =_sbss
 8002408:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800240c:	20010420 	.word	0x20010420

08002410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC1_2_IRQHandler>

08002412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241c:	2003      	movs	r0, #3
 800241e:	f001 fb66 	bl	8003aee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002422:	200f      	movs	r0, #15
 8002424:	f7ff fe44 	bl	80020b0 <HAL_InitTick>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	e001      	b.n	8002438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002434:	f7ff fcb0 	bl	8001d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002438:	79fb      	ldrb	r3, [r7, #7]

}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_IncTick+0x1c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_IncTick+0x20>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4413      	add	r3, r2
 8002452:	4a03      	ldr	r2, [pc, #12]	@ (8002460 <HAL_IncTick+0x1c>)
 8002454:	6013      	str	r3, [r2, #0]
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	20000598 	.word	0x20000598
 8002464:	20000008 	.word	0x20000008

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000598 	.word	0x20000598

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff ffee 	bl	8002468 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002498:	d004      	beq.n	80024a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <HAL_Delay+0x40>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4413      	add	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a4:	bf00      	nop
 80024a6:	f7ff ffdf 	bl	8002468 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d8f7      	bhi.n	80024a6 <HAL_Delay+0x26>
  {
  }
}
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000008 	.word	0x20000008

080024c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	609a      	str	r2, [r3, #8]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3360      	adds	r3, #96	@ 0x60
 800253e:	461a      	mov	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <LL_ADC_SetOffset+0x44>)
 800254e:	4013      	ands	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	4313      	orrs	r3, r2
 800255c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002564:	bf00      	nop
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	03fff000 	.word	0x03fff000

08002574 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3360      	adds	r3, #96	@ 0x60
 8002582:	461a      	mov	r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3360      	adds	r3, #96	@ 0x60
 80025b0:	461a      	mov	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025ca:	bf00      	nop
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b087      	sub	sp, #28
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3360      	adds	r3, #96	@ 0x60
 80025e6:	461a      	mov	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002600:	bf00      	nop
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	3360      	adds	r3, #96	@ 0x60
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	431a      	orrs	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	615a      	str	r2, [r3, #20]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800268e:	b480      	push	{r7}
 8002690:	b087      	sub	sp, #28
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3330      	adds	r3, #48	@ 0x30
 800269e:	461a      	mov	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	4413      	add	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	211f      	movs	r1, #31
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	401a      	ands	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	f003 011f 	and.w	r1, r3, #31
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b087      	sub	sp, #28
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3314      	adds	r3, #20
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	0e5b      	lsrs	r3, r3, #25
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	0d1b      	lsrs	r3, r3, #20
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2107      	movs	r1, #7
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	0d1b      	lsrs	r3, r3, #20
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	431a      	orrs	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002730:	bf00      	nop
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002754:	43db      	mvns	r3, r3
 8002756:	401a      	ands	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0318 	and.w	r3, r3, #24
 800275e:	4908      	ldr	r1, [pc, #32]	@ (8002780 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002760:	40d9      	lsrs	r1, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	400b      	ands	r3, r1
 8002766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276a:	431a      	orrs	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	0007ffff 	.word	0x0007ffff

08002784 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 031f 	and.w	r3, r3, #31
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6093      	str	r3, [r2, #8]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027f4:	d101      	bne.n	80027fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002818:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800281c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002844:	d101      	bne.n	800284a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002868:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <LL_ADC_IsEnabled+0x18>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <LL_ADC_IsEnabled+0x1a>
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d101      	bne.n	80028e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b08      	cmp	r3, #8
 8002906:	d101      	bne.n	800290c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b089      	sub	sp, #36	@ 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e19b      	b.n	8002c6e <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff fa51 	bl	8001dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff3f 	bl	80027e0 <LL_ADC_IsDeepPowerDownEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff25 	bl	80027bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff5a 	bl	8002830 <LL_ADC_IsInternalRegulatorEnabled>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d115      	bne.n	80029ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ff3e 	bl	8002808 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800298c:	4b97      	ldr	r3, [pc, #604]	@ (8002bec <HAL_ADC_Init+0x2d0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	4a97      	ldr	r2, [pc, #604]	@ (8002bf0 <HAL_ADC_Init+0x2d4>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	3301      	adds	r3, #1
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff3c 	bl	8002830 <LL_ADC_IsInternalRegulatorEnabled>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	f043 0210 	orr.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ff75 	bl	80028ce <LL_ADC_REG_IsConversionOngoing>
 80029e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f040 8134 	bne.w	8002c5c <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 8130 	bne.w	8002c5c <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a00:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a04:	f043 0202 	orr.w	r2, r3, #2
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff35 	bl	8002880 <LL_ADC_IsEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d137      	bne.n	8002a8c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a24:	d004      	beq.n	8002a30 <HAL_ADC_Init+0x114>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a72      	ldr	r2, [pc, #456]	@ (8002bf4 <HAL_ADC_Init+0x2d8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10f      	bne.n	8002a50 <HAL_ADC_Init+0x134>
 8002a30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a34:	f7ff ff24 	bl	8002880 <LL_ADC_IsEnabled>
 8002a38:	4604      	mov	r4, r0
 8002a3a:	486e      	ldr	r0, [pc, #440]	@ (8002bf4 <HAL_ADC_Init+0x2d8>)
 8002a3c:	f7ff ff20 	bl	8002880 <LL_ADC_IsEnabled>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4323      	orrs	r3, r4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e008      	b.n	8002a62 <HAL_ADC_Init+0x146>
 8002a50:	4869      	ldr	r0, [pc, #420]	@ (8002bf8 <HAL_ADC_Init+0x2dc>)
 8002a52:	f7ff ff15 	bl	8002880 <LL_ADC_IsEnabled>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d012      	beq.n	8002a8c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a6e:	d004      	beq.n	8002a7a <HAL_ADC_Init+0x15e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf4 <HAL_ADC_Init+0x2d8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_Init+0x162>
 8002a7a:	4a60      	ldr	r2, [pc, #384]	@ (8002bfc <HAL_ADC_Init+0x2e0>)
 8002a7c:	e000      	b.n	8002a80 <HAL_ADC_Init+0x164>
 8002a7e:	4a60      	ldr	r2, [pc, #384]	@ (8002c00 <HAL_ADC_Init+0x2e4>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f7ff fd1c 	bl	80024c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7f5b      	ldrb	r3, [r3, #29]
 8002a90:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a96:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a9c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002aa2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aaa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d106      	bne.n	8002ac8 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	045b      	lsls	r3, r3, #17
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d009      	beq.n	8002ae4 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	4b46      	ldr	r3, [pc, #280]	@ (8002c04 <HAL_ADC_Init+0x2e8>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff feee 	bl	80028f4 <LL_ADC_INJ_IsConversionOngoing>
 8002b18:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d17b      	bne.n	8002c18 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d178      	bne.n	8002c18 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b2a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b32:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b42:	f023 0302 	bic.w	r3, r3, #2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	69b9      	ldr	r1, [r7, #24]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d017      	beq.n	8002b88 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002b66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b70:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6911      	ldr	r1, [r2, #16]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002b86:	e013      	b.n	8002bb0 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002b96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d126      	bne.n	8002c08 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002bc4:	f023 0304 	bic.w	r3, r3, #4
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	611a      	str	r2, [r3, #16]
 8002bea:	e015      	b.n	8002c18 <HAL_ADC_Init+0x2fc>
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	053e2d63 	.word	0x053e2d63
 8002bf4:	50000100 	.word	0x50000100
 8002bf8:	50000400 	.word	0x50000400
 8002bfc:	50000300 	.word	0x50000300
 8002c00:	50000700 	.word	0x50000700
 8002c04:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10c      	bne.n	8002c3a <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f023 010f 	bic.w	r1, r3, #15
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	1e5a      	subs	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c38:	e007      	b.n	8002c4a <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 020f 	bic.w	r2, r2, #15
 8002c48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c5a:	e007      	b.n	8002c6c <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	@ 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	bf00      	nop

08002c78 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c88:	d004      	beq.n	8002c94 <HAL_ADC_Start+0x1c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a5c      	ldr	r2, [pc, #368]	@ (8002e00 <HAL_ADC_Start+0x188>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_Start+0x20>
 8002c94:	4b5b      	ldr	r3, [pc, #364]	@ (8002e04 <HAL_ADC_Start+0x18c>)
 8002c96:	e000      	b.n	8002c9a <HAL_ADC_Start+0x22>
 8002c98:	4b5b      	ldr	r3, [pc, #364]	@ (8002e08 <HAL_ADC_Start+0x190>)
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fd72 	bl	8002784 <LL_ADC_GetMultimode>
 8002ca0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fe11 	bl	80028ce <LL_ADC_REG_IsConversionOngoing>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f040 809f 	bne.w	8002df2 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Start+0x4a>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e09a      	b.n	8002df8 <HAL_ADC_Start+0x180>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fdcc 	bl	8003868 <ADC_Enable>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 8086 	bne.w	8002de8 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a42      	ldr	r2, [pc, #264]	@ (8002e00 <HAL_ADC_Start+0x188>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d002      	beq.n	8002d00 <HAL_ADC_Start+0x88>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e001      	b.n	8002d04 <HAL_ADC_Start+0x8c>
 8002d00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d002      	beq.n	8002d12 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d105      	bne.n	8002d1e <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d16:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d2a:	d106      	bne.n	8002d3a <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d30:	f023 0206 	bic.w	r2, r3, #6
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d38:	e002      	b.n	8002d40 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	221c      	movs	r2, #28
 8002d46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2a      	ldr	r2, [pc, #168]	@ (8002e00 <HAL_ADC_Start+0x188>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d002      	beq.n	8002d60 <HAL_ADC_Start+0xe8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e001      	b.n	8002d64 <HAL_ADC_Start+0xec>
 8002d60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d008      	beq.n	8002d7e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d002      	beq.n	8002d7e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b09      	cmp	r3, #9
 8002d7c:	d114      	bne.n	8002da8 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fd80 	bl	80028a6 <LL_ADC_REG_StartConversion>
 8002da6:	e026      	b.n	8002df6 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a11      	ldr	r2, [pc, #68]	@ (8002e00 <HAL_ADC_Start+0x188>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d002      	beq.n	8002dc4 <HAL_ADC_Start+0x14c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	e001      	b.n	8002dc8 <HAL_ADC_Start+0x150>
 8002dc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dc8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00f      	beq.n	8002df6 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dda:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dde:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002de6:	e006      	b.n	8002df6 <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002df0:	e001      	b.n	8002df6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	50000100 	.word	0x50000100
 8002e04:	50000300 	.word	0x50000300
 8002e08:	50000700 	.word	0x50000700

08002e0c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e1e:	d004      	beq.n	8002e2a <HAL_ADC_PollForConversion+0x1e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a70      	ldr	r2, [pc, #448]	@ (8002fe8 <HAL_ADC_PollForConversion+0x1dc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_PollForConversion+0x22>
 8002e2a:	4b70      	ldr	r3, [pc, #448]	@ (8002fec <HAL_ADC_PollForConversion+0x1e0>)
 8002e2c:	e000      	b.n	8002e30 <HAL_ADC_PollForConversion+0x24>
 8002e2e:	4b70      	ldr	r3, [pc, #448]	@ (8002ff0 <HAL_ADC_PollForConversion+0x1e4>)
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fca7 	bl	8002784 <LL_ADC_GetMultimode>
 8002e36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d102      	bne.n	8002e46 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002e40:	2308      	movs	r3, #8
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	e037      	b.n	8002eb6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b05      	cmp	r3, #5
 8002e50:	d002      	beq.n	8002e58 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b09      	cmp	r3, #9
 8002e56:	d111      	bne.n	8002e7c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6a:	f043 0220 	orr.w	r2, r3, #32
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0b3      	b.n	8002fde <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e76:	2304      	movs	r3, #4
 8002e78:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e7a:	e01c      	b.n	8002eb6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e84:	d004      	beq.n	8002e90 <HAL_ADC_PollForConversion+0x84>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a57      	ldr	r2, [pc, #348]	@ (8002fe8 <HAL_ADC_PollForConversion+0x1dc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_PollForConversion+0x88>
 8002e90:	4b56      	ldr	r3, [pc, #344]	@ (8002fec <HAL_ADC_PollForConversion+0x1e0>)
 8002e92:	e000      	b.n	8002e96 <HAL_ADC_PollForConversion+0x8a>
 8002e94:	4b56      	ldr	r3, [pc, #344]	@ (8002ff0 <HAL_ADC_PollForConversion+0x1e4>)
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fc82 	bl	80027a0 <LL_ADC_GetMultiDMATransfer>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e095      	b.n	8002fde <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002eb6:	f7ff fad7 	bl	8002468 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ebc:	e021      	b.n	8002f02 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ec4:	d01d      	beq.n	8002f02 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ec6:	f7ff facf 	bl	8002468 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <HAL_ADC_PollForConversion+0xd0>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d112      	bne.n	8002f02 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e06d      	b.n	8002fde <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0d6      	beq.n	8002ebe <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fba1 	bl	8002668 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01c      	beq.n	8002f66 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7f5b      	ldrb	r3, [r3, #29]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d118      	bne.n	8002f66 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d111      	bne.n	8002f66 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f46:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe8 <HAL_ADC_PollForConversion+0x1dc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d002      	beq.n	8002f76 <HAL_ADC_PollForConversion+0x16a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	e001      	b.n	8002f7a <HAL_ADC_PollForConversion+0x16e>
 8002f76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d008      	beq.n	8002f94 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d002      	beq.n	8002f94 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	d104      	bne.n	8002f9e <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e00d      	b.n	8002fba <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a11      	ldr	r2, [pc, #68]	@ (8002fe8 <HAL_ADC_PollForConversion+0x1dc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d002      	beq.n	8002fae <HAL_ADC_PollForConversion+0x1a2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	e001      	b.n	8002fb2 <HAL_ADC_PollForConversion+0x1a6>
 8002fae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fb2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d104      	bne.n	8002fca <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e008      	b.n	8002fdc <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	220c      	movs	r2, #12
 8002fda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	50000100 	.word	0x50000100
 8002fec:	50000300 	.word	0x50000300
 8002ff0:	50000700 	.word	0x50000700

08002ff4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b0b6      	sub	sp, #216	@ 0xd8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x24>
 800302e:	2302      	movs	r3, #2
 8003030:	f000 bc04 	b.w	800383c <HAL_ADC_ConfigChannel+0x82c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fc44 	bl	80028ce <LL_ADC_REG_IsConversionOngoing>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 83e8 	bne.w	800381e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	f7ff fb17 	bl	800268e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fc32 	bl	80028ce <LL_ADC_REG_IsConversionOngoing>
 800306a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fc3e 	bl	80028f4 <LL_ADC_INJ_IsConversionOngoing>
 8003078:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800307c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 81d9 	bne.w	8003438 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800308a:	2b00      	cmp	r3, #0
 800308c:	f040 81d4 	bne.w	8003438 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003098:	d10f      	bne.n	80030ba <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7ff fb1e 	bl	80026e6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fac5 	bl	8002642 <LL_ADC_SetSamplingTimeCommonConfig>
 80030b8:	e00e      	b.n	80030d8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f7ff fb0d 	bl	80026e6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fab5 	bl	8002642 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	08db      	lsrs	r3, r3, #3
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d022      	beq.n	8003140 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6919      	ldr	r1, [r3, #16]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800310a:	f7ff fa0f 	bl	800252c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6919      	ldr	r1, [r3, #16]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	461a      	mov	r2, r3
 800311c:	f7ff fa5b 	bl	80025d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800312c:	2b01      	cmp	r3, #1
 800312e:	d102      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x126>
 8003130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003134:	e000      	b.n	8003138 <HAL_ADC_ConfigChannel+0x128>
 8003136:	2300      	movs	r3, #0
 8003138:	461a      	mov	r2, r3
 800313a:	f7ff fa67 	bl	800260c <LL_ADC_SetOffsetSaturation>
 800313e:	e17b      	b.n	8003438 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fa14 	bl	8002574 <LL_ADC_GetOffsetChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_ADC_ConfigChannel+0x15c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fa09 	bl	8002574 <LL_ADC_GetOffsetChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	0e9b      	lsrs	r3, r3, #26
 8003166:	f003 021f 	and.w	r2, r3, #31
 800316a:	e01e      	b.n	80031aa <HAL_ADC_ConfigChannel+0x19a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2100      	movs	r1, #0
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f9fe 	bl	8002574 <LL_ADC_GetOffsetChannel>
 8003178:	4603      	mov	r3, r0
 800317a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800318a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800318e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003192:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800319a:	2320      	movs	r3, #32
 800319c:	e004      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800319e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x1b2>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	e018      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x1e4>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80031d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80031de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80031e6:	2320      	movs	r3, #32
 80031e8:	e004      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80031ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d106      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff f9cd 	bl	80025a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2101      	movs	r1, #1
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f9b1 	bl	8002574 <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x222>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2101      	movs	r1, #1
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f9a6 	bl	8002574 <LL_ADC_GetOffsetChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	e01e      	b.n	8003270 <HAL_ADC_ConfigChannel+0x260>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff f99b 	bl	8002574 <LL_ADC_GetOffsetChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003254:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003260:	2320      	movs	r3, #32
 8003262:	e004      	b.n	800326e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x278>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	e018      	b.n	80032ba <HAL_ADC_ConfigChannel+0x2aa>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800329c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80032a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80032ac:	2320      	movs	r3, #32
 80032ae:	e004      	b.n	80032ba <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80032b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d106      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	2101      	movs	r1, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff f96a 	bl	80025a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2102      	movs	r1, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f94e 	bl	8002574 <LL_ADC_GetOffsetChannel>
 80032d8:	4603      	mov	r3, r0
 80032da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x2e8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2102      	movs	r1, #2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff f943 	bl	8002574 <LL_ADC_GetOffsetChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	0e9b      	lsrs	r3, r3, #26
 80032f2:	f003 021f 	and.w	r2, r3, #31
 80032f6:	e01e      	b.n	8003336 <HAL_ADC_ConfigChannel+0x326>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2102      	movs	r1, #2
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff f938 	bl	8002574 <LL_ADC_GetOffsetChannel>
 8003304:	4603      	mov	r3, r0
 8003306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003316:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800331a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800331e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003326:	2320      	movs	r3, #32
 8003328:	e004      	b.n	8003334 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800332a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_ADC_ConfigChannel+0x33e>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	0e9b      	lsrs	r3, r3, #26
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	e016      	b.n	800337c <HAL_ADC_ConfigChannel+0x36c>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003360:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003362:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003366:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800336e:	2320      	movs	r3, #32
 8003370:	e004      	b.n	800337c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003372:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800337c:	429a      	cmp	r2, r3
 800337e:	d106      	bne.n	800338e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2200      	movs	r2, #0
 8003386:	2102      	movs	r1, #2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff f909 	bl	80025a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2103      	movs	r1, #3
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff f8ed 	bl	8002574 <LL_ADC_GetOffsetChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x3aa>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2103      	movs	r1, #3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff f8e2 	bl	8002574 <LL_ADC_GetOffsetChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	0e9b      	lsrs	r3, r3, #26
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	e017      	b.n	80033ea <HAL_ADC_ConfigChannel+0x3da>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2103      	movs	r1, #3
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff f8d7 	bl	8002574 <LL_ADC_GetOffsetChannel>
 80033c6:	4603      	mov	r3, r0
 80033c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033d4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80033d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80033dc:	2320      	movs	r3, #32
 80033de:	e003      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80033e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d105      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x3f2>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	0e9b      	lsrs	r3, r3, #26
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	e011      	b.n	8003426 <HAL_ADC_ConfigChannel+0x416>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003410:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003412:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800341a:	2320      	movs	r3, #32
 800341c:	e003      	b.n	8003426 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800341e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003420:	fab3 f383 	clz	r3, r3
 8003424:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003426:	429a      	cmp	r2, r3
 8003428:	d106      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	2103      	movs	r1, #3
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f8b4 	bl	80025a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fa1f 	bl	8002880 <LL_ADC_IsEnabled>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	f040 813d 	bne.w	80036c4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	461a      	mov	r2, r3
 8003458:	f7ff f970 	bl	800273c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4aa2      	ldr	r2, [pc, #648]	@ (80036ec <HAL_ADC_ConfigChannel+0x6dc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	f040 812e 	bne.w	80036c4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x480>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0e9b      	lsrs	r3, r3, #26
 800347e:	3301      	adds	r3, #1
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2b09      	cmp	r3, #9
 8003486:	bf94      	ite	ls
 8003488:	2301      	movls	r3, #1
 800348a:	2300      	movhi	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e019      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x4b4>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800349e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80034a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80034a8:	2320      	movs	r3, #32
 80034aa:	e003      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80034ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	2b09      	cmp	r3, #9
 80034bc:	bf94      	ite	ls
 80034be:	2301      	movls	r3, #1
 80034c0:	2300      	movhi	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d079      	beq.n	80035bc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x4d4>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	3301      	adds	r3, #1
 80034dc:	069b      	lsls	r3, r3, #26
 80034de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034e2:	e015      	b.n	8003510 <HAL_ADC_ConfigChannel+0x500>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80034f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80034f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e003      	b.n	8003508 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	3301      	adds	r3, #1
 800350a:	069b      	lsls	r3, r3, #26
 800350c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x520>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0e9b      	lsrs	r3, r3, #26
 8003522:	3301      	adds	r3, #1
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	e017      	b.n	8003560 <HAL_ADC_ConfigChannel+0x550>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800353e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003540:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003548:	2320      	movs	r3, #32
 800354a:	e003      	b.n	8003554 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800354c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	3301      	adds	r3, #1
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	2101      	movs	r1, #1
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	ea42 0103 	orr.w	r1, r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x576>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	0e9b      	lsrs	r3, r3, #26
 8003576:	3301      	adds	r3, #1
 8003578:	f003 021f 	and.w	r2, r3, #31
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	051b      	lsls	r3, r3, #20
 8003584:	e018      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x5a8>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800359e:	2320      	movs	r3, #32
 80035a0:	e003      	b.n	80035aa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80035a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	3301      	adds	r3, #1
 80035ac:	f003 021f 	and.w	r2, r3, #31
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b8:	430b      	orrs	r3, r1
 80035ba:	e07e      	b.n	80036ba <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x5c8>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	3301      	adds	r3, #1
 80035d0:	069b      	lsls	r3, r3, #26
 80035d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035d6:	e015      	b.n	8003604 <HAL_ADC_ConfigChannel+0x5f4>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80035e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80035ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80035f0:	2320      	movs	r3, #32
 80035f2:	e003      	b.n	80035fc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80035f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	069b      	lsls	r3, r3, #26
 8003600:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x614>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0e9b      	lsrs	r3, r3, #26
 8003616:	3301      	adds	r3, #1
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	e017      	b.n	8003654 <HAL_ADC_ConfigChannel+0x644>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	61fb      	str	r3, [r7, #28]
  return result;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800363c:	2320      	movs	r3, #32
 800363e:	e003      	b.n	8003648 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	ea42 0103 	orr.w	r1, r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10d      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x670>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0e9b      	lsrs	r3, r3, #26
 800366a:	3301      	adds	r3, #1
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	3b1e      	subs	r3, #30
 8003678:	051b      	lsls	r3, r3, #20
 800367a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800367e:	e01b      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x6a8>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	613b      	str	r3, [r7, #16]
  return result;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e003      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3301      	adds	r3, #1
 80036a6:	f003 021f 	and.w	r2, r3, #31
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	3b1e      	subs	r3, #30
 80036b2:	051b      	lsls	r3, r3, #20
 80036b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036be:	4619      	mov	r1, r3
 80036c0:	f7ff f811 	bl	80026e6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <HAL_ADC_ConfigChannel+0x6e0>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80af 	beq.w	8003830 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036da:	d004      	beq.n	80036e6 <HAL_ADC_ConfigChannel+0x6d6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <HAL_ADC_ConfigChannel+0x6e4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10a      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x6ec>
 80036e6:	4b04      	ldr	r3, [pc, #16]	@ (80036f8 <HAL_ADC_ConfigChannel+0x6e8>)
 80036e8:	e009      	b.n	80036fe <HAL_ADC_ConfigChannel+0x6ee>
 80036ea:	bf00      	nop
 80036ec:	407f0000 	.word	0x407f0000
 80036f0:	80080000 	.word	0x80080000
 80036f4:	50000100 	.word	0x50000100
 80036f8:	50000300 	.word	0x50000300
 80036fc:	4b51      	ldr	r3, [pc, #324]	@ (8003844 <HAL_ADC_ConfigChannel+0x834>)
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe ff06 	bl	8002510 <LL_ADC_GetCommonPathInternalCh>
 8003704:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a4e      	ldr	r2, [pc, #312]	@ (8003848 <HAL_ADC_ConfigChannel+0x838>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_ADC_ConfigChannel+0x70c>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4d      	ldr	r2, [pc, #308]	@ (800384c <HAL_ADC_ConfigChannel+0x83c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d134      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800371c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003720:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d12e      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003730:	d17e      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800373a:	d004      	beq.n	8003746 <HAL_ADC_ConfigChannel+0x736>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a43      	ldr	r2, [pc, #268]	@ (8003850 <HAL_ADC_ConfigChannel+0x840>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x73a>
 8003746:	4a43      	ldr	r2, [pc, #268]	@ (8003854 <HAL_ADC_ConfigChannel+0x844>)
 8003748:	e000      	b.n	800374c <HAL_ADC_ConfigChannel+0x73c>
 800374a:	4a3e      	ldr	r2, [pc, #248]	@ (8003844 <HAL_ADC_ConfigChannel+0x834>)
 800374c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003750:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f7fe fec7 	bl	80024ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800375c:	4b3e      	ldr	r3, [pc, #248]	@ (8003858 <HAL_ADC_ConfigChannel+0x848>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	4a3e      	ldr	r2, [pc, #248]	@ (800385c <HAL_ADC_ConfigChannel+0x84c>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003776:	e002      	b.n	800377e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3b01      	subs	r3, #1
 800377c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f9      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003784:	e054      	b.n	8003830 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a35      	ldr	r2, [pc, #212]	@ (8003860 <HAL_ADC_ConfigChannel+0x850>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d120      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003794:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11a      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a4:	d144      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037ae:	d004      	beq.n	80037ba <HAL_ADC_ConfigChannel+0x7aa>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a26      	ldr	r2, [pc, #152]	@ (8003850 <HAL_ADC_ConfigChannel+0x840>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_ADC_ConfigChannel+0x7ae>
 80037ba:	4a26      	ldr	r2, [pc, #152]	@ (8003854 <HAL_ADC_ConfigChannel+0x844>)
 80037bc:	e000      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x7b0>
 80037be:	4a21      	ldr	r2, [pc, #132]	@ (8003844 <HAL_ADC_ConfigChannel+0x834>)
 80037c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f7fe fe8d 	bl	80024ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d0:	e02e      	b.n	8003830 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <HAL_ADC_ConfigChannel+0x854>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d129      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d123      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a18      	ldr	r2, [pc, #96]	@ (8003850 <HAL_ADC_ConfigChannel+0x840>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01e      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037fa:	d004      	beq.n	8003806 <HAL_ADC_ConfigChannel+0x7f6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a13      	ldr	r2, [pc, #76]	@ (8003850 <HAL_ADC_ConfigChannel+0x840>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <HAL_ADC_ConfigChannel+0x7fa>
 8003806:	4a13      	ldr	r2, [pc, #76]	@ (8003854 <HAL_ADC_ConfigChannel+0x844>)
 8003808:	e000      	b.n	800380c <HAL_ADC_ConfigChannel+0x7fc>
 800380a:	4a0e      	ldr	r2, [pc, #56]	@ (8003844 <HAL_ADC_ConfigChannel+0x834>)
 800380c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003810:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f7fe fe67 	bl	80024ea <LL_ADC_SetCommonPathInternalCh>
 800381c:	e008      	b.n	8003830 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f043 0220 	orr.w	r2, r3, #32
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003838:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800383c:	4618      	mov	r0, r3
 800383e:	37d8      	adds	r7, #216	@ 0xd8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	50000700 	.word	0x50000700
 8003848:	c3210000 	.word	0xc3210000
 800384c:	90c00010 	.word	0x90c00010
 8003850:	50000100 	.word	0x50000100
 8003854:	50000300 	.word	0x50000300
 8003858:	20000000 	.word	0x20000000
 800385c:	053e2d63 	.word	0x053e2d63
 8003860:	c7520000 	.word	0xc7520000
 8003864:	cb840000 	.word	0xcb840000

08003868 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff f801 	bl	8002880 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d176      	bne.n	8003972 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	4b3c      	ldr	r3, [pc, #240]	@ (800397c <ADC_Enable+0x114>)
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	f043 0210 	orr.w	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	f043 0201 	orr.w	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e062      	b.n	8003974 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe ffd0 	bl	8002858 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c0:	d004      	beq.n	80038cc <ADC_Enable+0x64>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003980 <ADC_Enable+0x118>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d101      	bne.n	80038d0 <ADC_Enable+0x68>
 80038cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003984 <ADC_Enable+0x11c>)
 80038ce:	e000      	b.n	80038d2 <ADC_Enable+0x6a>
 80038d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003988 <ADC_Enable+0x120>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fe1c 	bl	8002510 <LL_ADC_GetCommonPathInternalCh>
 80038d8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d013      	beq.n	800390a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e2:	4b2a      	ldr	r3, [pc, #168]	@ (800398c <ADC_Enable+0x124>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	099b      	lsrs	r3, r3, #6
 80038e8:	4a29      	ldr	r2, [pc, #164]	@ (8003990 <ADC_Enable+0x128>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	099b      	lsrs	r3, r3, #6
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038fc:	e002      	b.n	8003904 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3b01      	subs	r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f9      	bne.n	80038fe <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800390a:	f7fe fdad 	bl	8002468 <HAL_GetTick>
 800390e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003910:	e028      	b.n	8003964 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe ffb2 	bl	8002880 <LL_ADC_IsEnabled>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe ff96 	bl	8002858 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800392c:	f7fe fd9c 	bl	8002468 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d914      	bls.n	8003964 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d00d      	beq.n	8003964 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394c:	f043 0210 	orr.w	r2, r3, #16
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e007      	b.n	8003974 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d1cf      	bne.n	8003912 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	8000003f 	.word	0x8000003f
 8003980:	50000100 	.word	0x50000100
 8003984:	50000300 	.word	0x50000300
 8003988:	50000700 	.word	0x50000700
 800398c:	20000000 	.word	0x20000000
 8003990:	053e2d63 	.word	0x053e2d63

08003994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039b0:	4013      	ands	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c6:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	60d3      	str	r3, [r2, #12]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <__NVIC_GetPriorityGrouping+0x18>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 0307 	and.w	r3, r3, #7
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	db0b      	blt.n	8003a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	f003 021f 	and.w	r2, r3, #31
 8003a10:	4907      	ldr	r1, [pc, #28]	@ (8003a30 <__NVIC_EnableIRQ+0x38>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2001      	movs	r0, #1
 8003a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000e100 	.word	0xe000e100

08003a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db0a      	blt.n	8003a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	490c      	ldr	r1, [pc, #48]	@ (8003a80 <__NVIC_SetPriority+0x4c>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	0112      	lsls	r2, r2, #4
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	440b      	add	r3, r1
 8003a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a5c:	e00a      	b.n	8003a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4908      	ldr	r1, [pc, #32]	@ (8003a84 <__NVIC_SetPriority+0x50>)
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	3b04      	subs	r3, #4
 8003a6c:	0112      	lsls	r2, r2, #4
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	440b      	add	r3, r1
 8003a72:	761a      	strb	r2, [r3, #24]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000e100 	.word	0xe000e100
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	@ 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f1c3 0307 	rsb	r3, r3, #7
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	bf28      	it	cs
 8003aa6:	2304      	movcs	r3, #4
 8003aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d902      	bls.n	8003ab8 <NVIC_EncodePriority+0x30>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3b03      	subs	r3, #3
 8003ab6:	e000      	b.n	8003aba <NVIC_EncodePriority+0x32>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	401a      	ands	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	43d9      	mvns	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae0:	4313      	orrs	r3, r2
         );
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3724      	adds	r7, #36	@ 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff ff4c 	bl	8003994 <__NVIC_SetPriorityGrouping>
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b12:	f7ff ff63 	bl	80039dc <__NVIC_GetPriorityGrouping>
 8003b16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	6978      	ldr	r0, [r7, #20]
 8003b1e:	f7ff ffb3 	bl	8003a88 <NVIC_EncodePriority>
 8003b22:	4602      	mov	r2, r0
 8003b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff82 	bl	8003a34 <__NVIC_SetPriority>
}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff ff56 	bl	80039f8 <__NVIC_EnableIRQ>
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e147      	b.n	8003df6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fe f98e 	bl	8001e9c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0210 	bic.w	r2, r2, #16
 8003b8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b90:	f7fe fc6a 	bl	8002468 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b96:	e012      	b.n	8003bbe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003b98:	f7fe fc66 	bl	8002468 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b0a      	cmp	r3, #10
 8003ba4:	d90b      	bls.n	8003bbe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e11b      	b.n	8003df6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d0e5      	beq.n	8003b98 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bdc:	f7fe fc44 	bl	8002468 <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003be2:	e012      	b.n	8003c0a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003be4:	f7fe fc40 	bl	8002468 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b0a      	cmp	r3, #10
 8003bf0:	d90b      	bls.n	8003c0a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2203      	movs	r2, #3
 8003c02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e0f5      	b.n	8003df6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0e5      	beq.n	8003be4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0202 	orr.w	r2, r2, #2
 8003c26:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a74      	ldr	r2, [pc, #464]	@ (8003e00 <HAL_FDCAN_Init+0x2ac>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d103      	bne.n	8003c3a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003c32:	4a74      	ldr	r2, [pc, #464]	@ (8003e04 <HAL_FDCAN_Init+0x2b0>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	7c1b      	ldrb	r3, [r3, #16]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d108      	bne.n	8003c54 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c50:	619a      	str	r2, [r3, #24]
 8003c52:	e007      	b.n	8003c64 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c62:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7c5b      	ldrb	r3, [r3, #17]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d108      	bne.n	8003c7e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c7a:	619a      	str	r2, [r3, #24]
 8003c7c:	e007      	b.n	8003c8e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	7c9b      	ldrb	r3, [r3, #18]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d108      	bne.n	8003ca8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699a      	ldr	r2, [r3, #24]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ca4:	619a      	str	r2, [r3, #24]
 8003ca6:	e007      	b.n	8003cb8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cb6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003cdc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0210 	bic.w	r2, r2, #16
 8003cec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d108      	bne.n	8003d08 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0204 	orr.w	r2, r2, #4
 8003d04:	619a      	str	r2, [r3, #24]
 8003d06:	e02c      	b.n	8003d62 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d028      	beq.n	8003d62 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d01c      	beq.n	8003d52 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d26:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0210 	orr.w	r2, r2, #16
 8003d36:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d110      	bne.n	8003d62 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0220 	orr.w	r2, r2, #32
 8003d4e:	619a      	str	r2, [r3, #24]
 8003d50:	e007      	b.n	8003d62 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0220 	orr.w	r2, r2, #32
 8003d60:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d72:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d7a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003d8a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d8c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d96:	d115      	bne.n	8003dc4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	3b01      	subs	r3, #1
 8003da4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003da6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	3b01      	subs	r3, #1
 8003dae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003db0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	3b01      	subs	r3, #1
 8003dba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003dc0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dc2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f880 	bl	8003ee0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40006400 	.word	0x40006400
 8003e04:	40006500 	.word	0x40006500

08003e08 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d110      	bne.n	8003e3e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e006      	b.n	8003e4c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
  }
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d12c      	bne.n	8003eca <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e023      	b.n	8003ed8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f87c 	bl	8003fa4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e006      	b.n	8003ed8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ece:	f043 0208 	orr.w	r2, r3, #8
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8003f9c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003eea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d103      	bne.n	8003efe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003efc:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f0c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f14:	041a      	lsls	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f32:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	061a      	lsls	r2, r3, #24
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	e005      	b.n	8003f80 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d3f3      	bcc.n	8003f74 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	4000a400 	.word	0x4000a400
 8003fa0:	40006800 	.word	0x40006800

08003fa4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	@ 0x24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003fc2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e00a      	b.n	8003fe6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003fd8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003fde:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fe0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fe4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ff0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003ff6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003ffc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	440b      	add	r3, r1
 8004018:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	3304      	adds	r3, #4
 8004024:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	3304      	adds	r3, #4
 8004030:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	e020      	b.n	800407a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3303      	adds	r3, #3
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	4413      	add	r3, r2
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3302      	adds	r3, #2
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	440b      	add	r3, r1
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004050:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3301      	adds	r3, #1
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	440b      	add	r3, r1
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800405e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	440a      	add	r2, r1
 8004066:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004068:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	3304      	adds	r3, #4
 8004072:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	3304      	adds	r3, #4
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	4a06      	ldr	r2, [pc, #24]	@ (8004098 <FDCAN_CopyMessageToRAM+0xf4>)
 8004080:	5cd3      	ldrb	r3, [r2, r3]
 8004082:	461a      	mov	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	4293      	cmp	r3, r2
 8004088:	d3d6      	bcc.n	8004038 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	3724      	adds	r7, #36	@ 0x24
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	08012f54 	.word	0x08012f54

0800409c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040aa:	e15a      	b.n	8004362 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	2101      	movs	r1, #1
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 814c 	beq.w	800435c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d005      	beq.n	80040dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d130      	bne.n	800413e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2203      	movs	r2, #3
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004112:	2201      	movs	r2, #1
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	f003 0201 	and.w	r2, r3, #1
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b03      	cmp	r3, #3
 8004148:	d017      	beq.n	800417a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	2203      	movs	r2, #3
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4013      	ands	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d123      	bne.n	80041ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	08da      	lsrs	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3208      	adds	r2, #8
 800418e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	220f      	movs	r2, #15
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	08da      	lsrs	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3208      	adds	r2, #8
 80041c8:	6939      	ldr	r1, [r7, #16]
 80041ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	2203      	movs	r2, #3
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0203 	and.w	r2, r3, #3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80a6 	beq.w	800435c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004210:	4b5b      	ldr	r3, [pc, #364]	@ (8004380 <HAL_GPIO_Init+0x2e4>)
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004214:	4a5a      	ldr	r2, [pc, #360]	@ (8004380 <HAL_GPIO_Init+0x2e4>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6613      	str	r3, [r2, #96]	@ 0x60
 800421c:	4b58      	ldr	r3, [pc, #352]	@ (8004380 <HAL_GPIO_Init+0x2e4>)
 800421e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004228:	4a56      	ldr	r2, [pc, #344]	@ (8004384 <HAL_GPIO_Init+0x2e8>)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	3302      	adds	r3, #2
 8004230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	220f      	movs	r2, #15
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4013      	ands	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004252:	d01f      	beq.n	8004294 <HAL_GPIO_Init+0x1f8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a4c      	ldr	r2, [pc, #304]	@ (8004388 <HAL_GPIO_Init+0x2ec>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d019      	beq.n	8004290 <HAL_GPIO_Init+0x1f4>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a4b      	ldr	r2, [pc, #300]	@ (800438c <HAL_GPIO_Init+0x2f0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d013      	beq.n	800428c <HAL_GPIO_Init+0x1f0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a4a      	ldr	r2, [pc, #296]	@ (8004390 <HAL_GPIO_Init+0x2f4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00d      	beq.n	8004288 <HAL_GPIO_Init+0x1ec>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a49      	ldr	r2, [pc, #292]	@ (8004394 <HAL_GPIO_Init+0x2f8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <HAL_GPIO_Init+0x1e8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a48      	ldr	r2, [pc, #288]	@ (8004398 <HAL_GPIO_Init+0x2fc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d101      	bne.n	8004280 <HAL_GPIO_Init+0x1e4>
 800427c:	2305      	movs	r3, #5
 800427e:	e00a      	b.n	8004296 <HAL_GPIO_Init+0x1fa>
 8004280:	2306      	movs	r3, #6
 8004282:	e008      	b.n	8004296 <HAL_GPIO_Init+0x1fa>
 8004284:	2304      	movs	r3, #4
 8004286:	e006      	b.n	8004296 <HAL_GPIO_Init+0x1fa>
 8004288:	2303      	movs	r3, #3
 800428a:	e004      	b.n	8004296 <HAL_GPIO_Init+0x1fa>
 800428c:	2302      	movs	r3, #2
 800428e:	e002      	b.n	8004296 <HAL_GPIO_Init+0x1fa>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_GPIO_Init+0x1fa>
 8004294:	2300      	movs	r3, #0
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	f002 0203 	and.w	r2, r2, #3
 800429c:	0092      	lsls	r2, r2, #2
 800429e:	4093      	lsls	r3, r2
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042a6:	4937      	ldr	r1, [pc, #220]	@ (8004384 <HAL_GPIO_Init+0x2e8>)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	3302      	adds	r3, #2
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042b4:	4b39      	ldr	r3, [pc, #228]	@ (800439c <HAL_GPIO_Init+0x300>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	43db      	mvns	r3, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4013      	ands	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042d8:	4a30      	ldr	r2, [pc, #192]	@ (800439c <HAL_GPIO_Init+0x300>)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042de:	4b2f      	ldr	r3, [pc, #188]	@ (800439c <HAL_GPIO_Init+0x300>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4013      	ands	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004302:	4a26      	ldr	r2, [pc, #152]	@ (800439c <HAL_GPIO_Init+0x300>)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004308:	4b24      	ldr	r3, [pc, #144]	@ (800439c <HAL_GPIO_Init+0x300>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	43db      	mvns	r3, r3
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4013      	ands	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800432c:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <HAL_GPIO_Init+0x300>)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004332:	4b1a      	ldr	r3, [pc, #104]	@ (800439c <HAL_GPIO_Init+0x300>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	43db      	mvns	r3, r3
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004356:	4a11      	ldr	r2, [pc, #68]	@ (800439c <HAL_GPIO_Init+0x300>)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	3301      	adds	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	f47f ae9d 	bne.w	80040ac <HAL_GPIO_Init+0x10>
  }
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40021000 	.word	0x40021000
 8004384:	40010000 	.word	0x40010000
 8004388:	48000400 	.word	0x48000400
 800438c:	48000800 	.word	0x48000800
 8004390:	48000c00 	.word	0x48000c00
 8004394:	48001000 	.word	0x48001000
 8004398:	48001400 	.word	0x48001400
 800439c:	40010400 	.word	0x40010400

080043a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
 80043bc:	e001      	b.n	80043c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043be:	2300      	movs	r3, #0
 80043c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
 80043dc:	4613      	mov	r3, r2
 80043de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043e0:	787b      	ldrb	r3, [r7, #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043ec:	e002      	b.n	80043f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4013      	ands	r3, r2
 8004418:	041a      	lsls	r2, r3, #16
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	43d9      	mvns	r1, r3
 800441e:	887b      	ldrh	r3, [r7, #2]
 8004420:	400b      	ands	r3, r1
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	619a      	str	r2, [r3, #24]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800443e:	4b08      	ldr	r3, [pc, #32]	@ (8004460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800444a:	4a05      	ldr	r2, [pc, #20]	@ (8004460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fd f92a 	bl	80016ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40010400 	.word	0x40010400

08004464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e08d      	b.n	8004592 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fd fd60 	bl	8001f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2224      	movs	r2, #36	@ 0x24
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d107      	bne.n	80044de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044da:	609a      	str	r2, [r3, #8]
 80044dc:	e006      	b.n	80044ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80044ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d108      	bne.n	8004506 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	e007      	b.n	8004516 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004514:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004528:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004538:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69d9      	ldr	r1, [r3, #28]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	461a      	mov	r2, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	817b      	strh	r3, [r7, #10]
 80045ae:	460b      	mov	r3, r1
 80045b0:	813b      	strh	r3, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	f040 80f9 	bne.w	80047b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_I2C_Mem_Write+0x34>
 80045ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0ed      	b.n	80047b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_I2C_Mem_Write+0x4e>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e0e6      	b.n	80047b8 <HAL_I2C_Mem_Write+0x21c>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045f2:	f7fd ff39 	bl	8002468 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	2319      	movs	r3, #25
 80045fe:	2201      	movs	r2, #1
 8004600:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fac3 	bl	8004b90 <I2C_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0d1      	b.n	80047b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2221      	movs	r2, #33	@ 0x21
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2240      	movs	r2, #64	@ 0x40
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004634:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800463c:	88f8      	ldrh	r0, [r7, #6]
 800463e:	893a      	ldrh	r2, [r7, #8]
 8004640:	8979      	ldrh	r1, [r7, #10]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	4603      	mov	r3, r0
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f9d3 	bl	80049f8 <I2C_RequestMemoryWrite>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0a9      	b.n	80047b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2bff      	cmp	r3, #255	@ 0xff
 800466c:	d90e      	bls.n	800468c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	22ff      	movs	r2, #255	@ 0xff
 8004672:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004678:	b2da      	uxtb	r2, r3
 800467a:	8979      	ldrh	r1, [r7, #10]
 800467c:	2300      	movs	r3, #0
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fc47 	bl	8004f18 <I2C_TransferConfig>
 800468a:	e00f      	b.n	80046ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469a:	b2da      	uxtb	r2, r3
 800469c:	8979      	ldrh	r1, [r7, #10]
 800469e:	2300      	movs	r3, #0
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fc36 	bl	8004f18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fac6 	bl	8004c42 <I2C_WaitOnTXISFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e07b      	b.n	80047b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d034      	beq.n	8004764 <HAL_I2C_Mem_Write+0x1c8>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d130      	bne.n	8004764 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	2200      	movs	r2, #0
 800470a:	2180      	movs	r1, #128	@ 0x80
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fa3f 	bl	8004b90 <I2C_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e04d      	b.n	80047b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2bff      	cmp	r3, #255	@ 0xff
 8004724:	d90e      	bls.n	8004744 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	22ff      	movs	r2, #255	@ 0xff
 800472a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004730:	b2da      	uxtb	r2, r3
 8004732:	8979      	ldrh	r1, [r7, #10]
 8004734:	2300      	movs	r3, #0
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fbeb 	bl	8004f18 <I2C_TransferConfig>
 8004742:	e00f      	b.n	8004764 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004752:	b2da      	uxtb	r2, r3
 8004754:	8979      	ldrh	r1, [r7, #10]
 8004756:	2300      	movs	r3, #0
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fbda 	bl	8004f18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d19e      	bne.n	80046ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 faac 	bl	8004cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e01a      	b.n	80047b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2220      	movs	r2, #32
 8004788:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6859      	ldr	r1, [r3, #4]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b0a      	ldr	r3, [pc, #40]	@ (80047c0 <HAL_I2C_Mem_Write+0x224>)
 8004796:	400b      	ands	r3, r1
 8004798:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e000      	b.n	80047b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
  }
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	fe00e800 	.word	0xfe00e800

080047c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	817b      	strh	r3, [r7, #10]
 80047d6:	460b      	mov	r3, r1
 80047d8:	813b      	strh	r3, [r7, #8]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	f040 80fd 	bne.w	80049e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_I2C_Mem_Read+0x34>
 80047f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0f1      	b.n	80049e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_I2C_Mem_Read+0x4e>
 800480e:	2302      	movs	r3, #2
 8004810:	e0ea      	b.n	80049e8 <HAL_I2C_Mem_Read+0x224>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800481a:	f7fd fe25 	bl	8002468 <HAL_GetTick>
 800481e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	2319      	movs	r3, #25
 8004826:	2201      	movs	r2, #1
 8004828:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f9af 	bl	8004b90 <I2C_WaitOnFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0d5      	b.n	80049e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2222      	movs	r2, #34	@ 0x22
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2240      	movs	r2, #64	@ 0x40
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800485c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004864:	88f8      	ldrh	r0, [r7, #6]
 8004866:	893a      	ldrh	r2, [r7, #8]
 8004868:	8979      	ldrh	r1, [r7, #10]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	4603      	mov	r3, r0
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f913 	bl	8004aa0 <I2C_RequestMemoryRead>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0ad      	b.n	80049e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2bff      	cmp	r3, #255	@ 0xff
 8004894:	d90e      	bls.n	80048b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	22ff      	movs	r2, #255	@ 0xff
 800489a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	8979      	ldrh	r1, [r7, #10]
 80048a4:	4b52      	ldr	r3, [pc, #328]	@ (80049f0 <HAL_I2C_Mem_Read+0x22c>)
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fb33 	bl	8004f18 <I2C_TransferConfig>
 80048b2:	e00f      	b.n	80048d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	8979      	ldrh	r1, [r7, #10]
 80048c6:	4b4a      	ldr	r3, [pc, #296]	@ (80049f0 <HAL_I2C_Mem_Read+0x22c>)
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fb22 	bl	8004f18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048da:	2200      	movs	r2, #0
 80048dc:	2104      	movs	r1, #4
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f956 	bl	8004b90 <I2C_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e07c      	b.n	80049e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d034      	beq.n	8004994 <HAL_I2C_Mem_Read+0x1d0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d130      	bne.n	8004994 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	2200      	movs	r2, #0
 800493a:	2180      	movs	r1, #128	@ 0x80
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f927 	bl	8004b90 <I2C_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e04d      	b.n	80049e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2bff      	cmp	r3, #255	@ 0xff
 8004954:	d90e      	bls.n	8004974 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	22ff      	movs	r2, #255	@ 0xff
 800495a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004960:	b2da      	uxtb	r2, r3
 8004962:	8979      	ldrh	r1, [r7, #10]
 8004964:	2300      	movs	r3, #0
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fad3 	bl	8004f18 <I2C_TransferConfig>
 8004972:	e00f      	b.n	8004994 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004982:	b2da      	uxtb	r2, r3
 8004984:	8979      	ldrh	r1, [r7, #10]
 8004986:	2300      	movs	r3, #0
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fac2 	bl	8004f18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d19a      	bne.n	80048d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f994 	bl	8004cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e01a      	b.n	80049e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2220      	movs	r2, #32
 80049b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <HAL_I2C_Mem_Read+0x230>)
 80049c6:	400b      	ands	r3, r1
 80049c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
  }
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	80002400 	.word	0x80002400
 80049f4:	fe00e800 	.word	0xfe00e800

080049f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	4608      	mov	r0, r1
 8004a02:	4611      	mov	r1, r2
 8004a04:	461a      	mov	r2, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	817b      	strh	r3, [r7, #10]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	813b      	strh	r3, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	8979      	ldrh	r1, [r7, #10]
 8004a18:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <I2C_RequestMemoryWrite+0xa4>)
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 fa79 	bl	8004f18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	69b9      	ldr	r1, [r7, #24]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f909 	bl	8004c42 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e02c      	b.n	8004a94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d105      	bne.n	8004a4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a40:	893b      	ldrh	r3, [r7, #8]
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a4a:	e015      	b.n	8004a78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a4c:	893b      	ldrh	r3, [r7, #8]
 8004a4e:	0a1b      	lsrs	r3, r3, #8
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	69b9      	ldr	r1, [r7, #24]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f8ef 	bl	8004c42 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e012      	b.n	8004a94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a6e:	893b      	ldrh	r3, [r7, #8]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2180      	movs	r1, #128	@ 0x80
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f884 	bl	8004b90 <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	80002000 	.word	0x80002000

08004aa0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	4611      	mov	r1, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	817b      	strh	r3, [r7, #10]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	813b      	strh	r3, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	8979      	ldrh	r1, [r7, #10]
 8004ac0:	4b20      	ldr	r3, [pc, #128]	@ (8004b44 <I2C_RequestMemoryRead+0xa4>)
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fa26 	bl	8004f18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	69b9      	ldr	r1, [r7, #24]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f8b6 	bl	8004c42 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e02c      	b.n	8004b3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d105      	bne.n	8004af2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae6:	893b      	ldrh	r3, [r7, #8]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	629a      	str	r2, [r3, #40]	@ 0x28
 8004af0:	e015      	b.n	8004b1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004af2:	893b      	ldrh	r3, [r7, #8]
 8004af4:	0a1b      	lsrs	r3, r3, #8
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	69b9      	ldr	r1, [r7, #24]
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f89c 	bl	8004c42 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e012      	b.n	8004b3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b14:	893b      	ldrh	r3, [r7, #8]
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2140      	movs	r1, #64	@ 0x40
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f831 	bl	8004b90 <I2C_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	80002000 	.word	0x80002000

08004b48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d103      	bne.n	8004b66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d007      	beq.n	8004b84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	619a      	str	r2, [r3, #24]
  }
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba0:	e03b      	b.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	6839      	ldr	r1, [r7, #0]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f8d6 	bl	8004d58 <I2C_IsErrorOccurred>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e041      	b.n	8004c3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bbc:	d02d      	beq.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fd fc53 	bl	8002468 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d122      	bne.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d113      	bne.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e00f      	b.n	8004c3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4013      	ands	r3, r2
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	bf0c      	ite	eq
 8004c2a:	2301      	moveq	r3, #1
 8004c2c:	2300      	movne	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d0b4      	beq.n	8004ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c4e:	e033      	b.n	8004cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f87f 	bl	8004d58 <I2C_IsErrorOccurred>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e031      	b.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c6a:	d025      	beq.n	8004cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6c:	f7fd fbfc 	bl	8002468 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d11a      	bne.n	8004cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d013      	beq.n	8004cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e007      	b.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d1c4      	bne.n	8004c50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cdc:	e02f      	b.n	8004d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f838 	bl	8004d58 <I2C_IsErrorOccurred>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e02d      	b.n	8004d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf2:	f7fd fbb9 	bl	8002468 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d302      	bcc.n	8004d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d11a      	bne.n	8004d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d013      	beq.n	8004d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e007      	b.n	8004d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d1c8      	bne.n	8004cde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	@ 0x28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d068      	beq.n	8004e56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2210      	movs	r2, #16
 8004d8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d8c:	e049      	b.n	8004e22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d94:	d045      	beq.n	8004e22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fd fb67 	bl	8002468 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <I2C_IsErrorOccurred+0x54>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d13a      	bne.n	8004e22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004db6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dce:	d121      	bne.n	8004e14 <I2C_IsErrorOccurred+0xbc>
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dd6:	d01d      	beq.n	8004e14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d01a      	beq.n	8004e14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004dee:	f7fd fb3b 	bl	8002468 <HAL_GetTick>
 8004df2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df4:	e00e      	b.n	8004e14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004df6:	f7fd fb37 	bl	8002468 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b19      	cmp	r3, #25
 8004e02:	d907      	bls.n	8004e14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	f043 0320 	orr.w	r3, r3, #32
 8004e0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e12:	e006      	b.n	8004e22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d1e9      	bne.n	8004df6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d003      	beq.n	8004e38 <I2C_IsErrorOccurred+0xe0>
 8004e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0aa      	beq.n	8004d8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d103      	bne.n	8004e48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2220      	movs	r2, #32
 8004e46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	f043 0304 	orr.w	r3, r3, #4
 8004e4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	f043 0308 	orr.w	r3, r3, #8
 8004e90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	f043 0302 	orr.w	r3, r3, #2
 8004eb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ebc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01c      	beq.n	8004f06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff fe3b 	bl	8004b48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6859      	ldr	r1, [r3, #4]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f14 <I2C_IsErrorOccurred+0x1bc>)
 8004ede:	400b      	ands	r3, r1
 8004ee0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004f06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3728      	adds	r7, #40	@ 0x28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	fe00e800 	.word	0xfe00e800

08004f18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	817b      	strh	r3, [r7, #10]
 8004f26:	4613      	mov	r3, r2
 8004f28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f2a:	897b      	ldrh	r3, [r7, #10]
 8004f2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f30:	7a7b      	ldrb	r3, [r7, #9]
 8004f32:	041b      	lsls	r3, r3, #16
 8004f34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	0d5b      	lsrs	r3, r3, #21
 8004f52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004f56:	4b08      	ldr	r3, [pc, #32]	@ (8004f78 <I2C_TransferConfig+0x60>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	ea02 0103 	and.w	r1, r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	03ff63ff 	.word	0x03ff63ff

08004f7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d138      	bne.n	8005004 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e032      	b.n	8005006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2224      	movs	r2, #36	@ 0x24
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6819      	ldr	r1, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	e000      	b.n	8005006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005004:	2302      	movs	r3, #2
  }
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b20      	cmp	r3, #32
 8005026:	d139      	bne.n	800509c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005032:	2302      	movs	r3, #2
 8005034:	e033      	b.n	800509e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2224      	movs	r2, #36	@ 0x24
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0201 	bic.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005064:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	e000      	b.n	800509e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800509c:	2302      	movs	r3, #2
  }
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0c0      	b.n	800523e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f00a fba7 	bl	800f824 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2203      	movs	r2, #3
 80050da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f003 fef1 	bl	8008eca <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e8:	2300      	movs	r3, #0
 80050ea:	73fb      	strb	r3, [r7, #15]
 80050ec:	e03e      	b.n	800516c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050ee:	7bfa      	ldrb	r2, [r7, #15]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	440b      	add	r3, r1
 80050fc:	3311      	adds	r3, #17
 80050fe:	2201      	movs	r2, #1
 8005100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005102:	7bfa      	ldrb	r2, [r7, #15]
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	440b      	add	r3, r1
 8005110:	3310      	adds	r3, #16
 8005112:	7bfa      	ldrb	r2, [r7, #15]
 8005114:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005116:	7bfa      	ldrb	r2, [r7, #15]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	440b      	add	r3, r1
 8005124:	3313      	adds	r3, #19
 8005126:	2200      	movs	r2, #0
 8005128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800512a:	7bfa      	ldrb	r2, [r7, #15]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	440b      	add	r3, r1
 8005138:	3320      	adds	r3, #32
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800513e:	7bfa      	ldrb	r2, [r7, #15]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	440b      	add	r3, r1
 800514c:	3324      	adds	r3, #36	@ 0x24
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	440b      	add	r3, r1
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	3301      	adds	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	791b      	ldrb	r3, [r3, #4]
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	429a      	cmp	r2, r3
 8005174:	d3bb      	bcc.n	80050ee <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
 800517a:	e044      	b.n	8005206 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800517c:	7bfa      	ldrb	r2, [r7, #15]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	440b      	add	r3, r1
 800518a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005192:	7bfa      	ldrb	r2, [r7, #15]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	440b      	add	r3, r1
 80051a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	440b      	add	r3, r1
 80051b6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051d4:	7bfa      	ldrb	r2, [r7, #15]
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	440b      	add	r3, r1
 80051e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051ea:	7bfa      	ldrb	r2, [r7, #15]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	440b      	add	r3, r1
 80051f8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	3301      	adds	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	791b      	ldrb	r3, [r3, #4]
 800520a:	7bfa      	ldrb	r2, [r7, #15]
 800520c:	429a      	cmp	r2, r3
 800520e:	d3b5      	bcc.n	800517c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	e893 0006 	ldmia.w	r3, {r1, r2}
 800521c:	f003 fe70 	bl	8008f00 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7a9b      	ldrb	r3, [r3, #10]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d102      	bne.n	800523c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f001 fc0e 	bl	8006a58 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_PCD_Start+0x16>
 8005258:	2302      	movs	r3, #2
 800525a:	e012      	b.n	8005282 <HAL_PCD_Start+0x3c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4618      	mov	r0, r3
 800526a:	f003 fe17 	bl	8008e9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f005 fbf4 	bl	800aa60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f005 fbf9 	bl	800aa8e <USB_ReadInterrupts>
 800529c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fb06 	bl	80058ba <PCD_EP_ISR_Handler>

    return;
 80052ae:	e110      	b.n	80054d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d013      	beq.n	80052e2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052cc:	b292      	uxth	r2, r2
 80052ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f00a fb37 	bl	800f946 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80052d8:	2100      	movs	r1, #0
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8fc 	bl	80054d8 <HAL_PCD_SetAddress>

    return;
 80052e0:	e0f7      	b.n	80054d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00c      	beq.n	8005306 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052fe:	b292      	uxth	r2, r2
 8005300:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005304:	e0e5      	b.n	80054d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00c      	beq.n	800532a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005322:	b292      	uxth	r2, r2
 8005324:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005328:	e0d3      	b.n	80054d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d034      	beq.n	800539e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0204 	bic.w	r2, r2, #4
 8005346:	b292      	uxth	r2, r2
 8005348:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005354:	b29a      	uxth	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0208 	bic.w	r2, r2, #8
 800535e:	b292      	uxth	r2, r2
 8005360:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800536a:	2b01      	cmp	r3, #1
 800536c:	d107      	bne.n	800537e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005376:	2100      	movs	r1, #0
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f00a fcd7 	bl	800fd2c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f00a fb1a 	bl	800f9b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800538c:	b29a      	uxth	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005396:	b292      	uxth	r2, r2
 8005398:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800539c:	e099      	b.n	80054d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d027      	beq.n	80053f8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0208 	orr.w	r2, r2, #8
 80053ba:	b292      	uxth	r2, r2
 80053bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053d2:	b292      	uxth	r2, r2
 80053d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0204 	orr.w	r2, r2, #4
 80053ea:	b292      	uxth	r2, r2
 80053ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f00a fac7 	bl	800f984 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80053f6:	e06c      	b.n	80054d2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d040      	beq.n	8005484 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005414:	b292      	uxth	r2, r2
 8005416:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005420:	2b00      	cmp	r3, #0
 8005422:	d12b      	bne.n	800547c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0204 	orr.w	r2, r2, #4
 8005436:	b292      	uxth	r2, r2
 8005438:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005444:	b29a      	uxth	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0208 	orr.w	r2, r2, #8
 800544e:	b292      	uxth	r2, r2
 8005450:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005464:	b29b      	uxth	r3, r3
 8005466:	089b      	lsrs	r3, r3, #2
 8005468:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005472:	2101      	movs	r1, #1
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f00a fc59 	bl	800fd2c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800547a:	e02a      	b.n	80054d2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f00a fa81 	bl	800f984 <HAL_PCD_SuspendCallback>
    return;
 8005482:	e026      	b.n	80054d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00f      	beq.n	80054ae <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005496:	b29a      	uxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80054a0:	b292      	uxth	r2, r2
 80054a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f00a fa3f 	bl	800f92a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80054ac:	e011      	b.n	80054d2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00c      	beq.n	80054d2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054ca:	b292      	uxth	r2, r2
 80054cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80054d0:	bf00      	nop
  }
}
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_PCD_SetAddress+0x1a>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e012      	b.n	8005518 <HAL_PCD_SetAddress+0x40>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	4611      	mov	r1, r2
 8005508:	4618      	mov	r0, r3
 800550a:	f005 fa95 	bl	800aa38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	461a      	mov	r2, r3
 800552e:	4603      	mov	r3, r0
 8005530:	70fb      	strb	r3, [r7, #3]
 8005532:	460b      	mov	r3, r1
 8005534:	803b      	strh	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800553e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da0e      	bge.n	8005564 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	f003 0207 	and.w	r2, r3, #7
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	3310      	adds	r3, #16
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	4413      	add	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	705a      	strb	r2, [r3, #1]
 8005562:	e00e      	b.n	8005582 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	f003 0207 	and.w	r2, r3, #7
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	4413      	add	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	b2da      	uxtb	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800558e:	883b      	ldrh	r3, [r7, #0]
 8005590:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	78ba      	ldrb	r2, [r7, #2]
 800559c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800559e:	78bb      	ldrb	r3, [r7, #2]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d102      	bne.n	80055aa <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_PCD_EP_Open+0x98>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e00e      	b.n	80055d6 <HAL_PCD_EP_Open+0xb6>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68f9      	ldr	r1, [r7, #12]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f003 fcb8 	bl	8008f3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80055d4:	7afb      	ldrb	r3, [r7, #11]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	da0e      	bge.n	8005610 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 0207 	and.w	r2, r3, #7
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	3310      	adds	r3, #16
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	705a      	strb	r2, [r3, #1]
 800560e:	e00e      	b.n	800562e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	f003 0207 	and.w	r2, r3, #7
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	b2da      	uxtb	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_PCD_EP_Close+0x6a>
 8005644:	2302      	movs	r3, #2
 8005646:	e00e      	b.n	8005666 <HAL_PCD_EP_Close+0x88>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	4618      	mov	r0, r3
 8005658:	f004 f958 	bl	800990c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	460b      	mov	r3, r1
 800567c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	f003 0207 	and.w	r2, r3, #7
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2200      	movs	r2, #0
 80056a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2200      	movs	r2, #0
 80056ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ae:	7afb      	ldrb	r3, [r7, #11]
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6979      	ldr	r1, [r7, #20]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f004 fb10 	bl	8009ce6 <USB_EPStartXfer>

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 0207 	and.w	r2, r3, #7
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	460b      	mov	r3, r1
 800570e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005710:	7afb      	ldrb	r3, [r7, #11]
 8005712:	f003 0207 	and.w	r2, r3, #7
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	3310      	adds	r3, #16
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2200      	movs	r2, #0
 8005744:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2201      	movs	r2, #1
 800574a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800574c:	7afb      	ldrb	r3, [r7, #11]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	b2da      	uxtb	r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	4618      	mov	r0, r3
 8005760:	f004 fac1 	bl	8009ce6 <USB_EPStartXfer>

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	7912      	ldrb	r2, [r2, #4]
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e03e      	b.n	800580a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800578c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005790:	2b00      	cmp	r3, #0
 8005792:	da0e      	bge.n	80057b2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	f003 0207 	and.w	r2, r3, #7
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	3310      	adds	r3, #16
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	4413      	add	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	705a      	strb	r2, [r3, #1]
 80057b0:	e00c      	b.n	80057cc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4413      	add	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_PCD_EP_SetStall+0x7e>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e00e      	b.n	800580a <HAL_PCD_EP_SetStall+0x9c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f005 f822 	bl	800a844 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	7912      	ldrb	r2, [r2, #4]
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e040      	b.n	80058b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005834:	2b00      	cmp	r3, #0
 8005836:	da0e      	bge.n	8005856 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	f003 0207 	and.w	r2, r3, #7
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	3310      	adds	r3, #16
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	4413      	add	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	705a      	strb	r2, [r3, #1]
 8005854:	e00e      	b.n	8005874 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	f003 0207 	and.w	r2, r3, #7
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_PCD_EP_ClrStall+0x82>
 8005890:	2302      	movs	r3, #2
 8005892:	e00e      	b.n	80058b2 <HAL_PCD_EP_ClrStall+0xa0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f005 f81f 	bl	800a8e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b092      	sub	sp, #72	@ 0x48
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058c2:	e333      	b.n	8005f2c <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058cc:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80058ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80058da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f040 8108 	bne.w	8005af4 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80058e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d14c      	bne.n	8005988 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80058fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fe:	813b      	strh	r3, [r7, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	893b      	ldrh	r3, [r7, #8]
 8005906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590e:	b29b      	uxth	r3, r3
 8005910:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3310      	adds	r3, #16
 8005916:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005920:	b29b      	uxth	r3, r3
 8005922:	461a      	mov	r2, r3
 8005924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4413      	add	r3, r2
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	4413      	add	r3, r2
 8005932:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800593c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800593e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	441a      	add	r2, r3
 800594a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800594c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800594e:	2100      	movs	r1, #0
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f009 ffd0 	bl	800f8f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	7b1b      	ldrb	r3, [r3, #12]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 82e5 	beq.w	8005f2c <PCD_EP_ISR_Handler+0x672>
 8005962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 82e0 	bne.w	8005f2c <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	7b1b      	ldrb	r3, [r3, #12]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005976:	b2da      	uxtb	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	731a      	strb	r2, [r3, #12]
 8005986:	e2d1      	b.n	8005f2c <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800598e:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005998:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800599a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d032      	beq.n	8005a08 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4413      	add	r3, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	4413      	add	r3, r2
 80059bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059c8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80059d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059d6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80059d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059da:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f005 f8a8 	bl	800ab32 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80059ee:	4013      	ands	r3, r2
 80059f0:	817b      	strh	r3, [r7, #10]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	897a      	ldrh	r2, [r7, #10]
 80059f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059fc:	b292      	uxth	r2, r2
 80059fe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f009 ff4b 	bl	800f89c <HAL_PCD_SetupStageCallback>
 8005a06:	e291      	b.n	8005f2c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a08:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f280 828d 	bge.w	8005f2c <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005a1e:	4013      	ands	r3, r2
 8005a20:	81fb      	strh	r3, [r7, #14]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	89fa      	ldrh	r2, [r7, #14]
 8005a28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a56:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d019      	beq.n	8005a94 <PCD_EP_ISR_Handler+0x1da>
 8005a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d015      	beq.n	8005a94 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a6e:	6959      	ldr	r1, [r3, #20]
 8005a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a72:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a76:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f005 f85a 	bl	800ab32 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	441a      	add	r2, r3
 8005a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a8a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f009 ff16 	bl	800f8c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005a9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f040 8242 	bne.w	8005f2c <PCD_EP_ISR_Handler+0x672>
 8005aa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005aaa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005aae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ab2:	f000 823b 	beq.w	8005f2c <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac6:	81bb      	strh	r3, [r7, #12]
 8005ac8:	89bb      	ldrh	r3, [r7, #12]
 8005aca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ace:	81bb      	strh	r3, [r7, #12]
 8005ad0:	89bb      	ldrh	r3, [r7, #12]
 8005ad2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ad6:	81bb      	strh	r3, [r7, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	89bb      	ldrh	r3, [r7, #12]
 8005ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	8013      	strh	r3, [r2, #0]
 8005af2:	e21b      	b.n	8005f2c <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b06:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f280 80f1 	bge.w	8005cf2 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005b26:	4013      	ands	r3, r2
 8005b28:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005b3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b3e:	b292      	uxth	r2, r2
 8005b40:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005b42:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4413      	add	r3, r2
 8005b56:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b5a:	7b1b      	ldrb	r3, [r3, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d123      	bne.n	8005ba8 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4413      	add	r3, r2
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b84:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8005b88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 808b 	beq.w	8005ca8 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b98:	6959      	ldr	r1, [r3, #20]
 8005b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b9c:	88da      	ldrh	r2, [r3, #6]
 8005b9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ba2:	f004 ffc6 	bl	800ab32 <USB_ReadPMA>
 8005ba6:	e07f      	b.n	8005ca8 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005baa:	78db      	ldrb	r3, [r3, #3]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d109      	bne.n	8005bc4 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005bb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f9c6 	bl	8005f48 <HAL_PCD_EP_DB_Receive>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005bc2:	e071      	b.n	8005ca8 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bde:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	441a      	add	r2, r3
 8005bee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d022      	beq.n	8005c64 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	4413      	add	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	4413      	add	r3, r2
 8005c38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c42:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005c46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d02c      	beq.n	8005ca8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c54:	6959      	ldr	r1, [r3, #20]
 8005c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c58:	891a      	ldrh	r2, [r3, #8]
 8005c5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c5e:	f004 ff68 	bl	800ab32 <USB_ReadPMA>
 8005c62:	e021      	b.n	8005ca8 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4413      	add	r3, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c88:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005c8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d009      	beq.n	8005ca8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c9a:	6959      	ldr	r1, [r3, #20]
 8005c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c9e:	895a      	ldrh	r2, [r3, #10]
 8005ca0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ca4:	f004 ff45 	bl	800ab32 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005cb0:	441a      	add	r2, r3
 8005cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005cbe:	441a      	add	r2, r3
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cc2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d005      	beq.n	8005cd8 <PCD_EP_ISR_Handler+0x41e>
 8005ccc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d206      	bcs.n	8005ce6 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f009 fdee 	bl	800f8c0 <HAL_PCD_DataOutStageCallback>
 8005ce4:	e005      	b.n	8005cf2 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cec:	4618      	mov	r0, r3
 8005cee:	f003 fffa 	bl	8009ce6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005cf2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8117 	beq.w	8005f2c <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005cfe:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	3310      	adds	r3, #16
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	4413      	add	r3, r2
 8005d10:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	441a      	add	r2, r3
 8005d3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d4c:	78db      	ldrb	r3, [r3, #3]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	f040 80a1 	bne.w	8005e96 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8005d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d56:	2200      	movs	r2, #0
 8005d58:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d5c:	7b1b      	ldrb	r3, [r3, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8092 	beq.w	8005e88 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d046      	beq.n	8005dfc <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d126      	bne.n	8005dc4 <PCD_EP_ISR_Handler+0x50a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	00da      	lsls	r2, r3, #3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4413      	add	r3, r2
 8005d98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	801a      	strh	r2, [r3, #0]
 8005dc2:	e061      	b.n	8005e88 <PCD_EP_ISR_Handler+0x5ce>
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d15d      	bne.n	8005e88 <PCD_EP_ISR_Handler+0x5ce>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	00da      	lsls	r2, r3, #3
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2200      	movs	r2, #0
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	e045      	b.n	8005e88 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d126      	bne.n	8005e58 <PCD_EP_ISR_Handler+0x59e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	4413      	add	r3, r2
 8005e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	00da      	lsls	r2, r3, #3
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	e017      	b.n	8005e88 <PCD_EP_ISR_Handler+0x5ce>
 8005e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d113      	bne.n	8005e88 <PCD_EP_ISR_Handler+0x5ce>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6e:	4413      	add	r3, r2
 8005e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	00da      	lsls	r2, r3, #3
 8005e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	2200      	movs	r2, #0
 8005e86:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f009 fd31 	bl	800f8f6 <HAL_PCD_DataInStageCallback>
 8005e94:	e04a      	b.n	8005f2c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005e96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d13f      	bne.n	8005f20 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec4:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d906      	bls.n	8005ede <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8005ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed2:	699a      	ldr	r2, [r3, #24]
 8005ed4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eda:	619a      	str	r2, [r3, #24]
 8005edc:	e002      	b.n	8005ee4 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f009 fcff 	bl	800f8f6 <HAL_PCD_DataInStageCallback>
 8005ef8:	e018      	b.n	8005f2c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005f00:	441a      	add	r2, r3
 8005f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f04:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f08:	69da      	ldr	r2, [r3, #28]
 8005f0a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005f0c:	441a      	add	r2, r3
 8005f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f10:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f003 fee4 	bl	8009ce6 <USB_EPStartXfer>
 8005f1e:	e005      	b.n	8005f2c <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005f20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f22:	461a      	mov	r2, r3
 8005f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f917 	bl	800615a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	b21b      	sxth	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f6ff acc3 	blt.w	80058c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3748      	adds	r7, #72	@ 0x48
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4613      	mov	r3, r2
 8005f54:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d07c      	beq.n	800605a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	4413      	add	r3, r2
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f84:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	8b7b      	ldrh	r3, [r7, #26]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d306      	bcc.n	8005f9e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	8b7b      	ldrh	r3, [r7, #26]
 8005f96:	1ad2      	subs	r2, r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	619a      	str	r2, [r3, #24]
 8005f9c:	e002      	b.n	8005fa4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d123      	bne.n	8005ff4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc6:	833b      	strh	r3, [r7, #24]
 8005fc8:	8b3b      	ldrh	r3, [r7, #24]
 8005fca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005fce:	833b      	strh	r3, [r7, #24]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	8b3b      	ldrh	r3, [r7, #24]
 8005fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01f      	beq.n	800603e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006018:	82fb      	strh	r3, [r7, #22]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	8afb      	ldrh	r3, [r7, #22]
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006036:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800603e:	8b7b      	ldrh	r3, [r7, #26]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8085 	beq.w	8006150 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6959      	ldr	r1, [r3, #20]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	891a      	ldrh	r2, [r3, #8]
 8006052:	8b7b      	ldrh	r3, [r7, #26]
 8006054:	f004 fd6d 	bl	800ab32 <USB_ReadPMA>
 8006058:	e07a      	b.n	8006150 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006062:	b29b      	uxth	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4413      	add	r3, r2
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	4413      	add	r3, r2
 8006074:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800607e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	8b7b      	ldrh	r3, [r7, #26]
 8006086:	429a      	cmp	r2, r3
 8006088:	d306      	bcc.n	8006098 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	8b7b      	ldrh	r3, [r7, #26]
 8006090:	1ad2      	subs	r2, r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	619a      	str	r2, [r3, #24]
 8006096:	e002      	b.n	800609e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2200      	movs	r2, #0
 800609c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d123      	bne.n	80060ee <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c0:	83fb      	strh	r3, [r7, #30]
 80060c2:	8bfb      	ldrh	r3, [r7, #30]
 80060c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80060c8:	83fb      	strh	r3, [r7, #30]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8bfb      	ldrh	r3, [r7, #30]
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11f      	bne.n	8006138 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006112:	83bb      	strh	r3, [r7, #28]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	441a      	add	r2, r3
 8006122:	8bbb      	ldrh	r3, [r7, #28]
 8006124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800612c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006130:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006134:	b29b      	uxth	r3, r3
 8006136:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006138:	8b7b      	ldrh	r3, [r7, #26]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	6959      	ldr	r1, [r3, #20]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	895a      	ldrh	r2, [r3, #10]
 800614a:	8b7b      	ldrh	r3, [r7, #26]
 800614c:	f004 fcf1 	bl	800ab32 <USB_ReadPMA>
    }
  }

  return count;
 8006150:	8b7b      	ldrh	r3, [r7, #26]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b0a6      	sub	sp, #152	@ 0x98
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	4613      	mov	r3, r2
 8006166:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 81f7 	beq.w	8006562 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800617c:	b29b      	uxth	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4413      	add	r3, r2
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	4413      	add	r3, r2
 800618e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006198:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d907      	bls.n	80061b8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061b0:	1ad2      	subs	r2, r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	619a      	str	r2, [r3, #24]
 80061b6:	e002      	b.n	80061be <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f040 80e1 	bne.w	800638a <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	785b      	ldrb	r3, [r3, #1]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d126      	bne.n	800621e <HAL_PCD_EP_DB_Transmit+0xc4>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061de:	b29b      	uxth	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	4413      	add	r3, r2
 80061e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	00da      	lsls	r2, r3, #3
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	4413      	add	r3, r2
 80061f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006202:	b29a      	uxth	r2, r3
 8006204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29b      	uxth	r3, r3
 800620e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006216:	b29a      	uxth	r2, r3
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e01a      	b.n	8006254 <HAL_PCD_EP_DB_Transmit+0xfa>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d116      	bne.n	8006254 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006234:	b29b      	uxth	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623a:	4413      	add	r3, r2
 800623c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	00da      	lsls	r2, r3, #3
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	4413      	add	r3, r2
 8006248:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800624c:	637b      	str	r3, [r7, #52]	@ 0x34
 800624e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006250:	2200      	movs	r2, #0
 8006252:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d126      	bne.n	80062b0 <HAL_PCD_EP_DB_Transmit+0x156>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	623b      	str	r3, [r7, #32]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006270:	b29b      	uxth	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	4413      	add	r3, r2
 8006278:	623b      	str	r3, [r7, #32]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	00da      	lsls	r2, r3, #3
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	4413      	add	r3, r2
 8006284:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006294:	b29a      	uxth	r2, r3
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	801a      	strh	r2, [r3, #0]
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	e017      	b.n	80062e0 <HAL_PCD_EP_DB_Transmit+0x186>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d113      	bne.n	80062e0 <HAL_PCD_EP_DB_Transmit+0x186>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	4413      	add	r3, r2
 80062c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	00da      	lsls	r2, r3, #3
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	4413      	add	r3, r2
 80062d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	2200      	movs	r2, #0
 80062de:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	78db      	ldrb	r3, [r3, #3]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d123      	bne.n	8006330 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006302:	837b      	strh	r3, [r7, #26]
 8006304:	8b7b      	ldrh	r3, [r7, #26]
 8006306:	f083 0320 	eor.w	r3, r3, #32
 800630a:	837b      	strh	r3, [r7, #26]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	8b7b      	ldrh	r3, [r7, #26]
 800631c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006320:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006324:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	4619      	mov	r1, r3
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f009 fadd 	bl	800f8f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d01f      	beq.n	8006386 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800635c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006360:	833b      	strh	r3, [r7, #24]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	441a      	add	r2, r3
 8006370:	8b3b      	ldrh	r3, [r7, #24]
 8006372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800637a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800637e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006382:	b29b      	uxth	r3, r3
 8006384:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	e31f      	b.n	80069ca <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d021      	beq.n	80063d8 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	441a      	add	r2, r3
 80063c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063de:	2b01      	cmp	r3, #1
 80063e0:	f040 82ca 	bne.w	8006978 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	695a      	ldr	r2, [r3, #20]
 80063e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063ec:	441a      	add	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063fa:	441a      	add	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	429a      	cmp	r2, r3
 800640a:	d309      	bcc.n	8006420 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6a1a      	ldr	r2, [r3, #32]
 8006416:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006418:	1ad2      	subs	r2, r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	621a      	str	r2, [r3, #32]
 800641e:	e015      	b.n	800644c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d107      	bne.n	8006438 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8006428:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800642c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006436:	e009      	b.n	800644c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2200      	movs	r2, #0
 800644a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	785b      	ldrb	r3, [r3, #1]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d15f      	bne.n	8006514 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	643b      	str	r3, [r7, #64]	@ 0x40
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006462:	b29b      	uxth	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006468:	4413      	add	r3, r2
 800646a:	643b      	str	r3, [r7, #64]	@ 0x40
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	00da      	lsls	r2, r3, #3
 8006472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006474:	4413      	add	r3, r2
 8006476:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800647a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800647c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006486:	b29a      	uxth	r2, r3
 8006488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <HAL_PCD_EP_DB_Transmit+0x34e>
 8006492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	e051      	b.n	800654c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80064a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80064ac:	d816      	bhi.n	80064dc <HAL_PCD_EP_DB_Transmit+0x382>
 80064ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80064be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c0:	3301      	adds	r3, #1
 80064c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	029b      	lsls	r3, r3, #10
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	4313      	orrs	r3, r2
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	e037      	b.n	800654c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80064dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80064e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <HAL_PCD_EP_DB_Transmit+0x398>
 80064ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ee:	3b01      	subs	r3, #1
 80064f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80064f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	029b      	lsls	r3, r3, #10
 80064fe:	b29b      	uxth	r3, r3
 8006500:	4313      	orrs	r3, r2
 8006502:	b29b      	uxth	r3, r3
 8006504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650c:	b29a      	uxth	r2, r3
 800650e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	e01b      	b.n	800654c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d117      	bne.n	800654c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800652a:	b29b      	uxth	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006530:	4413      	add	r3, r2
 8006532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	00da      	lsls	r2, r3, #3
 800653a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800653c:	4413      	add	r3, r2
 800653e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006542:	647b      	str	r3, [r7, #68]	@ 0x44
 8006544:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006546:	b29a      	uxth	r2, r3
 8006548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800654a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	6959      	ldr	r1, [r3, #20]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	891a      	ldrh	r2, [r3, #8]
 8006558:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800655a:	b29b      	uxth	r3, r3
 800655c:	f004 faa7 	bl	800aaae <USB_WritePMA>
 8006560:	e20a      	b.n	8006978 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800656a:	b29b      	uxth	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	4413      	add	r3, r2
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	4413      	add	r3, r2
 800657c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006586:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006592:	429a      	cmp	r2, r3
 8006594:	d307      	bcc.n	80065a6 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800659e:	1ad2      	subs	r2, r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	619a      	str	r2, [r3, #24]
 80065a4:	e002      	b.n	80065ac <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2200      	movs	r2, #0
 80065aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 80f6 	bne.w	80067a2 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d126      	bne.n	800660c <HAL_PCD_EP_DB_Transmit+0x4b2>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065d2:	4413      	add	r3, r2
 80065d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	00da      	lsls	r2, r3, #3
 80065dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065de:	4413      	add	r3, r2
 80065e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80065e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065f4:	801a      	strh	r2, [r3, #0]
 80065f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006604:	b29a      	uxth	r2, r3
 8006606:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	e01a      	b.n	8006642 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d116      	bne.n	8006642 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006622:	b29b      	uxth	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006628:	4413      	add	r3, r2
 800662a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	00da      	lsls	r2, r3, #3
 8006632:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006634:	4413      	add	r3, r2
 8006636:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800663a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800663c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800663e:	2200      	movs	r2, #0
 8006640:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	785b      	ldrb	r3, [r3, #1]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d12f      	bne.n	80066b2 <HAL_PCD_EP_DB_Transmit+0x558>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006662:	b29b      	uxth	r3, r3
 8006664:	461a      	mov	r2, r3
 8006666:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800666a:	4413      	add	r3, r2
 800666c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	00da      	lsls	r2, r3, #3
 8006676:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800667a:	4413      	add	r3, r2
 800667c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006684:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006690:	b29a      	uxth	r2, r3
 8006692:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	e01c      	b.n	80066ec <HAL_PCD_EP_DB_Transmit+0x592>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d118      	bne.n	80066ec <HAL_PCD_EP_DB_Transmit+0x592>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066ca:	4413      	add	r3, r2
 80066cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	00da      	lsls	r2, r3, #3
 80066d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066da:	4413      	add	r3, r2
 80066dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80066e8:	2200      	movs	r2, #0
 80066ea:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	78db      	ldrb	r3, [r3, #3]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d127      	bne.n	8006744 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800670a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800670e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006712:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006716:	f083 0320 	eor.w	r3, r3, #32
 800671a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	441a      	add	r2, r3
 800672c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006730:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006734:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006738:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800673c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006740:	b29b      	uxth	r3, r3
 8006742:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	4619      	mov	r1, r3
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f009 f8d3 	bl	800f8f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d121      	bne.n	800679e <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006774:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800678a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800678e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006792:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800679a:	b29b      	uxth	r3, r3
 800679c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e113      	b.n	80069ca <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d121      	bne.n	80067f0 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	441a      	add	r2, r3
 80067d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80067dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	f040 80be 	bne.w	8006978 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	695a      	ldr	r2, [r3, #20]
 8006800:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006804:	441a      	add	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	69da      	ldr	r2, [r3, #28]
 800680e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006812:	441a      	add	r2, r3
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6a1a      	ldr	r2, [r3, #32]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	429a      	cmp	r2, r3
 8006822:	d309      	bcc.n	8006838 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	6a1a      	ldr	r2, [r3, #32]
 800682e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006830:	1ad2      	subs	r2, r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	621a      	str	r2, [r3, #32]
 8006836:	e015      	b.n	8006864 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d107      	bne.n	8006850 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8006840:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006844:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800684e:	e009      	b.n	8006864 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2200      	movs	r2, #0
 800685a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d15f      	bne.n	8006932 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006880:	b29b      	uxth	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006886:	4413      	add	r3, r2
 8006888:	66bb      	str	r3, [r7, #104]	@ 0x68
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	00da      	lsls	r2, r3, #3
 8006890:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006892:	4413      	add	r3, r2
 8006894:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006898:	667b      	str	r3, [r7, #100]	@ 0x64
 800689a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <HAL_PCD_EP_DB_Transmit+0x76c>
 80068b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068be:	b29a      	uxth	r2, r3
 80068c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068c2:	801a      	strh	r2, [r3, #0]
 80068c4:	e04e      	b.n	8006964 <HAL_PCD_EP_DB_Transmit+0x80a>
 80068c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80068ca:	d816      	bhi.n	80068fa <HAL_PCD_EP_DB_Transmit+0x7a0>
 80068cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80068d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_PCD_EP_DB_Transmit+0x788>
 80068dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068de:	3301      	adds	r3, #1
 80068e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80068e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	029b      	lsls	r3, r3, #10
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	4313      	orrs	r3, r2
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	e034      	b.n	8006964 <HAL_PCD_EP_DB_Transmit+0x80a>
 80068fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8006900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2b00      	cmp	r3, #0
 8006908:	d102      	bne.n	8006910 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800690a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800690c:	3b01      	subs	r3, #1
 800690e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29a      	uxth	r2, r3
 8006916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006918:	b29b      	uxth	r3, r3
 800691a:	029b      	lsls	r3, r3, #10
 800691c:	b29b      	uxth	r3, r3
 800691e:	4313      	orrs	r3, r2
 8006920:	b29b      	uxth	r3, r3
 8006922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692a:	b29a      	uxth	r2, r3
 800692c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	e018      	b.n	8006964 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d114      	bne.n	8006964 <HAL_PCD_EP_DB_Transmit+0x80a>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006942:	b29b      	uxth	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006948:	4413      	add	r3, r2
 800694a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	00da      	lsls	r2, r3, #3
 8006952:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006954:	4413      	add	r3, r2
 8006956:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800695a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800695c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800695e:	b29a      	uxth	r2, r3
 8006960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006962:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6959      	ldr	r1, [r3, #20]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	895a      	ldrh	r2, [r3, #10]
 8006970:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006972:	b29b      	uxth	r3, r3
 8006974:	f004 f89b 	bl	800aaae <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006992:	82fb      	strh	r3, [r7, #22]
 8006994:	8afb      	ldrh	r3, [r7, #22]
 8006996:	f083 0310 	eor.w	r3, r3, #16
 800699a:	82fb      	strh	r3, [r7, #22]
 800699c:	8afb      	ldrh	r3, [r7, #22]
 800699e:	f083 0320 	eor.w	r3, r3, #32
 80069a2:	82fb      	strh	r3, [r7, #22]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	8afb      	ldrh	r3, [r7, #22]
 80069b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3798      	adds	r7, #152	@ 0x98
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b087      	sub	sp, #28
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	607b      	str	r3, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	817b      	strh	r3, [r7, #10]
 80069e0:	4613      	mov	r3, r2
 80069e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80069e4:	897b      	ldrh	r3, [r7, #10]
 80069e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069f0:	897b      	ldrh	r3, [r7, #10]
 80069f2:	f003 0207 	and.w	r2, r3, #7
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	3310      	adds	r3, #16
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e009      	b.n	8006a1c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a08:	897a      	ldrh	r2, [r7, #10]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006a1c:	893b      	ldrh	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d107      	bne.n	8006a32 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2200      	movs	r2, #0
 8006a26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	80da      	strh	r2, [r3, #6]
 8006a30:	e00b      	b.n	8006a4a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2201      	movs	r2, #1
 8006a36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	0c1b      	lsrs	r3, r3, #16
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f043 0302 	orr.w	r3, r3, #2
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d141      	bne.n	8006b3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006aba:	4b4b      	ldr	r3, [pc, #300]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac6:	d131      	bne.n	8006b2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ac8:	4b47      	ldr	r3, [pc, #284]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ace:	4a46      	ldr	r2, [pc, #280]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ad4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ad8:	4b43      	ldr	r3, [pc, #268]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ae0:	4a41      	ldr	r2, [pc, #260]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ae6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ae8:	4b40      	ldr	r3, [pc, #256]	@ (8006bec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2232      	movs	r2, #50	@ 0x32
 8006aee:	fb02 f303 	mul.w	r3, r2, r3
 8006af2:	4a3f      	ldr	r2, [pc, #252]	@ (8006bf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006af4:	fba2 2303 	umull	r2, r3, r2, r3
 8006af8:	0c9b      	lsrs	r3, r3, #18
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006afe:	e002      	b.n	8006b06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b06:	4b38      	ldr	r3, [pc, #224]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b12:	d102      	bne.n	8006b1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f2      	bne.n	8006b00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b1a:	4b33      	ldr	r3, [pc, #204]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b26:	d158      	bne.n	8006bda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e057      	b.n	8006bdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b32:	4a2d      	ldr	r2, [pc, #180]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006b3c:	e04d      	b.n	8006bda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b44:	d141      	bne.n	8006bca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b46:	4b28      	ldr	r3, [pc, #160]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b52:	d131      	bne.n	8006bb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b54:	4b24      	ldr	r3, [pc, #144]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b5a:	4a23      	ldr	r2, [pc, #140]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b64:	4b20      	ldr	r3, [pc, #128]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b74:	4b1d      	ldr	r3, [pc, #116]	@ (8006bec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2232      	movs	r2, #50	@ 0x32
 8006b7a:	fb02 f303 	mul.w	r3, r2, r3
 8006b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006bf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b80:	fba2 2303 	umull	r2, r3, r2, r3
 8006b84:	0c9b      	lsrs	r3, r3, #18
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b8a:	e002      	b.n	8006b92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b92:	4b15      	ldr	r3, [pc, #84]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b9e:	d102      	bne.n	8006ba6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1f2      	bne.n	8006b8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ba6:	4b10      	ldr	r3, [pc, #64]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bb2:	d112      	bne.n	8006bda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e011      	b.n	8006bdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006bc8:	e007      	b.n	8006bda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006bca:	4b07      	ldr	r3, [pc, #28]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006bd2:	4a05      	ldr	r2, [pc, #20]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006bd8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	40007000 	.word	0x40007000
 8006bec:	20000000 	.word	0x20000000
 8006bf0:	431bde83 	.word	0x431bde83

08006bf4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006bf8:	4b05      	ldr	r3, [pc, #20]	@ (8006c10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	4a04      	ldr	r2, [pc, #16]	@ (8006c10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006bfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c02:	6093      	str	r3, [r2, #8]
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40007000 	.word	0x40007000

08006c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e2fe      	b.n	8007224 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d075      	beq.n	8006d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c32:	4b97      	ldr	r3, [pc, #604]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 030c 	and.w	r3, r3, #12
 8006c3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c3c:	4b94      	ldr	r3, [pc, #592]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b0c      	cmp	r3, #12
 8006c4a:	d102      	bne.n	8006c52 <HAL_RCC_OscConfig+0x3e>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d002      	beq.n	8006c58 <HAL_RCC_OscConfig+0x44>
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d10b      	bne.n	8006c70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c58:	4b8d      	ldr	r3, [pc, #564]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d05b      	beq.n	8006d1c <HAL_RCC_OscConfig+0x108>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d157      	bne.n	8006d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e2d9      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c78:	d106      	bne.n	8006c88 <HAL_RCC_OscConfig+0x74>
 8006c7a:	4b85      	ldr	r3, [pc, #532]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a84      	ldr	r2, [pc, #528]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e01d      	b.n	8006cc4 <HAL_RCC_OscConfig+0xb0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c90:	d10c      	bne.n	8006cac <HAL_RCC_OscConfig+0x98>
 8006c92:	4b7f      	ldr	r3, [pc, #508]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a7e      	ldr	r2, [pc, #504]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a7b      	ldr	r2, [pc, #492]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	e00b      	b.n	8006cc4 <HAL_RCC_OscConfig+0xb0>
 8006cac:	4b78      	ldr	r3, [pc, #480]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a77      	ldr	r2, [pc, #476]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	4b75      	ldr	r3, [pc, #468]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a74      	ldr	r2, [pc, #464]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d013      	beq.n	8006cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ccc:	f7fb fbcc 	bl	8002468 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd4:	f7fb fbc8 	bl	8002468 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b64      	cmp	r3, #100	@ 0x64
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e29e      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0f0      	beq.n	8006cd4 <HAL_RCC_OscConfig+0xc0>
 8006cf2:	e014      	b.n	8006d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf4:	f7fb fbb8 	bl	8002468 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cfc:	f7fb fbb4 	bl	8002468 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b64      	cmp	r3, #100	@ 0x64
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e28a      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d0e:	4b60      	ldr	r3, [pc, #384]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1f0      	bne.n	8006cfc <HAL_RCC_OscConfig+0xe8>
 8006d1a:	e000      	b.n	8006d1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d075      	beq.n	8006e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d2a:	4b59      	ldr	r3, [pc, #356]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 030c 	and.w	r3, r3, #12
 8006d32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d34:	4b56      	ldr	r3, [pc, #344]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b0c      	cmp	r3, #12
 8006d42:	d102      	bne.n	8006d4a <HAL_RCC_OscConfig+0x136>
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d002      	beq.n	8006d50 <HAL_RCC_OscConfig+0x13c>
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d11f      	bne.n	8006d90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d50:	4b4f      	ldr	r3, [pc, #316]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_RCC_OscConfig+0x154>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e25d      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d68:	4b49      	ldr	r3, [pc, #292]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	061b      	lsls	r3, r3, #24
 8006d76:	4946      	ldr	r1, [pc, #280]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006d7c:	4b45      	ldr	r3, [pc, #276]	@ (8006e94 <HAL_RCC_OscConfig+0x280>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fb f995 	bl	80020b0 <HAL_InitTick>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d043      	beq.n	8006e14 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e249      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d023      	beq.n	8006de0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d98:	4b3d      	ldr	r3, [pc, #244]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da4:	f7fb fb60 	bl	8002468 <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dac:	f7fb fb5c 	bl	8002468 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e232      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dbe:	4b34      	ldr	r3, [pc, #208]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dca:	4b31      	ldr	r3, [pc, #196]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	061b      	lsls	r3, r3, #24
 8006dd8:	492d      	ldr	r1, [pc, #180]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	604b      	str	r3, [r1, #4]
 8006dde:	e01a      	b.n	8006e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006de0:	4b2b      	ldr	r3, [pc, #172]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a2a      	ldr	r2, [pc, #168]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006de6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dec:	f7fb fb3c 	bl	8002468 <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006df4:	f7fb fb38 	bl	8002468 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e20e      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e06:	4b22      	ldr	r3, [pc, #136]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <HAL_RCC_OscConfig+0x1e0>
 8006e12:	e000      	b.n	8006e16 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d041      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d01c      	beq.n	8006e64 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e2a:	4b19      	ldr	r3, [pc, #100]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e30:	4a17      	ldr	r2, [pc, #92]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3a:	f7fb fb15 	bl	8002468 <HAL_GetTick>
 8006e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e40:	e008      	b.n	8006e54 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e42:	f7fb fb11 	bl	8002468 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e1e7      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e54:	4b0e      	ldr	r3, [pc, #56]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0ef      	beq.n	8006e42 <HAL_RCC_OscConfig+0x22e>
 8006e62:	e020      	b.n	8006ea6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e64:	4b0a      	ldr	r3, [pc, #40]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e6a:	4a09      	ldr	r2, [pc, #36]	@ (8006e90 <HAL_RCC_OscConfig+0x27c>)
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e74:	f7fb faf8 	bl	8002468 <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e7a:	e00d      	b.n	8006e98 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e7c:	f7fb faf4 	bl	8002468 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d906      	bls.n	8006e98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e1ca      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
 8006e8e:	bf00      	nop
 8006e90:	40021000 	.word	0x40021000
 8006e94:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e98:	4b8c      	ldr	r3, [pc, #560]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1ea      	bne.n	8006e7c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80a6 	beq.w	8007000 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006eb8:	4b84      	ldr	r3, [pc, #528]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x2b4>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <HAL_RCC_OscConfig+0x2b6>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00d      	beq.n	8006eea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ece:	4b7f      	ldr	r3, [pc, #508]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eda:	4b7c      	ldr	r3, [pc, #496]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006eea:	4b79      	ldr	r3, [pc, #484]	@ (80070d0 <HAL_RCC_OscConfig+0x4bc>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d118      	bne.n	8006f28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ef6:	4b76      	ldr	r3, [pc, #472]	@ (80070d0 <HAL_RCC_OscConfig+0x4bc>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a75      	ldr	r2, [pc, #468]	@ (80070d0 <HAL_RCC_OscConfig+0x4bc>)
 8006efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f02:	f7fb fab1 	bl	8002468 <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f08:	e008      	b.n	8006f1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f0a:	f7fb faad 	bl	8002468 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e183      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80070d0 <HAL_RCC_OscConfig+0x4bc>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0f0      	beq.n	8006f0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d108      	bne.n	8006f42 <HAL_RCC_OscConfig+0x32e>
 8006f30:	4b66      	ldr	r3, [pc, #408]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f36:	4a65      	ldr	r2, [pc, #404]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f40:	e024      	b.n	8006f8c <HAL_RCC_OscConfig+0x378>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	2b05      	cmp	r3, #5
 8006f48:	d110      	bne.n	8006f6c <HAL_RCC_OscConfig+0x358>
 8006f4a:	4b60      	ldr	r3, [pc, #384]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f50:	4a5e      	ldr	r2, [pc, #376]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006f52:	f043 0304 	orr.w	r3, r3, #4
 8006f56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f60:	4a5a      	ldr	r2, [pc, #360]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f6a:	e00f      	b.n	8006f8c <HAL_RCC_OscConfig+0x378>
 8006f6c:	4b57      	ldr	r3, [pc, #348]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f72:	4a56      	ldr	r2, [pc, #344]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f7c:	4b53      	ldr	r3, [pc, #332]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f82:	4a52      	ldr	r2, [pc, #328]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006f84:	f023 0304 	bic.w	r3, r3, #4
 8006f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d016      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f94:	f7fb fa68 	bl	8002468 <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f9a:	e00a      	b.n	8006fb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f9c:	f7fb fa64 	bl	8002468 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e138      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fb2:	4b46      	ldr	r3, [pc, #280]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0ed      	beq.n	8006f9c <HAL_RCC_OscConfig+0x388>
 8006fc0:	e015      	b.n	8006fee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc2:	f7fb fa51 	bl	8002468 <HAL_GetTick>
 8006fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fc8:	e00a      	b.n	8006fe0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fca:	f7fb fa4d 	bl	8002468 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e121      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1ed      	bne.n	8006fca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fee:	7ffb      	ldrb	r3, [r7, #31]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d105      	bne.n	8007000 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ff4:	4b35      	ldr	r3, [pc, #212]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff8:	4a34      	ldr	r2, [pc, #208]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8006ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ffe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	d03c      	beq.n	8007086 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01c      	beq.n	800704e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007014:	4b2d      	ldr	r3, [pc, #180]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8007016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800701a:	4a2c      	ldr	r2, [pc, #176]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007024:	f7fb fa20 	bl	8002468 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800702c:	f7fb fa1c 	bl	8002468 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e0f2      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800703e:	4b23      	ldr	r3, [pc, #140]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8007040:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0ef      	beq.n	800702c <HAL_RCC_OscConfig+0x418>
 800704c:	e01b      	b.n	8007086 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800704e:	4b1f      	ldr	r3, [pc, #124]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8007050:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007054:	4a1d      	ldr	r2, [pc, #116]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800705e:	f7fb fa03 	bl	8002468 <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007064:	e008      	b.n	8007078 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007066:	f7fb f9ff 	bl	8002468 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e0d5      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007078:	4b14      	ldr	r3, [pc, #80]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 800707a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1ef      	bne.n	8007066 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 80c9 	beq.w	8007222 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007090:	4b0e      	ldr	r3, [pc, #56]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 030c 	and.w	r3, r3, #12
 8007098:	2b0c      	cmp	r3, #12
 800709a:	f000 8083 	beq.w	80071a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d15e      	bne.n	8007164 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070a6:	4b09      	ldr	r3, [pc, #36]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a08      	ldr	r2, [pc, #32]	@ (80070cc <HAL_RCC_OscConfig+0x4b8>)
 80070ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b2:	f7fb f9d9 	bl	8002468 <HAL_GetTick>
 80070b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070b8:	e00c      	b.n	80070d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ba:	f7fb f9d5 	bl	8002468 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d905      	bls.n	80070d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e0ab      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
 80070cc:	40021000 	.word	0x40021000
 80070d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070d4:	4b55      	ldr	r3, [pc, #340]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1ec      	bne.n	80070ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070e0:	4b52      	ldr	r3, [pc, #328]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	4b52      	ldr	r3, [pc, #328]	@ (8007230 <HAL_RCC_OscConfig+0x61c>)
 80070e6:	4013      	ands	r3, r2
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6a11      	ldr	r1, [r2, #32]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070f0:	3a01      	subs	r2, #1
 80070f2:	0112      	lsls	r2, r2, #4
 80070f4:	4311      	orrs	r1, r2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80070fa:	0212      	lsls	r2, r2, #8
 80070fc:	4311      	orrs	r1, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007102:	0852      	lsrs	r2, r2, #1
 8007104:	3a01      	subs	r2, #1
 8007106:	0552      	lsls	r2, r2, #21
 8007108:	4311      	orrs	r1, r2
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800710e:	0852      	lsrs	r2, r2, #1
 8007110:	3a01      	subs	r2, #1
 8007112:	0652      	lsls	r2, r2, #25
 8007114:	4311      	orrs	r1, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800711a:	06d2      	lsls	r2, r2, #27
 800711c:	430a      	orrs	r2, r1
 800711e:	4943      	ldr	r1, [pc, #268]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 8007120:	4313      	orrs	r3, r2
 8007122:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007124:	4b41      	ldr	r3, [pc, #260]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a40      	ldr	r2, [pc, #256]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 800712a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800712e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007130:	4b3e      	ldr	r3, [pc, #248]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	4a3d      	ldr	r2, [pc, #244]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 8007136:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800713a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713c:	f7fb f994 	bl	8002468 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007144:	f7fb f990 	bl	8002468 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e066      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007156:	4b35      	ldr	r3, [pc, #212]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0x530>
 8007162:	e05e      	b.n	8007222 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007164:	4b31      	ldr	r3, [pc, #196]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a30      	ldr	r2, [pc, #192]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 800716a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800716e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007170:	f7fb f97a 	bl	8002468 <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007178:	f7fb f976 	bl	8002468 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e04c      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800718a:	4b28      	ldr	r3, [pc, #160]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1f0      	bne.n	8007178 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007196:	4b25      	ldr	r3, [pc, #148]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	4924      	ldr	r1, [pc, #144]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 800719c:	4b25      	ldr	r3, [pc, #148]	@ (8007234 <HAL_RCC_OscConfig+0x620>)
 800719e:	4013      	ands	r3, r2
 80071a0:	60cb      	str	r3, [r1, #12]
 80071a2:	e03e      	b.n	8007222 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e039      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80071b0:	4b1e      	ldr	r3, [pc, #120]	@ (800722c <HAL_RCC_OscConfig+0x618>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f003 0203 	and.w	r2, r3, #3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d12c      	bne.n	800721e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	3b01      	subs	r3, #1
 80071d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d123      	bne.n	800721e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d11b      	bne.n	800721e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d113      	bne.n	800721e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	3b01      	subs	r3, #1
 8007204:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007206:	429a      	cmp	r2, r3
 8007208:	d109      	bne.n	800721e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007214:	085b      	lsrs	r3, r3, #1
 8007216:	3b01      	subs	r3, #1
 8007218:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800721a:	429a      	cmp	r2, r3
 800721c:	d001      	beq.n	8007222 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3720      	adds	r7, #32
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	40021000 	.word	0x40021000
 8007230:	019f800c 	.word	0x019f800c
 8007234:	feeefffc 	.word	0xfeeefffc

08007238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e11e      	b.n	800748e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007250:	4b91      	ldr	r3, [pc, #580]	@ (8007498 <HAL_RCC_ClockConfig+0x260>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d910      	bls.n	8007280 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800725e:	4b8e      	ldr	r3, [pc, #568]	@ (8007498 <HAL_RCC_ClockConfig+0x260>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f023 020f 	bic.w	r2, r3, #15
 8007266:	498c      	ldr	r1, [pc, #560]	@ (8007498 <HAL_RCC_ClockConfig+0x260>)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	4313      	orrs	r3, r2
 800726c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800726e:	4b8a      	ldr	r3, [pc, #552]	@ (8007498 <HAL_RCC_ClockConfig+0x260>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d001      	beq.n	8007280 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e106      	b.n	800748e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d073      	beq.n	8007374 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b03      	cmp	r3, #3
 8007292:	d129      	bne.n	80072e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007294:	4b81      	ldr	r3, [pc, #516]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e0f4      	b.n	800748e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80072a4:	f000 f9d0 	bl	8007648 <RCC_GetSysClockFreqFromPLLSource>
 80072a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	4a7c      	ldr	r2, [pc, #496]	@ (80074a0 <HAL_RCC_ClockConfig+0x268>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d93f      	bls.n	8007332 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80072b2:	4b7a      	ldr	r3, [pc, #488]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d033      	beq.n	8007332 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d12f      	bne.n	8007332 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80072d2:	4b72      	ldr	r3, [pc, #456]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072da:	4a70      	ldr	r2, [pc, #448]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 80072dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80072e2:	2380      	movs	r3, #128	@ 0x80
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	e024      	b.n	8007332 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d107      	bne.n	8007300 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072f0:	4b6a      	ldr	r3, [pc, #424]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d109      	bne.n	8007310 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e0c6      	b.n	800748e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007300:	4b66      	ldr	r3, [pc, #408]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e0be      	b.n	800748e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007310:	f000 f8ce 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 8007314:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	4a61      	ldr	r2, [pc, #388]	@ (80074a0 <HAL_RCC_ClockConfig+0x268>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d909      	bls.n	8007332 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800731e:	4b5f      	ldr	r3, [pc, #380]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007326:	4a5d      	ldr	r2, [pc, #372]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 8007328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800732c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800732e:	2380      	movs	r3, #128	@ 0x80
 8007330:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007332:	4b5a      	ldr	r3, [pc, #360]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f023 0203 	bic.w	r2, r3, #3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	4957      	ldr	r1, [pc, #348]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 8007340:	4313      	orrs	r3, r2
 8007342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007344:	f7fb f890 	bl	8002468 <HAL_GetTick>
 8007348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800734a:	e00a      	b.n	8007362 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800734c:	f7fb f88c 	bl	8002468 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800735a:	4293      	cmp	r3, r2
 800735c:	d901      	bls.n	8007362 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e095      	b.n	800748e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007362:	4b4e      	ldr	r3, [pc, #312]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 020c 	and.w	r2, r3, #12
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	429a      	cmp	r2, r3
 8007372:	d1eb      	bne.n	800734c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d023      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800738c:	4b43      	ldr	r3, [pc, #268]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	4a42      	ldr	r2, [pc, #264]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 8007392:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007396:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d007      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80073a4:	4b3d      	ldr	r3, [pc, #244]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80073ac:	4a3b      	ldr	r2, [pc, #236]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 80073ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80073b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073b4:	4b39      	ldr	r3, [pc, #228]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	4936      	ldr	r1, [pc, #216]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	608b      	str	r3, [r1, #8]
 80073c6:	e008      	b.n	80073da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b80      	cmp	r3, #128	@ 0x80
 80073cc:	d105      	bne.n	80073da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80073ce:	4b33      	ldr	r3, [pc, #204]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	4a32      	ldr	r2, [pc, #200]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 80073d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073da:	4b2f      	ldr	r3, [pc, #188]	@ (8007498 <HAL_RCC_ClockConfig+0x260>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d21d      	bcs.n	8007424 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007498 <HAL_RCC_ClockConfig+0x260>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f023 020f 	bic.w	r2, r3, #15
 80073f0:	4929      	ldr	r1, [pc, #164]	@ (8007498 <HAL_RCC_ClockConfig+0x260>)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80073f8:	f7fb f836 	bl	8002468 <HAL_GetTick>
 80073fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073fe:	e00a      	b.n	8007416 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007400:	f7fb f832 	bl	8002468 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800740e:	4293      	cmp	r3, r2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e03b      	b.n	800748e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007416:	4b20      	ldr	r3, [pc, #128]	@ (8007498 <HAL_RCC_ClockConfig+0x260>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d1ed      	bne.n	8007400 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d008      	beq.n	8007442 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007430:	4b1a      	ldr	r3, [pc, #104]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	4917      	ldr	r1, [pc, #92]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 800743e:	4313      	orrs	r3, r2
 8007440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800744e:	4b13      	ldr	r3, [pc, #76]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	490f      	ldr	r1, [pc, #60]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 800745e:	4313      	orrs	r3, r2
 8007460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007462:	f000 f825 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 8007466:	4602      	mov	r2, r0
 8007468:	4b0c      	ldr	r3, [pc, #48]	@ (800749c <HAL_RCC_ClockConfig+0x264>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	091b      	lsrs	r3, r3, #4
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	490c      	ldr	r1, [pc, #48]	@ (80074a4 <HAL_RCC_ClockConfig+0x26c>)
 8007474:	5ccb      	ldrb	r3, [r1, r3]
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	fa22 f303 	lsr.w	r3, r2, r3
 800747e:	4a0a      	ldr	r2, [pc, #40]	@ (80074a8 <HAL_RCC_ClockConfig+0x270>)
 8007480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007482:	4b0a      	ldr	r3, [pc, #40]	@ (80074ac <HAL_RCC_ClockConfig+0x274>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f7fa fe12 	bl	80020b0 <HAL_InitTick>
 800748c:	4603      	mov	r3, r0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	40022000 	.word	0x40022000
 800749c:	40021000 	.word	0x40021000
 80074a0:	04c4b400 	.word	0x04c4b400
 80074a4:	08012f3c 	.word	0x08012f3c
 80074a8:	20000000 	.word	0x20000000
 80074ac:	20000004 	.word	0x20000004

080074b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80074b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f003 030c 	and.w	r3, r3, #12
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d102      	bne.n	80074c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80074c2:	4b2a      	ldr	r3, [pc, #168]	@ (800756c <HAL_RCC_GetSysClockFreq+0xbc>)
 80074c4:	613b      	str	r3, [r7, #16]
 80074c6:	e047      	b.n	8007558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80074c8:	4b27      	ldr	r3, [pc, #156]	@ (8007568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f003 030c 	and.w	r3, r3, #12
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d102      	bne.n	80074da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80074d4:	4b26      	ldr	r3, [pc, #152]	@ (8007570 <HAL_RCC_GetSysClockFreq+0xc0>)
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	e03e      	b.n	8007558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80074da:	4b23      	ldr	r3, [pc, #140]	@ (8007568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 030c 	and.w	r3, r3, #12
 80074e2:	2b0c      	cmp	r3, #12
 80074e4:	d136      	bne.n	8007554 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074e6:	4b20      	ldr	r3, [pc, #128]	@ (8007568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	091b      	lsrs	r3, r3, #4
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	3301      	adds	r3, #1
 80074fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b03      	cmp	r3, #3
 8007502:	d10c      	bne.n	800751e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007504:	4a1a      	ldr	r2, [pc, #104]	@ (8007570 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	fbb2 f3f3 	udiv	r3, r2, r3
 800750c:	4a16      	ldr	r2, [pc, #88]	@ (8007568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800750e:	68d2      	ldr	r2, [r2, #12]
 8007510:	0a12      	lsrs	r2, r2, #8
 8007512:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007516:	fb02 f303 	mul.w	r3, r2, r3
 800751a:	617b      	str	r3, [r7, #20]
      break;
 800751c:	e00c      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800751e:	4a13      	ldr	r2, [pc, #76]	@ (800756c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	fbb2 f3f3 	udiv	r3, r2, r3
 8007526:	4a10      	ldr	r2, [pc, #64]	@ (8007568 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007528:	68d2      	ldr	r2, [r2, #12]
 800752a:	0a12      	lsrs	r2, r2, #8
 800752c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007530:	fb02 f303 	mul.w	r3, r2, r3
 8007534:	617b      	str	r3, [r7, #20]
      break;
 8007536:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007538:	4b0b      	ldr	r3, [pc, #44]	@ (8007568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	0e5b      	lsrs	r3, r3, #25
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	3301      	adds	r3, #1
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	e001      	b.n	8007558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007558:	693b      	ldr	r3, [r7, #16]
}
 800755a:	4618      	mov	r0, r3
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	40021000 	.word	0x40021000
 800756c:	00f42400 	.word	0x00f42400
 8007570:	007a1200 	.word	0x007a1200

08007574 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007574:	b480      	push	{r7}
 8007576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007578:	4b03      	ldr	r3, [pc, #12]	@ (8007588 <HAL_RCC_GetHCLKFreq+0x14>)
 800757a:	681b      	ldr	r3, [r3, #0]
}
 800757c:	4618      	mov	r0, r3
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	20000000 	.word	0x20000000

0800758c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007590:	f7ff fff0 	bl	8007574 <HAL_RCC_GetHCLKFreq>
 8007594:	4602      	mov	r2, r0
 8007596:	4b06      	ldr	r3, [pc, #24]	@ (80075b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	0a1b      	lsrs	r3, r3, #8
 800759c:	f003 0307 	and.w	r3, r3, #7
 80075a0:	4904      	ldr	r1, [pc, #16]	@ (80075b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80075a2:	5ccb      	ldrb	r3, [r1, r3]
 80075a4:	f003 031f 	and.w	r3, r3, #31
 80075a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	40021000 	.word	0x40021000
 80075b4:	08012f4c 	.word	0x08012f4c

080075b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80075bc:	f7ff ffda 	bl	8007574 <HAL_RCC_GetHCLKFreq>
 80075c0:	4602      	mov	r2, r0
 80075c2:	4b06      	ldr	r3, [pc, #24]	@ (80075dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	0adb      	lsrs	r3, r3, #11
 80075c8:	f003 0307 	and.w	r3, r3, #7
 80075cc:	4904      	ldr	r1, [pc, #16]	@ (80075e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80075ce:	5ccb      	ldrb	r3, [r1, r3]
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075d8:	4618      	mov	r0, r3
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	40021000 	.word	0x40021000
 80075e0:	08012f4c 	.word	0x08012f4c

080075e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	220f      	movs	r2, #15
 80075f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80075f4:	4b12      	ldr	r3, [pc, #72]	@ (8007640 <HAL_RCC_GetClockConfig+0x5c>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 0203 	and.w	r2, r3, #3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007600:	4b0f      	ldr	r3, [pc, #60]	@ (8007640 <HAL_RCC_GetClockConfig+0x5c>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800760c:	4b0c      	ldr	r3, [pc, #48]	@ (8007640 <HAL_RCC_GetClockConfig+0x5c>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007618:	4b09      	ldr	r3, [pc, #36]	@ (8007640 <HAL_RCC_GetClockConfig+0x5c>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	08db      	lsrs	r3, r3, #3
 800761e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007626:	4b07      	ldr	r3, [pc, #28]	@ (8007644 <HAL_RCC_GetClockConfig+0x60>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 020f 	and.w	r2, r3, #15
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	601a      	str	r2, [r3, #0]
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40021000 	.word	0x40021000
 8007644:	40022000 	.word	0x40022000

08007648 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800764e:	4b1e      	ldr	r3, [pc, #120]	@ (80076c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007658:	4b1b      	ldr	r3, [pc, #108]	@ (80076c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	091b      	lsrs	r3, r3, #4
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	3301      	adds	r3, #1
 8007664:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b03      	cmp	r3, #3
 800766a:	d10c      	bne.n	8007686 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800766c:	4a17      	ldr	r2, [pc, #92]	@ (80076cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	fbb2 f3f3 	udiv	r3, r2, r3
 8007674:	4a14      	ldr	r2, [pc, #80]	@ (80076c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007676:	68d2      	ldr	r2, [r2, #12]
 8007678:	0a12      	lsrs	r2, r2, #8
 800767a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800767e:	fb02 f303 	mul.w	r3, r2, r3
 8007682:	617b      	str	r3, [r7, #20]
    break;
 8007684:	e00c      	b.n	80076a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007686:	4a12      	ldr	r2, [pc, #72]	@ (80076d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	fbb2 f3f3 	udiv	r3, r2, r3
 800768e:	4a0e      	ldr	r2, [pc, #56]	@ (80076c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007690:	68d2      	ldr	r2, [r2, #12]
 8007692:	0a12      	lsrs	r2, r2, #8
 8007694:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007698:	fb02 f303 	mul.w	r3, r2, r3
 800769c:	617b      	str	r3, [r7, #20]
    break;
 800769e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076a0:	4b09      	ldr	r3, [pc, #36]	@ (80076c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	0e5b      	lsrs	r3, r3, #25
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	3301      	adds	r3, #1
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80076ba:	687b      	ldr	r3, [r7, #4]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	40021000 	.word	0x40021000
 80076cc:	007a1200 	.word	0x007a1200
 80076d0:	00f42400 	.word	0x00f42400

080076d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076dc:	2300      	movs	r3, #0
 80076de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076e0:	2300      	movs	r3, #0
 80076e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 8098 	beq.w	8007822 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076f2:	2300      	movs	r3, #0
 80076f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076f6:	4b43      	ldr	r3, [pc, #268]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10d      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007702:	4b40      	ldr	r3, [pc, #256]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007706:	4a3f      	ldr	r2, [pc, #252]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800770c:	6593      	str	r3, [r2, #88]	@ 0x58
 800770e:	4b3d      	ldr	r3, [pc, #244]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007716:	60bb      	str	r3, [r7, #8]
 8007718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800771a:	2301      	movs	r3, #1
 800771c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800771e:	4b3a      	ldr	r3, [pc, #232]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a39      	ldr	r2, [pc, #228]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007728:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800772a:	f7fa fe9d 	bl	8002468 <HAL_GetTick>
 800772e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007730:	e009      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007732:	f7fa fe99 	bl	8002468 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d902      	bls.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	74fb      	strb	r3, [r7, #19]
        break;
 8007744:	e005      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007746:	4b30      	ldr	r3, [pc, #192]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0ef      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007752:	7cfb      	ldrb	r3, [r7, #19]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d159      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007758:	4b2a      	ldr	r3, [pc, #168]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800775a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800775e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007762:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d01e      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	429a      	cmp	r2, r3
 8007772:	d019      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007774:	4b23      	ldr	r3, [pc, #140]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800777e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007780:	4b20      	ldr	r3, [pc, #128]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007786:	4a1f      	ldr	r2, [pc, #124]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800778c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007790:	4b1c      	ldr	r3, [pc, #112]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007796:	4a1b      	ldr	r2, [pc, #108]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800779c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80077a0:	4a18      	ldr	r2, [pc, #96]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d016      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b2:	f7fa fe59 	bl	8002468 <HAL_GetTick>
 80077b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077b8:	e00b      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ba:	f7fa fe55 	bl	8002468 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d902      	bls.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	74fb      	strb	r3, [r7, #19]
            break;
 80077d0:	e006      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0ec      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80077e0:	7cfb      	ldrb	r3, [r7, #19]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10b      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077e6:	4b07      	ldr	r3, [pc, #28]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f4:	4903      	ldr	r1, [pc, #12]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80077fc:	e008      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077fe:	7cfb      	ldrb	r3, [r7, #19]
 8007800:	74bb      	strb	r3, [r7, #18]
 8007802:	e005      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007804:	40021000 	.word	0x40021000
 8007808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780c:	7cfb      	ldrb	r3, [r7, #19]
 800780e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007810:	7c7b      	ldrb	r3, [r7, #17]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d105      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007816:	4ba7      	ldr	r3, [pc, #668]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781a:	4aa6      	ldr	r2, [pc, #664]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800781c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007820:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800782e:	4ba1      	ldr	r3, [pc, #644]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007834:	f023 0203 	bic.w	r2, r3, #3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	499d      	ldr	r1, [pc, #628]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007850:	4b98      	ldr	r3, [pc, #608]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007856:	f023 020c 	bic.w	r2, r3, #12
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	4995      	ldr	r1, [pc, #596]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007872:	4b90      	ldr	r3, [pc, #576]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007878:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	498c      	ldr	r1, [pc, #560]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007894:	4b87      	ldr	r3, [pc, #540]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800789a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	4984      	ldr	r1, [pc, #528]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0310 	and.w	r3, r3, #16
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078b6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	497b      	ldr	r1, [pc, #492]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078d8:	4b76      	ldr	r3, [pc, #472]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	4973      	ldr	r1, [pc, #460]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078fa:	4b6e      	ldr	r3, [pc, #440]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007900:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	496a      	ldr	r1, [pc, #424]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800791c:	4b65      	ldr	r3, [pc, #404]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007922:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	4962      	ldr	r1, [pc, #392]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800793e:	4b5d      	ldr	r3, [pc, #372]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007944:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794c:	4959      	ldr	r1, [pc, #356]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007960:	4b54      	ldr	r3, [pc, #336]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007966:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796e:	4951      	ldr	r1, [pc, #324]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800797e:	2b00      	cmp	r3, #0
 8007980:	d015      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007982:	4b4c      	ldr	r3, [pc, #304]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007988:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007990:	4948      	ldr	r1, [pc, #288]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007992:	4313      	orrs	r3, r2
 8007994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079a0:	d105      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079a2:	4b44      	ldr	r3, [pc, #272]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	4a43      	ldr	r2, [pc, #268]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079ac:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d015      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079ba:	4b3e      	ldr	r3, [pc, #248]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c8:	493a      	ldr	r1, [pc, #232]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079d8:	d105      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079da:	4b36      	ldr	r3, [pc, #216]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	4a35      	ldr	r2, [pc, #212]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079e4:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d015      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079f2:	4b30      	ldr	r3, [pc, #192]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a00:	492c      	ldr	r1, [pc, #176]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a10:	d105      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a12:	4b28      	ldr	r3, [pc, #160]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	4a27      	ldr	r2, [pc, #156]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a1c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d015      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a2a:	4b22      	ldr	r3, [pc, #136]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a38:	491e      	ldr	r1, [pc, #120]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a48:	d105      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	4a19      	ldr	r2, [pc, #100]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a54:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d015      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a62:	4b14      	ldr	r3, [pc, #80]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a70:	4910      	ldr	r1, [pc, #64]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a80:	d105      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a82:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	4a0b      	ldr	r2, [pc, #44]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a8c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d018      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007a9a:	4b06      	ldr	r3, [pc, #24]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa8:	4902      	ldr	r1, [pc, #8]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	e001      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007ab4:	40021000 	.word	0x40021000
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007abe:	d105      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ac0:	4b21      	ldr	r3, [pc, #132]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	4a20      	ldr	r2, [pc, #128]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d015      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ade:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae6:	4918      	ldr	r1, [pc, #96]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af6:	d105      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007af8:	4b13      	ldr	r3, [pc, #76]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	4a12      	ldr	r2, [pc, #72]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d015      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b10:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b1e:	490a      	ldr	r1, [pc, #40]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b2e:	d105      	bne.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b30:	4b05      	ldr	r3, [pc, #20]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	4a04      	ldr	r2, [pc, #16]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007b3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	40021000 	.word	0x40021000

08007b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e049      	b.n	8007bf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f841 	bl	8007bfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	f000 fa28 	bl	8007fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
	...

08007c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d001      	beq.n	8007c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e04f      	b.n	8007cc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0201 	orr.w	r2, r2, #1
 8007c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a23      	ldr	r2, [pc, #140]	@ (8007cd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d01d      	beq.n	8007c86 <HAL_TIM_Base_Start_IT+0x76>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c52:	d018      	beq.n	8007c86 <HAL_TIM_Base_Start_IT+0x76>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a1f      	ldr	r2, [pc, #124]	@ (8007cd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d013      	beq.n	8007c86 <HAL_TIM_Base_Start_IT+0x76>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a1e      	ldr	r2, [pc, #120]	@ (8007cdc <HAL_TIM_Base_Start_IT+0xcc>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00e      	beq.n	8007c86 <HAL_TIM_Base_Start_IT+0x76>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d009      	beq.n	8007c86 <HAL_TIM_Base_Start_IT+0x76>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d004      	beq.n	8007c86 <HAL_TIM_Base_Start_IT+0x76>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a19      	ldr	r2, [pc, #100]	@ (8007ce8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d115      	bne.n	8007cb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	4b17      	ldr	r3, [pc, #92]	@ (8007cec <HAL_TIM_Base_Start_IT+0xdc>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b06      	cmp	r3, #6
 8007c96:	d015      	beq.n	8007cc4 <HAL_TIM_Base_Start_IT+0xb4>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c9e:	d011      	beq.n	8007cc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb0:	e008      	b.n	8007cc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0201 	orr.w	r2, r2, #1
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	e000      	b.n	8007cc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40000400 	.word	0x40000400
 8007cdc:	40000800 	.word	0x40000800
 8007ce0:	40013400 	.word	0x40013400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40015000 	.word	0x40015000
 8007cec:	00010007 	.word	0x00010007

08007cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d020      	beq.n	8007d54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01b      	beq.n	8007d54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0202 	mvn.w	r2, #2
 8007d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f931 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007d40:	e005      	b.n	8007d4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f923 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f934 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f003 0304 	and.w	r3, r3, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d020      	beq.n	8007da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01b      	beq.n	8007da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0204 	mvn.w	r2, #4
 8007d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2202      	movs	r2, #2
 8007d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f90b 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007d8c:	e005      	b.n	8007d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f8fd 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f90e 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f003 0308 	and.w	r3, r3, #8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d020      	beq.n	8007dec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01b      	beq.n	8007dec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f06f 0208 	mvn.w	r2, #8
 8007dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2204      	movs	r2, #4
 8007dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f8e5 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007dd8:	e005      	b.n	8007de6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f8d7 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f8e8 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d020      	beq.n	8007e38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01b      	beq.n	8007e38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0210 	mvn.w	r2, #16
 8007e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f8bf 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007e24:	e005      	b.n	8007e32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f8b1 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f8c2 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00c      	beq.n	8007e5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d007      	beq.n	8007e5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0201 	mvn.w	r2, #1
 8007e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7f9 ff86 	bl	8001d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d104      	bne.n	8007e70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00c      	beq.n	8007e8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d007      	beq.n	8007e8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f95f 	bl	8008148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00c      	beq.n	8007eae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f957 	bl	800815c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00c      	beq.n	8007ed2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d007      	beq.n	8007ed2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f87c 	bl	8007fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00c      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f06f 0220 	mvn.w	r2, #32
 8007eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f91f 	bl	8008134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00c      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d007      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f92b 	bl	8008170 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00c      	beq.n	8007f3e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f923 	bl	8008184 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00c      	beq.n	8007f62 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f91b 	bl	8008198 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00c      	beq.n	8007f86 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d007      	beq.n	8007f86 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f913 	bl	80081ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f86:	bf00      	nop
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a48      	ldr	r2, [pc, #288]	@ (8008114 <TIM_Base_SetConfig+0x134>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ffe:	d00f      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a45      	ldr	r2, [pc, #276]	@ (8008118 <TIM_Base_SetConfig+0x138>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00b      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a44      	ldr	r2, [pc, #272]	@ (800811c <TIM_Base_SetConfig+0x13c>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d007      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a43      	ldr	r2, [pc, #268]	@ (8008120 <TIM_Base_SetConfig+0x140>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d003      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a42      	ldr	r2, [pc, #264]	@ (8008124 <TIM_Base_SetConfig+0x144>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d108      	bne.n	8008032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a37      	ldr	r2, [pc, #220]	@ (8008114 <TIM_Base_SetConfig+0x134>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d01f      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008040:	d01b      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a34      	ldr	r2, [pc, #208]	@ (8008118 <TIM_Base_SetConfig+0x138>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d017      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a33      	ldr	r2, [pc, #204]	@ (800811c <TIM_Base_SetConfig+0x13c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d013      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a32      	ldr	r2, [pc, #200]	@ (8008120 <TIM_Base_SetConfig+0x140>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d00f      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a32      	ldr	r2, [pc, #200]	@ (8008128 <TIM_Base_SetConfig+0x148>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00b      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a31      	ldr	r2, [pc, #196]	@ (800812c <TIM_Base_SetConfig+0x14c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d007      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a30      	ldr	r2, [pc, #192]	@ (8008130 <TIM_Base_SetConfig+0x150>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d003      	beq.n	800807a <TIM_Base_SetConfig+0x9a>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a2b      	ldr	r2, [pc, #172]	@ (8008124 <TIM_Base_SetConfig+0x144>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d108      	bne.n	800808c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a18      	ldr	r2, [pc, #96]	@ (8008114 <TIM_Base_SetConfig+0x134>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d013      	beq.n	80080e0 <TIM_Base_SetConfig+0x100>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a19      	ldr	r2, [pc, #100]	@ (8008120 <TIM_Base_SetConfig+0x140>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00f      	beq.n	80080e0 <TIM_Base_SetConfig+0x100>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a19      	ldr	r2, [pc, #100]	@ (8008128 <TIM_Base_SetConfig+0x148>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d00b      	beq.n	80080e0 <TIM_Base_SetConfig+0x100>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a18      	ldr	r2, [pc, #96]	@ (800812c <TIM_Base_SetConfig+0x14c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d007      	beq.n	80080e0 <TIM_Base_SetConfig+0x100>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a17      	ldr	r2, [pc, #92]	@ (8008130 <TIM_Base_SetConfig+0x150>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d003      	beq.n	80080e0 <TIM_Base_SetConfig+0x100>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a12      	ldr	r2, [pc, #72]	@ (8008124 <TIM_Base_SetConfig+0x144>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d103      	bne.n	80080e8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d105      	bne.n	8008106 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f023 0201 	bic.w	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	611a      	str	r2, [r3, #16]
  }
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	40012c00 	.word	0x40012c00
 8008118:	40000400 	.word	0x40000400
 800811c:	40000800 	.word	0x40000800
 8008120:	40013400 	.word	0x40013400
 8008124:	40015000 	.word	0x40015000
 8008128:	40014000 	.word	0x40014000
 800812c:	40014400 	.word	0x40014400
 8008130:	40014800 	.word	0x40014800

08008134 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e042      	b.n	8008258 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d106      	bne.n	80081ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7f9 ff0b 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2224      	movs	r2, #36	@ 0x24
 80081ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0201 	bic.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fb24 	bl	8008858 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f825 	bl	8008260 <UART_SetConfig>
 8008216:	4603      	mov	r3, r0
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e01b      	b.n	8008258 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800822e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800823e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f042 0201 	orr.w	r2, r2, #1
 800824e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fba3 	bl	800899c <UART_CheckIdleState>
 8008256:	4603      	mov	r3, r0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008264:	b08c      	sub	sp, #48	@ 0x30
 8008266:	af00      	add	r7, sp, #0
 8008268:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	431a      	orrs	r2, r3
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	431a      	orrs	r2, r3
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	4313      	orrs	r3, r2
 8008286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	4baa      	ldr	r3, [pc, #680]	@ (8008538 <UART_SetConfig+0x2d8>)
 8008290:	4013      	ands	r3, r2
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	6812      	ldr	r2, [r2, #0]
 8008296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008298:	430b      	orrs	r3, r1
 800829a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a9f      	ldr	r2, [pc, #636]	@ (800853c <UART_SetConfig+0x2dc>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d004      	beq.n	80082cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082c8:	4313      	orrs	r3, r2
 80082ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80082d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	6812      	ldr	r2, [r2, #0]
 80082de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ea:	f023 010f 	bic.w	r1, r3, #15
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a90      	ldr	r2, [pc, #576]	@ (8008540 <UART_SetConfig+0x2e0>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d125      	bne.n	8008350 <UART_SetConfig+0xf0>
 8008304:	4b8f      	ldr	r3, [pc, #572]	@ (8008544 <UART_SetConfig+0x2e4>)
 8008306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b03      	cmp	r3, #3
 8008310:	d81a      	bhi.n	8008348 <UART_SetConfig+0xe8>
 8008312:	a201      	add	r2, pc, #4	@ (adr r2, 8008318 <UART_SetConfig+0xb8>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	08008329 	.word	0x08008329
 800831c:	08008339 	.word	0x08008339
 8008320:	08008331 	.word	0x08008331
 8008324:	08008341 	.word	0x08008341
 8008328:	2301      	movs	r3, #1
 800832a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800832e:	e116      	b.n	800855e <UART_SetConfig+0x2fe>
 8008330:	2302      	movs	r3, #2
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008336:	e112      	b.n	800855e <UART_SetConfig+0x2fe>
 8008338:	2304      	movs	r3, #4
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800833e:	e10e      	b.n	800855e <UART_SetConfig+0x2fe>
 8008340:	2308      	movs	r3, #8
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008346:	e10a      	b.n	800855e <UART_SetConfig+0x2fe>
 8008348:	2310      	movs	r3, #16
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800834e:	e106      	b.n	800855e <UART_SetConfig+0x2fe>
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a7c      	ldr	r2, [pc, #496]	@ (8008548 <UART_SetConfig+0x2e8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d138      	bne.n	80083cc <UART_SetConfig+0x16c>
 800835a:	4b7a      	ldr	r3, [pc, #488]	@ (8008544 <UART_SetConfig+0x2e4>)
 800835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008360:	f003 030c 	and.w	r3, r3, #12
 8008364:	2b0c      	cmp	r3, #12
 8008366:	d82d      	bhi.n	80083c4 <UART_SetConfig+0x164>
 8008368:	a201      	add	r2, pc, #4	@ (adr r2, 8008370 <UART_SetConfig+0x110>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	080083a5 	.word	0x080083a5
 8008374:	080083c5 	.word	0x080083c5
 8008378:	080083c5 	.word	0x080083c5
 800837c:	080083c5 	.word	0x080083c5
 8008380:	080083b5 	.word	0x080083b5
 8008384:	080083c5 	.word	0x080083c5
 8008388:	080083c5 	.word	0x080083c5
 800838c:	080083c5 	.word	0x080083c5
 8008390:	080083ad 	.word	0x080083ad
 8008394:	080083c5 	.word	0x080083c5
 8008398:	080083c5 	.word	0x080083c5
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083bd 	.word	0x080083bd
 80083a4:	2300      	movs	r3, #0
 80083a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083aa:	e0d8      	b.n	800855e <UART_SetConfig+0x2fe>
 80083ac:	2302      	movs	r3, #2
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b2:	e0d4      	b.n	800855e <UART_SetConfig+0x2fe>
 80083b4:	2304      	movs	r3, #4
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ba:	e0d0      	b.n	800855e <UART_SetConfig+0x2fe>
 80083bc:	2308      	movs	r3, #8
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c2:	e0cc      	b.n	800855e <UART_SetConfig+0x2fe>
 80083c4:	2310      	movs	r3, #16
 80083c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ca:	e0c8      	b.n	800855e <UART_SetConfig+0x2fe>
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a5e      	ldr	r2, [pc, #376]	@ (800854c <UART_SetConfig+0x2ec>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d125      	bne.n	8008422 <UART_SetConfig+0x1c2>
 80083d6:	4b5b      	ldr	r3, [pc, #364]	@ (8008544 <UART_SetConfig+0x2e4>)
 80083d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80083e0:	2b30      	cmp	r3, #48	@ 0x30
 80083e2:	d016      	beq.n	8008412 <UART_SetConfig+0x1b2>
 80083e4:	2b30      	cmp	r3, #48	@ 0x30
 80083e6:	d818      	bhi.n	800841a <UART_SetConfig+0x1ba>
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d00a      	beq.n	8008402 <UART_SetConfig+0x1a2>
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	d814      	bhi.n	800841a <UART_SetConfig+0x1ba>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <UART_SetConfig+0x19a>
 80083f4:	2b10      	cmp	r3, #16
 80083f6:	d008      	beq.n	800840a <UART_SetConfig+0x1aa>
 80083f8:	e00f      	b.n	800841a <UART_SetConfig+0x1ba>
 80083fa:	2300      	movs	r3, #0
 80083fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008400:	e0ad      	b.n	800855e <UART_SetConfig+0x2fe>
 8008402:	2302      	movs	r3, #2
 8008404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008408:	e0a9      	b.n	800855e <UART_SetConfig+0x2fe>
 800840a:	2304      	movs	r3, #4
 800840c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008410:	e0a5      	b.n	800855e <UART_SetConfig+0x2fe>
 8008412:	2308      	movs	r3, #8
 8008414:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008418:	e0a1      	b.n	800855e <UART_SetConfig+0x2fe>
 800841a:	2310      	movs	r3, #16
 800841c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008420:	e09d      	b.n	800855e <UART_SetConfig+0x2fe>
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a4a      	ldr	r2, [pc, #296]	@ (8008550 <UART_SetConfig+0x2f0>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d125      	bne.n	8008478 <UART_SetConfig+0x218>
 800842c:	4b45      	ldr	r3, [pc, #276]	@ (8008544 <UART_SetConfig+0x2e4>)
 800842e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008432:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008436:	2bc0      	cmp	r3, #192	@ 0xc0
 8008438:	d016      	beq.n	8008468 <UART_SetConfig+0x208>
 800843a:	2bc0      	cmp	r3, #192	@ 0xc0
 800843c:	d818      	bhi.n	8008470 <UART_SetConfig+0x210>
 800843e:	2b80      	cmp	r3, #128	@ 0x80
 8008440:	d00a      	beq.n	8008458 <UART_SetConfig+0x1f8>
 8008442:	2b80      	cmp	r3, #128	@ 0x80
 8008444:	d814      	bhi.n	8008470 <UART_SetConfig+0x210>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <UART_SetConfig+0x1f0>
 800844a:	2b40      	cmp	r3, #64	@ 0x40
 800844c:	d008      	beq.n	8008460 <UART_SetConfig+0x200>
 800844e:	e00f      	b.n	8008470 <UART_SetConfig+0x210>
 8008450:	2300      	movs	r3, #0
 8008452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008456:	e082      	b.n	800855e <UART_SetConfig+0x2fe>
 8008458:	2302      	movs	r3, #2
 800845a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800845e:	e07e      	b.n	800855e <UART_SetConfig+0x2fe>
 8008460:	2304      	movs	r3, #4
 8008462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008466:	e07a      	b.n	800855e <UART_SetConfig+0x2fe>
 8008468:	2308      	movs	r3, #8
 800846a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800846e:	e076      	b.n	800855e <UART_SetConfig+0x2fe>
 8008470:	2310      	movs	r3, #16
 8008472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008476:	e072      	b.n	800855e <UART_SetConfig+0x2fe>
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a35      	ldr	r2, [pc, #212]	@ (8008554 <UART_SetConfig+0x2f4>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d12a      	bne.n	80084d8 <UART_SetConfig+0x278>
 8008482:	4b30      	ldr	r3, [pc, #192]	@ (8008544 <UART_SetConfig+0x2e4>)
 8008484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008488:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800848c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008490:	d01a      	beq.n	80084c8 <UART_SetConfig+0x268>
 8008492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008496:	d81b      	bhi.n	80084d0 <UART_SetConfig+0x270>
 8008498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800849c:	d00c      	beq.n	80084b8 <UART_SetConfig+0x258>
 800849e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084a2:	d815      	bhi.n	80084d0 <UART_SetConfig+0x270>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <UART_SetConfig+0x250>
 80084a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ac:	d008      	beq.n	80084c0 <UART_SetConfig+0x260>
 80084ae:	e00f      	b.n	80084d0 <UART_SetConfig+0x270>
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084b6:	e052      	b.n	800855e <UART_SetConfig+0x2fe>
 80084b8:	2302      	movs	r3, #2
 80084ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084be:	e04e      	b.n	800855e <UART_SetConfig+0x2fe>
 80084c0:	2304      	movs	r3, #4
 80084c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084c6:	e04a      	b.n	800855e <UART_SetConfig+0x2fe>
 80084c8:	2308      	movs	r3, #8
 80084ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ce:	e046      	b.n	800855e <UART_SetConfig+0x2fe>
 80084d0:	2310      	movs	r3, #16
 80084d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084d6:	e042      	b.n	800855e <UART_SetConfig+0x2fe>
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a17      	ldr	r2, [pc, #92]	@ (800853c <UART_SetConfig+0x2dc>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d13a      	bne.n	8008558 <UART_SetConfig+0x2f8>
 80084e2:	4b18      	ldr	r3, [pc, #96]	@ (8008544 <UART_SetConfig+0x2e4>)
 80084e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80084ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084f0:	d01a      	beq.n	8008528 <UART_SetConfig+0x2c8>
 80084f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084f6:	d81b      	bhi.n	8008530 <UART_SetConfig+0x2d0>
 80084f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084fc:	d00c      	beq.n	8008518 <UART_SetConfig+0x2b8>
 80084fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008502:	d815      	bhi.n	8008530 <UART_SetConfig+0x2d0>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <UART_SetConfig+0x2b0>
 8008508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800850c:	d008      	beq.n	8008520 <UART_SetConfig+0x2c0>
 800850e:	e00f      	b.n	8008530 <UART_SetConfig+0x2d0>
 8008510:	2300      	movs	r3, #0
 8008512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008516:	e022      	b.n	800855e <UART_SetConfig+0x2fe>
 8008518:	2302      	movs	r3, #2
 800851a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800851e:	e01e      	b.n	800855e <UART_SetConfig+0x2fe>
 8008520:	2304      	movs	r3, #4
 8008522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008526:	e01a      	b.n	800855e <UART_SetConfig+0x2fe>
 8008528:	2308      	movs	r3, #8
 800852a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800852e:	e016      	b.n	800855e <UART_SetConfig+0x2fe>
 8008530:	2310      	movs	r3, #16
 8008532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008536:	e012      	b.n	800855e <UART_SetConfig+0x2fe>
 8008538:	cfff69f3 	.word	0xcfff69f3
 800853c:	40008000 	.word	0x40008000
 8008540:	40013800 	.word	0x40013800
 8008544:	40021000 	.word	0x40021000
 8008548:	40004400 	.word	0x40004400
 800854c:	40004800 	.word	0x40004800
 8008550:	40004c00 	.word	0x40004c00
 8008554:	40005000 	.word	0x40005000
 8008558:	2310      	movs	r3, #16
 800855a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4aae      	ldr	r2, [pc, #696]	@ (800881c <UART_SetConfig+0x5bc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	f040 8097 	bne.w	8008698 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800856a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800856e:	2b08      	cmp	r3, #8
 8008570:	d823      	bhi.n	80085ba <UART_SetConfig+0x35a>
 8008572:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <UART_SetConfig+0x318>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	0800859d 	.word	0x0800859d
 800857c:	080085bb 	.word	0x080085bb
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085bb 	.word	0x080085bb
 8008588:	080085ab 	.word	0x080085ab
 800858c:	080085bb 	.word	0x080085bb
 8008590:	080085bb 	.word	0x080085bb
 8008594:	080085bb 	.word	0x080085bb
 8008598:	080085b3 	.word	0x080085b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800859c:	f7fe fff6 	bl	800758c <HAL_RCC_GetPCLK1Freq>
 80085a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085a2:	e010      	b.n	80085c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085a4:	4b9e      	ldr	r3, [pc, #632]	@ (8008820 <UART_SetConfig+0x5c0>)
 80085a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085a8:	e00d      	b.n	80085c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085aa:	f7fe ff81 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 80085ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085b0:	e009      	b.n	80085c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085b8:	e005      	b.n	80085c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8130 	beq.w	800882e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d2:	4a94      	ldr	r2, [pc, #592]	@ (8008824 <UART_SetConfig+0x5c4>)
 80085d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085d8:	461a      	mov	r2, r3
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80085e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	4413      	add	r3, r2
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d305      	bcc.n	80085fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d903      	bls.n	8008606 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008604:	e113      	b.n	800882e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	2200      	movs	r2, #0
 800860a:	60bb      	str	r3, [r7, #8]
 800860c:	60fa      	str	r2, [r7, #12]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008612:	4a84      	ldr	r2, [pc, #528]	@ (8008824 <UART_SetConfig+0x5c4>)
 8008614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008618:	b29b      	uxth	r3, r3
 800861a:	2200      	movs	r2, #0
 800861c:	603b      	str	r3, [r7, #0]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008624:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008628:	f7f8 fb36 	bl	8000c98 <__aeabi_uldivmod>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4610      	mov	r0, r2
 8008632:	4619      	mov	r1, r3
 8008634:	f04f 0200 	mov.w	r2, #0
 8008638:	f04f 0300 	mov.w	r3, #0
 800863c:	020b      	lsls	r3, r1, #8
 800863e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008642:	0202      	lsls	r2, r0, #8
 8008644:	6979      	ldr	r1, [r7, #20]
 8008646:	6849      	ldr	r1, [r1, #4]
 8008648:	0849      	lsrs	r1, r1, #1
 800864a:	2000      	movs	r0, #0
 800864c:	460c      	mov	r4, r1
 800864e:	4605      	mov	r5, r0
 8008650:	eb12 0804 	adds.w	r8, r2, r4
 8008654:	eb43 0905 	adc.w	r9, r3, r5
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	469a      	mov	sl, r3
 8008660:	4693      	mov	fp, r2
 8008662:	4652      	mov	r2, sl
 8008664:	465b      	mov	r3, fp
 8008666:	4640      	mov	r0, r8
 8008668:	4649      	mov	r1, r9
 800866a:	f7f8 fb15 	bl	8000c98 <__aeabi_uldivmod>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4613      	mov	r3, r2
 8008674:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800867c:	d308      	bcc.n	8008690 <UART_SetConfig+0x430>
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008684:	d204      	bcs.n	8008690 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6a3a      	ldr	r2, [r7, #32]
 800868c:	60da      	str	r2, [r3, #12]
 800868e:	e0ce      	b.n	800882e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008696:	e0ca      	b.n	800882e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086a0:	d166      	bne.n	8008770 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80086a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d827      	bhi.n	80086fa <UART_SetConfig+0x49a>
 80086aa:	a201      	add	r2, pc, #4	@ (adr r2, 80086b0 <UART_SetConfig+0x450>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086d5 	.word	0x080086d5
 80086b4:	080086dd 	.word	0x080086dd
 80086b8:	080086e5 	.word	0x080086e5
 80086bc:	080086fb 	.word	0x080086fb
 80086c0:	080086eb 	.word	0x080086eb
 80086c4:	080086fb 	.word	0x080086fb
 80086c8:	080086fb 	.word	0x080086fb
 80086cc:	080086fb 	.word	0x080086fb
 80086d0:	080086f3 	.word	0x080086f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d4:	f7fe ff5a 	bl	800758c <HAL_RCC_GetPCLK1Freq>
 80086d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086da:	e014      	b.n	8008706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086dc:	f7fe ff6c 	bl	80075b8 <HAL_RCC_GetPCLK2Freq>
 80086e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086e2:	e010      	b.n	8008706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e4:	4b4e      	ldr	r3, [pc, #312]	@ (8008820 <UART_SetConfig+0x5c0>)
 80086e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086e8:	e00d      	b.n	8008706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ea:	f7fe fee1 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 80086ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086f0:	e009      	b.n	8008706 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086f8:	e005      	b.n	8008706 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008704:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8090 	beq.w	800882e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008712:	4a44      	ldr	r2, [pc, #272]	@ (8008824 <UART_SetConfig+0x5c4>)
 8008714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008718:	461a      	mov	r2, r3
 800871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008720:	005a      	lsls	r2, r3, #1
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	085b      	lsrs	r3, r3, #1
 8008728:	441a      	add	r2, r3
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008732:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	2b0f      	cmp	r3, #15
 8008738:	d916      	bls.n	8008768 <UART_SetConfig+0x508>
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008740:	d212      	bcs.n	8008768 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	b29b      	uxth	r3, r3
 8008746:	f023 030f 	bic.w	r3, r3, #15
 800874a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	085b      	lsrs	r3, r3, #1
 8008750:	b29b      	uxth	r3, r3
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	b29a      	uxth	r2, r3
 8008758:	8bfb      	ldrh	r3, [r7, #30]
 800875a:	4313      	orrs	r3, r2
 800875c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	8bfa      	ldrh	r2, [r7, #30]
 8008764:	60da      	str	r2, [r3, #12]
 8008766:	e062      	b.n	800882e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800876e:	e05e      	b.n	800882e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008770:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008774:	2b08      	cmp	r3, #8
 8008776:	d828      	bhi.n	80087ca <UART_SetConfig+0x56a>
 8008778:	a201      	add	r2, pc, #4	@ (adr r2, 8008780 <UART_SetConfig+0x520>)
 800877a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877e:	bf00      	nop
 8008780:	080087a5 	.word	0x080087a5
 8008784:	080087ad 	.word	0x080087ad
 8008788:	080087b5 	.word	0x080087b5
 800878c:	080087cb 	.word	0x080087cb
 8008790:	080087bb 	.word	0x080087bb
 8008794:	080087cb 	.word	0x080087cb
 8008798:	080087cb 	.word	0x080087cb
 800879c:	080087cb 	.word	0x080087cb
 80087a0:	080087c3 	.word	0x080087c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087a4:	f7fe fef2 	bl	800758c <HAL_RCC_GetPCLK1Freq>
 80087a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087aa:	e014      	b.n	80087d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087ac:	f7fe ff04 	bl	80075b8 <HAL_RCC_GetPCLK2Freq>
 80087b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087b2:	e010      	b.n	80087d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008820 <UART_SetConfig+0x5c0>)
 80087b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087b8:	e00d      	b.n	80087d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087ba:	f7fe fe79 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 80087be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087c0:	e009      	b.n	80087d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087c8:	e005      	b.n	80087d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80087d4:	bf00      	nop
    }

    if (pclk != 0U)
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d028      	beq.n	800882e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e0:	4a10      	ldr	r2, [pc, #64]	@ (8008824 <UART_SetConfig+0x5c4>)
 80087e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087e6:	461a      	mov	r2, r3
 80087e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	441a      	add	r2, r3
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	2b0f      	cmp	r3, #15
 8008804:	d910      	bls.n	8008828 <UART_SetConfig+0x5c8>
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800880c:	d20c      	bcs.n	8008828 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	b29a      	uxth	r2, r3
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60da      	str	r2, [r3, #12]
 8008818:	e009      	b.n	800882e <UART_SetConfig+0x5ce>
 800881a:	bf00      	nop
 800881c:	40008000 	.word	0x40008000
 8008820:	00f42400 	.word	0x00f42400
 8008824:	08012f64 	.word	0x08012f64
      }
      else
      {
        ret = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2201      	movs	r2, #1
 8008832:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2201      	movs	r2, #1
 800883a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2200      	movs	r2, #0
 8008842:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2200      	movs	r2, #0
 8008848:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800884a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800884e:	4618      	mov	r0, r3
 8008850:	3730      	adds	r7, #48	@ 0x30
 8008852:	46bd      	mov	sp, r7
 8008854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ca:	f003 0304 	and.w	r3, r3, #4
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01a      	beq.n	800896e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008956:	d10a      	bne.n	800896e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	605a      	str	r2, [r3, #4]
  }
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b098      	sub	sp, #96	@ 0x60
 80089a0:	af02      	add	r7, sp, #8
 80089a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089ac:	f7f9 fd5c 	bl	8002468 <HAL_GetTick>
 80089b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d12f      	bne.n	8008a20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089c8:	2200      	movs	r2, #0
 80089ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f88e 	bl	8008af0 <UART_WaitOnFlagUntilTimeout>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d022      	beq.n	8008a20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	e853 3f00 	ldrex	r3, [r3]
 80089e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	461a      	mov	r2, r3
 80089f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80089fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a00:	e841 2300 	strex	r3, r2, [r1]
 8008a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e6      	bne.n	80089da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e063      	b.n	8008ae8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0304 	and.w	r3, r3, #4
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d149      	bne.n	8008ac2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a36:	2200      	movs	r2, #0
 8008a38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f857 	bl	8008af0 <UART_WaitOnFlagUntilTimeout>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d03c      	beq.n	8008ac2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	623b      	str	r3, [r7, #32]
   return(result);
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a66:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e6      	bne.n	8008a48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f023 0301 	bic.w	r3, r3, #1
 8008a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3308      	adds	r3, #8
 8008a98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a9a:	61fa      	str	r2, [r7, #28]
 8008a9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	69b9      	ldr	r1, [r7, #24]
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	617b      	str	r3, [r7, #20]
   return(result);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e5      	bne.n	8008a7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e012      	b.n	8008ae8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2220      	movs	r2, #32
 8008ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3758      	adds	r7, #88	@ 0x58
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	4613      	mov	r3, r2
 8008afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b00:	e04f      	b.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b08:	d04b      	beq.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b0a:	f7f9 fcad 	bl	8002468 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d302      	bcc.n	8008b20 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e04e      	b.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d037      	beq.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b80      	cmp	r3, #128	@ 0x80
 8008b36:	d034      	beq.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b40      	cmp	r3, #64	@ 0x40
 8008b3c:	d031      	beq.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f003 0308 	and.w	r3, r3, #8
 8008b48:	2b08      	cmp	r3, #8
 8008b4a:	d110      	bne.n	8008b6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2208      	movs	r2, #8
 8008b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 f838 	bl	8008bca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e029      	b.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69db      	ldr	r3, [r3, #28]
 8008b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b7c:	d111      	bne.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f81e 	bl	8008bca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e00f      	b.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	69da      	ldr	r2, [r3, #28]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4013      	ands	r3, r2
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	bf0c      	ite	eq
 8008bb2:	2301      	moveq	r3, #1
 8008bb4:	2300      	movne	r3, #0
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d0a0      	beq.n	8008b02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b095      	sub	sp, #84	@ 0x54
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bf2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e6      	bne.n	8008bd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3308      	adds	r3, #8
 8008c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c1a:	f023 0301 	bic.w	r3, r3, #1
 8008c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3308      	adds	r3, #8
 8008c26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e3      	bne.n	8008c04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d118      	bne.n	8008c76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f023 0310 	bic.w	r3, r3, #16
 8008c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c62:	61bb      	str	r3, [r7, #24]
 8008c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6979      	ldr	r1, [r7, #20]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e6      	bne.n	8008c44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008c8a:	bf00      	nop
 8008c8c:	3754      	adds	r7, #84	@ 0x54
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b085      	sub	sp, #20
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d101      	bne.n	8008cac <HAL_UARTEx_DisableFifoMode+0x16>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e027      	b.n	8008cfc <HAL_UARTEx_DisableFifoMode+0x66>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2224      	movs	r2, #36	@ 0x24
 8008cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0201 	bic.w	r2, r2, #1
 8008cd2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008cda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2220      	movs	r2, #32
 8008cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d101      	bne.n	8008d20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	e02d      	b.n	8008d7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2224      	movs	r2, #36	@ 0x24
 8008d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 0201 	bic.w	r2, r2, #1
 8008d46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f84f 	bl	8008e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e02d      	b.n	8008df8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2224      	movs	r2, #36	@ 0x24
 8008da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f022 0201 	bic.w	r2, r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f811 	bl	8008e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d108      	bne.n	8008e22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e20:	e031      	b.n	8008e86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e22:	2308      	movs	r3, #8
 8008e24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e26:	2308      	movs	r3, #8
 8008e28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	0e5b      	lsrs	r3, r3, #25
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 0307 	and.w	r3, r3, #7
 8008e38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	0f5b      	lsrs	r3, r3, #29
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	7b3a      	ldrb	r2, [r7, #12]
 8008e4e:	4911      	ldr	r1, [pc, #68]	@ (8008e94 <UARTEx_SetNbDataToProcess+0x94>)
 8008e50:	5c8a      	ldrb	r2, [r1, r2]
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e56:	7b3a      	ldrb	r2, [r7, #12]
 8008e58:	490f      	ldr	r1, [pc, #60]	@ (8008e98 <UARTEx_SetNbDataToProcess+0x98>)
 8008e5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	7b7a      	ldrb	r2, [r7, #13]
 8008e6c:	4909      	ldr	r1, [pc, #36]	@ (8008e94 <UARTEx_SetNbDataToProcess+0x94>)
 8008e6e:	5c8a      	ldrb	r2, [r1, r2]
 8008e70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e74:	7b7a      	ldrb	r2, [r7, #13]
 8008e76:	4908      	ldr	r1, [pc, #32]	@ (8008e98 <UARTEx_SetNbDataToProcess+0x98>)
 8008e78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	08012f7c 	.word	0x08012f7c
 8008e98:	08012f84 	.word	0x08012f84

08008e9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008eac:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008eb0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ed2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008ed6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	43db      	mvns	r3, r3
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	4013      	ands	r3, r2
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	1d3b      	adds	r3, r7, #4
 8008f0a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b0a7      	sub	sp, #156	@ 0x9c
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f62:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	78db      	ldrb	r3, [r3, #3]
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d81f      	bhi.n	8008fae <USB_ActivateEndpoint+0x72>
 8008f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <USB_ActivateEndpoint+0x38>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008f85 	.word	0x08008f85
 8008f78:	08008fa1 	.word	0x08008fa1
 8008f7c:	08008fb7 	.word	0x08008fb7
 8008f80:	08008f93 	.word	0x08008f93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008f84:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008f88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f8c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008f90:	e012      	b.n	8008fb8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008f92:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008f96:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008f9a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008f9e:	e00b      	b.n	8008fb8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008fa0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008fa4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008fa8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008fac:	e004      	b.n	8008fb8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8008fb4:	e000      	b.n	8008fb8 <USB_ActivateEndpoint+0x7c>
      break;
 8008fb6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	441a      	add	r2, r3
 8008fc2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	b21b      	sxth	r3, r3
 8008fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff2:	b21a      	sxth	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	b21b      	sxth	r3, r3
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	b21b      	sxth	r3, r3
 8008ffe:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	441a      	add	r2, r3
 800900c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800901c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009020:	b29b      	uxth	r3, r3
 8009022:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	7b1b      	ldrb	r3, [r3, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f040 8180 	bne.w	800932e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	785b      	ldrb	r3, [r3, #1]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 8084 	beq.w	8009140 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	61bb      	str	r3, [r7, #24]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009042:	b29b      	uxth	r3, r3
 8009044:	461a      	mov	r2, r3
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	4413      	add	r3, r2
 800904a:	61bb      	str	r3, [r7, #24]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	00da      	lsls	r2, r3, #3
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	88db      	ldrh	r3, [r3, #6]
 8009060:	085b      	lsrs	r3, r3, #1
 8009062:	b29b      	uxth	r3, r3
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	b29a      	uxth	r2, r3
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	827b      	strh	r3, [r7, #18]
 800907a:	8a7b      	ldrh	r3, [r7, #18]
 800907c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01b      	beq.n	80090bc <USB_ActivateEndpoint+0x180>
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	b29b      	uxth	r3, r3
 8009092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800909a:	823b      	strh	r3, [r7, #16]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	441a      	add	r2, r3
 80090a6:	8a3b      	ldrh	r3, [r7, #16]
 80090a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	78db      	ldrb	r3, [r3, #3]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d020      	beq.n	8009106 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090da:	81bb      	strh	r3, [r7, #12]
 80090dc:	89bb      	ldrh	r3, [r7, #12]
 80090de:	f083 0320 	eor.w	r3, r3, #32
 80090e2:	81bb      	strh	r3, [r7, #12]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	441a      	add	r2, r3
 80090ee:	89bb      	ldrh	r3, [r7, #12]
 80090f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009100:	b29b      	uxth	r3, r3
 8009102:	8013      	strh	r3, [r2, #0]
 8009104:	e3f9      	b.n	80098fa <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800911c:	81fb      	strh	r3, [r7, #14]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	441a      	add	r2, r3
 8009128:	89fb      	ldrh	r3, [r7, #14]
 800912a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800912e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800913a:	b29b      	uxth	r3, r3
 800913c:	8013      	strh	r3, [r2, #0]
 800913e:	e3dc      	b.n	80098fa <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	633b      	str	r3, [r7, #48]	@ 0x30
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800914a:	b29b      	uxth	r3, r3
 800914c:	461a      	mov	r2, r3
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	4413      	add	r3, r2
 8009152:	633b      	str	r3, [r7, #48]	@ 0x30
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	00da      	lsls	r2, r3, #3
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	4413      	add	r3, r2
 800915e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	88db      	ldrh	r3, [r3, #6]
 8009168:	085b      	lsrs	r3, r3, #1
 800916a:	b29b      	uxth	r3, r3
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009172:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800917e:	b29b      	uxth	r3, r3
 8009180:	461a      	mov	r2, r3
 8009182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009184:	4413      	add	r3, r2
 8009186:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	00da      	lsls	r2, r3, #3
 800918e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009190:	4413      	add	r3, r2
 8009192:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009196:	627b      	str	r3, [r7, #36]	@ 0x24
 8009198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a6:	801a      	strh	r2, [r3, #0]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <USB_ActivateEndpoint+0x28a>
 80091b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091be:	b29a      	uxth	r2, r3
 80091c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c2:	801a      	strh	r2, [r3, #0]
 80091c4:	e041      	b.n	800924a <USB_ActivateEndpoint+0x30e>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80091cc:	d81c      	bhi.n	8009208 <USB_ActivateEndpoint+0x2cc>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	085b      	lsrs	r3, r3, #1
 80091d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d004      	beq.n	80091ee <USB_ActivateEndpoint+0x2b2>
 80091e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091e8:	3301      	adds	r3, #1
 80091ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	029b      	lsls	r3, r3, #10
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	4313      	orrs	r3, r2
 8009200:	b29a      	uxth	r2, r3
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	e020      	b.n	800924a <USB_ActivateEndpoint+0x30e>
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	095b      	lsrs	r3, r3, #5
 800920e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 031f 	and.w	r3, r3, #31
 800921a:	2b00      	cmp	r3, #0
 800921c:	d104      	bne.n	8009228 <USB_ActivateEndpoint+0x2ec>
 800921e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009222:	3b01      	subs	r3, #1
 8009224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29a      	uxth	r2, r3
 800922e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009232:	b29b      	uxth	r3, r3
 8009234:	029b      	lsls	r3, r3, #10
 8009236:	b29b      	uxth	r3, r3
 8009238:	4313      	orrs	r3, r2
 800923a:	b29b      	uxth	r3, r3
 800923c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009244:	b29a      	uxth	r2, r3
 8009246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009248:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009258:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800925a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d01b      	beq.n	800929a <USB_ActivateEndpoint+0x35e>
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	b29b      	uxth	r3, r3
 8009270:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009278:	843b      	strh	r3, [r7, #32]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	441a      	add	r2, r3
 8009284:	8c3b      	ldrh	r3, [r7, #32]
 8009286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800928a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800928e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009296:	b29b      	uxth	r3, r3
 8009298:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d124      	bne.n	80092ec <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092b8:	83bb      	strh	r3, [r7, #28]
 80092ba:	8bbb      	ldrh	r3, [r7, #28]
 80092bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80092c0:	83bb      	strh	r3, [r7, #28]
 80092c2:	8bbb      	ldrh	r3, [r7, #28]
 80092c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80092c8:	83bb      	strh	r3, [r7, #28]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	441a      	add	r2, r3
 80092d4:	8bbb      	ldrh	r3, [r7, #28]
 80092d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	8013      	strh	r3, [r2, #0]
 80092ea:	e306      	b.n	80098fa <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009302:	83fb      	strh	r3, [r7, #30]
 8009304:	8bfb      	ldrh	r3, [r7, #30]
 8009306:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800930a:	83fb      	strh	r3, [r7, #30]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	441a      	add	r2, r3
 8009316:	8bfb      	ldrh	r3, [r7, #30]
 8009318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800931c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009328:	b29b      	uxth	r3, r3
 800932a:	8013      	strh	r3, [r2, #0]
 800932c:	e2e5      	b.n	80098fa <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	78db      	ldrb	r3, [r3, #3]
 8009332:	2b02      	cmp	r3, #2
 8009334:	d11e      	bne.n	8009374 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800934c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	441a      	add	r2, r3
 800935a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800935e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009366:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800936a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936e:	b29b      	uxth	r3, r3
 8009370:	8013      	strh	r3, [r2, #0]
 8009372:	e01d      	b.n	80093b0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	b29b      	uxth	r3, r3
 8009382:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800938a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	441a      	add	r2, r3
 8009398:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800939c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	461a      	mov	r2, r3
 80093be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80093c0:	4413      	add	r3, r2
 80093c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	00da      	lsls	r2, r3, #3
 80093ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	891b      	ldrh	r3, [r3, #8]
 80093d8:	085b      	lsrs	r3, r3, #1
 80093da:	b29b      	uxth	r3, r3
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	b29a      	uxth	r2, r3
 80093e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093e2:	801a      	strh	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	461a      	mov	r2, r3
 80093f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093f4:	4413      	add	r3, r2
 80093f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	00da      	lsls	r2, r3, #3
 80093fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009400:	4413      	add	r3, r2
 8009402:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009406:	673b      	str	r3, [r7, #112]	@ 0x70
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	895b      	ldrh	r3, [r3, #10]
 800940c:	085b      	lsrs	r3, r3, #1
 800940e:	b29b      	uxth	r3, r3
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	b29a      	uxth	r2, r3
 8009414:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009416:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f040 81af 	bne.w	8009780 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8009432:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8009436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d01d      	beq.n	800947a <USB_ActivateEndpoint+0x53e>
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009454:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	441a      	add	r2, r3
 8009462:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8009466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800946a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800946e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009476:	b29b      	uxth	r3, r3
 8009478:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800948a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800948e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009492:	2b00      	cmp	r3, #0
 8009494:	d01d      	beq.n	80094d2 <USB_ActivateEndpoint+0x596>
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ac:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	441a      	add	r2, r3
 80094ba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80094be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	785b      	ldrb	r3, [r3, #1]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d16b      	bne.n	80095b2 <USB_ActivateEndpoint+0x676>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	461a      	mov	r2, r3
 80094e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ea:	4413      	add	r3, r2
 80094ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	00da      	lsls	r2, r3, #3
 80094f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094f6:	4413      	add	r3, r2
 80094f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80094fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	b29b      	uxth	r3, r3
 8009504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009508:	b29a      	uxth	r2, r3
 800950a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <USB_ActivateEndpoint+0x5f0>
 8009516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	b29b      	uxth	r3, r3
 800951c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009524:	b29a      	uxth	r2, r3
 8009526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009528:	801a      	strh	r2, [r3, #0]
 800952a:	e05d      	b.n	80095e8 <USB_ActivateEndpoint+0x6ac>
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	2b3e      	cmp	r3, #62	@ 0x3e
 8009532:	d81c      	bhi.n	800956e <USB_ActivateEndpoint+0x632>
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	085b      	lsrs	r3, r3, #1
 800953a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d004      	beq.n	8009554 <USB_ActivateEndpoint+0x618>
 800954a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800954e:	3301      	adds	r3, #1
 8009550:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29a      	uxth	r2, r3
 800955a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800955e:	b29b      	uxth	r3, r3
 8009560:	029b      	lsls	r3, r3, #10
 8009562:	b29b      	uxth	r3, r3
 8009564:	4313      	orrs	r3, r2
 8009566:	b29a      	uxth	r2, r3
 8009568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	e03c      	b.n	80095e8 <USB_ActivateEndpoint+0x6ac>
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	f003 031f 	and.w	r3, r3, #31
 8009580:	2b00      	cmp	r3, #0
 8009582:	d104      	bne.n	800958e <USB_ActivateEndpoint+0x652>
 8009584:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009588:	3b01      	subs	r3, #1
 800958a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800958e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29a      	uxth	r2, r3
 8009594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009598:	b29b      	uxth	r3, r3
 800959a:	029b      	lsls	r3, r3, #10
 800959c:	b29b      	uxth	r3, r3
 800959e:	4313      	orrs	r3, r2
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095ae:	801a      	strh	r2, [r3, #0]
 80095b0:	e01a      	b.n	80095e8 <USB_ActivateEndpoint+0x6ac>
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	785b      	ldrb	r3, [r3, #1]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d116      	bne.n	80095e8 <USB_ActivateEndpoint+0x6ac>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	461a      	mov	r2, r3
 80095c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095ca:	4413      	add	r3, r2
 80095cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	00da      	lsls	r2, r3, #3
 80095d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095d6:	4413      	add	r3, r2
 80095d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80095dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095e6:	801a      	strh	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d16b      	bne.n	80096cc <USB_ActivateEndpoint+0x790>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095fe:	b29b      	uxth	r3, r3
 8009600:	461a      	mov	r2, r3
 8009602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009604:	4413      	add	r3, r2
 8009606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	00da      	lsls	r2, r3, #3
 800960e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009610:	4413      	add	r3, r2
 8009612:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009616:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	b29b      	uxth	r3, r3
 800961e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009622:	b29a      	uxth	r2, r3
 8009624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009626:	801a      	strh	r2, [r3, #0]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <USB_ActivateEndpoint+0x70a>
 8009630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	b29b      	uxth	r3, r3
 8009636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800963a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800963e:	b29a      	uxth	r2, r3
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	801a      	strh	r2, [r3, #0]
 8009644:	e05b      	b.n	80096fe <USB_ActivateEndpoint+0x7c2>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	2b3e      	cmp	r3, #62	@ 0x3e
 800964c:	d81c      	bhi.n	8009688 <USB_ActivateEndpoint+0x74c>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	085b      	lsrs	r3, r3, #1
 8009654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	d004      	beq.n	800966e <USB_ActivateEndpoint+0x732>
 8009664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009668:	3301      	adds	r3, #1
 800966a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800966e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29a      	uxth	r2, r3
 8009674:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009678:	b29b      	uxth	r3, r3
 800967a:	029b      	lsls	r3, r3, #10
 800967c:	b29b      	uxth	r3, r3
 800967e:	4313      	orrs	r3, r2
 8009680:	b29a      	uxth	r2, r3
 8009682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009684:	801a      	strh	r2, [r3, #0]
 8009686:	e03a      	b.n	80096fe <USB_ActivateEndpoint+0x7c2>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	095b      	lsrs	r3, r3, #5
 800968e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	f003 031f 	and.w	r3, r3, #31
 800969a:	2b00      	cmp	r3, #0
 800969c:	d104      	bne.n	80096a8 <USB_ActivateEndpoint+0x76c>
 800969e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096a2:	3b01      	subs	r3, #1
 80096a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	029b      	lsls	r3, r3, #10
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	4313      	orrs	r3, r2
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c8:	801a      	strh	r2, [r3, #0]
 80096ca:	e018      	b.n	80096fe <USB_ActivateEndpoint+0x7c2>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	785b      	ldrb	r3, [r3, #1]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d114      	bne.n	80096fe <USB_ActivateEndpoint+0x7c2>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096da:	b29b      	uxth	r3, r3
 80096dc:	461a      	mov	r2, r3
 80096de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096e0:	4413      	add	r3, r2
 80096e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	00da      	lsls	r2, r3, #3
 80096ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096ec:	4413      	add	r3, r2
 80096ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80096f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096fc:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	b29b      	uxth	r3, r3
 800970c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009714:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009716:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009718:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800971c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800971e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009720:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009724:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	441a      	add	r2, r3
 8009730:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800973a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800973e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009742:	b29b      	uxth	r3, r3
 8009744:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	b29b      	uxth	r3, r3
 8009754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800975c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	441a      	add	r2, r3
 8009768:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800976a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800976e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800977a:	b29b      	uxth	r3, r3
 800977c:	8013      	strh	r3, [r2, #0]
 800977e:	e0bc      	b.n	80098fa <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8009790:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01d      	beq.n	80097d8 <USB_ActivateEndpoint+0x89c>
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097b2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	441a      	add	r2, r3
 80097c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80097e8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80097ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d01d      	beq.n	8009830 <USB_ActivateEndpoint+0x8f4>
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	b29b      	uxth	r3, r3
 8009802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800980a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	441a      	add	r2, r3
 8009818:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800981c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009828:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800982c:	b29b      	uxth	r3, r3
 800982e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	78db      	ldrb	r3, [r3, #3]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d024      	beq.n	8009882 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	b29b      	uxth	r3, r3
 8009846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800984a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800984e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009852:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009856:	f083 0320 	eor.w	r3, r3, #32
 800985a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	441a      	add	r2, r3
 8009868:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800986c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800987c:	b29b      	uxth	r3, r3
 800987e:	8013      	strh	r3, [r2, #0]
 8009880:	e01d      	b.n	80098be <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	b29b      	uxth	r3, r3
 8009890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009898:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	441a      	add	r2, r3
 80098a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80098aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098d4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	441a      	add	r2, r3
 80098e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80098e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80098fa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80098fe:	4618      	mov	r0, r3
 8009900:	379c      	adds	r7, #156	@ 0x9c
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop

0800990c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800990c:	b480      	push	{r7}
 800990e:	b08d      	sub	sp, #52	@ 0x34
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	7b1b      	ldrb	r3, [r3, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	f040 808e 	bne.w	8009a3c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	785b      	ldrb	r3, [r3, #1]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d044      	beq.n	80099b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	81bb      	strh	r3, [r7, #12]
 8009936:	89bb      	ldrh	r3, [r7, #12]
 8009938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01b      	beq.n	8009978 <USB_DeactivateEndpoint+0x6c>
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	881b      	ldrh	r3, [r3, #0]
 800994c:	b29b      	uxth	r3, r3
 800994e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009956:	817b      	strh	r3, [r7, #10]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	441a      	add	r2, r3
 8009962:	897b      	ldrh	r3, [r7, #10]
 8009964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800996c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009970:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009974:	b29b      	uxth	r3, r3
 8009976:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	b29b      	uxth	r3, r3
 8009986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800998a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800998e:	813b      	strh	r3, [r7, #8]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	441a      	add	r2, r3
 800999a:	893b      	ldrh	r3, [r7, #8]
 800999c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	8013      	strh	r3, [r2, #0]
 80099b0:	e192      	b.n	8009cd8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	827b      	strh	r3, [r7, #18]
 80099c0:	8a7b      	ldrh	r3, [r7, #18]
 80099c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d01b      	beq.n	8009a02 <USB_DeactivateEndpoint+0xf6>
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099e0:	823b      	strh	r3, [r7, #16]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	441a      	add	r2, r3
 80099ec:	8a3b      	ldrh	r3, [r7, #16]
 80099ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a18:	81fb      	strh	r3, [r7, #14]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	441a      	add	r2, r3
 8009a24:	89fb      	ldrh	r3, [r7, #14]
 8009a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	8013      	strh	r3, [r2, #0]
 8009a3a:	e14d      	b.n	8009cd8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	785b      	ldrb	r3, [r3, #1]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f040 80a5 	bne.w	8009b90 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	843b      	strh	r3, [r7, #32]
 8009a54:	8c3b      	ldrh	r3, [r7, #32]
 8009a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d01b      	beq.n	8009a96 <USB_DeactivateEndpoint+0x18a>
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a74:	83fb      	strh	r3, [r7, #30]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	441a      	add	r2, r3
 8009a80:	8bfb      	ldrh	r3, [r7, #30]
 8009a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	83bb      	strh	r3, [r7, #28]
 8009aa4:	8bbb      	ldrh	r3, [r7, #28]
 8009aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01b      	beq.n	8009ae6 <USB_DeactivateEndpoint+0x1da>
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ac4:	837b      	strh	r3, [r7, #26]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	441a      	add	r2, r3
 8009ad0:	8b7b      	ldrh	r3, [r7, #26]
 8009ad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ade:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009afc:	833b      	strh	r3, [r7, #24]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	441a      	add	r2, r3
 8009b08:	8b3b      	ldrh	r3, [r7, #24]
 8009b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b34:	82fb      	strh	r3, [r7, #22]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	441a      	add	r2, r3
 8009b40:	8afb      	ldrh	r3, [r7, #22]
 8009b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b6c:	82bb      	strh	r3, [r7, #20]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	441a      	add	r2, r3
 8009b78:	8abb      	ldrh	r3, [r7, #20]
 8009b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	8013      	strh	r3, [r2, #0]
 8009b8e:	e0a3      	b.n	8009cd8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009b9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01b      	beq.n	8009be0 <USB_DeactivateEndpoint+0x2d4>
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bbe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	441a      	add	r2, r3
 8009bca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009bee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d01b      	beq.n	8009c30 <USB_DeactivateEndpoint+0x324>
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	881b      	ldrh	r3, [r3, #0]
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c0e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	441a      	add	r2, r3
 8009c1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	441a      	add	r2, r3
 8009c52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	441a      	add	r2, r3
 8009c8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009c8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	441a      	add	r2, r3
 8009cc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3734      	adds	r7, #52	@ 0x34
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b0ac      	sub	sp, #176	@ 0xb0
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	785b      	ldrb	r3, [r3, #1]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	f040 84ca 	bne.w	800a68e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	699a      	ldr	r2, [r3, #24]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d904      	bls.n	8009d10 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d0e:	e003      	b.n	8009d18 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	7b1b      	ldrb	r3, [r3, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d122      	bne.n	8009d66 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	6959      	ldr	r1, [r3, #20]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	88da      	ldrh	r2, [r3, #6]
 8009d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 febd 	bl	800aaae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	461a      	mov	r2, r3
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	4413      	add	r3, r2
 8009d46:	613b      	str	r3, [r7, #16]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	00da      	lsls	r2, r3, #3
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	4413      	add	r3, r2
 8009d52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	801a      	strh	r2, [r3, #0]
 8009d62:	f000 bc6f 	b.w	800a644 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	78db      	ldrb	r3, [r3, #3]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	f040 831e 	bne.w	800a3ac <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	6a1a      	ldr	r2, [r3, #32]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	f240 82cf 	bls.w	800a31c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d94:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	441a      	add	r2, r3
 8009da2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	6a1a      	ldr	r2, [r3, #32]
 8009dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dc2:	1ad2      	subs	r2, r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 814f 	beq.w	800a07e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	785b      	ldrb	r3, [r3, #1]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d16b      	bne.n	8009ec4 <USB_EPStartXfer+0x1de>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	461a      	mov	r2, r3
 8009dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfc:	4413      	add	r3, r2
 8009dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	00da      	lsls	r2, r3, #3
 8009e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e08:	4413      	add	r3, r2
 8009e0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1e:	801a      	strh	r2, [r3, #0]
 8009e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <USB_EPStartXfer+0x158>
 8009e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	801a      	strh	r2, [r3, #0]
 8009e3c:	e05b      	b.n	8009ef6 <USB_EPStartXfer+0x210>
 8009e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e42:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e44:	d81c      	bhi.n	8009e80 <USB_EPStartXfer+0x19a>
 8009e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e4a:	085b      	lsrs	r3, r3, #1
 8009e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e54:	f003 0301 	and.w	r3, r3, #1
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <USB_EPStartXfer+0x180>
 8009e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e60:	3301      	adds	r3, #1
 8009e62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	029b      	lsls	r3, r3, #10
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	4313      	orrs	r3, r2
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e7c:	801a      	strh	r2, [r3, #0]
 8009e7e:	e03a      	b.n	8009ef6 <USB_EPStartXfer+0x210>
 8009e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e84:	095b      	lsrs	r3, r3, #5
 8009e86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e8e:	f003 031f 	and.w	r3, r3, #31
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d104      	bne.n	8009ea0 <USB_EPStartXfer+0x1ba>
 8009e96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	029b      	lsls	r3, r3, #10
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	e018      	b.n	8009ef6 <USB_EPStartXfer+0x210>
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	785b      	ldrb	r3, [r3, #1]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d114      	bne.n	8009ef6 <USB_EPStartXfer+0x210>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed8:	4413      	add	r3, r2
 8009eda:	633b      	str	r3, [r7, #48]	@ 0x30
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	00da      	lsls	r2, r3, #3
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	895b      	ldrh	r3, [r3, #10]
 8009efa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	6959      	ldr	r1, [r3, #20]
 8009f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fdce 	bl	800aaae <USB_WritePMA>
            ep->xfer_buff += len;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	695a      	ldr	r2, [r3, #20]
 8009f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f1a:	441a      	add	r2, r3
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	6a1a      	ldr	r2, [r3, #32]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d907      	bls.n	8009f3c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	6a1a      	ldr	r2, [r3, #32]
 8009f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f34:	1ad2      	subs	r2, r2, r3
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	621a      	str	r2, [r3, #32]
 8009f3a:	e006      	b.n	8009f4a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	6a1b      	ldr	r3, [r3, #32]
 8009f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2200      	movs	r2, #0
 8009f48:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	785b      	ldrb	r3, [r3, #1]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d16b      	bne.n	800a02a <USB_EPStartXfer+0x344>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	61bb      	str	r3, [r7, #24]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	461a      	mov	r2, r3
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	4413      	add	r3, r2
 8009f64:	61bb      	str	r3, [r7, #24]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	00da      	lsls	r2, r3, #3
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f74:	617b      	str	r3, [r7, #20]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	801a      	strh	r2, [r3, #0]
 8009f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10a      	bne.n	8009fa4 <USB_EPStartXfer+0x2be>
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	e05d      	b.n	800a060 <USB_EPStartXfer+0x37a>
 8009fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fa8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009faa:	d81c      	bhi.n	8009fe6 <USB_EPStartXfer+0x300>
 8009fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fb0:	085b      	lsrs	r3, r3, #1
 8009fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d004      	beq.n	8009fcc <USB_EPStartXfer+0x2e6>
 8009fc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	029b      	lsls	r3, r3, #10
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	801a      	strh	r2, [r3, #0]
 8009fe4:	e03c      	b.n	800a060 <USB_EPStartXfer+0x37a>
 8009fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fea:	095b      	lsrs	r3, r3, #5
 8009fec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ff4:	f003 031f 	and.w	r3, r3, #31
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d104      	bne.n	800a006 <USB_EPStartXfer+0x320>
 8009ffc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a000:	3b01      	subs	r3, #1
 800a002:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a010:	b29b      	uxth	r3, r3
 800a012:	029b      	lsls	r3, r3, #10
 800a014:	b29b      	uxth	r3, r3
 800a016:	4313      	orrs	r3, r2
 800a018:	b29b      	uxth	r3, r3
 800a01a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a01e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a022:	b29a      	uxth	r2, r3
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	801a      	strh	r2, [r3, #0]
 800a028:	e01a      	b.n	800a060 <USB_EPStartXfer+0x37a>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	785b      	ldrb	r3, [r3, #1]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d116      	bne.n	800a060 <USB_EPStartXfer+0x37a>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	623b      	str	r3, [r7, #32]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	4413      	add	r3, r2
 800a044:	623b      	str	r3, [r7, #32]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	00da      	lsls	r2, r3, #3
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	4413      	add	r3, r2
 800a050:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a054:	61fb      	str	r3, [r7, #28]
 800a056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	891b      	ldrh	r3, [r3, #8]
 800a064:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	6959      	ldr	r1, [r3, #20]
 800a06c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a070:	b29b      	uxth	r3, r3
 800a072:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fd19 	bl	800aaae <USB_WritePMA>
 800a07c:	e2e2      	b.n	800a644 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	785b      	ldrb	r3, [r3, #1]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d16b      	bne.n	800a15e <USB_EPStartXfer+0x478>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a090:	b29b      	uxth	r3, r3
 800a092:	461a      	mov	r2, r3
 800a094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a096:	4413      	add	r3, r2
 800a098:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	00da      	lsls	r2, r3, #3
 800a0a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a0a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0b8:	801a      	strh	r2, [r3, #0]
 800a0ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10a      	bne.n	800a0d8 <USB_EPStartXfer+0x3f2>
 800a0c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0d4:	801a      	strh	r2, [r3, #0]
 800a0d6:	e05d      	b.n	800a194 <USB_EPStartXfer+0x4ae>
 800a0d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0de:	d81c      	bhi.n	800a11a <USB_EPStartXfer+0x434>
 800a0e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0e4:	085b      	lsrs	r3, r3, #1
 800a0e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d004      	beq.n	800a100 <USB_EPStartXfer+0x41a>
 800a0f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	b29a      	uxth	r2, r3
 800a106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	029b      	lsls	r3, r3, #10
 800a10e:	b29b      	uxth	r3, r3
 800a110:	4313      	orrs	r3, r2
 800a112:	b29a      	uxth	r2, r3
 800a114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a116:	801a      	strh	r2, [r3, #0]
 800a118:	e03c      	b.n	800a194 <USB_EPStartXfer+0x4ae>
 800a11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a11e:	095b      	lsrs	r3, r3, #5
 800a120:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a128:	f003 031f 	and.w	r3, r3, #31
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d104      	bne.n	800a13a <USB_EPStartXfer+0x454>
 800a130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a134:	3b01      	subs	r3, #1
 800a136:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a13a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	b29a      	uxth	r2, r3
 800a140:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a144:	b29b      	uxth	r3, r3
 800a146:	029b      	lsls	r3, r3, #10
 800a148:	b29b      	uxth	r3, r3
 800a14a:	4313      	orrs	r3, r2
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a156:	b29a      	uxth	r2, r3
 800a158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a15a:	801a      	strh	r2, [r3, #0]
 800a15c:	e01a      	b.n	800a194 <USB_EPStartXfer+0x4ae>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	785b      	ldrb	r3, [r3, #1]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d116      	bne.n	800a194 <USB_EPStartXfer+0x4ae>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	653b      	str	r3, [r7, #80]	@ 0x50
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a170:	b29b      	uxth	r3, r3
 800a172:	461a      	mov	r2, r3
 800a174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a176:	4413      	add	r3, r2
 800a178:	653b      	str	r3, [r7, #80]	@ 0x50
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	00da      	lsls	r2, r3, #3
 800a180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a182:	4413      	add	r3, r2
 800a184:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a18a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a18e:	b29a      	uxth	r2, r3
 800a190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a192:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	891b      	ldrh	r3, [r3, #8]
 800a198:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	6959      	ldr	r1, [r3, #20]
 800a1a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fc7f 	bl	800aaae <USB_WritePMA>
            ep->xfer_buff += len;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	695a      	ldr	r2, [r3, #20]
 800a1b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1b8:	441a      	add	r2, r3
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	6a1a      	ldr	r2, [r3, #32]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d907      	bls.n	800a1da <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	6a1a      	ldr	r2, [r3, #32]
 800a1ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1d2:	1ad2      	subs	r2, r2, r3
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	621a      	str	r2, [r3, #32]
 800a1d8:	e006      	b.n	800a1e8 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	785b      	ldrb	r3, [r3, #1]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d16b      	bne.n	800a2cc <USB_EPStartXfer+0x5e6>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	461a      	mov	r2, r3
 800a202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a204:	4413      	add	r3, r2
 800a206:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	00da      	lsls	r2, r3, #3
 800a20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a210:	4413      	add	r3, r2
 800a212:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a216:	637b      	str	r3, [r7, #52]	@ 0x34
 800a218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a21a:	881b      	ldrh	r3, [r3, #0]
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a222:	b29a      	uxth	r2, r3
 800a224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a226:	801a      	strh	r2, [r3, #0]
 800a228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <USB_EPStartXfer+0x560>
 800a230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	b29b      	uxth	r3, r3
 800a236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a23a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a23e:	b29a      	uxth	r2, r3
 800a240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a242:	801a      	strh	r2, [r3, #0]
 800a244:	e05b      	b.n	800a2fe <USB_EPStartXfer+0x618>
 800a246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a24a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a24c:	d81c      	bhi.n	800a288 <USB_EPStartXfer+0x5a2>
 800a24e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a252:	085b      	lsrs	r3, r3, #1
 800a254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	d004      	beq.n	800a26e <USB_EPStartXfer+0x588>
 800a264:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a268:	3301      	adds	r3, #1
 800a26a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a270:	881b      	ldrh	r3, [r3, #0]
 800a272:	b29a      	uxth	r2, r3
 800a274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a278:	b29b      	uxth	r3, r3
 800a27a:	029b      	lsls	r3, r3, #10
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	4313      	orrs	r3, r2
 800a280:	b29a      	uxth	r2, r3
 800a282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a284:	801a      	strh	r2, [r3, #0]
 800a286:	e03a      	b.n	800a2fe <USB_EPStartXfer+0x618>
 800a288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a28c:	095b      	lsrs	r3, r3, #5
 800a28e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a296:	f003 031f 	and.w	r3, r3, #31
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <USB_EPStartXfer+0x5c2>
 800a29e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	029b      	lsls	r3, r3, #10
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c8:	801a      	strh	r2, [r3, #0]
 800a2ca:	e018      	b.n	800a2fe <USB_EPStartXfer+0x618>
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	785b      	ldrb	r3, [r3, #1]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d114      	bne.n	800a2fe <USB_EPStartXfer+0x618>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2e0:	4413      	add	r3, r2
 800a2e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	00da      	lsls	r2, r3, #3
 800a2ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	895b      	ldrh	r3, [r3, #10]
 800a302:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	6959      	ldr	r1, [r3, #20]
 800a30a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a30e:	b29b      	uxth	r3, r3
 800a310:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fbca 	bl	800aaae <USB_WritePMA>
 800a31a:	e193      	b.n	800a644 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	b29b      	uxth	r3, r3
 800a332:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a33a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	441a      	add	r2, r3
 800a348:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a34c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	461a      	mov	r2, r3
 800a36e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a370:	4413      	add	r3, r2
 800a372:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	00da      	lsls	r2, r3, #3
 800a37a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a37c:	4413      	add	r3, r2
 800a37e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a382:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a388:	b29a      	uxth	r2, r3
 800a38a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a38c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	891b      	ldrh	r3, [r3, #8]
 800a392:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	6959      	ldr	r1, [r3, #20]
 800a39a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fb82 	bl	800aaae <USB_WritePMA>
 800a3aa:	e14b      	b.n	800a644 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	6a1a      	ldr	r2, [r3, #32]
 800a3b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3b4:	1ad2      	subs	r2, r2, r3
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 809a 	beq.w	800a506 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	785b      	ldrb	r3, [r3, #1]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d16b      	bne.n	800a4b6 <USB_EPStartXfer+0x7d0>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3ee:	4413      	add	r3, r2
 800a3f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	00da      	lsls	r2, r3, #3
 800a3f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a400:	667b      	str	r3, [r7, #100]	@ 0x64
 800a402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	b29b      	uxth	r3, r3
 800a408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a410:	801a      	strh	r2, [r3, #0]
 800a412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10a      	bne.n	800a430 <USB_EPStartXfer+0x74a>
 800a41a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a41c:	881b      	ldrh	r3, [r3, #0]
 800a41e:	b29b      	uxth	r3, r3
 800a420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a428:	b29a      	uxth	r2, r3
 800a42a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a42c:	801a      	strh	r2, [r3, #0]
 800a42e:	e05b      	b.n	800a4e8 <USB_EPStartXfer+0x802>
 800a430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a434:	2b3e      	cmp	r3, #62	@ 0x3e
 800a436:	d81c      	bhi.n	800a472 <USB_EPStartXfer+0x78c>
 800a438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a43c:	085b      	lsrs	r3, r3, #1
 800a43e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d004      	beq.n	800a458 <USB_EPStartXfer+0x772>
 800a44e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a452:	3301      	adds	r3, #1
 800a454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a45a:	881b      	ldrh	r3, [r3, #0]
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a462:	b29b      	uxth	r3, r3
 800a464:	029b      	lsls	r3, r3, #10
 800a466:	b29b      	uxth	r3, r3
 800a468:	4313      	orrs	r3, r2
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a46e:	801a      	strh	r2, [r3, #0]
 800a470:	e03a      	b.n	800a4e8 <USB_EPStartXfer+0x802>
 800a472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a476:	095b      	lsrs	r3, r3, #5
 800a478:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a47c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a480:	f003 031f 	and.w	r3, r3, #31
 800a484:	2b00      	cmp	r3, #0
 800a486:	d104      	bne.n	800a492 <USB_EPStartXfer+0x7ac>
 800a488:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a48c:	3b01      	subs	r3, #1
 800a48e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	b29a      	uxth	r2, r3
 800a498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	029b      	lsls	r3, r3, #10
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4b2:	801a      	strh	r2, [r3, #0]
 800a4b4:	e018      	b.n	800a4e8 <USB_EPStartXfer+0x802>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d114      	bne.n	800a4e8 <USB_EPStartXfer+0x802>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4ca:	4413      	add	r3, r2
 800a4cc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	00da      	lsls	r2, r3, #3
 800a4d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a4de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	895b      	ldrh	r3, [r3, #10]
 800a4ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	6959      	ldr	r1, [r3, #20]
 800a4f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fad5 	bl	800aaae <USB_WritePMA>
 800a504:	e09e      	b.n	800a644 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	785b      	ldrb	r3, [r3, #1]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d16b      	bne.n	800a5e6 <USB_EPStartXfer+0x900>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a518:	b29b      	uxth	r3, r3
 800a51a:	461a      	mov	r2, r3
 800a51c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a51e:	4413      	add	r3, r2
 800a520:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	00da      	lsls	r2, r3, #3
 800a528:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a52a:	4413      	add	r3, r2
 800a52c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a530:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a532:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a534:	881b      	ldrh	r3, [r3, #0]
 800a536:	b29b      	uxth	r3, r3
 800a538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a540:	801a      	strh	r2, [r3, #0]
 800a542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10a      	bne.n	800a560 <USB_EPStartXfer+0x87a>
 800a54a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a558:	b29a      	uxth	r2, r3
 800a55a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a55c:	801a      	strh	r2, [r3, #0]
 800a55e:	e063      	b.n	800a628 <USB_EPStartXfer+0x942>
 800a560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a564:	2b3e      	cmp	r3, #62	@ 0x3e
 800a566:	d81c      	bhi.n	800a5a2 <USB_EPStartXfer+0x8bc>
 800a568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a56c:	085b      	lsrs	r3, r3, #1
 800a56e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d004      	beq.n	800a588 <USB_EPStartXfer+0x8a2>
 800a57e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a582:	3301      	adds	r3, #1
 800a584:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a592:	b29b      	uxth	r3, r3
 800a594:	029b      	lsls	r3, r3, #10
 800a596:	b29b      	uxth	r3, r3
 800a598:	4313      	orrs	r3, r2
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a59e:	801a      	strh	r2, [r3, #0]
 800a5a0:	e042      	b.n	800a628 <USB_EPStartXfer+0x942>
 800a5a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5a6:	095b      	lsrs	r3, r3, #5
 800a5a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a5ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5b0:	f003 031f 	and.w	r3, r3, #31
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d104      	bne.n	800a5c2 <USB_EPStartXfer+0x8dc>
 800a5b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a5c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	029b      	lsls	r3, r3, #10
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5e2:	801a      	strh	r2, [r3, #0]
 800a5e4:	e020      	b.n	800a628 <USB_EPStartXfer+0x942>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	785b      	ldrb	r3, [r3, #1]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d11c      	bne.n	800a628 <USB_EPStartXfer+0x942>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a602:	4413      	add	r3, r2
 800a604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	00da      	lsls	r2, r3, #3
 800a60e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a612:	4413      	add	r3, r2
 800a614:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a61c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a620:	b29a      	uxth	r2, r3
 800a622:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a626:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	891b      	ldrh	r3, [r3, #8]
 800a62c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	6959      	ldr	r1, [r3, #20]
 800a634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a638:	b29b      	uxth	r3, r3
 800a63a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fa35 	bl	800aaae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	4413      	add	r3, r2
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	b29b      	uxth	r3, r3
 800a652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a65a:	817b      	strh	r3, [r7, #10]
 800a65c:	897b      	ldrh	r3, [r7, #10]
 800a65e:	f083 0310 	eor.w	r3, r3, #16
 800a662:	817b      	strh	r3, [r7, #10]
 800a664:	897b      	ldrh	r3, [r7, #10]
 800a666:	f083 0320 	eor.w	r3, r3, #32
 800a66a:	817b      	strh	r3, [r7, #10]
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	441a      	add	r2, r3
 800a676:	897b      	ldrh	r3, [r7, #10]
 800a678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a67c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a688:	b29b      	uxth	r3, r3
 800a68a:	8013      	strh	r3, [r2, #0]
 800a68c:	e0d5      	b.n	800a83a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	7b1b      	ldrb	r3, [r3, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d156      	bne.n	800a744 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d122      	bne.n	800a6e4 <USB_EPStartXfer+0x9fe>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	78db      	ldrb	r3, [r3, #3]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d11e      	bne.n	800a6e4 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6bc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	441a      	add	r2, r3
 800a6ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a6ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6d6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a6da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	8013      	strh	r3, [r2, #0]
 800a6e2:	e01d      	b.n	800a720 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a6f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6fa:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	441a      	add	r2, r3
 800a708:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a70c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a710:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	699a      	ldr	r2, [r3, #24]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d907      	bls.n	800a73c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	699a      	ldr	r2, [r3, #24]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	1ad2      	subs	r2, r2, r3
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	619a      	str	r2, [r3, #24]
 800a73a:	e054      	b.n	800a7e6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2200      	movs	r2, #0
 800a740:	619a      	str	r2, [r3, #24]
 800a742:	e050      	b.n	800a7e6 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	78db      	ldrb	r3, [r3, #3]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d142      	bne.n	800a7d2 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	69db      	ldr	r3, [r3, #28]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d048      	beq.n	800a7e6 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a764:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d005      	beq.n	800a77c <USB_EPStartXfer+0xa96>
 800a770:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10b      	bne.n	800a794 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a77c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a784:	2b00      	cmp	r3, #0
 800a786:	d12e      	bne.n	800a7e6 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a788:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a78c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a790:	2b00      	cmp	r3, #0
 800a792:	d128      	bne.n	800a7e6 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	881b      	ldrh	r3, [r3, #0]
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7aa:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	441a      	add	r2, r3
 800a7b8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a7bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	8013      	strh	r3, [r2, #0]
 800a7d0:	e009      	b.n	800a7e6 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	78db      	ldrb	r3, [r3, #3]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d103      	bne.n	800a7e2 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	619a      	str	r2, [r3, #24]
 800a7e0:	e001      	b.n	800a7e6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e02a      	b.n	800a83c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a7f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a800:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a804:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a808:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a80c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a810:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a814:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	441a      	add	r2, r3
 800a822:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a826:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a82a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a82e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a836:	b29b      	uxth	r3, r3
 800a838:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	37b0      	adds	r7, #176	@ 0xb0
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	785b      	ldrb	r3, [r3, #1]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d020      	beq.n	800a898 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	b29b      	uxth	r3, r3
 800a864:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a86c:	81bb      	strh	r3, [r7, #12]
 800a86e:	89bb      	ldrh	r3, [r7, #12]
 800a870:	f083 0310 	eor.w	r3, r3, #16
 800a874:	81bb      	strh	r3, [r7, #12]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	441a      	add	r2, r3
 800a880:	89bb      	ldrh	r3, [r7, #12]
 800a882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a88a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a88e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a892:	b29b      	uxth	r3, r3
 800a894:	8013      	strh	r3, [r2, #0]
 800a896:	e01f      	b.n	800a8d8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8ae:	81fb      	strh	r3, [r7, #14]
 800a8b0:	89fb      	ldrh	r3, [r7, #14]
 800a8b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a8b6:	81fb      	strh	r3, [r7, #14]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	441a      	add	r2, r3
 800a8c2:	89fb      	ldrh	r3, [r7, #14]
 800a8c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b087      	sub	sp, #28
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	785b      	ldrb	r3, [r3, #1]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d04c      	beq.n	800a992 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	881b      	ldrh	r3, [r3, #0]
 800a904:	823b      	strh	r3, [r7, #16]
 800a906:	8a3b      	ldrh	r3, [r7, #16]
 800a908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01b      	beq.n	800a948 <USB_EPClearStall+0x62>
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a926:	81fb      	strh	r3, [r7, #14]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	441a      	add	r2, r3
 800a932:	89fb      	ldrh	r3, [r7, #14]
 800a934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a93c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a940:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a944:	b29b      	uxth	r3, r3
 800a946:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	78db      	ldrb	r3, [r3, #3]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d06c      	beq.n	800aa2a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a966:	81bb      	strh	r3, [r7, #12]
 800a968:	89bb      	ldrh	r3, [r7, #12]
 800a96a:	f083 0320 	eor.w	r3, r3, #32
 800a96e:	81bb      	strh	r3, [r7, #12]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	441a      	add	r2, r3
 800a97a:	89bb      	ldrh	r3, [r7, #12]
 800a97c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	8013      	strh	r3, [r2, #0]
 800a990:	e04b      	b.n	800aa2a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	82fb      	strh	r3, [r7, #22]
 800a9a0:	8afb      	ldrh	r3, [r7, #22]
 800a9a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d01b      	beq.n	800a9e2 <USB_EPClearStall+0xfc>
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9c0:	82bb      	strh	r3, [r7, #20]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	441a      	add	r2, r3
 800a9cc:	8abb      	ldrh	r3, [r7, #20]
 800a9ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a9da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9f8:	827b      	strh	r3, [r7, #18]
 800a9fa:	8a7b      	ldrh	r3, [r7, #18]
 800a9fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa00:	827b      	strh	r3, [r7, #18]
 800aa02:	8a7b      	ldrh	r3, [r7, #18]
 800aa04:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa08:	827b      	strh	r3, [r7, #18]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	441a      	add	r2, r3
 800aa14:	8a7b      	ldrh	r3, [r7, #18]
 800aa16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	371c      	adds	r7, #28
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d103      	bne.n	800aa52 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2280      	movs	r2, #128	@ 0x80
 800aa4e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b085      	sub	sp, #20
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aaae:	b480      	push	{r7}
 800aab0:	b08b      	sub	sp, #44	@ 0x2c
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	4611      	mov	r1, r2
 800aaba:	461a      	mov	r2, r3
 800aabc:	460b      	mov	r3, r1
 800aabe:	80fb      	strh	r3, [r7, #6]
 800aac0:	4613      	mov	r3, r2
 800aac2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aac4:	88bb      	ldrh	r3, [r7, #4]
 800aac6:	3301      	adds	r3, #1
 800aac8:	085b      	lsrs	r3, r3, #1
 800aaca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aad4:	88fa      	ldrh	r2, [r7, #6]
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aade:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aae4:	e01b      	b.n	800ab1e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	021b      	lsls	r3, r3, #8
 800aaf4:	b21a      	sxth	r2, r3
 800aaf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	b21b      	sxth	r3, r3
 800aafe:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ab00:	6a3b      	ldr	r3, [r7, #32]
 800ab02:	8a7a      	ldrh	r2, [r7, #18]
 800ab04:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ab06:	6a3b      	ldr	r3, [r7, #32]
 800ab08:	3302      	adds	r3, #2
 800ab0a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	3301      	adds	r3, #1
 800ab16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ab18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e0      	bne.n	800aae6 <USB_WritePMA+0x38>
  }
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop
 800ab28:	372c      	adds	r7, #44	@ 0x2c
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b08b      	sub	sp, #44	@ 0x2c
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	60f8      	str	r0, [r7, #12]
 800ab3a:	60b9      	str	r1, [r7, #8]
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	461a      	mov	r2, r3
 800ab40:	460b      	mov	r3, r1
 800ab42:	80fb      	strh	r3, [r7, #6]
 800ab44:	4613      	mov	r3, r2
 800ab46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ab48:	88bb      	ldrh	r3, [r7, #4]
 800ab4a:	085b      	lsrs	r3, r3, #1
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab58:	88fa      	ldrh	r2, [r7, #6]
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab62:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab68:	e018      	b.n	800ab9c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	3302      	adds	r3, #2
 800ab76:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	3301      	adds	r3, #1
 800ab84:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	0a1b      	lsrs	r3, r3, #8
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	3301      	adds	r3, #1
 800ab94:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1e3      	bne.n	800ab6a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800aba2:	88bb      	ldrh	r3, [r7, #4]
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d007      	beq.n	800abbe <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800abae:	6a3b      	ldr	r3, [r7, #32]
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	b2da      	uxtb	r2, r3
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	701a      	strb	r2, [r3, #0]
  }
}
 800abbe:	bf00      	nop
 800abc0:	372c      	adds	r7, #44	@ 0x2c
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	460b      	mov	r3, r1
 800abd4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abd6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800abda:	f005 f8dd 	bl	800fd98 <USBD_static_malloc>
 800abde:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d105      	bne.n	800abf2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800abee:	2302      	movs	r3, #2
 800abf0:	e066      	b.n	800acc0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	7c1b      	ldrb	r3, [r3, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d119      	bne.n	800ac36 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac06:	2202      	movs	r2, #2
 800ac08:	2181      	movs	r1, #129	@ 0x81
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f004 ff6b 	bl	800fae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f004 ff61 	bl	800fae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2210      	movs	r2, #16
 800ac30:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ac34:	e016      	b.n	800ac64 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac36:	2340      	movs	r3, #64	@ 0x40
 800ac38:	2202      	movs	r2, #2
 800ac3a:	2181      	movs	r1, #129	@ 0x81
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f004 ff52 	bl	800fae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac48:	2340      	movs	r3, #64	@ 0x40
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	2101      	movs	r1, #1
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f004 ff49 	bl	800fae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2210      	movs	r2, #16
 800ac60:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac64:	2308      	movs	r3, #8
 800ac66:	2203      	movs	r2, #3
 800ac68:	2182      	movs	r1, #130	@ 0x82
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f004 ff3b 	bl	800fae6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	7c1b      	ldrb	r3, [r3, #16]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d109      	bne.n	800acae <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aca0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aca4:	2101      	movs	r1, #1
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f005 f80c 	bl	800fcc4 <USBD_LL_PrepareReceive>
 800acac:	e007      	b.n	800acbe <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acb4:	2340      	movs	r3, #64	@ 0x40
 800acb6:	2101      	movs	r1, #1
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f005 f803 	bl	800fcc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800acd4:	2181      	movs	r1, #129	@ 0x81
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f004 ff2b 	bl	800fb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ace2:	2101      	movs	r1, #1
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f004 ff24 	bl	800fb32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800acf2:	2182      	movs	r1, #130	@ 0x82
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f004 ff1c 	bl	800fb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00e      	beq.n	800ad32 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad24:	4618      	mov	r0, r3
 800ad26:	f005 f845 	bl	800fdb4 <USBD_static_free>
    pdev->pClassData = NULL;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b086      	sub	sp, #24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e0af      	b.n	800aec4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d03f      	beq.n	800adf0 <USBD_CDC_Setup+0xb4>
 800ad70:	2b20      	cmp	r3, #32
 800ad72:	f040 809f 	bne.w	800aeb4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	88db      	ldrh	r3, [r3, #6]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d02e      	beq.n	800addc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	b25b      	sxtb	r3, r3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	da16      	bge.n	800adb6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	683a      	ldr	r2, [r7, #0]
 800ad92:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ad94:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	88d2      	ldrh	r2, [r2, #6]
 800ad9a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	88db      	ldrh	r3, [r3, #6]
 800ada0:	2b07      	cmp	r3, #7
 800ada2:	bf28      	it	cs
 800ada4:	2307      	movcs	r3, #7
 800ada6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	89fa      	ldrh	r2, [r7, #14]
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f001 facd 	bl	800c34e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800adb4:	e085      	b.n	800aec2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	785a      	ldrb	r2, [r3, #1]
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	88db      	ldrh	r3, [r3, #6]
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800adcc:	6939      	ldr	r1, [r7, #16]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	88db      	ldrh	r3, [r3, #6]
 800add2:	461a      	mov	r2, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 fae6 	bl	800c3a6 <USBD_CtlPrepareRx>
      break;
 800adda:	e072      	b.n	800aec2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	683a      	ldr	r2, [r7, #0]
 800ade6:	7850      	ldrb	r0, [r2, #1]
 800ade8:	2200      	movs	r2, #0
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	4798      	blx	r3
      break;
 800adee:	e068      	b.n	800aec2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	785b      	ldrb	r3, [r3, #1]
 800adf4:	2b0b      	cmp	r3, #11
 800adf6:	d852      	bhi.n	800ae9e <USBD_CDC_Setup+0x162>
 800adf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ae00 <USBD_CDC_Setup+0xc4>)
 800adfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfe:	bf00      	nop
 800ae00:	0800ae31 	.word	0x0800ae31
 800ae04:	0800aead 	.word	0x0800aead
 800ae08:	0800ae9f 	.word	0x0800ae9f
 800ae0c:	0800ae9f 	.word	0x0800ae9f
 800ae10:	0800ae9f 	.word	0x0800ae9f
 800ae14:	0800ae9f 	.word	0x0800ae9f
 800ae18:	0800ae9f 	.word	0x0800ae9f
 800ae1c:	0800ae9f 	.word	0x0800ae9f
 800ae20:	0800ae9f 	.word	0x0800ae9f
 800ae24:	0800ae9f 	.word	0x0800ae9f
 800ae28:	0800ae5b 	.word	0x0800ae5b
 800ae2c:	0800ae85 	.word	0x0800ae85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d107      	bne.n	800ae4c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae3c:	f107 030a 	add.w	r3, r7, #10
 800ae40:	2202      	movs	r2, #2
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f001 fa82 	bl	800c34e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae4a:	e032      	b.n	800aeb2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f001 fa0c 	bl	800c26c <USBD_CtlError>
            ret = USBD_FAIL;
 800ae54:	2303      	movs	r3, #3
 800ae56:	75fb      	strb	r3, [r7, #23]
          break;
 800ae58:	e02b      	b.n	800aeb2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d107      	bne.n	800ae76 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae66:	f107 030d 	add.w	r3, r7, #13
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f001 fa6d 	bl	800c34e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae74:	e01d      	b.n	800aeb2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f001 f9f7 	bl	800c26c <USBD_CtlError>
            ret = USBD_FAIL;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	75fb      	strb	r3, [r7, #23]
          break;
 800ae82:	e016      	b.n	800aeb2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b03      	cmp	r3, #3
 800ae8e:	d00f      	beq.n	800aeb0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f001 f9ea 	bl	800c26c <USBD_CtlError>
            ret = USBD_FAIL;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae9c:	e008      	b.n	800aeb0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f001 f9e3 	bl	800c26c <USBD_CtlError>
          ret = USBD_FAIL;
 800aea6:	2303      	movs	r3, #3
 800aea8:	75fb      	strb	r3, [r7, #23]
          break;
 800aeaa:	e002      	b.n	800aeb2 <USBD_CDC_Setup+0x176>
          break;
 800aeac:	bf00      	nop
 800aeae:	e008      	b.n	800aec2 <USBD_CDC_Setup+0x186>
          break;
 800aeb0:	bf00      	nop
      }
      break;
 800aeb2:	e006      	b.n	800aec2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f001 f9d8 	bl	800c26c <USBD_CtlError>
      ret = USBD_FAIL;
 800aebc:	2303      	movs	r3, #3
 800aebe:	75fb      	strb	r3, [r7, #23]
      break;
 800aec0:	bf00      	nop
  }

  return (uint8_t)ret;
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800aede:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e04f      	b.n	800af8e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aef4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aef6:	78fa      	ldrb	r2, [r7, #3]
 800aef8:	6879      	ldr	r1, [r7, #4]
 800aefa:	4613      	mov	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4413      	add	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	440b      	add	r3, r1
 800af04:	3318      	adds	r3, #24
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d029      	beq.n	800af60 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800af0c:	78fa      	ldrb	r2, [r7, #3]
 800af0e:	6879      	ldr	r1, [r7, #4]
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	440b      	add	r3, r1
 800af1a:	3318      	adds	r3, #24
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	78f9      	ldrb	r1, [r7, #3]
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	460b      	mov	r3, r1
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	440b      	add	r3, r1
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	4403      	add	r3, r0
 800af2c:	3320      	adds	r3, #32
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	fbb2 f1f3 	udiv	r1, r2, r3
 800af34:	fb01 f303 	mul.w	r3, r1, r3
 800af38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d110      	bne.n	800af60 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800af3e:	78fa      	ldrb	r2, [r7, #3]
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	4613      	mov	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	440b      	add	r3, r1
 800af4c:	3318      	adds	r3, #24
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af52:	78f9      	ldrb	r1, [r7, #3]
 800af54:	2300      	movs	r3, #0
 800af56:	2200      	movs	r2, #0
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f004 fe92 	bl	800fc82 <USBD_LL_Transmit>
 800af5e:	e015      	b.n	800af8c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2200      	movs	r2, #0
 800af64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00b      	beq.n	800af8c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800af88:	78fa      	ldrb	r2, [r7, #3]
 800af8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	460b      	mov	r3, r1
 800afa0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afa8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e015      	b.n	800afe4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800afb8:	78fb      	ldrb	r3, [r7, #3]
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f004 fea2 	bl	800fd06 <USBD_LL_GetRxDataSize>
 800afc2:	4602      	mov	r2, r0
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800afde:	4611      	mov	r1, r2
 800afe0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800affa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b002:	2303      	movs	r3, #3
 800b004:	e01a      	b.n	800b03c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d014      	beq.n	800b03a <USBD_CDC_EP0_RxReady+0x4e>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b016:	2bff      	cmp	r3, #255	@ 0xff
 800b018:	d00f      	beq.n	800b03a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b028:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b030:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	22ff      	movs	r2, #255	@ 0xff
 800b036:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2243      	movs	r2, #67	@ 0x43
 800b050:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b052:	4b03      	ldr	r3, [pc, #12]	@ (800b060 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b054:	4618      	mov	r0, r3
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	20000094 	.word	0x20000094

0800b064 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2243      	movs	r2, #67	@ 0x43
 800b070:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b072:	4b03      	ldr	r3, [pc, #12]	@ (800b080 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b074:	4618      	mov	r0, r3
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr
 800b080:	20000050 	.word	0x20000050

0800b084 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2243      	movs	r2, #67	@ 0x43
 800b090:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b092:	4b03      	ldr	r3, [pc, #12]	@ (800b0a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b094:	4618      	mov	r0, r3
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	200000d8 	.word	0x200000d8

0800b0a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	220a      	movs	r2, #10
 800b0b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b0b2:	4b03      	ldr	r3, [pc, #12]	@ (800b0c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	2000000c 	.word	0x2000000c

0800b0c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e004      	b.n	800b0e2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b087      	sub	sp, #28
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	60b9      	str	r1, [r7, #8]
 800b0f8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b100:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b108:	2303      	movs	r3, #3
 800b10a:	e008      	b.n	800b11e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	371c      	adds	r7, #28
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b085      	sub	sp, #20
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b13a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b142:	2303      	movs	r3, #3
 800b144:	e004      	b.n	800b150 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b16a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b16c:	2301      	movs	r3, #1
 800b16e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e01a      	b.n	800b1b4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b184:	2b00      	cmp	r3, #0
 800b186:	d114      	bne.n	800b1b2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b1a6:	2181      	movs	r1, #129	@ 0x81
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f004 fd6a 	bl	800fc82 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d101      	bne.n	800b1da <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	e016      	b.n	800b208 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	7c1b      	ldrb	r3, [r3, #16]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d109      	bne.n	800b1f6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1ec:	2101      	movs	r1, #1
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f004 fd68 	bl	800fcc4 <USBD_LL_PrepareReceive>
 800b1f4:	e007      	b.n	800b206 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1fc:	2340      	movs	r3, #64	@ 0x40
 800b1fe:	2101      	movs	r1, #1
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f004 fd5f 	bl	800fcc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	4613      	mov	r3, r2
 800b21c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b224:	2303      	movs	r3, #3
 800b226:	e01f      	b.n	800b268 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	79fa      	ldrb	r2, [r7, #7]
 800b25a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f004 fbc7 	bl	800f9f0 <USBD_LL_Init>
 800b262:	4603      	mov	r3, r0
 800b264:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b266:	7dfb      	ldrb	r3, [r7, #23]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b27a:	2300      	movs	r3, #0
 800b27c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d101      	bne.n	800b288 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b284:	2303      	movs	r3, #3
 800b286:	e016      	b.n	800b2b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00b      	beq.n	800b2b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a4:	f107 020e 	add.w	r2, r7, #14
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	4798      	blx	r3
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f004 fbf2 	bl	800fab0 <USBD_LL_Start>
 800b2cc:	4603      	mov	r3, r0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b302:	2b00      	cmp	r3, #0
 800b304:	d009      	beq.n	800b31a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	78fa      	ldrb	r2, [r7, #3]
 800b310:	4611      	mov	r1, r2
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	4798      	blx	r3
 800b316:	4603      	mov	r3, r0
 800b318:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b336:	2b00      	cmp	r3, #0
 800b338:	d007      	beq.n	800b34a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	78fa      	ldrb	r2, [r7, #3]
 800b344:	4611      	mov	r1, r2
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	4798      	blx	r3
  }

  return USBD_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	4618      	mov	r0, r3
 800b368:	f000 ff46 	bl	800c1f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b37a:	461a      	mov	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b388:	f003 031f 	and.w	r3, r3, #31
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d01a      	beq.n	800b3c6 <USBD_LL_SetupStage+0x72>
 800b390:	2b02      	cmp	r3, #2
 800b392:	d822      	bhi.n	800b3da <USBD_LL_SetupStage+0x86>
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <USBD_LL_SetupStage+0x4a>
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d00a      	beq.n	800b3b2 <USBD_LL_SetupStage+0x5e>
 800b39c:	e01d      	b.n	800b3da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f9ee 	bl	800b788 <USBD_StdDevReq>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b3b0:	e020      	b.n	800b3f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fa52 	bl	800b864 <USBD_StdItfReq>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3c4:	e016      	b.n	800b3f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fa91 	bl	800b8f6 <USBD_StdEPReq>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b3d8:	e00c      	b.n	800b3f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b3e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f004 fbc1 	bl	800fb70 <USBD_LL_StallEP>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3f2:	bf00      	nop
  }

  return ret;
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b086      	sub	sp, #24
 800b402:	af00      	add	r7, sp, #0
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	460b      	mov	r3, r1
 800b408:	607a      	str	r2, [r7, #4]
 800b40a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b40c:	7afb      	ldrb	r3, [r7, #11]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d138      	bne.n	800b484 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b418:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b420:	2b03      	cmp	r3, #3
 800b422:	d14a      	bne.n	800b4ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	689a      	ldr	r2, [r3, #8]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d913      	bls.n	800b458 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	1ad2      	subs	r2, r2, r3
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	68da      	ldr	r2, [r3, #12]
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	4293      	cmp	r3, r2
 800b448:	bf28      	it	cs
 800b44a:	4613      	movcs	r3, r2
 800b44c:	461a      	mov	r2, r3
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f000 ffc5 	bl	800c3e0 <USBD_CtlContinueRx>
 800b456:	e030      	b.n	800b4ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b03      	cmp	r3, #3
 800b462:	d10b      	bne.n	800b47c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d005      	beq.n	800b47c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f000 ffc0 	bl	800c402 <USBD_CtlSendStatus>
 800b482:	e01a      	b.n	800b4ba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b03      	cmp	r3, #3
 800b48e:	d114      	bne.n	800b4ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00e      	beq.n	800b4ba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	7afa      	ldrb	r2, [r7, #11]
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	4798      	blx	r3
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b4b0:	7dfb      	ldrb	r3, [r7, #23]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d001      	beq.n	800b4ba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
 800b4b8:	e000      	b.n	800b4bc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b4d2:	7afb      	ldrb	r3, [r7, #11]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d16b      	bne.n	800b5b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3314      	adds	r3, #20
 800b4dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d156      	bne.n	800b596 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d914      	bls.n	800b51e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	689a      	ldr	r2, [r3, #8]
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	1ad2      	subs	r2, r2, r3
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	461a      	mov	r2, r3
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 ff3a 	bl	800c384 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b510:	2300      	movs	r3, #0
 800b512:	2200      	movs	r2, #0
 800b514:	2100      	movs	r1, #0
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f004 fbd4 	bl	800fcc4 <USBD_LL_PrepareReceive>
 800b51c:	e03b      	b.n	800b596 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	68da      	ldr	r2, [r3, #12]
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	429a      	cmp	r2, r3
 800b528:	d11c      	bne.n	800b564 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b532:	429a      	cmp	r2, r3
 800b534:	d316      	bcc.n	800b564 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	685a      	ldr	r2, [r3, #4]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b540:	429a      	cmp	r2, r3
 800b542:	d20f      	bcs.n	800b564 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b544:	2200      	movs	r2, #0
 800b546:	2100      	movs	r1, #0
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 ff1b 	bl	800c384 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b556:	2300      	movs	r3, #0
 800b558:	2200      	movs	r2, #0
 800b55a:	2100      	movs	r1, #0
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f004 fbb1 	bl	800fcc4 <USBD_LL_PrepareReceive>
 800b562:	e018      	b.n	800b596 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d10b      	bne.n	800b588 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d005      	beq.n	800b588 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b588:	2180      	movs	r1, #128	@ 0x80
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f004 faf0 	bl	800fb70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 ff49 	bl	800c428 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d122      	bne.n	800b5e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f7ff fe98 	bl	800b2d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b5ae:	e01a      	b.n	800b5e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d114      	bne.n	800b5e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00e      	beq.n	800b5e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ce:	695b      	ldr	r3, [r3, #20]
 800b5d0:	7afa      	ldrb	r2, [r7, #11]
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	4798      	blx	r3
 800b5d8:	4603      	mov	r3, r0
 800b5da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
 800b5e4:	e000      	b.n	800b5e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b620:	2303      	movs	r3, #3
 800b622:	e02f      	b.n	800b684 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00f      	beq.n	800b64e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d009      	beq.n	800b64e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	6852      	ldr	r2, [r2, #4]
 800b646:	b2d2      	uxtb	r2, r2
 800b648:	4611      	mov	r1, r2
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b64e:	2340      	movs	r3, #64	@ 0x40
 800b650:	2200      	movs	r2, #0
 800b652:	2100      	movs	r1, #0
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f004 fa46 	bl	800fae6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2240      	movs	r2, #64	@ 0x40
 800b666:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b66a:	2340      	movs	r3, #64	@ 0x40
 800b66c:	2200      	movs	r2, #0
 800b66e:	2180      	movs	r1, #128	@ 0x80
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f004 fa38 	bl	800fae6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2240      	movs	r2, #64	@ 0x40
 800b680:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	460b      	mov	r3, r1
 800b696:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	78fa      	ldrb	r2, [r7, #3]
 800b69c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2204      	movs	r2, #4
 800b6c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b04      	cmp	r3, #4
 800b6ea:	d106      	bne.n	800b6fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b71a:	2303      	movs	r3, #3
 800b71c:	e012      	b.n	800b744 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b03      	cmp	r3, #3
 800b728:	d10b      	bne.n	800b742 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b73c:	69db      	ldr	r3, [r3, #28]
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3708      	adds	r7, #8
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	3301      	adds	r3, #1
 800b762:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b76a:	8a3b      	ldrh	r3, [r7, #16]
 800b76c:	021b      	lsls	r3, r3, #8
 800b76e:	b21a      	sxth	r2, r3
 800b770:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b774:	4313      	orrs	r3, r2
 800b776:	b21b      	sxth	r3, r3
 800b778:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b77a:	89fb      	ldrh	r3, [r7, #14]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	371c      	adds	r7, #28
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b79e:	2b40      	cmp	r3, #64	@ 0x40
 800b7a0:	d005      	beq.n	800b7ae <USBD_StdDevReq+0x26>
 800b7a2:	2b40      	cmp	r3, #64	@ 0x40
 800b7a4:	d853      	bhi.n	800b84e <USBD_StdDevReq+0xc6>
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00b      	beq.n	800b7c2 <USBD_StdDevReq+0x3a>
 800b7aa:	2b20      	cmp	r3, #32
 800b7ac:	d14f      	bne.n	800b84e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	6839      	ldr	r1, [r7, #0]
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	4798      	blx	r3
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c0:	e04a      	b.n	800b858 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	785b      	ldrb	r3, [r3, #1]
 800b7c6:	2b09      	cmp	r3, #9
 800b7c8:	d83b      	bhi.n	800b842 <USBD_StdDevReq+0xba>
 800b7ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b7d0 <USBD_StdDevReq+0x48>)
 800b7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d0:	0800b825 	.word	0x0800b825
 800b7d4:	0800b839 	.word	0x0800b839
 800b7d8:	0800b843 	.word	0x0800b843
 800b7dc:	0800b82f 	.word	0x0800b82f
 800b7e0:	0800b843 	.word	0x0800b843
 800b7e4:	0800b803 	.word	0x0800b803
 800b7e8:	0800b7f9 	.word	0x0800b7f9
 800b7ec:	0800b843 	.word	0x0800b843
 800b7f0:	0800b81b 	.word	0x0800b81b
 800b7f4:	0800b80d 	.word	0x0800b80d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f9de 	bl	800bbbc <USBD_GetDescriptor>
          break;
 800b800:	e024      	b.n	800b84c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fb6d 	bl	800bee4 <USBD_SetAddress>
          break;
 800b80a:	e01f      	b.n	800b84c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fbac 	bl	800bf6c <USBD_SetConfig>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]
          break;
 800b818:	e018      	b.n	800b84c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 fc4b 	bl	800c0b8 <USBD_GetConfig>
          break;
 800b822:	e013      	b.n	800b84c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fc7c 	bl	800c124 <USBD_GetStatus>
          break;
 800b82c:	e00e      	b.n	800b84c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fcab 	bl	800c18c <USBD_SetFeature>
          break;
 800b836:	e009      	b.n	800b84c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fcba 	bl	800c1b4 <USBD_ClrFeature>
          break;
 800b840:	e004      	b.n	800b84c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fd11 	bl	800c26c <USBD_CtlError>
          break;
 800b84a:	bf00      	nop
      }
      break;
 800b84c:	e004      	b.n	800b858 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b84e:	6839      	ldr	r1, [r7, #0]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fd0b 	bl	800c26c <USBD_CtlError>
      break;
 800b856:	bf00      	nop
  }

  return ret;
 800b858:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop

0800b864 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b87a:	2b40      	cmp	r3, #64	@ 0x40
 800b87c:	d005      	beq.n	800b88a <USBD_StdItfReq+0x26>
 800b87e:	2b40      	cmp	r3, #64	@ 0x40
 800b880:	d82f      	bhi.n	800b8e2 <USBD_StdItfReq+0x7e>
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <USBD_StdItfReq+0x26>
 800b886:	2b20      	cmp	r3, #32
 800b888:	d12b      	bne.n	800b8e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b890:	b2db      	uxtb	r3, r3
 800b892:	3b01      	subs	r3, #1
 800b894:	2b02      	cmp	r3, #2
 800b896:	d81d      	bhi.n	800b8d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	889b      	ldrh	r3, [r3, #4]
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d813      	bhi.n	800b8ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	4798      	blx	r3
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	88db      	ldrh	r3, [r3, #6]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d110      	bne.n	800b8de <USBD_StdItfReq+0x7a>
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10d      	bne.n	800b8de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fd9d 	bl	800c402 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8c8:	e009      	b.n	800b8de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fccd 	bl	800c26c <USBD_CtlError>
          break;
 800b8d2:	e004      	b.n	800b8de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fcc8 	bl	800c26c <USBD_CtlError>
          break;
 800b8dc:	e000      	b.n	800b8e0 <USBD_StdItfReq+0x7c>
          break;
 800b8de:	bf00      	nop
      }
      break;
 800b8e0:	e004      	b.n	800b8ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fcc1 	bl	800c26c <USBD_CtlError>
      break;
 800b8ea:	bf00      	nop
  }

  return ret;
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	889b      	ldrh	r3, [r3, #4]
 800b908:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b912:	2b40      	cmp	r3, #64	@ 0x40
 800b914:	d007      	beq.n	800b926 <USBD_StdEPReq+0x30>
 800b916:	2b40      	cmp	r3, #64	@ 0x40
 800b918:	f200 8145 	bhi.w	800bba6 <USBD_StdEPReq+0x2b0>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00c      	beq.n	800b93a <USBD_StdEPReq+0x44>
 800b920:	2b20      	cmp	r3, #32
 800b922:	f040 8140 	bne.w	800bba6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	4798      	blx	r3
 800b934:	4603      	mov	r3, r0
 800b936:	73fb      	strb	r3, [r7, #15]
      break;
 800b938:	e13a      	b.n	800bbb0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	785b      	ldrb	r3, [r3, #1]
 800b93e:	2b03      	cmp	r3, #3
 800b940:	d007      	beq.n	800b952 <USBD_StdEPReq+0x5c>
 800b942:	2b03      	cmp	r3, #3
 800b944:	f300 8129 	bgt.w	800bb9a <USBD_StdEPReq+0x2a4>
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d07f      	beq.n	800ba4c <USBD_StdEPReq+0x156>
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d03c      	beq.n	800b9ca <USBD_StdEPReq+0xd4>
 800b950:	e123      	b.n	800bb9a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d002      	beq.n	800b964 <USBD_StdEPReq+0x6e>
 800b95e:	2b03      	cmp	r3, #3
 800b960:	d016      	beq.n	800b990 <USBD_StdEPReq+0x9a>
 800b962:	e02c      	b.n	800b9be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b964:	7bbb      	ldrb	r3, [r7, #14]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00d      	beq.n	800b986 <USBD_StdEPReq+0x90>
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
 800b96c:	2b80      	cmp	r3, #128	@ 0x80
 800b96e:	d00a      	beq.n	800b986 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b970:	7bbb      	ldrb	r3, [r7, #14]
 800b972:	4619      	mov	r1, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f004 f8fb 	bl	800fb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b97a:	2180      	movs	r1, #128	@ 0x80
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f004 f8f7 	bl	800fb70 <USBD_LL_StallEP>
 800b982:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b984:	e020      	b.n	800b9c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b986:	6839      	ldr	r1, [r7, #0]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fc6f 	bl	800c26c <USBD_CtlError>
              break;
 800b98e:	e01b      	b.n	800b9c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	885b      	ldrh	r3, [r3, #2]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10e      	bne.n	800b9b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b998:	7bbb      	ldrb	r3, [r7, #14]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00b      	beq.n	800b9b6 <USBD_StdEPReq+0xc0>
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	2b80      	cmp	r3, #128	@ 0x80
 800b9a2:	d008      	beq.n	800b9b6 <USBD_StdEPReq+0xc0>
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	88db      	ldrh	r3, [r3, #6]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d104      	bne.n	800b9b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f004 f8dd 	bl	800fb70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fd23 	bl	800c402 <USBD_CtlSendStatus>

              break;
 800b9bc:	e004      	b.n	800b9c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b9be:	6839      	ldr	r1, [r7, #0]
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fc53 	bl	800c26c <USBD_CtlError>
              break;
 800b9c6:	bf00      	nop
          }
          break;
 800b9c8:	e0ec      	b.n	800bba4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d002      	beq.n	800b9dc <USBD_StdEPReq+0xe6>
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d016      	beq.n	800ba08 <USBD_StdEPReq+0x112>
 800b9da:	e030      	b.n	800ba3e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00d      	beq.n	800b9fe <USBD_StdEPReq+0x108>
 800b9e2:	7bbb      	ldrb	r3, [r7, #14]
 800b9e4:	2b80      	cmp	r3, #128	@ 0x80
 800b9e6:	d00a      	beq.n	800b9fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f004 f8bf 	bl	800fb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9f2:	2180      	movs	r1, #128	@ 0x80
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f004 f8bb 	bl	800fb70 <USBD_LL_StallEP>
 800b9fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9fc:	e025      	b.n	800ba4a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b9fe:	6839      	ldr	r1, [r7, #0]
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 fc33 	bl	800c26c <USBD_CtlError>
              break;
 800ba06:	e020      	b.n	800ba4a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	885b      	ldrh	r3, [r3, #2]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d11b      	bne.n	800ba48 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba10:	7bbb      	ldrb	r3, [r7, #14]
 800ba12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d004      	beq.n	800ba24 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba1a:	7bbb      	ldrb	r3, [r7, #14]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f004 f8c5 	bl	800fbae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 fcec 	bl	800c402 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	4798      	blx	r3
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ba3c:	e004      	b.n	800ba48 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fc13 	bl	800c26c <USBD_CtlError>
              break;
 800ba46:	e000      	b.n	800ba4a <USBD_StdEPReq+0x154>
              break;
 800ba48:	bf00      	nop
          }
          break;
 800ba4a:	e0ab      	b.n	800bba4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d002      	beq.n	800ba5e <USBD_StdEPReq+0x168>
 800ba58:	2b03      	cmp	r3, #3
 800ba5a:	d032      	beq.n	800bac2 <USBD_StdEPReq+0x1cc>
 800ba5c:	e097      	b.n	800bb8e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d007      	beq.n	800ba74 <USBD_StdEPReq+0x17e>
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	2b80      	cmp	r3, #128	@ 0x80
 800ba68:	d004      	beq.n	800ba74 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fbfd 	bl	800c26c <USBD_CtlError>
                break;
 800ba72:	e091      	b.n	800bb98 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	da0b      	bge.n	800ba94 <USBD_StdEPReq+0x19e>
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
 800ba7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba82:	4613      	mov	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	3310      	adds	r3, #16
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	4413      	add	r3, r2
 800ba90:	3304      	adds	r3, #4
 800ba92:	e00b      	b.n	800baac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
 800ba96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	4413      	add	r3, r2
 800baaa:	3304      	adds	r3, #4
 800baac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	2200      	movs	r2, #0
 800bab2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2202      	movs	r2, #2
 800bab8:	4619      	mov	r1, r3
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fc47 	bl	800c34e <USBD_CtlSendData>
              break;
 800bac0:	e06a      	b.n	800bb98 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	da11      	bge.n	800baee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800baca:	7bbb      	ldrb	r3, [r7, #14]
 800bacc:	f003 020f 	and.w	r2, r3, #15
 800bad0:	6879      	ldr	r1, [r7, #4]
 800bad2:	4613      	mov	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4413      	add	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	440b      	add	r3, r1
 800badc:	3324      	adds	r3, #36	@ 0x24
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d117      	bne.n	800bb14 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fbc0 	bl	800c26c <USBD_CtlError>
                  break;
 800baec:	e054      	b.n	800bb98 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800baee:	7bbb      	ldrb	r3, [r7, #14]
 800baf0:	f003 020f 	and.w	r2, r3, #15
 800baf4:	6879      	ldr	r1, [r7, #4]
 800baf6:	4613      	mov	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	440b      	add	r3, r1
 800bb00:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb04:	881b      	ldrh	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d104      	bne.n	800bb14 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fbad 	bl	800c26c <USBD_CtlError>
                  break;
 800bb12:	e041      	b.n	800bb98 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	da0b      	bge.n	800bb34 <USBD_StdEPReq+0x23e>
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
 800bb1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb22:	4613      	mov	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4413      	add	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	3310      	adds	r3, #16
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	4413      	add	r3, r2
 800bb30:	3304      	adds	r3, #4
 800bb32:	e00b      	b.n	800bb4c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb34:	7bbb      	ldrb	r3, [r7, #14]
 800bb36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	4413      	add	r3, r2
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <USBD_StdEPReq+0x264>
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
 800bb56:	2b80      	cmp	r3, #128	@ 0x80
 800bb58:	d103      	bne.n	800bb62 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	601a      	str	r2, [r3, #0]
 800bb60:	e00e      	b.n	800bb80 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f004 f840 	bl	800fbec <USBD_LL_IsStallEP>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2201      	movs	r2, #1
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	e002      	b.n	800bb80 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2202      	movs	r2, #2
 800bb84:	4619      	mov	r1, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fbe1 	bl	800c34e <USBD_CtlSendData>
              break;
 800bb8c:	e004      	b.n	800bb98 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fb6b 	bl	800c26c <USBD_CtlError>
              break;
 800bb96:	bf00      	nop
          }
          break;
 800bb98:	e004      	b.n	800bba4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fb65 	bl	800c26c <USBD_CtlError>
          break;
 800bba2:	bf00      	nop
      }
      break;
 800bba4:	e004      	b.n	800bbb0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fb5f 	bl	800c26c <USBD_CtlError>
      break;
 800bbae:	bf00      	nop
  }

  return ret;
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	885b      	ldrh	r3, [r3, #2]
 800bbd6:	0a1b      	lsrs	r3, r3, #8
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	2b0e      	cmp	r3, #14
 800bbde:	f200 8152 	bhi.w	800be86 <USBD_GetDescriptor+0x2ca>
 800bbe2:	a201      	add	r2, pc, #4	@ (adr r2, 800bbe8 <USBD_GetDescriptor+0x2c>)
 800bbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe8:	0800bc59 	.word	0x0800bc59
 800bbec:	0800bc71 	.word	0x0800bc71
 800bbf0:	0800bcb1 	.word	0x0800bcb1
 800bbf4:	0800be87 	.word	0x0800be87
 800bbf8:	0800be87 	.word	0x0800be87
 800bbfc:	0800be27 	.word	0x0800be27
 800bc00:	0800be53 	.word	0x0800be53
 800bc04:	0800be87 	.word	0x0800be87
 800bc08:	0800be87 	.word	0x0800be87
 800bc0c:	0800be87 	.word	0x0800be87
 800bc10:	0800be87 	.word	0x0800be87
 800bc14:	0800be87 	.word	0x0800be87
 800bc18:	0800be87 	.word	0x0800be87
 800bc1c:	0800be87 	.word	0x0800be87
 800bc20:	0800bc25 	.word	0x0800bc25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc2a:	69db      	ldr	r3, [r3, #28]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00b      	beq.n	800bc48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc36:	69db      	ldr	r3, [r3, #28]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	7c12      	ldrb	r2, [r2, #16]
 800bc3c:	f107 0108 	add.w	r1, r7, #8
 800bc40:	4610      	mov	r0, r2
 800bc42:	4798      	blx	r3
 800bc44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc46:	e126      	b.n	800be96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fb0e 	bl	800c26c <USBD_CtlError>
        err++;
 800bc50:	7afb      	ldrb	r3, [r7, #11]
 800bc52:	3301      	adds	r3, #1
 800bc54:	72fb      	strb	r3, [r7, #11]
      break;
 800bc56:	e11e      	b.n	800be96 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	7c12      	ldrb	r2, [r2, #16]
 800bc64:	f107 0108 	add.w	r1, r7, #8
 800bc68:	4610      	mov	r0, r2
 800bc6a:	4798      	blx	r3
 800bc6c:	60f8      	str	r0, [r7, #12]
      break;
 800bc6e:	e112      	b.n	800be96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	7c1b      	ldrb	r3, [r3, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10d      	bne.n	800bc94 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc80:	f107 0208 	add.w	r2, r7, #8
 800bc84:	4610      	mov	r0, r2
 800bc86:	4798      	blx	r3
 800bc88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	2202      	movs	r2, #2
 800bc90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc92:	e100      	b.n	800be96 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9c:	f107 0208 	add.w	r2, r7, #8
 800bca0:	4610      	mov	r0, r2
 800bca2:	4798      	blx	r3
 800bca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	2202      	movs	r2, #2
 800bcac:	701a      	strb	r2, [r3, #0]
      break;
 800bcae:	e0f2      	b.n	800be96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	885b      	ldrh	r3, [r3, #2]
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b05      	cmp	r3, #5
 800bcb8:	f200 80ac 	bhi.w	800be14 <USBD_GetDescriptor+0x258>
 800bcbc:	a201      	add	r2, pc, #4	@ (adr r2, 800bcc4 <USBD_GetDescriptor+0x108>)
 800bcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc2:	bf00      	nop
 800bcc4:	0800bcdd 	.word	0x0800bcdd
 800bcc8:	0800bd11 	.word	0x0800bd11
 800bccc:	0800bd45 	.word	0x0800bd45
 800bcd0:	0800bd79 	.word	0x0800bd79
 800bcd4:	0800bdad 	.word	0x0800bdad
 800bcd8:	0800bde1 	.word	0x0800bde1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00b      	beq.n	800bd00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	7c12      	ldrb	r2, [r2, #16]
 800bcf4:	f107 0108 	add.w	r1, r7, #8
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	4798      	blx	r3
 800bcfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcfe:	e091      	b.n	800be24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fab2 	bl	800c26c <USBD_CtlError>
            err++;
 800bd08:	7afb      	ldrb	r3, [r7, #11]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd0e:	e089      	b.n	800be24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00b      	beq.n	800bd34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	7c12      	ldrb	r2, [r2, #16]
 800bd28:	f107 0108 	add.w	r1, r7, #8
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	4798      	blx	r3
 800bd30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd32:	e077      	b.n	800be24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd34:	6839      	ldr	r1, [r7, #0]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 fa98 	bl	800c26c <USBD_CtlError>
            err++;
 800bd3c:	7afb      	ldrb	r3, [r7, #11]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	72fb      	strb	r3, [r7, #11]
          break;
 800bd42:	e06f      	b.n	800be24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00b      	beq.n	800bd68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	7c12      	ldrb	r2, [r2, #16]
 800bd5c:	f107 0108 	add.w	r1, r7, #8
 800bd60:	4610      	mov	r0, r2
 800bd62:	4798      	blx	r3
 800bd64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd66:	e05d      	b.n	800be24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd68:	6839      	ldr	r1, [r7, #0]
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fa7e 	bl	800c26c <USBD_CtlError>
            err++;
 800bd70:	7afb      	ldrb	r3, [r7, #11]
 800bd72:	3301      	adds	r3, #1
 800bd74:	72fb      	strb	r3, [r7, #11]
          break;
 800bd76:	e055      	b.n	800be24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00b      	beq.n	800bd9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	7c12      	ldrb	r2, [r2, #16]
 800bd90:	f107 0108 	add.w	r1, r7, #8
 800bd94:	4610      	mov	r0, r2
 800bd96:	4798      	blx	r3
 800bd98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd9a:	e043      	b.n	800be24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd9c:	6839      	ldr	r1, [r7, #0]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fa64 	bl	800c26c <USBD_CtlError>
            err++;
 800bda4:	7afb      	ldrb	r3, [r7, #11]
 800bda6:	3301      	adds	r3, #1
 800bda8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdaa:	e03b      	b.n	800be24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00b      	beq.n	800bdd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdbe:	695b      	ldr	r3, [r3, #20]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	7c12      	ldrb	r2, [r2, #16]
 800bdc4:	f107 0108 	add.w	r1, r7, #8
 800bdc8:	4610      	mov	r0, r2
 800bdca:	4798      	blx	r3
 800bdcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdce:	e029      	b.n	800be24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdd0:	6839      	ldr	r1, [r7, #0]
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fa4a 	bl	800c26c <USBD_CtlError>
            err++;
 800bdd8:	7afb      	ldrb	r3, [r7, #11]
 800bdda:	3301      	adds	r3, #1
 800bddc:	72fb      	strb	r3, [r7, #11]
          break;
 800bdde:	e021      	b.n	800be24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00b      	beq.n	800be04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	7c12      	ldrb	r2, [r2, #16]
 800bdf8:	f107 0108 	add.w	r1, r7, #8
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	4798      	blx	r3
 800be00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be02:	e00f      	b.n	800be24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fa30 	bl	800c26c <USBD_CtlError>
            err++;
 800be0c:	7afb      	ldrb	r3, [r7, #11]
 800be0e:	3301      	adds	r3, #1
 800be10:	72fb      	strb	r3, [r7, #11]
          break;
 800be12:	e007      	b.n	800be24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa28 	bl	800c26c <USBD_CtlError>
          err++;
 800be1c:	7afb      	ldrb	r3, [r7, #11]
 800be1e:	3301      	adds	r3, #1
 800be20:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800be22:	bf00      	nop
      }
      break;
 800be24:	e037      	b.n	800be96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	7c1b      	ldrb	r3, [r3, #16]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d109      	bne.n	800be42 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be36:	f107 0208 	add.w	r2, r7, #8
 800be3a:	4610      	mov	r0, r2
 800be3c:	4798      	blx	r3
 800be3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be40:	e029      	b.n	800be96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fa11 	bl	800c26c <USBD_CtlError>
        err++;
 800be4a:	7afb      	ldrb	r3, [r7, #11]
 800be4c:	3301      	adds	r3, #1
 800be4e:	72fb      	strb	r3, [r7, #11]
      break;
 800be50:	e021      	b.n	800be96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	7c1b      	ldrb	r3, [r3, #16]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10d      	bne.n	800be76 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be62:	f107 0208 	add.w	r2, r7, #8
 800be66:	4610      	mov	r0, r2
 800be68:	4798      	blx	r3
 800be6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3301      	adds	r3, #1
 800be70:	2207      	movs	r2, #7
 800be72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be74:	e00f      	b.n	800be96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 f9f7 	bl	800c26c <USBD_CtlError>
        err++;
 800be7e:	7afb      	ldrb	r3, [r7, #11]
 800be80:	3301      	adds	r3, #1
 800be82:	72fb      	strb	r3, [r7, #11]
      break;
 800be84:	e007      	b.n	800be96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 f9ef 	bl	800c26c <USBD_CtlError>
      err++;
 800be8e:	7afb      	ldrb	r3, [r7, #11]
 800be90:	3301      	adds	r3, #1
 800be92:	72fb      	strb	r3, [r7, #11]
      break;
 800be94:	bf00      	nop
  }

  if (err != 0U)
 800be96:	7afb      	ldrb	r3, [r7, #11]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d11e      	bne.n	800beda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	88db      	ldrh	r3, [r3, #6]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d016      	beq.n	800bed2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bea4:	893b      	ldrh	r3, [r7, #8]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00e      	beq.n	800bec8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	88da      	ldrh	r2, [r3, #6]
 800beae:	893b      	ldrh	r3, [r7, #8]
 800beb0:	4293      	cmp	r3, r2
 800beb2:	bf28      	it	cs
 800beb4:	4613      	movcs	r3, r2
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800beba:	893b      	ldrh	r3, [r7, #8]
 800bebc:	461a      	mov	r2, r3
 800bebe:	68f9      	ldr	r1, [r7, #12]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 fa44 	bl	800c34e <USBD_CtlSendData>
 800bec6:	e009      	b.n	800bedc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f9ce 	bl	800c26c <USBD_CtlError>
 800bed0:	e004      	b.n	800bedc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fa95 	bl	800c402 <USBD_CtlSendStatus>
 800bed8:	e000      	b.n	800bedc <USBD_GetDescriptor+0x320>
    return;
 800beda:	bf00      	nop
  }
}
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop

0800bee4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	889b      	ldrh	r3, [r3, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d131      	bne.n	800bf5a <USBD_SetAddress+0x76>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	88db      	ldrh	r3, [r3, #6]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d12d      	bne.n	800bf5a <USBD_SetAddress+0x76>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	885b      	ldrh	r3, [r3, #2]
 800bf02:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf04:	d829      	bhi.n	800bf5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	885b      	ldrh	r3, [r3, #2]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	d104      	bne.n	800bf28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f9a3 	bl	800c26c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf26:	e01d      	b.n	800bf64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	7bfa      	ldrb	r2, [r7, #15]
 800bf2c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f003 fe85 	bl	800fc44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa61 	bl	800c402 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d004      	beq.n	800bf50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2202      	movs	r2, #2
 800bf4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf4e:	e009      	b.n	800bf64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf58:	e004      	b.n	800bf64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 f985 	bl	800c26c <USBD_CtlError>
  }
}
 800bf62:	bf00      	nop
 800bf64:	bf00      	nop
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	885b      	ldrh	r3, [r3, #2]
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	4b4c      	ldr	r3, [pc, #304]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800bf82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf84:	4b4b      	ldr	r3, [pc, #300]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d905      	bls.n	800bf98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 f96c 	bl	800c26c <USBD_CtlError>
    return USBD_FAIL;
 800bf94:	2303      	movs	r3, #3
 800bf96:	e088      	b.n	800c0aa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d002      	beq.n	800bfaa <USBD_SetConfig+0x3e>
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d025      	beq.n	800bff4 <USBD_SetConfig+0x88>
 800bfa8:	e071      	b.n	800c08e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bfaa:	4b42      	ldr	r3, [pc, #264]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d01c      	beq.n	800bfec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bfb2:	4b40      	ldr	r3, [pc, #256]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bfbc:	4b3d      	ldr	r3, [pc, #244]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff f992 	bl	800b2ec <USBD_SetClassConfig>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bfcc:	7bfb      	ldrb	r3, [r7, #15]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d004      	beq.n	800bfdc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 f949 	bl	800c26c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfda:	e065      	b.n	800c0a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fa10 	bl	800c402 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2203      	movs	r2, #3
 800bfe6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bfea:	e05d      	b.n	800c0a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fa08 	bl	800c402 <USBD_CtlSendStatus>
      break;
 800bff2:	e059      	b.n	800c0a8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bff4:	4b2f      	ldr	r3, [pc, #188]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d112      	bne.n	800c022 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2202      	movs	r2, #2
 800c000:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c004:	4b2b      	ldr	r3, [pc, #172]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	461a      	mov	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c00e:	4b29      	ldr	r3, [pc, #164]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff f985 	bl	800b324 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f9f1 	bl	800c402 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c020:	e042      	b.n	800c0a8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c022:	4b24      	ldr	r3, [pc, #144]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	461a      	mov	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d02a      	beq.n	800c086 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	b2db      	uxtb	r3, r3
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7ff f973 	bl	800b324 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c03e:	4b1d      	ldr	r3, [pc, #116]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c048:	4b1a      	ldr	r3, [pc, #104]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	4619      	mov	r1, r3
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff f94c 	bl	800b2ec <USBD_SetClassConfig>
 800c054:	4603      	mov	r3, r0
 800c056:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00f      	beq.n	800c07e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 f903 	bl	800c26c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff f958 	bl	800b324 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2202      	movs	r2, #2
 800c078:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c07c:	e014      	b.n	800c0a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f9bf 	bl	800c402 <USBD_CtlSendStatus>
      break;
 800c084:	e010      	b.n	800c0a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f9bb 	bl	800c402 <USBD_CtlSendStatus>
      break;
 800c08c:	e00c      	b.n	800c0a8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 f8eb 	bl	800c26c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c096:	4b07      	ldr	r3, [pc, #28]	@ (800c0b4 <USBD_SetConfig+0x148>)
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	4619      	mov	r1, r3
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7ff f941 	bl	800b324 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	73fb      	strb	r3, [r7, #15]
      break;
 800c0a6:	bf00      	nop
  }

  return ret;
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	2000059c 	.word	0x2000059c

0800c0b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	88db      	ldrh	r3, [r3, #6]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d004      	beq.n	800c0d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f8cd 	bl	800c26c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0d2:	e023      	b.n	800c11c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	dc02      	bgt.n	800c0e6 <USBD_GetConfig+0x2e>
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dc03      	bgt.n	800c0ec <USBD_GetConfig+0x34>
 800c0e4:	e015      	b.n	800c112 <USBD_GetConfig+0x5a>
 800c0e6:	2b03      	cmp	r3, #3
 800c0e8:	d00b      	beq.n	800c102 <USBD_GetConfig+0x4a>
 800c0ea:	e012      	b.n	800c112 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	3308      	adds	r3, #8
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f927 	bl	800c34e <USBD_CtlSendData>
        break;
 800c100:	e00c      	b.n	800c11c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	3304      	adds	r3, #4
 800c106:	2201      	movs	r2, #1
 800c108:	4619      	mov	r1, r3
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f91f 	bl	800c34e <USBD_CtlSendData>
        break;
 800c110:	e004      	b.n	800c11c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c112:	6839      	ldr	r1, [r7, #0]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f8a9 	bl	800c26c <USBD_CtlError>
        break;
 800c11a:	bf00      	nop
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c134:	b2db      	uxtb	r3, r3
 800c136:	3b01      	subs	r3, #1
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d81e      	bhi.n	800c17a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	88db      	ldrh	r3, [r3, #6]
 800c140:	2b02      	cmp	r3, #2
 800c142:	d004      	beq.n	800c14e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f890 	bl	800c26c <USBD_CtlError>
        break;
 800c14c:	e01a      	b.n	800c184 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2201      	movs	r2, #1
 800c152:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d005      	beq.n	800c16a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	f043 0202 	orr.w	r2, r3, #2
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	330c      	adds	r3, #12
 800c16e:	2202      	movs	r2, #2
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f8eb 	bl	800c34e <USBD_CtlSendData>
      break;
 800c178:	e004      	b.n	800c184 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f875 	bl	800c26c <USBD_CtlError>
      break;
 800c182:	bf00      	nop
  }
}
 800c184:	bf00      	nop
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	885b      	ldrh	r3, [r3, #2]
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d106      	bne.n	800c1ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f92b 	bl	800c402 <USBD_CtlSendStatus>
  }
}
 800c1ac:	bf00      	nop
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d80b      	bhi.n	800c1e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	885b      	ldrh	r3, [r3, #2]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d10c      	bne.n	800c1ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f910 	bl	800c402 <USBD_CtlSendStatus>
      }
      break;
 800c1e2:	e004      	b.n	800c1ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f840 	bl	800c26c <USBD_CtlError>
      break;
 800c1ec:	e000      	b.n	800c1f0 <USBD_ClrFeature+0x3c>
      break;
 800c1ee:	bf00      	nop
  }
}
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	781a      	ldrb	r2, [r3, #0]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3301      	adds	r3, #1
 800c212:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	781a      	ldrb	r2, [r3, #0]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3301      	adds	r3, #1
 800c220:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7ff fa92 	bl	800b74c <SWAPBYTE>
 800c228:	4603      	mov	r3, r0
 800c22a:	461a      	mov	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	3301      	adds	r3, #1
 800c234:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3301      	adds	r3, #1
 800c23a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f7ff fa85 	bl	800b74c <SWAPBYTE>
 800c242:	4603      	mov	r3, r0
 800c244:	461a      	mov	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	3301      	adds	r3, #1
 800c24e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	3301      	adds	r3, #1
 800c254:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f7ff fa78 	bl	800b74c <SWAPBYTE>
 800c25c:	4603      	mov	r3, r0
 800c25e:	461a      	mov	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	80da      	strh	r2, [r3, #6]
}
 800c264:	bf00      	nop
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c276:	2180      	movs	r1, #128	@ 0x80
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f003 fc79 	bl	800fb70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c27e:	2100      	movs	r1, #0
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f003 fc75 	bl	800fb70 <USBD_LL_StallEP>
}
 800c286:	bf00      	nop
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b086      	sub	sp, #24
 800c292:	af00      	add	r7, sp, #0
 800c294:	60f8      	str	r0, [r7, #12]
 800c296:	60b9      	str	r1, [r7, #8]
 800c298:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d036      	beq.n	800c312 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c2a8:	6938      	ldr	r0, [r7, #16]
 800c2aa:	f000 f836 	bl	800c31a <USBD_GetLen>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c2bc:	7dfb      	ldrb	r3, [r7, #23]
 800c2be:	68ba      	ldr	r2, [r7, #8]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	7812      	ldrb	r2, [r2, #0]
 800c2c6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c2ce:	7dfb      	ldrb	r3, [r7, #23]
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	2203      	movs	r2, #3
 800c2d6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2d8:	7dfb      	ldrb	r3, [r7, #23]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c2de:	e013      	b.n	800c308 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c2e0:	7dfb      	ldrb	r3, [r7, #23]
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	7812      	ldrb	r2, [r2, #0]
 800c2ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	613b      	str	r3, [r7, #16]
    idx++;
 800c2f2:	7dfb      	ldrb	r3, [r7, #23]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c2f8:	7dfb      	ldrb	r3, [r7, #23]
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	2200      	movs	r2, #0
 800c300:	701a      	strb	r2, [r3, #0]
    idx++;
 800c302:	7dfb      	ldrb	r3, [r7, #23]
 800c304:	3301      	adds	r3, #1
 800c306:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1e7      	bne.n	800c2e0 <USBD_GetString+0x52>
 800c310:	e000      	b.n	800c314 <USBD_GetString+0x86>
    return;
 800c312:	bf00      	nop
  }
}
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c31a:	b480      	push	{r7}
 800c31c:	b085      	sub	sp, #20
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c322:	2300      	movs	r3, #0
 800c324:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c32a:	e005      	b.n	800c338 <USBD_GetLen+0x1e>
  {
    len++;
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
 800c32e:	3301      	adds	r3, #1
 800c330:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	3301      	adds	r3, #1
 800c336:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1f5      	bne.n	800c32c <USBD_GetLen+0x12>
  }

  return len;
 800c340:	7bfb      	ldrb	r3, [r7, #15]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b084      	sub	sp, #16
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	60b9      	str	r1, [r7, #8]
 800c358:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2202      	movs	r2, #2
 800c35e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	2100      	movs	r1, #0
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f003 fc84 	bl	800fc82 <USBD_LL_Transmit>

  return USBD_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	2100      	movs	r1, #0
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f003 fc73 	bl	800fc82 <USBD_LL_Transmit>

  return USBD_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b084      	sub	sp, #16
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	60f8      	str	r0, [r7, #12]
 800c3ae:	60b9      	str	r1, [r7, #8]
 800c3b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2203      	movs	r2, #3
 800c3b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68ba      	ldr	r2, [r7, #8]
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f003 fc77 	bl	800fcc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f003 fc66 	bl	800fcc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c402:	b580      	push	{r7, lr}
 800c404:	b082      	sub	sp, #8
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2204      	movs	r2, #4
 800c40e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c412:	2300      	movs	r3, #0
 800c414:	2200      	movs	r2, #0
 800c416:	2100      	movs	r1, #0
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f003 fc32 	bl	800fc82 <USBD_LL_Transmit>

  return USBD_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2205      	movs	r2, #5
 800c434:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c438:	2300      	movs	r3, #0
 800c43a:	2200      	movs	r2, #0
 800c43c:	2100      	movs	r1, #0
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f003 fc40 	bl	800fcc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
	...

0800c450 <__NVIC_SetPriority>:
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	6039      	str	r1, [r7, #0]
 800c45a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c45c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c460:	2b00      	cmp	r3, #0
 800c462:	db0a      	blt.n	800c47a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	b2da      	uxtb	r2, r3
 800c468:	490c      	ldr	r1, [pc, #48]	@ (800c49c <__NVIC_SetPriority+0x4c>)
 800c46a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c46e:	0112      	lsls	r2, r2, #4
 800c470:	b2d2      	uxtb	r2, r2
 800c472:	440b      	add	r3, r1
 800c474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c478:	e00a      	b.n	800c490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	4908      	ldr	r1, [pc, #32]	@ (800c4a0 <__NVIC_SetPriority+0x50>)
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	f003 030f 	and.w	r3, r3, #15
 800c486:	3b04      	subs	r3, #4
 800c488:	0112      	lsls	r2, r2, #4
 800c48a:	b2d2      	uxtb	r2, r2
 800c48c:	440b      	add	r3, r1
 800c48e:	761a      	strb	r2, [r3, #24]
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	e000e100 	.word	0xe000e100
 800c4a0:	e000ed00 	.word	0xe000ed00

0800c4a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c4a8:	4b05      	ldr	r3, [pc, #20]	@ (800c4c0 <SysTick_Handler+0x1c>)
 800c4aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c4ac:	f001 ff36 	bl	800e31c <xTaskGetSchedulerState>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d001      	beq.n	800c4ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c4b6:	f002 fd2f 	bl	800ef18 <xPortSysTickHandler>
  }
}
 800c4ba:	bf00      	nop
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	e000e010 	.word	0xe000e010

0800c4c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	f06f 0004 	mvn.w	r0, #4
 800c4ce:	f7ff ffbf 	bl	800c450 <__NVIC_SetPriority>
#endif
}
 800c4d2:	bf00      	nop
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4de:	f3ef 8305 	mrs	r3, IPSR
 800c4e2:	603b      	str	r3, [r7, #0]
  return(result);
 800c4e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d003      	beq.n	800c4f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c4ea:	f06f 0305 	mvn.w	r3, #5
 800c4ee:	607b      	str	r3, [r7, #4]
 800c4f0:	e00c      	b.n	800c50c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c4f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c51c <osKernelInitialize+0x44>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d105      	bne.n	800c506 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c4fa:	4b08      	ldr	r3, [pc, #32]	@ (800c51c <osKernelInitialize+0x44>)
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c500:	2300      	movs	r3, #0
 800c502:	607b      	str	r3, [r7, #4]
 800c504:	e002      	b.n	800c50c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c50a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c50c:	687b      	ldr	r3, [r7, #4]
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	200005a0 	.word	0x200005a0

0800c520 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c526:	f3ef 8305 	mrs	r3, IPSR
 800c52a:	603b      	str	r3, [r7, #0]
  return(result);
 800c52c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d003      	beq.n	800c53a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c532:	f06f 0305 	mvn.w	r3, #5
 800c536:	607b      	str	r3, [r7, #4]
 800c538:	e010      	b.n	800c55c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c53a:	4b0b      	ldr	r3, [pc, #44]	@ (800c568 <osKernelStart+0x48>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d109      	bne.n	800c556 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c542:	f7ff ffbf 	bl	800c4c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c546:	4b08      	ldr	r3, [pc, #32]	@ (800c568 <osKernelStart+0x48>)
 800c548:	2202      	movs	r2, #2
 800c54a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c54c:	f001 fa82 	bl	800da54 <vTaskStartScheduler>
      stat = osOK;
 800c550:	2300      	movs	r3, #0
 800c552:	607b      	str	r3, [r7, #4]
 800c554:	e002      	b.n	800c55c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c55a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c55c:	687b      	ldr	r3, [r7, #4]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	200005a0 	.word	0x200005a0

0800c56c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b08e      	sub	sp, #56	@ 0x38
 800c570:	af04      	add	r7, sp, #16
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c57c:	f3ef 8305 	mrs	r3, IPSR
 800c580:	617b      	str	r3, [r7, #20]
  return(result);
 800c582:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c584:	2b00      	cmp	r3, #0
 800c586:	d17f      	bne.n	800c688 <osThreadNew+0x11c>
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d07c      	beq.n	800c688 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c58e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c592:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c594:	2318      	movs	r3, #24
 800c596:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c598:	2300      	movs	r3, #0
 800c59a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c59c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d045      	beq.n	800c634 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d002      	beq.n	800c5b6 <osThreadNew+0x4a>
        name = attr->name;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	699b      	ldr	r3, [r3, #24]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d002      	beq.n	800c5c4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d008      	beq.n	800c5dc <osThreadNew+0x70>
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	2b38      	cmp	r3, #56	@ 0x38
 800c5ce:	d805      	bhi.n	800c5dc <osThreadNew+0x70>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	f003 0301 	and.w	r3, r3, #1
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d001      	beq.n	800c5e0 <osThreadNew+0x74>
        return (NULL);
 800c5dc:	2300      	movs	r3, #0
 800c5de:	e054      	b.n	800c68a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d003      	beq.n	800c5f0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	695b      	ldr	r3, [r3, #20]
 800c5ec:	089b      	lsrs	r3, r3, #2
 800c5ee:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00e      	beq.n	800c616 <osThreadNew+0xaa>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	2ba7      	cmp	r3, #167	@ 0xa7
 800c5fe:	d90a      	bls.n	800c616 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c604:	2b00      	cmp	r3, #0
 800c606:	d006      	beq.n	800c616 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	695b      	ldr	r3, [r3, #20]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <osThreadNew+0xaa>
        mem = 1;
 800c610:	2301      	movs	r3, #1
 800c612:	61bb      	str	r3, [r7, #24]
 800c614:	e010      	b.n	800c638 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10c      	bne.n	800c638 <osThreadNew+0xcc>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d108      	bne.n	800c638 <osThreadNew+0xcc>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d104      	bne.n	800c638 <osThreadNew+0xcc>
          mem = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	61bb      	str	r3, [r7, #24]
 800c632:	e001      	b.n	800c638 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c634:	2300      	movs	r3, #0
 800c636:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d110      	bne.n	800c660 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c646:	9202      	str	r2, [sp, #8]
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	6a3a      	ldr	r2, [r7, #32]
 800c652:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f001 f809 	bl	800d66c <xTaskCreateStatic>
 800c65a:	4603      	mov	r3, r0
 800c65c:	613b      	str	r3, [r7, #16]
 800c65e:	e013      	b.n	800c688 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d110      	bne.n	800c688 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	b29a      	uxth	r2, r3
 800c66a:	f107 0310 	add.w	r3, r7, #16
 800c66e:	9301      	str	r3, [sp, #4]
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f001 f857 	bl	800d72c <xTaskCreate>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b01      	cmp	r3, #1
 800c682:	d001      	beq.n	800c688 <osThreadNew+0x11c>
            hTask = NULL;
 800c684:	2300      	movs	r3, #0
 800c686:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c688:	693b      	ldr	r3, [r7, #16]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3728      	adds	r7, #40	@ 0x28
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c692:	b580      	push	{r7, lr}
 800c694:	b084      	sub	sp, #16
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c69a:	f3ef 8305 	mrs	r3, IPSR
 800c69e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c6a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d003      	beq.n	800c6ae <osDelay+0x1c>
    stat = osErrorISR;
 800c6a6:	f06f 0305 	mvn.w	r3, #5
 800c6aa:	60fb      	str	r3, [r7, #12]
 800c6ac:	e007      	b.n	800c6be <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d002      	beq.n	800c6be <osDelay+0x2c>
      vTaskDelay(ticks);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f001 f995 	bl	800d9e8 <vTaskDelay>
    }
  }

  return (stat);
 800c6be:	68fb      	ldr	r3, [r7, #12]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08a      	sub	sp, #40	@ 0x28
 800c6cc:	af02      	add	r7, sp, #8
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6d8:	f3ef 8305 	mrs	r3, IPSR
 800c6dc:	613b      	str	r3, [r7, #16]
  return(result);
 800c6de:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d15f      	bne.n	800c7a4 <osMessageQueueNew+0xdc>
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d05c      	beq.n	800c7a4 <osMessageQueueNew+0xdc>
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d059      	beq.n	800c7a4 <osMessageQueueNew+0xdc>
    mem = -1;
 800c6f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d029      	beq.n	800c750 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d012      	beq.n	800c72a <osMessageQueueNew+0x62>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	2b4f      	cmp	r3, #79	@ 0x4f
 800c70a:	d90e      	bls.n	800c72a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00a      	beq.n	800c72a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	695a      	ldr	r2, [r3, #20]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	68b9      	ldr	r1, [r7, #8]
 800c71c:	fb01 f303 	mul.w	r3, r1, r3
 800c720:	429a      	cmp	r2, r3
 800c722:	d302      	bcc.n	800c72a <osMessageQueueNew+0x62>
        mem = 1;
 800c724:	2301      	movs	r3, #1
 800c726:	61bb      	str	r3, [r7, #24]
 800c728:	e014      	b.n	800c754 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d110      	bne.n	800c754 <osMessageQueueNew+0x8c>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10c      	bne.n	800c754 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d108      	bne.n	800c754 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d104      	bne.n	800c754 <osMessageQueueNew+0x8c>
          mem = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	61bb      	str	r3, [r7, #24]
 800c74e:	e001      	b.n	800c754 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d10b      	bne.n	800c772 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	691a      	ldr	r2, [r3, #16]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	2100      	movs	r1, #0
 800c764:	9100      	str	r1, [sp, #0]
 800c766:	68b9      	ldr	r1, [r7, #8]
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f000 fa31 	bl	800cbd0 <xQueueGenericCreateStatic>
 800c76e:	61f8      	str	r0, [r7, #28]
 800c770:	e008      	b.n	800c784 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d105      	bne.n	800c784 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c778:	2200      	movs	r2, #0
 800c77a:	68b9      	ldr	r1, [r7, #8]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f000 faa4 	bl	800ccca <xQueueGenericCreate>
 800c782:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00c      	beq.n	800c7a4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d003      	beq.n	800c798 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	617b      	str	r3, [r7, #20]
 800c796:	e001      	b.n	800c79c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c798:	2300      	movs	r3, #0
 800c79a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c79c:	6979      	ldr	r1, [r7, #20]
 800c79e:	69f8      	ldr	r0, [r7, #28]
 800c7a0:	f000 ff06 	bl	800d5b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c7a4:	69fb      	ldr	r3, [r7, #28]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3720      	adds	r7, #32
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b088      	sub	sp, #32
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	603b      	str	r3, [r7, #0]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7c8:	f3ef 8305 	mrs	r3, IPSR
 800c7cc:	617b      	str	r3, [r7, #20]
  return(result);
 800c7ce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d028      	beq.n	800c826 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d005      	beq.n	800c7e6 <osMessageQueuePut+0x36>
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d002      	beq.n	800c7e6 <osMessageQueuePut+0x36>
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c7e6:	f06f 0303 	mvn.w	r3, #3
 800c7ea:	61fb      	str	r3, [r7, #28]
 800c7ec:	e038      	b.n	800c860 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c7f2:	f107 0210 	add.w	r2, r7, #16
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	68b9      	ldr	r1, [r7, #8]
 800c7fa:	69b8      	ldr	r0, [r7, #24]
 800c7fc:	f000 fbc6 	bl	800cf8c <xQueueGenericSendFromISR>
 800c800:	4603      	mov	r3, r0
 800c802:	2b01      	cmp	r3, #1
 800c804:	d003      	beq.n	800c80e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c806:	f06f 0302 	mvn.w	r3, #2
 800c80a:	61fb      	str	r3, [r7, #28]
 800c80c:	e028      	b.n	800c860 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d025      	beq.n	800c860 <osMessageQueuePut+0xb0>
 800c814:	4b15      	ldr	r3, [pc, #84]	@ (800c86c <osMessageQueuePut+0xbc>)
 800c816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	e01c      	b.n	800c860 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <osMessageQueuePut+0x82>
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d103      	bne.n	800c83a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c832:	f06f 0303 	mvn.w	r3, #3
 800c836:	61fb      	str	r3, [r7, #28]
 800c838:	e012      	b.n	800c860 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c83a:	2300      	movs	r3, #0
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	68b9      	ldr	r1, [r7, #8]
 800c840:	69b8      	ldr	r0, [r7, #24]
 800c842:	f000 faa1 	bl	800cd88 <xQueueGenericSend>
 800c846:	4603      	mov	r3, r0
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d009      	beq.n	800c860 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c852:	f06f 0301 	mvn.w	r3, #1
 800c856:	61fb      	str	r3, [r7, #28]
 800c858:	e002      	b.n	800c860 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c85a:	f06f 0302 	mvn.w	r3, #2
 800c85e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c860:	69fb      	ldr	r3, [r7, #28]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3720      	adds	r7, #32
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	e000ed04 	.word	0xe000ed04

0800c870 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c870:	b580      	push	{r7, lr}
 800c872:	b088      	sub	sp, #32
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
 800c87c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c882:	2300      	movs	r3, #0
 800c884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c886:	f3ef 8305 	mrs	r3, IPSR
 800c88a:	617b      	str	r3, [r7, #20]
  return(result);
 800c88c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d028      	beq.n	800c8e4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d005      	beq.n	800c8a4 <osMessageQueueGet+0x34>
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d002      	beq.n	800c8a4 <osMessageQueueGet+0x34>
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d003      	beq.n	800c8ac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c8a4:	f06f 0303 	mvn.w	r3, #3
 800c8a8:	61fb      	str	r3, [r7, #28]
 800c8aa:	e037      	b.n	800c91c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c8b0:	f107 0310 	add.w	r3, r7, #16
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	69b8      	ldr	r0, [r7, #24]
 800c8ba:	f000 fce7 	bl	800d28c <xQueueReceiveFromISR>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d003      	beq.n	800c8cc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c8c4:	f06f 0302 	mvn.w	r3, #2
 800c8c8:	61fb      	str	r3, [r7, #28]
 800c8ca:	e027      	b.n	800c91c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d024      	beq.n	800c91c <osMessageQueueGet+0xac>
 800c8d2:	4b15      	ldr	r3, [pc, #84]	@ (800c928 <osMessageQueueGet+0xb8>)
 800c8d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	e01b      	b.n	800c91c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d002      	beq.n	800c8f0 <osMessageQueueGet+0x80>
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d103      	bne.n	800c8f8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c8f0:	f06f 0303 	mvn.w	r3, #3
 800c8f4:	61fb      	str	r3, [r7, #28]
 800c8f6:	e011      	b.n	800c91c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	68b9      	ldr	r1, [r7, #8]
 800c8fc:	69b8      	ldr	r0, [r7, #24]
 800c8fe:	f000 fbe3 	bl	800d0c8 <xQueueReceive>
 800c902:	4603      	mov	r3, r0
 800c904:	2b01      	cmp	r3, #1
 800c906:	d009      	beq.n	800c91c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c90e:	f06f 0301 	mvn.w	r3, #1
 800c912:	61fb      	str	r3, [r7, #28]
 800c914:	e002      	b.n	800c91c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c916:	f06f 0302 	mvn.w	r3, #2
 800c91a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c91c:	69fb      	ldr	r3, [r7, #28]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3720      	adds	r7, #32
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	e000ed04 	.word	0xe000ed04

0800c92c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c92c:	b480      	push	{r7}
 800c92e:	b085      	sub	sp, #20
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	4a07      	ldr	r2, [pc, #28]	@ (800c958 <vApplicationGetIdleTaskMemory+0x2c>)
 800c93c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	4a06      	ldr	r2, [pc, #24]	@ (800c95c <vApplicationGetIdleTaskMemory+0x30>)
 800c942:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c94a:	601a      	str	r2, [r3, #0]
}
 800c94c:	bf00      	nop
 800c94e:	3714      	adds	r7, #20
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr
 800c958:	200005a4 	.word	0x200005a4
 800c95c:	2000064c 	.word	0x2000064c

0800c960 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	4a07      	ldr	r2, [pc, #28]	@ (800c98c <vApplicationGetTimerTaskMemory+0x2c>)
 800c970:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	4a06      	ldr	r2, [pc, #24]	@ (800c990 <vApplicationGetTimerTaskMemory+0x30>)
 800c976:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f44f 6283 	mov.w	r2, #1048	@ 0x418
 800c97e:	601a      	str	r2, [r3, #0]
}
 800c980:	bf00      	nop
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	200015ec 	.word	0x200015ec
 800c990:	20001694 	.word	0x20001694

0800c994 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f103 0208 	add.w	r2, r3, #8
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c9ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f103 0208 	add.w	r2, r3, #8
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f103 0208 	add.w	r2, r3, #8
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9e2:	bf00      	nop
 800c9e4:	370c      	adds	r7, #12
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b085      	sub	sp, #20
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	689a      	ldr	r2, [r3, #8]
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	683a      	ldr	r2, [r7, #0]
 800ca12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	683a      	ldr	r2, [r7, #0]
 800ca18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	601a      	str	r2, [r3, #0]
}
 800ca2a:	bf00      	nop
 800ca2c:	3714      	adds	r7, #20
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca36:	b480      	push	{r7}
 800ca38:	b085      	sub	sp, #20
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca4c:	d103      	bne.n	800ca56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	e00c      	b.n	800ca70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	3308      	adds	r3, #8
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	e002      	b.n	800ca64 <vListInsert+0x2e>
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d2f6      	bcs.n	800ca5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	683a      	ldr	r2, [r7, #0]
 800ca8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	1c5a      	adds	r2, r3, #1
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	601a      	str	r2, [r3, #0]
}
 800ca9c:	bf00      	nop
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	6892      	ldr	r2, [r2, #8]
 800cabe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	6852      	ldr	r2, [r2, #4]
 800cac8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d103      	bne.n	800cadc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	689a      	ldr	r2, [r3, #8]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	1e5a      	subs	r2, r3, #1
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10b      	bne.n	800cb28 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb22:	bf00      	nop
 800cb24:	bf00      	nop
 800cb26:	e7fd      	b.n	800cb24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb28:	f002 f966 	bl	800edf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb34:	68f9      	ldr	r1, [r7, #12]
 800cb36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cb38:	fb01 f303 	mul.w	r3, r1, r3
 800cb3c:	441a      	add	r2, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb58:	3b01      	subs	r3, #1
 800cb5a:	68f9      	ldr	r1, [r7, #12]
 800cb5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cb5e:	fb01 f303 	mul.w	r3, r1, r3
 800cb62:	441a      	add	r2, r3
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	22ff      	movs	r2, #255	@ 0xff
 800cb6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	22ff      	movs	r2, #255	@ 0xff
 800cb74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d114      	bne.n	800cba8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d01a      	beq.n	800cbbc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	3310      	adds	r3, #16
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f001 fa00 	bl	800df90 <xTaskRemoveFromEventList>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d012      	beq.n	800cbbc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cb96:	4b0d      	ldr	r3, [pc, #52]	@ (800cbcc <xQueueGenericReset+0xd0>)
 800cb98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb9c:	601a      	str	r2, [r3, #0]
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	e009      	b.n	800cbbc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	3310      	adds	r3, #16
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7ff fef1 	bl	800c994 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	3324      	adds	r3, #36	@ 0x24
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7ff feec 	bl	800c994 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cbbc:	f002 f94e 	bl	800ee5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cbc0:	2301      	movs	r3, #1
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	e000ed04 	.word	0xe000ed04

0800cbd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b08e      	sub	sp, #56	@ 0x38
 800cbd4:	af02      	add	r7, sp, #8
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10b      	bne.n	800cbfc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cbf6:	bf00      	nop
 800cbf8:	bf00      	nop
 800cbfa:	e7fd      	b.n	800cbf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10b      	bne.n	800cc1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cc14:	bf00      	nop
 800cc16:	bf00      	nop
 800cc18:	e7fd      	b.n	800cc16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d002      	beq.n	800cc26 <xQueueGenericCreateStatic+0x56>
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <xQueueGenericCreateStatic+0x5a>
 800cc26:	2301      	movs	r3, #1
 800cc28:	e000      	b.n	800cc2c <xQueueGenericCreateStatic+0x5c>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10b      	bne.n	800cc48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	623b      	str	r3, [r7, #32]
}
 800cc42:	bf00      	nop
 800cc44:	bf00      	nop
 800cc46:	e7fd      	b.n	800cc44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d102      	bne.n	800cc54 <xQueueGenericCreateStatic+0x84>
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <xQueueGenericCreateStatic+0x88>
 800cc54:	2301      	movs	r3, #1
 800cc56:	e000      	b.n	800cc5a <xQueueGenericCreateStatic+0x8a>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10b      	bne.n	800cc76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	61fb      	str	r3, [r7, #28]
}
 800cc70:	bf00      	nop
 800cc72:	bf00      	nop
 800cc74:	e7fd      	b.n	800cc72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc76:	2350      	movs	r3, #80	@ 0x50
 800cc78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	2b50      	cmp	r3, #80	@ 0x50
 800cc7e:	d00b      	beq.n	800cc98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	61bb      	str	r3, [r7, #24]
}
 800cc92:	bf00      	nop
 800cc94:	bf00      	nop
 800cc96:	e7fd      	b.n	800cc94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00d      	beq.n	800ccc0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ccb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb2:	9300      	str	r3, [sp, #0]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	68b9      	ldr	r1, [r7, #8]
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f000 f840 	bl	800cd40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3730      	adds	r7, #48	@ 0x30
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b08a      	sub	sp, #40	@ 0x28
 800ccce:	af02      	add	r7, sp, #8
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10b      	bne.n	800ccf6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	613b      	str	r3, [r7, #16]
}
 800ccf0:	bf00      	nop
 800ccf2:	bf00      	nop
 800ccf4:	e7fd      	b.n	800ccf2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	68ba      	ldr	r2, [r7, #8]
 800ccfa:	fb02 f303 	mul.w	r3, r2, r3
 800ccfe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	3350      	adds	r3, #80	@ 0x50
 800cd04:	4618      	mov	r0, r3
 800cd06:	f002 f999 	bl	800f03c <pvPortMalloc>
 800cd0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d011      	beq.n	800cd36 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	3350      	adds	r3, #80	@ 0x50
 800cd1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd24:	79fa      	ldrb	r2, [r7, #7]
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	9300      	str	r3, [sp, #0]
 800cd2a:	4613      	mov	r3, r2
 800cd2c:	697a      	ldr	r2, [r7, #20]
 800cd2e:	68b9      	ldr	r1, [r7, #8]
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 f805 	bl	800cd40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd36:	69bb      	ldr	r3, [r7, #24]
	}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3720      	adds	r7, #32
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
 800cd4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d103      	bne.n	800cd5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	69ba      	ldr	r2, [r7, #24]
 800cd58:	601a      	str	r2, [r3, #0]
 800cd5a:	e002      	b.n	800cd62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd5c:	69bb      	ldr	r3, [r7, #24]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd6e:	2101      	movs	r1, #1
 800cd70:	69b8      	ldr	r0, [r7, #24]
 800cd72:	f7ff fec3 	bl	800cafc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	78fa      	ldrb	r2, [r7, #3]
 800cd7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd7e:	bf00      	nop
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
	...

0800cd88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08e      	sub	sp, #56	@ 0x38
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd96:	2300      	movs	r3, #0
 800cd98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10b      	bne.n	800cdbc <xQueueGenericSend+0x34>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cdb6:	bf00      	nop
 800cdb8:	bf00      	nop
 800cdba:	e7fd      	b.n	800cdb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d103      	bne.n	800cdca <xQueueGenericSend+0x42>
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d101      	bne.n	800cdce <xQueueGenericSend+0x46>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e000      	b.n	800cdd0 <xQueueGenericSend+0x48>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10b      	bne.n	800cdec <xQueueGenericSend+0x64>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cde6:	bf00      	nop
 800cde8:	bf00      	nop
 800cdea:	e7fd      	b.n	800cde8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d103      	bne.n	800cdfa <xQueueGenericSend+0x72>
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d101      	bne.n	800cdfe <xQueueGenericSend+0x76>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e000      	b.n	800ce00 <xQueueGenericSend+0x78>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d10b      	bne.n	800ce1c <xQueueGenericSend+0x94>
	__asm volatile
 800ce04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	623b      	str	r3, [r7, #32]
}
 800ce16:	bf00      	nop
 800ce18:	bf00      	nop
 800ce1a:	e7fd      	b.n	800ce18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce1c:	f001 fa7e 	bl	800e31c <xTaskGetSchedulerState>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d102      	bne.n	800ce2c <xQueueGenericSend+0xa4>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <xQueueGenericSend+0xa8>
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e000      	b.n	800ce32 <xQueueGenericSend+0xaa>
 800ce30:	2300      	movs	r3, #0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10b      	bne.n	800ce4e <xQueueGenericSend+0xc6>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	61fb      	str	r3, [r7, #28]
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	e7fd      	b.n	800ce4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce4e:	f001 ffd3 	bl	800edf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d302      	bcc.n	800ce64 <xQueueGenericSend+0xdc>
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d129      	bne.n	800ceb8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce64:	683a      	ldr	r2, [r7, #0]
 800ce66:	68b9      	ldr	r1, [r7, #8]
 800ce68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce6a:	f000 fa91 	bl	800d390 <prvCopyDataToQueue>
 800ce6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d010      	beq.n	800ce9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7a:	3324      	adds	r3, #36	@ 0x24
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f001 f887 	bl	800df90 <xTaskRemoveFromEventList>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d013      	beq.n	800ceb0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce88:	4b3f      	ldr	r3, [pc, #252]	@ (800cf88 <xQueueGenericSend+0x200>)
 800ce8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	e00a      	b.n	800ceb0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d007      	beq.n	800ceb0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cea0:	4b39      	ldr	r3, [pc, #228]	@ (800cf88 <xQueueGenericSend+0x200>)
 800cea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ceb0:	f001 ffd4 	bl	800ee5c <vPortExitCritical>
				return pdPASS;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e063      	b.n	800cf80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d103      	bne.n	800cec6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cebe:	f001 ffcd 	bl	800ee5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cec2:	2300      	movs	r3, #0
 800cec4:	e05c      	b.n	800cf80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d106      	bne.n	800ceda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cecc:	f107 0314 	add.w	r3, r7, #20
 800ced0:	4618      	mov	r0, r3
 800ced2:	f001 f8c1 	bl	800e058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ced6:	2301      	movs	r3, #1
 800ced8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ceda:	f001 ffbf 	bl	800ee5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cede:	f000 fe29 	bl	800db34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cee2:	f001 ff89 	bl	800edf8 <vPortEnterCritical>
 800cee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ceec:	b25b      	sxtb	r3, r3
 800ceee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cef2:	d103      	bne.n	800cefc <xQueueGenericSend+0x174>
 800cef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf02:	b25b      	sxtb	r3, r3
 800cf04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf08:	d103      	bne.n	800cf12 <xQueueGenericSend+0x18a>
 800cf0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf12:	f001 ffa3 	bl	800ee5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf16:	1d3a      	adds	r2, r7, #4
 800cf18:	f107 0314 	add.w	r3, r7, #20
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f001 f8b0 	bl	800e084 <xTaskCheckForTimeOut>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d124      	bne.n	800cf74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf2c:	f000 fb28 	bl	800d580 <prvIsQueueFull>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d018      	beq.n	800cf68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf38:	3310      	adds	r3, #16
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 ffd4 	bl	800deec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf46:	f000 fab3 	bl	800d4b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf4a:	f000 fe01 	bl	800db50 <xTaskResumeAll>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f47f af7c 	bne.w	800ce4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cf56:	4b0c      	ldr	r3, [pc, #48]	@ (800cf88 <xQueueGenericSend+0x200>)
 800cf58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	e772      	b.n	800ce4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf6a:	f000 faa1 	bl	800d4b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf6e:	f000 fdef 	bl	800db50 <xTaskResumeAll>
 800cf72:	e76c      	b.n	800ce4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf76:	f000 fa9b 	bl	800d4b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf7a:	f000 fde9 	bl	800db50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3738      	adds	r7, #56	@ 0x38
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	e000ed04 	.word	0xe000ed04

0800cf8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b090      	sub	sp, #64	@ 0x40
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	607a      	str	r2, [r7, #4]
 800cf98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cf9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10b      	bne.n	800cfbc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cfb6:	bf00      	nop
 800cfb8:	bf00      	nop
 800cfba:	e7fd      	b.n	800cfb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d103      	bne.n	800cfca <xQueueGenericSendFromISR+0x3e>
 800cfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d101      	bne.n	800cfce <xQueueGenericSendFromISR+0x42>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e000      	b.n	800cfd0 <xQueueGenericSendFromISR+0x44>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10b      	bne.n	800cfec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cfe6:	bf00      	nop
 800cfe8:	bf00      	nop
 800cfea:	e7fd      	b.n	800cfe8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d103      	bne.n	800cffa <xQueueGenericSendFromISR+0x6e>
 800cff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d101      	bne.n	800cffe <xQueueGenericSendFromISR+0x72>
 800cffa:	2301      	movs	r3, #1
 800cffc:	e000      	b.n	800d000 <xQueueGenericSendFromISR+0x74>
 800cffe:	2300      	movs	r3, #0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10b      	bne.n	800d01c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	623b      	str	r3, [r7, #32]
}
 800d016:	bf00      	nop
 800d018:	bf00      	nop
 800d01a:	e7fd      	b.n	800d018 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d01c:	f001 ffcc 	bl	800efb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d020:	f3ef 8211 	mrs	r2, BASEPRI
 800d024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	61fa      	str	r2, [r7, #28]
 800d036:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d038:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d03a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d044:	429a      	cmp	r2, r3
 800d046:	d302      	bcc.n	800d04e <xQueueGenericSendFromISR+0xc2>
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	2b02      	cmp	r3, #2
 800d04c:	d12f      	bne.n	800d0ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d050:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d054:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d05e:	683a      	ldr	r2, [r7, #0]
 800d060:	68b9      	ldr	r1, [r7, #8]
 800d062:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d064:	f000 f994 	bl	800d390 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d068:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d06c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d070:	d112      	bne.n	800d098 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d076:	2b00      	cmp	r3, #0
 800d078:	d016      	beq.n	800d0a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07c:	3324      	adds	r3, #36	@ 0x24
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 ff86 	bl	800df90 <xTaskRemoveFromEventList>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00e      	beq.n	800d0a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d00b      	beq.n	800d0a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	601a      	str	r2, [r3, #0]
 800d096:	e007      	b.n	800d0a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d098:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d09c:	3301      	adds	r3, #1
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	b25a      	sxtb	r2, r3
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d0ac:	e001      	b.n	800d0b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d0bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3740      	adds	r7, #64	@ 0x40
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b08c      	sub	sp, #48	@ 0x30
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10b      	bne.n	800d0fa <xQueueReceive+0x32>
	__asm volatile
 800d0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	623b      	str	r3, [r7, #32]
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
 800d0f8:	e7fd      	b.n	800d0f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d103      	bne.n	800d108 <xQueueReceive+0x40>
 800d100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d104:	2b00      	cmp	r3, #0
 800d106:	d101      	bne.n	800d10c <xQueueReceive+0x44>
 800d108:	2301      	movs	r3, #1
 800d10a:	e000      	b.n	800d10e <xQueueReceive+0x46>
 800d10c:	2300      	movs	r3, #0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10b      	bne.n	800d12a <xQueueReceive+0x62>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	61fb      	str	r3, [r7, #28]
}
 800d124:	bf00      	nop
 800d126:	bf00      	nop
 800d128:	e7fd      	b.n	800d126 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d12a:	f001 f8f7 	bl	800e31c <xTaskGetSchedulerState>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d102      	bne.n	800d13a <xQueueReceive+0x72>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d101      	bne.n	800d13e <xQueueReceive+0x76>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <xQueueReceive+0x78>
 800d13e:	2300      	movs	r3, #0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10b      	bne.n	800d15c <xQueueReceive+0x94>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	61bb      	str	r3, [r7, #24]
}
 800d156:	bf00      	nop
 800d158:	bf00      	nop
 800d15a:	e7fd      	b.n	800d158 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d15c:	f001 fe4c 	bl	800edf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d164:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d01f      	beq.n	800d1ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d16c:	68b9      	ldr	r1, [r7, #8]
 800d16e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d170:	f000 f978 	bl	800d464 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d176:	1e5a      	subs	r2, r3, #1
 800d178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17e:	691b      	ldr	r3, [r3, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00f      	beq.n	800d1a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d186:	3310      	adds	r3, #16
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 ff01 	bl	800df90 <xTaskRemoveFromEventList>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d007      	beq.n	800d1a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d194:	4b3c      	ldr	r3, [pc, #240]	@ (800d288 <xQueueReceive+0x1c0>)
 800d196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d19a:	601a      	str	r2, [r3, #0]
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1a4:	f001 fe5a 	bl	800ee5c <vPortExitCritical>
				return pdPASS;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e069      	b.n	800d280 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d103      	bne.n	800d1ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1b2:	f001 fe53 	bl	800ee5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e062      	b.n	800d280 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d106      	bne.n	800d1ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1c0:	f107 0310 	add.w	r3, r7, #16
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 ff47 	bl	800e058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1ce:	f001 fe45 	bl	800ee5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1d2:	f000 fcaf 	bl	800db34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1d6:	f001 fe0f 	bl	800edf8 <vPortEnterCritical>
 800d1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1e0:	b25b      	sxtb	r3, r3
 800d1e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1e6:	d103      	bne.n	800d1f0 <xQueueReceive+0x128>
 800d1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1f6:	b25b      	sxtb	r3, r3
 800d1f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1fc:	d103      	bne.n	800d206 <xQueueReceive+0x13e>
 800d1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d200:	2200      	movs	r2, #0
 800d202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d206:	f001 fe29 	bl	800ee5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d20a:	1d3a      	adds	r2, r7, #4
 800d20c:	f107 0310 	add.w	r3, r7, #16
 800d210:	4611      	mov	r1, r2
 800d212:	4618      	mov	r0, r3
 800d214:	f000 ff36 	bl	800e084 <xTaskCheckForTimeOut>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d123      	bne.n	800d266 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d21e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d220:	f000 f998 	bl	800d554 <prvIsQueueEmpty>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d017      	beq.n	800d25a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d22c:	3324      	adds	r3, #36	@ 0x24
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	4611      	mov	r1, r2
 800d232:	4618      	mov	r0, r3
 800d234:	f000 fe5a 	bl	800deec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d238:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d23a:	f000 f939 	bl	800d4b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d23e:	f000 fc87 	bl	800db50 <xTaskResumeAll>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d189      	bne.n	800d15c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d248:	4b0f      	ldr	r3, [pc, #60]	@ (800d288 <xQueueReceive+0x1c0>)
 800d24a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	e780      	b.n	800d15c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d25a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d25c:	f000 f928 	bl	800d4b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d260:	f000 fc76 	bl	800db50 <xTaskResumeAll>
 800d264:	e77a      	b.n	800d15c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d268:	f000 f922 	bl	800d4b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d26c:	f000 fc70 	bl	800db50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d272:	f000 f96f 	bl	800d554 <prvIsQueueEmpty>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f43f af6f 	beq.w	800d15c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d27e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d280:	4618      	mov	r0, r3
 800d282:	3730      	adds	r7, #48	@ 0x30
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	e000ed04 	.word	0xe000ed04

0800d28c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b08e      	sub	sp, #56	@ 0x38
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10b      	bne.n	800d2ba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	623b      	str	r3, [r7, #32]
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop
 800d2b8:	e7fd      	b.n	800d2b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d103      	bne.n	800d2c8 <xQueueReceiveFromISR+0x3c>
 800d2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d101      	bne.n	800d2cc <xQueueReceiveFromISR+0x40>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e000      	b.n	800d2ce <xQueueReceiveFromISR+0x42>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d10b      	bne.n	800d2ea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	61fb      	str	r3, [r7, #28]
}
 800d2e4:	bf00      	nop
 800d2e6:	bf00      	nop
 800d2e8:	e7fd      	b.n	800d2e6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2ea:	f001 fe65 	bl	800efb8 <vPortValidateInterruptPriority>
	__asm volatile
 800d2ee:	f3ef 8211 	mrs	r2, BASEPRI
 800d2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	61ba      	str	r2, [r7, #24]
 800d304:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d306:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d308:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d30e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d312:	2b00      	cmp	r3, #0
 800d314:	d02f      	beq.n	800d376 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d31c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d320:	68b9      	ldr	r1, [r7, #8]
 800d322:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d324:	f000 f89e 	bl	800d464 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32a:	1e5a      	subs	r2, r3, #1
 800d32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d330:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d338:	d112      	bne.n	800d360 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d016      	beq.n	800d370 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d344:	3310      	adds	r3, #16
 800d346:	4618      	mov	r0, r3
 800d348:	f000 fe22 	bl	800df90 <xTaskRemoveFromEventList>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00e      	beq.n	800d370 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00b      	beq.n	800d370 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	e007      	b.n	800d370 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d364:	3301      	adds	r3, #1
 800d366:	b2db      	uxtb	r3, r3
 800d368:	b25a      	sxtb	r2, r3
 800d36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d370:	2301      	movs	r3, #1
 800d372:	637b      	str	r3, [r7, #52]	@ 0x34
 800d374:	e001      	b.n	800d37a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d376:	2300      	movs	r3, #0
 800d378:	637b      	str	r3, [r7, #52]	@ 0x34
 800d37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d37c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	f383 8811 	msr	BASEPRI, r3
}
 800d384:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3738      	adds	r7, #56	@ 0x38
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d39c:	2300      	movs	r3, #0
 800d39e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10d      	bne.n	800d3ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d14d      	bne.n	800d452 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f000 ffcc 	bl	800e358 <xTaskPriorityDisinherit>
 800d3c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	609a      	str	r2, [r3, #8]
 800d3c8:	e043      	b.n	800d452 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d119      	bne.n	800d404 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6858      	ldr	r0, [r3, #4]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3d8:	461a      	mov	r2, r3
 800d3da:	68b9      	ldr	r1, [r7, #8]
 800d3dc:	f003 fb09 	bl	80109f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	685a      	ldr	r2, [r3, #4]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e8:	441a      	add	r2, r3
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	685a      	ldr	r2, [r3, #4]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d32b      	bcc.n	800d452 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	605a      	str	r2, [r3, #4]
 800d402:	e026      	b.n	800d452 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	68d8      	ldr	r0, [r3, #12]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d40c:	461a      	mov	r2, r3
 800d40e:	68b9      	ldr	r1, [r7, #8]
 800d410:	f003 faef 	bl	80109f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	68da      	ldr	r2, [r3, #12]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d41c:	425b      	negs	r3, r3
 800d41e:	441a      	add	r2, r3
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	68da      	ldr	r2, [r3, #12]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d207      	bcs.n	800d440 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	689a      	ldr	r2, [r3, #8]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d438:	425b      	negs	r3, r3
 800d43a:	441a      	add	r2, r3
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b02      	cmp	r3, #2
 800d444:	d105      	bne.n	800d452 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d002      	beq.n	800d452 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	3b01      	subs	r3, #1
 800d450:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	1c5a      	adds	r2, r3, #1
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d45a:	697b      	ldr	r3, [r7, #20]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d472:	2b00      	cmp	r3, #0
 800d474:	d018      	beq.n	800d4a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	68da      	ldr	r2, [r3, #12]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d47e:	441a      	add	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	68da      	ldr	r2, [r3, #12]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d303      	bcc.n	800d498 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68d9      	ldr	r1, [r3, #12]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	6838      	ldr	r0, [r7, #0]
 800d4a4:	f003 faa5 	bl	80109f2 <memcpy>
	}
}
 800d4a8:	bf00      	nop
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4b8:	f001 fc9e 	bl	800edf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4c4:	e011      	b.n	800d4ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d012      	beq.n	800d4f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	3324      	adds	r3, #36	@ 0x24
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f000 fd5c 	bl	800df90 <xTaskRemoveFromEventList>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4de:	f000 fe35 	bl	800e14c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4e2:	7bfb      	ldrb	r3, [r7, #15]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	dce9      	bgt.n	800d4c6 <prvUnlockQueue+0x16>
 800d4f2:	e000      	b.n	800d4f6 <prvUnlockQueue+0x46>
					break;
 800d4f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	22ff      	movs	r2, #255	@ 0xff
 800d4fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d4fe:	f001 fcad 	bl	800ee5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d502:	f001 fc79 	bl	800edf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d50c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d50e:	e011      	b.n	800d534 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d012      	beq.n	800d53e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	3310      	adds	r3, #16
 800d51c:	4618      	mov	r0, r3
 800d51e:	f000 fd37 	bl	800df90 <xTaskRemoveFromEventList>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d001      	beq.n	800d52c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d528:	f000 fe10 	bl	800e14c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d52c:	7bbb      	ldrb	r3, [r7, #14]
 800d52e:	3b01      	subs	r3, #1
 800d530:	b2db      	uxtb	r3, r3
 800d532:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	dce9      	bgt.n	800d510 <prvUnlockQueue+0x60>
 800d53c:	e000      	b.n	800d540 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d53e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	22ff      	movs	r2, #255	@ 0xff
 800d544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d548:	f001 fc88 	bl	800ee5c <vPortExitCritical>
}
 800d54c:	bf00      	nop
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d55c:	f001 fc4c 	bl	800edf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d564:	2b00      	cmp	r3, #0
 800d566:	d102      	bne.n	800d56e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d568:	2301      	movs	r3, #1
 800d56a:	60fb      	str	r3, [r7, #12]
 800d56c:	e001      	b.n	800d572 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d56e:	2300      	movs	r3, #0
 800d570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d572:	f001 fc73 	bl	800ee5c <vPortExitCritical>

	return xReturn;
 800d576:	68fb      	ldr	r3, [r7, #12]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d588:	f001 fc36 	bl	800edf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d594:	429a      	cmp	r2, r3
 800d596:	d102      	bne.n	800d59e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d598:	2301      	movs	r3, #1
 800d59a:	60fb      	str	r3, [r7, #12]
 800d59c:	e001      	b.n	800d5a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5a2:	f001 fc5b 	bl	800ee5c <vPortExitCritical>

	return xReturn;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60fb      	str	r3, [r7, #12]
 800d5be:	e014      	b.n	800d5ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d5c0:	4a0f      	ldr	r2, [pc, #60]	@ (800d600 <vQueueAddToRegistry+0x50>)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10b      	bne.n	800d5e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d5cc:	490c      	ldr	r1, [pc, #48]	@ (800d600 <vQueueAddToRegistry+0x50>)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5d6:	4a0a      	ldr	r2, [pc, #40]	@ (800d600 <vQueueAddToRegistry+0x50>)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	4413      	add	r3, r2
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5e2:	e006      	b.n	800d5f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	60fb      	str	r3, [r7, #12]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2b07      	cmp	r3, #7
 800d5ee:	d9e7      	bls.n	800d5c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5f0:	bf00      	nop
 800d5f2:	bf00      	nop
 800d5f4:	3714      	adds	r7, #20
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	200026f4 	.word	0x200026f4

0800d604 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d614:	f001 fbf0 	bl	800edf8 <vPortEnterCritical>
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d61e:	b25b      	sxtb	r3, r3
 800d620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d624:	d103      	bne.n	800d62e <vQueueWaitForMessageRestricted+0x2a>
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d634:	b25b      	sxtb	r3, r3
 800d636:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d63a:	d103      	bne.n	800d644 <vQueueWaitForMessageRestricted+0x40>
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2200      	movs	r2, #0
 800d640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d644:	f001 fc0a 	bl	800ee5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d106      	bne.n	800d65e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	3324      	adds	r3, #36	@ 0x24
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	68b9      	ldr	r1, [r7, #8]
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 fc6d 	bl	800df38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d65e:	6978      	ldr	r0, [r7, #20]
 800d660:	f7ff ff26 	bl	800d4b0 <prvUnlockQueue>
	}
 800d664:	bf00      	nop
 800d666:	3718      	adds	r7, #24
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08e      	sub	sp, #56	@ 0x38
 800d670:	af04      	add	r7, sp, #16
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
 800d678:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10b      	bne.n	800d698 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	623b      	str	r3, [r7, #32]
}
 800d692:	bf00      	nop
 800d694:	bf00      	nop
 800d696:	e7fd      	b.n	800d694 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10b      	bne.n	800d6b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	61fb      	str	r3, [r7, #28]
}
 800d6b0:	bf00      	nop
 800d6b2:	bf00      	nop
 800d6b4:	e7fd      	b.n	800d6b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d6b6:	23a8      	movs	r3, #168	@ 0xa8
 800d6b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	2ba8      	cmp	r3, #168	@ 0xa8
 800d6be:	d00b      	beq.n	800d6d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	61bb      	str	r3, [r7, #24]
}
 800d6d2:	bf00      	nop
 800d6d4:	bf00      	nop
 800d6d6:	e7fd      	b.n	800d6d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d01e      	beq.n	800d71e <xTaskCreateStatic+0xb2>
 800d6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d01b      	beq.n	800d71e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f2:	2202      	movs	r2, #2
 800d6f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	9303      	str	r3, [sp, #12]
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fe:	9302      	str	r3, [sp, #8]
 800d700:	f107 0314 	add.w	r3, r7, #20
 800d704:	9301      	str	r3, [sp, #4]
 800d706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	68b9      	ldr	r1, [r7, #8]
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 f851 	bl	800d7b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d716:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d718:	f000 f8f6 	bl	800d908 <prvAddNewTaskToReadyList>
 800d71c:	e001      	b.n	800d722 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d71e:	2300      	movs	r3, #0
 800d720:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d722:	697b      	ldr	r3, [r7, #20]
	}
 800d724:	4618      	mov	r0, r3
 800d726:	3728      	adds	r7, #40	@ 0x28
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b08c      	sub	sp, #48	@ 0x30
 800d730:	af04      	add	r7, sp, #16
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	603b      	str	r3, [r7, #0]
 800d738:	4613      	mov	r3, r2
 800d73a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d73c:	88fb      	ldrh	r3, [r7, #6]
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4618      	mov	r0, r3
 800d742:	f001 fc7b 	bl	800f03c <pvPortMalloc>
 800d746:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00e      	beq.n	800d76c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d74e:	20a8      	movs	r0, #168	@ 0xa8
 800d750:	f001 fc74 	bl	800f03c <pvPortMalloc>
 800d754:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d003      	beq.n	800d764 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	697a      	ldr	r2, [r7, #20]
 800d760:	631a      	str	r2, [r3, #48]	@ 0x30
 800d762:	e005      	b.n	800d770 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d764:	6978      	ldr	r0, [r7, #20]
 800d766:	f001 fd37 	bl	800f1d8 <vPortFree>
 800d76a:	e001      	b.n	800d770 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d76c:	2300      	movs	r3, #0
 800d76e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d017      	beq.n	800d7a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d77e:	88fa      	ldrh	r2, [r7, #6]
 800d780:	2300      	movs	r3, #0
 800d782:	9303      	str	r3, [sp, #12]
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	9302      	str	r3, [sp, #8]
 800d788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78a:	9301      	str	r3, [sp, #4]
 800d78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	68b9      	ldr	r1, [r7, #8]
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f000 f80f 	bl	800d7b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d79a:	69f8      	ldr	r0, [r7, #28]
 800d79c:	f000 f8b4 	bl	800d908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	61bb      	str	r3, [r7, #24]
 800d7a4:	e002      	b.n	800d7ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d7a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d7aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d7ac:	69bb      	ldr	r3, [r7, #24]
	}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3720      	adds	r7, #32
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
	...

0800d7b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	607a      	str	r2, [r7, #4]
 800d7c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	21a5      	movs	r1, #165	@ 0xa5
 800d7d2:	f003 f87f 	bl	80108d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	f023 0307 	bic.w	r3, r3, #7
 800d7ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	f003 0307 	and.w	r3, r3, #7
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00b      	beq.n	800d812 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	617b      	str	r3, [r7, #20]
}
 800d80c:	bf00      	nop
 800d80e:	bf00      	nop
 800d810:	e7fd      	b.n	800d80e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d01f      	beq.n	800d858 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d818:	2300      	movs	r3, #0
 800d81a:	61fb      	str	r3, [r7, #28]
 800d81c:	e012      	b.n	800d844 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	4413      	add	r3, r2
 800d824:	7819      	ldrb	r1, [r3, #0]
 800d826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	4413      	add	r3, r2
 800d82c:	3334      	adds	r3, #52	@ 0x34
 800d82e:	460a      	mov	r2, r1
 800d830:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	4413      	add	r3, r2
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d006      	beq.n	800d84c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	3301      	adds	r3, #1
 800d842:	61fb      	str	r3, [r7, #28]
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	2b0f      	cmp	r3, #15
 800d848:	d9e9      	bls.n	800d81e <prvInitialiseNewTask+0x66>
 800d84a:	e000      	b.n	800d84e <prvInitialiseNewTask+0x96>
			{
				break;
 800d84c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d850:	2200      	movs	r2, #0
 800d852:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d856:	e003      	b.n	800d860 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85a:	2200      	movs	r2, #0
 800d85c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d862:	2b37      	cmp	r3, #55	@ 0x37
 800d864:	d901      	bls.n	800d86a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d866:	2337      	movs	r3, #55	@ 0x37
 800d868:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d86e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d874:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d878:	2200      	movs	r2, #0
 800d87a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87e:	3304      	adds	r3, #4
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff f8a7 	bl	800c9d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d888:	3318      	adds	r3, #24
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff f8a2 	bl	800c9d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d894:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d898:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b8:	3354      	adds	r3, #84	@ 0x54
 800d8ba:	224c      	movs	r2, #76	@ 0x4c
 800d8bc:	2100      	movs	r1, #0
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f003 f808 	bl	80108d4 <memset>
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c6:	4a0d      	ldr	r2, [pc, #52]	@ (800d8fc <prvInitialiseNewTask+0x144>)
 800d8c8:	659a      	str	r2, [r3, #88]	@ 0x58
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8cc:	4a0c      	ldr	r2, [pc, #48]	@ (800d900 <prvInitialiseNewTask+0x148>)
 800d8ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d2:	4a0c      	ldr	r2, [pc, #48]	@ (800d904 <prvInitialiseNewTask+0x14c>)
 800d8d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8d6:	683a      	ldr	r2, [r7, #0]
 800d8d8:	68f9      	ldr	r1, [r7, #12]
 800d8da:	69b8      	ldr	r0, [r7, #24]
 800d8dc:	f001 f95a 	bl	800eb94 <pxPortInitialiseStack>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8f2:	bf00      	nop
 800d8f4:	3720      	adds	r7, #32
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	200102d4 	.word	0x200102d4
 800d900:	2001033c 	.word	0x2001033c
 800d904:	200103a4 	.word	0x200103a4

0800d908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d910:	f001 fa72 	bl	800edf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d914:	4b2d      	ldr	r3, [pc, #180]	@ (800d9cc <prvAddNewTaskToReadyList+0xc4>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	3301      	adds	r3, #1
 800d91a:	4a2c      	ldr	r2, [pc, #176]	@ (800d9cc <prvAddNewTaskToReadyList+0xc4>)
 800d91c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d91e:	4b2c      	ldr	r3, [pc, #176]	@ (800d9d0 <prvAddNewTaskToReadyList+0xc8>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d109      	bne.n	800d93a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d926:	4a2a      	ldr	r2, [pc, #168]	@ (800d9d0 <prvAddNewTaskToReadyList+0xc8>)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d92c:	4b27      	ldr	r3, [pc, #156]	@ (800d9cc <prvAddNewTaskToReadyList+0xc4>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d110      	bne.n	800d956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d934:	f000 fc2e 	bl	800e194 <prvInitialiseTaskLists>
 800d938:	e00d      	b.n	800d956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d93a:	4b26      	ldr	r3, [pc, #152]	@ (800d9d4 <prvAddNewTaskToReadyList+0xcc>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d109      	bne.n	800d956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d942:	4b23      	ldr	r3, [pc, #140]	@ (800d9d0 <prvAddNewTaskToReadyList+0xc8>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d802      	bhi.n	800d956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d950:	4a1f      	ldr	r2, [pc, #124]	@ (800d9d0 <prvAddNewTaskToReadyList+0xc8>)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d956:	4b20      	ldr	r3, [pc, #128]	@ (800d9d8 <prvAddNewTaskToReadyList+0xd0>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3301      	adds	r3, #1
 800d95c:	4a1e      	ldr	r2, [pc, #120]	@ (800d9d8 <prvAddNewTaskToReadyList+0xd0>)
 800d95e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d960:	4b1d      	ldr	r3, [pc, #116]	@ (800d9d8 <prvAddNewTaskToReadyList+0xd0>)
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96c:	4b1b      	ldr	r3, [pc, #108]	@ (800d9dc <prvAddNewTaskToReadyList+0xd4>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d903      	bls.n	800d97c <prvAddNewTaskToReadyList+0x74>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d978:	4a18      	ldr	r2, [pc, #96]	@ (800d9dc <prvAddNewTaskToReadyList+0xd4>)
 800d97a:	6013      	str	r3, [r2, #0]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d980:	4613      	mov	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4a15      	ldr	r2, [pc, #84]	@ (800d9e0 <prvAddNewTaskToReadyList+0xd8>)
 800d98a:	441a      	add	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3304      	adds	r3, #4
 800d990:	4619      	mov	r1, r3
 800d992:	4610      	mov	r0, r2
 800d994:	f7ff f82b 	bl	800c9ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d998:	f001 fa60 	bl	800ee5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d99c:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d4 <prvAddNewTaskToReadyList+0xcc>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d00e      	beq.n	800d9c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d0 <prvAddNewTaskToReadyList+0xc8>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d207      	bcs.n	800d9c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9b2:	4b0c      	ldr	r3, [pc, #48]	@ (800d9e4 <prvAddNewTaskToReadyList+0xdc>)
 800d9b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9b8:	601a      	str	r2, [r3, #0]
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9c2:	bf00      	nop
 800d9c4:	3708      	adds	r7, #8
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	20002c08 	.word	0x20002c08
 800d9d0:	20002734 	.word	0x20002734
 800d9d4:	20002c14 	.word	0x20002c14
 800d9d8:	20002c24 	.word	0x20002c24
 800d9dc:	20002c10 	.word	0x20002c10
 800d9e0:	20002738 	.word	0x20002738
 800d9e4:	e000ed04 	.word	0xe000ed04

0800d9e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d018      	beq.n	800da2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d9fa:	4b14      	ldr	r3, [pc, #80]	@ (800da4c <vTaskDelay+0x64>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00b      	beq.n	800da1a <vTaskDelay+0x32>
	__asm volatile
 800da02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da06:	f383 8811 	msr	BASEPRI, r3
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	60bb      	str	r3, [r7, #8]
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop
 800da18:	e7fd      	b.n	800da16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da1a:	f000 f88b 	bl	800db34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da1e:	2100      	movs	r1, #0
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 fd09 	bl	800e438 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da26:	f000 f893 	bl	800db50 <xTaskResumeAll>
 800da2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d107      	bne.n	800da42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800da32:	4b07      	ldr	r3, [pc, #28]	@ (800da50 <vTaskDelay+0x68>)
 800da34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da42:	bf00      	nop
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	20002c30 	.word	0x20002c30
 800da50:	e000ed04 	.word	0xe000ed04

0800da54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b08a      	sub	sp, #40	@ 0x28
 800da58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da5a:	2300      	movs	r3, #0
 800da5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da5e:	2300      	movs	r3, #0
 800da60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da62:	463a      	mov	r2, r7
 800da64:	1d39      	adds	r1, r7, #4
 800da66:	f107 0308 	add.w	r3, r7, #8
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fe ff5e 	bl	800c92c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da70:	6839      	ldr	r1, [r7, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	9202      	str	r2, [sp, #8]
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	2300      	movs	r3, #0
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	2300      	movs	r3, #0
 800da80:	460a      	mov	r2, r1
 800da82:	4924      	ldr	r1, [pc, #144]	@ (800db14 <vTaskStartScheduler+0xc0>)
 800da84:	4824      	ldr	r0, [pc, #144]	@ (800db18 <vTaskStartScheduler+0xc4>)
 800da86:	f7ff fdf1 	bl	800d66c <xTaskCreateStatic>
 800da8a:	4603      	mov	r3, r0
 800da8c:	4a23      	ldr	r2, [pc, #140]	@ (800db1c <vTaskStartScheduler+0xc8>)
 800da8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da90:	4b22      	ldr	r3, [pc, #136]	@ (800db1c <vTaskStartScheduler+0xc8>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da98:	2301      	movs	r3, #1
 800da9a:	617b      	str	r3, [r7, #20]
 800da9c:	e001      	b.n	800daa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d102      	bne.n	800daae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800daa8:	f000 fd1a 	bl	800e4e0 <xTimerCreateTimerTask>
 800daac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d11b      	bne.n	800daec <vTaskStartScheduler+0x98>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	613b      	str	r3, [r7, #16]
}
 800dac6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dac8:	4b15      	ldr	r3, [pc, #84]	@ (800db20 <vTaskStartScheduler+0xcc>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	3354      	adds	r3, #84	@ 0x54
 800dace:	4a15      	ldr	r2, [pc, #84]	@ (800db24 <vTaskStartScheduler+0xd0>)
 800dad0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dad2:	4b15      	ldr	r3, [pc, #84]	@ (800db28 <vTaskStartScheduler+0xd4>)
 800dad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dad8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dada:	4b14      	ldr	r3, [pc, #80]	@ (800db2c <vTaskStartScheduler+0xd8>)
 800dadc:	2201      	movs	r2, #1
 800dade:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dae0:	4b13      	ldr	r3, [pc, #76]	@ (800db30 <vTaskStartScheduler+0xdc>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dae6:	f001 f8e3 	bl	800ecb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800daea:	e00f      	b.n	800db0c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800daf2:	d10b      	bne.n	800db0c <vTaskStartScheduler+0xb8>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	60fb      	str	r3, [r7, #12]
}
 800db06:	bf00      	nop
 800db08:	bf00      	nop
 800db0a:	e7fd      	b.n	800db08 <vTaskStartScheduler+0xb4>
}
 800db0c:	bf00      	nop
 800db0e:	3718      	adds	r7, #24
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	08012e58 	.word	0x08012e58
 800db18:	0800e165 	.word	0x0800e165
 800db1c:	20002c2c 	.word	0x20002c2c
 800db20:	20002734 	.word	0x20002734
 800db24:	20000194 	.word	0x20000194
 800db28:	20002c28 	.word	0x20002c28
 800db2c:	20002c14 	.word	0x20002c14
 800db30:	20002c0c 	.word	0x20002c0c

0800db34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db34:	b480      	push	{r7}
 800db36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800db38:	4b04      	ldr	r3, [pc, #16]	@ (800db4c <vTaskSuspendAll+0x18>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	3301      	adds	r3, #1
 800db3e:	4a03      	ldr	r2, [pc, #12]	@ (800db4c <vTaskSuspendAll+0x18>)
 800db40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800db42:	bf00      	nop
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	20002c30 	.word	0x20002c30

0800db50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db56:	2300      	movs	r3, #0
 800db58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db5a:	2300      	movs	r3, #0
 800db5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db5e:	4b42      	ldr	r3, [pc, #264]	@ (800dc68 <xTaskResumeAll+0x118>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10b      	bne.n	800db7e <xTaskResumeAll+0x2e>
	__asm volatile
 800db66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db6a:	f383 8811 	msr	BASEPRI, r3
 800db6e:	f3bf 8f6f 	isb	sy
 800db72:	f3bf 8f4f 	dsb	sy
 800db76:	603b      	str	r3, [r7, #0]
}
 800db78:	bf00      	nop
 800db7a:	bf00      	nop
 800db7c:	e7fd      	b.n	800db7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db7e:	f001 f93b 	bl	800edf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db82:	4b39      	ldr	r3, [pc, #228]	@ (800dc68 <xTaskResumeAll+0x118>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	3b01      	subs	r3, #1
 800db88:	4a37      	ldr	r2, [pc, #220]	@ (800dc68 <xTaskResumeAll+0x118>)
 800db8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db8c:	4b36      	ldr	r3, [pc, #216]	@ (800dc68 <xTaskResumeAll+0x118>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d162      	bne.n	800dc5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db94:	4b35      	ldr	r3, [pc, #212]	@ (800dc6c <xTaskResumeAll+0x11c>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d05e      	beq.n	800dc5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db9c:	e02f      	b.n	800dbfe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9e:	4b34      	ldr	r3, [pc, #208]	@ (800dc70 <xTaskResumeAll+0x120>)
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	3318      	adds	r3, #24
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fe ff7c 	bl	800caa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3304      	adds	r3, #4
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7fe ff77 	bl	800caa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbbe:	4b2d      	ldr	r3, [pc, #180]	@ (800dc74 <xTaskResumeAll+0x124>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d903      	bls.n	800dbce <xTaskResumeAll+0x7e>
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbca:	4a2a      	ldr	r2, [pc, #168]	@ (800dc74 <xTaskResumeAll+0x124>)
 800dbcc:	6013      	str	r3, [r2, #0]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	4413      	add	r3, r2
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4a27      	ldr	r2, [pc, #156]	@ (800dc78 <xTaskResumeAll+0x128>)
 800dbdc:	441a      	add	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	f7fe ff02 	bl	800c9ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbee:	4b23      	ldr	r3, [pc, #140]	@ (800dc7c <xTaskResumeAll+0x12c>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d302      	bcc.n	800dbfe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dbf8:	4b21      	ldr	r3, [pc, #132]	@ (800dc80 <xTaskResumeAll+0x130>)
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbfe:	4b1c      	ldr	r3, [pc, #112]	@ (800dc70 <xTaskResumeAll+0x120>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1cb      	bne.n	800db9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d001      	beq.n	800dc10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc0c:	f000 fb66 	bl	800e2dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc10:	4b1c      	ldr	r3, [pc, #112]	@ (800dc84 <xTaskResumeAll+0x134>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d010      	beq.n	800dc3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc1c:	f000 f846 	bl	800dcac <xTaskIncrementTick>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d002      	beq.n	800dc2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dc26:	4b16      	ldr	r3, [pc, #88]	@ (800dc80 <xTaskResumeAll+0x130>)
 800dc28:	2201      	movs	r2, #1
 800dc2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1f1      	bne.n	800dc1c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dc38:	4b12      	ldr	r3, [pc, #72]	@ (800dc84 <xTaskResumeAll+0x134>)
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc3e:	4b10      	ldr	r3, [pc, #64]	@ (800dc80 <xTaskResumeAll+0x130>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d009      	beq.n	800dc5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc46:	2301      	movs	r3, #1
 800dc48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800dc88 <xTaskResumeAll+0x138>)
 800dc4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc50:	601a      	str	r2, [r3, #0]
 800dc52:	f3bf 8f4f 	dsb	sy
 800dc56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc5a:	f001 f8ff 	bl	800ee5c <vPortExitCritical>

	return xAlreadyYielded;
 800dc5e:	68bb      	ldr	r3, [r7, #8]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	20002c30 	.word	0x20002c30
 800dc6c:	20002c08 	.word	0x20002c08
 800dc70:	20002bc8 	.word	0x20002bc8
 800dc74:	20002c10 	.word	0x20002c10
 800dc78:	20002738 	.word	0x20002738
 800dc7c:	20002734 	.word	0x20002734
 800dc80:	20002c1c 	.word	0x20002c1c
 800dc84:	20002c18 	.word	0x20002c18
 800dc88:	e000ed04 	.word	0xe000ed04

0800dc8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc92:	4b05      	ldr	r3, [pc, #20]	@ (800dca8 <xTaskGetTickCount+0x1c>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc98:	687b      	ldr	r3, [r7, #4]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	370c      	adds	r7, #12
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	20002c0c 	.word	0x20002c0c

0800dcac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b086      	sub	sp, #24
 800dcb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcb6:	4b4f      	ldr	r3, [pc, #316]	@ (800ddf4 <xTaskIncrementTick+0x148>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f040 8090 	bne.w	800dde0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dcc0:	4b4d      	ldr	r3, [pc, #308]	@ (800ddf8 <xTaskIncrementTick+0x14c>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dcc8:	4a4b      	ldr	r2, [pc, #300]	@ (800ddf8 <xTaskIncrementTick+0x14c>)
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d121      	bne.n	800dd18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dcd4:	4b49      	ldr	r3, [pc, #292]	@ (800ddfc <xTaskIncrementTick+0x150>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00b      	beq.n	800dcf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	603b      	str	r3, [r7, #0]
}
 800dcf0:	bf00      	nop
 800dcf2:	bf00      	nop
 800dcf4:	e7fd      	b.n	800dcf2 <xTaskIncrementTick+0x46>
 800dcf6:	4b41      	ldr	r3, [pc, #260]	@ (800ddfc <xTaskIncrementTick+0x150>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	60fb      	str	r3, [r7, #12]
 800dcfc:	4b40      	ldr	r3, [pc, #256]	@ (800de00 <xTaskIncrementTick+0x154>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a3e      	ldr	r2, [pc, #248]	@ (800ddfc <xTaskIncrementTick+0x150>)
 800dd02:	6013      	str	r3, [r2, #0]
 800dd04:	4a3e      	ldr	r2, [pc, #248]	@ (800de00 <xTaskIncrementTick+0x154>)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	6013      	str	r3, [r2, #0]
 800dd0a:	4b3e      	ldr	r3, [pc, #248]	@ (800de04 <xTaskIncrementTick+0x158>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	4a3c      	ldr	r2, [pc, #240]	@ (800de04 <xTaskIncrementTick+0x158>)
 800dd12:	6013      	str	r3, [r2, #0]
 800dd14:	f000 fae2 	bl	800e2dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd18:	4b3b      	ldr	r3, [pc, #236]	@ (800de08 <xTaskIncrementTick+0x15c>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	693a      	ldr	r2, [r7, #16]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d349      	bcc.n	800ddb6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd22:	4b36      	ldr	r3, [pc, #216]	@ (800ddfc <xTaskIncrementTick+0x150>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d104      	bne.n	800dd36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd2c:	4b36      	ldr	r3, [pc, #216]	@ (800de08 <xTaskIncrementTick+0x15c>)
 800dd2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd32:	601a      	str	r2, [r3, #0]
					break;
 800dd34:	e03f      	b.n	800ddb6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd36:	4b31      	ldr	r3, [pc, #196]	@ (800ddfc <xTaskIncrementTick+0x150>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd46:	693a      	ldr	r2, [r7, #16]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d203      	bcs.n	800dd56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd4e:	4a2e      	ldr	r2, [pc, #184]	@ (800de08 <xTaskIncrementTick+0x15c>)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd54:	e02f      	b.n	800ddb6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	3304      	adds	r3, #4
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fe fea4 	bl	800caa8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d004      	beq.n	800dd72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	3318      	adds	r3, #24
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7fe fe9b 	bl	800caa8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd76:	4b25      	ldr	r3, [pc, #148]	@ (800de0c <xTaskIncrementTick+0x160>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d903      	bls.n	800dd86 <xTaskIncrementTick+0xda>
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd82:	4a22      	ldr	r2, [pc, #136]	@ (800de0c <xTaskIncrementTick+0x160>)
 800dd84:	6013      	str	r3, [r2, #0]
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	4413      	add	r3, r2
 800dd90:	009b      	lsls	r3, r3, #2
 800dd92:	4a1f      	ldr	r2, [pc, #124]	@ (800de10 <xTaskIncrementTick+0x164>)
 800dd94:	441a      	add	r2, r3
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	3304      	adds	r3, #4
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	f7fe fe26 	bl	800c9ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dda6:	4b1b      	ldr	r3, [pc, #108]	@ (800de14 <xTaskIncrementTick+0x168>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d3b8      	bcc.n	800dd22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddb4:	e7b5      	b.n	800dd22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddb6:	4b17      	ldr	r3, [pc, #92]	@ (800de14 <xTaskIncrementTick+0x168>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddbc:	4914      	ldr	r1, [pc, #80]	@ (800de10 <xTaskIncrementTick+0x164>)
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4413      	add	r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	440b      	add	r3, r1
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d901      	bls.n	800ddd2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ddd2:	4b11      	ldr	r3, [pc, #68]	@ (800de18 <xTaskIncrementTick+0x16c>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d007      	beq.n	800ddea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ddda:	2301      	movs	r3, #1
 800dddc:	617b      	str	r3, [r7, #20]
 800ddde:	e004      	b.n	800ddea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dde0:	4b0e      	ldr	r3, [pc, #56]	@ (800de1c <xTaskIncrementTick+0x170>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	3301      	adds	r3, #1
 800dde6:	4a0d      	ldr	r2, [pc, #52]	@ (800de1c <xTaskIncrementTick+0x170>)
 800dde8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ddea:	697b      	ldr	r3, [r7, #20]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3718      	adds	r7, #24
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	20002c30 	.word	0x20002c30
 800ddf8:	20002c0c 	.word	0x20002c0c
 800ddfc:	20002bc0 	.word	0x20002bc0
 800de00:	20002bc4 	.word	0x20002bc4
 800de04:	20002c20 	.word	0x20002c20
 800de08:	20002c28 	.word	0x20002c28
 800de0c:	20002c10 	.word	0x20002c10
 800de10:	20002738 	.word	0x20002738
 800de14:	20002734 	.word	0x20002734
 800de18:	20002c1c 	.word	0x20002c1c
 800de1c:	20002c18 	.word	0x20002c18

0800de20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de26:	4b2b      	ldr	r3, [pc, #172]	@ (800ded4 <vTaskSwitchContext+0xb4>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d003      	beq.n	800de36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de2e:	4b2a      	ldr	r3, [pc, #168]	@ (800ded8 <vTaskSwitchContext+0xb8>)
 800de30:	2201      	movs	r2, #1
 800de32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de34:	e047      	b.n	800dec6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800de36:	4b28      	ldr	r3, [pc, #160]	@ (800ded8 <vTaskSwitchContext+0xb8>)
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de3c:	4b27      	ldr	r3, [pc, #156]	@ (800dedc <vTaskSwitchContext+0xbc>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	60fb      	str	r3, [r7, #12]
 800de42:	e011      	b.n	800de68 <vTaskSwitchContext+0x48>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10b      	bne.n	800de62 <vTaskSwitchContext+0x42>
	__asm volatile
 800de4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4e:	f383 8811 	msr	BASEPRI, r3
 800de52:	f3bf 8f6f 	isb	sy
 800de56:	f3bf 8f4f 	dsb	sy
 800de5a:	607b      	str	r3, [r7, #4]
}
 800de5c:	bf00      	nop
 800de5e:	bf00      	nop
 800de60:	e7fd      	b.n	800de5e <vTaskSwitchContext+0x3e>
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	3b01      	subs	r3, #1
 800de66:	60fb      	str	r3, [r7, #12]
 800de68:	491d      	ldr	r1, [pc, #116]	@ (800dee0 <vTaskSwitchContext+0xc0>)
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	4613      	mov	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4413      	add	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	440b      	add	r3, r1
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d0e3      	beq.n	800de44 <vTaskSwitchContext+0x24>
 800de7c:	68fa      	ldr	r2, [r7, #12]
 800de7e:	4613      	mov	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4a16      	ldr	r2, [pc, #88]	@ (800dee0 <vTaskSwitchContext+0xc0>)
 800de88:	4413      	add	r3, r2
 800de8a:	60bb      	str	r3, [r7, #8]
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	605a      	str	r2, [r3, #4]
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	685a      	ldr	r2, [r3, #4]
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	3308      	adds	r3, #8
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d104      	bne.n	800deac <vTaskSwitchContext+0x8c>
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	685a      	ldr	r2, [r3, #4]
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	605a      	str	r2, [r3, #4]
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	4a0c      	ldr	r2, [pc, #48]	@ (800dee4 <vTaskSwitchContext+0xc4>)
 800deb4:	6013      	str	r3, [r2, #0]
 800deb6:	4a09      	ldr	r2, [pc, #36]	@ (800dedc <vTaskSwitchContext+0xbc>)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800debc:	4b09      	ldr	r3, [pc, #36]	@ (800dee4 <vTaskSwitchContext+0xc4>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	3354      	adds	r3, #84	@ 0x54
 800dec2:	4a09      	ldr	r2, [pc, #36]	@ (800dee8 <vTaskSwitchContext+0xc8>)
 800dec4:	6013      	str	r3, [r2, #0]
}
 800dec6:	bf00      	nop
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	20002c30 	.word	0x20002c30
 800ded8:	20002c1c 	.word	0x20002c1c
 800dedc:	20002c10 	.word	0x20002c10
 800dee0:	20002738 	.word	0x20002738
 800dee4:	20002734 	.word	0x20002734
 800dee8:	20000194 	.word	0x20000194

0800deec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10b      	bne.n	800df14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800defc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df00:	f383 8811 	msr	BASEPRI, r3
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	60fb      	str	r3, [r7, #12]
}
 800df0e:	bf00      	nop
 800df10:	bf00      	nop
 800df12:	e7fd      	b.n	800df10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df14:	4b07      	ldr	r3, [pc, #28]	@ (800df34 <vTaskPlaceOnEventList+0x48>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	3318      	adds	r3, #24
 800df1a:	4619      	mov	r1, r3
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f7fe fd8a 	bl	800ca36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df22:	2101      	movs	r1, #1
 800df24:	6838      	ldr	r0, [r7, #0]
 800df26:	f000 fa87 	bl	800e438 <prvAddCurrentTaskToDelayedList>
}
 800df2a:	bf00      	nop
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20002734 	.word	0x20002734

0800df38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d10b      	bne.n	800df62 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800df4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	617b      	str	r3, [r7, #20]
}
 800df5c:	bf00      	nop
 800df5e:	bf00      	nop
 800df60:	e7fd      	b.n	800df5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df62:	4b0a      	ldr	r3, [pc, #40]	@ (800df8c <vTaskPlaceOnEventListRestricted+0x54>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	3318      	adds	r3, #24
 800df68:	4619      	mov	r1, r3
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f7fe fd3f 	bl	800c9ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d002      	beq.n	800df7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800df76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800df7c:	6879      	ldr	r1, [r7, #4]
 800df7e:	68b8      	ldr	r0, [r7, #8]
 800df80:	f000 fa5a 	bl	800e438 <prvAddCurrentTaskToDelayedList>
	}
 800df84:	bf00      	nop
 800df86:	3718      	adds	r7, #24
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	20002734 	.word	0x20002734

0800df90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d10b      	bne.n	800dfbe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800dfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfaa:	f383 8811 	msr	BASEPRI, r3
 800dfae:	f3bf 8f6f 	isb	sy
 800dfb2:	f3bf 8f4f 	dsb	sy
 800dfb6:	60fb      	str	r3, [r7, #12]
}
 800dfb8:	bf00      	nop
 800dfba:	bf00      	nop
 800dfbc:	e7fd      	b.n	800dfba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	3318      	adds	r3, #24
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fe fd70 	bl	800caa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfc8:	4b1d      	ldr	r3, [pc, #116]	@ (800e040 <xTaskRemoveFromEventList+0xb0>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d11d      	bne.n	800e00c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7fe fd67 	bl	800caa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfde:	4b19      	ldr	r3, [pc, #100]	@ (800e044 <xTaskRemoveFromEventList+0xb4>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d903      	bls.n	800dfee <xTaskRemoveFromEventList+0x5e>
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfea:	4a16      	ldr	r2, [pc, #88]	@ (800e044 <xTaskRemoveFromEventList+0xb4>)
 800dfec:	6013      	str	r3, [r2, #0]
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dff2:	4613      	mov	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4413      	add	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	4a13      	ldr	r2, [pc, #76]	@ (800e048 <xTaskRemoveFromEventList+0xb8>)
 800dffc:	441a      	add	r2, r3
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	3304      	adds	r3, #4
 800e002:	4619      	mov	r1, r3
 800e004:	4610      	mov	r0, r2
 800e006:	f7fe fcf2 	bl	800c9ee <vListInsertEnd>
 800e00a:	e005      	b.n	800e018 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	3318      	adds	r3, #24
 800e010:	4619      	mov	r1, r3
 800e012:	480e      	ldr	r0, [pc, #56]	@ (800e04c <xTaskRemoveFromEventList+0xbc>)
 800e014:	f7fe fceb 	bl	800c9ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e01c:	4b0c      	ldr	r3, [pc, #48]	@ (800e050 <xTaskRemoveFromEventList+0xc0>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e022:	429a      	cmp	r2, r3
 800e024:	d905      	bls.n	800e032 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e026:	2301      	movs	r3, #1
 800e028:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e02a:	4b0a      	ldr	r3, [pc, #40]	@ (800e054 <xTaskRemoveFromEventList+0xc4>)
 800e02c:	2201      	movs	r2, #1
 800e02e:	601a      	str	r2, [r3, #0]
 800e030:	e001      	b.n	800e036 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e032:	2300      	movs	r3, #0
 800e034:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e036:	697b      	ldr	r3, [r7, #20]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3718      	adds	r7, #24
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	20002c30 	.word	0x20002c30
 800e044:	20002c10 	.word	0x20002c10
 800e048:	20002738 	.word	0x20002738
 800e04c:	20002bc8 	.word	0x20002bc8
 800e050:	20002734 	.word	0x20002734
 800e054:	20002c1c 	.word	0x20002c1c

0800e058 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e060:	4b06      	ldr	r3, [pc, #24]	@ (800e07c <vTaskInternalSetTimeOutState+0x24>)
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e068:	4b05      	ldr	r3, [pc, #20]	@ (800e080 <vTaskInternalSetTimeOutState+0x28>)
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	605a      	str	r2, [r3, #4]
}
 800e070:	bf00      	nop
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	20002c20 	.word	0x20002c20
 800e080:	20002c0c 	.word	0x20002c0c

0800e084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10b      	bne.n	800e0ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e098:	f383 8811 	msr	BASEPRI, r3
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	613b      	str	r3, [r7, #16]
}
 800e0a6:	bf00      	nop
 800e0a8:	bf00      	nop
 800e0aa:	e7fd      	b.n	800e0a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10b      	bne.n	800e0ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b6:	f383 8811 	msr	BASEPRI, r3
 800e0ba:	f3bf 8f6f 	isb	sy
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	60fb      	str	r3, [r7, #12]
}
 800e0c4:	bf00      	nop
 800e0c6:	bf00      	nop
 800e0c8:	e7fd      	b.n	800e0c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e0ca:	f000 fe95 	bl	800edf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e0ce:	4b1d      	ldr	r3, [pc, #116]	@ (800e144 <xTaskCheckForTimeOut+0xc0>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	69ba      	ldr	r2, [r7, #24]
 800e0da:	1ad3      	subs	r3, r2, r3
 800e0dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e0e6:	d102      	bne.n	800e0ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	61fb      	str	r3, [r7, #28]
 800e0ec:	e023      	b.n	800e136 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	4b15      	ldr	r3, [pc, #84]	@ (800e148 <xTaskCheckForTimeOut+0xc4>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d007      	beq.n	800e10a <xTaskCheckForTimeOut+0x86>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	69ba      	ldr	r2, [r7, #24]
 800e100:	429a      	cmp	r2, r3
 800e102:	d302      	bcc.n	800e10a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e104:	2301      	movs	r3, #1
 800e106:	61fb      	str	r3, [r7, #28]
 800e108:	e015      	b.n	800e136 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	697a      	ldr	r2, [r7, #20]
 800e110:	429a      	cmp	r2, r3
 800e112:	d20b      	bcs.n	800e12c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	1ad2      	subs	r2, r2, r3
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7ff ff99 	bl	800e058 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e126:	2300      	movs	r3, #0
 800e128:	61fb      	str	r3, [r7, #28]
 800e12a:	e004      	b.n	800e136 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	2200      	movs	r2, #0
 800e130:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e132:	2301      	movs	r3, #1
 800e134:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e136:	f000 fe91 	bl	800ee5c <vPortExitCritical>

	return xReturn;
 800e13a:	69fb      	ldr	r3, [r7, #28]
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3720      	adds	r7, #32
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	20002c0c 	.word	0x20002c0c
 800e148:	20002c20 	.word	0x20002c20

0800e14c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e14c:	b480      	push	{r7}
 800e14e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e150:	4b03      	ldr	r3, [pc, #12]	@ (800e160 <vTaskMissedYield+0x14>)
 800e152:	2201      	movs	r2, #1
 800e154:	601a      	str	r2, [r3, #0]
}
 800e156:	bf00      	nop
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr
 800e160:	20002c1c 	.word	0x20002c1c

0800e164 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e16c:	f000 f852 	bl	800e214 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e170:	4b06      	ldr	r3, [pc, #24]	@ (800e18c <prvIdleTask+0x28>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b01      	cmp	r3, #1
 800e176:	d9f9      	bls.n	800e16c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e178:	4b05      	ldr	r3, [pc, #20]	@ (800e190 <prvIdleTask+0x2c>)
 800e17a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e17e:	601a      	str	r2, [r3, #0]
 800e180:	f3bf 8f4f 	dsb	sy
 800e184:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e188:	e7f0      	b.n	800e16c <prvIdleTask+0x8>
 800e18a:	bf00      	nop
 800e18c:	20002738 	.word	0x20002738
 800e190:	e000ed04 	.word	0xe000ed04

0800e194 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e19a:	2300      	movs	r3, #0
 800e19c:	607b      	str	r3, [r7, #4]
 800e19e:	e00c      	b.n	800e1ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4413      	add	r3, r2
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	4a12      	ldr	r2, [pc, #72]	@ (800e1f4 <prvInitialiseTaskLists+0x60>)
 800e1ac:	4413      	add	r3, r2
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fe fbf0 	bl	800c994 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	607b      	str	r3, [r7, #4]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b37      	cmp	r3, #55	@ 0x37
 800e1be:	d9ef      	bls.n	800e1a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e1c0:	480d      	ldr	r0, [pc, #52]	@ (800e1f8 <prvInitialiseTaskLists+0x64>)
 800e1c2:	f7fe fbe7 	bl	800c994 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e1c6:	480d      	ldr	r0, [pc, #52]	@ (800e1fc <prvInitialiseTaskLists+0x68>)
 800e1c8:	f7fe fbe4 	bl	800c994 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e1cc:	480c      	ldr	r0, [pc, #48]	@ (800e200 <prvInitialiseTaskLists+0x6c>)
 800e1ce:	f7fe fbe1 	bl	800c994 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e1d2:	480c      	ldr	r0, [pc, #48]	@ (800e204 <prvInitialiseTaskLists+0x70>)
 800e1d4:	f7fe fbde 	bl	800c994 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e1d8:	480b      	ldr	r0, [pc, #44]	@ (800e208 <prvInitialiseTaskLists+0x74>)
 800e1da:	f7fe fbdb 	bl	800c994 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e1de:	4b0b      	ldr	r3, [pc, #44]	@ (800e20c <prvInitialiseTaskLists+0x78>)
 800e1e0:	4a05      	ldr	r2, [pc, #20]	@ (800e1f8 <prvInitialiseTaskLists+0x64>)
 800e1e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e1e4:	4b0a      	ldr	r3, [pc, #40]	@ (800e210 <prvInitialiseTaskLists+0x7c>)
 800e1e6:	4a05      	ldr	r2, [pc, #20]	@ (800e1fc <prvInitialiseTaskLists+0x68>)
 800e1e8:	601a      	str	r2, [r3, #0]
}
 800e1ea:	bf00      	nop
 800e1ec:	3708      	adds	r7, #8
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	20002738 	.word	0x20002738
 800e1f8:	20002b98 	.word	0x20002b98
 800e1fc:	20002bac 	.word	0x20002bac
 800e200:	20002bc8 	.word	0x20002bc8
 800e204:	20002bdc 	.word	0x20002bdc
 800e208:	20002bf4 	.word	0x20002bf4
 800e20c:	20002bc0 	.word	0x20002bc0
 800e210:	20002bc4 	.word	0x20002bc4

0800e214 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e21a:	e019      	b.n	800e250 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e21c:	f000 fdec 	bl	800edf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e220:	4b10      	ldr	r3, [pc, #64]	@ (800e264 <prvCheckTasksWaitingTermination+0x50>)
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3304      	adds	r3, #4
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fe fc3b 	bl	800caa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e232:	4b0d      	ldr	r3, [pc, #52]	@ (800e268 <prvCheckTasksWaitingTermination+0x54>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3b01      	subs	r3, #1
 800e238:	4a0b      	ldr	r2, [pc, #44]	@ (800e268 <prvCheckTasksWaitingTermination+0x54>)
 800e23a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e23c:	4b0b      	ldr	r3, [pc, #44]	@ (800e26c <prvCheckTasksWaitingTermination+0x58>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	3b01      	subs	r3, #1
 800e242:	4a0a      	ldr	r2, [pc, #40]	@ (800e26c <prvCheckTasksWaitingTermination+0x58>)
 800e244:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e246:	f000 fe09 	bl	800ee5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f810 	bl	800e270 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e250:	4b06      	ldr	r3, [pc, #24]	@ (800e26c <prvCheckTasksWaitingTermination+0x58>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d1e1      	bne.n	800e21c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e258:	bf00      	nop
 800e25a:	bf00      	nop
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	20002bdc 	.word	0x20002bdc
 800e268:	20002c08 	.word	0x20002c08
 800e26c:	20002bf0 	.word	0x20002bf0

0800e270 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	3354      	adds	r3, #84	@ 0x54
 800e27c:	4618      	mov	r0, r3
 800e27e:	f002 fb35 	bl	80108ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d108      	bne.n	800e29e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e290:	4618      	mov	r0, r3
 800e292:	f000 ffa1 	bl	800f1d8 <vPortFree>
				vPortFree( pxTCB );
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 ff9e 	bl	800f1d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e29c:	e019      	b.n	800e2d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d103      	bne.n	800e2b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 ff95 	bl	800f1d8 <vPortFree>
	}
 800e2ae:	e010      	b.n	800e2d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d00b      	beq.n	800e2d2 <prvDeleteTCB+0x62>
	__asm volatile
 800e2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2be:	f383 8811 	msr	BASEPRI, r3
 800e2c2:	f3bf 8f6f 	isb	sy
 800e2c6:	f3bf 8f4f 	dsb	sy
 800e2ca:	60fb      	str	r3, [r7, #12]
}
 800e2cc:	bf00      	nop
 800e2ce:	bf00      	nop
 800e2d0:	e7fd      	b.n	800e2ce <prvDeleteTCB+0x5e>
	}
 800e2d2:	bf00      	nop
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
	...

0800e2dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e314 <prvResetNextTaskUnblockTime+0x38>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d104      	bne.n	800e2f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e318 <prvResetNextTaskUnblockTime+0x3c>)
 800e2ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e2f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e2f4:	e008      	b.n	800e308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2f6:	4b07      	ldr	r3, [pc, #28]	@ (800e314 <prvResetNextTaskUnblockTime+0x38>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	4a04      	ldr	r2, [pc, #16]	@ (800e318 <prvResetNextTaskUnblockTime+0x3c>)
 800e306:	6013      	str	r3, [r2, #0]
}
 800e308:	bf00      	nop
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr
 800e314:	20002bc0 	.word	0x20002bc0
 800e318:	20002c28 	.word	0x20002c28

0800e31c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e322:	4b0b      	ldr	r3, [pc, #44]	@ (800e350 <xTaskGetSchedulerState+0x34>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d102      	bne.n	800e330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e32a:	2301      	movs	r3, #1
 800e32c:	607b      	str	r3, [r7, #4]
 800e32e:	e008      	b.n	800e342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e330:	4b08      	ldr	r3, [pc, #32]	@ (800e354 <xTaskGetSchedulerState+0x38>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d102      	bne.n	800e33e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e338:	2302      	movs	r3, #2
 800e33a:	607b      	str	r3, [r7, #4]
 800e33c:	e001      	b.n	800e342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e33e:	2300      	movs	r3, #0
 800e340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e342:	687b      	ldr	r3, [r7, #4]
	}
 800e344:	4618      	mov	r0, r3
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr
 800e350:	20002c14 	.word	0x20002c14
 800e354:	20002c30 	.word	0x20002c30

0800e358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b086      	sub	sp, #24
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e364:	2300      	movs	r3, #0
 800e366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d058      	beq.n	800e420 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e36e:	4b2f      	ldr	r3, [pc, #188]	@ (800e42c <xTaskPriorityDisinherit+0xd4>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	693a      	ldr	r2, [r7, #16]
 800e374:	429a      	cmp	r2, r3
 800e376:	d00b      	beq.n	800e390 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e37c:	f383 8811 	msr	BASEPRI, r3
 800e380:	f3bf 8f6f 	isb	sy
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	60fb      	str	r3, [r7, #12]
}
 800e38a:	bf00      	nop
 800e38c:	bf00      	nop
 800e38e:	e7fd      	b.n	800e38c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10b      	bne.n	800e3b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e39c:	f383 8811 	msr	BASEPRI, r3
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	60bb      	str	r3, [r7, #8]
}
 800e3aa:	bf00      	nop
 800e3ac:	bf00      	nop
 800e3ae:	e7fd      	b.n	800e3ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3b4:	1e5a      	subs	r2, r3, #1
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d02c      	beq.n	800e420 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d128      	bne.n	800e420 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fe fb68 	bl	800caa8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3f0:	4b0f      	ldr	r3, [pc, #60]	@ (800e430 <xTaskPriorityDisinherit+0xd8>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d903      	bls.n	800e400 <xTaskPriorityDisinherit+0xa8>
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3fc:	4a0c      	ldr	r2, [pc, #48]	@ (800e430 <xTaskPriorityDisinherit+0xd8>)
 800e3fe:	6013      	str	r3, [r2, #0]
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e404:	4613      	mov	r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4413      	add	r3, r2
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	4a09      	ldr	r2, [pc, #36]	@ (800e434 <xTaskPriorityDisinherit+0xdc>)
 800e40e:	441a      	add	r2, r3
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	3304      	adds	r3, #4
 800e414:	4619      	mov	r1, r3
 800e416:	4610      	mov	r0, r2
 800e418:	f7fe fae9 	bl	800c9ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e41c:	2301      	movs	r3, #1
 800e41e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e420:	697b      	ldr	r3, [r7, #20]
	}
 800e422:	4618      	mov	r0, r3
 800e424:	3718      	adds	r7, #24
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	20002734 	.word	0x20002734
 800e430:	20002c10 	.word	0x20002c10
 800e434:	20002738 	.word	0x20002738

0800e438 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e442:	4b21      	ldr	r3, [pc, #132]	@ (800e4c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e448:	4b20      	ldr	r3, [pc, #128]	@ (800e4cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3304      	adds	r3, #4
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fe fb2a 	bl	800caa8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e45a:	d10a      	bne.n	800e472 <prvAddCurrentTaskToDelayedList+0x3a>
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d007      	beq.n	800e472 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e462:	4b1a      	ldr	r3, [pc, #104]	@ (800e4cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	3304      	adds	r3, #4
 800e468:	4619      	mov	r1, r3
 800e46a:	4819      	ldr	r0, [pc, #100]	@ (800e4d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e46c:	f7fe fabf 	bl	800c9ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e470:	e026      	b.n	800e4c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4413      	add	r3, r2
 800e478:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e47a:	4b14      	ldr	r3, [pc, #80]	@ (800e4cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	429a      	cmp	r2, r3
 800e488:	d209      	bcs.n	800e49e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e48a:	4b12      	ldr	r3, [pc, #72]	@ (800e4d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	4b0f      	ldr	r3, [pc, #60]	@ (800e4cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	3304      	adds	r3, #4
 800e494:	4619      	mov	r1, r3
 800e496:	4610      	mov	r0, r2
 800e498:	f7fe facd 	bl	800ca36 <vListInsert>
}
 800e49c:	e010      	b.n	800e4c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e49e:	4b0e      	ldr	r3, [pc, #56]	@ (800e4d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e4cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3304      	adds	r3, #4
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	4610      	mov	r0, r2
 800e4ac:	f7fe fac3 	bl	800ca36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e4b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e4dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	68ba      	ldr	r2, [r7, #8]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d202      	bcs.n	800e4c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e4ba:	4a08      	ldr	r2, [pc, #32]	@ (800e4dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	6013      	str	r3, [r2, #0]
}
 800e4c0:	bf00      	nop
 800e4c2:	3710      	adds	r7, #16
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	20002c0c 	.word	0x20002c0c
 800e4cc:	20002734 	.word	0x20002734
 800e4d0:	20002bf4 	.word	0x20002bf4
 800e4d4:	20002bc4 	.word	0x20002bc4
 800e4d8:	20002bc0 	.word	0x20002bc0
 800e4dc:	20002c28 	.word	0x20002c28

0800e4e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b08a      	sub	sp, #40	@ 0x28
 800e4e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e4ea:	f000 fb13 	bl	800eb14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e4ee:	4b1d      	ldr	r3, [pc, #116]	@ (800e564 <xTimerCreateTimerTask+0x84>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d021      	beq.n	800e53a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e4fe:	1d3a      	adds	r2, r7, #4
 800e500:	f107 0108 	add.w	r1, r7, #8
 800e504:	f107 030c 	add.w	r3, r7, #12
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe fa29 	bl	800c960 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e50e:	6879      	ldr	r1, [r7, #4]
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	68fa      	ldr	r2, [r7, #12]
 800e514:	9202      	str	r2, [sp, #8]
 800e516:	9301      	str	r3, [sp, #4]
 800e518:	2302      	movs	r3, #2
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	2300      	movs	r3, #0
 800e51e:	460a      	mov	r2, r1
 800e520:	4911      	ldr	r1, [pc, #68]	@ (800e568 <xTimerCreateTimerTask+0x88>)
 800e522:	4812      	ldr	r0, [pc, #72]	@ (800e56c <xTimerCreateTimerTask+0x8c>)
 800e524:	f7ff f8a2 	bl	800d66c <xTaskCreateStatic>
 800e528:	4603      	mov	r3, r0
 800e52a:	4a11      	ldr	r2, [pc, #68]	@ (800e570 <xTimerCreateTimerTask+0x90>)
 800e52c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e52e:	4b10      	ldr	r3, [pc, #64]	@ (800e570 <xTimerCreateTimerTask+0x90>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d001      	beq.n	800e53a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e536:	2301      	movs	r3, #1
 800e538:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d10b      	bne.n	800e558 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e544:	f383 8811 	msr	BASEPRI, r3
 800e548:	f3bf 8f6f 	isb	sy
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	613b      	str	r3, [r7, #16]
}
 800e552:	bf00      	nop
 800e554:	bf00      	nop
 800e556:	e7fd      	b.n	800e554 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e558:	697b      	ldr	r3, [r7, #20]
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3718      	adds	r7, #24
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	20002c64 	.word	0x20002c64
 800e568:	08012e60 	.word	0x08012e60
 800e56c:	0800e6ad 	.word	0x0800e6ad
 800e570:	20002c68 	.word	0x20002c68

0800e574 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b08a      	sub	sp, #40	@ 0x28
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	607a      	str	r2, [r7, #4]
 800e580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e582:	2300      	movs	r3, #0
 800e584:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d10b      	bne.n	800e5a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800e58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e590:	f383 8811 	msr	BASEPRI, r3
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	f3bf 8f4f 	dsb	sy
 800e59c:	623b      	str	r3, [r7, #32]
}
 800e59e:	bf00      	nop
 800e5a0:	bf00      	nop
 800e5a2:	e7fd      	b.n	800e5a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e5a4:	4b19      	ldr	r3, [pc, #100]	@ (800e60c <xTimerGenericCommand+0x98>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d02a      	beq.n	800e602 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	2b05      	cmp	r3, #5
 800e5bc:	dc18      	bgt.n	800e5f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e5be:	f7ff fead 	bl	800e31c <xTaskGetSchedulerState>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d109      	bne.n	800e5dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e5c8:	4b10      	ldr	r3, [pc, #64]	@ (800e60c <xTimerGenericCommand+0x98>)
 800e5ca:	6818      	ldr	r0, [r3, #0]
 800e5cc:	f107 0110 	add.w	r1, r7, #16
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5d4:	f7fe fbd8 	bl	800cd88 <xQueueGenericSend>
 800e5d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800e5da:	e012      	b.n	800e602 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e5dc:	4b0b      	ldr	r3, [pc, #44]	@ (800e60c <xTimerGenericCommand+0x98>)
 800e5de:	6818      	ldr	r0, [r3, #0]
 800e5e0:	f107 0110 	add.w	r1, r7, #16
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f7fe fbce 	bl	800cd88 <xQueueGenericSend>
 800e5ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800e5ee:	e008      	b.n	800e602 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e5f0:	4b06      	ldr	r3, [pc, #24]	@ (800e60c <xTimerGenericCommand+0x98>)
 800e5f2:	6818      	ldr	r0, [r3, #0]
 800e5f4:	f107 0110 	add.w	r1, r7, #16
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	683a      	ldr	r2, [r7, #0]
 800e5fc:	f7fe fcc6 	bl	800cf8c <xQueueGenericSendFromISR>
 800e600:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e604:	4618      	mov	r0, r3
 800e606:	3728      	adds	r7, #40	@ 0x28
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	20002c64 	.word	0x20002c64

0800e610 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b088      	sub	sp, #32
 800e614:	af02      	add	r7, sp, #8
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e61a:	4b23      	ldr	r3, [pc, #140]	@ (800e6a8 <prvProcessExpiredTimer+0x98>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	68db      	ldr	r3, [r3, #12]
 800e622:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	3304      	adds	r3, #4
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fe fa3d 	bl	800caa8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e634:	f003 0304 	and.w	r3, r3, #4
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d023      	beq.n	800e684 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	699a      	ldr	r2, [r3, #24]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	18d1      	adds	r1, r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	683a      	ldr	r2, [r7, #0]
 800e648:	6978      	ldr	r0, [r7, #20]
 800e64a:	f000 f8d5 	bl	800e7f8 <prvInsertTimerInActiveList>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d020      	beq.n	800e696 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e654:	2300      	movs	r3, #0
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	2300      	movs	r3, #0
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	2100      	movs	r1, #0
 800e65e:	6978      	ldr	r0, [r7, #20]
 800e660:	f7ff ff88 	bl	800e574 <xTimerGenericCommand>
 800e664:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d114      	bne.n	800e696 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	60fb      	str	r3, [r7, #12]
}
 800e67e:	bf00      	nop
 800e680:	bf00      	nop
 800e682:	e7fd      	b.n	800e680 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e68a:	f023 0301 	bic.w	r3, r3, #1
 800e68e:	b2da      	uxtb	r2, r3
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	6a1b      	ldr	r3, [r3, #32]
 800e69a:	6978      	ldr	r0, [r7, #20]
 800e69c:	4798      	blx	r3
}
 800e69e:	bf00      	nop
 800e6a0:	3718      	adds	r7, #24
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	20002c5c 	.word	0x20002c5c

0800e6ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e6b4:	f107 0308 	add.w	r3, r7, #8
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f000 f859 	bl	800e770 <prvGetNextExpireTime>
 800e6be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	68f8      	ldr	r0, [r7, #12]
 800e6c6:	f000 f805 	bl	800e6d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e6ca:	f000 f8d7 	bl	800e87c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e6ce:	bf00      	nop
 800e6d0:	e7f0      	b.n	800e6b4 <prvTimerTask+0x8>
	...

0800e6d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e6de:	f7ff fa29 	bl	800db34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e6e2:	f107 0308 	add.w	r3, r7, #8
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f000 f866 	bl	800e7b8 <prvSampleTimeNow>
 800e6ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d130      	bne.n	800e756 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d10a      	bne.n	800e710 <prvProcessTimerOrBlockTask+0x3c>
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d806      	bhi.n	800e710 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e702:	f7ff fa25 	bl	800db50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e706:	68f9      	ldr	r1, [r7, #12]
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f7ff ff81 	bl	800e610 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e70e:	e024      	b.n	800e75a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d008      	beq.n	800e728 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e716:	4b13      	ldr	r3, [pc, #76]	@ (800e764 <prvProcessTimerOrBlockTask+0x90>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d101      	bne.n	800e724 <prvProcessTimerOrBlockTask+0x50>
 800e720:	2301      	movs	r3, #1
 800e722:	e000      	b.n	800e726 <prvProcessTimerOrBlockTask+0x52>
 800e724:	2300      	movs	r3, #0
 800e726:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e728:	4b0f      	ldr	r3, [pc, #60]	@ (800e768 <prvProcessTimerOrBlockTask+0x94>)
 800e72a:	6818      	ldr	r0, [r3, #0]
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	683a      	ldr	r2, [r7, #0]
 800e734:	4619      	mov	r1, r3
 800e736:	f7fe ff65 	bl	800d604 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e73a:	f7ff fa09 	bl	800db50 <xTaskResumeAll>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d10a      	bne.n	800e75a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e744:	4b09      	ldr	r3, [pc, #36]	@ (800e76c <prvProcessTimerOrBlockTask+0x98>)
 800e746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e74a:	601a      	str	r2, [r3, #0]
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	f3bf 8f6f 	isb	sy
}
 800e754:	e001      	b.n	800e75a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e756:	f7ff f9fb 	bl	800db50 <xTaskResumeAll>
}
 800e75a:	bf00      	nop
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	20002c60 	.word	0x20002c60
 800e768:	20002c64 	.word	0x20002c64
 800e76c:	e000ed04 	.word	0xe000ed04

0800e770 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e778:	4b0e      	ldr	r3, [pc, #56]	@ (800e7b4 <prvGetNextExpireTime+0x44>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d101      	bne.n	800e786 <prvGetNextExpireTime+0x16>
 800e782:	2201      	movs	r2, #1
 800e784:	e000      	b.n	800e788 <prvGetNextExpireTime+0x18>
 800e786:	2200      	movs	r2, #0
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d105      	bne.n	800e7a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e794:	4b07      	ldr	r3, [pc, #28]	@ (800e7b4 <prvGetNextExpireTime+0x44>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	60fb      	str	r3, [r7, #12]
 800e79e:	e001      	b.n	800e7a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3714      	adds	r7, #20
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	20002c5c 	.word	0x20002c5c

0800e7b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e7c0:	f7ff fa64 	bl	800dc8c <xTaskGetTickCount>
 800e7c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e7c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f4 <prvSampleTimeNow+0x3c>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	68fa      	ldr	r2, [r7, #12]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d205      	bcs.n	800e7dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e7d0:	f000 f93a 	bl	800ea48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	601a      	str	r2, [r3, #0]
 800e7da:	e002      	b.n	800e7e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e7e2:	4a04      	ldr	r2, [pc, #16]	@ (800e7f4 <prvSampleTimeNow+0x3c>)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	20002c6c 	.word	0x20002c6c

0800e7f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b086      	sub	sp, #24
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	60b9      	str	r1, [r7, #8]
 800e802:	607a      	str	r2, [r7, #4]
 800e804:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e806:	2300      	movs	r3, #0
 800e808:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d812      	bhi.n	800e844 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	1ad2      	subs	r2, r2, r3
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	699b      	ldr	r3, [r3, #24]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d302      	bcc.n	800e832 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e82c:	2301      	movs	r3, #1
 800e82e:	617b      	str	r3, [r7, #20]
 800e830:	e01b      	b.n	800e86a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e832:	4b10      	ldr	r3, [pc, #64]	@ (800e874 <prvInsertTimerInActiveList+0x7c>)
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	3304      	adds	r3, #4
 800e83a:	4619      	mov	r1, r3
 800e83c:	4610      	mov	r0, r2
 800e83e:	f7fe f8fa 	bl	800ca36 <vListInsert>
 800e842:	e012      	b.n	800e86a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d206      	bcs.n	800e85a <prvInsertTimerInActiveList+0x62>
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	429a      	cmp	r2, r3
 800e852:	d302      	bcc.n	800e85a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e854:	2301      	movs	r3, #1
 800e856:	617b      	str	r3, [r7, #20]
 800e858:	e007      	b.n	800e86a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e85a:	4b07      	ldr	r3, [pc, #28]	@ (800e878 <prvInsertTimerInActiveList+0x80>)
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3304      	adds	r3, #4
 800e862:	4619      	mov	r1, r3
 800e864:	4610      	mov	r0, r2
 800e866:	f7fe f8e6 	bl	800ca36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e86a:	697b      	ldr	r3, [r7, #20]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	20002c60 	.word	0x20002c60
 800e878:	20002c5c 	.word	0x20002c5c

0800e87c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08e      	sub	sp, #56	@ 0x38
 800e880:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e882:	e0ce      	b.n	800ea22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	da19      	bge.n	800e8be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e88a:	1d3b      	adds	r3, r7, #4
 800e88c:	3304      	adds	r3, #4
 800e88e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10b      	bne.n	800e8ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	61fb      	str	r3, [r7, #28]
}
 800e8a8:	bf00      	nop
 800e8aa:	bf00      	nop
 800e8ac:	e7fd      	b.n	800e8aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8b4:	6850      	ldr	r0, [r2, #4]
 800e8b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8b8:	6892      	ldr	r2, [r2, #8]
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f2c0 80ae 	blt.w	800ea22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8cc:	695b      	ldr	r3, [r3, #20]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d004      	beq.n	800e8dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fe f8e6 	bl	800caa8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8dc:	463b      	mov	r3, r7
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7ff ff6a 	bl	800e7b8 <prvSampleTimeNow>
 800e8e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2b09      	cmp	r3, #9
 800e8ea:	f200 8097 	bhi.w	800ea1c <prvProcessReceivedCommands+0x1a0>
 800e8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800e8f4 <prvProcessReceivedCommands+0x78>)
 800e8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f4:	0800e91d 	.word	0x0800e91d
 800e8f8:	0800e91d 	.word	0x0800e91d
 800e8fc:	0800e91d 	.word	0x0800e91d
 800e900:	0800e993 	.word	0x0800e993
 800e904:	0800e9a7 	.word	0x0800e9a7
 800e908:	0800e9f3 	.word	0x0800e9f3
 800e90c:	0800e91d 	.word	0x0800e91d
 800e910:	0800e91d 	.word	0x0800e91d
 800e914:	0800e993 	.word	0x0800e993
 800e918:	0800e9a7 	.word	0x0800e9a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e922:	f043 0301 	orr.w	r3, r3, #1
 800e926:	b2da      	uxtb	r2, r3
 800e928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e92a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e92e:	68ba      	ldr	r2, [r7, #8]
 800e930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e932:	699b      	ldr	r3, [r3, #24]
 800e934:	18d1      	adds	r1, r2, r3
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e93a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e93c:	f7ff ff5c 	bl	800e7f8 <prvInsertTimerInActiveList>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d06c      	beq.n	800ea20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e948:	6a1b      	ldr	r3, [r3, #32]
 800e94a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e94c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e954:	f003 0304 	and.w	r3, r3, #4
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d061      	beq.n	800ea20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e960:	699b      	ldr	r3, [r3, #24]
 800e962:	441a      	add	r2, r3
 800e964:	2300      	movs	r3, #0
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	2300      	movs	r3, #0
 800e96a:	2100      	movs	r1, #0
 800e96c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e96e:	f7ff fe01 	bl	800e574 <xTimerGenericCommand>
 800e972:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d152      	bne.n	800ea20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e97e:	f383 8811 	msr	BASEPRI, r3
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	f3bf 8f4f 	dsb	sy
 800e98a:	61bb      	str	r3, [r7, #24]
}
 800e98c:	bf00      	nop
 800e98e:	bf00      	nop
 800e990:	e7fd      	b.n	800e98e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e998:	f023 0301 	bic.w	r3, r3, #1
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e9a4:	e03d      	b.n	800ea22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9ac:	f043 0301 	orr.w	r3, r3, #1
 800e9b0:	b2da      	uxtb	r2, r3
 800e9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d10b      	bne.n	800e9de <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ca:	f383 8811 	msr	BASEPRI, r3
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	f3bf 8f4f 	dsb	sy
 800e9d6:	617b      	str	r3, [r7, #20]
}
 800e9d8:	bf00      	nop
 800e9da:	bf00      	nop
 800e9dc:	e7fd      	b.n	800e9da <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e0:	699a      	ldr	r2, [r3, #24]
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e4:	18d1      	adds	r1, r2, r3
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9ec:	f7ff ff04 	bl	800e7f8 <prvInsertTimerInActiveList>
					break;
 800e9f0:	e017      	b.n	800ea22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9f8:	f003 0302 	and.w	r3, r3, #2
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d103      	bne.n	800ea08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ea00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea02:	f000 fbe9 	bl	800f1d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea06:	e00c      	b.n	800ea22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea0e:	f023 0301 	bic.w	r3, r3, #1
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ea1a:	e002      	b.n	800ea22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ea1c:	bf00      	nop
 800ea1e:	e000      	b.n	800ea22 <prvProcessReceivedCommands+0x1a6>
					break;
 800ea20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea22:	4b08      	ldr	r3, [pc, #32]	@ (800ea44 <prvProcessReceivedCommands+0x1c8>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	1d39      	adds	r1, r7, #4
 800ea28:	2200      	movs	r2, #0
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe fb4c 	bl	800d0c8 <xQueueReceive>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f47f af26 	bne.w	800e884 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ea38:	bf00      	nop
 800ea3a:	bf00      	nop
 800ea3c:	3730      	adds	r7, #48	@ 0x30
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20002c64 	.word	0x20002c64

0800ea48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b088      	sub	sp, #32
 800ea4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea4e:	e049      	b.n	800eae4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea50:	4b2e      	ldr	r3, [pc, #184]	@ (800eb0c <prvSwitchTimerLists+0xc4>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea5a:	4b2c      	ldr	r3, [pc, #176]	@ (800eb0c <prvSwitchTimerLists+0xc4>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	3304      	adds	r3, #4
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fe f81d 	bl	800caa8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	6a1b      	ldr	r3, [r3, #32]
 800ea72:	68f8      	ldr	r0, [r7, #12]
 800ea74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea7c:	f003 0304 	and.w	r3, r3, #4
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d02f      	beq.n	800eae4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	693a      	ldr	r2, [r7, #16]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ea8e:	68ba      	ldr	r2, [r7, #8]
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d90e      	bls.n	800eab4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eaa2:	4b1a      	ldr	r3, [pc, #104]	@ (800eb0c <prvSwitchTimerLists+0xc4>)
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	4619      	mov	r1, r3
 800eaac:	4610      	mov	r0, r2
 800eaae:	f7fd ffc2 	bl	800ca36 <vListInsert>
 800eab2:	e017      	b.n	800eae4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eab4:	2300      	movs	r3, #0
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	2300      	movs	r3, #0
 800eaba:	693a      	ldr	r2, [r7, #16]
 800eabc:	2100      	movs	r1, #0
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f7ff fd58 	bl	800e574 <xTimerGenericCommand>
 800eac4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d10b      	bne.n	800eae4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800eacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	603b      	str	r3, [r7, #0]
}
 800eade:	bf00      	nop
 800eae0:	bf00      	nop
 800eae2:	e7fd      	b.n	800eae0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eae4:	4b09      	ldr	r3, [pc, #36]	@ (800eb0c <prvSwitchTimerLists+0xc4>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1b0      	bne.n	800ea50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eaee:	4b07      	ldr	r3, [pc, #28]	@ (800eb0c <prvSwitchTimerLists+0xc4>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eaf4:	4b06      	ldr	r3, [pc, #24]	@ (800eb10 <prvSwitchTimerLists+0xc8>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a04      	ldr	r2, [pc, #16]	@ (800eb0c <prvSwitchTimerLists+0xc4>)
 800eafa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eafc:	4a04      	ldr	r2, [pc, #16]	@ (800eb10 <prvSwitchTimerLists+0xc8>)
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	6013      	str	r3, [r2, #0]
}
 800eb02:	bf00      	nop
 800eb04:	3718      	adds	r7, #24
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	20002c5c 	.word	0x20002c5c
 800eb10:	20002c60 	.word	0x20002c60

0800eb14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eb1a:	f000 f96d 	bl	800edf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eb1e:	4b15      	ldr	r3, [pc, #84]	@ (800eb74 <prvCheckForValidListAndQueue+0x60>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d120      	bne.n	800eb68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eb26:	4814      	ldr	r0, [pc, #80]	@ (800eb78 <prvCheckForValidListAndQueue+0x64>)
 800eb28:	f7fd ff34 	bl	800c994 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eb2c:	4813      	ldr	r0, [pc, #76]	@ (800eb7c <prvCheckForValidListAndQueue+0x68>)
 800eb2e:	f7fd ff31 	bl	800c994 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eb32:	4b13      	ldr	r3, [pc, #76]	@ (800eb80 <prvCheckForValidListAndQueue+0x6c>)
 800eb34:	4a10      	ldr	r2, [pc, #64]	@ (800eb78 <prvCheckForValidListAndQueue+0x64>)
 800eb36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eb38:	4b12      	ldr	r3, [pc, #72]	@ (800eb84 <prvCheckForValidListAndQueue+0x70>)
 800eb3a:	4a10      	ldr	r2, [pc, #64]	@ (800eb7c <prvCheckForValidListAndQueue+0x68>)
 800eb3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eb3e:	2300      	movs	r3, #0
 800eb40:	9300      	str	r3, [sp, #0]
 800eb42:	4b11      	ldr	r3, [pc, #68]	@ (800eb88 <prvCheckForValidListAndQueue+0x74>)
 800eb44:	4a11      	ldr	r2, [pc, #68]	@ (800eb8c <prvCheckForValidListAndQueue+0x78>)
 800eb46:	2110      	movs	r1, #16
 800eb48:	200a      	movs	r0, #10
 800eb4a:	f7fe f841 	bl	800cbd0 <xQueueGenericCreateStatic>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	4a08      	ldr	r2, [pc, #32]	@ (800eb74 <prvCheckForValidListAndQueue+0x60>)
 800eb52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eb54:	4b07      	ldr	r3, [pc, #28]	@ (800eb74 <prvCheckForValidListAndQueue+0x60>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d005      	beq.n	800eb68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eb5c:	4b05      	ldr	r3, [pc, #20]	@ (800eb74 <prvCheckForValidListAndQueue+0x60>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	490b      	ldr	r1, [pc, #44]	@ (800eb90 <prvCheckForValidListAndQueue+0x7c>)
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fe fd24 	bl	800d5b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb68:	f000 f978 	bl	800ee5c <vPortExitCritical>
}
 800eb6c:	bf00      	nop
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	20002c64 	.word	0x20002c64
 800eb78:	20002c34 	.word	0x20002c34
 800eb7c:	20002c48 	.word	0x20002c48
 800eb80:	20002c5c 	.word	0x20002c5c
 800eb84:	20002c60 	.word	0x20002c60
 800eb88:	20002d10 	.word	0x20002d10
 800eb8c:	20002c70 	.word	0x20002c70
 800eb90:	08012e68 	.word	0x08012e68

0800eb94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eb94:	b480      	push	{r7}
 800eb96:	b085      	sub	sp, #20
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	3b04      	subs	r3, #4
 800eba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ebac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	3b04      	subs	r3, #4
 800ebb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	f023 0201 	bic.w	r2, r3, #1
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3b04      	subs	r3, #4
 800ebc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ebc4:	4a0c      	ldr	r2, [pc, #48]	@ (800ebf8 <pxPortInitialiseStack+0x64>)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	3b14      	subs	r3, #20
 800ebce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	3b04      	subs	r3, #4
 800ebda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f06f 0202 	mvn.w	r2, #2
 800ebe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	3b20      	subs	r3, #32
 800ebe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ebea:	68fb      	ldr	r3, [r7, #12]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	0800ebfd 	.word	0x0800ebfd

0800ebfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec06:	4b13      	ldr	r3, [pc, #76]	@ (800ec54 <prvTaskExitError+0x58>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec0e:	d00b      	beq.n	800ec28 <prvTaskExitError+0x2c>
	__asm volatile
 800ec10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	60fb      	str	r3, [r7, #12]
}
 800ec22:	bf00      	nop
 800ec24:	bf00      	nop
 800ec26:	e7fd      	b.n	800ec24 <prvTaskExitError+0x28>
	__asm volatile
 800ec28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec2c:	f383 8811 	msr	BASEPRI, r3
 800ec30:	f3bf 8f6f 	isb	sy
 800ec34:	f3bf 8f4f 	dsb	sy
 800ec38:	60bb      	str	r3, [r7, #8]
}
 800ec3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec3c:	bf00      	nop
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d0fc      	beq.n	800ec3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec44:	bf00      	nop
 800ec46:	bf00      	nop
 800ec48:	3714      	adds	r7, #20
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	2000011c 	.word	0x2000011c
	...

0800ec60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec60:	4b07      	ldr	r3, [pc, #28]	@ (800ec80 <pxCurrentTCBConst2>)
 800ec62:	6819      	ldr	r1, [r3, #0]
 800ec64:	6808      	ldr	r0, [r1, #0]
 800ec66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec6a:	f380 8809 	msr	PSP, r0
 800ec6e:	f3bf 8f6f 	isb	sy
 800ec72:	f04f 0000 	mov.w	r0, #0
 800ec76:	f380 8811 	msr	BASEPRI, r0
 800ec7a:	4770      	bx	lr
 800ec7c:	f3af 8000 	nop.w

0800ec80 <pxCurrentTCBConst2>:
 800ec80:	20002734 	.word	0x20002734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec84:	bf00      	nop
 800ec86:	bf00      	nop

0800ec88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec88:	4808      	ldr	r0, [pc, #32]	@ (800ecac <prvPortStartFirstTask+0x24>)
 800ec8a:	6800      	ldr	r0, [r0, #0]
 800ec8c:	6800      	ldr	r0, [r0, #0]
 800ec8e:	f380 8808 	msr	MSP, r0
 800ec92:	f04f 0000 	mov.w	r0, #0
 800ec96:	f380 8814 	msr	CONTROL, r0
 800ec9a:	b662      	cpsie	i
 800ec9c:	b661      	cpsie	f
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	f3bf 8f6f 	isb	sy
 800eca6:	df00      	svc	0
 800eca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ecaa:	bf00      	nop
 800ecac:	e000ed08 	.word	0xe000ed08

0800ecb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ecb6:	4b47      	ldr	r3, [pc, #284]	@ (800edd4 <xPortStartScheduler+0x124>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4a47      	ldr	r2, [pc, #284]	@ (800edd8 <xPortStartScheduler+0x128>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d10b      	bne.n	800ecd8 <xPortStartScheduler+0x28>
	__asm volatile
 800ecc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc4:	f383 8811 	msr	BASEPRI, r3
 800ecc8:	f3bf 8f6f 	isb	sy
 800eccc:	f3bf 8f4f 	dsb	sy
 800ecd0:	613b      	str	r3, [r7, #16]
}
 800ecd2:	bf00      	nop
 800ecd4:	bf00      	nop
 800ecd6:	e7fd      	b.n	800ecd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ecd8:	4b3e      	ldr	r3, [pc, #248]	@ (800edd4 <xPortStartScheduler+0x124>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a3f      	ldr	r2, [pc, #252]	@ (800eddc <xPortStartScheduler+0x12c>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d10b      	bne.n	800ecfa <xPortStartScheduler+0x4a>
	__asm volatile
 800ece2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ece6:	f383 8811 	msr	BASEPRI, r3
 800ecea:	f3bf 8f6f 	isb	sy
 800ecee:	f3bf 8f4f 	dsb	sy
 800ecf2:	60fb      	str	r3, [r7, #12]
}
 800ecf4:	bf00      	nop
 800ecf6:	bf00      	nop
 800ecf8:	e7fd      	b.n	800ecf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ecfa:	4b39      	ldr	r3, [pc, #228]	@ (800ede0 <xPortStartScheduler+0x130>)
 800ecfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	22ff      	movs	r2, #255	@ 0xff
 800ed0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	b2db      	uxtb	r3, r3
 800ed12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed14:	78fb      	ldrb	r3, [r7, #3]
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ed1c:	b2da      	uxtb	r2, r3
 800ed1e:	4b31      	ldr	r3, [pc, #196]	@ (800ede4 <xPortStartScheduler+0x134>)
 800ed20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed22:	4b31      	ldr	r3, [pc, #196]	@ (800ede8 <xPortStartScheduler+0x138>)
 800ed24:	2207      	movs	r2, #7
 800ed26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed28:	e009      	b.n	800ed3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ed2a:	4b2f      	ldr	r3, [pc, #188]	@ (800ede8 <xPortStartScheduler+0x138>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	3b01      	subs	r3, #1
 800ed30:	4a2d      	ldr	r2, [pc, #180]	@ (800ede8 <xPortStartScheduler+0x138>)
 800ed32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed34:	78fb      	ldrb	r3, [r7, #3]
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	005b      	lsls	r3, r3, #1
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed3e:	78fb      	ldrb	r3, [r7, #3]
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed46:	2b80      	cmp	r3, #128	@ 0x80
 800ed48:	d0ef      	beq.n	800ed2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed4a:	4b27      	ldr	r3, [pc, #156]	@ (800ede8 <xPortStartScheduler+0x138>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f1c3 0307 	rsb	r3, r3, #7
 800ed52:	2b04      	cmp	r3, #4
 800ed54:	d00b      	beq.n	800ed6e <xPortStartScheduler+0xbe>
	__asm volatile
 800ed56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed5a:	f383 8811 	msr	BASEPRI, r3
 800ed5e:	f3bf 8f6f 	isb	sy
 800ed62:	f3bf 8f4f 	dsb	sy
 800ed66:	60bb      	str	r3, [r7, #8]
}
 800ed68:	bf00      	nop
 800ed6a:	bf00      	nop
 800ed6c:	e7fd      	b.n	800ed6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ede8 <xPortStartScheduler+0x138>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	021b      	lsls	r3, r3, #8
 800ed74:	4a1c      	ldr	r2, [pc, #112]	@ (800ede8 <xPortStartScheduler+0x138>)
 800ed76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed78:	4b1b      	ldr	r3, [pc, #108]	@ (800ede8 <xPortStartScheduler+0x138>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ed80:	4a19      	ldr	r2, [pc, #100]	@ (800ede8 <xPortStartScheduler+0x138>)
 800ed82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	b2da      	uxtb	r2, r3
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed8c:	4b17      	ldr	r3, [pc, #92]	@ (800edec <xPortStartScheduler+0x13c>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a16      	ldr	r2, [pc, #88]	@ (800edec <xPortStartScheduler+0x13c>)
 800ed92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ed96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed98:	4b14      	ldr	r3, [pc, #80]	@ (800edec <xPortStartScheduler+0x13c>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a13      	ldr	r2, [pc, #76]	@ (800edec <xPortStartScheduler+0x13c>)
 800ed9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800eda2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eda4:	f000 f8da 	bl	800ef5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eda8:	4b11      	ldr	r3, [pc, #68]	@ (800edf0 <xPortStartScheduler+0x140>)
 800edaa:	2200      	movs	r2, #0
 800edac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800edae:	f000 f8f9 	bl	800efa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800edb2:	4b10      	ldr	r3, [pc, #64]	@ (800edf4 <xPortStartScheduler+0x144>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	4a0f      	ldr	r2, [pc, #60]	@ (800edf4 <xPortStartScheduler+0x144>)
 800edb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800edbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800edbe:	f7ff ff63 	bl	800ec88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800edc2:	f7ff f82d 	bl	800de20 <vTaskSwitchContext>
	prvTaskExitError();
 800edc6:	f7ff ff19 	bl	800ebfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	e000ed00 	.word	0xe000ed00
 800edd8:	410fc271 	.word	0x410fc271
 800eddc:	410fc270 	.word	0x410fc270
 800ede0:	e000e400 	.word	0xe000e400
 800ede4:	20002d60 	.word	0x20002d60
 800ede8:	20002d64 	.word	0x20002d64
 800edec:	e000ed20 	.word	0xe000ed20
 800edf0:	2000011c 	.word	0x2000011c
 800edf4:	e000ef34 	.word	0xe000ef34

0800edf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	607b      	str	r3, [r7, #4]
}
 800ee10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee12:	4b10      	ldr	r3, [pc, #64]	@ (800ee54 <vPortEnterCritical+0x5c>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	3301      	adds	r3, #1
 800ee18:	4a0e      	ldr	r2, [pc, #56]	@ (800ee54 <vPortEnterCritical+0x5c>)
 800ee1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ee54 <vPortEnterCritical+0x5c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d110      	bne.n	800ee46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee24:	4b0c      	ldr	r3, [pc, #48]	@ (800ee58 <vPortEnterCritical+0x60>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d00b      	beq.n	800ee46 <vPortEnterCritical+0x4e>
	__asm volatile
 800ee2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee32:	f383 8811 	msr	BASEPRI, r3
 800ee36:	f3bf 8f6f 	isb	sy
 800ee3a:	f3bf 8f4f 	dsb	sy
 800ee3e:	603b      	str	r3, [r7, #0]
}
 800ee40:	bf00      	nop
 800ee42:	bf00      	nop
 800ee44:	e7fd      	b.n	800ee42 <vPortEnterCritical+0x4a>
	}
}
 800ee46:	bf00      	nop
 800ee48:	370c      	adds	r7, #12
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	2000011c 	.word	0x2000011c
 800ee58:	e000ed04 	.word	0xe000ed04

0800ee5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee62:	4b12      	ldr	r3, [pc, #72]	@ (800eeac <vPortExitCritical+0x50>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10b      	bne.n	800ee82 <vPortExitCritical+0x26>
	__asm volatile
 800ee6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee6e:	f383 8811 	msr	BASEPRI, r3
 800ee72:	f3bf 8f6f 	isb	sy
 800ee76:	f3bf 8f4f 	dsb	sy
 800ee7a:	607b      	str	r3, [r7, #4]
}
 800ee7c:	bf00      	nop
 800ee7e:	bf00      	nop
 800ee80:	e7fd      	b.n	800ee7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ee82:	4b0a      	ldr	r3, [pc, #40]	@ (800eeac <vPortExitCritical+0x50>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	3b01      	subs	r3, #1
 800ee88:	4a08      	ldr	r2, [pc, #32]	@ (800eeac <vPortExitCritical+0x50>)
 800ee8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee8c:	4b07      	ldr	r3, [pc, #28]	@ (800eeac <vPortExitCritical+0x50>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d105      	bne.n	800eea0 <vPortExitCritical+0x44>
 800ee94:	2300      	movs	r3, #0
 800ee96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	f383 8811 	msr	BASEPRI, r3
}
 800ee9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eea0:	bf00      	nop
 800eea2:	370c      	adds	r7, #12
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr
 800eeac:	2000011c 	.word	0x2000011c

0800eeb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eeb0:	f3ef 8009 	mrs	r0, PSP
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	4b15      	ldr	r3, [pc, #84]	@ (800ef10 <pxCurrentTCBConst>)
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	f01e 0f10 	tst.w	lr, #16
 800eec0:	bf08      	it	eq
 800eec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeca:	6010      	str	r0, [r2, #0]
 800eecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800eed4:	f380 8811 	msr	BASEPRI, r0
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	f3bf 8f6f 	isb	sy
 800eee0:	f7fe ff9e 	bl	800de20 <vTaskSwitchContext>
 800eee4:	f04f 0000 	mov.w	r0, #0
 800eee8:	f380 8811 	msr	BASEPRI, r0
 800eeec:	bc09      	pop	{r0, r3}
 800eeee:	6819      	ldr	r1, [r3, #0]
 800eef0:	6808      	ldr	r0, [r1, #0]
 800eef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef6:	f01e 0f10 	tst.w	lr, #16
 800eefa:	bf08      	it	eq
 800eefc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef00:	f380 8809 	msr	PSP, r0
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	f3af 8000 	nop.w

0800ef10 <pxCurrentTCBConst>:
 800ef10:	20002734 	.word	0x20002734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef14:	bf00      	nop
 800ef16:	bf00      	nop

0800ef18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	607b      	str	r3, [r7, #4]
}
 800ef30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef32:	f7fe febb 	bl	800dcac <xTaskIncrementTick>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d003      	beq.n	800ef44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef3c:	4b06      	ldr	r3, [pc, #24]	@ (800ef58 <xPortSysTickHandler+0x40>)
 800ef3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef42:	601a      	str	r2, [r3, #0]
 800ef44:	2300      	movs	r3, #0
 800ef46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	f383 8811 	msr	BASEPRI, r3
}
 800ef4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef50:	bf00      	nop
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	e000ed04 	.word	0xe000ed04

0800ef5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef60:	4b0b      	ldr	r3, [pc, #44]	@ (800ef90 <vPortSetupTimerInterrupt+0x34>)
 800ef62:	2200      	movs	r2, #0
 800ef64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef66:	4b0b      	ldr	r3, [pc, #44]	@ (800ef94 <vPortSetupTimerInterrupt+0x38>)
 800ef68:	2200      	movs	r2, #0
 800ef6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ef98 <vPortSetupTimerInterrupt+0x3c>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a0a      	ldr	r2, [pc, #40]	@ (800ef9c <vPortSetupTimerInterrupt+0x40>)
 800ef72:	fba2 2303 	umull	r2, r3, r2, r3
 800ef76:	099b      	lsrs	r3, r3, #6
 800ef78:	4a09      	ldr	r2, [pc, #36]	@ (800efa0 <vPortSetupTimerInterrupt+0x44>)
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef7e:	4b04      	ldr	r3, [pc, #16]	@ (800ef90 <vPortSetupTimerInterrupt+0x34>)
 800ef80:	2207      	movs	r2, #7
 800ef82:	601a      	str	r2, [r3, #0]
}
 800ef84:	bf00      	nop
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	e000e010 	.word	0xe000e010
 800ef94:	e000e018 	.word	0xe000e018
 800ef98:	20000000 	.word	0x20000000
 800ef9c:	10624dd3 	.word	0x10624dd3
 800efa0:	e000e014 	.word	0xe000e014

0800efa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800efa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800efb4 <vPortEnableVFP+0x10>
 800efa8:	6801      	ldr	r1, [r0, #0]
 800efaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800efae:	6001      	str	r1, [r0, #0]
 800efb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800efb2:	bf00      	nop
 800efb4:	e000ed88 	.word	0xe000ed88

0800efb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800efb8:	b480      	push	{r7}
 800efba:	b085      	sub	sp, #20
 800efbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800efbe:	f3ef 8305 	mrs	r3, IPSR
 800efc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2b0f      	cmp	r3, #15
 800efc8:	d915      	bls.n	800eff6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800efca:	4a18      	ldr	r2, [pc, #96]	@ (800f02c <vPortValidateInterruptPriority+0x74>)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	4413      	add	r3, r2
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800efd4:	4b16      	ldr	r3, [pc, #88]	@ (800f030 <vPortValidateInterruptPriority+0x78>)
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	7afa      	ldrb	r2, [r7, #11]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d20b      	bcs.n	800eff6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800efde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efe2:	f383 8811 	msr	BASEPRI, r3
 800efe6:	f3bf 8f6f 	isb	sy
 800efea:	f3bf 8f4f 	dsb	sy
 800efee:	607b      	str	r3, [r7, #4]
}
 800eff0:	bf00      	nop
 800eff2:	bf00      	nop
 800eff4:	e7fd      	b.n	800eff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eff6:	4b0f      	ldr	r3, [pc, #60]	@ (800f034 <vPortValidateInterruptPriority+0x7c>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800effe:	4b0e      	ldr	r3, [pc, #56]	@ (800f038 <vPortValidateInterruptPriority+0x80>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	429a      	cmp	r2, r3
 800f004:	d90b      	bls.n	800f01e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f00a:	f383 8811 	msr	BASEPRI, r3
 800f00e:	f3bf 8f6f 	isb	sy
 800f012:	f3bf 8f4f 	dsb	sy
 800f016:	603b      	str	r3, [r7, #0]
}
 800f018:	bf00      	nop
 800f01a:	bf00      	nop
 800f01c:	e7fd      	b.n	800f01a <vPortValidateInterruptPriority+0x62>
	}
 800f01e:	bf00      	nop
 800f020:	3714      	adds	r7, #20
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop
 800f02c:	e000e3f0 	.word	0xe000e3f0
 800f030:	20002d60 	.word	0x20002d60
 800f034:	e000ed0c 	.word	0xe000ed0c
 800f038:	20002d64 	.word	0x20002d64

0800f03c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b08a      	sub	sp, #40	@ 0x28
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f044:	2300      	movs	r3, #0
 800f046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f048:	f7fe fd74 	bl	800db34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f04c:	4b5c      	ldr	r3, [pc, #368]	@ (800f1c0 <pvPortMalloc+0x184>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d101      	bne.n	800f058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f054:	f000 f924 	bl	800f2a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f058:	4b5a      	ldr	r3, [pc, #360]	@ (800f1c4 <pvPortMalloc+0x188>)
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4013      	ands	r3, r2
 800f060:	2b00      	cmp	r3, #0
 800f062:	f040 8095 	bne.w	800f190 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d01e      	beq.n	800f0aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f06c:	2208      	movs	r2, #8
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4413      	add	r3, r2
 800f072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f003 0307 	and.w	r3, r3, #7
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d015      	beq.n	800f0aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f023 0307 	bic.w	r3, r3, #7
 800f084:	3308      	adds	r3, #8
 800f086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f003 0307 	and.w	r3, r3, #7
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00b      	beq.n	800f0aa <pvPortMalloc+0x6e>
	__asm volatile
 800f092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f096:	f383 8811 	msr	BASEPRI, r3
 800f09a:	f3bf 8f6f 	isb	sy
 800f09e:	f3bf 8f4f 	dsb	sy
 800f0a2:	617b      	str	r3, [r7, #20]
}
 800f0a4:	bf00      	nop
 800f0a6:	bf00      	nop
 800f0a8:	e7fd      	b.n	800f0a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d06f      	beq.n	800f190 <pvPortMalloc+0x154>
 800f0b0:	4b45      	ldr	r3, [pc, #276]	@ (800f1c8 <pvPortMalloc+0x18c>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d86a      	bhi.n	800f190 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f0ba:	4b44      	ldr	r3, [pc, #272]	@ (800f1cc <pvPortMalloc+0x190>)
 800f0bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f0be:	4b43      	ldr	r3, [pc, #268]	@ (800f1cc <pvPortMalloc+0x190>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0c4:	e004      	b.n	800f0d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d903      	bls.n	800f0e2 <pvPortMalloc+0xa6>
 800f0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1f1      	bne.n	800f0c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f0e2:	4b37      	ldr	r3, [pc, #220]	@ (800f1c0 <pvPortMalloc+0x184>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d051      	beq.n	800f190 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0ec:	6a3b      	ldr	r3, [r7, #32]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2208      	movs	r2, #8
 800f0f2:	4413      	add	r3, r2
 800f0f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	6a3b      	ldr	r3, [r7, #32]
 800f0fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f100:	685a      	ldr	r2, [r3, #4]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	1ad2      	subs	r2, r2, r3
 800f106:	2308      	movs	r3, #8
 800f108:	005b      	lsls	r3, r3, #1
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d920      	bls.n	800f150 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f10e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4413      	add	r3, r2
 800f114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	f003 0307 	and.w	r3, r3, #7
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00b      	beq.n	800f138 <pvPortMalloc+0xfc>
	__asm volatile
 800f120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	613b      	str	r3, [r7, #16]
}
 800f132:	bf00      	nop
 800f134:	bf00      	nop
 800f136:	e7fd      	b.n	800f134 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	1ad2      	subs	r2, r2, r3
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f14a:	69b8      	ldr	r0, [r7, #24]
 800f14c:	f000 f90a 	bl	800f364 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f150:	4b1d      	ldr	r3, [pc, #116]	@ (800f1c8 <pvPortMalloc+0x18c>)
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	1ad3      	subs	r3, r2, r3
 800f15a:	4a1b      	ldr	r2, [pc, #108]	@ (800f1c8 <pvPortMalloc+0x18c>)
 800f15c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f15e:	4b1a      	ldr	r3, [pc, #104]	@ (800f1c8 <pvPortMalloc+0x18c>)
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	4b1b      	ldr	r3, [pc, #108]	@ (800f1d0 <pvPortMalloc+0x194>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	429a      	cmp	r2, r3
 800f168:	d203      	bcs.n	800f172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f16a:	4b17      	ldr	r3, [pc, #92]	@ (800f1c8 <pvPortMalloc+0x18c>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	4a18      	ldr	r2, [pc, #96]	@ (800f1d0 <pvPortMalloc+0x194>)
 800f170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f174:	685a      	ldr	r2, [r3, #4]
 800f176:	4b13      	ldr	r3, [pc, #76]	@ (800f1c4 <pvPortMalloc+0x188>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	431a      	orrs	r2, r3
 800f17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f17e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f182:	2200      	movs	r2, #0
 800f184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f186:	4b13      	ldr	r3, [pc, #76]	@ (800f1d4 <pvPortMalloc+0x198>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3301      	adds	r3, #1
 800f18c:	4a11      	ldr	r2, [pc, #68]	@ (800f1d4 <pvPortMalloc+0x198>)
 800f18e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f190:	f7fe fcde 	bl	800db50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	f003 0307 	and.w	r3, r3, #7
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00b      	beq.n	800f1b6 <pvPortMalloc+0x17a>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	60fb      	str	r3, [r7, #12]
}
 800f1b0:	bf00      	nop
 800f1b2:	bf00      	nop
 800f1b4:	e7fd      	b.n	800f1b2 <pvPortMalloc+0x176>
	return pvReturn;
 800f1b6:	69fb      	ldr	r3, [r7, #28]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3728      	adds	r7, #40	@ 0x28
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	2000e8f0 	.word	0x2000e8f0
 800f1c4:	2000e904 	.word	0x2000e904
 800f1c8:	2000e8f4 	.word	0x2000e8f4
 800f1cc:	2000e8e8 	.word	0x2000e8e8
 800f1d0:	2000e8f8 	.word	0x2000e8f8
 800f1d4:	2000e8fc 	.word	0x2000e8fc

0800f1d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b086      	sub	sp, #24
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d04f      	beq.n	800f28a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f1ea:	2308      	movs	r3, #8
 800f1ec:	425b      	negs	r3, r3
 800f1ee:	697a      	ldr	r2, [r7, #20]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	685a      	ldr	r2, [r3, #4]
 800f1fc:	4b25      	ldr	r3, [pc, #148]	@ (800f294 <vPortFree+0xbc>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4013      	ands	r3, r2
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10b      	bne.n	800f21e <vPortFree+0x46>
	__asm volatile
 800f206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	60fb      	str	r3, [r7, #12]
}
 800f218:	bf00      	nop
 800f21a:	bf00      	nop
 800f21c:	e7fd      	b.n	800f21a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00b      	beq.n	800f23e <vPortFree+0x66>
	__asm volatile
 800f226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f22a:	f383 8811 	msr	BASEPRI, r3
 800f22e:	f3bf 8f6f 	isb	sy
 800f232:	f3bf 8f4f 	dsb	sy
 800f236:	60bb      	str	r3, [r7, #8]
}
 800f238:	bf00      	nop
 800f23a:	bf00      	nop
 800f23c:	e7fd      	b.n	800f23a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	685a      	ldr	r2, [r3, #4]
 800f242:	4b14      	ldr	r3, [pc, #80]	@ (800f294 <vPortFree+0xbc>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4013      	ands	r3, r2
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d01e      	beq.n	800f28a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d11a      	bne.n	800f28a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	685a      	ldr	r2, [r3, #4]
 800f258:	4b0e      	ldr	r3, [pc, #56]	@ (800f294 <vPortFree+0xbc>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	43db      	mvns	r3, r3
 800f25e:	401a      	ands	r2, r3
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f264:	f7fe fc66 	bl	800db34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	685a      	ldr	r2, [r3, #4]
 800f26c:	4b0a      	ldr	r3, [pc, #40]	@ (800f298 <vPortFree+0xc0>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4413      	add	r3, r2
 800f272:	4a09      	ldr	r2, [pc, #36]	@ (800f298 <vPortFree+0xc0>)
 800f274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f276:	6938      	ldr	r0, [r7, #16]
 800f278:	f000 f874 	bl	800f364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f27c:	4b07      	ldr	r3, [pc, #28]	@ (800f29c <vPortFree+0xc4>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	3301      	adds	r3, #1
 800f282:	4a06      	ldr	r2, [pc, #24]	@ (800f29c <vPortFree+0xc4>)
 800f284:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f286:	f7fe fc63 	bl	800db50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f28a:	bf00      	nop
 800f28c:	3718      	adds	r7, #24
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	2000e904 	.word	0x2000e904
 800f298:	2000e8f4 	.word	0x2000e8f4
 800f29c:	2000e900 	.word	0x2000e900

0800f2a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f2aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f2ac:	4b27      	ldr	r3, [pc, #156]	@ (800f34c <prvHeapInit+0xac>)
 800f2ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f003 0307 	and.w	r3, r3, #7
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00c      	beq.n	800f2d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	3307      	adds	r3, #7
 800f2be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f023 0307 	bic.w	r3, r3, #7
 800f2c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f2c8:	68ba      	ldr	r2, [r7, #8]
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	4a1f      	ldr	r2, [pc, #124]	@ (800f34c <prvHeapInit+0xac>)
 800f2d0:	4413      	add	r3, r2
 800f2d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800f350 <prvHeapInit+0xb0>)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f2de:	4b1c      	ldr	r3, [pc, #112]	@ (800f350 <prvHeapInit+0xb0>)
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	68ba      	ldr	r2, [r7, #8]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f2ec:	2208      	movs	r2, #8
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	1a9b      	subs	r3, r3, r2
 800f2f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f023 0307 	bic.w	r3, r3, #7
 800f2fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	4a15      	ldr	r2, [pc, #84]	@ (800f354 <prvHeapInit+0xb4>)
 800f300:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f302:	4b14      	ldr	r3, [pc, #80]	@ (800f354 <prvHeapInit+0xb4>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2200      	movs	r2, #0
 800f308:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f30a:	4b12      	ldr	r3, [pc, #72]	@ (800f354 <prvHeapInit+0xb4>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2200      	movs	r2, #0
 800f310:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	1ad2      	subs	r2, r2, r3
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f320:	4b0c      	ldr	r3, [pc, #48]	@ (800f354 <prvHeapInit+0xb4>)
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	4a0a      	ldr	r2, [pc, #40]	@ (800f358 <prvHeapInit+0xb8>)
 800f32e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	4a09      	ldr	r2, [pc, #36]	@ (800f35c <prvHeapInit+0xbc>)
 800f336:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f338:	4b09      	ldr	r3, [pc, #36]	@ (800f360 <prvHeapInit+0xc0>)
 800f33a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f33e:	601a      	str	r2, [r3, #0]
}
 800f340:	bf00      	nop
 800f342:	3714      	adds	r7, #20
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr
 800f34c:	20002d68 	.word	0x20002d68
 800f350:	2000e8e8 	.word	0x2000e8e8
 800f354:	2000e8f0 	.word	0x2000e8f0
 800f358:	2000e8f8 	.word	0x2000e8f8
 800f35c:	2000e8f4 	.word	0x2000e8f4
 800f360:	2000e904 	.word	0x2000e904

0800f364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f364:	b480      	push	{r7}
 800f366:	b085      	sub	sp, #20
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f36c:	4b28      	ldr	r3, [pc, #160]	@ (800f410 <prvInsertBlockIntoFreeList+0xac>)
 800f36e:	60fb      	str	r3, [r7, #12]
 800f370:	e002      	b.n	800f378 <prvInsertBlockIntoFreeList+0x14>
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	60fb      	str	r3, [r7, #12]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d8f7      	bhi.n	800f372 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	68ba      	ldr	r2, [r7, #8]
 800f38c:	4413      	add	r3, r2
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	429a      	cmp	r2, r3
 800f392:	d108      	bne.n	800f3a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	685a      	ldr	r2, [r3, #4]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	441a      	add	r2, r3
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	68ba      	ldr	r2, [r7, #8]
 800f3b0:	441a      	add	r2, r3
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d118      	bne.n	800f3ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	4b15      	ldr	r3, [pc, #84]	@ (800f414 <prvInsertBlockIntoFreeList+0xb0>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d00d      	beq.n	800f3e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685a      	ldr	r2, [r3, #4]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	441a      	add	r2, r3
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	601a      	str	r2, [r3, #0]
 800f3e0:	e008      	b.n	800f3f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800f414 <prvInsertBlockIntoFreeList+0xb0>)
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	601a      	str	r2, [r3, #0]
 800f3ea:	e003      	b.n	800f3f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d002      	beq.n	800f402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f402:	bf00      	nop
 800f404:	3714      	adds	r7, #20
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	2000e8e8 	.word	0x2000e8e8
 800f414:	2000e8f0 	.word	0x2000e8f0

0800f418 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f41c:	2200      	movs	r2, #0
 800f41e:	4912      	ldr	r1, [pc, #72]	@ (800f468 <MX_USB_Device_Init+0x50>)
 800f420:	4812      	ldr	r0, [pc, #72]	@ (800f46c <MX_USB_Device_Init+0x54>)
 800f422:	f7fb fef5 	bl	800b210 <USBD_Init>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d001      	beq.n	800f430 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800f42c:	f7f2 fcae 	bl	8001d8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f430:	490f      	ldr	r1, [pc, #60]	@ (800f470 <MX_USB_Device_Init+0x58>)
 800f432:	480e      	ldr	r0, [pc, #56]	@ (800f46c <MX_USB_Device_Init+0x54>)
 800f434:	f7fb ff1c 	bl	800b270 <USBD_RegisterClass>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800f43e:	f7f2 fca5 	bl	8001d8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f442:	490c      	ldr	r1, [pc, #48]	@ (800f474 <MX_USB_Device_Init+0x5c>)
 800f444:	4809      	ldr	r0, [pc, #36]	@ (800f46c <MX_USB_Device_Init+0x54>)
 800f446:	f7fb fe3d 	bl	800b0c4 <USBD_CDC_RegisterInterface>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d001      	beq.n	800f454 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800f450:	f7f2 fc9c 	bl	8001d8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f454:	4805      	ldr	r0, [pc, #20]	@ (800f46c <MX_USB_Device_Init+0x54>)
 800f456:	f7fb ff32 	bl	800b2be <USBD_Start>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d001      	beq.n	800f464 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800f460:	f7f2 fc94 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f464:	bf00      	nop
 800f466:	bd80      	pop	{r7, pc}
 800f468:	20000134 	.word	0x20000134
 800f46c:	2000e908 	.word	0x2000e908
 800f470:	20000018 	.word	0x20000018
 800f474:	20000120 	.word	0x20000120

0800f478 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f47c:	2200      	movs	r2, #0
 800f47e:	4905      	ldr	r1, [pc, #20]	@ (800f494 <CDC_Init_FS+0x1c>)
 800f480:	4805      	ldr	r0, [pc, #20]	@ (800f498 <CDC_Init_FS+0x20>)
 800f482:	f7fb fe34 	bl	800b0ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f486:	4905      	ldr	r1, [pc, #20]	@ (800f49c <CDC_Init_FS+0x24>)
 800f488:	4803      	ldr	r0, [pc, #12]	@ (800f498 <CDC_Init_FS+0x20>)
 800f48a:	f7fb fe4e 	bl	800b12a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f48e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f490:	4618      	mov	r0, r3
 800f492:	bd80      	pop	{r7, pc}
 800f494:	2000f3d8 	.word	0x2000f3d8
 800f498:	2000e908 	.word	0x2000e908
 800f49c:	2000ebd8 	.word	0x2000ebd8

0800f4a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f4a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	6039      	str	r1, [r7, #0]
 800f4ba:	71fb      	strb	r3, [r7, #7]
 800f4bc:	4613      	mov	r3, r2
 800f4be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f4c0:	79fb      	ldrb	r3, [r7, #7]
 800f4c2:	2b23      	cmp	r3, #35	@ 0x23
 800f4c4:	d84a      	bhi.n	800f55c <CDC_Control_FS+0xac>
 800f4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4cc <CDC_Control_FS+0x1c>)
 800f4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4cc:	0800f55d 	.word	0x0800f55d
 800f4d0:	0800f55d 	.word	0x0800f55d
 800f4d4:	0800f55d 	.word	0x0800f55d
 800f4d8:	0800f55d 	.word	0x0800f55d
 800f4dc:	0800f55d 	.word	0x0800f55d
 800f4e0:	0800f55d 	.word	0x0800f55d
 800f4e4:	0800f55d 	.word	0x0800f55d
 800f4e8:	0800f55d 	.word	0x0800f55d
 800f4ec:	0800f55d 	.word	0x0800f55d
 800f4f0:	0800f55d 	.word	0x0800f55d
 800f4f4:	0800f55d 	.word	0x0800f55d
 800f4f8:	0800f55d 	.word	0x0800f55d
 800f4fc:	0800f55d 	.word	0x0800f55d
 800f500:	0800f55d 	.word	0x0800f55d
 800f504:	0800f55d 	.word	0x0800f55d
 800f508:	0800f55d 	.word	0x0800f55d
 800f50c:	0800f55d 	.word	0x0800f55d
 800f510:	0800f55d 	.word	0x0800f55d
 800f514:	0800f55d 	.word	0x0800f55d
 800f518:	0800f55d 	.word	0x0800f55d
 800f51c:	0800f55d 	.word	0x0800f55d
 800f520:	0800f55d 	.word	0x0800f55d
 800f524:	0800f55d 	.word	0x0800f55d
 800f528:	0800f55d 	.word	0x0800f55d
 800f52c:	0800f55d 	.word	0x0800f55d
 800f530:	0800f55d 	.word	0x0800f55d
 800f534:	0800f55d 	.word	0x0800f55d
 800f538:	0800f55d 	.word	0x0800f55d
 800f53c:	0800f55d 	.word	0x0800f55d
 800f540:	0800f55d 	.word	0x0800f55d
 800f544:	0800f55d 	.word	0x0800f55d
 800f548:	0800f55d 	.word	0x0800f55d
 800f54c:	0800f55d 	.word	0x0800f55d
 800f550:	0800f55d 	.word	0x0800f55d
 800f554:	0800f55d 	.word	0x0800f55d
 800f558:	0800f55d 	.word	0x0800f55d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f55c:	bf00      	nop
  }

  return (USBD_OK);
 800f55e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f560:	4618      	mov	r0, r3
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f576:	6879      	ldr	r1, [r7, #4]
 800f578:	4805      	ldr	r0, [pc, #20]	@ (800f590 <CDC_Receive_FS+0x24>)
 800f57a:	f7fb fdd6 	bl	800b12a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f57e:	4804      	ldr	r0, [pc, #16]	@ (800f590 <CDC_Receive_FS+0x24>)
 800f580:	f7fb fe1c 	bl	800b1bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f584:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f586:	4618      	mov	r0, r3
 800f588:	3708      	adds	r7, #8
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	2000e908 	.word	0x2000e908

0800f594 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	460b      	mov	r3, r1
 800f59e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f5a4:	4b0d      	ldr	r3, [pc, #52]	@ (800f5dc <CDC_Transmit_FS+0x48>)
 800f5a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f5aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d001      	beq.n	800f5ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	e00b      	b.n	800f5d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f5ba:	887b      	ldrh	r3, [r7, #2]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	6879      	ldr	r1, [r7, #4]
 800f5c0:	4806      	ldr	r0, [pc, #24]	@ (800f5dc <CDC_Transmit_FS+0x48>)
 800f5c2:	f7fb fd94 	bl	800b0ee <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f5c6:	4805      	ldr	r0, [pc, #20]	@ (800f5dc <CDC_Transmit_FS+0x48>)
 800f5c8:	f7fb fdc8 	bl	800b15c <USBD_CDC_TransmitPacket>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	2000e908 	.word	0x2000e908

0800f5e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b087      	sub	sp, #28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f5f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	371c      	adds	r7, #28
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr
	...

0800f604 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	4603      	mov	r3, r0
 800f60c:	6039      	str	r1, [r7, #0]
 800f60e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	2212      	movs	r2, #18
 800f614:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f616:	4b03      	ldr	r3, [pc, #12]	@ (800f624 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f618:	4618      	mov	r0, r3
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr
 800f624:	20000154 	.word	0x20000154

0800f628 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	4603      	mov	r3, r0
 800f630:	6039      	str	r1, [r7, #0]
 800f632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	2204      	movs	r2, #4
 800f638:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f63a:	4b03      	ldr	r3, [pc, #12]	@ (800f648 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr
 800f648:	20000168 	.word	0x20000168

0800f64c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	4603      	mov	r3, r0
 800f654:	6039      	str	r1, [r7, #0]
 800f656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f658:	79fb      	ldrb	r3, [r7, #7]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d105      	bne.n	800f66a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f65e:	683a      	ldr	r2, [r7, #0]
 800f660:	4907      	ldr	r1, [pc, #28]	@ (800f680 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f662:	4808      	ldr	r0, [pc, #32]	@ (800f684 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f664:	f7fc fe13 	bl	800c28e <USBD_GetString>
 800f668:	e004      	b.n	800f674 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f66a:	683a      	ldr	r2, [r7, #0]
 800f66c:	4904      	ldr	r1, [pc, #16]	@ (800f680 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f66e:	4805      	ldr	r0, [pc, #20]	@ (800f684 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f670:	f7fc fe0d 	bl	800c28e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f674:	4b02      	ldr	r3, [pc, #8]	@ (800f680 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f676:	4618      	mov	r0, r3
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	2000fbd8 	.word	0x2000fbd8
 800f684:	08012e70 	.word	0x08012e70

0800f688 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	4603      	mov	r3, r0
 800f690:	6039      	str	r1, [r7, #0]
 800f692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	4904      	ldr	r1, [pc, #16]	@ (800f6a8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f698:	4804      	ldr	r0, [pc, #16]	@ (800f6ac <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f69a:	f7fc fdf8 	bl	800c28e <USBD_GetString>
  return USBD_StrDesc;
 800f69e:	4b02      	ldr	r3, [pc, #8]	@ (800f6a8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	2000fbd8 	.word	0x2000fbd8
 800f6ac:	08012e88 	.word	0x08012e88

0800f6b0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	6039      	str	r1, [r7, #0]
 800f6ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	221a      	movs	r2, #26
 800f6c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f6c2:	f000 f843 	bl	800f74c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f6c6:	4b02      	ldr	r3, [pc, #8]	@ (800f6d0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	2000016c 	.word	0x2000016c

0800f6d4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	6039      	str	r1, [r7, #0]
 800f6de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f6e0:	79fb      	ldrb	r3, [r7, #7]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d105      	bne.n	800f6f2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f6e6:	683a      	ldr	r2, [r7, #0]
 800f6e8:	4907      	ldr	r1, [pc, #28]	@ (800f708 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f6ea:	4808      	ldr	r0, [pc, #32]	@ (800f70c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f6ec:	f7fc fdcf 	bl	800c28e <USBD_GetString>
 800f6f0:	e004      	b.n	800f6fc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	4904      	ldr	r1, [pc, #16]	@ (800f708 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f6f6:	4805      	ldr	r0, [pc, #20]	@ (800f70c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f6f8:	f7fc fdc9 	bl	800c28e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6fc:	4b02      	ldr	r3, [pc, #8]	@ (800f708 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3708      	adds	r7, #8
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	2000fbd8 	.word	0x2000fbd8
 800f70c:	08012e9c 	.word	0x08012e9c

0800f710 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	6039      	str	r1, [r7, #0]
 800f71a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f71c:	79fb      	ldrb	r3, [r7, #7]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d105      	bne.n	800f72e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f722:	683a      	ldr	r2, [r7, #0]
 800f724:	4907      	ldr	r1, [pc, #28]	@ (800f744 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f726:	4808      	ldr	r0, [pc, #32]	@ (800f748 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f728:	f7fc fdb1 	bl	800c28e <USBD_GetString>
 800f72c:	e004      	b.n	800f738 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	4904      	ldr	r1, [pc, #16]	@ (800f744 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f732:	4805      	ldr	r0, [pc, #20]	@ (800f748 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f734:	f7fc fdab 	bl	800c28e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f738:	4b02      	ldr	r3, [pc, #8]	@ (800f744 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	2000fbd8 	.word	0x2000fbd8
 800f748:	08012ea8 	.word	0x08012ea8

0800f74c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f752:	4b0f      	ldr	r3, [pc, #60]	@ (800f790 <Get_SerialNum+0x44>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f758:	4b0e      	ldr	r3, [pc, #56]	@ (800f794 <Get_SerialNum+0x48>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f75e:	4b0e      	ldr	r3, [pc, #56]	@ (800f798 <Get_SerialNum+0x4c>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4413      	add	r3, r2
 800f76a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d009      	beq.n	800f786 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f772:	2208      	movs	r2, #8
 800f774:	4909      	ldr	r1, [pc, #36]	@ (800f79c <Get_SerialNum+0x50>)
 800f776:	68f8      	ldr	r0, [r7, #12]
 800f778:	f000 f814 	bl	800f7a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f77c:	2204      	movs	r2, #4
 800f77e:	4908      	ldr	r1, [pc, #32]	@ (800f7a0 <Get_SerialNum+0x54>)
 800f780:	68b8      	ldr	r0, [r7, #8]
 800f782:	f000 f80f 	bl	800f7a4 <IntToUnicode>
  }
}
 800f786:	bf00      	nop
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	1fff7590 	.word	0x1fff7590
 800f794:	1fff7594 	.word	0x1fff7594
 800f798:	1fff7598 	.word	0x1fff7598
 800f79c:	2000016e 	.word	0x2000016e
 800f7a0:	2000017e 	.word	0x2000017e

0800f7a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b087      	sub	sp, #28
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	75fb      	strb	r3, [r7, #23]
 800f7ba:	e027      	b.n	800f80c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	0f1b      	lsrs	r3, r3, #28
 800f7c0:	2b09      	cmp	r3, #9
 800f7c2:	d80b      	bhi.n	800f7dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	0f1b      	lsrs	r3, r3, #28
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	7dfb      	ldrb	r3, [r7, #23]
 800f7cc:	005b      	lsls	r3, r3, #1
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	440b      	add	r3, r1
 800f7d4:	3230      	adds	r2, #48	@ 0x30
 800f7d6:	b2d2      	uxtb	r2, r2
 800f7d8:	701a      	strb	r2, [r3, #0]
 800f7da:	e00a      	b.n	800f7f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	0f1b      	lsrs	r3, r3, #28
 800f7e0:	b2da      	uxtb	r2, r3
 800f7e2:	7dfb      	ldrb	r3, [r7, #23]
 800f7e4:	005b      	lsls	r3, r3, #1
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	440b      	add	r3, r1
 800f7ec:	3237      	adds	r2, #55	@ 0x37
 800f7ee:	b2d2      	uxtb	r2, r2
 800f7f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	011b      	lsls	r3, r3, #4
 800f7f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f7f8:	7dfb      	ldrb	r3, [r7, #23]
 800f7fa:	005b      	lsls	r3, r3, #1
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	68ba      	ldr	r2, [r7, #8]
 800f800:	4413      	add	r3, r2
 800f802:	2200      	movs	r2, #0
 800f804:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f806:	7dfb      	ldrb	r3, [r7, #23]
 800f808:	3301      	adds	r3, #1
 800f80a:	75fb      	strb	r3, [r7, #23]
 800f80c:	7dfa      	ldrb	r2, [r7, #23]
 800f80e:	79fb      	ldrb	r3, [r7, #7]
 800f810:	429a      	cmp	r2, r3
 800f812:	d3d3      	bcc.n	800f7bc <IntToUnicode+0x18>
  }
}
 800f814:	bf00      	nop
 800f816:	bf00      	nop
 800f818:	371c      	adds	r7, #28
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
	...

0800f824 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b098      	sub	sp, #96	@ 0x60
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f82c:	f107 0310 	add.w	r3, r7, #16
 800f830:	2250      	movs	r2, #80	@ 0x50
 800f832:	2100      	movs	r1, #0
 800f834:	4618      	mov	r0, r3
 800f836:	f001 f84d 	bl	80108d4 <memset>
  if(pcdHandle->Instance==USB)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a15      	ldr	r2, [pc, #84]	@ (800f894 <HAL_PCD_MspInit+0x70>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d122      	bne.n	800f88a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f848:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f84a:	2300      	movs	r3, #0
 800f84c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f84e:	f107 0310 	add.w	r3, r7, #16
 800f852:	4618      	mov	r0, r3
 800f854:	f7f7 ff3e 	bl	80076d4 <HAL_RCCEx_PeriphCLKConfig>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d001      	beq.n	800f862 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f85e:	f7f2 fa95 	bl	8001d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f862:	4b0d      	ldr	r3, [pc, #52]	@ (800f898 <HAL_PCD_MspInit+0x74>)
 800f864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f866:	4a0c      	ldr	r2, [pc, #48]	@ (800f898 <HAL_PCD_MspInit+0x74>)
 800f868:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f86c:	6593      	str	r3, [r2, #88]	@ 0x58
 800f86e:	4b0a      	ldr	r3, [pc, #40]	@ (800f898 <HAL_PCD_MspInit+0x74>)
 800f870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f876:	60fb      	str	r3, [r7, #12]
 800f878:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800f87a:	2200      	movs	r2, #0
 800f87c:	2105      	movs	r1, #5
 800f87e:	2014      	movs	r0, #20
 800f880:	f7f4 f940 	bl	8003b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f884:	2014      	movs	r0, #20
 800f886:	f7f4 f957 	bl	8003b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f88a:	bf00      	nop
 800f88c:	3760      	adds	r7, #96	@ 0x60
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	40005c00 	.word	0x40005c00
 800f898:	40021000 	.word	0x40021000

0800f89c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	f7fb fd4e 	bl	800b354 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f8b8:	bf00      	nop
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f8d2:	78fa      	ldrb	r2, [r7, #3]
 800f8d4:	6879      	ldr	r1, [r7, #4]
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	4413      	add	r3, r2
 800f8dc:	00db      	lsls	r3, r3, #3
 800f8de:	440b      	add	r3, r1
 800f8e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	78fb      	ldrb	r3, [r7, #3]
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	f7fb fd88 	bl	800b3fe <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f8ee:	bf00      	nop
 800f8f0:	3708      	adds	r7, #8
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}

0800f8f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8f6:	b580      	push	{r7, lr}
 800f8f8:	b082      	sub	sp, #8
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
 800f8fe:	460b      	mov	r3, r1
 800f900:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f908:	78fa      	ldrb	r2, [r7, #3]
 800f90a:	6879      	ldr	r1, [r7, #4]
 800f90c:	4613      	mov	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	4413      	add	r3, r2
 800f912:	00db      	lsls	r3, r3, #3
 800f914:	440b      	add	r3, r1
 800f916:	3324      	adds	r3, #36	@ 0x24
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	78fb      	ldrb	r3, [r7, #3]
 800f91c:	4619      	mov	r1, r3
 800f91e:	f7fb fdd1 	bl	800b4c4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f922:	bf00      	nop
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}

0800f92a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f92a:	b580      	push	{r7, lr}
 800f92c:	b082      	sub	sp, #8
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fb fee5 	bl	800b708 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f93e:	bf00      	nop
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b084      	sub	sp, #16
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f94e:	2301      	movs	r3, #1
 800f950:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	795b      	ldrb	r3, [r3, #5]
 800f956:	2b02      	cmp	r3, #2
 800f958:	d001      	beq.n	800f95e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f95a:	f7f2 fa17 	bl	8001d8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f964:	7bfa      	ldrb	r2, [r7, #15]
 800f966:	4611      	mov	r1, r2
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fb fe8f 	bl	800b68c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f974:	4618      	mov	r0, r3
 800f976:	f7fb fe3b 	bl	800b5f0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f97a:	bf00      	nop
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
	...

0800f984 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f992:	4618      	mov	r0, r3
 800f994:	f7fb fe8a 	bl	800b6ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	7a5b      	ldrb	r3, [r3, #9]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d005      	beq.n	800f9ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f9a0:	4b04      	ldr	r3, [pc, #16]	@ (800f9b4 <HAL_PCD_SuspendCallback+0x30>)
 800f9a2:	691b      	ldr	r3, [r3, #16]
 800f9a4:	4a03      	ldr	r2, [pc, #12]	@ (800f9b4 <HAL_PCD_SuspendCallback+0x30>)
 800f9a6:	f043 0306 	orr.w	r3, r3, #6
 800f9aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f9ac:	bf00      	nop
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	e000ed00 	.word	0xe000ed00

0800f9b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	7a5b      	ldrb	r3, [r3, #9]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d007      	beq.n	800f9d8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f9c8:	4b08      	ldr	r3, [pc, #32]	@ (800f9ec <HAL_PCD_ResumeCallback+0x34>)
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	4a07      	ldr	r2, [pc, #28]	@ (800f9ec <HAL_PCD_ResumeCallback+0x34>)
 800f9ce:	f023 0306 	bic.w	r3, r3, #6
 800f9d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f9d4:	f000 f9f8 	bl	800fdc8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fb fe7a 	bl	800b6d8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f9e4:	bf00      	nop
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}
 800f9ec:	e000ed00 	.word	0xe000ed00

0800f9f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f9f8:	4a2b      	ldr	r2, [pc, #172]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4a29      	ldr	r2, [pc, #164]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800fa04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800fa08:	4b27      	ldr	r3, [pc, #156]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800fa0a:	4a28      	ldr	r2, [pc, #160]	@ (800faac <USBD_LL_Init+0xbc>)
 800fa0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fa0e:	4b26      	ldr	r3, [pc, #152]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800fa10:	2208      	movs	r2, #8
 800fa12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fa14:	4b24      	ldr	r3, [pc, #144]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800fa16:	2202      	movs	r2, #2
 800fa18:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fa1a:	4b23      	ldr	r3, [pc, #140]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800fa1c:	2202      	movs	r2, #2
 800fa1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800fa20:	4b21      	ldr	r3, [pc, #132]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800fa22:	2200      	movs	r2, #0
 800fa24:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800fa26:	4b20      	ldr	r3, [pc, #128]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800fa28:	2200      	movs	r2, #0
 800fa2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800fa2c:	4b1e      	ldr	r3, [pc, #120]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800fa32:	4b1d      	ldr	r3, [pc, #116]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800fa38:	481b      	ldr	r0, [pc, #108]	@ (800faa8 <USBD_LL_Init+0xb8>)
 800fa3a:	f7f5 fb36 	bl	80050aa <HAL_PCD_Init>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d001      	beq.n	800fa48 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800fa44:	f7f2 f9a2 	bl	8001d8c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fa4e:	2318      	movs	r3, #24
 800fa50:	2200      	movs	r2, #0
 800fa52:	2100      	movs	r1, #0
 800fa54:	f7f6 ffbd 	bl	80069d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fa5e:	2358      	movs	r3, #88	@ 0x58
 800fa60:	2200      	movs	r2, #0
 800fa62:	2180      	movs	r1, #128	@ 0x80
 800fa64:	f7f6 ffb5 	bl	80069d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fa6e:	23c0      	movs	r3, #192	@ 0xc0
 800fa70:	2200      	movs	r2, #0
 800fa72:	2181      	movs	r1, #129	@ 0x81
 800fa74:	f7f6 ffad 	bl	80069d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fa7e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800fa82:	2200      	movs	r2, #0
 800fa84:	2101      	movs	r1, #1
 800fa86:	f7f6 ffa4 	bl	80069d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fa90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa94:	2200      	movs	r2, #0
 800fa96:	2182      	movs	r1, #130	@ 0x82
 800fa98:	f7f6 ff9b 	bl	80069d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800fa9c:	2300      	movs	r3, #0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	2000fdd8 	.word	0x2000fdd8
 800faac:	40005c00 	.word	0x40005c00

0800fab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b084      	sub	sp, #16
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fab8:	2300      	movs	r3, #0
 800faba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fabc:	2300      	movs	r3, #0
 800fabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7f5 fbbd 	bl	8005246 <HAL_PCD_Start>
 800facc:	4603      	mov	r3, r0
 800face:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fad0:	7bfb      	ldrb	r3, [r7, #15]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f000 f97e 	bl	800fdd4 <USBD_Get_USB_Status>
 800fad8:	4603      	mov	r3, r0
 800fada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fadc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3710      	adds	r7, #16
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b084      	sub	sp, #16
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
 800faee:	4608      	mov	r0, r1
 800faf0:	4611      	mov	r1, r2
 800faf2:	461a      	mov	r2, r3
 800faf4:	4603      	mov	r3, r0
 800faf6:	70fb      	strb	r3, [r7, #3]
 800faf8:	460b      	mov	r3, r1
 800fafa:	70bb      	strb	r3, [r7, #2]
 800fafc:	4613      	mov	r3, r2
 800fafe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fb0e:	78bb      	ldrb	r3, [r7, #2]
 800fb10:	883a      	ldrh	r2, [r7, #0]
 800fb12:	78f9      	ldrb	r1, [r7, #3]
 800fb14:	f7f5 fd04 	bl	8005520 <HAL_PCD_EP_Open>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb1c:	7bfb      	ldrb	r3, [r7, #15]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f000 f958 	bl	800fdd4 <USBD_Get_USB_Status>
 800fb24:	4603      	mov	r3, r0
 800fb26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb28:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3710      	adds	r7, #16
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b084      	sub	sp, #16
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fb4c:	78fa      	ldrb	r2, [r7, #3]
 800fb4e:	4611      	mov	r1, r2
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7f5 fd44 	bl	80055de <HAL_PCD_EP_Close>
 800fb56:	4603      	mov	r3, r0
 800fb58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb5a:	7bfb      	ldrb	r3, [r7, #15]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 f939 	bl	800fdd4 <USBD_Get_USB_Status>
 800fb62:	4603      	mov	r3, r0
 800fb64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb66:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb80:	2300      	movs	r3, #0
 800fb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fb8a:	78fa      	ldrb	r2, [r7, #3]
 800fb8c:	4611      	mov	r1, r2
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7f5 fded 	bl	800576e <HAL_PCD_EP_SetStall>
 800fb94:	4603      	mov	r3, r0
 800fb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 f91a 	bl	800fdd4 <USBD_Get_USB_Status>
 800fba0:	4603      	mov	r3, r0
 800fba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b084      	sub	sp, #16
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fbc8:	78fa      	ldrb	r2, [r7, #3]
 800fbca:	4611      	mov	r1, r2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7f5 fe20 	bl	8005812 <HAL_PCD_EP_ClrStall>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbd6:	7bfb      	ldrb	r3, [r7, #15]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f000 f8fb 	bl	800fdd4 <USBD_Get_USB_Status>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fbfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fc00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	da0b      	bge.n	800fc20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fc08:	78fb      	ldrb	r3, [r7, #3]
 800fc0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc0e:	68f9      	ldr	r1, [r7, #12]
 800fc10:	4613      	mov	r3, r2
 800fc12:	009b      	lsls	r3, r3, #2
 800fc14:	4413      	add	r3, r2
 800fc16:	00db      	lsls	r3, r3, #3
 800fc18:	440b      	add	r3, r1
 800fc1a:	3312      	adds	r3, #18
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	e00b      	b.n	800fc38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fc20:	78fb      	ldrb	r3, [r7, #3]
 800fc22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc26:	68f9      	ldr	r1, [r7, #12]
 800fc28:	4613      	mov	r3, r2
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	4413      	add	r3, r2
 800fc2e:	00db      	lsls	r3, r3, #3
 800fc30:	440b      	add	r3, r1
 800fc32:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800fc36:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3714      	adds	r7, #20
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc50:	2300      	movs	r3, #0
 800fc52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc54:	2300      	movs	r3, #0
 800fc56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fc5e:	78fa      	ldrb	r2, [r7, #3]
 800fc60:	4611      	mov	r1, r2
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7f5 fc38 	bl	80054d8 <HAL_PCD_SetAddress>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc6c:	7bfb      	ldrb	r3, [r7, #15]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f000 f8b0 	bl	800fdd4 <USBD_Get_USB_Status>
 800fc74:	4603      	mov	r3, r0
 800fc76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc78:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b086      	sub	sp, #24
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	60f8      	str	r0, [r7, #12]
 800fc8a:	607a      	str	r2, [r7, #4]
 800fc8c:	603b      	str	r3, [r7, #0]
 800fc8e:	460b      	mov	r3, r1
 800fc90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc92:	2300      	movs	r3, #0
 800fc94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc96:	2300      	movs	r3, #0
 800fc98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fca0:	7af9      	ldrb	r1, [r7, #11]
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	f7f5 fd2b 	bl	8005700 <HAL_PCD_EP_Transmit>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcae:	7dfb      	ldrb	r3, [r7, #23]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f000 f88f 	bl	800fdd4 <USBD_Get_USB_Status>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fcba:	7dbb      	ldrb	r3, [r7, #22]
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3718      	adds	r7, #24
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	607a      	str	r2, [r7, #4]
 800fcce:	603b      	str	r3, [r7, #0]
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fce2:	7af9      	ldrb	r1, [r7, #11]
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	687a      	ldr	r2, [r7, #4]
 800fce8:	f7f5 fcc1 	bl	800566e <HAL_PCD_EP_Receive>
 800fcec:	4603      	mov	r3, r0
 800fcee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcf0:	7dfb      	ldrb	r3, [r7, #23]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f000 f86e 	bl	800fdd4 <USBD_Get_USB_Status>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fcfc:	7dbb      	ldrb	r3, [r7, #22]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3718      	adds	r7, #24
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}

0800fd06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd06:	b580      	push	{r7, lr}
 800fd08:	b082      	sub	sp, #8
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
 800fd0e:	460b      	mov	r3, r1
 800fd10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fd18:	78fa      	ldrb	r2, [r7, #3]
 800fd1a:	4611      	mov	r1, r2
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7f5 fcd7 	bl	80056d0 <HAL_PCD_EP_GetRxCount>
 800fd22:	4603      	mov	r3, r0
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3708      	adds	r7, #8
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	460b      	mov	r3, r1
 800fd36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800fd38:	78fb      	ldrb	r3, [r7, #3]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d002      	beq.n	800fd44 <HAL_PCDEx_LPM_Callback+0x18>
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d013      	beq.n	800fd6a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800fd42:	e023      	b.n	800fd8c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	7a5b      	ldrb	r3, [r3, #9]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d007      	beq.n	800fd5c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fd4c:	f000 f83c 	bl	800fdc8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd50:	4b10      	ldr	r3, [pc, #64]	@ (800fd94 <HAL_PCDEx_LPM_Callback+0x68>)
 800fd52:	691b      	ldr	r3, [r3, #16]
 800fd54:	4a0f      	ldr	r2, [pc, #60]	@ (800fd94 <HAL_PCDEx_LPM_Callback+0x68>)
 800fd56:	f023 0306 	bic.w	r3, r3, #6
 800fd5a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fb fcb8 	bl	800b6d8 <USBD_LL_Resume>
    break;
 800fd68:	e010      	b.n	800fd8c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fb fc9b 	bl	800b6ac <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	7a5b      	ldrb	r3, [r3, #9]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d005      	beq.n	800fd8a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd7e:	4b05      	ldr	r3, [pc, #20]	@ (800fd94 <HAL_PCDEx_LPM_Callback+0x68>)
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	4a04      	ldr	r2, [pc, #16]	@ (800fd94 <HAL_PCDEx_LPM_Callback+0x68>)
 800fd84:	f043 0306 	orr.w	r3, r3, #6
 800fd88:	6113      	str	r3, [r2, #16]
    break;
 800fd8a:	bf00      	nop
}
 800fd8c:	bf00      	nop
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	e000ed00 	.word	0xe000ed00

0800fd98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fda0:	4b03      	ldr	r3, [pc, #12]	@ (800fdb0 <USBD_static_malloc+0x18>)
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	370c      	adds	r7, #12
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr
 800fdae:	bf00      	nop
 800fdb0:	200100b4 	.word	0x200100b4

0800fdb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]

}
 800fdbc:	bf00      	nop
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fdcc:	f7f1 fcf0 	bl	80017b0 <SystemClock_Config>
}
 800fdd0:	bf00      	nop
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b085      	sub	sp, #20
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	4603      	mov	r3, r0
 800fddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdde:	2300      	movs	r3, #0
 800fde0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fde2:	79fb      	ldrb	r3, [r7, #7]
 800fde4:	2b03      	cmp	r3, #3
 800fde6:	d817      	bhi.n	800fe18 <USBD_Get_USB_Status+0x44>
 800fde8:	a201      	add	r2, pc, #4	@ (adr r2, 800fdf0 <USBD_Get_USB_Status+0x1c>)
 800fdea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdee:	bf00      	nop
 800fdf0:	0800fe01 	.word	0x0800fe01
 800fdf4:	0800fe07 	.word	0x0800fe07
 800fdf8:	0800fe0d 	.word	0x0800fe0d
 800fdfc:	0800fe13 	.word	0x0800fe13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe00:	2300      	movs	r3, #0
 800fe02:	73fb      	strb	r3, [r7, #15]
    break;
 800fe04:	e00b      	b.n	800fe1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe06:	2303      	movs	r3, #3
 800fe08:	73fb      	strb	r3, [r7, #15]
    break;
 800fe0a:	e008      	b.n	800fe1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe10:	e005      	b.n	800fe1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe12:	2303      	movs	r3, #3
 800fe14:	73fb      	strb	r3, [r7, #15]
    break;
 800fe16:	e002      	b.n	800fe1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe18:	2303      	movs	r3, #3
 800fe1a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe1c:	bf00      	nop
  }
  return usb_status;
 800fe1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3714      	adds	r7, #20
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr

0800fe2c <__cvt>:
 800fe2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe30:	ec57 6b10 	vmov	r6, r7, d0
 800fe34:	2f00      	cmp	r7, #0
 800fe36:	460c      	mov	r4, r1
 800fe38:	4619      	mov	r1, r3
 800fe3a:	463b      	mov	r3, r7
 800fe3c:	bfbb      	ittet	lt
 800fe3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fe42:	461f      	movlt	r7, r3
 800fe44:	2300      	movge	r3, #0
 800fe46:	232d      	movlt	r3, #45	@ 0x2d
 800fe48:	700b      	strb	r3, [r1, #0]
 800fe4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fe50:	4691      	mov	r9, r2
 800fe52:	f023 0820 	bic.w	r8, r3, #32
 800fe56:	bfbc      	itt	lt
 800fe58:	4632      	movlt	r2, r6
 800fe5a:	4616      	movlt	r6, r2
 800fe5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fe60:	d005      	beq.n	800fe6e <__cvt+0x42>
 800fe62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fe66:	d100      	bne.n	800fe6a <__cvt+0x3e>
 800fe68:	3401      	adds	r4, #1
 800fe6a:	2102      	movs	r1, #2
 800fe6c:	e000      	b.n	800fe70 <__cvt+0x44>
 800fe6e:	2103      	movs	r1, #3
 800fe70:	ab03      	add	r3, sp, #12
 800fe72:	9301      	str	r3, [sp, #4]
 800fe74:	ab02      	add	r3, sp, #8
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	ec47 6b10 	vmov	d0, r6, r7
 800fe7c:	4653      	mov	r3, sl
 800fe7e:	4622      	mov	r2, r4
 800fe80:	f000 fe4e 	bl	8010b20 <_dtoa_r>
 800fe84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fe88:	4605      	mov	r5, r0
 800fe8a:	d119      	bne.n	800fec0 <__cvt+0x94>
 800fe8c:	f019 0f01 	tst.w	r9, #1
 800fe90:	d00e      	beq.n	800feb0 <__cvt+0x84>
 800fe92:	eb00 0904 	add.w	r9, r0, r4
 800fe96:	2200      	movs	r2, #0
 800fe98:	2300      	movs	r3, #0
 800fe9a:	4630      	mov	r0, r6
 800fe9c:	4639      	mov	r1, r7
 800fe9e:	f7f0 fe3b 	bl	8000b18 <__aeabi_dcmpeq>
 800fea2:	b108      	cbz	r0, 800fea8 <__cvt+0x7c>
 800fea4:	f8cd 900c 	str.w	r9, [sp, #12]
 800fea8:	2230      	movs	r2, #48	@ 0x30
 800feaa:	9b03      	ldr	r3, [sp, #12]
 800feac:	454b      	cmp	r3, r9
 800feae:	d31e      	bcc.n	800feee <__cvt+0xc2>
 800feb0:	9b03      	ldr	r3, [sp, #12]
 800feb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800feb4:	1b5b      	subs	r3, r3, r5
 800feb6:	4628      	mov	r0, r5
 800feb8:	6013      	str	r3, [r2, #0]
 800feba:	b004      	add	sp, #16
 800febc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fec0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fec4:	eb00 0904 	add.w	r9, r0, r4
 800fec8:	d1e5      	bne.n	800fe96 <__cvt+0x6a>
 800feca:	7803      	ldrb	r3, [r0, #0]
 800fecc:	2b30      	cmp	r3, #48	@ 0x30
 800fece:	d10a      	bne.n	800fee6 <__cvt+0xba>
 800fed0:	2200      	movs	r2, #0
 800fed2:	2300      	movs	r3, #0
 800fed4:	4630      	mov	r0, r6
 800fed6:	4639      	mov	r1, r7
 800fed8:	f7f0 fe1e 	bl	8000b18 <__aeabi_dcmpeq>
 800fedc:	b918      	cbnz	r0, 800fee6 <__cvt+0xba>
 800fede:	f1c4 0401 	rsb	r4, r4, #1
 800fee2:	f8ca 4000 	str.w	r4, [sl]
 800fee6:	f8da 3000 	ldr.w	r3, [sl]
 800feea:	4499      	add	r9, r3
 800feec:	e7d3      	b.n	800fe96 <__cvt+0x6a>
 800feee:	1c59      	adds	r1, r3, #1
 800fef0:	9103      	str	r1, [sp, #12]
 800fef2:	701a      	strb	r2, [r3, #0]
 800fef4:	e7d9      	b.n	800feaa <__cvt+0x7e>

0800fef6 <__exponent>:
 800fef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fef8:	2900      	cmp	r1, #0
 800fefa:	bfba      	itte	lt
 800fefc:	4249      	neglt	r1, r1
 800fefe:	232d      	movlt	r3, #45	@ 0x2d
 800ff00:	232b      	movge	r3, #43	@ 0x2b
 800ff02:	2909      	cmp	r1, #9
 800ff04:	7002      	strb	r2, [r0, #0]
 800ff06:	7043      	strb	r3, [r0, #1]
 800ff08:	dd29      	ble.n	800ff5e <__exponent+0x68>
 800ff0a:	f10d 0307 	add.w	r3, sp, #7
 800ff0e:	461d      	mov	r5, r3
 800ff10:	270a      	movs	r7, #10
 800ff12:	461a      	mov	r2, r3
 800ff14:	fbb1 f6f7 	udiv	r6, r1, r7
 800ff18:	fb07 1416 	mls	r4, r7, r6, r1
 800ff1c:	3430      	adds	r4, #48	@ 0x30
 800ff1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ff22:	460c      	mov	r4, r1
 800ff24:	2c63      	cmp	r4, #99	@ 0x63
 800ff26:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ff2a:	4631      	mov	r1, r6
 800ff2c:	dcf1      	bgt.n	800ff12 <__exponent+0x1c>
 800ff2e:	3130      	adds	r1, #48	@ 0x30
 800ff30:	1e94      	subs	r4, r2, #2
 800ff32:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ff36:	1c41      	adds	r1, r0, #1
 800ff38:	4623      	mov	r3, r4
 800ff3a:	42ab      	cmp	r3, r5
 800ff3c:	d30a      	bcc.n	800ff54 <__exponent+0x5e>
 800ff3e:	f10d 0309 	add.w	r3, sp, #9
 800ff42:	1a9b      	subs	r3, r3, r2
 800ff44:	42ac      	cmp	r4, r5
 800ff46:	bf88      	it	hi
 800ff48:	2300      	movhi	r3, #0
 800ff4a:	3302      	adds	r3, #2
 800ff4c:	4403      	add	r3, r0
 800ff4e:	1a18      	subs	r0, r3, r0
 800ff50:	b003      	add	sp, #12
 800ff52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff54:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ff58:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ff5c:	e7ed      	b.n	800ff3a <__exponent+0x44>
 800ff5e:	2330      	movs	r3, #48	@ 0x30
 800ff60:	3130      	adds	r1, #48	@ 0x30
 800ff62:	7083      	strb	r3, [r0, #2]
 800ff64:	70c1      	strb	r1, [r0, #3]
 800ff66:	1d03      	adds	r3, r0, #4
 800ff68:	e7f1      	b.n	800ff4e <__exponent+0x58>
	...

0800ff6c <_printf_float>:
 800ff6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff70:	b08d      	sub	sp, #52	@ 0x34
 800ff72:	460c      	mov	r4, r1
 800ff74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ff78:	4616      	mov	r6, r2
 800ff7a:	461f      	mov	r7, r3
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	f000 fcb1 	bl	80108e4 <_localeconv_r>
 800ff82:	6803      	ldr	r3, [r0, #0]
 800ff84:	9304      	str	r3, [sp, #16]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7f0 f99a 	bl	80002c0 <strlen>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff90:	f8d8 3000 	ldr.w	r3, [r8]
 800ff94:	9005      	str	r0, [sp, #20]
 800ff96:	3307      	adds	r3, #7
 800ff98:	f023 0307 	bic.w	r3, r3, #7
 800ff9c:	f103 0208 	add.w	r2, r3, #8
 800ffa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ffa4:	f8d4 b000 	ldr.w	fp, [r4]
 800ffa8:	f8c8 2000 	str.w	r2, [r8]
 800ffac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ffb4:	9307      	str	r3, [sp, #28]
 800ffb6:	f8cd 8018 	str.w	r8, [sp, #24]
 800ffba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ffbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffc2:	4b9c      	ldr	r3, [pc, #624]	@ (8010234 <_printf_float+0x2c8>)
 800ffc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffc8:	f7f0 fdd8 	bl	8000b7c <__aeabi_dcmpun>
 800ffcc:	bb70      	cbnz	r0, 801002c <_printf_float+0xc0>
 800ffce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffd2:	4b98      	ldr	r3, [pc, #608]	@ (8010234 <_printf_float+0x2c8>)
 800ffd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffd8:	f7f0 fdb2 	bl	8000b40 <__aeabi_dcmple>
 800ffdc:	bb30      	cbnz	r0, 801002c <_printf_float+0xc0>
 800ffde:	2200      	movs	r2, #0
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	4640      	mov	r0, r8
 800ffe4:	4649      	mov	r1, r9
 800ffe6:	f7f0 fda1 	bl	8000b2c <__aeabi_dcmplt>
 800ffea:	b110      	cbz	r0, 800fff2 <_printf_float+0x86>
 800ffec:	232d      	movs	r3, #45	@ 0x2d
 800ffee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fff2:	4a91      	ldr	r2, [pc, #580]	@ (8010238 <_printf_float+0x2cc>)
 800fff4:	4b91      	ldr	r3, [pc, #580]	@ (801023c <_printf_float+0x2d0>)
 800fff6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fffa:	bf94      	ite	ls
 800fffc:	4690      	movls	r8, r2
 800fffe:	4698      	movhi	r8, r3
 8010000:	2303      	movs	r3, #3
 8010002:	6123      	str	r3, [r4, #16]
 8010004:	f02b 0304 	bic.w	r3, fp, #4
 8010008:	6023      	str	r3, [r4, #0]
 801000a:	f04f 0900 	mov.w	r9, #0
 801000e:	9700      	str	r7, [sp, #0]
 8010010:	4633      	mov	r3, r6
 8010012:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010014:	4621      	mov	r1, r4
 8010016:	4628      	mov	r0, r5
 8010018:	f000 f9d2 	bl	80103c0 <_printf_common>
 801001c:	3001      	adds	r0, #1
 801001e:	f040 808d 	bne.w	801013c <_printf_float+0x1d0>
 8010022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010026:	b00d      	add	sp, #52	@ 0x34
 8010028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002c:	4642      	mov	r2, r8
 801002e:	464b      	mov	r3, r9
 8010030:	4640      	mov	r0, r8
 8010032:	4649      	mov	r1, r9
 8010034:	f7f0 fda2 	bl	8000b7c <__aeabi_dcmpun>
 8010038:	b140      	cbz	r0, 801004c <_printf_float+0xe0>
 801003a:	464b      	mov	r3, r9
 801003c:	2b00      	cmp	r3, #0
 801003e:	bfbc      	itt	lt
 8010040:	232d      	movlt	r3, #45	@ 0x2d
 8010042:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010046:	4a7e      	ldr	r2, [pc, #504]	@ (8010240 <_printf_float+0x2d4>)
 8010048:	4b7e      	ldr	r3, [pc, #504]	@ (8010244 <_printf_float+0x2d8>)
 801004a:	e7d4      	b.n	800fff6 <_printf_float+0x8a>
 801004c:	6863      	ldr	r3, [r4, #4]
 801004e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010052:	9206      	str	r2, [sp, #24]
 8010054:	1c5a      	adds	r2, r3, #1
 8010056:	d13b      	bne.n	80100d0 <_printf_float+0x164>
 8010058:	2306      	movs	r3, #6
 801005a:	6063      	str	r3, [r4, #4]
 801005c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010060:	2300      	movs	r3, #0
 8010062:	6022      	str	r2, [r4, #0]
 8010064:	9303      	str	r3, [sp, #12]
 8010066:	ab0a      	add	r3, sp, #40	@ 0x28
 8010068:	e9cd a301 	strd	sl, r3, [sp, #4]
 801006c:	ab09      	add	r3, sp, #36	@ 0x24
 801006e:	9300      	str	r3, [sp, #0]
 8010070:	6861      	ldr	r1, [r4, #4]
 8010072:	ec49 8b10 	vmov	d0, r8, r9
 8010076:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801007a:	4628      	mov	r0, r5
 801007c:	f7ff fed6 	bl	800fe2c <__cvt>
 8010080:	9b06      	ldr	r3, [sp, #24]
 8010082:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010084:	2b47      	cmp	r3, #71	@ 0x47
 8010086:	4680      	mov	r8, r0
 8010088:	d129      	bne.n	80100de <_printf_float+0x172>
 801008a:	1cc8      	adds	r0, r1, #3
 801008c:	db02      	blt.n	8010094 <_printf_float+0x128>
 801008e:	6863      	ldr	r3, [r4, #4]
 8010090:	4299      	cmp	r1, r3
 8010092:	dd41      	ble.n	8010118 <_printf_float+0x1ac>
 8010094:	f1aa 0a02 	sub.w	sl, sl, #2
 8010098:	fa5f fa8a 	uxtb.w	sl, sl
 801009c:	3901      	subs	r1, #1
 801009e:	4652      	mov	r2, sl
 80100a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80100a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80100a6:	f7ff ff26 	bl	800fef6 <__exponent>
 80100aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80100ac:	1813      	adds	r3, r2, r0
 80100ae:	2a01      	cmp	r2, #1
 80100b0:	4681      	mov	r9, r0
 80100b2:	6123      	str	r3, [r4, #16]
 80100b4:	dc02      	bgt.n	80100bc <_printf_float+0x150>
 80100b6:	6822      	ldr	r2, [r4, #0]
 80100b8:	07d2      	lsls	r2, r2, #31
 80100ba:	d501      	bpl.n	80100c0 <_printf_float+0x154>
 80100bc:	3301      	adds	r3, #1
 80100be:	6123      	str	r3, [r4, #16]
 80100c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d0a2      	beq.n	801000e <_printf_float+0xa2>
 80100c8:	232d      	movs	r3, #45	@ 0x2d
 80100ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100ce:	e79e      	b.n	801000e <_printf_float+0xa2>
 80100d0:	9a06      	ldr	r2, [sp, #24]
 80100d2:	2a47      	cmp	r2, #71	@ 0x47
 80100d4:	d1c2      	bne.n	801005c <_printf_float+0xf0>
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1c0      	bne.n	801005c <_printf_float+0xf0>
 80100da:	2301      	movs	r3, #1
 80100dc:	e7bd      	b.n	801005a <_printf_float+0xee>
 80100de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80100e2:	d9db      	bls.n	801009c <_printf_float+0x130>
 80100e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80100e8:	d118      	bne.n	801011c <_printf_float+0x1b0>
 80100ea:	2900      	cmp	r1, #0
 80100ec:	6863      	ldr	r3, [r4, #4]
 80100ee:	dd0b      	ble.n	8010108 <_printf_float+0x19c>
 80100f0:	6121      	str	r1, [r4, #16]
 80100f2:	b913      	cbnz	r3, 80100fa <_printf_float+0x18e>
 80100f4:	6822      	ldr	r2, [r4, #0]
 80100f6:	07d0      	lsls	r0, r2, #31
 80100f8:	d502      	bpl.n	8010100 <_printf_float+0x194>
 80100fa:	3301      	adds	r3, #1
 80100fc:	440b      	add	r3, r1
 80100fe:	6123      	str	r3, [r4, #16]
 8010100:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010102:	f04f 0900 	mov.w	r9, #0
 8010106:	e7db      	b.n	80100c0 <_printf_float+0x154>
 8010108:	b913      	cbnz	r3, 8010110 <_printf_float+0x1a4>
 801010a:	6822      	ldr	r2, [r4, #0]
 801010c:	07d2      	lsls	r2, r2, #31
 801010e:	d501      	bpl.n	8010114 <_printf_float+0x1a8>
 8010110:	3302      	adds	r3, #2
 8010112:	e7f4      	b.n	80100fe <_printf_float+0x192>
 8010114:	2301      	movs	r3, #1
 8010116:	e7f2      	b.n	80100fe <_printf_float+0x192>
 8010118:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801011c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801011e:	4299      	cmp	r1, r3
 8010120:	db05      	blt.n	801012e <_printf_float+0x1c2>
 8010122:	6823      	ldr	r3, [r4, #0]
 8010124:	6121      	str	r1, [r4, #16]
 8010126:	07d8      	lsls	r0, r3, #31
 8010128:	d5ea      	bpl.n	8010100 <_printf_float+0x194>
 801012a:	1c4b      	adds	r3, r1, #1
 801012c:	e7e7      	b.n	80100fe <_printf_float+0x192>
 801012e:	2900      	cmp	r1, #0
 8010130:	bfd4      	ite	le
 8010132:	f1c1 0202 	rsble	r2, r1, #2
 8010136:	2201      	movgt	r2, #1
 8010138:	4413      	add	r3, r2
 801013a:	e7e0      	b.n	80100fe <_printf_float+0x192>
 801013c:	6823      	ldr	r3, [r4, #0]
 801013e:	055a      	lsls	r2, r3, #21
 8010140:	d407      	bmi.n	8010152 <_printf_float+0x1e6>
 8010142:	6923      	ldr	r3, [r4, #16]
 8010144:	4642      	mov	r2, r8
 8010146:	4631      	mov	r1, r6
 8010148:	4628      	mov	r0, r5
 801014a:	47b8      	blx	r7
 801014c:	3001      	adds	r0, #1
 801014e:	d12b      	bne.n	80101a8 <_printf_float+0x23c>
 8010150:	e767      	b.n	8010022 <_printf_float+0xb6>
 8010152:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010156:	f240 80dd 	bls.w	8010314 <_printf_float+0x3a8>
 801015a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801015e:	2200      	movs	r2, #0
 8010160:	2300      	movs	r3, #0
 8010162:	f7f0 fcd9 	bl	8000b18 <__aeabi_dcmpeq>
 8010166:	2800      	cmp	r0, #0
 8010168:	d033      	beq.n	80101d2 <_printf_float+0x266>
 801016a:	4a37      	ldr	r2, [pc, #220]	@ (8010248 <_printf_float+0x2dc>)
 801016c:	2301      	movs	r3, #1
 801016e:	4631      	mov	r1, r6
 8010170:	4628      	mov	r0, r5
 8010172:	47b8      	blx	r7
 8010174:	3001      	adds	r0, #1
 8010176:	f43f af54 	beq.w	8010022 <_printf_float+0xb6>
 801017a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801017e:	4543      	cmp	r3, r8
 8010180:	db02      	blt.n	8010188 <_printf_float+0x21c>
 8010182:	6823      	ldr	r3, [r4, #0]
 8010184:	07d8      	lsls	r0, r3, #31
 8010186:	d50f      	bpl.n	80101a8 <_printf_float+0x23c>
 8010188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801018c:	4631      	mov	r1, r6
 801018e:	4628      	mov	r0, r5
 8010190:	47b8      	blx	r7
 8010192:	3001      	adds	r0, #1
 8010194:	f43f af45 	beq.w	8010022 <_printf_float+0xb6>
 8010198:	f04f 0900 	mov.w	r9, #0
 801019c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80101a0:	f104 0a1a 	add.w	sl, r4, #26
 80101a4:	45c8      	cmp	r8, r9
 80101a6:	dc09      	bgt.n	80101bc <_printf_float+0x250>
 80101a8:	6823      	ldr	r3, [r4, #0]
 80101aa:	079b      	lsls	r3, r3, #30
 80101ac:	f100 8103 	bmi.w	80103b6 <_printf_float+0x44a>
 80101b0:	68e0      	ldr	r0, [r4, #12]
 80101b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101b4:	4298      	cmp	r0, r3
 80101b6:	bfb8      	it	lt
 80101b8:	4618      	movlt	r0, r3
 80101ba:	e734      	b.n	8010026 <_printf_float+0xba>
 80101bc:	2301      	movs	r3, #1
 80101be:	4652      	mov	r2, sl
 80101c0:	4631      	mov	r1, r6
 80101c2:	4628      	mov	r0, r5
 80101c4:	47b8      	blx	r7
 80101c6:	3001      	adds	r0, #1
 80101c8:	f43f af2b 	beq.w	8010022 <_printf_float+0xb6>
 80101cc:	f109 0901 	add.w	r9, r9, #1
 80101d0:	e7e8      	b.n	80101a4 <_printf_float+0x238>
 80101d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	dc39      	bgt.n	801024c <_printf_float+0x2e0>
 80101d8:	4a1b      	ldr	r2, [pc, #108]	@ (8010248 <_printf_float+0x2dc>)
 80101da:	2301      	movs	r3, #1
 80101dc:	4631      	mov	r1, r6
 80101de:	4628      	mov	r0, r5
 80101e0:	47b8      	blx	r7
 80101e2:	3001      	adds	r0, #1
 80101e4:	f43f af1d 	beq.w	8010022 <_printf_float+0xb6>
 80101e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80101ec:	ea59 0303 	orrs.w	r3, r9, r3
 80101f0:	d102      	bne.n	80101f8 <_printf_float+0x28c>
 80101f2:	6823      	ldr	r3, [r4, #0]
 80101f4:	07d9      	lsls	r1, r3, #31
 80101f6:	d5d7      	bpl.n	80101a8 <_printf_float+0x23c>
 80101f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101fc:	4631      	mov	r1, r6
 80101fe:	4628      	mov	r0, r5
 8010200:	47b8      	blx	r7
 8010202:	3001      	adds	r0, #1
 8010204:	f43f af0d 	beq.w	8010022 <_printf_float+0xb6>
 8010208:	f04f 0a00 	mov.w	sl, #0
 801020c:	f104 0b1a 	add.w	fp, r4, #26
 8010210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010212:	425b      	negs	r3, r3
 8010214:	4553      	cmp	r3, sl
 8010216:	dc01      	bgt.n	801021c <_printf_float+0x2b0>
 8010218:	464b      	mov	r3, r9
 801021a:	e793      	b.n	8010144 <_printf_float+0x1d8>
 801021c:	2301      	movs	r3, #1
 801021e:	465a      	mov	r2, fp
 8010220:	4631      	mov	r1, r6
 8010222:	4628      	mov	r0, r5
 8010224:	47b8      	blx	r7
 8010226:	3001      	adds	r0, #1
 8010228:	f43f aefb 	beq.w	8010022 <_printf_float+0xb6>
 801022c:	f10a 0a01 	add.w	sl, sl, #1
 8010230:	e7ee      	b.n	8010210 <_printf_float+0x2a4>
 8010232:	bf00      	nop
 8010234:	7fefffff 	.word	0x7fefffff
 8010238:	08012f8c 	.word	0x08012f8c
 801023c:	08012f90 	.word	0x08012f90
 8010240:	08012f94 	.word	0x08012f94
 8010244:	08012f98 	.word	0x08012f98
 8010248:	08012f9c 	.word	0x08012f9c
 801024c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801024e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010252:	4553      	cmp	r3, sl
 8010254:	bfa8      	it	ge
 8010256:	4653      	movge	r3, sl
 8010258:	2b00      	cmp	r3, #0
 801025a:	4699      	mov	r9, r3
 801025c:	dc36      	bgt.n	80102cc <_printf_float+0x360>
 801025e:	f04f 0b00 	mov.w	fp, #0
 8010262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010266:	f104 021a 	add.w	r2, r4, #26
 801026a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801026c:	9306      	str	r3, [sp, #24]
 801026e:	eba3 0309 	sub.w	r3, r3, r9
 8010272:	455b      	cmp	r3, fp
 8010274:	dc31      	bgt.n	80102da <_printf_float+0x36e>
 8010276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010278:	459a      	cmp	sl, r3
 801027a:	dc3a      	bgt.n	80102f2 <_printf_float+0x386>
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	07da      	lsls	r2, r3, #31
 8010280:	d437      	bmi.n	80102f2 <_printf_float+0x386>
 8010282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010284:	ebaa 0903 	sub.w	r9, sl, r3
 8010288:	9b06      	ldr	r3, [sp, #24]
 801028a:	ebaa 0303 	sub.w	r3, sl, r3
 801028e:	4599      	cmp	r9, r3
 8010290:	bfa8      	it	ge
 8010292:	4699      	movge	r9, r3
 8010294:	f1b9 0f00 	cmp.w	r9, #0
 8010298:	dc33      	bgt.n	8010302 <_printf_float+0x396>
 801029a:	f04f 0800 	mov.w	r8, #0
 801029e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102a2:	f104 0b1a 	add.w	fp, r4, #26
 80102a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102a8:	ebaa 0303 	sub.w	r3, sl, r3
 80102ac:	eba3 0309 	sub.w	r3, r3, r9
 80102b0:	4543      	cmp	r3, r8
 80102b2:	f77f af79 	ble.w	80101a8 <_printf_float+0x23c>
 80102b6:	2301      	movs	r3, #1
 80102b8:	465a      	mov	r2, fp
 80102ba:	4631      	mov	r1, r6
 80102bc:	4628      	mov	r0, r5
 80102be:	47b8      	blx	r7
 80102c0:	3001      	adds	r0, #1
 80102c2:	f43f aeae 	beq.w	8010022 <_printf_float+0xb6>
 80102c6:	f108 0801 	add.w	r8, r8, #1
 80102ca:	e7ec      	b.n	80102a6 <_printf_float+0x33a>
 80102cc:	4642      	mov	r2, r8
 80102ce:	4631      	mov	r1, r6
 80102d0:	4628      	mov	r0, r5
 80102d2:	47b8      	blx	r7
 80102d4:	3001      	adds	r0, #1
 80102d6:	d1c2      	bne.n	801025e <_printf_float+0x2f2>
 80102d8:	e6a3      	b.n	8010022 <_printf_float+0xb6>
 80102da:	2301      	movs	r3, #1
 80102dc:	4631      	mov	r1, r6
 80102de:	4628      	mov	r0, r5
 80102e0:	9206      	str	r2, [sp, #24]
 80102e2:	47b8      	blx	r7
 80102e4:	3001      	adds	r0, #1
 80102e6:	f43f ae9c 	beq.w	8010022 <_printf_float+0xb6>
 80102ea:	9a06      	ldr	r2, [sp, #24]
 80102ec:	f10b 0b01 	add.w	fp, fp, #1
 80102f0:	e7bb      	b.n	801026a <_printf_float+0x2fe>
 80102f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102f6:	4631      	mov	r1, r6
 80102f8:	4628      	mov	r0, r5
 80102fa:	47b8      	blx	r7
 80102fc:	3001      	adds	r0, #1
 80102fe:	d1c0      	bne.n	8010282 <_printf_float+0x316>
 8010300:	e68f      	b.n	8010022 <_printf_float+0xb6>
 8010302:	9a06      	ldr	r2, [sp, #24]
 8010304:	464b      	mov	r3, r9
 8010306:	4442      	add	r2, r8
 8010308:	4631      	mov	r1, r6
 801030a:	4628      	mov	r0, r5
 801030c:	47b8      	blx	r7
 801030e:	3001      	adds	r0, #1
 8010310:	d1c3      	bne.n	801029a <_printf_float+0x32e>
 8010312:	e686      	b.n	8010022 <_printf_float+0xb6>
 8010314:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010318:	f1ba 0f01 	cmp.w	sl, #1
 801031c:	dc01      	bgt.n	8010322 <_printf_float+0x3b6>
 801031e:	07db      	lsls	r3, r3, #31
 8010320:	d536      	bpl.n	8010390 <_printf_float+0x424>
 8010322:	2301      	movs	r3, #1
 8010324:	4642      	mov	r2, r8
 8010326:	4631      	mov	r1, r6
 8010328:	4628      	mov	r0, r5
 801032a:	47b8      	blx	r7
 801032c:	3001      	adds	r0, #1
 801032e:	f43f ae78 	beq.w	8010022 <_printf_float+0xb6>
 8010332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010336:	4631      	mov	r1, r6
 8010338:	4628      	mov	r0, r5
 801033a:	47b8      	blx	r7
 801033c:	3001      	adds	r0, #1
 801033e:	f43f ae70 	beq.w	8010022 <_printf_float+0xb6>
 8010342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010346:	2200      	movs	r2, #0
 8010348:	2300      	movs	r3, #0
 801034a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801034e:	f7f0 fbe3 	bl	8000b18 <__aeabi_dcmpeq>
 8010352:	b9c0      	cbnz	r0, 8010386 <_printf_float+0x41a>
 8010354:	4653      	mov	r3, sl
 8010356:	f108 0201 	add.w	r2, r8, #1
 801035a:	4631      	mov	r1, r6
 801035c:	4628      	mov	r0, r5
 801035e:	47b8      	blx	r7
 8010360:	3001      	adds	r0, #1
 8010362:	d10c      	bne.n	801037e <_printf_float+0x412>
 8010364:	e65d      	b.n	8010022 <_printf_float+0xb6>
 8010366:	2301      	movs	r3, #1
 8010368:	465a      	mov	r2, fp
 801036a:	4631      	mov	r1, r6
 801036c:	4628      	mov	r0, r5
 801036e:	47b8      	blx	r7
 8010370:	3001      	adds	r0, #1
 8010372:	f43f ae56 	beq.w	8010022 <_printf_float+0xb6>
 8010376:	f108 0801 	add.w	r8, r8, #1
 801037a:	45d0      	cmp	r8, sl
 801037c:	dbf3      	blt.n	8010366 <_printf_float+0x3fa>
 801037e:	464b      	mov	r3, r9
 8010380:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010384:	e6df      	b.n	8010146 <_printf_float+0x1da>
 8010386:	f04f 0800 	mov.w	r8, #0
 801038a:	f104 0b1a 	add.w	fp, r4, #26
 801038e:	e7f4      	b.n	801037a <_printf_float+0x40e>
 8010390:	2301      	movs	r3, #1
 8010392:	4642      	mov	r2, r8
 8010394:	e7e1      	b.n	801035a <_printf_float+0x3ee>
 8010396:	2301      	movs	r3, #1
 8010398:	464a      	mov	r2, r9
 801039a:	4631      	mov	r1, r6
 801039c:	4628      	mov	r0, r5
 801039e:	47b8      	blx	r7
 80103a0:	3001      	adds	r0, #1
 80103a2:	f43f ae3e 	beq.w	8010022 <_printf_float+0xb6>
 80103a6:	f108 0801 	add.w	r8, r8, #1
 80103aa:	68e3      	ldr	r3, [r4, #12]
 80103ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80103ae:	1a5b      	subs	r3, r3, r1
 80103b0:	4543      	cmp	r3, r8
 80103b2:	dcf0      	bgt.n	8010396 <_printf_float+0x42a>
 80103b4:	e6fc      	b.n	80101b0 <_printf_float+0x244>
 80103b6:	f04f 0800 	mov.w	r8, #0
 80103ba:	f104 0919 	add.w	r9, r4, #25
 80103be:	e7f4      	b.n	80103aa <_printf_float+0x43e>

080103c0 <_printf_common>:
 80103c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103c4:	4616      	mov	r6, r2
 80103c6:	4698      	mov	r8, r3
 80103c8:	688a      	ldr	r2, [r1, #8]
 80103ca:	690b      	ldr	r3, [r1, #16]
 80103cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80103d0:	4293      	cmp	r3, r2
 80103d2:	bfb8      	it	lt
 80103d4:	4613      	movlt	r3, r2
 80103d6:	6033      	str	r3, [r6, #0]
 80103d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80103dc:	4607      	mov	r7, r0
 80103de:	460c      	mov	r4, r1
 80103e0:	b10a      	cbz	r2, 80103e6 <_printf_common+0x26>
 80103e2:	3301      	adds	r3, #1
 80103e4:	6033      	str	r3, [r6, #0]
 80103e6:	6823      	ldr	r3, [r4, #0]
 80103e8:	0699      	lsls	r1, r3, #26
 80103ea:	bf42      	ittt	mi
 80103ec:	6833      	ldrmi	r3, [r6, #0]
 80103ee:	3302      	addmi	r3, #2
 80103f0:	6033      	strmi	r3, [r6, #0]
 80103f2:	6825      	ldr	r5, [r4, #0]
 80103f4:	f015 0506 	ands.w	r5, r5, #6
 80103f8:	d106      	bne.n	8010408 <_printf_common+0x48>
 80103fa:	f104 0a19 	add.w	sl, r4, #25
 80103fe:	68e3      	ldr	r3, [r4, #12]
 8010400:	6832      	ldr	r2, [r6, #0]
 8010402:	1a9b      	subs	r3, r3, r2
 8010404:	42ab      	cmp	r3, r5
 8010406:	dc26      	bgt.n	8010456 <_printf_common+0x96>
 8010408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801040c:	6822      	ldr	r2, [r4, #0]
 801040e:	3b00      	subs	r3, #0
 8010410:	bf18      	it	ne
 8010412:	2301      	movne	r3, #1
 8010414:	0692      	lsls	r2, r2, #26
 8010416:	d42b      	bmi.n	8010470 <_printf_common+0xb0>
 8010418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801041c:	4641      	mov	r1, r8
 801041e:	4638      	mov	r0, r7
 8010420:	47c8      	blx	r9
 8010422:	3001      	adds	r0, #1
 8010424:	d01e      	beq.n	8010464 <_printf_common+0xa4>
 8010426:	6823      	ldr	r3, [r4, #0]
 8010428:	6922      	ldr	r2, [r4, #16]
 801042a:	f003 0306 	and.w	r3, r3, #6
 801042e:	2b04      	cmp	r3, #4
 8010430:	bf02      	ittt	eq
 8010432:	68e5      	ldreq	r5, [r4, #12]
 8010434:	6833      	ldreq	r3, [r6, #0]
 8010436:	1aed      	subeq	r5, r5, r3
 8010438:	68a3      	ldr	r3, [r4, #8]
 801043a:	bf0c      	ite	eq
 801043c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010440:	2500      	movne	r5, #0
 8010442:	4293      	cmp	r3, r2
 8010444:	bfc4      	itt	gt
 8010446:	1a9b      	subgt	r3, r3, r2
 8010448:	18ed      	addgt	r5, r5, r3
 801044a:	2600      	movs	r6, #0
 801044c:	341a      	adds	r4, #26
 801044e:	42b5      	cmp	r5, r6
 8010450:	d11a      	bne.n	8010488 <_printf_common+0xc8>
 8010452:	2000      	movs	r0, #0
 8010454:	e008      	b.n	8010468 <_printf_common+0xa8>
 8010456:	2301      	movs	r3, #1
 8010458:	4652      	mov	r2, sl
 801045a:	4641      	mov	r1, r8
 801045c:	4638      	mov	r0, r7
 801045e:	47c8      	blx	r9
 8010460:	3001      	adds	r0, #1
 8010462:	d103      	bne.n	801046c <_printf_common+0xac>
 8010464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801046c:	3501      	adds	r5, #1
 801046e:	e7c6      	b.n	80103fe <_printf_common+0x3e>
 8010470:	18e1      	adds	r1, r4, r3
 8010472:	1c5a      	adds	r2, r3, #1
 8010474:	2030      	movs	r0, #48	@ 0x30
 8010476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801047a:	4422      	add	r2, r4
 801047c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010484:	3302      	adds	r3, #2
 8010486:	e7c7      	b.n	8010418 <_printf_common+0x58>
 8010488:	2301      	movs	r3, #1
 801048a:	4622      	mov	r2, r4
 801048c:	4641      	mov	r1, r8
 801048e:	4638      	mov	r0, r7
 8010490:	47c8      	blx	r9
 8010492:	3001      	adds	r0, #1
 8010494:	d0e6      	beq.n	8010464 <_printf_common+0xa4>
 8010496:	3601      	adds	r6, #1
 8010498:	e7d9      	b.n	801044e <_printf_common+0x8e>
	...

0801049c <_printf_i>:
 801049c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104a0:	7e0f      	ldrb	r7, [r1, #24]
 80104a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80104a4:	2f78      	cmp	r7, #120	@ 0x78
 80104a6:	4691      	mov	r9, r2
 80104a8:	4680      	mov	r8, r0
 80104aa:	460c      	mov	r4, r1
 80104ac:	469a      	mov	sl, r3
 80104ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80104b2:	d807      	bhi.n	80104c4 <_printf_i+0x28>
 80104b4:	2f62      	cmp	r7, #98	@ 0x62
 80104b6:	d80a      	bhi.n	80104ce <_printf_i+0x32>
 80104b8:	2f00      	cmp	r7, #0
 80104ba:	f000 80d2 	beq.w	8010662 <_printf_i+0x1c6>
 80104be:	2f58      	cmp	r7, #88	@ 0x58
 80104c0:	f000 80b9 	beq.w	8010636 <_printf_i+0x19a>
 80104c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80104c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80104cc:	e03a      	b.n	8010544 <_printf_i+0xa8>
 80104ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80104d2:	2b15      	cmp	r3, #21
 80104d4:	d8f6      	bhi.n	80104c4 <_printf_i+0x28>
 80104d6:	a101      	add	r1, pc, #4	@ (adr r1, 80104dc <_printf_i+0x40>)
 80104d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80104dc:	08010535 	.word	0x08010535
 80104e0:	08010549 	.word	0x08010549
 80104e4:	080104c5 	.word	0x080104c5
 80104e8:	080104c5 	.word	0x080104c5
 80104ec:	080104c5 	.word	0x080104c5
 80104f0:	080104c5 	.word	0x080104c5
 80104f4:	08010549 	.word	0x08010549
 80104f8:	080104c5 	.word	0x080104c5
 80104fc:	080104c5 	.word	0x080104c5
 8010500:	080104c5 	.word	0x080104c5
 8010504:	080104c5 	.word	0x080104c5
 8010508:	08010649 	.word	0x08010649
 801050c:	08010573 	.word	0x08010573
 8010510:	08010603 	.word	0x08010603
 8010514:	080104c5 	.word	0x080104c5
 8010518:	080104c5 	.word	0x080104c5
 801051c:	0801066b 	.word	0x0801066b
 8010520:	080104c5 	.word	0x080104c5
 8010524:	08010573 	.word	0x08010573
 8010528:	080104c5 	.word	0x080104c5
 801052c:	080104c5 	.word	0x080104c5
 8010530:	0801060b 	.word	0x0801060b
 8010534:	6833      	ldr	r3, [r6, #0]
 8010536:	1d1a      	adds	r2, r3, #4
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	6032      	str	r2, [r6, #0]
 801053c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010544:	2301      	movs	r3, #1
 8010546:	e09d      	b.n	8010684 <_printf_i+0x1e8>
 8010548:	6833      	ldr	r3, [r6, #0]
 801054a:	6820      	ldr	r0, [r4, #0]
 801054c:	1d19      	adds	r1, r3, #4
 801054e:	6031      	str	r1, [r6, #0]
 8010550:	0606      	lsls	r6, r0, #24
 8010552:	d501      	bpl.n	8010558 <_printf_i+0xbc>
 8010554:	681d      	ldr	r5, [r3, #0]
 8010556:	e003      	b.n	8010560 <_printf_i+0xc4>
 8010558:	0645      	lsls	r5, r0, #25
 801055a:	d5fb      	bpl.n	8010554 <_printf_i+0xb8>
 801055c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010560:	2d00      	cmp	r5, #0
 8010562:	da03      	bge.n	801056c <_printf_i+0xd0>
 8010564:	232d      	movs	r3, #45	@ 0x2d
 8010566:	426d      	negs	r5, r5
 8010568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801056c:	4859      	ldr	r0, [pc, #356]	@ (80106d4 <_printf_i+0x238>)
 801056e:	230a      	movs	r3, #10
 8010570:	e011      	b.n	8010596 <_printf_i+0xfa>
 8010572:	6821      	ldr	r1, [r4, #0]
 8010574:	6833      	ldr	r3, [r6, #0]
 8010576:	0608      	lsls	r0, r1, #24
 8010578:	f853 5b04 	ldr.w	r5, [r3], #4
 801057c:	d402      	bmi.n	8010584 <_printf_i+0xe8>
 801057e:	0649      	lsls	r1, r1, #25
 8010580:	bf48      	it	mi
 8010582:	b2ad      	uxthmi	r5, r5
 8010584:	2f6f      	cmp	r7, #111	@ 0x6f
 8010586:	4853      	ldr	r0, [pc, #332]	@ (80106d4 <_printf_i+0x238>)
 8010588:	6033      	str	r3, [r6, #0]
 801058a:	bf14      	ite	ne
 801058c:	230a      	movne	r3, #10
 801058e:	2308      	moveq	r3, #8
 8010590:	2100      	movs	r1, #0
 8010592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010596:	6866      	ldr	r6, [r4, #4]
 8010598:	60a6      	str	r6, [r4, #8]
 801059a:	2e00      	cmp	r6, #0
 801059c:	bfa2      	ittt	ge
 801059e:	6821      	ldrge	r1, [r4, #0]
 80105a0:	f021 0104 	bicge.w	r1, r1, #4
 80105a4:	6021      	strge	r1, [r4, #0]
 80105a6:	b90d      	cbnz	r5, 80105ac <_printf_i+0x110>
 80105a8:	2e00      	cmp	r6, #0
 80105aa:	d04b      	beq.n	8010644 <_printf_i+0x1a8>
 80105ac:	4616      	mov	r6, r2
 80105ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80105b2:	fb03 5711 	mls	r7, r3, r1, r5
 80105b6:	5dc7      	ldrb	r7, [r0, r7]
 80105b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105bc:	462f      	mov	r7, r5
 80105be:	42bb      	cmp	r3, r7
 80105c0:	460d      	mov	r5, r1
 80105c2:	d9f4      	bls.n	80105ae <_printf_i+0x112>
 80105c4:	2b08      	cmp	r3, #8
 80105c6:	d10b      	bne.n	80105e0 <_printf_i+0x144>
 80105c8:	6823      	ldr	r3, [r4, #0]
 80105ca:	07df      	lsls	r7, r3, #31
 80105cc:	d508      	bpl.n	80105e0 <_printf_i+0x144>
 80105ce:	6923      	ldr	r3, [r4, #16]
 80105d0:	6861      	ldr	r1, [r4, #4]
 80105d2:	4299      	cmp	r1, r3
 80105d4:	bfde      	ittt	le
 80105d6:	2330      	movle	r3, #48	@ 0x30
 80105d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80105dc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80105e0:	1b92      	subs	r2, r2, r6
 80105e2:	6122      	str	r2, [r4, #16]
 80105e4:	f8cd a000 	str.w	sl, [sp]
 80105e8:	464b      	mov	r3, r9
 80105ea:	aa03      	add	r2, sp, #12
 80105ec:	4621      	mov	r1, r4
 80105ee:	4640      	mov	r0, r8
 80105f0:	f7ff fee6 	bl	80103c0 <_printf_common>
 80105f4:	3001      	adds	r0, #1
 80105f6:	d14a      	bne.n	801068e <_printf_i+0x1f2>
 80105f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80105fc:	b004      	add	sp, #16
 80105fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010602:	6823      	ldr	r3, [r4, #0]
 8010604:	f043 0320 	orr.w	r3, r3, #32
 8010608:	6023      	str	r3, [r4, #0]
 801060a:	4833      	ldr	r0, [pc, #204]	@ (80106d8 <_printf_i+0x23c>)
 801060c:	2778      	movs	r7, #120	@ 0x78
 801060e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010612:	6823      	ldr	r3, [r4, #0]
 8010614:	6831      	ldr	r1, [r6, #0]
 8010616:	061f      	lsls	r7, r3, #24
 8010618:	f851 5b04 	ldr.w	r5, [r1], #4
 801061c:	d402      	bmi.n	8010624 <_printf_i+0x188>
 801061e:	065f      	lsls	r7, r3, #25
 8010620:	bf48      	it	mi
 8010622:	b2ad      	uxthmi	r5, r5
 8010624:	6031      	str	r1, [r6, #0]
 8010626:	07d9      	lsls	r1, r3, #31
 8010628:	bf44      	itt	mi
 801062a:	f043 0320 	orrmi.w	r3, r3, #32
 801062e:	6023      	strmi	r3, [r4, #0]
 8010630:	b11d      	cbz	r5, 801063a <_printf_i+0x19e>
 8010632:	2310      	movs	r3, #16
 8010634:	e7ac      	b.n	8010590 <_printf_i+0xf4>
 8010636:	4827      	ldr	r0, [pc, #156]	@ (80106d4 <_printf_i+0x238>)
 8010638:	e7e9      	b.n	801060e <_printf_i+0x172>
 801063a:	6823      	ldr	r3, [r4, #0]
 801063c:	f023 0320 	bic.w	r3, r3, #32
 8010640:	6023      	str	r3, [r4, #0]
 8010642:	e7f6      	b.n	8010632 <_printf_i+0x196>
 8010644:	4616      	mov	r6, r2
 8010646:	e7bd      	b.n	80105c4 <_printf_i+0x128>
 8010648:	6833      	ldr	r3, [r6, #0]
 801064a:	6825      	ldr	r5, [r4, #0]
 801064c:	6961      	ldr	r1, [r4, #20]
 801064e:	1d18      	adds	r0, r3, #4
 8010650:	6030      	str	r0, [r6, #0]
 8010652:	062e      	lsls	r6, r5, #24
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	d501      	bpl.n	801065c <_printf_i+0x1c0>
 8010658:	6019      	str	r1, [r3, #0]
 801065a:	e002      	b.n	8010662 <_printf_i+0x1c6>
 801065c:	0668      	lsls	r0, r5, #25
 801065e:	d5fb      	bpl.n	8010658 <_printf_i+0x1bc>
 8010660:	8019      	strh	r1, [r3, #0]
 8010662:	2300      	movs	r3, #0
 8010664:	6123      	str	r3, [r4, #16]
 8010666:	4616      	mov	r6, r2
 8010668:	e7bc      	b.n	80105e4 <_printf_i+0x148>
 801066a:	6833      	ldr	r3, [r6, #0]
 801066c:	1d1a      	adds	r2, r3, #4
 801066e:	6032      	str	r2, [r6, #0]
 8010670:	681e      	ldr	r6, [r3, #0]
 8010672:	6862      	ldr	r2, [r4, #4]
 8010674:	2100      	movs	r1, #0
 8010676:	4630      	mov	r0, r6
 8010678:	f7ef fdd2 	bl	8000220 <memchr>
 801067c:	b108      	cbz	r0, 8010682 <_printf_i+0x1e6>
 801067e:	1b80      	subs	r0, r0, r6
 8010680:	6060      	str	r0, [r4, #4]
 8010682:	6863      	ldr	r3, [r4, #4]
 8010684:	6123      	str	r3, [r4, #16]
 8010686:	2300      	movs	r3, #0
 8010688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801068c:	e7aa      	b.n	80105e4 <_printf_i+0x148>
 801068e:	6923      	ldr	r3, [r4, #16]
 8010690:	4632      	mov	r2, r6
 8010692:	4649      	mov	r1, r9
 8010694:	4640      	mov	r0, r8
 8010696:	47d0      	blx	sl
 8010698:	3001      	adds	r0, #1
 801069a:	d0ad      	beq.n	80105f8 <_printf_i+0x15c>
 801069c:	6823      	ldr	r3, [r4, #0]
 801069e:	079b      	lsls	r3, r3, #30
 80106a0:	d413      	bmi.n	80106ca <_printf_i+0x22e>
 80106a2:	68e0      	ldr	r0, [r4, #12]
 80106a4:	9b03      	ldr	r3, [sp, #12]
 80106a6:	4298      	cmp	r0, r3
 80106a8:	bfb8      	it	lt
 80106aa:	4618      	movlt	r0, r3
 80106ac:	e7a6      	b.n	80105fc <_printf_i+0x160>
 80106ae:	2301      	movs	r3, #1
 80106b0:	4632      	mov	r2, r6
 80106b2:	4649      	mov	r1, r9
 80106b4:	4640      	mov	r0, r8
 80106b6:	47d0      	blx	sl
 80106b8:	3001      	adds	r0, #1
 80106ba:	d09d      	beq.n	80105f8 <_printf_i+0x15c>
 80106bc:	3501      	adds	r5, #1
 80106be:	68e3      	ldr	r3, [r4, #12]
 80106c0:	9903      	ldr	r1, [sp, #12]
 80106c2:	1a5b      	subs	r3, r3, r1
 80106c4:	42ab      	cmp	r3, r5
 80106c6:	dcf2      	bgt.n	80106ae <_printf_i+0x212>
 80106c8:	e7eb      	b.n	80106a2 <_printf_i+0x206>
 80106ca:	2500      	movs	r5, #0
 80106cc:	f104 0619 	add.w	r6, r4, #25
 80106d0:	e7f5      	b.n	80106be <_printf_i+0x222>
 80106d2:	bf00      	nop
 80106d4:	08012f9e 	.word	0x08012f9e
 80106d8:	08012faf 	.word	0x08012faf

080106dc <std>:
 80106dc:	2300      	movs	r3, #0
 80106de:	b510      	push	{r4, lr}
 80106e0:	4604      	mov	r4, r0
 80106e2:	e9c0 3300 	strd	r3, r3, [r0]
 80106e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80106ea:	6083      	str	r3, [r0, #8]
 80106ec:	8181      	strh	r1, [r0, #12]
 80106ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80106f0:	81c2      	strh	r2, [r0, #14]
 80106f2:	6183      	str	r3, [r0, #24]
 80106f4:	4619      	mov	r1, r3
 80106f6:	2208      	movs	r2, #8
 80106f8:	305c      	adds	r0, #92	@ 0x5c
 80106fa:	f000 f8eb 	bl	80108d4 <memset>
 80106fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010734 <std+0x58>)
 8010700:	6263      	str	r3, [r4, #36]	@ 0x24
 8010702:	4b0d      	ldr	r3, [pc, #52]	@ (8010738 <std+0x5c>)
 8010704:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010706:	4b0d      	ldr	r3, [pc, #52]	@ (801073c <std+0x60>)
 8010708:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801070a:	4b0d      	ldr	r3, [pc, #52]	@ (8010740 <std+0x64>)
 801070c:	6323      	str	r3, [r4, #48]	@ 0x30
 801070e:	4b0d      	ldr	r3, [pc, #52]	@ (8010744 <std+0x68>)
 8010710:	6224      	str	r4, [r4, #32]
 8010712:	429c      	cmp	r4, r3
 8010714:	d006      	beq.n	8010724 <std+0x48>
 8010716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801071a:	4294      	cmp	r4, r2
 801071c:	d002      	beq.n	8010724 <std+0x48>
 801071e:	33d0      	adds	r3, #208	@ 0xd0
 8010720:	429c      	cmp	r4, r3
 8010722:	d105      	bne.n	8010730 <std+0x54>
 8010724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801072c:	f000 b95e 	b.w	80109ec <__retarget_lock_init_recursive>
 8010730:	bd10      	pop	{r4, pc}
 8010732:	bf00      	nop
 8010734:	080123b5 	.word	0x080123b5
 8010738:	080123d7 	.word	0x080123d7
 801073c:	0801240f 	.word	0x0801240f
 8010740:	08012433 	.word	0x08012433
 8010744:	200102d4 	.word	0x200102d4

08010748 <stdio_exit_handler>:
 8010748:	4a02      	ldr	r2, [pc, #8]	@ (8010754 <stdio_exit_handler+0xc>)
 801074a:	4903      	ldr	r1, [pc, #12]	@ (8010758 <stdio_exit_handler+0x10>)
 801074c:	4803      	ldr	r0, [pc, #12]	@ (801075c <stdio_exit_handler+0x14>)
 801074e:	f000 b869 	b.w	8010824 <_fwalk_sglue>
 8010752:	bf00      	nop
 8010754:	20000188 	.word	0x20000188
 8010758:	08011c49 	.word	0x08011c49
 801075c:	20000198 	.word	0x20000198

08010760 <cleanup_stdio>:
 8010760:	6841      	ldr	r1, [r0, #4]
 8010762:	4b0c      	ldr	r3, [pc, #48]	@ (8010794 <cleanup_stdio+0x34>)
 8010764:	4299      	cmp	r1, r3
 8010766:	b510      	push	{r4, lr}
 8010768:	4604      	mov	r4, r0
 801076a:	d001      	beq.n	8010770 <cleanup_stdio+0x10>
 801076c:	f001 fa6c 	bl	8011c48 <_fflush_r>
 8010770:	68a1      	ldr	r1, [r4, #8]
 8010772:	4b09      	ldr	r3, [pc, #36]	@ (8010798 <cleanup_stdio+0x38>)
 8010774:	4299      	cmp	r1, r3
 8010776:	d002      	beq.n	801077e <cleanup_stdio+0x1e>
 8010778:	4620      	mov	r0, r4
 801077a:	f001 fa65 	bl	8011c48 <_fflush_r>
 801077e:	68e1      	ldr	r1, [r4, #12]
 8010780:	4b06      	ldr	r3, [pc, #24]	@ (801079c <cleanup_stdio+0x3c>)
 8010782:	4299      	cmp	r1, r3
 8010784:	d004      	beq.n	8010790 <cleanup_stdio+0x30>
 8010786:	4620      	mov	r0, r4
 8010788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801078c:	f001 ba5c 	b.w	8011c48 <_fflush_r>
 8010790:	bd10      	pop	{r4, pc}
 8010792:	bf00      	nop
 8010794:	200102d4 	.word	0x200102d4
 8010798:	2001033c 	.word	0x2001033c
 801079c:	200103a4 	.word	0x200103a4

080107a0 <global_stdio_init.part.0>:
 80107a0:	b510      	push	{r4, lr}
 80107a2:	4b0b      	ldr	r3, [pc, #44]	@ (80107d0 <global_stdio_init.part.0+0x30>)
 80107a4:	4c0b      	ldr	r4, [pc, #44]	@ (80107d4 <global_stdio_init.part.0+0x34>)
 80107a6:	4a0c      	ldr	r2, [pc, #48]	@ (80107d8 <global_stdio_init.part.0+0x38>)
 80107a8:	601a      	str	r2, [r3, #0]
 80107aa:	4620      	mov	r0, r4
 80107ac:	2200      	movs	r2, #0
 80107ae:	2104      	movs	r1, #4
 80107b0:	f7ff ff94 	bl	80106dc <std>
 80107b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80107b8:	2201      	movs	r2, #1
 80107ba:	2109      	movs	r1, #9
 80107bc:	f7ff ff8e 	bl	80106dc <std>
 80107c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80107c4:	2202      	movs	r2, #2
 80107c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107ca:	2112      	movs	r1, #18
 80107cc:	f7ff bf86 	b.w	80106dc <std>
 80107d0:	2001040c 	.word	0x2001040c
 80107d4:	200102d4 	.word	0x200102d4
 80107d8:	08010749 	.word	0x08010749

080107dc <__sfp_lock_acquire>:
 80107dc:	4801      	ldr	r0, [pc, #4]	@ (80107e4 <__sfp_lock_acquire+0x8>)
 80107de:	f000 b906 	b.w	80109ee <__retarget_lock_acquire_recursive>
 80107e2:	bf00      	nop
 80107e4:	20010415 	.word	0x20010415

080107e8 <__sfp_lock_release>:
 80107e8:	4801      	ldr	r0, [pc, #4]	@ (80107f0 <__sfp_lock_release+0x8>)
 80107ea:	f000 b901 	b.w	80109f0 <__retarget_lock_release_recursive>
 80107ee:	bf00      	nop
 80107f0:	20010415 	.word	0x20010415

080107f4 <__sinit>:
 80107f4:	b510      	push	{r4, lr}
 80107f6:	4604      	mov	r4, r0
 80107f8:	f7ff fff0 	bl	80107dc <__sfp_lock_acquire>
 80107fc:	6a23      	ldr	r3, [r4, #32]
 80107fe:	b11b      	cbz	r3, 8010808 <__sinit+0x14>
 8010800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010804:	f7ff bff0 	b.w	80107e8 <__sfp_lock_release>
 8010808:	4b04      	ldr	r3, [pc, #16]	@ (801081c <__sinit+0x28>)
 801080a:	6223      	str	r3, [r4, #32]
 801080c:	4b04      	ldr	r3, [pc, #16]	@ (8010820 <__sinit+0x2c>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d1f5      	bne.n	8010800 <__sinit+0xc>
 8010814:	f7ff ffc4 	bl	80107a0 <global_stdio_init.part.0>
 8010818:	e7f2      	b.n	8010800 <__sinit+0xc>
 801081a:	bf00      	nop
 801081c:	08010761 	.word	0x08010761
 8010820:	2001040c 	.word	0x2001040c

08010824 <_fwalk_sglue>:
 8010824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010828:	4607      	mov	r7, r0
 801082a:	4688      	mov	r8, r1
 801082c:	4614      	mov	r4, r2
 801082e:	2600      	movs	r6, #0
 8010830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010834:	f1b9 0901 	subs.w	r9, r9, #1
 8010838:	d505      	bpl.n	8010846 <_fwalk_sglue+0x22>
 801083a:	6824      	ldr	r4, [r4, #0]
 801083c:	2c00      	cmp	r4, #0
 801083e:	d1f7      	bne.n	8010830 <_fwalk_sglue+0xc>
 8010840:	4630      	mov	r0, r6
 8010842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010846:	89ab      	ldrh	r3, [r5, #12]
 8010848:	2b01      	cmp	r3, #1
 801084a:	d907      	bls.n	801085c <_fwalk_sglue+0x38>
 801084c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010850:	3301      	adds	r3, #1
 8010852:	d003      	beq.n	801085c <_fwalk_sglue+0x38>
 8010854:	4629      	mov	r1, r5
 8010856:	4638      	mov	r0, r7
 8010858:	47c0      	blx	r8
 801085a:	4306      	orrs	r6, r0
 801085c:	3568      	adds	r5, #104	@ 0x68
 801085e:	e7e9      	b.n	8010834 <_fwalk_sglue+0x10>

08010860 <_vsniprintf_r>:
 8010860:	b530      	push	{r4, r5, lr}
 8010862:	4614      	mov	r4, r2
 8010864:	2c00      	cmp	r4, #0
 8010866:	b09b      	sub	sp, #108	@ 0x6c
 8010868:	4605      	mov	r5, r0
 801086a:	461a      	mov	r2, r3
 801086c:	da05      	bge.n	801087a <_vsniprintf_r+0x1a>
 801086e:	238b      	movs	r3, #139	@ 0x8b
 8010870:	6003      	str	r3, [r0, #0]
 8010872:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010876:	b01b      	add	sp, #108	@ 0x6c
 8010878:	bd30      	pop	{r4, r5, pc}
 801087a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801087e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010882:	bf14      	ite	ne
 8010884:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8010888:	4623      	moveq	r3, r4
 801088a:	9302      	str	r3, [sp, #8]
 801088c:	9305      	str	r3, [sp, #20]
 801088e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010892:	9100      	str	r1, [sp, #0]
 8010894:	9104      	str	r1, [sp, #16]
 8010896:	f8ad 300e 	strh.w	r3, [sp, #14]
 801089a:	4669      	mov	r1, sp
 801089c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801089e:	f000 ffa9 	bl	80117f4 <_svfiprintf_r>
 80108a2:	1c43      	adds	r3, r0, #1
 80108a4:	bfbc      	itt	lt
 80108a6:	238b      	movlt	r3, #139	@ 0x8b
 80108a8:	602b      	strlt	r3, [r5, #0]
 80108aa:	2c00      	cmp	r4, #0
 80108ac:	d0e3      	beq.n	8010876 <_vsniprintf_r+0x16>
 80108ae:	9b00      	ldr	r3, [sp, #0]
 80108b0:	2200      	movs	r2, #0
 80108b2:	701a      	strb	r2, [r3, #0]
 80108b4:	e7df      	b.n	8010876 <_vsniprintf_r+0x16>
	...

080108b8 <vsniprintf>:
 80108b8:	b507      	push	{r0, r1, r2, lr}
 80108ba:	9300      	str	r3, [sp, #0]
 80108bc:	4613      	mov	r3, r2
 80108be:	460a      	mov	r2, r1
 80108c0:	4601      	mov	r1, r0
 80108c2:	4803      	ldr	r0, [pc, #12]	@ (80108d0 <vsniprintf+0x18>)
 80108c4:	6800      	ldr	r0, [r0, #0]
 80108c6:	f7ff ffcb 	bl	8010860 <_vsniprintf_r>
 80108ca:	b003      	add	sp, #12
 80108cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80108d0:	20000194 	.word	0x20000194

080108d4 <memset>:
 80108d4:	4402      	add	r2, r0
 80108d6:	4603      	mov	r3, r0
 80108d8:	4293      	cmp	r3, r2
 80108da:	d100      	bne.n	80108de <memset+0xa>
 80108dc:	4770      	bx	lr
 80108de:	f803 1b01 	strb.w	r1, [r3], #1
 80108e2:	e7f9      	b.n	80108d8 <memset+0x4>

080108e4 <_localeconv_r>:
 80108e4:	4800      	ldr	r0, [pc, #0]	@ (80108e8 <_localeconv_r+0x4>)
 80108e6:	4770      	bx	lr
 80108e8:	200002d4 	.word	0x200002d4

080108ec <_reclaim_reent>:
 80108ec:	4b29      	ldr	r3, [pc, #164]	@ (8010994 <_reclaim_reent+0xa8>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4283      	cmp	r3, r0
 80108f2:	b570      	push	{r4, r5, r6, lr}
 80108f4:	4604      	mov	r4, r0
 80108f6:	d04b      	beq.n	8010990 <_reclaim_reent+0xa4>
 80108f8:	69c3      	ldr	r3, [r0, #28]
 80108fa:	b1ab      	cbz	r3, 8010928 <_reclaim_reent+0x3c>
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	b16b      	cbz	r3, 801091c <_reclaim_reent+0x30>
 8010900:	2500      	movs	r5, #0
 8010902:	69e3      	ldr	r3, [r4, #28]
 8010904:	68db      	ldr	r3, [r3, #12]
 8010906:	5959      	ldr	r1, [r3, r5]
 8010908:	2900      	cmp	r1, #0
 801090a:	d13b      	bne.n	8010984 <_reclaim_reent+0x98>
 801090c:	3504      	adds	r5, #4
 801090e:	2d80      	cmp	r5, #128	@ 0x80
 8010910:	d1f7      	bne.n	8010902 <_reclaim_reent+0x16>
 8010912:	69e3      	ldr	r3, [r4, #28]
 8010914:	4620      	mov	r0, r4
 8010916:	68d9      	ldr	r1, [r3, #12]
 8010918:	f000 fec6 	bl	80116a8 <_free_r>
 801091c:	69e3      	ldr	r3, [r4, #28]
 801091e:	6819      	ldr	r1, [r3, #0]
 8010920:	b111      	cbz	r1, 8010928 <_reclaim_reent+0x3c>
 8010922:	4620      	mov	r0, r4
 8010924:	f000 fec0 	bl	80116a8 <_free_r>
 8010928:	6961      	ldr	r1, [r4, #20]
 801092a:	b111      	cbz	r1, 8010932 <_reclaim_reent+0x46>
 801092c:	4620      	mov	r0, r4
 801092e:	f000 febb 	bl	80116a8 <_free_r>
 8010932:	69e1      	ldr	r1, [r4, #28]
 8010934:	b111      	cbz	r1, 801093c <_reclaim_reent+0x50>
 8010936:	4620      	mov	r0, r4
 8010938:	f000 feb6 	bl	80116a8 <_free_r>
 801093c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801093e:	b111      	cbz	r1, 8010946 <_reclaim_reent+0x5a>
 8010940:	4620      	mov	r0, r4
 8010942:	f000 feb1 	bl	80116a8 <_free_r>
 8010946:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010948:	b111      	cbz	r1, 8010950 <_reclaim_reent+0x64>
 801094a:	4620      	mov	r0, r4
 801094c:	f000 feac 	bl	80116a8 <_free_r>
 8010950:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010952:	b111      	cbz	r1, 801095a <_reclaim_reent+0x6e>
 8010954:	4620      	mov	r0, r4
 8010956:	f000 fea7 	bl	80116a8 <_free_r>
 801095a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801095c:	b111      	cbz	r1, 8010964 <_reclaim_reent+0x78>
 801095e:	4620      	mov	r0, r4
 8010960:	f000 fea2 	bl	80116a8 <_free_r>
 8010964:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010966:	b111      	cbz	r1, 801096e <_reclaim_reent+0x82>
 8010968:	4620      	mov	r0, r4
 801096a:	f000 fe9d 	bl	80116a8 <_free_r>
 801096e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010970:	b111      	cbz	r1, 8010978 <_reclaim_reent+0x8c>
 8010972:	4620      	mov	r0, r4
 8010974:	f000 fe98 	bl	80116a8 <_free_r>
 8010978:	6a23      	ldr	r3, [r4, #32]
 801097a:	b14b      	cbz	r3, 8010990 <_reclaim_reent+0xa4>
 801097c:	4620      	mov	r0, r4
 801097e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010982:	4718      	bx	r3
 8010984:	680e      	ldr	r6, [r1, #0]
 8010986:	4620      	mov	r0, r4
 8010988:	f000 fe8e 	bl	80116a8 <_free_r>
 801098c:	4631      	mov	r1, r6
 801098e:	e7bb      	b.n	8010908 <_reclaim_reent+0x1c>
 8010990:	bd70      	pop	{r4, r5, r6, pc}
 8010992:	bf00      	nop
 8010994:	20000194 	.word	0x20000194

08010998 <__errno>:
 8010998:	4b01      	ldr	r3, [pc, #4]	@ (80109a0 <__errno+0x8>)
 801099a:	6818      	ldr	r0, [r3, #0]
 801099c:	4770      	bx	lr
 801099e:	bf00      	nop
 80109a0:	20000194 	.word	0x20000194

080109a4 <__libc_init_array>:
 80109a4:	b570      	push	{r4, r5, r6, lr}
 80109a6:	4d0d      	ldr	r5, [pc, #52]	@ (80109dc <__libc_init_array+0x38>)
 80109a8:	4c0d      	ldr	r4, [pc, #52]	@ (80109e0 <__libc_init_array+0x3c>)
 80109aa:	1b64      	subs	r4, r4, r5
 80109ac:	10a4      	asrs	r4, r4, #2
 80109ae:	2600      	movs	r6, #0
 80109b0:	42a6      	cmp	r6, r4
 80109b2:	d109      	bne.n	80109c8 <__libc_init_array+0x24>
 80109b4:	4d0b      	ldr	r5, [pc, #44]	@ (80109e4 <__libc_init_array+0x40>)
 80109b6:	4c0c      	ldr	r4, [pc, #48]	@ (80109e8 <__libc_init_array+0x44>)
 80109b8:	f002 f8ee 	bl	8012b98 <_init>
 80109bc:	1b64      	subs	r4, r4, r5
 80109be:	10a4      	asrs	r4, r4, #2
 80109c0:	2600      	movs	r6, #0
 80109c2:	42a6      	cmp	r6, r4
 80109c4:	d105      	bne.n	80109d2 <__libc_init_array+0x2e>
 80109c6:	bd70      	pop	{r4, r5, r6, pc}
 80109c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80109cc:	4798      	blx	r3
 80109ce:	3601      	adds	r6, #1
 80109d0:	e7ee      	b.n	80109b0 <__libc_init_array+0xc>
 80109d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80109d6:	4798      	blx	r3
 80109d8:	3601      	adds	r6, #1
 80109da:	e7f2      	b.n	80109c2 <__libc_init_array+0x1e>
 80109dc:	08013308 	.word	0x08013308
 80109e0:	08013308 	.word	0x08013308
 80109e4:	08013308 	.word	0x08013308
 80109e8:	0801330c 	.word	0x0801330c

080109ec <__retarget_lock_init_recursive>:
 80109ec:	4770      	bx	lr

080109ee <__retarget_lock_acquire_recursive>:
 80109ee:	4770      	bx	lr

080109f0 <__retarget_lock_release_recursive>:
 80109f0:	4770      	bx	lr

080109f2 <memcpy>:
 80109f2:	440a      	add	r2, r1
 80109f4:	4291      	cmp	r1, r2
 80109f6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80109fa:	d100      	bne.n	80109fe <memcpy+0xc>
 80109fc:	4770      	bx	lr
 80109fe:	b510      	push	{r4, lr}
 8010a00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a08:	4291      	cmp	r1, r2
 8010a0a:	d1f9      	bne.n	8010a00 <memcpy+0xe>
 8010a0c:	bd10      	pop	{r4, pc}

08010a0e <quorem>:
 8010a0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a12:	6903      	ldr	r3, [r0, #16]
 8010a14:	690c      	ldr	r4, [r1, #16]
 8010a16:	42a3      	cmp	r3, r4
 8010a18:	4607      	mov	r7, r0
 8010a1a:	db7e      	blt.n	8010b1a <quorem+0x10c>
 8010a1c:	3c01      	subs	r4, #1
 8010a1e:	f101 0814 	add.w	r8, r1, #20
 8010a22:	00a3      	lsls	r3, r4, #2
 8010a24:	f100 0514 	add.w	r5, r0, #20
 8010a28:	9300      	str	r3, [sp, #0]
 8010a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a2e:	9301      	str	r3, [sp, #4]
 8010a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a38:	3301      	adds	r3, #1
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010a40:	fbb2 f6f3 	udiv	r6, r2, r3
 8010a44:	d32e      	bcc.n	8010aa4 <quorem+0x96>
 8010a46:	f04f 0a00 	mov.w	sl, #0
 8010a4a:	46c4      	mov	ip, r8
 8010a4c:	46ae      	mov	lr, r5
 8010a4e:	46d3      	mov	fp, sl
 8010a50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010a54:	b298      	uxth	r0, r3
 8010a56:	fb06 a000 	mla	r0, r6, r0, sl
 8010a5a:	0c02      	lsrs	r2, r0, #16
 8010a5c:	0c1b      	lsrs	r3, r3, #16
 8010a5e:	fb06 2303 	mla	r3, r6, r3, r2
 8010a62:	f8de 2000 	ldr.w	r2, [lr]
 8010a66:	b280      	uxth	r0, r0
 8010a68:	b292      	uxth	r2, r2
 8010a6a:	1a12      	subs	r2, r2, r0
 8010a6c:	445a      	add	r2, fp
 8010a6e:	f8de 0000 	ldr.w	r0, [lr]
 8010a72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010a7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010a80:	b292      	uxth	r2, r2
 8010a82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010a86:	45e1      	cmp	r9, ip
 8010a88:	f84e 2b04 	str.w	r2, [lr], #4
 8010a8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010a90:	d2de      	bcs.n	8010a50 <quorem+0x42>
 8010a92:	9b00      	ldr	r3, [sp, #0]
 8010a94:	58eb      	ldr	r3, [r5, r3]
 8010a96:	b92b      	cbnz	r3, 8010aa4 <quorem+0x96>
 8010a98:	9b01      	ldr	r3, [sp, #4]
 8010a9a:	3b04      	subs	r3, #4
 8010a9c:	429d      	cmp	r5, r3
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	d32f      	bcc.n	8010b02 <quorem+0xf4>
 8010aa2:	613c      	str	r4, [r7, #16]
 8010aa4:	4638      	mov	r0, r7
 8010aa6:	f001 fb7d 	bl	80121a4 <__mcmp>
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	db25      	blt.n	8010afa <quorem+0xec>
 8010aae:	4629      	mov	r1, r5
 8010ab0:	2000      	movs	r0, #0
 8010ab2:	f858 2b04 	ldr.w	r2, [r8], #4
 8010ab6:	f8d1 c000 	ldr.w	ip, [r1]
 8010aba:	fa1f fe82 	uxth.w	lr, r2
 8010abe:	fa1f f38c 	uxth.w	r3, ip
 8010ac2:	eba3 030e 	sub.w	r3, r3, lr
 8010ac6:	4403      	add	r3, r0
 8010ac8:	0c12      	lsrs	r2, r2, #16
 8010aca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010ace:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ad8:	45c1      	cmp	r9, r8
 8010ada:	f841 3b04 	str.w	r3, [r1], #4
 8010ade:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010ae2:	d2e6      	bcs.n	8010ab2 <quorem+0xa4>
 8010ae4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ae8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010aec:	b922      	cbnz	r2, 8010af8 <quorem+0xea>
 8010aee:	3b04      	subs	r3, #4
 8010af0:	429d      	cmp	r5, r3
 8010af2:	461a      	mov	r2, r3
 8010af4:	d30b      	bcc.n	8010b0e <quorem+0x100>
 8010af6:	613c      	str	r4, [r7, #16]
 8010af8:	3601      	adds	r6, #1
 8010afa:	4630      	mov	r0, r6
 8010afc:	b003      	add	sp, #12
 8010afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b02:	6812      	ldr	r2, [r2, #0]
 8010b04:	3b04      	subs	r3, #4
 8010b06:	2a00      	cmp	r2, #0
 8010b08:	d1cb      	bne.n	8010aa2 <quorem+0x94>
 8010b0a:	3c01      	subs	r4, #1
 8010b0c:	e7c6      	b.n	8010a9c <quorem+0x8e>
 8010b0e:	6812      	ldr	r2, [r2, #0]
 8010b10:	3b04      	subs	r3, #4
 8010b12:	2a00      	cmp	r2, #0
 8010b14:	d1ef      	bne.n	8010af6 <quorem+0xe8>
 8010b16:	3c01      	subs	r4, #1
 8010b18:	e7ea      	b.n	8010af0 <quorem+0xe2>
 8010b1a:	2000      	movs	r0, #0
 8010b1c:	e7ee      	b.n	8010afc <quorem+0xee>
	...

08010b20 <_dtoa_r>:
 8010b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b24:	69c7      	ldr	r7, [r0, #28]
 8010b26:	b099      	sub	sp, #100	@ 0x64
 8010b28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010b2c:	ec55 4b10 	vmov	r4, r5, d0
 8010b30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010b32:	9109      	str	r1, [sp, #36]	@ 0x24
 8010b34:	4683      	mov	fp, r0
 8010b36:	920e      	str	r2, [sp, #56]	@ 0x38
 8010b38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010b3a:	b97f      	cbnz	r7, 8010b5c <_dtoa_r+0x3c>
 8010b3c:	2010      	movs	r0, #16
 8010b3e:	f000 ff55 	bl	80119ec <malloc>
 8010b42:	4602      	mov	r2, r0
 8010b44:	f8cb 001c 	str.w	r0, [fp, #28]
 8010b48:	b920      	cbnz	r0, 8010b54 <_dtoa_r+0x34>
 8010b4a:	4ba7      	ldr	r3, [pc, #668]	@ (8010de8 <_dtoa_r+0x2c8>)
 8010b4c:	21ef      	movs	r1, #239	@ 0xef
 8010b4e:	48a7      	ldr	r0, [pc, #668]	@ (8010dec <_dtoa_r+0x2cc>)
 8010b50:	f001 fd12 	bl	8012578 <__assert_func>
 8010b54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010b58:	6007      	str	r7, [r0, #0]
 8010b5a:	60c7      	str	r7, [r0, #12]
 8010b5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010b60:	6819      	ldr	r1, [r3, #0]
 8010b62:	b159      	cbz	r1, 8010b7c <_dtoa_r+0x5c>
 8010b64:	685a      	ldr	r2, [r3, #4]
 8010b66:	604a      	str	r2, [r1, #4]
 8010b68:	2301      	movs	r3, #1
 8010b6a:	4093      	lsls	r3, r2
 8010b6c:	608b      	str	r3, [r1, #8]
 8010b6e:	4658      	mov	r0, fp
 8010b70:	f001 f8de 	bl	8011d30 <_Bfree>
 8010b74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	601a      	str	r2, [r3, #0]
 8010b7c:	1e2b      	subs	r3, r5, #0
 8010b7e:	bfb9      	ittee	lt
 8010b80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010b84:	9303      	strlt	r3, [sp, #12]
 8010b86:	2300      	movge	r3, #0
 8010b88:	6033      	strge	r3, [r6, #0]
 8010b8a:	9f03      	ldr	r7, [sp, #12]
 8010b8c:	4b98      	ldr	r3, [pc, #608]	@ (8010df0 <_dtoa_r+0x2d0>)
 8010b8e:	bfbc      	itt	lt
 8010b90:	2201      	movlt	r2, #1
 8010b92:	6032      	strlt	r2, [r6, #0]
 8010b94:	43bb      	bics	r3, r7
 8010b96:	d112      	bne.n	8010bbe <_dtoa_r+0x9e>
 8010b98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010b9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010b9e:	6013      	str	r3, [r2, #0]
 8010ba0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ba4:	4323      	orrs	r3, r4
 8010ba6:	f000 854d 	beq.w	8011644 <_dtoa_r+0xb24>
 8010baa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010bac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010e04 <_dtoa_r+0x2e4>
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f000 854f 	beq.w	8011654 <_dtoa_r+0xb34>
 8010bb6:	f10a 0303 	add.w	r3, sl, #3
 8010bba:	f000 bd49 	b.w	8011650 <_dtoa_r+0xb30>
 8010bbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	ec51 0b17 	vmov	r0, r1, d7
 8010bc8:	2300      	movs	r3, #0
 8010bca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010bce:	f7ef ffa3 	bl	8000b18 <__aeabi_dcmpeq>
 8010bd2:	4680      	mov	r8, r0
 8010bd4:	b158      	cbz	r0, 8010bee <_dtoa_r+0xce>
 8010bd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010bd8:	2301      	movs	r3, #1
 8010bda:	6013      	str	r3, [r2, #0]
 8010bdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010bde:	b113      	cbz	r3, 8010be6 <_dtoa_r+0xc6>
 8010be0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010be2:	4b84      	ldr	r3, [pc, #528]	@ (8010df4 <_dtoa_r+0x2d4>)
 8010be4:	6013      	str	r3, [r2, #0]
 8010be6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010e08 <_dtoa_r+0x2e8>
 8010bea:	f000 bd33 	b.w	8011654 <_dtoa_r+0xb34>
 8010bee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010bf2:	aa16      	add	r2, sp, #88	@ 0x58
 8010bf4:	a917      	add	r1, sp, #92	@ 0x5c
 8010bf6:	4658      	mov	r0, fp
 8010bf8:	f001 fb84 	bl	8012304 <__d2b>
 8010bfc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010c00:	4681      	mov	r9, r0
 8010c02:	2e00      	cmp	r6, #0
 8010c04:	d077      	beq.n	8010cf6 <_dtoa_r+0x1d6>
 8010c06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010c18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010c1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010c20:	4619      	mov	r1, r3
 8010c22:	2200      	movs	r2, #0
 8010c24:	4b74      	ldr	r3, [pc, #464]	@ (8010df8 <_dtoa_r+0x2d8>)
 8010c26:	f7ef fb57 	bl	80002d8 <__aeabi_dsub>
 8010c2a:	a369      	add	r3, pc, #420	@ (adr r3, 8010dd0 <_dtoa_r+0x2b0>)
 8010c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c30:	f7ef fd0a 	bl	8000648 <__aeabi_dmul>
 8010c34:	a368      	add	r3, pc, #416	@ (adr r3, 8010dd8 <_dtoa_r+0x2b8>)
 8010c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3a:	f7ef fb4f 	bl	80002dc <__adddf3>
 8010c3e:	4604      	mov	r4, r0
 8010c40:	4630      	mov	r0, r6
 8010c42:	460d      	mov	r5, r1
 8010c44:	f7ef fc96 	bl	8000574 <__aeabi_i2d>
 8010c48:	a365      	add	r3, pc, #404	@ (adr r3, 8010de0 <_dtoa_r+0x2c0>)
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	f7ef fcfb 	bl	8000648 <__aeabi_dmul>
 8010c52:	4602      	mov	r2, r0
 8010c54:	460b      	mov	r3, r1
 8010c56:	4620      	mov	r0, r4
 8010c58:	4629      	mov	r1, r5
 8010c5a:	f7ef fb3f 	bl	80002dc <__adddf3>
 8010c5e:	4604      	mov	r4, r0
 8010c60:	460d      	mov	r5, r1
 8010c62:	f7ef ffa1 	bl	8000ba8 <__aeabi_d2iz>
 8010c66:	2200      	movs	r2, #0
 8010c68:	4607      	mov	r7, r0
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	4629      	mov	r1, r5
 8010c70:	f7ef ff5c 	bl	8000b2c <__aeabi_dcmplt>
 8010c74:	b140      	cbz	r0, 8010c88 <_dtoa_r+0x168>
 8010c76:	4638      	mov	r0, r7
 8010c78:	f7ef fc7c 	bl	8000574 <__aeabi_i2d>
 8010c7c:	4622      	mov	r2, r4
 8010c7e:	462b      	mov	r3, r5
 8010c80:	f7ef ff4a 	bl	8000b18 <__aeabi_dcmpeq>
 8010c84:	b900      	cbnz	r0, 8010c88 <_dtoa_r+0x168>
 8010c86:	3f01      	subs	r7, #1
 8010c88:	2f16      	cmp	r7, #22
 8010c8a:	d851      	bhi.n	8010d30 <_dtoa_r+0x210>
 8010c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8010dfc <_dtoa_r+0x2dc>)
 8010c8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c9a:	f7ef ff47 	bl	8000b2c <__aeabi_dcmplt>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d048      	beq.n	8010d34 <_dtoa_r+0x214>
 8010ca2:	3f01      	subs	r7, #1
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	9312      	str	r3, [sp, #72]	@ 0x48
 8010ca8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010caa:	1b9b      	subs	r3, r3, r6
 8010cac:	1e5a      	subs	r2, r3, #1
 8010cae:	bf44      	itt	mi
 8010cb0:	f1c3 0801 	rsbmi	r8, r3, #1
 8010cb4:	2300      	movmi	r3, #0
 8010cb6:	9208      	str	r2, [sp, #32]
 8010cb8:	bf54      	ite	pl
 8010cba:	f04f 0800 	movpl.w	r8, #0
 8010cbe:	9308      	strmi	r3, [sp, #32]
 8010cc0:	2f00      	cmp	r7, #0
 8010cc2:	db39      	blt.n	8010d38 <_dtoa_r+0x218>
 8010cc4:	9b08      	ldr	r3, [sp, #32]
 8010cc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010cc8:	443b      	add	r3, r7
 8010cca:	9308      	str	r3, [sp, #32]
 8010ccc:	2300      	movs	r3, #0
 8010cce:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cd2:	2b09      	cmp	r3, #9
 8010cd4:	d864      	bhi.n	8010da0 <_dtoa_r+0x280>
 8010cd6:	2b05      	cmp	r3, #5
 8010cd8:	bfc4      	itt	gt
 8010cda:	3b04      	subgt	r3, #4
 8010cdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ce0:	f1a3 0302 	sub.w	r3, r3, #2
 8010ce4:	bfcc      	ite	gt
 8010ce6:	2400      	movgt	r4, #0
 8010ce8:	2401      	movle	r4, #1
 8010cea:	2b03      	cmp	r3, #3
 8010cec:	d863      	bhi.n	8010db6 <_dtoa_r+0x296>
 8010cee:	e8df f003 	tbb	[pc, r3]
 8010cf2:	372a      	.short	0x372a
 8010cf4:	5535      	.short	0x5535
 8010cf6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010cfa:	441e      	add	r6, r3
 8010cfc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010d00:	2b20      	cmp	r3, #32
 8010d02:	bfc1      	itttt	gt
 8010d04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010d08:	409f      	lslgt	r7, r3
 8010d0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010d0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010d12:	bfd6      	itet	le
 8010d14:	f1c3 0320 	rsble	r3, r3, #32
 8010d18:	ea47 0003 	orrgt.w	r0, r7, r3
 8010d1c:	fa04 f003 	lslle.w	r0, r4, r3
 8010d20:	f7ef fc18 	bl	8000554 <__aeabi_ui2d>
 8010d24:	2201      	movs	r2, #1
 8010d26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010d2a:	3e01      	subs	r6, #1
 8010d2c:	9214      	str	r2, [sp, #80]	@ 0x50
 8010d2e:	e777      	b.n	8010c20 <_dtoa_r+0x100>
 8010d30:	2301      	movs	r3, #1
 8010d32:	e7b8      	b.n	8010ca6 <_dtoa_r+0x186>
 8010d34:	9012      	str	r0, [sp, #72]	@ 0x48
 8010d36:	e7b7      	b.n	8010ca8 <_dtoa_r+0x188>
 8010d38:	427b      	negs	r3, r7
 8010d3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	eba8 0807 	sub.w	r8, r8, r7
 8010d42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010d44:	e7c4      	b.n	8010cd0 <_dtoa_r+0x1b0>
 8010d46:	2300      	movs	r3, #0
 8010d48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	dc35      	bgt.n	8010dbc <_dtoa_r+0x29c>
 8010d50:	2301      	movs	r3, #1
 8010d52:	9300      	str	r3, [sp, #0]
 8010d54:	9307      	str	r3, [sp, #28]
 8010d56:	461a      	mov	r2, r3
 8010d58:	920e      	str	r2, [sp, #56]	@ 0x38
 8010d5a:	e00b      	b.n	8010d74 <_dtoa_r+0x254>
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	e7f3      	b.n	8010d48 <_dtoa_r+0x228>
 8010d60:	2300      	movs	r3, #0
 8010d62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d66:	18fb      	adds	r3, r7, r3
 8010d68:	9300      	str	r3, [sp, #0]
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	9307      	str	r3, [sp, #28]
 8010d70:	bfb8      	it	lt
 8010d72:	2301      	movlt	r3, #1
 8010d74:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010d78:	2100      	movs	r1, #0
 8010d7a:	2204      	movs	r2, #4
 8010d7c:	f102 0514 	add.w	r5, r2, #20
 8010d80:	429d      	cmp	r5, r3
 8010d82:	d91f      	bls.n	8010dc4 <_dtoa_r+0x2a4>
 8010d84:	6041      	str	r1, [r0, #4]
 8010d86:	4658      	mov	r0, fp
 8010d88:	f000 ff92 	bl	8011cb0 <_Balloc>
 8010d8c:	4682      	mov	sl, r0
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	d13c      	bne.n	8010e0c <_dtoa_r+0x2ec>
 8010d92:	4b1b      	ldr	r3, [pc, #108]	@ (8010e00 <_dtoa_r+0x2e0>)
 8010d94:	4602      	mov	r2, r0
 8010d96:	f240 11af 	movw	r1, #431	@ 0x1af
 8010d9a:	e6d8      	b.n	8010b4e <_dtoa_r+0x2e>
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	e7e0      	b.n	8010d62 <_dtoa_r+0x242>
 8010da0:	2401      	movs	r4, #1
 8010da2:	2300      	movs	r3, #0
 8010da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010da6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010dac:	9300      	str	r3, [sp, #0]
 8010dae:	9307      	str	r3, [sp, #28]
 8010db0:	2200      	movs	r2, #0
 8010db2:	2312      	movs	r3, #18
 8010db4:	e7d0      	b.n	8010d58 <_dtoa_r+0x238>
 8010db6:	2301      	movs	r3, #1
 8010db8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010dba:	e7f5      	b.n	8010da8 <_dtoa_r+0x288>
 8010dbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010dbe:	9300      	str	r3, [sp, #0]
 8010dc0:	9307      	str	r3, [sp, #28]
 8010dc2:	e7d7      	b.n	8010d74 <_dtoa_r+0x254>
 8010dc4:	3101      	adds	r1, #1
 8010dc6:	0052      	lsls	r2, r2, #1
 8010dc8:	e7d8      	b.n	8010d7c <_dtoa_r+0x25c>
 8010dca:	bf00      	nop
 8010dcc:	f3af 8000 	nop.w
 8010dd0:	636f4361 	.word	0x636f4361
 8010dd4:	3fd287a7 	.word	0x3fd287a7
 8010dd8:	8b60c8b3 	.word	0x8b60c8b3
 8010ddc:	3fc68a28 	.word	0x3fc68a28
 8010de0:	509f79fb 	.word	0x509f79fb
 8010de4:	3fd34413 	.word	0x3fd34413
 8010de8:	08012fcd 	.word	0x08012fcd
 8010dec:	08012fe4 	.word	0x08012fe4
 8010df0:	7ff00000 	.word	0x7ff00000
 8010df4:	08012f9d 	.word	0x08012f9d
 8010df8:	3ff80000 	.word	0x3ff80000
 8010dfc:	080130f0 	.word	0x080130f0
 8010e00:	0801303c 	.word	0x0801303c
 8010e04:	08012fc9 	.word	0x08012fc9
 8010e08:	08012f9c 	.word	0x08012f9c
 8010e0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e10:	6018      	str	r0, [r3, #0]
 8010e12:	9b07      	ldr	r3, [sp, #28]
 8010e14:	2b0e      	cmp	r3, #14
 8010e16:	f200 80a4 	bhi.w	8010f62 <_dtoa_r+0x442>
 8010e1a:	2c00      	cmp	r4, #0
 8010e1c:	f000 80a1 	beq.w	8010f62 <_dtoa_r+0x442>
 8010e20:	2f00      	cmp	r7, #0
 8010e22:	dd33      	ble.n	8010e8c <_dtoa_r+0x36c>
 8010e24:	4bad      	ldr	r3, [pc, #692]	@ (80110dc <_dtoa_r+0x5bc>)
 8010e26:	f007 020f 	and.w	r2, r7, #15
 8010e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e2e:	ed93 7b00 	vldr	d7, [r3]
 8010e32:	05f8      	lsls	r0, r7, #23
 8010e34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010e38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010e3c:	d516      	bpl.n	8010e6c <_dtoa_r+0x34c>
 8010e3e:	4ba8      	ldr	r3, [pc, #672]	@ (80110e0 <_dtoa_r+0x5c0>)
 8010e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e48:	f7ef fd28 	bl	800089c <__aeabi_ddiv>
 8010e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e50:	f004 040f 	and.w	r4, r4, #15
 8010e54:	2603      	movs	r6, #3
 8010e56:	4da2      	ldr	r5, [pc, #648]	@ (80110e0 <_dtoa_r+0x5c0>)
 8010e58:	b954      	cbnz	r4, 8010e70 <_dtoa_r+0x350>
 8010e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e62:	f7ef fd1b 	bl	800089c <__aeabi_ddiv>
 8010e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e6a:	e028      	b.n	8010ebe <_dtoa_r+0x39e>
 8010e6c:	2602      	movs	r6, #2
 8010e6e:	e7f2      	b.n	8010e56 <_dtoa_r+0x336>
 8010e70:	07e1      	lsls	r1, r4, #31
 8010e72:	d508      	bpl.n	8010e86 <_dtoa_r+0x366>
 8010e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010e7c:	f7ef fbe4 	bl	8000648 <__aeabi_dmul>
 8010e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e84:	3601      	adds	r6, #1
 8010e86:	1064      	asrs	r4, r4, #1
 8010e88:	3508      	adds	r5, #8
 8010e8a:	e7e5      	b.n	8010e58 <_dtoa_r+0x338>
 8010e8c:	f000 80d2 	beq.w	8011034 <_dtoa_r+0x514>
 8010e90:	427c      	negs	r4, r7
 8010e92:	4b92      	ldr	r3, [pc, #584]	@ (80110dc <_dtoa_r+0x5bc>)
 8010e94:	4d92      	ldr	r5, [pc, #584]	@ (80110e0 <_dtoa_r+0x5c0>)
 8010e96:	f004 020f 	and.w	r2, r4, #15
 8010e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ea6:	f7ef fbcf 	bl	8000648 <__aeabi_dmul>
 8010eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010eae:	1124      	asrs	r4, r4, #4
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	2602      	movs	r6, #2
 8010eb4:	2c00      	cmp	r4, #0
 8010eb6:	f040 80b2 	bne.w	801101e <_dtoa_r+0x4fe>
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d1d3      	bne.n	8010e66 <_dtoa_r+0x346>
 8010ebe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ec0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f000 80b7 	beq.w	8011038 <_dtoa_r+0x518>
 8010eca:	4b86      	ldr	r3, [pc, #536]	@ (80110e4 <_dtoa_r+0x5c4>)
 8010ecc:	2200      	movs	r2, #0
 8010ece:	4620      	mov	r0, r4
 8010ed0:	4629      	mov	r1, r5
 8010ed2:	f7ef fe2b 	bl	8000b2c <__aeabi_dcmplt>
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	f000 80ae 	beq.w	8011038 <_dtoa_r+0x518>
 8010edc:	9b07      	ldr	r3, [sp, #28]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	f000 80aa 	beq.w	8011038 <_dtoa_r+0x518>
 8010ee4:	9b00      	ldr	r3, [sp, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	dd37      	ble.n	8010f5a <_dtoa_r+0x43a>
 8010eea:	1e7b      	subs	r3, r7, #1
 8010eec:	9304      	str	r3, [sp, #16]
 8010eee:	4620      	mov	r0, r4
 8010ef0:	4b7d      	ldr	r3, [pc, #500]	@ (80110e8 <_dtoa_r+0x5c8>)
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	4629      	mov	r1, r5
 8010ef6:	f7ef fba7 	bl	8000648 <__aeabi_dmul>
 8010efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010efe:	9c00      	ldr	r4, [sp, #0]
 8010f00:	3601      	adds	r6, #1
 8010f02:	4630      	mov	r0, r6
 8010f04:	f7ef fb36 	bl	8000574 <__aeabi_i2d>
 8010f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f0c:	f7ef fb9c 	bl	8000648 <__aeabi_dmul>
 8010f10:	4b76      	ldr	r3, [pc, #472]	@ (80110ec <_dtoa_r+0x5cc>)
 8010f12:	2200      	movs	r2, #0
 8010f14:	f7ef f9e2 	bl	80002dc <__adddf3>
 8010f18:	4605      	mov	r5, r0
 8010f1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010f1e:	2c00      	cmp	r4, #0
 8010f20:	f040 808d 	bne.w	801103e <_dtoa_r+0x51e>
 8010f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f28:	4b71      	ldr	r3, [pc, #452]	@ (80110f0 <_dtoa_r+0x5d0>)
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	f7ef f9d4 	bl	80002d8 <__aeabi_dsub>
 8010f30:	4602      	mov	r2, r0
 8010f32:	460b      	mov	r3, r1
 8010f34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f38:	462a      	mov	r2, r5
 8010f3a:	4633      	mov	r3, r6
 8010f3c:	f7ef fe14 	bl	8000b68 <__aeabi_dcmpgt>
 8010f40:	2800      	cmp	r0, #0
 8010f42:	f040 828b 	bne.w	801145c <_dtoa_r+0x93c>
 8010f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f4a:	462a      	mov	r2, r5
 8010f4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010f50:	f7ef fdec 	bl	8000b2c <__aeabi_dcmplt>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	f040 8128 	bne.w	80111aa <_dtoa_r+0x68a>
 8010f5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010f5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010f62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	f2c0 815a 	blt.w	801121e <_dtoa_r+0x6fe>
 8010f6a:	2f0e      	cmp	r7, #14
 8010f6c:	f300 8157 	bgt.w	801121e <_dtoa_r+0x6fe>
 8010f70:	4b5a      	ldr	r3, [pc, #360]	@ (80110dc <_dtoa_r+0x5bc>)
 8010f72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010f76:	ed93 7b00 	vldr	d7, [r3]
 8010f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	ed8d 7b00 	vstr	d7, [sp]
 8010f82:	da03      	bge.n	8010f8c <_dtoa_r+0x46c>
 8010f84:	9b07      	ldr	r3, [sp, #28]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	f340 8101 	ble.w	801118e <_dtoa_r+0x66e>
 8010f8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010f90:	4656      	mov	r6, sl
 8010f92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f96:	4620      	mov	r0, r4
 8010f98:	4629      	mov	r1, r5
 8010f9a:	f7ef fc7f 	bl	800089c <__aeabi_ddiv>
 8010f9e:	f7ef fe03 	bl	8000ba8 <__aeabi_d2iz>
 8010fa2:	4680      	mov	r8, r0
 8010fa4:	f7ef fae6 	bl	8000574 <__aeabi_i2d>
 8010fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fac:	f7ef fb4c 	bl	8000648 <__aeabi_dmul>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	4629      	mov	r1, r5
 8010fb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010fbc:	f7ef f98c 	bl	80002d8 <__aeabi_dsub>
 8010fc0:	f806 4b01 	strb.w	r4, [r6], #1
 8010fc4:	9d07      	ldr	r5, [sp, #28]
 8010fc6:	eba6 040a 	sub.w	r4, r6, sl
 8010fca:	42a5      	cmp	r5, r4
 8010fcc:	4602      	mov	r2, r0
 8010fce:	460b      	mov	r3, r1
 8010fd0:	f040 8117 	bne.w	8011202 <_dtoa_r+0x6e2>
 8010fd4:	f7ef f982 	bl	80002dc <__adddf3>
 8010fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fdc:	4604      	mov	r4, r0
 8010fde:	460d      	mov	r5, r1
 8010fe0:	f7ef fdc2 	bl	8000b68 <__aeabi_dcmpgt>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	f040 80f9 	bne.w	80111dc <_dtoa_r+0x6bc>
 8010fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fee:	4620      	mov	r0, r4
 8010ff0:	4629      	mov	r1, r5
 8010ff2:	f7ef fd91 	bl	8000b18 <__aeabi_dcmpeq>
 8010ff6:	b118      	cbz	r0, 8011000 <_dtoa_r+0x4e0>
 8010ff8:	f018 0f01 	tst.w	r8, #1
 8010ffc:	f040 80ee 	bne.w	80111dc <_dtoa_r+0x6bc>
 8011000:	4649      	mov	r1, r9
 8011002:	4658      	mov	r0, fp
 8011004:	f000 fe94 	bl	8011d30 <_Bfree>
 8011008:	2300      	movs	r3, #0
 801100a:	7033      	strb	r3, [r6, #0]
 801100c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801100e:	3701      	adds	r7, #1
 8011010:	601f      	str	r7, [r3, #0]
 8011012:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011014:	2b00      	cmp	r3, #0
 8011016:	f000 831d 	beq.w	8011654 <_dtoa_r+0xb34>
 801101a:	601e      	str	r6, [r3, #0]
 801101c:	e31a      	b.n	8011654 <_dtoa_r+0xb34>
 801101e:	07e2      	lsls	r2, r4, #31
 8011020:	d505      	bpl.n	801102e <_dtoa_r+0x50e>
 8011022:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011026:	f7ef fb0f 	bl	8000648 <__aeabi_dmul>
 801102a:	3601      	adds	r6, #1
 801102c:	2301      	movs	r3, #1
 801102e:	1064      	asrs	r4, r4, #1
 8011030:	3508      	adds	r5, #8
 8011032:	e73f      	b.n	8010eb4 <_dtoa_r+0x394>
 8011034:	2602      	movs	r6, #2
 8011036:	e742      	b.n	8010ebe <_dtoa_r+0x39e>
 8011038:	9c07      	ldr	r4, [sp, #28]
 801103a:	9704      	str	r7, [sp, #16]
 801103c:	e761      	b.n	8010f02 <_dtoa_r+0x3e2>
 801103e:	4b27      	ldr	r3, [pc, #156]	@ (80110dc <_dtoa_r+0x5bc>)
 8011040:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011042:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011046:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801104a:	4454      	add	r4, sl
 801104c:	2900      	cmp	r1, #0
 801104e:	d053      	beq.n	80110f8 <_dtoa_r+0x5d8>
 8011050:	4928      	ldr	r1, [pc, #160]	@ (80110f4 <_dtoa_r+0x5d4>)
 8011052:	2000      	movs	r0, #0
 8011054:	f7ef fc22 	bl	800089c <__aeabi_ddiv>
 8011058:	4633      	mov	r3, r6
 801105a:	462a      	mov	r2, r5
 801105c:	f7ef f93c 	bl	80002d8 <__aeabi_dsub>
 8011060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011064:	4656      	mov	r6, sl
 8011066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801106a:	f7ef fd9d 	bl	8000ba8 <__aeabi_d2iz>
 801106e:	4605      	mov	r5, r0
 8011070:	f7ef fa80 	bl	8000574 <__aeabi_i2d>
 8011074:	4602      	mov	r2, r0
 8011076:	460b      	mov	r3, r1
 8011078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801107c:	f7ef f92c 	bl	80002d8 <__aeabi_dsub>
 8011080:	3530      	adds	r5, #48	@ 0x30
 8011082:	4602      	mov	r2, r0
 8011084:	460b      	mov	r3, r1
 8011086:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801108a:	f806 5b01 	strb.w	r5, [r6], #1
 801108e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011092:	f7ef fd4b 	bl	8000b2c <__aeabi_dcmplt>
 8011096:	2800      	cmp	r0, #0
 8011098:	d171      	bne.n	801117e <_dtoa_r+0x65e>
 801109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801109e:	4911      	ldr	r1, [pc, #68]	@ (80110e4 <_dtoa_r+0x5c4>)
 80110a0:	2000      	movs	r0, #0
 80110a2:	f7ef f919 	bl	80002d8 <__aeabi_dsub>
 80110a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80110aa:	f7ef fd3f 	bl	8000b2c <__aeabi_dcmplt>
 80110ae:	2800      	cmp	r0, #0
 80110b0:	f040 8095 	bne.w	80111de <_dtoa_r+0x6be>
 80110b4:	42a6      	cmp	r6, r4
 80110b6:	f43f af50 	beq.w	8010f5a <_dtoa_r+0x43a>
 80110ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80110be:	4b0a      	ldr	r3, [pc, #40]	@ (80110e8 <_dtoa_r+0x5c8>)
 80110c0:	2200      	movs	r2, #0
 80110c2:	f7ef fac1 	bl	8000648 <__aeabi_dmul>
 80110c6:	4b08      	ldr	r3, [pc, #32]	@ (80110e8 <_dtoa_r+0x5c8>)
 80110c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80110cc:	2200      	movs	r2, #0
 80110ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110d2:	f7ef fab9 	bl	8000648 <__aeabi_dmul>
 80110d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110da:	e7c4      	b.n	8011066 <_dtoa_r+0x546>
 80110dc:	080130f0 	.word	0x080130f0
 80110e0:	080130c8 	.word	0x080130c8
 80110e4:	3ff00000 	.word	0x3ff00000
 80110e8:	40240000 	.word	0x40240000
 80110ec:	401c0000 	.word	0x401c0000
 80110f0:	40140000 	.word	0x40140000
 80110f4:	3fe00000 	.word	0x3fe00000
 80110f8:	4631      	mov	r1, r6
 80110fa:	4628      	mov	r0, r5
 80110fc:	f7ef faa4 	bl	8000648 <__aeabi_dmul>
 8011100:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011104:	9415      	str	r4, [sp, #84]	@ 0x54
 8011106:	4656      	mov	r6, sl
 8011108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801110c:	f7ef fd4c 	bl	8000ba8 <__aeabi_d2iz>
 8011110:	4605      	mov	r5, r0
 8011112:	f7ef fa2f 	bl	8000574 <__aeabi_i2d>
 8011116:	4602      	mov	r2, r0
 8011118:	460b      	mov	r3, r1
 801111a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801111e:	f7ef f8db 	bl	80002d8 <__aeabi_dsub>
 8011122:	3530      	adds	r5, #48	@ 0x30
 8011124:	f806 5b01 	strb.w	r5, [r6], #1
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	42a6      	cmp	r6, r4
 801112e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011132:	f04f 0200 	mov.w	r2, #0
 8011136:	d124      	bne.n	8011182 <_dtoa_r+0x662>
 8011138:	4bac      	ldr	r3, [pc, #688]	@ (80113ec <_dtoa_r+0x8cc>)
 801113a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801113e:	f7ef f8cd 	bl	80002dc <__adddf3>
 8011142:	4602      	mov	r2, r0
 8011144:	460b      	mov	r3, r1
 8011146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801114a:	f7ef fd0d 	bl	8000b68 <__aeabi_dcmpgt>
 801114e:	2800      	cmp	r0, #0
 8011150:	d145      	bne.n	80111de <_dtoa_r+0x6be>
 8011152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011156:	49a5      	ldr	r1, [pc, #660]	@ (80113ec <_dtoa_r+0x8cc>)
 8011158:	2000      	movs	r0, #0
 801115a:	f7ef f8bd 	bl	80002d8 <__aeabi_dsub>
 801115e:	4602      	mov	r2, r0
 8011160:	460b      	mov	r3, r1
 8011162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011166:	f7ef fce1 	bl	8000b2c <__aeabi_dcmplt>
 801116a:	2800      	cmp	r0, #0
 801116c:	f43f aef5 	beq.w	8010f5a <_dtoa_r+0x43a>
 8011170:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011172:	1e73      	subs	r3, r6, #1
 8011174:	9315      	str	r3, [sp, #84]	@ 0x54
 8011176:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801117a:	2b30      	cmp	r3, #48	@ 0x30
 801117c:	d0f8      	beq.n	8011170 <_dtoa_r+0x650>
 801117e:	9f04      	ldr	r7, [sp, #16]
 8011180:	e73e      	b.n	8011000 <_dtoa_r+0x4e0>
 8011182:	4b9b      	ldr	r3, [pc, #620]	@ (80113f0 <_dtoa_r+0x8d0>)
 8011184:	f7ef fa60 	bl	8000648 <__aeabi_dmul>
 8011188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801118c:	e7bc      	b.n	8011108 <_dtoa_r+0x5e8>
 801118e:	d10c      	bne.n	80111aa <_dtoa_r+0x68a>
 8011190:	4b98      	ldr	r3, [pc, #608]	@ (80113f4 <_dtoa_r+0x8d4>)
 8011192:	2200      	movs	r2, #0
 8011194:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011198:	f7ef fa56 	bl	8000648 <__aeabi_dmul>
 801119c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80111a0:	f7ef fcd8 	bl	8000b54 <__aeabi_dcmpge>
 80111a4:	2800      	cmp	r0, #0
 80111a6:	f000 8157 	beq.w	8011458 <_dtoa_r+0x938>
 80111aa:	2400      	movs	r4, #0
 80111ac:	4625      	mov	r5, r4
 80111ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111b0:	43db      	mvns	r3, r3
 80111b2:	9304      	str	r3, [sp, #16]
 80111b4:	4656      	mov	r6, sl
 80111b6:	2700      	movs	r7, #0
 80111b8:	4621      	mov	r1, r4
 80111ba:	4658      	mov	r0, fp
 80111bc:	f000 fdb8 	bl	8011d30 <_Bfree>
 80111c0:	2d00      	cmp	r5, #0
 80111c2:	d0dc      	beq.n	801117e <_dtoa_r+0x65e>
 80111c4:	b12f      	cbz	r7, 80111d2 <_dtoa_r+0x6b2>
 80111c6:	42af      	cmp	r7, r5
 80111c8:	d003      	beq.n	80111d2 <_dtoa_r+0x6b2>
 80111ca:	4639      	mov	r1, r7
 80111cc:	4658      	mov	r0, fp
 80111ce:	f000 fdaf 	bl	8011d30 <_Bfree>
 80111d2:	4629      	mov	r1, r5
 80111d4:	4658      	mov	r0, fp
 80111d6:	f000 fdab 	bl	8011d30 <_Bfree>
 80111da:	e7d0      	b.n	801117e <_dtoa_r+0x65e>
 80111dc:	9704      	str	r7, [sp, #16]
 80111de:	4633      	mov	r3, r6
 80111e0:	461e      	mov	r6, r3
 80111e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111e6:	2a39      	cmp	r2, #57	@ 0x39
 80111e8:	d107      	bne.n	80111fa <_dtoa_r+0x6da>
 80111ea:	459a      	cmp	sl, r3
 80111ec:	d1f8      	bne.n	80111e0 <_dtoa_r+0x6c0>
 80111ee:	9a04      	ldr	r2, [sp, #16]
 80111f0:	3201      	adds	r2, #1
 80111f2:	9204      	str	r2, [sp, #16]
 80111f4:	2230      	movs	r2, #48	@ 0x30
 80111f6:	f88a 2000 	strb.w	r2, [sl]
 80111fa:	781a      	ldrb	r2, [r3, #0]
 80111fc:	3201      	adds	r2, #1
 80111fe:	701a      	strb	r2, [r3, #0]
 8011200:	e7bd      	b.n	801117e <_dtoa_r+0x65e>
 8011202:	4b7b      	ldr	r3, [pc, #492]	@ (80113f0 <_dtoa_r+0x8d0>)
 8011204:	2200      	movs	r2, #0
 8011206:	f7ef fa1f 	bl	8000648 <__aeabi_dmul>
 801120a:	2200      	movs	r2, #0
 801120c:	2300      	movs	r3, #0
 801120e:	4604      	mov	r4, r0
 8011210:	460d      	mov	r5, r1
 8011212:	f7ef fc81 	bl	8000b18 <__aeabi_dcmpeq>
 8011216:	2800      	cmp	r0, #0
 8011218:	f43f aebb 	beq.w	8010f92 <_dtoa_r+0x472>
 801121c:	e6f0      	b.n	8011000 <_dtoa_r+0x4e0>
 801121e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011220:	2a00      	cmp	r2, #0
 8011222:	f000 80db 	beq.w	80113dc <_dtoa_r+0x8bc>
 8011226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011228:	2a01      	cmp	r2, #1
 801122a:	f300 80bf 	bgt.w	80113ac <_dtoa_r+0x88c>
 801122e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011230:	2a00      	cmp	r2, #0
 8011232:	f000 80b7 	beq.w	80113a4 <_dtoa_r+0x884>
 8011236:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801123a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801123c:	4646      	mov	r6, r8
 801123e:	9a08      	ldr	r2, [sp, #32]
 8011240:	2101      	movs	r1, #1
 8011242:	441a      	add	r2, r3
 8011244:	4658      	mov	r0, fp
 8011246:	4498      	add	r8, r3
 8011248:	9208      	str	r2, [sp, #32]
 801124a:	f000 fe25 	bl	8011e98 <__i2b>
 801124e:	4605      	mov	r5, r0
 8011250:	b15e      	cbz	r6, 801126a <_dtoa_r+0x74a>
 8011252:	9b08      	ldr	r3, [sp, #32]
 8011254:	2b00      	cmp	r3, #0
 8011256:	dd08      	ble.n	801126a <_dtoa_r+0x74a>
 8011258:	42b3      	cmp	r3, r6
 801125a:	9a08      	ldr	r2, [sp, #32]
 801125c:	bfa8      	it	ge
 801125e:	4633      	movge	r3, r6
 8011260:	eba8 0803 	sub.w	r8, r8, r3
 8011264:	1af6      	subs	r6, r6, r3
 8011266:	1ad3      	subs	r3, r2, r3
 8011268:	9308      	str	r3, [sp, #32]
 801126a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801126c:	b1f3      	cbz	r3, 80112ac <_dtoa_r+0x78c>
 801126e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011270:	2b00      	cmp	r3, #0
 8011272:	f000 80b7 	beq.w	80113e4 <_dtoa_r+0x8c4>
 8011276:	b18c      	cbz	r4, 801129c <_dtoa_r+0x77c>
 8011278:	4629      	mov	r1, r5
 801127a:	4622      	mov	r2, r4
 801127c:	4658      	mov	r0, fp
 801127e:	f000 fecb 	bl	8012018 <__pow5mult>
 8011282:	464a      	mov	r2, r9
 8011284:	4601      	mov	r1, r0
 8011286:	4605      	mov	r5, r0
 8011288:	4658      	mov	r0, fp
 801128a:	f000 fe1b 	bl	8011ec4 <__multiply>
 801128e:	4649      	mov	r1, r9
 8011290:	9004      	str	r0, [sp, #16]
 8011292:	4658      	mov	r0, fp
 8011294:	f000 fd4c 	bl	8011d30 <_Bfree>
 8011298:	9b04      	ldr	r3, [sp, #16]
 801129a:	4699      	mov	r9, r3
 801129c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801129e:	1b1a      	subs	r2, r3, r4
 80112a0:	d004      	beq.n	80112ac <_dtoa_r+0x78c>
 80112a2:	4649      	mov	r1, r9
 80112a4:	4658      	mov	r0, fp
 80112a6:	f000 feb7 	bl	8012018 <__pow5mult>
 80112aa:	4681      	mov	r9, r0
 80112ac:	2101      	movs	r1, #1
 80112ae:	4658      	mov	r0, fp
 80112b0:	f000 fdf2 	bl	8011e98 <__i2b>
 80112b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112b6:	4604      	mov	r4, r0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	f000 81cf 	beq.w	801165c <_dtoa_r+0xb3c>
 80112be:	461a      	mov	r2, r3
 80112c0:	4601      	mov	r1, r0
 80112c2:	4658      	mov	r0, fp
 80112c4:	f000 fea8 	bl	8012018 <__pow5mult>
 80112c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112ca:	2b01      	cmp	r3, #1
 80112cc:	4604      	mov	r4, r0
 80112ce:	f300 8095 	bgt.w	80113fc <_dtoa_r+0x8dc>
 80112d2:	9b02      	ldr	r3, [sp, #8]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	f040 8087 	bne.w	80113e8 <_dtoa_r+0x8c8>
 80112da:	9b03      	ldr	r3, [sp, #12]
 80112dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	f040 8089 	bne.w	80113f8 <_dtoa_r+0x8d8>
 80112e6:	9b03      	ldr	r3, [sp, #12]
 80112e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80112ec:	0d1b      	lsrs	r3, r3, #20
 80112ee:	051b      	lsls	r3, r3, #20
 80112f0:	b12b      	cbz	r3, 80112fe <_dtoa_r+0x7de>
 80112f2:	9b08      	ldr	r3, [sp, #32]
 80112f4:	3301      	adds	r3, #1
 80112f6:	9308      	str	r3, [sp, #32]
 80112f8:	f108 0801 	add.w	r8, r8, #1
 80112fc:	2301      	movs	r3, #1
 80112fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011302:	2b00      	cmp	r3, #0
 8011304:	f000 81b0 	beq.w	8011668 <_dtoa_r+0xb48>
 8011308:	6923      	ldr	r3, [r4, #16]
 801130a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801130e:	6918      	ldr	r0, [r3, #16]
 8011310:	f000 fd76 	bl	8011e00 <__hi0bits>
 8011314:	f1c0 0020 	rsb	r0, r0, #32
 8011318:	9b08      	ldr	r3, [sp, #32]
 801131a:	4418      	add	r0, r3
 801131c:	f010 001f 	ands.w	r0, r0, #31
 8011320:	d077      	beq.n	8011412 <_dtoa_r+0x8f2>
 8011322:	f1c0 0320 	rsb	r3, r0, #32
 8011326:	2b04      	cmp	r3, #4
 8011328:	dd6b      	ble.n	8011402 <_dtoa_r+0x8e2>
 801132a:	9b08      	ldr	r3, [sp, #32]
 801132c:	f1c0 001c 	rsb	r0, r0, #28
 8011330:	4403      	add	r3, r0
 8011332:	4480      	add	r8, r0
 8011334:	4406      	add	r6, r0
 8011336:	9308      	str	r3, [sp, #32]
 8011338:	f1b8 0f00 	cmp.w	r8, #0
 801133c:	dd05      	ble.n	801134a <_dtoa_r+0x82a>
 801133e:	4649      	mov	r1, r9
 8011340:	4642      	mov	r2, r8
 8011342:	4658      	mov	r0, fp
 8011344:	f000 fec2 	bl	80120cc <__lshift>
 8011348:	4681      	mov	r9, r0
 801134a:	9b08      	ldr	r3, [sp, #32]
 801134c:	2b00      	cmp	r3, #0
 801134e:	dd05      	ble.n	801135c <_dtoa_r+0x83c>
 8011350:	4621      	mov	r1, r4
 8011352:	461a      	mov	r2, r3
 8011354:	4658      	mov	r0, fp
 8011356:	f000 feb9 	bl	80120cc <__lshift>
 801135a:	4604      	mov	r4, r0
 801135c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801135e:	2b00      	cmp	r3, #0
 8011360:	d059      	beq.n	8011416 <_dtoa_r+0x8f6>
 8011362:	4621      	mov	r1, r4
 8011364:	4648      	mov	r0, r9
 8011366:	f000 ff1d 	bl	80121a4 <__mcmp>
 801136a:	2800      	cmp	r0, #0
 801136c:	da53      	bge.n	8011416 <_dtoa_r+0x8f6>
 801136e:	1e7b      	subs	r3, r7, #1
 8011370:	9304      	str	r3, [sp, #16]
 8011372:	4649      	mov	r1, r9
 8011374:	2300      	movs	r3, #0
 8011376:	220a      	movs	r2, #10
 8011378:	4658      	mov	r0, fp
 801137a:	f000 fcfb 	bl	8011d74 <__multadd>
 801137e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011380:	4681      	mov	r9, r0
 8011382:	2b00      	cmp	r3, #0
 8011384:	f000 8172 	beq.w	801166c <_dtoa_r+0xb4c>
 8011388:	2300      	movs	r3, #0
 801138a:	4629      	mov	r1, r5
 801138c:	220a      	movs	r2, #10
 801138e:	4658      	mov	r0, fp
 8011390:	f000 fcf0 	bl	8011d74 <__multadd>
 8011394:	9b00      	ldr	r3, [sp, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	4605      	mov	r5, r0
 801139a:	dc67      	bgt.n	801146c <_dtoa_r+0x94c>
 801139c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801139e:	2b02      	cmp	r3, #2
 80113a0:	dc41      	bgt.n	8011426 <_dtoa_r+0x906>
 80113a2:	e063      	b.n	801146c <_dtoa_r+0x94c>
 80113a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80113a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80113aa:	e746      	b.n	801123a <_dtoa_r+0x71a>
 80113ac:	9b07      	ldr	r3, [sp, #28]
 80113ae:	1e5c      	subs	r4, r3, #1
 80113b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113b2:	42a3      	cmp	r3, r4
 80113b4:	bfbf      	itttt	lt
 80113b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80113b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80113ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80113bc:	1ae3      	sublt	r3, r4, r3
 80113be:	bfb4      	ite	lt
 80113c0:	18d2      	addlt	r2, r2, r3
 80113c2:	1b1c      	subge	r4, r3, r4
 80113c4:	9b07      	ldr	r3, [sp, #28]
 80113c6:	bfbc      	itt	lt
 80113c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80113ca:	2400      	movlt	r4, #0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	bfb5      	itete	lt
 80113d0:	eba8 0603 	sublt.w	r6, r8, r3
 80113d4:	9b07      	ldrge	r3, [sp, #28]
 80113d6:	2300      	movlt	r3, #0
 80113d8:	4646      	movge	r6, r8
 80113da:	e730      	b.n	801123e <_dtoa_r+0x71e>
 80113dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80113de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80113e0:	4646      	mov	r6, r8
 80113e2:	e735      	b.n	8011250 <_dtoa_r+0x730>
 80113e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113e6:	e75c      	b.n	80112a2 <_dtoa_r+0x782>
 80113e8:	2300      	movs	r3, #0
 80113ea:	e788      	b.n	80112fe <_dtoa_r+0x7de>
 80113ec:	3fe00000 	.word	0x3fe00000
 80113f0:	40240000 	.word	0x40240000
 80113f4:	40140000 	.word	0x40140000
 80113f8:	9b02      	ldr	r3, [sp, #8]
 80113fa:	e780      	b.n	80112fe <_dtoa_r+0x7de>
 80113fc:	2300      	movs	r3, #0
 80113fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011400:	e782      	b.n	8011308 <_dtoa_r+0x7e8>
 8011402:	d099      	beq.n	8011338 <_dtoa_r+0x818>
 8011404:	9a08      	ldr	r2, [sp, #32]
 8011406:	331c      	adds	r3, #28
 8011408:	441a      	add	r2, r3
 801140a:	4498      	add	r8, r3
 801140c:	441e      	add	r6, r3
 801140e:	9208      	str	r2, [sp, #32]
 8011410:	e792      	b.n	8011338 <_dtoa_r+0x818>
 8011412:	4603      	mov	r3, r0
 8011414:	e7f6      	b.n	8011404 <_dtoa_r+0x8e4>
 8011416:	9b07      	ldr	r3, [sp, #28]
 8011418:	9704      	str	r7, [sp, #16]
 801141a:	2b00      	cmp	r3, #0
 801141c:	dc20      	bgt.n	8011460 <_dtoa_r+0x940>
 801141e:	9300      	str	r3, [sp, #0]
 8011420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011422:	2b02      	cmp	r3, #2
 8011424:	dd1e      	ble.n	8011464 <_dtoa_r+0x944>
 8011426:	9b00      	ldr	r3, [sp, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	f47f aec0 	bne.w	80111ae <_dtoa_r+0x68e>
 801142e:	4621      	mov	r1, r4
 8011430:	2205      	movs	r2, #5
 8011432:	4658      	mov	r0, fp
 8011434:	f000 fc9e 	bl	8011d74 <__multadd>
 8011438:	4601      	mov	r1, r0
 801143a:	4604      	mov	r4, r0
 801143c:	4648      	mov	r0, r9
 801143e:	f000 feb1 	bl	80121a4 <__mcmp>
 8011442:	2800      	cmp	r0, #0
 8011444:	f77f aeb3 	ble.w	80111ae <_dtoa_r+0x68e>
 8011448:	4656      	mov	r6, sl
 801144a:	2331      	movs	r3, #49	@ 0x31
 801144c:	f806 3b01 	strb.w	r3, [r6], #1
 8011450:	9b04      	ldr	r3, [sp, #16]
 8011452:	3301      	adds	r3, #1
 8011454:	9304      	str	r3, [sp, #16]
 8011456:	e6ae      	b.n	80111b6 <_dtoa_r+0x696>
 8011458:	9c07      	ldr	r4, [sp, #28]
 801145a:	9704      	str	r7, [sp, #16]
 801145c:	4625      	mov	r5, r4
 801145e:	e7f3      	b.n	8011448 <_dtoa_r+0x928>
 8011460:	9b07      	ldr	r3, [sp, #28]
 8011462:	9300      	str	r3, [sp, #0]
 8011464:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011466:	2b00      	cmp	r3, #0
 8011468:	f000 8104 	beq.w	8011674 <_dtoa_r+0xb54>
 801146c:	2e00      	cmp	r6, #0
 801146e:	dd05      	ble.n	801147c <_dtoa_r+0x95c>
 8011470:	4629      	mov	r1, r5
 8011472:	4632      	mov	r2, r6
 8011474:	4658      	mov	r0, fp
 8011476:	f000 fe29 	bl	80120cc <__lshift>
 801147a:	4605      	mov	r5, r0
 801147c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801147e:	2b00      	cmp	r3, #0
 8011480:	d05a      	beq.n	8011538 <_dtoa_r+0xa18>
 8011482:	6869      	ldr	r1, [r5, #4]
 8011484:	4658      	mov	r0, fp
 8011486:	f000 fc13 	bl	8011cb0 <_Balloc>
 801148a:	4606      	mov	r6, r0
 801148c:	b928      	cbnz	r0, 801149a <_dtoa_r+0x97a>
 801148e:	4b84      	ldr	r3, [pc, #528]	@ (80116a0 <_dtoa_r+0xb80>)
 8011490:	4602      	mov	r2, r0
 8011492:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011496:	f7ff bb5a 	b.w	8010b4e <_dtoa_r+0x2e>
 801149a:	692a      	ldr	r2, [r5, #16]
 801149c:	3202      	adds	r2, #2
 801149e:	0092      	lsls	r2, r2, #2
 80114a0:	f105 010c 	add.w	r1, r5, #12
 80114a4:	300c      	adds	r0, #12
 80114a6:	f7ff faa4 	bl	80109f2 <memcpy>
 80114aa:	2201      	movs	r2, #1
 80114ac:	4631      	mov	r1, r6
 80114ae:	4658      	mov	r0, fp
 80114b0:	f000 fe0c 	bl	80120cc <__lshift>
 80114b4:	f10a 0301 	add.w	r3, sl, #1
 80114b8:	9307      	str	r3, [sp, #28]
 80114ba:	9b00      	ldr	r3, [sp, #0]
 80114bc:	4453      	add	r3, sl
 80114be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114c0:	9b02      	ldr	r3, [sp, #8]
 80114c2:	f003 0301 	and.w	r3, r3, #1
 80114c6:	462f      	mov	r7, r5
 80114c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80114ca:	4605      	mov	r5, r0
 80114cc:	9b07      	ldr	r3, [sp, #28]
 80114ce:	4621      	mov	r1, r4
 80114d0:	3b01      	subs	r3, #1
 80114d2:	4648      	mov	r0, r9
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	f7ff fa9a 	bl	8010a0e <quorem>
 80114da:	4639      	mov	r1, r7
 80114dc:	9002      	str	r0, [sp, #8]
 80114de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80114e2:	4648      	mov	r0, r9
 80114e4:	f000 fe5e 	bl	80121a4 <__mcmp>
 80114e8:	462a      	mov	r2, r5
 80114ea:	9008      	str	r0, [sp, #32]
 80114ec:	4621      	mov	r1, r4
 80114ee:	4658      	mov	r0, fp
 80114f0:	f000 fe74 	bl	80121dc <__mdiff>
 80114f4:	68c2      	ldr	r2, [r0, #12]
 80114f6:	4606      	mov	r6, r0
 80114f8:	bb02      	cbnz	r2, 801153c <_dtoa_r+0xa1c>
 80114fa:	4601      	mov	r1, r0
 80114fc:	4648      	mov	r0, r9
 80114fe:	f000 fe51 	bl	80121a4 <__mcmp>
 8011502:	4602      	mov	r2, r0
 8011504:	4631      	mov	r1, r6
 8011506:	4658      	mov	r0, fp
 8011508:	920e      	str	r2, [sp, #56]	@ 0x38
 801150a:	f000 fc11 	bl	8011d30 <_Bfree>
 801150e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011510:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011512:	9e07      	ldr	r6, [sp, #28]
 8011514:	ea43 0102 	orr.w	r1, r3, r2
 8011518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801151a:	4319      	orrs	r1, r3
 801151c:	d110      	bne.n	8011540 <_dtoa_r+0xa20>
 801151e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011522:	d029      	beq.n	8011578 <_dtoa_r+0xa58>
 8011524:	9b08      	ldr	r3, [sp, #32]
 8011526:	2b00      	cmp	r3, #0
 8011528:	dd02      	ble.n	8011530 <_dtoa_r+0xa10>
 801152a:	9b02      	ldr	r3, [sp, #8]
 801152c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011530:	9b00      	ldr	r3, [sp, #0]
 8011532:	f883 8000 	strb.w	r8, [r3]
 8011536:	e63f      	b.n	80111b8 <_dtoa_r+0x698>
 8011538:	4628      	mov	r0, r5
 801153a:	e7bb      	b.n	80114b4 <_dtoa_r+0x994>
 801153c:	2201      	movs	r2, #1
 801153e:	e7e1      	b.n	8011504 <_dtoa_r+0x9e4>
 8011540:	9b08      	ldr	r3, [sp, #32]
 8011542:	2b00      	cmp	r3, #0
 8011544:	db04      	blt.n	8011550 <_dtoa_r+0xa30>
 8011546:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011548:	430b      	orrs	r3, r1
 801154a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801154c:	430b      	orrs	r3, r1
 801154e:	d120      	bne.n	8011592 <_dtoa_r+0xa72>
 8011550:	2a00      	cmp	r2, #0
 8011552:	dded      	ble.n	8011530 <_dtoa_r+0xa10>
 8011554:	4649      	mov	r1, r9
 8011556:	2201      	movs	r2, #1
 8011558:	4658      	mov	r0, fp
 801155a:	f000 fdb7 	bl	80120cc <__lshift>
 801155e:	4621      	mov	r1, r4
 8011560:	4681      	mov	r9, r0
 8011562:	f000 fe1f 	bl	80121a4 <__mcmp>
 8011566:	2800      	cmp	r0, #0
 8011568:	dc03      	bgt.n	8011572 <_dtoa_r+0xa52>
 801156a:	d1e1      	bne.n	8011530 <_dtoa_r+0xa10>
 801156c:	f018 0f01 	tst.w	r8, #1
 8011570:	d0de      	beq.n	8011530 <_dtoa_r+0xa10>
 8011572:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011576:	d1d8      	bne.n	801152a <_dtoa_r+0xa0a>
 8011578:	9a00      	ldr	r2, [sp, #0]
 801157a:	2339      	movs	r3, #57	@ 0x39
 801157c:	7013      	strb	r3, [r2, #0]
 801157e:	4633      	mov	r3, r6
 8011580:	461e      	mov	r6, r3
 8011582:	3b01      	subs	r3, #1
 8011584:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011588:	2a39      	cmp	r2, #57	@ 0x39
 801158a:	d052      	beq.n	8011632 <_dtoa_r+0xb12>
 801158c:	3201      	adds	r2, #1
 801158e:	701a      	strb	r2, [r3, #0]
 8011590:	e612      	b.n	80111b8 <_dtoa_r+0x698>
 8011592:	2a00      	cmp	r2, #0
 8011594:	dd07      	ble.n	80115a6 <_dtoa_r+0xa86>
 8011596:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801159a:	d0ed      	beq.n	8011578 <_dtoa_r+0xa58>
 801159c:	9a00      	ldr	r2, [sp, #0]
 801159e:	f108 0301 	add.w	r3, r8, #1
 80115a2:	7013      	strb	r3, [r2, #0]
 80115a4:	e608      	b.n	80111b8 <_dtoa_r+0x698>
 80115a6:	9b07      	ldr	r3, [sp, #28]
 80115a8:	9a07      	ldr	r2, [sp, #28]
 80115aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80115ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d028      	beq.n	8011606 <_dtoa_r+0xae6>
 80115b4:	4649      	mov	r1, r9
 80115b6:	2300      	movs	r3, #0
 80115b8:	220a      	movs	r2, #10
 80115ba:	4658      	mov	r0, fp
 80115bc:	f000 fbda 	bl	8011d74 <__multadd>
 80115c0:	42af      	cmp	r7, r5
 80115c2:	4681      	mov	r9, r0
 80115c4:	f04f 0300 	mov.w	r3, #0
 80115c8:	f04f 020a 	mov.w	r2, #10
 80115cc:	4639      	mov	r1, r7
 80115ce:	4658      	mov	r0, fp
 80115d0:	d107      	bne.n	80115e2 <_dtoa_r+0xac2>
 80115d2:	f000 fbcf 	bl	8011d74 <__multadd>
 80115d6:	4607      	mov	r7, r0
 80115d8:	4605      	mov	r5, r0
 80115da:	9b07      	ldr	r3, [sp, #28]
 80115dc:	3301      	adds	r3, #1
 80115de:	9307      	str	r3, [sp, #28]
 80115e0:	e774      	b.n	80114cc <_dtoa_r+0x9ac>
 80115e2:	f000 fbc7 	bl	8011d74 <__multadd>
 80115e6:	4629      	mov	r1, r5
 80115e8:	4607      	mov	r7, r0
 80115ea:	2300      	movs	r3, #0
 80115ec:	220a      	movs	r2, #10
 80115ee:	4658      	mov	r0, fp
 80115f0:	f000 fbc0 	bl	8011d74 <__multadd>
 80115f4:	4605      	mov	r5, r0
 80115f6:	e7f0      	b.n	80115da <_dtoa_r+0xaba>
 80115f8:	9b00      	ldr	r3, [sp, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	bfcc      	ite	gt
 80115fe:	461e      	movgt	r6, r3
 8011600:	2601      	movle	r6, #1
 8011602:	4456      	add	r6, sl
 8011604:	2700      	movs	r7, #0
 8011606:	4649      	mov	r1, r9
 8011608:	2201      	movs	r2, #1
 801160a:	4658      	mov	r0, fp
 801160c:	f000 fd5e 	bl	80120cc <__lshift>
 8011610:	4621      	mov	r1, r4
 8011612:	4681      	mov	r9, r0
 8011614:	f000 fdc6 	bl	80121a4 <__mcmp>
 8011618:	2800      	cmp	r0, #0
 801161a:	dcb0      	bgt.n	801157e <_dtoa_r+0xa5e>
 801161c:	d102      	bne.n	8011624 <_dtoa_r+0xb04>
 801161e:	f018 0f01 	tst.w	r8, #1
 8011622:	d1ac      	bne.n	801157e <_dtoa_r+0xa5e>
 8011624:	4633      	mov	r3, r6
 8011626:	461e      	mov	r6, r3
 8011628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801162c:	2a30      	cmp	r2, #48	@ 0x30
 801162e:	d0fa      	beq.n	8011626 <_dtoa_r+0xb06>
 8011630:	e5c2      	b.n	80111b8 <_dtoa_r+0x698>
 8011632:	459a      	cmp	sl, r3
 8011634:	d1a4      	bne.n	8011580 <_dtoa_r+0xa60>
 8011636:	9b04      	ldr	r3, [sp, #16]
 8011638:	3301      	adds	r3, #1
 801163a:	9304      	str	r3, [sp, #16]
 801163c:	2331      	movs	r3, #49	@ 0x31
 801163e:	f88a 3000 	strb.w	r3, [sl]
 8011642:	e5b9      	b.n	80111b8 <_dtoa_r+0x698>
 8011644:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011646:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80116a4 <_dtoa_r+0xb84>
 801164a:	b11b      	cbz	r3, 8011654 <_dtoa_r+0xb34>
 801164c:	f10a 0308 	add.w	r3, sl, #8
 8011650:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011652:	6013      	str	r3, [r2, #0]
 8011654:	4650      	mov	r0, sl
 8011656:	b019      	add	sp, #100	@ 0x64
 8011658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801165e:	2b01      	cmp	r3, #1
 8011660:	f77f ae37 	ble.w	80112d2 <_dtoa_r+0x7b2>
 8011664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011666:	930a      	str	r3, [sp, #40]	@ 0x28
 8011668:	2001      	movs	r0, #1
 801166a:	e655      	b.n	8011318 <_dtoa_r+0x7f8>
 801166c:	9b00      	ldr	r3, [sp, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	f77f aed6 	ble.w	8011420 <_dtoa_r+0x900>
 8011674:	4656      	mov	r6, sl
 8011676:	4621      	mov	r1, r4
 8011678:	4648      	mov	r0, r9
 801167a:	f7ff f9c8 	bl	8010a0e <quorem>
 801167e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011682:	f806 8b01 	strb.w	r8, [r6], #1
 8011686:	9b00      	ldr	r3, [sp, #0]
 8011688:	eba6 020a 	sub.w	r2, r6, sl
 801168c:	4293      	cmp	r3, r2
 801168e:	ddb3      	ble.n	80115f8 <_dtoa_r+0xad8>
 8011690:	4649      	mov	r1, r9
 8011692:	2300      	movs	r3, #0
 8011694:	220a      	movs	r2, #10
 8011696:	4658      	mov	r0, fp
 8011698:	f000 fb6c 	bl	8011d74 <__multadd>
 801169c:	4681      	mov	r9, r0
 801169e:	e7ea      	b.n	8011676 <_dtoa_r+0xb56>
 80116a0:	0801303c 	.word	0x0801303c
 80116a4:	08012fc0 	.word	0x08012fc0

080116a8 <_free_r>:
 80116a8:	b538      	push	{r3, r4, r5, lr}
 80116aa:	4605      	mov	r5, r0
 80116ac:	2900      	cmp	r1, #0
 80116ae:	d041      	beq.n	8011734 <_free_r+0x8c>
 80116b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116b4:	1f0c      	subs	r4, r1, #4
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	bfb8      	it	lt
 80116ba:	18e4      	addlt	r4, r4, r3
 80116bc:	f000 faec 	bl	8011c98 <__malloc_lock>
 80116c0:	4a1d      	ldr	r2, [pc, #116]	@ (8011738 <_free_r+0x90>)
 80116c2:	6813      	ldr	r3, [r2, #0]
 80116c4:	b933      	cbnz	r3, 80116d4 <_free_r+0x2c>
 80116c6:	6063      	str	r3, [r4, #4]
 80116c8:	6014      	str	r4, [r2, #0]
 80116ca:	4628      	mov	r0, r5
 80116cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116d0:	f000 bae8 	b.w	8011ca4 <__malloc_unlock>
 80116d4:	42a3      	cmp	r3, r4
 80116d6:	d908      	bls.n	80116ea <_free_r+0x42>
 80116d8:	6820      	ldr	r0, [r4, #0]
 80116da:	1821      	adds	r1, r4, r0
 80116dc:	428b      	cmp	r3, r1
 80116de:	bf01      	itttt	eq
 80116e0:	6819      	ldreq	r1, [r3, #0]
 80116e2:	685b      	ldreq	r3, [r3, #4]
 80116e4:	1809      	addeq	r1, r1, r0
 80116e6:	6021      	streq	r1, [r4, #0]
 80116e8:	e7ed      	b.n	80116c6 <_free_r+0x1e>
 80116ea:	461a      	mov	r2, r3
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	b10b      	cbz	r3, 80116f4 <_free_r+0x4c>
 80116f0:	42a3      	cmp	r3, r4
 80116f2:	d9fa      	bls.n	80116ea <_free_r+0x42>
 80116f4:	6811      	ldr	r1, [r2, #0]
 80116f6:	1850      	adds	r0, r2, r1
 80116f8:	42a0      	cmp	r0, r4
 80116fa:	d10b      	bne.n	8011714 <_free_r+0x6c>
 80116fc:	6820      	ldr	r0, [r4, #0]
 80116fe:	4401      	add	r1, r0
 8011700:	1850      	adds	r0, r2, r1
 8011702:	4283      	cmp	r3, r0
 8011704:	6011      	str	r1, [r2, #0]
 8011706:	d1e0      	bne.n	80116ca <_free_r+0x22>
 8011708:	6818      	ldr	r0, [r3, #0]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	6053      	str	r3, [r2, #4]
 801170e:	4408      	add	r0, r1
 8011710:	6010      	str	r0, [r2, #0]
 8011712:	e7da      	b.n	80116ca <_free_r+0x22>
 8011714:	d902      	bls.n	801171c <_free_r+0x74>
 8011716:	230c      	movs	r3, #12
 8011718:	602b      	str	r3, [r5, #0]
 801171a:	e7d6      	b.n	80116ca <_free_r+0x22>
 801171c:	6820      	ldr	r0, [r4, #0]
 801171e:	1821      	adds	r1, r4, r0
 8011720:	428b      	cmp	r3, r1
 8011722:	bf04      	itt	eq
 8011724:	6819      	ldreq	r1, [r3, #0]
 8011726:	685b      	ldreq	r3, [r3, #4]
 8011728:	6063      	str	r3, [r4, #4]
 801172a:	bf04      	itt	eq
 801172c:	1809      	addeq	r1, r1, r0
 801172e:	6021      	streq	r1, [r4, #0]
 8011730:	6054      	str	r4, [r2, #4]
 8011732:	e7ca      	b.n	80116ca <_free_r+0x22>
 8011734:	bd38      	pop	{r3, r4, r5, pc}
 8011736:	bf00      	nop
 8011738:	2001041c 	.word	0x2001041c

0801173c <__ssputs_r>:
 801173c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011740:	688e      	ldr	r6, [r1, #8]
 8011742:	461f      	mov	r7, r3
 8011744:	42be      	cmp	r6, r7
 8011746:	680b      	ldr	r3, [r1, #0]
 8011748:	4682      	mov	sl, r0
 801174a:	460c      	mov	r4, r1
 801174c:	4690      	mov	r8, r2
 801174e:	d82d      	bhi.n	80117ac <__ssputs_r+0x70>
 8011750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011754:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011758:	d026      	beq.n	80117a8 <__ssputs_r+0x6c>
 801175a:	6965      	ldr	r5, [r4, #20]
 801175c:	6909      	ldr	r1, [r1, #16]
 801175e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011762:	eba3 0901 	sub.w	r9, r3, r1
 8011766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801176a:	1c7b      	adds	r3, r7, #1
 801176c:	444b      	add	r3, r9
 801176e:	106d      	asrs	r5, r5, #1
 8011770:	429d      	cmp	r5, r3
 8011772:	bf38      	it	cc
 8011774:	461d      	movcc	r5, r3
 8011776:	0553      	lsls	r3, r2, #21
 8011778:	d527      	bpl.n	80117ca <__ssputs_r+0x8e>
 801177a:	4629      	mov	r1, r5
 801177c:	f000 f960 	bl	8011a40 <_malloc_r>
 8011780:	4606      	mov	r6, r0
 8011782:	b360      	cbz	r0, 80117de <__ssputs_r+0xa2>
 8011784:	6921      	ldr	r1, [r4, #16]
 8011786:	464a      	mov	r2, r9
 8011788:	f7ff f933 	bl	80109f2 <memcpy>
 801178c:	89a3      	ldrh	r3, [r4, #12]
 801178e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011796:	81a3      	strh	r3, [r4, #12]
 8011798:	6126      	str	r6, [r4, #16]
 801179a:	6165      	str	r5, [r4, #20]
 801179c:	444e      	add	r6, r9
 801179e:	eba5 0509 	sub.w	r5, r5, r9
 80117a2:	6026      	str	r6, [r4, #0]
 80117a4:	60a5      	str	r5, [r4, #8]
 80117a6:	463e      	mov	r6, r7
 80117a8:	42be      	cmp	r6, r7
 80117aa:	d900      	bls.n	80117ae <__ssputs_r+0x72>
 80117ac:	463e      	mov	r6, r7
 80117ae:	6820      	ldr	r0, [r4, #0]
 80117b0:	4632      	mov	r2, r6
 80117b2:	4641      	mov	r1, r8
 80117b4:	f000 fe6f 	bl	8012496 <memmove>
 80117b8:	68a3      	ldr	r3, [r4, #8]
 80117ba:	1b9b      	subs	r3, r3, r6
 80117bc:	60a3      	str	r3, [r4, #8]
 80117be:	6823      	ldr	r3, [r4, #0]
 80117c0:	4433      	add	r3, r6
 80117c2:	6023      	str	r3, [r4, #0]
 80117c4:	2000      	movs	r0, #0
 80117c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ca:	462a      	mov	r2, r5
 80117cc:	f000 fe35 	bl	801243a <_realloc_r>
 80117d0:	4606      	mov	r6, r0
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d1e0      	bne.n	8011798 <__ssputs_r+0x5c>
 80117d6:	6921      	ldr	r1, [r4, #16]
 80117d8:	4650      	mov	r0, sl
 80117da:	f7ff ff65 	bl	80116a8 <_free_r>
 80117de:	230c      	movs	r3, #12
 80117e0:	f8ca 3000 	str.w	r3, [sl]
 80117e4:	89a3      	ldrh	r3, [r4, #12]
 80117e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117ea:	81a3      	strh	r3, [r4, #12]
 80117ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117f0:	e7e9      	b.n	80117c6 <__ssputs_r+0x8a>
	...

080117f4 <_svfiprintf_r>:
 80117f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f8:	4698      	mov	r8, r3
 80117fa:	898b      	ldrh	r3, [r1, #12]
 80117fc:	061b      	lsls	r3, r3, #24
 80117fe:	b09d      	sub	sp, #116	@ 0x74
 8011800:	4607      	mov	r7, r0
 8011802:	460d      	mov	r5, r1
 8011804:	4614      	mov	r4, r2
 8011806:	d510      	bpl.n	801182a <_svfiprintf_r+0x36>
 8011808:	690b      	ldr	r3, [r1, #16]
 801180a:	b973      	cbnz	r3, 801182a <_svfiprintf_r+0x36>
 801180c:	2140      	movs	r1, #64	@ 0x40
 801180e:	f000 f917 	bl	8011a40 <_malloc_r>
 8011812:	6028      	str	r0, [r5, #0]
 8011814:	6128      	str	r0, [r5, #16]
 8011816:	b930      	cbnz	r0, 8011826 <_svfiprintf_r+0x32>
 8011818:	230c      	movs	r3, #12
 801181a:	603b      	str	r3, [r7, #0]
 801181c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011820:	b01d      	add	sp, #116	@ 0x74
 8011822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011826:	2340      	movs	r3, #64	@ 0x40
 8011828:	616b      	str	r3, [r5, #20]
 801182a:	2300      	movs	r3, #0
 801182c:	9309      	str	r3, [sp, #36]	@ 0x24
 801182e:	2320      	movs	r3, #32
 8011830:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011834:	f8cd 800c 	str.w	r8, [sp, #12]
 8011838:	2330      	movs	r3, #48	@ 0x30
 801183a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80119d8 <_svfiprintf_r+0x1e4>
 801183e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011842:	f04f 0901 	mov.w	r9, #1
 8011846:	4623      	mov	r3, r4
 8011848:	469a      	mov	sl, r3
 801184a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801184e:	b10a      	cbz	r2, 8011854 <_svfiprintf_r+0x60>
 8011850:	2a25      	cmp	r2, #37	@ 0x25
 8011852:	d1f9      	bne.n	8011848 <_svfiprintf_r+0x54>
 8011854:	ebba 0b04 	subs.w	fp, sl, r4
 8011858:	d00b      	beq.n	8011872 <_svfiprintf_r+0x7e>
 801185a:	465b      	mov	r3, fp
 801185c:	4622      	mov	r2, r4
 801185e:	4629      	mov	r1, r5
 8011860:	4638      	mov	r0, r7
 8011862:	f7ff ff6b 	bl	801173c <__ssputs_r>
 8011866:	3001      	adds	r0, #1
 8011868:	f000 80a7 	beq.w	80119ba <_svfiprintf_r+0x1c6>
 801186c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801186e:	445a      	add	r2, fp
 8011870:	9209      	str	r2, [sp, #36]	@ 0x24
 8011872:	f89a 3000 	ldrb.w	r3, [sl]
 8011876:	2b00      	cmp	r3, #0
 8011878:	f000 809f 	beq.w	80119ba <_svfiprintf_r+0x1c6>
 801187c:	2300      	movs	r3, #0
 801187e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011886:	f10a 0a01 	add.w	sl, sl, #1
 801188a:	9304      	str	r3, [sp, #16]
 801188c:	9307      	str	r3, [sp, #28]
 801188e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011892:	931a      	str	r3, [sp, #104]	@ 0x68
 8011894:	4654      	mov	r4, sl
 8011896:	2205      	movs	r2, #5
 8011898:	f814 1b01 	ldrb.w	r1, [r4], #1
 801189c:	484e      	ldr	r0, [pc, #312]	@ (80119d8 <_svfiprintf_r+0x1e4>)
 801189e:	f7ee fcbf 	bl	8000220 <memchr>
 80118a2:	9a04      	ldr	r2, [sp, #16]
 80118a4:	b9d8      	cbnz	r0, 80118de <_svfiprintf_r+0xea>
 80118a6:	06d0      	lsls	r0, r2, #27
 80118a8:	bf44      	itt	mi
 80118aa:	2320      	movmi	r3, #32
 80118ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118b0:	0711      	lsls	r1, r2, #28
 80118b2:	bf44      	itt	mi
 80118b4:	232b      	movmi	r3, #43	@ 0x2b
 80118b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118ba:	f89a 3000 	ldrb.w	r3, [sl]
 80118be:	2b2a      	cmp	r3, #42	@ 0x2a
 80118c0:	d015      	beq.n	80118ee <_svfiprintf_r+0xfa>
 80118c2:	9a07      	ldr	r2, [sp, #28]
 80118c4:	4654      	mov	r4, sl
 80118c6:	2000      	movs	r0, #0
 80118c8:	f04f 0c0a 	mov.w	ip, #10
 80118cc:	4621      	mov	r1, r4
 80118ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118d2:	3b30      	subs	r3, #48	@ 0x30
 80118d4:	2b09      	cmp	r3, #9
 80118d6:	d94b      	bls.n	8011970 <_svfiprintf_r+0x17c>
 80118d8:	b1b0      	cbz	r0, 8011908 <_svfiprintf_r+0x114>
 80118da:	9207      	str	r2, [sp, #28]
 80118dc:	e014      	b.n	8011908 <_svfiprintf_r+0x114>
 80118de:	eba0 0308 	sub.w	r3, r0, r8
 80118e2:	fa09 f303 	lsl.w	r3, r9, r3
 80118e6:	4313      	orrs	r3, r2
 80118e8:	9304      	str	r3, [sp, #16]
 80118ea:	46a2      	mov	sl, r4
 80118ec:	e7d2      	b.n	8011894 <_svfiprintf_r+0xa0>
 80118ee:	9b03      	ldr	r3, [sp, #12]
 80118f0:	1d19      	adds	r1, r3, #4
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	9103      	str	r1, [sp, #12]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	bfbb      	ittet	lt
 80118fa:	425b      	neglt	r3, r3
 80118fc:	f042 0202 	orrlt.w	r2, r2, #2
 8011900:	9307      	strge	r3, [sp, #28]
 8011902:	9307      	strlt	r3, [sp, #28]
 8011904:	bfb8      	it	lt
 8011906:	9204      	strlt	r2, [sp, #16]
 8011908:	7823      	ldrb	r3, [r4, #0]
 801190a:	2b2e      	cmp	r3, #46	@ 0x2e
 801190c:	d10a      	bne.n	8011924 <_svfiprintf_r+0x130>
 801190e:	7863      	ldrb	r3, [r4, #1]
 8011910:	2b2a      	cmp	r3, #42	@ 0x2a
 8011912:	d132      	bne.n	801197a <_svfiprintf_r+0x186>
 8011914:	9b03      	ldr	r3, [sp, #12]
 8011916:	1d1a      	adds	r2, r3, #4
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	9203      	str	r2, [sp, #12]
 801191c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011920:	3402      	adds	r4, #2
 8011922:	9305      	str	r3, [sp, #20]
 8011924:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80119e8 <_svfiprintf_r+0x1f4>
 8011928:	7821      	ldrb	r1, [r4, #0]
 801192a:	2203      	movs	r2, #3
 801192c:	4650      	mov	r0, sl
 801192e:	f7ee fc77 	bl	8000220 <memchr>
 8011932:	b138      	cbz	r0, 8011944 <_svfiprintf_r+0x150>
 8011934:	9b04      	ldr	r3, [sp, #16]
 8011936:	eba0 000a 	sub.w	r0, r0, sl
 801193a:	2240      	movs	r2, #64	@ 0x40
 801193c:	4082      	lsls	r2, r0
 801193e:	4313      	orrs	r3, r2
 8011940:	3401      	adds	r4, #1
 8011942:	9304      	str	r3, [sp, #16]
 8011944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011948:	4824      	ldr	r0, [pc, #144]	@ (80119dc <_svfiprintf_r+0x1e8>)
 801194a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801194e:	2206      	movs	r2, #6
 8011950:	f7ee fc66 	bl	8000220 <memchr>
 8011954:	2800      	cmp	r0, #0
 8011956:	d036      	beq.n	80119c6 <_svfiprintf_r+0x1d2>
 8011958:	4b21      	ldr	r3, [pc, #132]	@ (80119e0 <_svfiprintf_r+0x1ec>)
 801195a:	bb1b      	cbnz	r3, 80119a4 <_svfiprintf_r+0x1b0>
 801195c:	9b03      	ldr	r3, [sp, #12]
 801195e:	3307      	adds	r3, #7
 8011960:	f023 0307 	bic.w	r3, r3, #7
 8011964:	3308      	adds	r3, #8
 8011966:	9303      	str	r3, [sp, #12]
 8011968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801196a:	4433      	add	r3, r6
 801196c:	9309      	str	r3, [sp, #36]	@ 0x24
 801196e:	e76a      	b.n	8011846 <_svfiprintf_r+0x52>
 8011970:	fb0c 3202 	mla	r2, ip, r2, r3
 8011974:	460c      	mov	r4, r1
 8011976:	2001      	movs	r0, #1
 8011978:	e7a8      	b.n	80118cc <_svfiprintf_r+0xd8>
 801197a:	2300      	movs	r3, #0
 801197c:	3401      	adds	r4, #1
 801197e:	9305      	str	r3, [sp, #20]
 8011980:	4619      	mov	r1, r3
 8011982:	f04f 0c0a 	mov.w	ip, #10
 8011986:	4620      	mov	r0, r4
 8011988:	f810 2b01 	ldrb.w	r2, [r0], #1
 801198c:	3a30      	subs	r2, #48	@ 0x30
 801198e:	2a09      	cmp	r2, #9
 8011990:	d903      	bls.n	801199a <_svfiprintf_r+0x1a6>
 8011992:	2b00      	cmp	r3, #0
 8011994:	d0c6      	beq.n	8011924 <_svfiprintf_r+0x130>
 8011996:	9105      	str	r1, [sp, #20]
 8011998:	e7c4      	b.n	8011924 <_svfiprintf_r+0x130>
 801199a:	fb0c 2101 	mla	r1, ip, r1, r2
 801199e:	4604      	mov	r4, r0
 80119a0:	2301      	movs	r3, #1
 80119a2:	e7f0      	b.n	8011986 <_svfiprintf_r+0x192>
 80119a4:	ab03      	add	r3, sp, #12
 80119a6:	9300      	str	r3, [sp, #0]
 80119a8:	462a      	mov	r2, r5
 80119aa:	4b0e      	ldr	r3, [pc, #56]	@ (80119e4 <_svfiprintf_r+0x1f0>)
 80119ac:	a904      	add	r1, sp, #16
 80119ae:	4638      	mov	r0, r7
 80119b0:	f7fe fadc 	bl	800ff6c <_printf_float>
 80119b4:	1c42      	adds	r2, r0, #1
 80119b6:	4606      	mov	r6, r0
 80119b8:	d1d6      	bne.n	8011968 <_svfiprintf_r+0x174>
 80119ba:	89ab      	ldrh	r3, [r5, #12]
 80119bc:	065b      	lsls	r3, r3, #25
 80119be:	f53f af2d 	bmi.w	801181c <_svfiprintf_r+0x28>
 80119c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119c4:	e72c      	b.n	8011820 <_svfiprintf_r+0x2c>
 80119c6:	ab03      	add	r3, sp, #12
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	462a      	mov	r2, r5
 80119cc:	4b05      	ldr	r3, [pc, #20]	@ (80119e4 <_svfiprintf_r+0x1f0>)
 80119ce:	a904      	add	r1, sp, #16
 80119d0:	4638      	mov	r0, r7
 80119d2:	f7fe fd63 	bl	801049c <_printf_i>
 80119d6:	e7ed      	b.n	80119b4 <_svfiprintf_r+0x1c0>
 80119d8:	0801304d 	.word	0x0801304d
 80119dc:	08013057 	.word	0x08013057
 80119e0:	0800ff6d 	.word	0x0800ff6d
 80119e4:	0801173d 	.word	0x0801173d
 80119e8:	08013053 	.word	0x08013053

080119ec <malloc>:
 80119ec:	4b02      	ldr	r3, [pc, #8]	@ (80119f8 <malloc+0xc>)
 80119ee:	4601      	mov	r1, r0
 80119f0:	6818      	ldr	r0, [r3, #0]
 80119f2:	f000 b825 	b.w	8011a40 <_malloc_r>
 80119f6:	bf00      	nop
 80119f8:	20000194 	.word	0x20000194

080119fc <sbrk_aligned>:
 80119fc:	b570      	push	{r4, r5, r6, lr}
 80119fe:	4e0f      	ldr	r6, [pc, #60]	@ (8011a3c <sbrk_aligned+0x40>)
 8011a00:	460c      	mov	r4, r1
 8011a02:	6831      	ldr	r1, [r6, #0]
 8011a04:	4605      	mov	r5, r0
 8011a06:	b911      	cbnz	r1, 8011a0e <sbrk_aligned+0x12>
 8011a08:	f000 fd94 	bl	8012534 <_sbrk_r>
 8011a0c:	6030      	str	r0, [r6, #0]
 8011a0e:	4621      	mov	r1, r4
 8011a10:	4628      	mov	r0, r5
 8011a12:	f000 fd8f 	bl	8012534 <_sbrk_r>
 8011a16:	1c43      	adds	r3, r0, #1
 8011a18:	d103      	bne.n	8011a22 <sbrk_aligned+0x26>
 8011a1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011a1e:	4620      	mov	r0, r4
 8011a20:	bd70      	pop	{r4, r5, r6, pc}
 8011a22:	1cc4      	adds	r4, r0, #3
 8011a24:	f024 0403 	bic.w	r4, r4, #3
 8011a28:	42a0      	cmp	r0, r4
 8011a2a:	d0f8      	beq.n	8011a1e <sbrk_aligned+0x22>
 8011a2c:	1a21      	subs	r1, r4, r0
 8011a2e:	4628      	mov	r0, r5
 8011a30:	f000 fd80 	bl	8012534 <_sbrk_r>
 8011a34:	3001      	adds	r0, #1
 8011a36:	d1f2      	bne.n	8011a1e <sbrk_aligned+0x22>
 8011a38:	e7ef      	b.n	8011a1a <sbrk_aligned+0x1e>
 8011a3a:	bf00      	nop
 8011a3c:	20010418 	.word	0x20010418

08011a40 <_malloc_r>:
 8011a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a44:	1ccd      	adds	r5, r1, #3
 8011a46:	f025 0503 	bic.w	r5, r5, #3
 8011a4a:	3508      	adds	r5, #8
 8011a4c:	2d0c      	cmp	r5, #12
 8011a4e:	bf38      	it	cc
 8011a50:	250c      	movcc	r5, #12
 8011a52:	2d00      	cmp	r5, #0
 8011a54:	4606      	mov	r6, r0
 8011a56:	db01      	blt.n	8011a5c <_malloc_r+0x1c>
 8011a58:	42a9      	cmp	r1, r5
 8011a5a:	d904      	bls.n	8011a66 <_malloc_r+0x26>
 8011a5c:	230c      	movs	r3, #12
 8011a5e:	6033      	str	r3, [r6, #0]
 8011a60:	2000      	movs	r0, #0
 8011a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b3c <_malloc_r+0xfc>
 8011a6a:	f000 f915 	bl	8011c98 <__malloc_lock>
 8011a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8011a72:	461c      	mov	r4, r3
 8011a74:	bb44      	cbnz	r4, 8011ac8 <_malloc_r+0x88>
 8011a76:	4629      	mov	r1, r5
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f7ff ffbf 	bl	80119fc <sbrk_aligned>
 8011a7e:	1c43      	adds	r3, r0, #1
 8011a80:	4604      	mov	r4, r0
 8011a82:	d158      	bne.n	8011b36 <_malloc_r+0xf6>
 8011a84:	f8d8 4000 	ldr.w	r4, [r8]
 8011a88:	4627      	mov	r7, r4
 8011a8a:	2f00      	cmp	r7, #0
 8011a8c:	d143      	bne.n	8011b16 <_malloc_r+0xd6>
 8011a8e:	2c00      	cmp	r4, #0
 8011a90:	d04b      	beq.n	8011b2a <_malloc_r+0xea>
 8011a92:	6823      	ldr	r3, [r4, #0]
 8011a94:	4639      	mov	r1, r7
 8011a96:	4630      	mov	r0, r6
 8011a98:	eb04 0903 	add.w	r9, r4, r3
 8011a9c:	f000 fd4a 	bl	8012534 <_sbrk_r>
 8011aa0:	4581      	cmp	r9, r0
 8011aa2:	d142      	bne.n	8011b2a <_malloc_r+0xea>
 8011aa4:	6821      	ldr	r1, [r4, #0]
 8011aa6:	1a6d      	subs	r5, r5, r1
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	4630      	mov	r0, r6
 8011aac:	f7ff ffa6 	bl	80119fc <sbrk_aligned>
 8011ab0:	3001      	adds	r0, #1
 8011ab2:	d03a      	beq.n	8011b2a <_malloc_r+0xea>
 8011ab4:	6823      	ldr	r3, [r4, #0]
 8011ab6:	442b      	add	r3, r5
 8011ab8:	6023      	str	r3, [r4, #0]
 8011aba:	f8d8 3000 	ldr.w	r3, [r8]
 8011abe:	685a      	ldr	r2, [r3, #4]
 8011ac0:	bb62      	cbnz	r2, 8011b1c <_malloc_r+0xdc>
 8011ac2:	f8c8 7000 	str.w	r7, [r8]
 8011ac6:	e00f      	b.n	8011ae8 <_malloc_r+0xa8>
 8011ac8:	6822      	ldr	r2, [r4, #0]
 8011aca:	1b52      	subs	r2, r2, r5
 8011acc:	d420      	bmi.n	8011b10 <_malloc_r+0xd0>
 8011ace:	2a0b      	cmp	r2, #11
 8011ad0:	d917      	bls.n	8011b02 <_malloc_r+0xc2>
 8011ad2:	1961      	adds	r1, r4, r5
 8011ad4:	42a3      	cmp	r3, r4
 8011ad6:	6025      	str	r5, [r4, #0]
 8011ad8:	bf18      	it	ne
 8011ada:	6059      	strne	r1, [r3, #4]
 8011adc:	6863      	ldr	r3, [r4, #4]
 8011ade:	bf08      	it	eq
 8011ae0:	f8c8 1000 	streq.w	r1, [r8]
 8011ae4:	5162      	str	r2, [r4, r5]
 8011ae6:	604b      	str	r3, [r1, #4]
 8011ae8:	4630      	mov	r0, r6
 8011aea:	f000 f8db 	bl	8011ca4 <__malloc_unlock>
 8011aee:	f104 000b 	add.w	r0, r4, #11
 8011af2:	1d23      	adds	r3, r4, #4
 8011af4:	f020 0007 	bic.w	r0, r0, #7
 8011af8:	1ac2      	subs	r2, r0, r3
 8011afa:	bf1c      	itt	ne
 8011afc:	1a1b      	subne	r3, r3, r0
 8011afe:	50a3      	strne	r3, [r4, r2]
 8011b00:	e7af      	b.n	8011a62 <_malloc_r+0x22>
 8011b02:	6862      	ldr	r2, [r4, #4]
 8011b04:	42a3      	cmp	r3, r4
 8011b06:	bf0c      	ite	eq
 8011b08:	f8c8 2000 	streq.w	r2, [r8]
 8011b0c:	605a      	strne	r2, [r3, #4]
 8011b0e:	e7eb      	b.n	8011ae8 <_malloc_r+0xa8>
 8011b10:	4623      	mov	r3, r4
 8011b12:	6864      	ldr	r4, [r4, #4]
 8011b14:	e7ae      	b.n	8011a74 <_malloc_r+0x34>
 8011b16:	463c      	mov	r4, r7
 8011b18:	687f      	ldr	r7, [r7, #4]
 8011b1a:	e7b6      	b.n	8011a8a <_malloc_r+0x4a>
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	42a3      	cmp	r3, r4
 8011b22:	d1fb      	bne.n	8011b1c <_malloc_r+0xdc>
 8011b24:	2300      	movs	r3, #0
 8011b26:	6053      	str	r3, [r2, #4]
 8011b28:	e7de      	b.n	8011ae8 <_malloc_r+0xa8>
 8011b2a:	230c      	movs	r3, #12
 8011b2c:	6033      	str	r3, [r6, #0]
 8011b2e:	4630      	mov	r0, r6
 8011b30:	f000 f8b8 	bl	8011ca4 <__malloc_unlock>
 8011b34:	e794      	b.n	8011a60 <_malloc_r+0x20>
 8011b36:	6005      	str	r5, [r0, #0]
 8011b38:	e7d6      	b.n	8011ae8 <_malloc_r+0xa8>
 8011b3a:	bf00      	nop
 8011b3c:	2001041c 	.word	0x2001041c

08011b40 <__sflush_r>:
 8011b40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b48:	0716      	lsls	r6, r2, #28
 8011b4a:	4605      	mov	r5, r0
 8011b4c:	460c      	mov	r4, r1
 8011b4e:	d454      	bmi.n	8011bfa <__sflush_r+0xba>
 8011b50:	684b      	ldr	r3, [r1, #4]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	dc02      	bgt.n	8011b5c <__sflush_r+0x1c>
 8011b56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	dd48      	ble.n	8011bee <__sflush_r+0xae>
 8011b5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b5e:	2e00      	cmp	r6, #0
 8011b60:	d045      	beq.n	8011bee <__sflush_r+0xae>
 8011b62:	2300      	movs	r3, #0
 8011b64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011b68:	682f      	ldr	r7, [r5, #0]
 8011b6a:	6a21      	ldr	r1, [r4, #32]
 8011b6c:	602b      	str	r3, [r5, #0]
 8011b6e:	d030      	beq.n	8011bd2 <__sflush_r+0x92>
 8011b70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b72:	89a3      	ldrh	r3, [r4, #12]
 8011b74:	0759      	lsls	r1, r3, #29
 8011b76:	d505      	bpl.n	8011b84 <__sflush_r+0x44>
 8011b78:	6863      	ldr	r3, [r4, #4]
 8011b7a:	1ad2      	subs	r2, r2, r3
 8011b7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b7e:	b10b      	cbz	r3, 8011b84 <__sflush_r+0x44>
 8011b80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b82:	1ad2      	subs	r2, r2, r3
 8011b84:	2300      	movs	r3, #0
 8011b86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b88:	6a21      	ldr	r1, [r4, #32]
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	47b0      	blx	r6
 8011b8e:	1c43      	adds	r3, r0, #1
 8011b90:	89a3      	ldrh	r3, [r4, #12]
 8011b92:	d106      	bne.n	8011ba2 <__sflush_r+0x62>
 8011b94:	6829      	ldr	r1, [r5, #0]
 8011b96:	291d      	cmp	r1, #29
 8011b98:	d82b      	bhi.n	8011bf2 <__sflush_r+0xb2>
 8011b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8011c44 <__sflush_r+0x104>)
 8011b9c:	410a      	asrs	r2, r1
 8011b9e:	07d6      	lsls	r6, r2, #31
 8011ba0:	d427      	bmi.n	8011bf2 <__sflush_r+0xb2>
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	6062      	str	r2, [r4, #4]
 8011ba6:	04d9      	lsls	r1, r3, #19
 8011ba8:	6922      	ldr	r2, [r4, #16]
 8011baa:	6022      	str	r2, [r4, #0]
 8011bac:	d504      	bpl.n	8011bb8 <__sflush_r+0x78>
 8011bae:	1c42      	adds	r2, r0, #1
 8011bb0:	d101      	bne.n	8011bb6 <__sflush_r+0x76>
 8011bb2:	682b      	ldr	r3, [r5, #0]
 8011bb4:	b903      	cbnz	r3, 8011bb8 <__sflush_r+0x78>
 8011bb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8011bb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011bba:	602f      	str	r7, [r5, #0]
 8011bbc:	b1b9      	cbz	r1, 8011bee <__sflush_r+0xae>
 8011bbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011bc2:	4299      	cmp	r1, r3
 8011bc4:	d002      	beq.n	8011bcc <__sflush_r+0x8c>
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	f7ff fd6e 	bl	80116a8 <_free_r>
 8011bcc:	2300      	movs	r3, #0
 8011bce:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bd0:	e00d      	b.n	8011bee <__sflush_r+0xae>
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	47b0      	blx	r6
 8011bd8:	4602      	mov	r2, r0
 8011bda:	1c50      	adds	r0, r2, #1
 8011bdc:	d1c9      	bne.n	8011b72 <__sflush_r+0x32>
 8011bde:	682b      	ldr	r3, [r5, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d0c6      	beq.n	8011b72 <__sflush_r+0x32>
 8011be4:	2b1d      	cmp	r3, #29
 8011be6:	d001      	beq.n	8011bec <__sflush_r+0xac>
 8011be8:	2b16      	cmp	r3, #22
 8011bea:	d11e      	bne.n	8011c2a <__sflush_r+0xea>
 8011bec:	602f      	str	r7, [r5, #0]
 8011bee:	2000      	movs	r0, #0
 8011bf0:	e022      	b.n	8011c38 <__sflush_r+0xf8>
 8011bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bf6:	b21b      	sxth	r3, r3
 8011bf8:	e01b      	b.n	8011c32 <__sflush_r+0xf2>
 8011bfa:	690f      	ldr	r7, [r1, #16]
 8011bfc:	2f00      	cmp	r7, #0
 8011bfe:	d0f6      	beq.n	8011bee <__sflush_r+0xae>
 8011c00:	0793      	lsls	r3, r2, #30
 8011c02:	680e      	ldr	r6, [r1, #0]
 8011c04:	bf08      	it	eq
 8011c06:	694b      	ldreq	r3, [r1, #20]
 8011c08:	600f      	str	r7, [r1, #0]
 8011c0a:	bf18      	it	ne
 8011c0c:	2300      	movne	r3, #0
 8011c0e:	eba6 0807 	sub.w	r8, r6, r7
 8011c12:	608b      	str	r3, [r1, #8]
 8011c14:	f1b8 0f00 	cmp.w	r8, #0
 8011c18:	dde9      	ble.n	8011bee <__sflush_r+0xae>
 8011c1a:	6a21      	ldr	r1, [r4, #32]
 8011c1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011c1e:	4643      	mov	r3, r8
 8011c20:	463a      	mov	r2, r7
 8011c22:	4628      	mov	r0, r5
 8011c24:	47b0      	blx	r6
 8011c26:	2800      	cmp	r0, #0
 8011c28:	dc08      	bgt.n	8011c3c <__sflush_r+0xfc>
 8011c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c32:	81a3      	strh	r3, [r4, #12]
 8011c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c3c:	4407      	add	r7, r0
 8011c3e:	eba8 0800 	sub.w	r8, r8, r0
 8011c42:	e7e7      	b.n	8011c14 <__sflush_r+0xd4>
 8011c44:	dfbffffe 	.word	0xdfbffffe

08011c48 <_fflush_r>:
 8011c48:	b538      	push	{r3, r4, r5, lr}
 8011c4a:	690b      	ldr	r3, [r1, #16]
 8011c4c:	4605      	mov	r5, r0
 8011c4e:	460c      	mov	r4, r1
 8011c50:	b913      	cbnz	r3, 8011c58 <_fflush_r+0x10>
 8011c52:	2500      	movs	r5, #0
 8011c54:	4628      	mov	r0, r5
 8011c56:	bd38      	pop	{r3, r4, r5, pc}
 8011c58:	b118      	cbz	r0, 8011c62 <_fflush_r+0x1a>
 8011c5a:	6a03      	ldr	r3, [r0, #32]
 8011c5c:	b90b      	cbnz	r3, 8011c62 <_fflush_r+0x1a>
 8011c5e:	f7fe fdc9 	bl	80107f4 <__sinit>
 8011c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d0f3      	beq.n	8011c52 <_fflush_r+0xa>
 8011c6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c6c:	07d0      	lsls	r0, r2, #31
 8011c6e:	d404      	bmi.n	8011c7a <_fflush_r+0x32>
 8011c70:	0599      	lsls	r1, r3, #22
 8011c72:	d402      	bmi.n	8011c7a <_fflush_r+0x32>
 8011c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c76:	f7fe feba 	bl	80109ee <__retarget_lock_acquire_recursive>
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	4621      	mov	r1, r4
 8011c7e:	f7ff ff5f 	bl	8011b40 <__sflush_r>
 8011c82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c84:	07da      	lsls	r2, r3, #31
 8011c86:	4605      	mov	r5, r0
 8011c88:	d4e4      	bmi.n	8011c54 <_fflush_r+0xc>
 8011c8a:	89a3      	ldrh	r3, [r4, #12]
 8011c8c:	059b      	lsls	r3, r3, #22
 8011c8e:	d4e1      	bmi.n	8011c54 <_fflush_r+0xc>
 8011c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c92:	f7fe fead 	bl	80109f0 <__retarget_lock_release_recursive>
 8011c96:	e7dd      	b.n	8011c54 <_fflush_r+0xc>

08011c98 <__malloc_lock>:
 8011c98:	4801      	ldr	r0, [pc, #4]	@ (8011ca0 <__malloc_lock+0x8>)
 8011c9a:	f7fe bea8 	b.w	80109ee <__retarget_lock_acquire_recursive>
 8011c9e:	bf00      	nop
 8011ca0:	20010414 	.word	0x20010414

08011ca4 <__malloc_unlock>:
 8011ca4:	4801      	ldr	r0, [pc, #4]	@ (8011cac <__malloc_unlock+0x8>)
 8011ca6:	f7fe bea3 	b.w	80109f0 <__retarget_lock_release_recursive>
 8011caa:	bf00      	nop
 8011cac:	20010414 	.word	0x20010414

08011cb0 <_Balloc>:
 8011cb0:	b570      	push	{r4, r5, r6, lr}
 8011cb2:	69c6      	ldr	r6, [r0, #28]
 8011cb4:	4604      	mov	r4, r0
 8011cb6:	460d      	mov	r5, r1
 8011cb8:	b976      	cbnz	r6, 8011cd8 <_Balloc+0x28>
 8011cba:	2010      	movs	r0, #16
 8011cbc:	f7ff fe96 	bl	80119ec <malloc>
 8011cc0:	4602      	mov	r2, r0
 8011cc2:	61e0      	str	r0, [r4, #28]
 8011cc4:	b920      	cbnz	r0, 8011cd0 <_Balloc+0x20>
 8011cc6:	4b18      	ldr	r3, [pc, #96]	@ (8011d28 <_Balloc+0x78>)
 8011cc8:	4818      	ldr	r0, [pc, #96]	@ (8011d2c <_Balloc+0x7c>)
 8011cca:	216b      	movs	r1, #107	@ 0x6b
 8011ccc:	f000 fc54 	bl	8012578 <__assert_func>
 8011cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011cd4:	6006      	str	r6, [r0, #0]
 8011cd6:	60c6      	str	r6, [r0, #12]
 8011cd8:	69e6      	ldr	r6, [r4, #28]
 8011cda:	68f3      	ldr	r3, [r6, #12]
 8011cdc:	b183      	cbz	r3, 8011d00 <_Balloc+0x50>
 8011cde:	69e3      	ldr	r3, [r4, #28]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011ce6:	b9b8      	cbnz	r0, 8011d18 <_Balloc+0x68>
 8011ce8:	2101      	movs	r1, #1
 8011cea:	fa01 f605 	lsl.w	r6, r1, r5
 8011cee:	1d72      	adds	r2, r6, #5
 8011cf0:	0092      	lsls	r2, r2, #2
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f000 fc5e 	bl	80125b4 <_calloc_r>
 8011cf8:	b160      	cbz	r0, 8011d14 <_Balloc+0x64>
 8011cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011cfe:	e00e      	b.n	8011d1e <_Balloc+0x6e>
 8011d00:	2221      	movs	r2, #33	@ 0x21
 8011d02:	2104      	movs	r1, #4
 8011d04:	4620      	mov	r0, r4
 8011d06:	f000 fc55 	bl	80125b4 <_calloc_r>
 8011d0a:	69e3      	ldr	r3, [r4, #28]
 8011d0c:	60f0      	str	r0, [r6, #12]
 8011d0e:	68db      	ldr	r3, [r3, #12]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d1e4      	bne.n	8011cde <_Balloc+0x2e>
 8011d14:	2000      	movs	r0, #0
 8011d16:	bd70      	pop	{r4, r5, r6, pc}
 8011d18:	6802      	ldr	r2, [r0, #0]
 8011d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d1e:	2300      	movs	r3, #0
 8011d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d24:	e7f7      	b.n	8011d16 <_Balloc+0x66>
 8011d26:	bf00      	nop
 8011d28:	08012fcd 	.word	0x08012fcd
 8011d2c:	0801305e 	.word	0x0801305e

08011d30 <_Bfree>:
 8011d30:	b570      	push	{r4, r5, r6, lr}
 8011d32:	69c6      	ldr	r6, [r0, #28]
 8011d34:	4605      	mov	r5, r0
 8011d36:	460c      	mov	r4, r1
 8011d38:	b976      	cbnz	r6, 8011d58 <_Bfree+0x28>
 8011d3a:	2010      	movs	r0, #16
 8011d3c:	f7ff fe56 	bl	80119ec <malloc>
 8011d40:	4602      	mov	r2, r0
 8011d42:	61e8      	str	r0, [r5, #28]
 8011d44:	b920      	cbnz	r0, 8011d50 <_Bfree+0x20>
 8011d46:	4b09      	ldr	r3, [pc, #36]	@ (8011d6c <_Bfree+0x3c>)
 8011d48:	4809      	ldr	r0, [pc, #36]	@ (8011d70 <_Bfree+0x40>)
 8011d4a:	218f      	movs	r1, #143	@ 0x8f
 8011d4c:	f000 fc14 	bl	8012578 <__assert_func>
 8011d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d54:	6006      	str	r6, [r0, #0]
 8011d56:	60c6      	str	r6, [r0, #12]
 8011d58:	b13c      	cbz	r4, 8011d6a <_Bfree+0x3a>
 8011d5a:	69eb      	ldr	r3, [r5, #28]
 8011d5c:	6862      	ldr	r2, [r4, #4]
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d64:	6021      	str	r1, [r4, #0]
 8011d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d6a:	bd70      	pop	{r4, r5, r6, pc}
 8011d6c:	08012fcd 	.word	0x08012fcd
 8011d70:	0801305e 	.word	0x0801305e

08011d74 <__multadd>:
 8011d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d78:	690d      	ldr	r5, [r1, #16]
 8011d7a:	4607      	mov	r7, r0
 8011d7c:	460c      	mov	r4, r1
 8011d7e:	461e      	mov	r6, r3
 8011d80:	f101 0c14 	add.w	ip, r1, #20
 8011d84:	2000      	movs	r0, #0
 8011d86:	f8dc 3000 	ldr.w	r3, [ip]
 8011d8a:	b299      	uxth	r1, r3
 8011d8c:	fb02 6101 	mla	r1, r2, r1, r6
 8011d90:	0c1e      	lsrs	r6, r3, #16
 8011d92:	0c0b      	lsrs	r3, r1, #16
 8011d94:	fb02 3306 	mla	r3, r2, r6, r3
 8011d98:	b289      	uxth	r1, r1
 8011d9a:	3001      	adds	r0, #1
 8011d9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011da0:	4285      	cmp	r5, r0
 8011da2:	f84c 1b04 	str.w	r1, [ip], #4
 8011da6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011daa:	dcec      	bgt.n	8011d86 <__multadd+0x12>
 8011dac:	b30e      	cbz	r6, 8011df2 <__multadd+0x7e>
 8011dae:	68a3      	ldr	r3, [r4, #8]
 8011db0:	42ab      	cmp	r3, r5
 8011db2:	dc19      	bgt.n	8011de8 <__multadd+0x74>
 8011db4:	6861      	ldr	r1, [r4, #4]
 8011db6:	4638      	mov	r0, r7
 8011db8:	3101      	adds	r1, #1
 8011dba:	f7ff ff79 	bl	8011cb0 <_Balloc>
 8011dbe:	4680      	mov	r8, r0
 8011dc0:	b928      	cbnz	r0, 8011dce <__multadd+0x5a>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8011df8 <__multadd+0x84>)
 8011dc6:	480d      	ldr	r0, [pc, #52]	@ (8011dfc <__multadd+0x88>)
 8011dc8:	21ba      	movs	r1, #186	@ 0xba
 8011dca:	f000 fbd5 	bl	8012578 <__assert_func>
 8011dce:	6922      	ldr	r2, [r4, #16]
 8011dd0:	3202      	adds	r2, #2
 8011dd2:	f104 010c 	add.w	r1, r4, #12
 8011dd6:	0092      	lsls	r2, r2, #2
 8011dd8:	300c      	adds	r0, #12
 8011dda:	f7fe fe0a 	bl	80109f2 <memcpy>
 8011dde:	4621      	mov	r1, r4
 8011de0:	4638      	mov	r0, r7
 8011de2:	f7ff ffa5 	bl	8011d30 <_Bfree>
 8011de6:	4644      	mov	r4, r8
 8011de8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011dec:	3501      	adds	r5, #1
 8011dee:	615e      	str	r6, [r3, #20]
 8011df0:	6125      	str	r5, [r4, #16]
 8011df2:	4620      	mov	r0, r4
 8011df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011df8:	0801303c 	.word	0x0801303c
 8011dfc:	0801305e 	.word	0x0801305e

08011e00 <__hi0bits>:
 8011e00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011e04:	4603      	mov	r3, r0
 8011e06:	bf36      	itet	cc
 8011e08:	0403      	lslcc	r3, r0, #16
 8011e0a:	2000      	movcs	r0, #0
 8011e0c:	2010      	movcc	r0, #16
 8011e0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011e12:	bf3c      	itt	cc
 8011e14:	021b      	lslcc	r3, r3, #8
 8011e16:	3008      	addcc	r0, #8
 8011e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011e1c:	bf3c      	itt	cc
 8011e1e:	011b      	lslcc	r3, r3, #4
 8011e20:	3004      	addcc	r0, #4
 8011e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e26:	bf3c      	itt	cc
 8011e28:	009b      	lslcc	r3, r3, #2
 8011e2a:	3002      	addcc	r0, #2
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	db05      	blt.n	8011e3c <__hi0bits+0x3c>
 8011e30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011e34:	f100 0001 	add.w	r0, r0, #1
 8011e38:	bf08      	it	eq
 8011e3a:	2020      	moveq	r0, #32
 8011e3c:	4770      	bx	lr

08011e3e <__lo0bits>:
 8011e3e:	6803      	ldr	r3, [r0, #0]
 8011e40:	4602      	mov	r2, r0
 8011e42:	f013 0007 	ands.w	r0, r3, #7
 8011e46:	d00b      	beq.n	8011e60 <__lo0bits+0x22>
 8011e48:	07d9      	lsls	r1, r3, #31
 8011e4a:	d421      	bmi.n	8011e90 <__lo0bits+0x52>
 8011e4c:	0798      	lsls	r0, r3, #30
 8011e4e:	bf49      	itett	mi
 8011e50:	085b      	lsrmi	r3, r3, #1
 8011e52:	089b      	lsrpl	r3, r3, #2
 8011e54:	2001      	movmi	r0, #1
 8011e56:	6013      	strmi	r3, [r2, #0]
 8011e58:	bf5c      	itt	pl
 8011e5a:	6013      	strpl	r3, [r2, #0]
 8011e5c:	2002      	movpl	r0, #2
 8011e5e:	4770      	bx	lr
 8011e60:	b299      	uxth	r1, r3
 8011e62:	b909      	cbnz	r1, 8011e68 <__lo0bits+0x2a>
 8011e64:	0c1b      	lsrs	r3, r3, #16
 8011e66:	2010      	movs	r0, #16
 8011e68:	b2d9      	uxtb	r1, r3
 8011e6a:	b909      	cbnz	r1, 8011e70 <__lo0bits+0x32>
 8011e6c:	3008      	adds	r0, #8
 8011e6e:	0a1b      	lsrs	r3, r3, #8
 8011e70:	0719      	lsls	r1, r3, #28
 8011e72:	bf04      	itt	eq
 8011e74:	091b      	lsreq	r3, r3, #4
 8011e76:	3004      	addeq	r0, #4
 8011e78:	0799      	lsls	r1, r3, #30
 8011e7a:	bf04      	itt	eq
 8011e7c:	089b      	lsreq	r3, r3, #2
 8011e7e:	3002      	addeq	r0, #2
 8011e80:	07d9      	lsls	r1, r3, #31
 8011e82:	d403      	bmi.n	8011e8c <__lo0bits+0x4e>
 8011e84:	085b      	lsrs	r3, r3, #1
 8011e86:	f100 0001 	add.w	r0, r0, #1
 8011e8a:	d003      	beq.n	8011e94 <__lo0bits+0x56>
 8011e8c:	6013      	str	r3, [r2, #0]
 8011e8e:	4770      	bx	lr
 8011e90:	2000      	movs	r0, #0
 8011e92:	4770      	bx	lr
 8011e94:	2020      	movs	r0, #32
 8011e96:	4770      	bx	lr

08011e98 <__i2b>:
 8011e98:	b510      	push	{r4, lr}
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	2101      	movs	r1, #1
 8011e9e:	f7ff ff07 	bl	8011cb0 <_Balloc>
 8011ea2:	4602      	mov	r2, r0
 8011ea4:	b928      	cbnz	r0, 8011eb2 <__i2b+0x1a>
 8011ea6:	4b05      	ldr	r3, [pc, #20]	@ (8011ebc <__i2b+0x24>)
 8011ea8:	4805      	ldr	r0, [pc, #20]	@ (8011ec0 <__i2b+0x28>)
 8011eaa:	f240 1145 	movw	r1, #325	@ 0x145
 8011eae:	f000 fb63 	bl	8012578 <__assert_func>
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	6144      	str	r4, [r0, #20]
 8011eb6:	6103      	str	r3, [r0, #16]
 8011eb8:	bd10      	pop	{r4, pc}
 8011eba:	bf00      	nop
 8011ebc:	0801303c 	.word	0x0801303c
 8011ec0:	0801305e 	.word	0x0801305e

08011ec4 <__multiply>:
 8011ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec8:	4614      	mov	r4, r2
 8011eca:	690a      	ldr	r2, [r1, #16]
 8011ecc:	6923      	ldr	r3, [r4, #16]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	bfa8      	it	ge
 8011ed2:	4623      	movge	r3, r4
 8011ed4:	460f      	mov	r7, r1
 8011ed6:	bfa4      	itt	ge
 8011ed8:	460c      	movge	r4, r1
 8011eda:	461f      	movge	r7, r3
 8011edc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011ee0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011ee4:	68a3      	ldr	r3, [r4, #8]
 8011ee6:	6861      	ldr	r1, [r4, #4]
 8011ee8:	eb0a 0609 	add.w	r6, sl, r9
 8011eec:	42b3      	cmp	r3, r6
 8011eee:	b085      	sub	sp, #20
 8011ef0:	bfb8      	it	lt
 8011ef2:	3101      	addlt	r1, #1
 8011ef4:	f7ff fedc 	bl	8011cb0 <_Balloc>
 8011ef8:	b930      	cbnz	r0, 8011f08 <__multiply+0x44>
 8011efa:	4602      	mov	r2, r0
 8011efc:	4b44      	ldr	r3, [pc, #272]	@ (8012010 <__multiply+0x14c>)
 8011efe:	4845      	ldr	r0, [pc, #276]	@ (8012014 <__multiply+0x150>)
 8011f00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011f04:	f000 fb38 	bl	8012578 <__assert_func>
 8011f08:	f100 0514 	add.w	r5, r0, #20
 8011f0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011f10:	462b      	mov	r3, r5
 8011f12:	2200      	movs	r2, #0
 8011f14:	4543      	cmp	r3, r8
 8011f16:	d321      	bcc.n	8011f5c <__multiply+0x98>
 8011f18:	f107 0114 	add.w	r1, r7, #20
 8011f1c:	f104 0214 	add.w	r2, r4, #20
 8011f20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011f24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011f28:	9302      	str	r3, [sp, #8]
 8011f2a:	1b13      	subs	r3, r2, r4
 8011f2c:	3b15      	subs	r3, #21
 8011f2e:	f023 0303 	bic.w	r3, r3, #3
 8011f32:	3304      	adds	r3, #4
 8011f34:	f104 0715 	add.w	r7, r4, #21
 8011f38:	42ba      	cmp	r2, r7
 8011f3a:	bf38      	it	cc
 8011f3c:	2304      	movcc	r3, #4
 8011f3e:	9301      	str	r3, [sp, #4]
 8011f40:	9b02      	ldr	r3, [sp, #8]
 8011f42:	9103      	str	r1, [sp, #12]
 8011f44:	428b      	cmp	r3, r1
 8011f46:	d80c      	bhi.n	8011f62 <__multiply+0x9e>
 8011f48:	2e00      	cmp	r6, #0
 8011f4a:	dd03      	ble.n	8011f54 <__multiply+0x90>
 8011f4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d05b      	beq.n	801200c <__multiply+0x148>
 8011f54:	6106      	str	r6, [r0, #16]
 8011f56:	b005      	add	sp, #20
 8011f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f5c:	f843 2b04 	str.w	r2, [r3], #4
 8011f60:	e7d8      	b.n	8011f14 <__multiply+0x50>
 8011f62:	f8b1 a000 	ldrh.w	sl, [r1]
 8011f66:	f1ba 0f00 	cmp.w	sl, #0
 8011f6a:	d024      	beq.n	8011fb6 <__multiply+0xf2>
 8011f6c:	f104 0e14 	add.w	lr, r4, #20
 8011f70:	46a9      	mov	r9, r5
 8011f72:	f04f 0c00 	mov.w	ip, #0
 8011f76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011f7a:	f8d9 3000 	ldr.w	r3, [r9]
 8011f7e:	fa1f fb87 	uxth.w	fp, r7
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	fb0a 330b 	mla	r3, sl, fp, r3
 8011f88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011f8c:	f8d9 7000 	ldr.w	r7, [r9]
 8011f90:	4463      	add	r3, ip
 8011f92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011f96:	fb0a c70b 	mla	r7, sl, fp, ip
 8011f9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011fa4:	4572      	cmp	r2, lr
 8011fa6:	f849 3b04 	str.w	r3, [r9], #4
 8011faa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011fae:	d8e2      	bhi.n	8011f76 <__multiply+0xb2>
 8011fb0:	9b01      	ldr	r3, [sp, #4]
 8011fb2:	f845 c003 	str.w	ip, [r5, r3]
 8011fb6:	9b03      	ldr	r3, [sp, #12]
 8011fb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011fbc:	3104      	adds	r1, #4
 8011fbe:	f1b9 0f00 	cmp.w	r9, #0
 8011fc2:	d021      	beq.n	8012008 <__multiply+0x144>
 8011fc4:	682b      	ldr	r3, [r5, #0]
 8011fc6:	f104 0c14 	add.w	ip, r4, #20
 8011fca:	46ae      	mov	lr, r5
 8011fcc:	f04f 0a00 	mov.w	sl, #0
 8011fd0:	f8bc b000 	ldrh.w	fp, [ip]
 8011fd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011fd8:	fb09 770b 	mla	r7, r9, fp, r7
 8011fdc:	4457      	add	r7, sl
 8011fde:	b29b      	uxth	r3, r3
 8011fe0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011fe4:	f84e 3b04 	str.w	r3, [lr], #4
 8011fe8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011fec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011ff0:	f8be 3000 	ldrh.w	r3, [lr]
 8011ff4:	fb09 330a 	mla	r3, r9, sl, r3
 8011ff8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011ffc:	4562      	cmp	r2, ip
 8011ffe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012002:	d8e5      	bhi.n	8011fd0 <__multiply+0x10c>
 8012004:	9f01      	ldr	r7, [sp, #4]
 8012006:	51eb      	str	r3, [r5, r7]
 8012008:	3504      	adds	r5, #4
 801200a:	e799      	b.n	8011f40 <__multiply+0x7c>
 801200c:	3e01      	subs	r6, #1
 801200e:	e79b      	b.n	8011f48 <__multiply+0x84>
 8012010:	0801303c 	.word	0x0801303c
 8012014:	0801305e 	.word	0x0801305e

08012018 <__pow5mult>:
 8012018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801201c:	4615      	mov	r5, r2
 801201e:	f012 0203 	ands.w	r2, r2, #3
 8012022:	4607      	mov	r7, r0
 8012024:	460e      	mov	r6, r1
 8012026:	d007      	beq.n	8012038 <__pow5mult+0x20>
 8012028:	4c25      	ldr	r4, [pc, #148]	@ (80120c0 <__pow5mult+0xa8>)
 801202a:	3a01      	subs	r2, #1
 801202c:	2300      	movs	r3, #0
 801202e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012032:	f7ff fe9f 	bl	8011d74 <__multadd>
 8012036:	4606      	mov	r6, r0
 8012038:	10ad      	asrs	r5, r5, #2
 801203a:	d03d      	beq.n	80120b8 <__pow5mult+0xa0>
 801203c:	69fc      	ldr	r4, [r7, #28]
 801203e:	b97c      	cbnz	r4, 8012060 <__pow5mult+0x48>
 8012040:	2010      	movs	r0, #16
 8012042:	f7ff fcd3 	bl	80119ec <malloc>
 8012046:	4602      	mov	r2, r0
 8012048:	61f8      	str	r0, [r7, #28]
 801204a:	b928      	cbnz	r0, 8012058 <__pow5mult+0x40>
 801204c:	4b1d      	ldr	r3, [pc, #116]	@ (80120c4 <__pow5mult+0xac>)
 801204e:	481e      	ldr	r0, [pc, #120]	@ (80120c8 <__pow5mult+0xb0>)
 8012050:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012054:	f000 fa90 	bl	8012578 <__assert_func>
 8012058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801205c:	6004      	str	r4, [r0, #0]
 801205e:	60c4      	str	r4, [r0, #12]
 8012060:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012068:	b94c      	cbnz	r4, 801207e <__pow5mult+0x66>
 801206a:	f240 2171 	movw	r1, #625	@ 0x271
 801206e:	4638      	mov	r0, r7
 8012070:	f7ff ff12 	bl	8011e98 <__i2b>
 8012074:	2300      	movs	r3, #0
 8012076:	f8c8 0008 	str.w	r0, [r8, #8]
 801207a:	4604      	mov	r4, r0
 801207c:	6003      	str	r3, [r0, #0]
 801207e:	f04f 0900 	mov.w	r9, #0
 8012082:	07eb      	lsls	r3, r5, #31
 8012084:	d50a      	bpl.n	801209c <__pow5mult+0x84>
 8012086:	4631      	mov	r1, r6
 8012088:	4622      	mov	r2, r4
 801208a:	4638      	mov	r0, r7
 801208c:	f7ff ff1a 	bl	8011ec4 <__multiply>
 8012090:	4631      	mov	r1, r6
 8012092:	4680      	mov	r8, r0
 8012094:	4638      	mov	r0, r7
 8012096:	f7ff fe4b 	bl	8011d30 <_Bfree>
 801209a:	4646      	mov	r6, r8
 801209c:	106d      	asrs	r5, r5, #1
 801209e:	d00b      	beq.n	80120b8 <__pow5mult+0xa0>
 80120a0:	6820      	ldr	r0, [r4, #0]
 80120a2:	b938      	cbnz	r0, 80120b4 <__pow5mult+0x9c>
 80120a4:	4622      	mov	r2, r4
 80120a6:	4621      	mov	r1, r4
 80120a8:	4638      	mov	r0, r7
 80120aa:	f7ff ff0b 	bl	8011ec4 <__multiply>
 80120ae:	6020      	str	r0, [r4, #0]
 80120b0:	f8c0 9000 	str.w	r9, [r0]
 80120b4:	4604      	mov	r4, r0
 80120b6:	e7e4      	b.n	8012082 <__pow5mult+0x6a>
 80120b8:	4630      	mov	r0, r6
 80120ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120be:	bf00      	nop
 80120c0:	080130b8 	.word	0x080130b8
 80120c4:	08012fcd 	.word	0x08012fcd
 80120c8:	0801305e 	.word	0x0801305e

080120cc <__lshift>:
 80120cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120d0:	460c      	mov	r4, r1
 80120d2:	6849      	ldr	r1, [r1, #4]
 80120d4:	6923      	ldr	r3, [r4, #16]
 80120d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80120da:	68a3      	ldr	r3, [r4, #8]
 80120dc:	4607      	mov	r7, r0
 80120de:	4691      	mov	r9, r2
 80120e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80120e4:	f108 0601 	add.w	r6, r8, #1
 80120e8:	42b3      	cmp	r3, r6
 80120ea:	db0b      	blt.n	8012104 <__lshift+0x38>
 80120ec:	4638      	mov	r0, r7
 80120ee:	f7ff fddf 	bl	8011cb0 <_Balloc>
 80120f2:	4605      	mov	r5, r0
 80120f4:	b948      	cbnz	r0, 801210a <__lshift+0x3e>
 80120f6:	4602      	mov	r2, r0
 80120f8:	4b28      	ldr	r3, [pc, #160]	@ (801219c <__lshift+0xd0>)
 80120fa:	4829      	ldr	r0, [pc, #164]	@ (80121a0 <__lshift+0xd4>)
 80120fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012100:	f000 fa3a 	bl	8012578 <__assert_func>
 8012104:	3101      	adds	r1, #1
 8012106:	005b      	lsls	r3, r3, #1
 8012108:	e7ee      	b.n	80120e8 <__lshift+0x1c>
 801210a:	2300      	movs	r3, #0
 801210c:	f100 0114 	add.w	r1, r0, #20
 8012110:	f100 0210 	add.w	r2, r0, #16
 8012114:	4618      	mov	r0, r3
 8012116:	4553      	cmp	r3, sl
 8012118:	db33      	blt.n	8012182 <__lshift+0xb6>
 801211a:	6920      	ldr	r0, [r4, #16]
 801211c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012120:	f104 0314 	add.w	r3, r4, #20
 8012124:	f019 091f 	ands.w	r9, r9, #31
 8012128:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801212c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012130:	d02b      	beq.n	801218a <__lshift+0xbe>
 8012132:	f1c9 0e20 	rsb	lr, r9, #32
 8012136:	468a      	mov	sl, r1
 8012138:	2200      	movs	r2, #0
 801213a:	6818      	ldr	r0, [r3, #0]
 801213c:	fa00 f009 	lsl.w	r0, r0, r9
 8012140:	4310      	orrs	r0, r2
 8012142:	f84a 0b04 	str.w	r0, [sl], #4
 8012146:	f853 2b04 	ldr.w	r2, [r3], #4
 801214a:	459c      	cmp	ip, r3
 801214c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012150:	d8f3      	bhi.n	801213a <__lshift+0x6e>
 8012152:	ebac 0304 	sub.w	r3, ip, r4
 8012156:	3b15      	subs	r3, #21
 8012158:	f023 0303 	bic.w	r3, r3, #3
 801215c:	3304      	adds	r3, #4
 801215e:	f104 0015 	add.w	r0, r4, #21
 8012162:	4584      	cmp	ip, r0
 8012164:	bf38      	it	cc
 8012166:	2304      	movcc	r3, #4
 8012168:	50ca      	str	r2, [r1, r3]
 801216a:	b10a      	cbz	r2, 8012170 <__lshift+0xa4>
 801216c:	f108 0602 	add.w	r6, r8, #2
 8012170:	3e01      	subs	r6, #1
 8012172:	4638      	mov	r0, r7
 8012174:	612e      	str	r6, [r5, #16]
 8012176:	4621      	mov	r1, r4
 8012178:	f7ff fdda 	bl	8011d30 <_Bfree>
 801217c:	4628      	mov	r0, r5
 801217e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012182:	f842 0f04 	str.w	r0, [r2, #4]!
 8012186:	3301      	adds	r3, #1
 8012188:	e7c5      	b.n	8012116 <__lshift+0x4a>
 801218a:	3904      	subs	r1, #4
 801218c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012190:	f841 2f04 	str.w	r2, [r1, #4]!
 8012194:	459c      	cmp	ip, r3
 8012196:	d8f9      	bhi.n	801218c <__lshift+0xc0>
 8012198:	e7ea      	b.n	8012170 <__lshift+0xa4>
 801219a:	bf00      	nop
 801219c:	0801303c 	.word	0x0801303c
 80121a0:	0801305e 	.word	0x0801305e

080121a4 <__mcmp>:
 80121a4:	690a      	ldr	r2, [r1, #16]
 80121a6:	4603      	mov	r3, r0
 80121a8:	6900      	ldr	r0, [r0, #16]
 80121aa:	1a80      	subs	r0, r0, r2
 80121ac:	b530      	push	{r4, r5, lr}
 80121ae:	d10e      	bne.n	80121ce <__mcmp+0x2a>
 80121b0:	3314      	adds	r3, #20
 80121b2:	3114      	adds	r1, #20
 80121b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80121b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80121bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80121c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80121c4:	4295      	cmp	r5, r2
 80121c6:	d003      	beq.n	80121d0 <__mcmp+0x2c>
 80121c8:	d205      	bcs.n	80121d6 <__mcmp+0x32>
 80121ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121ce:	bd30      	pop	{r4, r5, pc}
 80121d0:	42a3      	cmp	r3, r4
 80121d2:	d3f3      	bcc.n	80121bc <__mcmp+0x18>
 80121d4:	e7fb      	b.n	80121ce <__mcmp+0x2a>
 80121d6:	2001      	movs	r0, #1
 80121d8:	e7f9      	b.n	80121ce <__mcmp+0x2a>
	...

080121dc <__mdiff>:
 80121dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e0:	4689      	mov	r9, r1
 80121e2:	4606      	mov	r6, r0
 80121e4:	4611      	mov	r1, r2
 80121e6:	4648      	mov	r0, r9
 80121e8:	4614      	mov	r4, r2
 80121ea:	f7ff ffdb 	bl	80121a4 <__mcmp>
 80121ee:	1e05      	subs	r5, r0, #0
 80121f0:	d112      	bne.n	8012218 <__mdiff+0x3c>
 80121f2:	4629      	mov	r1, r5
 80121f4:	4630      	mov	r0, r6
 80121f6:	f7ff fd5b 	bl	8011cb0 <_Balloc>
 80121fa:	4602      	mov	r2, r0
 80121fc:	b928      	cbnz	r0, 801220a <__mdiff+0x2e>
 80121fe:	4b3f      	ldr	r3, [pc, #252]	@ (80122fc <__mdiff+0x120>)
 8012200:	f240 2137 	movw	r1, #567	@ 0x237
 8012204:	483e      	ldr	r0, [pc, #248]	@ (8012300 <__mdiff+0x124>)
 8012206:	f000 f9b7 	bl	8012578 <__assert_func>
 801220a:	2301      	movs	r3, #1
 801220c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012210:	4610      	mov	r0, r2
 8012212:	b003      	add	sp, #12
 8012214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012218:	bfbc      	itt	lt
 801221a:	464b      	movlt	r3, r9
 801221c:	46a1      	movlt	r9, r4
 801221e:	4630      	mov	r0, r6
 8012220:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012224:	bfba      	itte	lt
 8012226:	461c      	movlt	r4, r3
 8012228:	2501      	movlt	r5, #1
 801222a:	2500      	movge	r5, #0
 801222c:	f7ff fd40 	bl	8011cb0 <_Balloc>
 8012230:	4602      	mov	r2, r0
 8012232:	b918      	cbnz	r0, 801223c <__mdiff+0x60>
 8012234:	4b31      	ldr	r3, [pc, #196]	@ (80122fc <__mdiff+0x120>)
 8012236:	f240 2145 	movw	r1, #581	@ 0x245
 801223a:	e7e3      	b.n	8012204 <__mdiff+0x28>
 801223c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012240:	6926      	ldr	r6, [r4, #16]
 8012242:	60c5      	str	r5, [r0, #12]
 8012244:	f109 0310 	add.w	r3, r9, #16
 8012248:	f109 0514 	add.w	r5, r9, #20
 801224c:	f104 0e14 	add.w	lr, r4, #20
 8012250:	f100 0b14 	add.w	fp, r0, #20
 8012254:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012258:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801225c:	9301      	str	r3, [sp, #4]
 801225e:	46d9      	mov	r9, fp
 8012260:	f04f 0c00 	mov.w	ip, #0
 8012264:	9b01      	ldr	r3, [sp, #4]
 8012266:	f85e 0b04 	ldr.w	r0, [lr], #4
 801226a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801226e:	9301      	str	r3, [sp, #4]
 8012270:	fa1f f38a 	uxth.w	r3, sl
 8012274:	4619      	mov	r1, r3
 8012276:	b283      	uxth	r3, r0
 8012278:	1acb      	subs	r3, r1, r3
 801227a:	0c00      	lsrs	r0, r0, #16
 801227c:	4463      	add	r3, ip
 801227e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012282:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012286:	b29b      	uxth	r3, r3
 8012288:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801228c:	4576      	cmp	r6, lr
 801228e:	f849 3b04 	str.w	r3, [r9], #4
 8012292:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012296:	d8e5      	bhi.n	8012264 <__mdiff+0x88>
 8012298:	1b33      	subs	r3, r6, r4
 801229a:	3b15      	subs	r3, #21
 801229c:	f023 0303 	bic.w	r3, r3, #3
 80122a0:	3415      	adds	r4, #21
 80122a2:	3304      	adds	r3, #4
 80122a4:	42a6      	cmp	r6, r4
 80122a6:	bf38      	it	cc
 80122a8:	2304      	movcc	r3, #4
 80122aa:	441d      	add	r5, r3
 80122ac:	445b      	add	r3, fp
 80122ae:	461e      	mov	r6, r3
 80122b0:	462c      	mov	r4, r5
 80122b2:	4544      	cmp	r4, r8
 80122b4:	d30e      	bcc.n	80122d4 <__mdiff+0xf8>
 80122b6:	f108 0103 	add.w	r1, r8, #3
 80122ba:	1b49      	subs	r1, r1, r5
 80122bc:	f021 0103 	bic.w	r1, r1, #3
 80122c0:	3d03      	subs	r5, #3
 80122c2:	45a8      	cmp	r8, r5
 80122c4:	bf38      	it	cc
 80122c6:	2100      	movcc	r1, #0
 80122c8:	440b      	add	r3, r1
 80122ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80122ce:	b191      	cbz	r1, 80122f6 <__mdiff+0x11a>
 80122d0:	6117      	str	r7, [r2, #16]
 80122d2:	e79d      	b.n	8012210 <__mdiff+0x34>
 80122d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80122d8:	46e6      	mov	lr, ip
 80122da:	0c08      	lsrs	r0, r1, #16
 80122dc:	fa1c fc81 	uxtah	ip, ip, r1
 80122e0:	4471      	add	r1, lr
 80122e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80122e6:	b289      	uxth	r1, r1
 80122e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80122ec:	f846 1b04 	str.w	r1, [r6], #4
 80122f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80122f4:	e7dd      	b.n	80122b2 <__mdiff+0xd6>
 80122f6:	3f01      	subs	r7, #1
 80122f8:	e7e7      	b.n	80122ca <__mdiff+0xee>
 80122fa:	bf00      	nop
 80122fc:	0801303c 	.word	0x0801303c
 8012300:	0801305e 	.word	0x0801305e

08012304 <__d2b>:
 8012304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012308:	460f      	mov	r7, r1
 801230a:	2101      	movs	r1, #1
 801230c:	ec59 8b10 	vmov	r8, r9, d0
 8012310:	4616      	mov	r6, r2
 8012312:	f7ff fccd 	bl	8011cb0 <_Balloc>
 8012316:	4604      	mov	r4, r0
 8012318:	b930      	cbnz	r0, 8012328 <__d2b+0x24>
 801231a:	4602      	mov	r2, r0
 801231c:	4b23      	ldr	r3, [pc, #140]	@ (80123ac <__d2b+0xa8>)
 801231e:	4824      	ldr	r0, [pc, #144]	@ (80123b0 <__d2b+0xac>)
 8012320:	f240 310f 	movw	r1, #783	@ 0x30f
 8012324:	f000 f928 	bl	8012578 <__assert_func>
 8012328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801232c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012330:	b10d      	cbz	r5, 8012336 <__d2b+0x32>
 8012332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012336:	9301      	str	r3, [sp, #4]
 8012338:	f1b8 0300 	subs.w	r3, r8, #0
 801233c:	d023      	beq.n	8012386 <__d2b+0x82>
 801233e:	4668      	mov	r0, sp
 8012340:	9300      	str	r3, [sp, #0]
 8012342:	f7ff fd7c 	bl	8011e3e <__lo0bits>
 8012346:	e9dd 1200 	ldrd	r1, r2, [sp]
 801234a:	b1d0      	cbz	r0, 8012382 <__d2b+0x7e>
 801234c:	f1c0 0320 	rsb	r3, r0, #32
 8012350:	fa02 f303 	lsl.w	r3, r2, r3
 8012354:	430b      	orrs	r3, r1
 8012356:	40c2      	lsrs	r2, r0
 8012358:	6163      	str	r3, [r4, #20]
 801235a:	9201      	str	r2, [sp, #4]
 801235c:	9b01      	ldr	r3, [sp, #4]
 801235e:	61a3      	str	r3, [r4, #24]
 8012360:	2b00      	cmp	r3, #0
 8012362:	bf0c      	ite	eq
 8012364:	2201      	moveq	r2, #1
 8012366:	2202      	movne	r2, #2
 8012368:	6122      	str	r2, [r4, #16]
 801236a:	b1a5      	cbz	r5, 8012396 <__d2b+0x92>
 801236c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012370:	4405      	add	r5, r0
 8012372:	603d      	str	r5, [r7, #0]
 8012374:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012378:	6030      	str	r0, [r6, #0]
 801237a:	4620      	mov	r0, r4
 801237c:	b003      	add	sp, #12
 801237e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012382:	6161      	str	r1, [r4, #20]
 8012384:	e7ea      	b.n	801235c <__d2b+0x58>
 8012386:	a801      	add	r0, sp, #4
 8012388:	f7ff fd59 	bl	8011e3e <__lo0bits>
 801238c:	9b01      	ldr	r3, [sp, #4]
 801238e:	6163      	str	r3, [r4, #20]
 8012390:	3020      	adds	r0, #32
 8012392:	2201      	movs	r2, #1
 8012394:	e7e8      	b.n	8012368 <__d2b+0x64>
 8012396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801239a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801239e:	6038      	str	r0, [r7, #0]
 80123a0:	6918      	ldr	r0, [r3, #16]
 80123a2:	f7ff fd2d 	bl	8011e00 <__hi0bits>
 80123a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80123aa:	e7e5      	b.n	8012378 <__d2b+0x74>
 80123ac:	0801303c 	.word	0x0801303c
 80123b0:	0801305e 	.word	0x0801305e

080123b4 <__sread>:
 80123b4:	b510      	push	{r4, lr}
 80123b6:	460c      	mov	r4, r1
 80123b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123bc:	f000 f8a8 	bl	8012510 <_read_r>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	bfab      	itete	ge
 80123c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80123c6:	89a3      	ldrhlt	r3, [r4, #12]
 80123c8:	181b      	addge	r3, r3, r0
 80123ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80123ce:	bfac      	ite	ge
 80123d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80123d2:	81a3      	strhlt	r3, [r4, #12]
 80123d4:	bd10      	pop	{r4, pc}

080123d6 <__swrite>:
 80123d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123da:	461f      	mov	r7, r3
 80123dc:	898b      	ldrh	r3, [r1, #12]
 80123de:	05db      	lsls	r3, r3, #23
 80123e0:	4605      	mov	r5, r0
 80123e2:	460c      	mov	r4, r1
 80123e4:	4616      	mov	r6, r2
 80123e6:	d505      	bpl.n	80123f4 <__swrite+0x1e>
 80123e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123ec:	2302      	movs	r3, #2
 80123ee:	2200      	movs	r2, #0
 80123f0:	f000 f87c 	bl	80124ec <_lseek_r>
 80123f4:	89a3      	ldrh	r3, [r4, #12]
 80123f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80123fe:	81a3      	strh	r3, [r4, #12]
 8012400:	4632      	mov	r2, r6
 8012402:	463b      	mov	r3, r7
 8012404:	4628      	mov	r0, r5
 8012406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801240a:	f000 b8a3 	b.w	8012554 <_write_r>

0801240e <__sseek>:
 801240e:	b510      	push	{r4, lr}
 8012410:	460c      	mov	r4, r1
 8012412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012416:	f000 f869 	bl	80124ec <_lseek_r>
 801241a:	1c43      	adds	r3, r0, #1
 801241c:	89a3      	ldrh	r3, [r4, #12]
 801241e:	bf15      	itete	ne
 8012420:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012422:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012426:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801242a:	81a3      	strheq	r3, [r4, #12]
 801242c:	bf18      	it	ne
 801242e:	81a3      	strhne	r3, [r4, #12]
 8012430:	bd10      	pop	{r4, pc}

08012432 <__sclose>:
 8012432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012436:	f000 b849 	b.w	80124cc <_close_r>

0801243a <_realloc_r>:
 801243a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801243e:	4680      	mov	r8, r0
 8012440:	4615      	mov	r5, r2
 8012442:	460c      	mov	r4, r1
 8012444:	b921      	cbnz	r1, 8012450 <_realloc_r+0x16>
 8012446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801244a:	4611      	mov	r1, r2
 801244c:	f7ff baf8 	b.w	8011a40 <_malloc_r>
 8012450:	b92a      	cbnz	r2, 801245e <_realloc_r+0x24>
 8012452:	f7ff f929 	bl	80116a8 <_free_r>
 8012456:	2400      	movs	r4, #0
 8012458:	4620      	mov	r0, r4
 801245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801245e:	f000 f8cf 	bl	8012600 <_malloc_usable_size_r>
 8012462:	4285      	cmp	r5, r0
 8012464:	4606      	mov	r6, r0
 8012466:	d802      	bhi.n	801246e <_realloc_r+0x34>
 8012468:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801246c:	d8f4      	bhi.n	8012458 <_realloc_r+0x1e>
 801246e:	4629      	mov	r1, r5
 8012470:	4640      	mov	r0, r8
 8012472:	f7ff fae5 	bl	8011a40 <_malloc_r>
 8012476:	4607      	mov	r7, r0
 8012478:	2800      	cmp	r0, #0
 801247a:	d0ec      	beq.n	8012456 <_realloc_r+0x1c>
 801247c:	42b5      	cmp	r5, r6
 801247e:	462a      	mov	r2, r5
 8012480:	4621      	mov	r1, r4
 8012482:	bf28      	it	cs
 8012484:	4632      	movcs	r2, r6
 8012486:	f7fe fab4 	bl	80109f2 <memcpy>
 801248a:	4621      	mov	r1, r4
 801248c:	4640      	mov	r0, r8
 801248e:	f7ff f90b 	bl	80116a8 <_free_r>
 8012492:	463c      	mov	r4, r7
 8012494:	e7e0      	b.n	8012458 <_realloc_r+0x1e>

08012496 <memmove>:
 8012496:	4288      	cmp	r0, r1
 8012498:	b510      	push	{r4, lr}
 801249a:	eb01 0402 	add.w	r4, r1, r2
 801249e:	d902      	bls.n	80124a6 <memmove+0x10>
 80124a0:	4284      	cmp	r4, r0
 80124a2:	4623      	mov	r3, r4
 80124a4:	d807      	bhi.n	80124b6 <memmove+0x20>
 80124a6:	1e43      	subs	r3, r0, #1
 80124a8:	42a1      	cmp	r1, r4
 80124aa:	d008      	beq.n	80124be <memmove+0x28>
 80124ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124b4:	e7f8      	b.n	80124a8 <memmove+0x12>
 80124b6:	4402      	add	r2, r0
 80124b8:	4601      	mov	r1, r0
 80124ba:	428a      	cmp	r2, r1
 80124bc:	d100      	bne.n	80124c0 <memmove+0x2a>
 80124be:	bd10      	pop	{r4, pc}
 80124c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80124c8:	e7f7      	b.n	80124ba <memmove+0x24>
	...

080124cc <_close_r>:
 80124cc:	b538      	push	{r3, r4, r5, lr}
 80124ce:	4d06      	ldr	r5, [pc, #24]	@ (80124e8 <_close_r+0x1c>)
 80124d0:	2300      	movs	r3, #0
 80124d2:	4604      	mov	r4, r0
 80124d4:	4608      	mov	r0, r1
 80124d6:	602b      	str	r3, [r5, #0]
 80124d8:	f7ef fef6 	bl	80022c8 <_close>
 80124dc:	1c43      	adds	r3, r0, #1
 80124de:	d102      	bne.n	80124e6 <_close_r+0x1a>
 80124e0:	682b      	ldr	r3, [r5, #0]
 80124e2:	b103      	cbz	r3, 80124e6 <_close_r+0x1a>
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	bd38      	pop	{r3, r4, r5, pc}
 80124e8:	20010410 	.word	0x20010410

080124ec <_lseek_r>:
 80124ec:	b538      	push	{r3, r4, r5, lr}
 80124ee:	4d07      	ldr	r5, [pc, #28]	@ (801250c <_lseek_r+0x20>)
 80124f0:	4604      	mov	r4, r0
 80124f2:	4608      	mov	r0, r1
 80124f4:	4611      	mov	r1, r2
 80124f6:	2200      	movs	r2, #0
 80124f8:	602a      	str	r2, [r5, #0]
 80124fa:	461a      	mov	r2, r3
 80124fc:	f7ef ff0b 	bl	8002316 <_lseek>
 8012500:	1c43      	adds	r3, r0, #1
 8012502:	d102      	bne.n	801250a <_lseek_r+0x1e>
 8012504:	682b      	ldr	r3, [r5, #0]
 8012506:	b103      	cbz	r3, 801250a <_lseek_r+0x1e>
 8012508:	6023      	str	r3, [r4, #0]
 801250a:	bd38      	pop	{r3, r4, r5, pc}
 801250c:	20010410 	.word	0x20010410

08012510 <_read_r>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	4d07      	ldr	r5, [pc, #28]	@ (8012530 <_read_r+0x20>)
 8012514:	4604      	mov	r4, r0
 8012516:	4608      	mov	r0, r1
 8012518:	4611      	mov	r1, r2
 801251a:	2200      	movs	r2, #0
 801251c:	602a      	str	r2, [r5, #0]
 801251e:	461a      	mov	r2, r3
 8012520:	f7ef fe99 	bl	8002256 <_read>
 8012524:	1c43      	adds	r3, r0, #1
 8012526:	d102      	bne.n	801252e <_read_r+0x1e>
 8012528:	682b      	ldr	r3, [r5, #0]
 801252a:	b103      	cbz	r3, 801252e <_read_r+0x1e>
 801252c:	6023      	str	r3, [r4, #0]
 801252e:	bd38      	pop	{r3, r4, r5, pc}
 8012530:	20010410 	.word	0x20010410

08012534 <_sbrk_r>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	4d06      	ldr	r5, [pc, #24]	@ (8012550 <_sbrk_r+0x1c>)
 8012538:	2300      	movs	r3, #0
 801253a:	4604      	mov	r4, r0
 801253c:	4608      	mov	r0, r1
 801253e:	602b      	str	r3, [r5, #0]
 8012540:	f7ef fef6 	bl	8002330 <_sbrk>
 8012544:	1c43      	adds	r3, r0, #1
 8012546:	d102      	bne.n	801254e <_sbrk_r+0x1a>
 8012548:	682b      	ldr	r3, [r5, #0]
 801254a:	b103      	cbz	r3, 801254e <_sbrk_r+0x1a>
 801254c:	6023      	str	r3, [r4, #0]
 801254e:	bd38      	pop	{r3, r4, r5, pc}
 8012550:	20010410 	.word	0x20010410

08012554 <_write_r>:
 8012554:	b538      	push	{r3, r4, r5, lr}
 8012556:	4d07      	ldr	r5, [pc, #28]	@ (8012574 <_write_r+0x20>)
 8012558:	4604      	mov	r4, r0
 801255a:	4608      	mov	r0, r1
 801255c:	4611      	mov	r1, r2
 801255e:	2200      	movs	r2, #0
 8012560:	602a      	str	r2, [r5, #0]
 8012562:	461a      	mov	r2, r3
 8012564:	f7ef fe94 	bl	8002290 <_write>
 8012568:	1c43      	adds	r3, r0, #1
 801256a:	d102      	bne.n	8012572 <_write_r+0x1e>
 801256c:	682b      	ldr	r3, [r5, #0]
 801256e:	b103      	cbz	r3, 8012572 <_write_r+0x1e>
 8012570:	6023      	str	r3, [r4, #0]
 8012572:	bd38      	pop	{r3, r4, r5, pc}
 8012574:	20010410 	.word	0x20010410

08012578 <__assert_func>:
 8012578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801257a:	4614      	mov	r4, r2
 801257c:	461a      	mov	r2, r3
 801257e:	4b09      	ldr	r3, [pc, #36]	@ (80125a4 <__assert_func+0x2c>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	4605      	mov	r5, r0
 8012584:	68d8      	ldr	r0, [r3, #12]
 8012586:	b954      	cbnz	r4, 801259e <__assert_func+0x26>
 8012588:	4b07      	ldr	r3, [pc, #28]	@ (80125a8 <__assert_func+0x30>)
 801258a:	461c      	mov	r4, r3
 801258c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012590:	9100      	str	r1, [sp, #0]
 8012592:	462b      	mov	r3, r5
 8012594:	4905      	ldr	r1, [pc, #20]	@ (80125ac <__assert_func+0x34>)
 8012596:	f000 f83b 	bl	8012610 <fiprintf>
 801259a:	f000 f858 	bl	801264e <abort>
 801259e:	4b04      	ldr	r3, [pc, #16]	@ (80125b0 <__assert_func+0x38>)
 80125a0:	e7f4      	b.n	801258c <__assert_func+0x14>
 80125a2:	bf00      	nop
 80125a4:	20000194 	.word	0x20000194
 80125a8:	080132fe 	.word	0x080132fe
 80125ac:	080132d0 	.word	0x080132d0
 80125b0:	080132c3 	.word	0x080132c3

080125b4 <_calloc_r>:
 80125b4:	b570      	push	{r4, r5, r6, lr}
 80125b6:	fba1 5402 	umull	r5, r4, r1, r2
 80125ba:	b93c      	cbnz	r4, 80125cc <_calloc_r+0x18>
 80125bc:	4629      	mov	r1, r5
 80125be:	f7ff fa3f 	bl	8011a40 <_malloc_r>
 80125c2:	4606      	mov	r6, r0
 80125c4:	b928      	cbnz	r0, 80125d2 <_calloc_r+0x1e>
 80125c6:	2600      	movs	r6, #0
 80125c8:	4630      	mov	r0, r6
 80125ca:	bd70      	pop	{r4, r5, r6, pc}
 80125cc:	220c      	movs	r2, #12
 80125ce:	6002      	str	r2, [r0, #0]
 80125d0:	e7f9      	b.n	80125c6 <_calloc_r+0x12>
 80125d2:	462a      	mov	r2, r5
 80125d4:	4621      	mov	r1, r4
 80125d6:	f7fe f97d 	bl	80108d4 <memset>
 80125da:	e7f5      	b.n	80125c8 <_calloc_r+0x14>

080125dc <__ascii_mbtowc>:
 80125dc:	b082      	sub	sp, #8
 80125de:	b901      	cbnz	r1, 80125e2 <__ascii_mbtowc+0x6>
 80125e0:	a901      	add	r1, sp, #4
 80125e2:	b142      	cbz	r2, 80125f6 <__ascii_mbtowc+0x1a>
 80125e4:	b14b      	cbz	r3, 80125fa <__ascii_mbtowc+0x1e>
 80125e6:	7813      	ldrb	r3, [r2, #0]
 80125e8:	600b      	str	r3, [r1, #0]
 80125ea:	7812      	ldrb	r2, [r2, #0]
 80125ec:	1e10      	subs	r0, r2, #0
 80125ee:	bf18      	it	ne
 80125f0:	2001      	movne	r0, #1
 80125f2:	b002      	add	sp, #8
 80125f4:	4770      	bx	lr
 80125f6:	4610      	mov	r0, r2
 80125f8:	e7fb      	b.n	80125f2 <__ascii_mbtowc+0x16>
 80125fa:	f06f 0001 	mvn.w	r0, #1
 80125fe:	e7f8      	b.n	80125f2 <__ascii_mbtowc+0x16>

08012600 <_malloc_usable_size_r>:
 8012600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012604:	1f18      	subs	r0, r3, #4
 8012606:	2b00      	cmp	r3, #0
 8012608:	bfbc      	itt	lt
 801260a:	580b      	ldrlt	r3, [r1, r0]
 801260c:	18c0      	addlt	r0, r0, r3
 801260e:	4770      	bx	lr

08012610 <fiprintf>:
 8012610:	b40e      	push	{r1, r2, r3}
 8012612:	b503      	push	{r0, r1, lr}
 8012614:	4601      	mov	r1, r0
 8012616:	ab03      	add	r3, sp, #12
 8012618:	4805      	ldr	r0, [pc, #20]	@ (8012630 <fiprintf+0x20>)
 801261a:	f853 2b04 	ldr.w	r2, [r3], #4
 801261e:	6800      	ldr	r0, [r0, #0]
 8012620:	9301      	str	r3, [sp, #4]
 8012622:	f000 f845 	bl	80126b0 <_vfiprintf_r>
 8012626:	b002      	add	sp, #8
 8012628:	f85d eb04 	ldr.w	lr, [sp], #4
 801262c:	b003      	add	sp, #12
 801262e:	4770      	bx	lr
 8012630:	20000194 	.word	0x20000194

08012634 <__ascii_wctomb>:
 8012634:	4603      	mov	r3, r0
 8012636:	4608      	mov	r0, r1
 8012638:	b141      	cbz	r1, 801264c <__ascii_wctomb+0x18>
 801263a:	2aff      	cmp	r2, #255	@ 0xff
 801263c:	d904      	bls.n	8012648 <__ascii_wctomb+0x14>
 801263e:	228a      	movs	r2, #138	@ 0x8a
 8012640:	601a      	str	r2, [r3, #0]
 8012642:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012646:	4770      	bx	lr
 8012648:	700a      	strb	r2, [r1, #0]
 801264a:	2001      	movs	r0, #1
 801264c:	4770      	bx	lr

0801264e <abort>:
 801264e:	b508      	push	{r3, lr}
 8012650:	2006      	movs	r0, #6
 8012652:	f000 fa85 	bl	8012b60 <raise>
 8012656:	2001      	movs	r0, #1
 8012658:	f7ef fdf2 	bl	8002240 <_exit>

0801265c <__sfputc_r>:
 801265c:	6893      	ldr	r3, [r2, #8]
 801265e:	3b01      	subs	r3, #1
 8012660:	2b00      	cmp	r3, #0
 8012662:	b410      	push	{r4}
 8012664:	6093      	str	r3, [r2, #8]
 8012666:	da08      	bge.n	801267a <__sfputc_r+0x1e>
 8012668:	6994      	ldr	r4, [r2, #24]
 801266a:	42a3      	cmp	r3, r4
 801266c:	db01      	blt.n	8012672 <__sfputc_r+0x16>
 801266e:	290a      	cmp	r1, #10
 8012670:	d103      	bne.n	801267a <__sfputc_r+0x1e>
 8012672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012676:	f000 b933 	b.w	80128e0 <__swbuf_r>
 801267a:	6813      	ldr	r3, [r2, #0]
 801267c:	1c58      	adds	r0, r3, #1
 801267e:	6010      	str	r0, [r2, #0]
 8012680:	7019      	strb	r1, [r3, #0]
 8012682:	4608      	mov	r0, r1
 8012684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012688:	4770      	bx	lr

0801268a <__sfputs_r>:
 801268a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801268c:	4606      	mov	r6, r0
 801268e:	460f      	mov	r7, r1
 8012690:	4614      	mov	r4, r2
 8012692:	18d5      	adds	r5, r2, r3
 8012694:	42ac      	cmp	r4, r5
 8012696:	d101      	bne.n	801269c <__sfputs_r+0x12>
 8012698:	2000      	movs	r0, #0
 801269a:	e007      	b.n	80126ac <__sfputs_r+0x22>
 801269c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126a0:	463a      	mov	r2, r7
 80126a2:	4630      	mov	r0, r6
 80126a4:	f7ff ffda 	bl	801265c <__sfputc_r>
 80126a8:	1c43      	adds	r3, r0, #1
 80126aa:	d1f3      	bne.n	8012694 <__sfputs_r+0xa>
 80126ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080126b0 <_vfiprintf_r>:
 80126b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b4:	460d      	mov	r5, r1
 80126b6:	b09d      	sub	sp, #116	@ 0x74
 80126b8:	4614      	mov	r4, r2
 80126ba:	4698      	mov	r8, r3
 80126bc:	4606      	mov	r6, r0
 80126be:	b118      	cbz	r0, 80126c8 <_vfiprintf_r+0x18>
 80126c0:	6a03      	ldr	r3, [r0, #32]
 80126c2:	b90b      	cbnz	r3, 80126c8 <_vfiprintf_r+0x18>
 80126c4:	f7fe f896 	bl	80107f4 <__sinit>
 80126c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126ca:	07d9      	lsls	r1, r3, #31
 80126cc:	d405      	bmi.n	80126da <_vfiprintf_r+0x2a>
 80126ce:	89ab      	ldrh	r3, [r5, #12]
 80126d0:	059a      	lsls	r2, r3, #22
 80126d2:	d402      	bmi.n	80126da <_vfiprintf_r+0x2a>
 80126d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126d6:	f7fe f98a 	bl	80109ee <__retarget_lock_acquire_recursive>
 80126da:	89ab      	ldrh	r3, [r5, #12]
 80126dc:	071b      	lsls	r3, r3, #28
 80126de:	d501      	bpl.n	80126e4 <_vfiprintf_r+0x34>
 80126e0:	692b      	ldr	r3, [r5, #16]
 80126e2:	b99b      	cbnz	r3, 801270c <_vfiprintf_r+0x5c>
 80126e4:	4629      	mov	r1, r5
 80126e6:	4630      	mov	r0, r6
 80126e8:	f000 f938 	bl	801295c <__swsetup_r>
 80126ec:	b170      	cbz	r0, 801270c <_vfiprintf_r+0x5c>
 80126ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126f0:	07dc      	lsls	r4, r3, #31
 80126f2:	d504      	bpl.n	80126fe <_vfiprintf_r+0x4e>
 80126f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80126f8:	b01d      	add	sp, #116	@ 0x74
 80126fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126fe:	89ab      	ldrh	r3, [r5, #12]
 8012700:	0598      	lsls	r0, r3, #22
 8012702:	d4f7      	bmi.n	80126f4 <_vfiprintf_r+0x44>
 8012704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012706:	f7fe f973 	bl	80109f0 <__retarget_lock_release_recursive>
 801270a:	e7f3      	b.n	80126f4 <_vfiprintf_r+0x44>
 801270c:	2300      	movs	r3, #0
 801270e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012710:	2320      	movs	r3, #32
 8012712:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012716:	f8cd 800c 	str.w	r8, [sp, #12]
 801271a:	2330      	movs	r3, #48	@ 0x30
 801271c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80128cc <_vfiprintf_r+0x21c>
 8012720:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012724:	f04f 0901 	mov.w	r9, #1
 8012728:	4623      	mov	r3, r4
 801272a:	469a      	mov	sl, r3
 801272c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012730:	b10a      	cbz	r2, 8012736 <_vfiprintf_r+0x86>
 8012732:	2a25      	cmp	r2, #37	@ 0x25
 8012734:	d1f9      	bne.n	801272a <_vfiprintf_r+0x7a>
 8012736:	ebba 0b04 	subs.w	fp, sl, r4
 801273a:	d00b      	beq.n	8012754 <_vfiprintf_r+0xa4>
 801273c:	465b      	mov	r3, fp
 801273e:	4622      	mov	r2, r4
 8012740:	4629      	mov	r1, r5
 8012742:	4630      	mov	r0, r6
 8012744:	f7ff ffa1 	bl	801268a <__sfputs_r>
 8012748:	3001      	adds	r0, #1
 801274a:	f000 80a7 	beq.w	801289c <_vfiprintf_r+0x1ec>
 801274e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012750:	445a      	add	r2, fp
 8012752:	9209      	str	r2, [sp, #36]	@ 0x24
 8012754:	f89a 3000 	ldrb.w	r3, [sl]
 8012758:	2b00      	cmp	r3, #0
 801275a:	f000 809f 	beq.w	801289c <_vfiprintf_r+0x1ec>
 801275e:	2300      	movs	r3, #0
 8012760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012768:	f10a 0a01 	add.w	sl, sl, #1
 801276c:	9304      	str	r3, [sp, #16]
 801276e:	9307      	str	r3, [sp, #28]
 8012770:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012774:	931a      	str	r3, [sp, #104]	@ 0x68
 8012776:	4654      	mov	r4, sl
 8012778:	2205      	movs	r2, #5
 801277a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801277e:	4853      	ldr	r0, [pc, #332]	@ (80128cc <_vfiprintf_r+0x21c>)
 8012780:	f7ed fd4e 	bl	8000220 <memchr>
 8012784:	9a04      	ldr	r2, [sp, #16]
 8012786:	b9d8      	cbnz	r0, 80127c0 <_vfiprintf_r+0x110>
 8012788:	06d1      	lsls	r1, r2, #27
 801278a:	bf44      	itt	mi
 801278c:	2320      	movmi	r3, #32
 801278e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012792:	0713      	lsls	r3, r2, #28
 8012794:	bf44      	itt	mi
 8012796:	232b      	movmi	r3, #43	@ 0x2b
 8012798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801279c:	f89a 3000 	ldrb.w	r3, [sl]
 80127a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80127a2:	d015      	beq.n	80127d0 <_vfiprintf_r+0x120>
 80127a4:	9a07      	ldr	r2, [sp, #28]
 80127a6:	4654      	mov	r4, sl
 80127a8:	2000      	movs	r0, #0
 80127aa:	f04f 0c0a 	mov.w	ip, #10
 80127ae:	4621      	mov	r1, r4
 80127b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127b4:	3b30      	subs	r3, #48	@ 0x30
 80127b6:	2b09      	cmp	r3, #9
 80127b8:	d94b      	bls.n	8012852 <_vfiprintf_r+0x1a2>
 80127ba:	b1b0      	cbz	r0, 80127ea <_vfiprintf_r+0x13a>
 80127bc:	9207      	str	r2, [sp, #28]
 80127be:	e014      	b.n	80127ea <_vfiprintf_r+0x13a>
 80127c0:	eba0 0308 	sub.w	r3, r0, r8
 80127c4:	fa09 f303 	lsl.w	r3, r9, r3
 80127c8:	4313      	orrs	r3, r2
 80127ca:	9304      	str	r3, [sp, #16]
 80127cc:	46a2      	mov	sl, r4
 80127ce:	e7d2      	b.n	8012776 <_vfiprintf_r+0xc6>
 80127d0:	9b03      	ldr	r3, [sp, #12]
 80127d2:	1d19      	adds	r1, r3, #4
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	9103      	str	r1, [sp, #12]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	bfbb      	ittet	lt
 80127dc:	425b      	neglt	r3, r3
 80127de:	f042 0202 	orrlt.w	r2, r2, #2
 80127e2:	9307      	strge	r3, [sp, #28]
 80127e4:	9307      	strlt	r3, [sp, #28]
 80127e6:	bfb8      	it	lt
 80127e8:	9204      	strlt	r2, [sp, #16]
 80127ea:	7823      	ldrb	r3, [r4, #0]
 80127ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80127ee:	d10a      	bne.n	8012806 <_vfiprintf_r+0x156>
 80127f0:	7863      	ldrb	r3, [r4, #1]
 80127f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80127f4:	d132      	bne.n	801285c <_vfiprintf_r+0x1ac>
 80127f6:	9b03      	ldr	r3, [sp, #12]
 80127f8:	1d1a      	adds	r2, r3, #4
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	9203      	str	r2, [sp, #12]
 80127fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012802:	3402      	adds	r4, #2
 8012804:	9305      	str	r3, [sp, #20]
 8012806:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80128dc <_vfiprintf_r+0x22c>
 801280a:	7821      	ldrb	r1, [r4, #0]
 801280c:	2203      	movs	r2, #3
 801280e:	4650      	mov	r0, sl
 8012810:	f7ed fd06 	bl	8000220 <memchr>
 8012814:	b138      	cbz	r0, 8012826 <_vfiprintf_r+0x176>
 8012816:	9b04      	ldr	r3, [sp, #16]
 8012818:	eba0 000a 	sub.w	r0, r0, sl
 801281c:	2240      	movs	r2, #64	@ 0x40
 801281e:	4082      	lsls	r2, r0
 8012820:	4313      	orrs	r3, r2
 8012822:	3401      	adds	r4, #1
 8012824:	9304      	str	r3, [sp, #16]
 8012826:	f814 1b01 	ldrb.w	r1, [r4], #1
 801282a:	4829      	ldr	r0, [pc, #164]	@ (80128d0 <_vfiprintf_r+0x220>)
 801282c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012830:	2206      	movs	r2, #6
 8012832:	f7ed fcf5 	bl	8000220 <memchr>
 8012836:	2800      	cmp	r0, #0
 8012838:	d03f      	beq.n	80128ba <_vfiprintf_r+0x20a>
 801283a:	4b26      	ldr	r3, [pc, #152]	@ (80128d4 <_vfiprintf_r+0x224>)
 801283c:	bb1b      	cbnz	r3, 8012886 <_vfiprintf_r+0x1d6>
 801283e:	9b03      	ldr	r3, [sp, #12]
 8012840:	3307      	adds	r3, #7
 8012842:	f023 0307 	bic.w	r3, r3, #7
 8012846:	3308      	adds	r3, #8
 8012848:	9303      	str	r3, [sp, #12]
 801284a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801284c:	443b      	add	r3, r7
 801284e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012850:	e76a      	b.n	8012728 <_vfiprintf_r+0x78>
 8012852:	fb0c 3202 	mla	r2, ip, r2, r3
 8012856:	460c      	mov	r4, r1
 8012858:	2001      	movs	r0, #1
 801285a:	e7a8      	b.n	80127ae <_vfiprintf_r+0xfe>
 801285c:	2300      	movs	r3, #0
 801285e:	3401      	adds	r4, #1
 8012860:	9305      	str	r3, [sp, #20]
 8012862:	4619      	mov	r1, r3
 8012864:	f04f 0c0a 	mov.w	ip, #10
 8012868:	4620      	mov	r0, r4
 801286a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801286e:	3a30      	subs	r2, #48	@ 0x30
 8012870:	2a09      	cmp	r2, #9
 8012872:	d903      	bls.n	801287c <_vfiprintf_r+0x1cc>
 8012874:	2b00      	cmp	r3, #0
 8012876:	d0c6      	beq.n	8012806 <_vfiprintf_r+0x156>
 8012878:	9105      	str	r1, [sp, #20]
 801287a:	e7c4      	b.n	8012806 <_vfiprintf_r+0x156>
 801287c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012880:	4604      	mov	r4, r0
 8012882:	2301      	movs	r3, #1
 8012884:	e7f0      	b.n	8012868 <_vfiprintf_r+0x1b8>
 8012886:	ab03      	add	r3, sp, #12
 8012888:	9300      	str	r3, [sp, #0]
 801288a:	462a      	mov	r2, r5
 801288c:	4b12      	ldr	r3, [pc, #72]	@ (80128d8 <_vfiprintf_r+0x228>)
 801288e:	a904      	add	r1, sp, #16
 8012890:	4630      	mov	r0, r6
 8012892:	f7fd fb6b 	bl	800ff6c <_printf_float>
 8012896:	4607      	mov	r7, r0
 8012898:	1c78      	adds	r0, r7, #1
 801289a:	d1d6      	bne.n	801284a <_vfiprintf_r+0x19a>
 801289c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801289e:	07d9      	lsls	r1, r3, #31
 80128a0:	d405      	bmi.n	80128ae <_vfiprintf_r+0x1fe>
 80128a2:	89ab      	ldrh	r3, [r5, #12]
 80128a4:	059a      	lsls	r2, r3, #22
 80128a6:	d402      	bmi.n	80128ae <_vfiprintf_r+0x1fe>
 80128a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80128aa:	f7fe f8a1 	bl	80109f0 <__retarget_lock_release_recursive>
 80128ae:	89ab      	ldrh	r3, [r5, #12]
 80128b0:	065b      	lsls	r3, r3, #25
 80128b2:	f53f af1f 	bmi.w	80126f4 <_vfiprintf_r+0x44>
 80128b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128b8:	e71e      	b.n	80126f8 <_vfiprintf_r+0x48>
 80128ba:	ab03      	add	r3, sp, #12
 80128bc:	9300      	str	r3, [sp, #0]
 80128be:	462a      	mov	r2, r5
 80128c0:	4b05      	ldr	r3, [pc, #20]	@ (80128d8 <_vfiprintf_r+0x228>)
 80128c2:	a904      	add	r1, sp, #16
 80128c4:	4630      	mov	r0, r6
 80128c6:	f7fd fde9 	bl	801049c <_printf_i>
 80128ca:	e7e4      	b.n	8012896 <_vfiprintf_r+0x1e6>
 80128cc:	0801304d 	.word	0x0801304d
 80128d0:	08013057 	.word	0x08013057
 80128d4:	0800ff6d 	.word	0x0800ff6d
 80128d8:	0801268b 	.word	0x0801268b
 80128dc:	08013053 	.word	0x08013053

080128e0 <__swbuf_r>:
 80128e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128e2:	460e      	mov	r6, r1
 80128e4:	4614      	mov	r4, r2
 80128e6:	4605      	mov	r5, r0
 80128e8:	b118      	cbz	r0, 80128f2 <__swbuf_r+0x12>
 80128ea:	6a03      	ldr	r3, [r0, #32]
 80128ec:	b90b      	cbnz	r3, 80128f2 <__swbuf_r+0x12>
 80128ee:	f7fd ff81 	bl	80107f4 <__sinit>
 80128f2:	69a3      	ldr	r3, [r4, #24]
 80128f4:	60a3      	str	r3, [r4, #8]
 80128f6:	89a3      	ldrh	r3, [r4, #12]
 80128f8:	071a      	lsls	r2, r3, #28
 80128fa:	d501      	bpl.n	8012900 <__swbuf_r+0x20>
 80128fc:	6923      	ldr	r3, [r4, #16]
 80128fe:	b943      	cbnz	r3, 8012912 <__swbuf_r+0x32>
 8012900:	4621      	mov	r1, r4
 8012902:	4628      	mov	r0, r5
 8012904:	f000 f82a 	bl	801295c <__swsetup_r>
 8012908:	b118      	cbz	r0, 8012912 <__swbuf_r+0x32>
 801290a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801290e:	4638      	mov	r0, r7
 8012910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012912:	6823      	ldr	r3, [r4, #0]
 8012914:	6922      	ldr	r2, [r4, #16]
 8012916:	1a98      	subs	r0, r3, r2
 8012918:	6963      	ldr	r3, [r4, #20]
 801291a:	b2f6      	uxtb	r6, r6
 801291c:	4283      	cmp	r3, r0
 801291e:	4637      	mov	r7, r6
 8012920:	dc05      	bgt.n	801292e <__swbuf_r+0x4e>
 8012922:	4621      	mov	r1, r4
 8012924:	4628      	mov	r0, r5
 8012926:	f7ff f98f 	bl	8011c48 <_fflush_r>
 801292a:	2800      	cmp	r0, #0
 801292c:	d1ed      	bne.n	801290a <__swbuf_r+0x2a>
 801292e:	68a3      	ldr	r3, [r4, #8]
 8012930:	3b01      	subs	r3, #1
 8012932:	60a3      	str	r3, [r4, #8]
 8012934:	6823      	ldr	r3, [r4, #0]
 8012936:	1c5a      	adds	r2, r3, #1
 8012938:	6022      	str	r2, [r4, #0]
 801293a:	701e      	strb	r6, [r3, #0]
 801293c:	6962      	ldr	r2, [r4, #20]
 801293e:	1c43      	adds	r3, r0, #1
 8012940:	429a      	cmp	r2, r3
 8012942:	d004      	beq.n	801294e <__swbuf_r+0x6e>
 8012944:	89a3      	ldrh	r3, [r4, #12]
 8012946:	07db      	lsls	r3, r3, #31
 8012948:	d5e1      	bpl.n	801290e <__swbuf_r+0x2e>
 801294a:	2e0a      	cmp	r6, #10
 801294c:	d1df      	bne.n	801290e <__swbuf_r+0x2e>
 801294e:	4621      	mov	r1, r4
 8012950:	4628      	mov	r0, r5
 8012952:	f7ff f979 	bl	8011c48 <_fflush_r>
 8012956:	2800      	cmp	r0, #0
 8012958:	d0d9      	beq.n	801290e <__swbuf_r+0x2e>
 801295a:	e7d6      	b.n	801290a <__swbuf_r+0x2a>

0801295c <__swsetup_r>:
 801295c:	b538      	push	{r3, r4, r5, lr}
 801295e:	4b29      	ldr	r3, [pc, #164]	@ (8012a04 <__swsetup_r+0xa8>)
 8012960:	4605      	mov	r5, r0
 8012962:	6818      	ldr	r0, [r3, #0]
 8012964:	460c      	mov	r4, r1
 8012966:	b118      	cbz	r0, 8012970 <__swsetup_r+0x14>
 8012968:	6a03      	ldr	r3, [r0, #32]
 801296a:	b90b      	cbnz	r3, 8012970 <__swsetup_r+0x14>
 801296c:	f7fd ff42 	bl	80107f4 <__sinit>
 8012970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012974:	0719      	lsls	r1, r3, #28
 8012976:	d422      	bmi.n	80129be <__swsetup_r+0x62>
 8012978:	06da      	lsls	r2, r3, #27
 801297a:	d407      	bmi.n	801298c <__swsetup_r+0x30>
 801297c:	2209      	movs	r2, #9
 801297e:	602a      	str	r2, [r5, #0]
 8012980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012984:	81a3      	strh	r3, [r4, #12]
 8012986:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801298a:	e033      	b.n	80129f4 <__swsetup_r+0x98>
 801298c:	0758      	lsls	r0, r3, #29
 801298e:	d512      	bpl.n	80129b6 <__swsetup_r+0x5a>
 8012990:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012992:	b141      	cbz	r1, 80129a6 <__swsetup_r+0x4a>
 8012994:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012998:	4299      	cmp	r1, r3
 801299a:	d002      	beq.n	80129a2 <__swsetup_r+0x46>
 801299c:	4628      	mov	r0, r5
 801299e:	f7fe fe83 	bl	80116a8 <_free_r>
 80129a2:	2300      	movs	r3, #0
 80129a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80129a6:	89a3      	ldrh	r3, [r4, #12]
 80129a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80129ac:	81a3      	strh	r3, [r4, #12]
 80129ae:	2300      	movs	r3, #0
 80129b0:	6063      	str	r3, [r4, #4]
 80129b2:	6923      	ldr	r3, [r4, #16]
 80129b4:	6023      	str	r3, [r4, #0]
 80129b6:	89a3      	ldrh	r3, [r4, #12]
 80129b8:	f043 0308 	orr.w	r3, r3, #8
 80129bc:	81a3      	strh	r3, [r4, #12]
 80129be:	6923      	ldr	r3, [r4, #16]
 80129c0:	b94b      	cbnz	r3, 80129d6 <__swsetup_r+0x7a>
 80129c2:	89a3      	ldrh	r3, [r4, #12]
 80129c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80129c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80129cc:	d003      	beq.n	80129d6 <__swsetup_r+0x7a>
 80129ce:	4621      	mov	r1, r4
 80129d0:	4628      	mov	r0, r5
 80129d2:	f000 f83f 	bl	8012a54 <__smakebuf_r>
 80129d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129da:	f013 0201 	ands.w	r2, r3, #1
 80129de:	d00a      	beq.n	80129f6 <__swsetup_r+0x9a>
 80129e0:	2200      	movs	r2, #0
 80129e2:	60a2      	str	r2, [r4, #8]
 80129e4:	6962      	ldr	r2, [r4, #20]
 80129e6:	4252      	negs	r2, r2
 80129e8:	61a2      	str	r2, [r4, #24]
 80129ea:	6922      	ldr	r2, [r4, #16]
 80129ec:	b942      	cbnz	r2, 8012a00 <__swsetup_r+0xa4>
 80129ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80129f2:	d1c5      	bne.n	8012980 <__swsetup_r+0x24>
 80129f4:	bd38      	pop	{r3, r4, r5, pc}
 80129f6:	0799      	lsls	r1, r3, #30
 80129f8:	bf58      	it	pl
 80129fa:	6962      	ldrpl	r2, [r4, #20]
 80129fc:	60a2      	str	r2, [r4, #8]
 80129fe:	e7f4      	b.n	80129ea <__swsetup_r+0x8e>
 8012a00:	2000      	movs	r0, #0
 8012a02:	e7f7      	b.n	80129f4 <__swsetup_r+0x98>
 8012a04:	20000194 	.word	0x20000194

08012a08 <__swhatbuf_r>:
 8012a08:	b570      	push	{r4, r5, r6, lr}
 8012a0a:	460c      	mov	r4, r1
 8012a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a10:	2900      	cmp	r1, #0
 8012a12:	b096      	sub	sp, #88	@ 0x58
 8012a14:	4615      	mov	r5, r2
 8012a16:	461e      	mov	r6, r3
 8012a18:	da0d      	bge.n	8012a36 <__swhatbuf_r+0x2e>
 8012a1a:	89a3      	ldrh	r3, [r4, #12]
 8012a1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012a20:	f04f 0100 	mov.w	r1, #0
 8012a24:	bf14      	ite	ne
 8012a26:	2340      	movne	r3, #64	@ 0x40
 8012a28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	6031      	str	r1, [r6, #0]
 8012a30:	602b      	str	r3, [r5, #0]
 8012a32:	b016      	add	sp, #88	@ 0x58
 8012a34:	bd70      	pop	{r4, r5, r6, pc}
 8012a36:	466a      	mov	r2, sp
 8012a38:	f000 f848 	bl	8012acc <_fstat_r>
 8012a3c:	2800      	cmp	r0, #0
 8012a3e:	dbec      	blt.n	8012a1a <__swhatbuf_r+0x12>
 8012a40:	9901      	ldr	r1, [sp, #4]
 8012a42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012a46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012a4a:	4259      	negs	r1, r3
 8012a4c:	4159      	adcs	r1, r3
 8012a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a52:	e7eb      	b.n	8012a2c <__swhatbuf_r+0x24>

08012a54 <__smakebuf_r>:
 8012a54:	898b      	ldrh	r3, [r1, #12]
 8012a56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a58:	079d      	lsls	r5, r3, #30
 8012a5a:	4606      	mov	r6, r0
 8012a5c:	460c      	mov	r4, r1
 8012a5e:	d507      	bpl.n	8012a70 <__smakebuf_r+0x1c>
 8012a60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a64:	6023      	str	r3, [r4, #0]
 8012a66:	6123      	str	r3, [r4, #16]
 8012a68:	2301      	movs	r3, #1
 8012a6a:	6163      	str	r3, [r4, #20]
 8012a6c:	b003      	add	sp, #12
 8012a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a70:	ab01      	add	r3, sp, #4
 8012a72:	466a      	mov	r2, sp
 8012a74:	f7ff ffc8 	bl	8012a08 <__swhatbuf_r>
 8012a78:	9f00      	ldr	r7, [sp, #0]
 8012a7a:	4605      	mov	r5, r0
 8012a7c:	4639      	mov	r1, r7
 8012a7e:	4630      	mov	r0, r6
 8012a80:	f7fe ffde 	bl	8011a40 <_malloc_r>
 8012a84:	b948      	cbnz	r0, 8012a9a <__smakebuf_r+0x46>
 8012a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a8a:	059a      	lsls	r2, r3, #22
 8012a8c:	d4ee      	bmi.n	8012a6c <__smakebuf_r+0x18>
 8012a8e:	f023 0303 	bic.w	r3, r3, #3
 8012a92:	f043 0302 	orr.w	r3, r3, #2
 8012a96:	81a3      	strh	r3, [r4, #12]
 8012a98:	e7e2      	b.n	8012a60 <__smakebuf_r+0xc>
 8012a9a:	89a3      	ldrh	r3, [r4, #12]
 8012a9c:	6020      	str	r0, [r4, #0]
 8012a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012aa2:	81a3      	strh	r3, [r4, #12]
 8012aa4:	9b01      	ldr	r3, [sp, #4]
 8012aa6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012aaa:	b15b      	cbz	r3, 8012ac4 <__smakebuf_r+0x70>
 8012aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	f000 f81d 	bl	8012af0 <_isatty_r>
 8012ab6:	b128      	cbz	r0, 8012ac4 <__smakebuf_r+0x70>
 8012ab8:	89a3      	ldrh	r3, [r4, #12]
 8012aba:	f023 0303 	bic.w	r3, r3, #3
 8012abe:	f043 0301 	orr.w	r3, r3, #1
 8012ac2:	81a3      	strh	r3, [r4, #12]
 8012ac4:	89a3      	ldrh	r3, [r4, #12]
 8012ac6:	431d      	orrs	r5, r3
 8012ac8:	81a5      	strh	r5, [r4, #12]
 8012aca:	e7cf      	b.n	8012a6c <__smakebuf_r+0x18>

08012acc <_fstat_r>:
 8012acc:	b538      	push	{r3, r4, r5, lr}
 8012ace:	4d07      	ldr	r5, [pc, #28]	@ (8012aec <_fstat_r+0x20>)
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	4608      	mov	r0, r1
 8012ad6:	4611      	mov	r1, r2
 8012ad8:	602b      	str	r3, [r5, #0]
 8012ada:	f7ef fc01 	bl	80022e0 <_fstat>
 8012ade:	1c43      	adds	r3, r0, #1
 8012ae0:	d102      	bne.n	8012ae8 <_fstat_r+0x1c>
 8012ae2:	682b      	ldr	r3, [r5, #0]
 8012ae4:	b103      	cbz	r3, 8012ae8 <_fstat_r+0x1c>
 8012ae6:	6023      	str	r3, [r4, #0]
 8012ae8:	bd38      	pop	{r3, r4, r5, pc}
 8012aea:	bf00      	nop
 8012aec:	20010410 	.word	0x20010410

08012af0 <_isatty_r>:
 8012af0:	b538      	push	{r3, r4, r5, lr}
 8012af2:	4d06      	ldr	r5, [pc, #24]	@ (8012b0c <_isatty_r+0x1c>)
 8012af4:	2300      	movs	r3, #0
 8012af6:	4604      	mov	r4, r0
 8012af8:	4608      	mov	r0, r1
 8012afa:	602b      	str	r3, [r5, #0]
 8012afc:	f7ef fc00 	bl	8002300 <_isatty>
 8012b00:	1c43      	adds	r3, r0, #1
 8012b02:	d102      	bne.n	8012b0a <_isatty_r+0x1a>
 8012b04:	682b      	ldr	r3, [r5, #0]
 8012b06:	b103      	cbz	r3, 8012b0a <_isatty_r+0x1a>
 8012b08:	6023      	str	r3, [r4, #0]
 8012b0a:	bd38      	pop	{r3, r4, r5, pc}
 8012b0c:	20010410 	.word	0x20010410

08012b10 <_raise_r>:
 8012b10:	291f      	cmp	r1, #31
 8012b12:	b538      	push	{r3, r4, r5, lr}
 8012b14:	4605      	mov	r5, r0
 8012b16:	460c      	mov	r4, r1
 8012b18:	d904      	bls.n	8012b24 <_raise_r+0x14>
 8012b1a:	2316      	movs	r3, #22
 8012b1c:	6003      	str	r3, [r0, #0]
 8012b1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012b22:	bd38      	pop	{r3, r4, r5, pc}
 8012b24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012b26:	b112      	cbz	r2, 8012b2e <_raise_r+0x1e>
 8012b28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b2c:	b94b      	cbnz	r3, 8012b42 <_raise_r+0x32>
 8012b2e:	4628      	mov	r0, r5
 8012b30:	f000 f830 	bl	8012b94 <_getpid_r>
 8012b34:	4622      	mov	r2, r4
 8012b36:	4601      	mov	r1, r0
 8012b38:	4628      	mov	r0, r5
 8012b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b3e:	f000 b817 	b.w	8012b70 <_kill_r>
 8012b42:	2b01      	cmp	r3, #1
 8012b44:	d00a      	beq.n	8012b5c <_raise_r+0x4c>
 8012b46:	1c59      	adds	r1, r3, #1
 8012b48:	d103      	bne.n	8012b52 <_raise_r+0x42>
 8012b4a:	2316      	movs	r3, #22
 8012b4c:	6003      	str	r3, [r0, #0]
 8012b4e:	2001      	movs	r0, #1
 8012b50:	e7e7      	b.n	8012b22 <_raise_r+0x12>
 8012b52:	2100      	movs	r1, #0
 8012b54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012b58:	4620      	mov	r0, r4
 8012b5a:	4798      	blx	r3
 8012b5c:	2000      	movs	r0, #0
 8012b5e:	e7e0      	b.n	8012b22 <_raise_r+0x12>

08012b60 <raise>:
 8012b60:	4b02      	ldr	r3, [pc, #8]	@ (8012b6c <raise+0xc>)
 8012b62:	4601      	mov	r1, r0
 8012b64:	6818      	ldr	r0, [r3, #0]
 8012b66:	f7ff bfd3 	b.w	8012b10 <_raise_r>
 8012b6a:	bf00      	nop
 8012b6c:	20000194 	.word	0x20000194

08012b70 <_kill_r>:
 8012b70:	b538      	push	{r3, r4, r5, lr}
 8012b72:	4d07      	ldr	r5, [pc, #28]	@ (8012b90 <_kill_r+0x20>)
 8012b74:	2300      	movs	r3, #0
 8012b76:	4604      	mov	r4, r0
 8012b78:	4608      	mov	r0, r1
 8012b7a:	4611      	mov	r1, r2
 8012b7c:	602b      	str	r3, [r5, #0]
 8012b7e:	f7ef fb4f 	bl	8002220 <_kill>
 8012b82:	1c43      	adds	r3, r0, #1
 8012b84:	d102      	bne.n	8012b8c <_kill_r+0x1c>
 8012b86:	682b      	ldr	r3, [r5, #0]
 8012b88:	b103      	cbz	r3, 8012b8c <_kill_r+0x1c>
 8012b8a:	6023      	str	r3, [r4, #0]
 8012b8c:	bd38      	pop	{r3, r4, r5, pc}
 8012b8e:	bf00      	nop
 8012b90:	20010410 	.word	0x20010410

08012b94 <_getpid_r>:
 8012b94:	f7ef bb3c 	b.w	8002210 <_getpid>

08012b98 <_init>:
 8012b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b9a:	bf00      	nop
 8012b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b9e:	bc08      	pop	{r3}
 8012ba0:	469e      	mov	lr, r3
 8012ba2:	4770      	bx	lr

08012ba4 <_fini>:
 8012ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ba6:	bf00      	nop
 8012ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012baa:	bc08      	pop	{r3}
 8012bac:	469e      	mov	lr, r3
 8012bae:	4770      	bx	lr
